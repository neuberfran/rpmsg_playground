
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

void i2c_dump_msgs(const char *name, const struct i2c_msg *msgs,
		   uint8_t num_msgs, uint16_t addr)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	b8 4a 00 20 29 5e 00 00 4f 11 01 00 e1 5d 00 00     .J. )^..O....]..
  10:	e1 5d 00 00 e1 5d 00 00 e1 5d 00 00 e1 5d 00 00     .]...]...]...]..
	...
  2c:	89 4e 00 00 e1 5d 00 00 00 00 00 00 2d 4e 00 00     .N...]......-N..
  3c:	e1 5d 00 00                                         .]..

00000040 <_irq_vector_table>:
  40:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  50:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  60:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  70:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  80:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  90:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  a0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  b0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  c0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  d0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  e0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
  f0:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 100:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 110:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 120:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 130:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 140:	19 4f 00 00 19 4f 00 00 19 4f 00 00 19 4f 00 00     .O...O...O...O..
 150:	19 4f 00 00                                         .O..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <__data_size+0x2c>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <__data_size+0x2c>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <__data_size+0x2c>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
     3ec:	d106      	bne.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <ep_recv>:
{
    k_sem_give(&bound_sem);
}

static void ep_recv(const void *data, size_t len, void *priv)
{
     424:	b508      	push	{r3, lr}
     426:	460a      	mov	r2, r1
    memcpy(&remote_reply, data, len);
     428:	4601      	mov	r1, r0
     42a:	4803      	ldr	r0, [pc, #12]	; (438 <ep_recv+0x14>)
     42c:	f010 ff76 	bl	1131c <memcpy>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     430:	4802      	ldr	r0, [pc, #8]	; (43c <ep_recv+0x18>)
     432:	f00c fd5d 	bl	cef0 <z_impl_k_sem_give>
    k_sem_give(&bound_sem);
}
     436:	bd08      	pop	{r3, pc}
     438:	200019d0 	.word	0x200019d0
     43c:	200002e0 	.word	0x200002e0

00000440 <ep_bound>:
{
     440:	b508      	push	{r3, lr}
     442:	4802      	ldr	r0, [pc, #8]	; (44c <ep_bound+0xc>)
     444:	f00c fd54 	bl	cef0 <z_impl_k_sem_give>
}
     448:	bd08      	pop	{r3, pc}
     44a:	bf00      	nop
     44c:	200002e0 	.word	0x200002e0

00000450 <main>:
};

// k_sem_init(&bound_sem, 0, 1);

int main(void)
{
     450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     454:	b0af      	sub	sp, #188	; 0xbc
     456:	af00      	add	r7, sp, #0
    struct ipc_ept ep;
    int ret;

  //  k_sem_give(&bound_sem);

    printk("BH1749 Example Thingy:53! %s\n", CONFIG_BOARD);
     458:	49ba      	ldr	r1, [pc, #744]	; (744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>)
     45a:	48bb      	ldr	r0, [pc, #748]	; (748 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x260>)
     45c:	f00f fcbf 	bl	fdde <printk>
    LOG_INF("ipc_service_open_instance() failure");
     460:	4bba      	ldr	r3, [pc, #744]	; (74c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x264>)
     462:	627b      	str	r3, [r7, #36]	; 0x24
     464:	2302      	movs	r3, #2
     466:	713b      	strb	r3, [r7, #4]
     468:	2300      	movs	r3, #0
     46a:	717b      	strb	r3, [r7, #5]
     46c:	71bb      	strb	r3, [r7, #6]
     46e:	71fb      	strb	r3, [r7, #7]
     470:	687a      	ldr	r2, [r7, #4]
     472:	623a      	str	r2, [r7, #32]
     474:	4619      	mov	r1, r3
     476:	f363 0100 	bfi	r1, r3, #0, #1
     47a:	f363 0141 	bfi	r1, r3, #1, #1
     47e:	f363 0182 	bfi	r1, r3, #2, #1
     482:	f363 01c5 	bfi	r1, r3, #3, #3
     486:	2203      	movs	r2, #3
     488:	f362 1188 	bfi	r1, r2, #6, #3
     48c:	2208      	movs	r2, #8
     48e:	f362 2152 	bfi	r1, r2, #9, #10
     492:	f363 41de 	bfi	r1, r3, #19, #12
     496:	f363 71df 	bfi	r1, r3, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     49a:	f107 0220 	add.w	r2, r7, #32
     49e:	48ac      	ldr	r0, [pc, #688]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     4a0:	f003 f8e2 	bl	3668 <z_impl_z_log_msg_static_create>

    ret = ipc_service_open_instance(ipc0_instance);
     4a4:	48ab      	ldr	r0, [pc, #684]	; (754 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26c>)
     4a6:	f003 fc97 	bl	3dd8 <ipc_service_open_instance>
    if ((ret < 0) && (ret != -EALREADY))
     4aa:	f1b0 0800 	subs.w	r8, r0, #0
     4ae:	da03      	bge.n	4b8 <main+0x68>
     4b0:	f118 0f78 	cmn.w	r8, #120	; 0x78
     4b4:	f040 808a 	bne.w	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
    {
        LOG_INF("ipc_service_open_instance() failure");
        return ret;
    }

    ret = ipc_service_register_endpoint(ipc0_instance, &ep, &ep_cfg);
     4b8:	4aa7      	ldr	r2, [pc, #668]	; (758 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x270>)
     4ba:	f107 0108 	add.w	r1, r7, #8
     4be:	48a5      	ldr	r0, [pc, #660]	; (754 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26c>)
     4c0:	f003 fcee 	bl	3ea0 <ipc_service_register_endpoint>
    if (ret < 0)
     4c4:	f1b0 0800 	subs.w	r8, r0, #0
     4c8:	f2c0 80a3 	blt.w	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
    {
        LOG_INF("ipc_service_register_endpoint() failure");
        return ret;
    }

    LOG_INF("ff1 failure");
     4cc:	4ba3      	ldr	r3, [pc, #652]	; (75c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x274>)
     4ce:	657b      	str	r3, [r7, #84]	; 0x54
     4d0:	f04f 0b02 	mov.w	fp, #2
     4d4:	f887 b004 	strb.w	fp, [r7, #4]
     4d8:	f04f 0800 	mov.w	r8, #0
     4dc:	f887 8005 	strb.w	r8, [r7, #5]
     4e0:	f887 8006 	strb.w	r8, [r7, #6]
     4e4:	f887 8007 	strb.w	r8, [r7, #7]
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	653b      	str	r3, [r7, #80]	; 0x50
     4ec:	4641      	mov	r1, r8
     4ee:	f368 0100 	bfi	r1, r8, #0, #1
     4f2:	f368 0141 	bfi	r1, r8, #1, #1
     4f6:	f368 0182 	bfi	r1, r8, #2, #1
     4fa:	f368 01c5 	bfi	r1, r8, #3, #3
     4fe:	f04f 0a03 	mov.w	sl, #3
     502:	f36a 1188 	bfi	r1, sl, #6, #3
     506:	f04f 0908 	mov.w	r9, #8
     50a:	f369 2152 	bfi	r1, r9, #9, #10
     50e:	f368 41de 	bfi	r1, r8, #19, #12
     512:	f368 71df 	bfi	r1, r8, #31, #1
     516:	4643      	mov	r3, r8
     518:	f107 0250 	add.w	r2, r7, #80	; 0x50
     51c:	488c      	ldr	r0, [pc, #560]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     51e:	f003 f8a3 	bl	3668 <z_impl_z_log_msg_static_create>
    //    k_sem_init(&bound_sem, 0, 1);
//    LOG_INF("FF0 FAILURE", k_sem_take(&bound_sem, K_MSEC(50)));
 //   k_sem_take(&bound_sem, K_FOREVER);
    LOG_INF("ff2 failure");
     522:	4b8f      	ldr	r3, [pc, #572]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     524:	66fb      	str	r3, [r7, #108]	; 0x6c
     526:	f887 b004 	strb.w	fp, [r7, #4]
     52a:	f887 8005 	strb.w	r8, [r7, #5]
     52e:	f887 8006 	strb.w	r8, [r7, #6]
     532:	f887 8007 	strb.w	r8, [r7, #7]
     536:	687b      	ldr	r3, [r7, #4]
     538:	66bb      	str	r3, [r7, #104]	; 0x68
     53a:	4641      	mov	r1, r8
     53c:	f368 0100 	bfi	r1, r8, #0, #1
     540:	f368 0141 	bfi	r1, r8, #1, #1
     544:	f368 0182 	bfi	r1, r8, #2, #1
     548:	f368 01c5 	bfi	r1, r8, #3, #3
     54c:	f36a 1188 	bfi	r1, sl, #6, #3
     550:	f369 2152 	bfi	r1, r9, #9, #10
     554:	f368 41de 	bfi	r1, r8, #19, #12
     558:	f368 71df 	bfi	r1, r8, #31, #1
     55c:	4643      	mov	r3, r8
     55e:	f107 0268 	add.w	r2, r7, #104	; 0x68
     562:	487b      	ldr	r0, [pc, #492]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     564:	f003 f880 	bl	3668 <z_impl_z_log_msg_static_create>
    LOG_INF("ipc service is ready to communicate!");
     568:	4b7e      	ldr	r3, [pc, #504]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     56a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     56e:	f887 b004 	strb.w	fp, [r7, #4]
     572:	f887 8005 	strb.w	r8, [r7, #5]
     576:	f887 8006 	strb.w	r8, [r7, #6]
     57a:	f887 8007 	strb.w	r8, [r7, #7]
     57e:	687b      	ldr	r3, [r7, #4]
     580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
     584:	4641      	mov	r1, r8
     586:	f368 0100 	bfi	r1, r8, #0, #1
     58a:	f368 0141 	bfi	r1, r8, #1, #1
     58e:	f368 0182 	bfi	r1, r8, #2, #1
     592:	f368 01c5 	bfi	r1, r8, #3, #3
     596:	f36a 1188 	bfi	r1, sl, #6, #3
     59a:	f369 2152 	bfi	r1, r9, #9, #10
     59e:	f368 41de 	bfi	r1, r8, #19, #12
     5a2:	f368 71df 	bfi	r1, r8, #31, #1
     5a6:	4643      	mov	r3, r8
     5a8:	f107 0280 	add.w	r2, r7, #128	; 0x80
     5ac:	4868      	ldr	r0, [pc, #416]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     5ae:	f003 f85b 	bl	3668 <z_impl_z_log_msg_static_create>

    strcpy(remote_command.command_string, "AT+IPC_COMMAND\n\r");
     5b2:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>
     5b6:	496d      	ldr	r1, [pc, #436]	; (76c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x284>)
     5b8:	4640      	mov	r0, r8
     5ba:	f010 fe5a 	bl	11272 <strcpy>
    remote_command.size = strlen(remote_command.command_string) + 1;
     5be:	4640      	mov	r0, r8
     5c0:	f010 fe7b 	bl	112ba <strlen>
     5c4:	3001      	adds	r0, #1
     5c6:	f848 0c04 	str.w	r0, [r8, #-4]
     5ca:	e105      	b.n	7d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f0>
        LOG_INF("ipc_service_open_instance() failure");
     5cc:	4b5f      	ldr	r3, [pc, #380]	; (74c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x264>)
     5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
     5d0:	2302      	movs	r3, #2
     5d2:	713b      	strb	r3, [r7, #4]
     5d4:	2300      	movs	r3, #0
     5d6:	717b      	strb	r3, [r7, #5]
     5d8:	71bb      	strb	r3, [r7, #6]
     5da:	71fb      	strb	r3, [r7, #7]
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	63ba      	str	r2, [r7, #56]	; 0x38
     5e0:	4619      	mov	r1, r3
     5e2:	f363 0100 	bfi	r1, r3, #0, #1
     5e6:	f363 0141 	bfi	r1, r3, #1, #1
     5ea:	f363 0182 	bfi	r1, r3, #2, #1
     5ee:	f363 01c5 	bfi	r1, r3, #3, #3
     5f2:	2203      	movs	r2, #3
     5f4:	f362 1188 	bfi	r1, r2, #6, #3
     5f8:	2208      	movs	r2, #8
     5fa:	f362 2152 	bfi	r1, r2, #9, #10
     5fe:	f363 41de 	bfi	r1, r3, #19, #12
     602:	f363 71df 	bfi	r1, r3, #31, #1
     606:	f107 0238 	add.w	r2, r7, #56	; 0x38
     60a:	4851      	ldr	r0, [pc, #324]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     60c:	f003 f82c 	bl	3668 <z_impl_z_log_msg_static_create>
        return ret;
     610:	e023      	b.n	65a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x172>
        LOG_INF("ipc_service_register_endpoint() failure");
     612:	4b57      	ldr	r3, [pc, #348]	; (770 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x288>)
     614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     618:	2302      	movs	r3, #2
     61a:	713b      	strb	r3, [r7, #4]
     61c:	2300      	movs	r3, #0
     61e:	717b      	strb	r3, [r7, #5]
     620:	71bb      	strb	r3, [r7, #6]
     622:	71fb      	strb	r3, [r7, #7]
     624:	687a      	ldr	r2, [r7, #4]
     626:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
     62a:	4619      	mov	r1, r3
     62c:	f363 0100 	bfi	r1, r3, #0, #1
     630:	f363 0141 	bfi	r1, r3, #1, #1
     634:	f363 0182 	bfi	r1, r3, #2, #1
     638:	f363 01c5 	bfi	r1, r3, #3, #3
     63c:	2203      	movs	r2, #3
     63e:	f362 1188 	bfi	r1, r2, #6, #3
     642:	2208      	movs	r2, #8
     644:	f362 2152 	bfi	r1, r2, #9, #10
     648:	f363 41de 	bfi	r1, r3, #19, #12
     64c:	f363 71df 	bfi	r1, r3, #31, #1
     650:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
     654:	483e      	ldr	r0, [pc, #248]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     656:	f003 f807 	bl	3668 <z_impl_z_log_msg_static_create>
     //   k_sem_take(&bound_sem, K_FOREVER);
        LOG_INF("received from remote CPU the response: %s", remote_reply.command_string);
        k_sleep(K_MSEC(1000));
    }
    return 0;
}
     65a:	4640      	mov	r0, r8
     65c:	37bc      	adds	r7, #188	; 0xbc
     65e:	46bd      	mov	sp, r7
     660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LOG_INF("sending AT command: %s to remote CPU", remote_command.command_string);
     664:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     668:	e0c7      	b.n	7fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x312>
     66a:	4601      	mov	r1, r0
     66c:	2804      	cmp	r0, #4
     66e:	dd03      	ble.n	678 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x190>
     670:	f8df c100 	ldr.w	ip, [pc, #256]	; 774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>
     674:	f8c3 c014 	str.w	ip, [r3, #20]
     678:	f04f 0c02 	mov.w	ip, #2
     67c:	f887 c000 	strb.w	ip, [r7]
     680:	2908      	cmp	r1, #8
     682:	dd01      	ble.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
     684:	4938      	ldr	r1, [pc, #224]	; (768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>)
     686:	6199      	str	r1, [r3, #24]
     688:	f103 011c 	add.w	r1, r3, #28
     68c:	f04f 0c00 	mov.w	ip, #0
     690:	f1bc 0f00 	cmp.w	ip, #0
     694:	f040 80b6 	bne.w	804 <CONFIG_ISR_STACK_SIZE+0x4>
     698:	f10c 0eb8 	add.w	lr, ip, #184	; 0xb8
     69c:	44be      	add	lr, r7
     69e:	f81e ecb8 	ldrb.w	lr, [lr, #-184]
     6a2:	f801 eb01 	strb.w	lr, [r1], #1
     6a6:	f10c 0c01 	add.w	ip, ip, #1
     6aa:	e7f1      	b.n	690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>
     6ac:	f06f 011b 	mvn.w	r1, #27
     6b0:	e0ac      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
            LOG_WRN("No space in the vring buffer retrying...");
     6b2:	4b31      	ldr	r3, [pc, #196]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     6b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
     6b8:	2202      	movs	r2, #2
     6ba:	713a      	strb	r2, [r7, #4]
     6bc:	2300      	movs	r3, #0
     6be:	717b      	strb	r3, [r7, #5]
     6c0:	71bb      	strb	r3, [r7, #6]
     6c2:	71fb      	strb	r3, [r7, #7]
     6c4:	6879      	ldr	r1, [r7, #4]
     6c6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
     6ca:	f363 0600 	bfi	r6, r3, #0, #1
     6ce:	f363 0641 	bfi	r6, r3, #1, #1
     6d2:	f363 0682 	bfi	r6, r3, #2, #1
     6d6:	f363 06c5 	bfi	r6, r3, #3, #3
     6da:	f362 1688 	bfi	r6, r2, #6, #3
     6de:	2208      	movs	r2, #8
     6e0:	f362 2652 	bfi	r6, r2, #9, #10
     6e4:	f363 46de 	bfi	r6, r3, #19, #12
     6e8:	f363 76df 	bfi	r6, r3, #31, #1
     6ec:	f107 0298 	add.w	r2, r7, #152	; 0x98
     6f0:	4631      	mov	r1, r6
     6f2:	4817      	ldr	r0, [pc, #92]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     6f4:	f002 ffb8 	bl	3668 <z_impl_z_log_msg_static_create>
            continue;
     6f8:	e06e      	b.n	7d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f0>
        LOG_INF("received from remote CPU the response: %s", remote_reply.command_string);
     6fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     6fe:	e0b6      	b.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     700:	4601      	mov	r1, r0
     702:	2804      	cmp	r0, #4
     704:	dd03      	ble.n	70e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x226>
     706:	f8df c074 	ldr.w	ip, [pc, #116]	; 77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>
     70a:	f8c3 c014 	str.w	ip, [r3, #20]
     70e:	f04f 0c02 	mov.w	ip, #2
     712:	f887 c000 	strb.w	ip, [r7]
     716:	2908      	cmp	r1, #8
     718:	dd01      	ble.n	71e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x236>
     71a:	4919      	ldr	r1, [pc, #100]	; (780 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x298>)
     71c:	6199      	str	r1, [r3, #24]
     71e:	f103 011c 	add.w	r1, r3, #28
     722:	f04f 0c00 	mov.w	ip, #0
     726:	f1bc 0f00 	cmp.w	ip, #0
     72a:	f040 80a5 	bne.w	878 <CONFIG_ISR_STACK_SIZE+0x78>
     72e:	f10c 0eb8 	add.w	lr, ip, #184	; 0xb8
     732:	44be      	add	lr, r7
     734:	f81e ecb8 	ldrb.w	lr, [lr, #-184]
     738:	f801 eb01 	strb.w	lr, [r1], #1
     73c:	f10c 0c01 	add.w	ip, ip, #1
     740:	e7f1      	b.n	726 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x23e>
     742:	bf00      	nop
     744:	00013b98 	.word	0x00013b98
     748:	00013bb0 	.word	0x00013bb0
     74c:	00013bd0 	.word	0x00013bd0
     750:	00013a74 	.word	0x00013a74
     754:	00013764 	.word	0x00013764
     758:	20000000 	.word	0x20000000
     75c:	00013c1c 	.word	0x00013c1c
     760:	00013c28 	.word	0x00013c28
     764:	00013c34 	.word	0x00013c34
     768:	20001a18 	.word	0x20001a18
     76c:	00013c5c 	.word	0x00013c5c
     770:	00013bf4 	.word	0x00013bf4
     774:	00013c70 	.word	0x00013c70
     778:	00013c98 	.word	0x00013c98
     77c:	00013cc4 	.word	0x00013cc4
     780:	200019d4 	.word	0x200019d4
     784:	f06f 011b 	mvn.w	r1, #27
     788:	b142      	cbz	r2, 79c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b4>
     78a:	2003      	movs	r0, #3
     78c:	7138      	strb	r0, [r7, #4]
     78e:	2000      	movs	r0, #0
     790:	7178      	strb	r0, [r7, #5]
     792:	71b8      	strb	r0, [r7, #6]
     794:	2001      	movs	r0, #1
     796:	71f8      	strb	r0, [r7, #7]
     798:	6878      	ldr	r0, [r7, #4]
     79a:	6118      	str	r0, [r3, #16]
     79c:	f36f 0500 	bfc	r5, #0, #1
     7a0:	f36f 0541 	bfc	r5, #1, #1
     7a4:	f36f 0582 	bfc	r5, #2, #1
     7a8:	f36f 05c5 	bfc	r5, #3, #3
     7ac:	2303      	movs	r3, #3
     7ae:	f363 1588 	bfi	r5, r3, #6, #3
     7b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
     7b6:	f361 2552 	bfi	r5, r1, #9, #10
     7ba:	f36f 45de 	bfc	r5, #19, #12
     7be:	f36f 75df 	bfc	r5, #31, #1
     7c2:	2300      	movs	r3, #0
     7c4:	4629      	mov	r1, r5
     7c6:	482e      	ldr	r0, [pc, #184]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7c8:	f002 ff4e 	bl	3668 <z_impl_z_log_msg_static_create>
     7cc:	46c5      	mov	sp, r8
	return z_impl_k_sleep(timeout);
     7ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     7d2:	2100      	movs	r1, #0
     7d4:	f00e f91a 	bl	ea0c <z_impl_k_sleep>
        ret = ipc_service_send(&ep, &remote_command, sizeof(remote_command));
     7d8:	2244      	movs	r2, #68	; 0x44
     7da:	492a      	ldr	r1, [pc, #168]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7dc:	f107 0008 	add.w	r0, r7, #8
     7e0:	f003 fbc6 	bl	3f70 <ipc_service_send>
     7e4:	4680      	mov	r8, r0
        LOG_INF("sending AT command: %s to remote CPU", remote_command.command_string);
     7e6:	46e9      	mov	r9, sp
     7e8:	2302      	movs	r3, #2
     7ea:	713b      	strb	r3, [r7, #4]
     7ec:	b088      	sub	sp, #32
     7ee:	466b      	mov	r3, sp
     7f0:	f113 0210 	adds.w	r2, r3, #16
     7f4:	f43f af36 	beq.w	664 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17c>
     7f8:	200d      	movs	r0, #13
     7fa:	2a00      	cmp	r2, #0
     7fc:	f47f af35 	bne.w	66a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x182>
     800:	2102      	movs	r1, #2
     802:	7039      	strb	r1, [r7, #0]
     804:	280c      	cmp	r0, #12
     806:	f77f af51 	ble.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     80a:	210d      	movs	r1, #13
     80c:	b142      	cbz	r2, 820 <CONFIG_ISR_STACK_SIZE+0x20>
     80e:	2003      	movs	r0, #3
     810:	7138      	strb	r0, [r7, #4]
     812:	2000      	movs	r0, #0
     814:	7178      	strb	r0, [r7, #5]
     816:	71b8      	strb	r0, [r7, #6]
     818:	2001      	movs	r0, #1
     81a:	71f8      	strb	r0, [r7, #7]
     81c:	6878      	ldr	r0, [r7, #4]
     81e:	6118      	str	r0, [r3, #16]
     820:	f36f 0400 	bfc	r4, #0, #1
     824:	f36f 0441 	bfc	r4, #1, #1
     828:	f36f 0482 	bfc	r4, #2, #1
     82c:	f36f 04c5 	bfc	r4, #3, #3
     830:	2303      	movs	r3, #3
     832:	f363 1488 	bfi	r4, r3, #6, #3
     836:	f3c1 0109 	ubfx	r1, r1, #0, #10
     83a:	f361 2452 	bfi	r4, r1, #9, #10
     83e:	f36f 44de 	bfc	r4, #19, #12
     842:	f36f 74df 	bfc	r4, #31, #1
     846:	2300      	movs	r3, #0
     848:	4621      	mov	r1, r4
     84a:	480d      	ldr	r0, [pc, #52]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     84c:	f002 ff0c 	bl	3668 <z_impl_z_log_msg_static_create>
     850:	46cd      	mov	sp, r9
        if (ret == -ENOMEM)
     852:	f118 0f0c 	cmn.w	r8, #12
     856:	f43f af2c 	beq.w	6b2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ca>
        LOG_INF("received from remote CPU the response: %s", remote_reply.command_string);
     85a:	46e8      	mov	r8, sp
     85c:	2302      	movs	r3, #2
     85e:	713b      	strb	r3, [r7, #4]
     860:	b088      	sub	sp, #32
     862:	466b      	mov	r3, sp
     864:	f113 0210 	adds.w	r2, r3, #16
     868:	f43f af47 	beq.w	6fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x212>
     86c:	200d      	movs	r0, #13
     86e:	2a00      	cmp	r2, #0
     870:	f47f af46 	bne.w	700 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x218>
     874:	2102      	movs	r1, #2
     876:	7039      	strb	r1, [r7, #0]
     878:	280c      	cmp	r0, #12
     87a:	dd83      	ble.n	784 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x29c>
     87c:	210d      	movs	r1, #13
     87e:	e783      	b.n	788 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a0>
     880:	00013a74 	.word	0x00013a74
     884:	20001a14 	.word	0x20001a14

00000888 <get_package_len>:
}

#endif

static size_t get_package_len(void *packaged)
{
     888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(packaged != NULL);
     88a:	4606      	mov	r6, r0
     88c:	b138      	cbz	r0, 89e <get_package_len+0x16>

	uint8_t *buf = packaged;
	uint8_t *start = buf;
	unsigned int args_size, s_nbr, ros_nbr;

	args_size = buf[0] * sizeof(int);
     88e:	7833      	ldrb	r3, [r6, #0]
	s_nbr     = buf[1];
     890:	7875      	ldrb	r5, [r6, #1]
	ros_nbr   = buf[2];
     892:	78b4      	ldrb	r4, [r6, #2]

	/* Move beyond args. */
	buf += args_size;

	/* Move beyond read-only string indexes array. */
	buf += ros_nbr;
     894:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     898:	4434      	add	r4, r6

	/* Move beyond strings appended to the package. */
	for (int i = 0; i < s_nbr; i++) {
     89a:	2700      	movs	r7, #0
     89c:	e012      	b.n	8c4 <get_package_len+0x3c>
	__ASSERT_NO_MSG(packaged != NULL);
     89e:	4c0b      	ldr	r4, [pc, #44]	; (8cc <get_package_len+0x44>)
     8a0:	23c4      	movs	r3, #196	; 0xc4
     8a2:	4622      	mov	r2, r4
     8a4:	490a      	ldr	r1, [pc, #40]	; (8d0 <get_package_len+0x48>)
     8a6:	480b      	ldr	r0, [pc, #44]	; (8d4 <get_package_len+0x4c>)
     8a8:	f00f ff46 	bl	10738 <assert_print>
     8ac:	21c4      	movs	r1, #196	; 0xc4
     8ae:	4620      	mov	r0, r4
     8b0:	f00f ff3b 	bl	1072a <assert_post_action>
     8b4:	e7eb      	b.n	88e <get_package_len+0x6>
		buf++;
     8b6:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
     8b8:	4620      	mov	r0, r4
     8ba:	f010 fcfe 	bl	112ba <strlen>
     8be:	3001      	adds	r0, #1
     8c0:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
     8c2:	3701      	adds	r7, #1
     8c4:	42af      	cmp	r7, r5
     8c6:	d3f6      	bcc.n	8b6 <get_package_len+0x2e>
	}

	return (size_t)(uintptr_t)(buf - start);
}
     8c8:	1ba0      	subs	r0, r4, r6
     8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8cc:	00013cfc 	.word	0x00013cfc
     8d0:	00013d2c 	.word	0x00013d2c
     8d4:	00013d44 	.word	0x00013d44

000008d8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8dc:	b08d      	sub	sp, #52	; 0x34
     8de:	9205      	str	r2, [sp, #20]
     8e0:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     8e2:	4613      	mov	r3, r2
     8e4:	f002 0204 	and.w	r2, r2, #4
     8e8:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     8ea:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     8ee:	f010 0303 	ands.w	r3, r0, #3
     8f2:	9302      	str	r3, [sp, #8]
     8f4:	f040 8252 	bne.w	d9c <cbvprintf_package+0x4c4>
     8f8:	4607      	mov	r7, r0
     8fa:	468a      	mov	sl, r1
     8fc:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     8fe:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     900:	2800      	cmp	r0, #0
     902:	d044      	beq.n	98e <cbvprintf_package+0xb6>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     904:	b127      	cbz	r7, 910 <cbvprintf_package+0x38>
     906:	1be3      	subs	r3, r4, r7
     908:	3304      	adds	r3, #4
     90a:	4553      	cmp	r3, sl
     90c:	f200 8249 	bhi.w	da2 <cbvprintf_package+0x4ca>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     910:	9b03      	ldr	r3, [sp, #12]
     912:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     914:	f8dd b008 	ldr.w	fp, [sp, #8]
     918:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     91c:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     920:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     922:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     926:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     928:	b10f      	cbz	r7, 92e <cbvprintf_package+0x56>
				*(const char **)buf = s;
     92a:	9b03      	ldr	r3, [sp, #12]
     92c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     92e:	1e53      	subs	r3, r2, #1
     930:	9307      	str	r3, [sp, #28]
     932:	2a00      	cmp	r2, #0
     934:	f340 814f 	ble.w	bd6 <cbvprintf_package+0x2fe>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     938:	9b05      	ldr	r3, [sp, #20]
     93a:	f013 0202 	ands.w	r2, r3, #2
     93e:	d023      	beq.n	988 <cbvprintf_package+0xb0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     940:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     942:	1be1      	subs	r1, r4, r7
     944:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     946:	b11a      	cbz	r2, 950 <cbvprintf_package+0x78>
     948:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     94c:	f080 8157 	bcs.w	bfe <cbvprintf_package+0x326>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     950:	f1bb 0f0f 	cmp.w	fp, #15
     954:	f200 8166 	bhi.w	c24 <cbvprintf_package+0x34c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     958:	2f00      	cmp	r7, #0
     95a:	f000 817a 	beq.w	c52 <cbvprintf_package+0x37a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     95e:	b2db      	uxtb	r3, r3
     960:	f10b 0230 	add.w	r2, fp, #48	; 0x30
     964:	446a      	add	r2, sp
     966:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     96a:	2800      	cmp	r0, #0
     96c:	f000 816d 	beq.w	c4a <cbvprintf_package+0x372>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     970:	f063 037f 	orn	r3, r3, #127	; 0x7f
     974:	f10b 0230 	add.w	r2, fp, #48	; 0x30
     978:	446a      	add	r2, sp
     97a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     97e:	9b04      	ldr	r3, [sp, #16]
     980:	3301      	adds	r3, #1
     982:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     984:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     988:	3404      	adds	r4, #4

			is_str_arg = false;
     98a:	2200      	movs	r2, #0
     98c:	e031      	b.n	9f2 <cbvprintf_package+0x11a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     98e:	f001 0a07 	and.w	sl, r1, #7
     992:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     994:	f1ca 0a08 	rsb	sl, sl, #8
     998:	e7b4      	b.n	904 <cbvprintf_package+0x2c>
			switch (*fmt) {
     99a:	2600      	movs	r6, #0
     99c:	e028      	b.n	9f0 <cbvprintf_package+0x118>
     99e:	2600      	movs	r6, #0
     9a0:	e026      	b.n	9f0 <cbvprintf_package+0x118>
				align = VA_STACK_ALIGN(intmax_t);
     9a2:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
     9a6:	46c1      	mov	r9, r8
     9a8:	e022      	b.n	9f0 <cbvprintf_package+0x118>
				if (*fmt == '%') {
     9aa:	2925      	cmp	r1, #37	; 0x25
     9ac:	d120      	bne.n	9f0 <cbvprintf_package+0x118>
					parsing = true;
     9ae:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
     9b0:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
     9b4:	46c1      	mov	r9, r8
				continue;
     9b6:	e01b      	b.n	9f0 <cbvprintf_package+0x118>
			switch (*fmt) {
     9b8:	2947      	cmp	r1, #71	; 0x47
     9ba:	d8f0      	bhi.n	99e <cbvprintf_package+0xc6>
     9bc:	292a      	cmp	r1, #42	; 0x2a
     9be:	d312      	bcc.n	9e6 <cbvprintf_package+0x10e>
     9c0:	392a      	subs	r1, #42	; 0x2a
     9c2:	b2c9      	uxtb	r1, r1
     9c4:	2001      	movs	r0, #1
     9c6:	fa00 f101 	lsl.w	r1, r0, r1
     9ca:	f64f 70da 	movw	r0, #65498	; 0xffda
     9ce:	4201      	tst	r1, r0
     9d0:	d10e      	bne.n	9f0 <cbvprintf_package+0x118>
     9d2:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
     9d6:	f040 80bb 	bne.w	b50 <cbvprintf_package+0x278>
     9da:	f011 0101 	ands.w	r1, r1, #1
     9de:	f040 8085 	bne.w	aec <cbvprintf_package+0x214>
     9e2:	460e      	mov	r6, r1
     9e4:	e004      	b.n	9f0 <cbvprintf_package+0x118>
     9e6:	2920      	cmp	r1, #32
     9e8:	d002      	beq.n	9f0 <cbvprintf_package+0x118>
     9ea:	2923      	cmp	r1, #35	; 0x23
     9ec:	d000      	beq.n	9f0 <cbvprintf_package+0x118>
     9ee:	2600      	movs	r6, #0
     9f0:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
     9f2:	1c6b      	adds	r3, r5, #1
     9f4:	7869      	ldrb	r1, [r5, #1]
     9f6:	2900      	cmp	r1, #0
     9f8:	f000 8153 	beq.w	ca2 <cbvprintf_package+0x3ca>
			if (!parsing) {
     9fc:	2e00      	cmp	r6, #0
     9fe:	d0d4      	beq.n	9aa <cbvprintf_package+0xd2>
			switch (*fmt) {
     a00:	297a      	cmp	r1, #122	; 0x7a
     a02:	d8ca      	bhi.n	99a <cbvprintf_package+0xc2>
     a04:	294c      	cmp	r1, #76	; 0x4c
     a06:	d3d7      	bcc.n	9b8 <cbvprintf_package+0xe0>
     a08:	394c      	subs	r1, #76	; 0x4c
     a0a:	292e      	cmp	r1, #46	; 0x2e
     a0c:	d860      	bhi.n	ad0 <cbvprintf_package+0x1f8>
     a0e:	a001      	add	r0, pc, #4	; (adr r0, a14 <cbvprintf_package+0x13c>)
     a10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     a14:	000009f1 	.word	0x000009f1
     a18:	00000ad1 	.word	0x00000ad1
     a1c:	00000ad1 	.word	0x00000ad1
     a20:	00000ad1 	.word	0x00000ad1
     a24:	00000ad1 	.word	0x00000ad1
     a28:	00000ad1 	.word	0x00000ad1
     a2c:	00000ad1 	.word	0x00000ad1
     a30:	00000ad1 	.word	0x00000ad1
     a34:	00000ad1 	.word	0x00000ad1
     a38:	00000ad1 	.word	0x00000ad1
     a3c:	00000ad1 	.word	0x00000ad1
     a40:	00000ad1 	.word	0x00000ad1
     a44:	00000ae5 	.word	0x00000ae5
     a48:	00000ad1 	.word	0x00000ad1
     a4c:	00000ad1 	.word	0x00000ad1
     a50:	00000ad1 	.word	0x00000ad1
     a54:	00000ad1 	.word	0x00000ad1
     a58:	00000ad1 	.word	0x00000ad1
     a5c:	00000ad1 	.word	0x00000ad1
     a60:	00000ad1 	.word	0x00000ad1
     a64:	00000ad1 	.word	0x00000ad1
     a68:	00000b51 	.word	0x00000b51
     a6c:	00000ad1 	.word	0x00000ad1
     a70:	00000ae5 	.word	0x00000ae5
     a74:	00000ae5 	.word	0x00000ae5
     a78:	00000b51 	.word	0x00000b51
     a7c:	00000b51 	.word	0x00000b51
     a80:	00000b51 	.word	0x00000b51
     a84:	000009f1 	.word	0x000009f1
     a88:	00000ae5 	.word	0x00000ae5
     a8c:	000009a3 	.word	0x000009a3
     a90:	00000ad1 	.word	0x00000ad1
     a94:	000009f1 	.word	0x000009f1
     a98:	00000ad1 	.word	0x00000ad1
     a9c:	00000baf 	.word	0x00000baf
     aa0:	00000ae5 	.word	0x00000ae5
     aa4:	00000baf 	.word	0x00000baf
     aa8:	00000ad1 	.word	0x00000ad1
     aac:	00000ad1 	.word	0x00000ad1
     ab0:	00000bb9 	.word	0x00000bb9
     ab4:	00000add 	.word	0x00000add
     ab8:	00000ae5 	.word	0x00000ae5
     abc:	00000ad1 	.word	0x00000ad1
     ac0:	00000ad1 	.word	0x00000ad1
     ac4:	00000ae5 	.word	0x00000ae5
     ac8:	00000ad1 	.word	0x00000ad1
     acc:	00000ad5 	.word	0x00000ad5
     ad0:	2600      	movs	r6, #0
     ad2:	e78d      	b.n	9f0 <cbvprintf_package+0x118>
				align = VA_STACK_ALIGN(size_t);
     ad4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
     ad8:	46c1      	mov	r9, r8
				continue;
     ada:	e789      	b.n	9f0 <cbvprintf_package+0x118>
				align = VA_STACK_ALIGN(ptrdiff_t);
     adc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
     ae0:	46c1      	mov	r9, r8
				continue;
     ae2:	e785      	b.n	9f0 <cbvprintf_package+0x118>
				if (fmt[-1] == 'l') {
     ae4:	7829      	ldrb	r1, [r5, #0]
     ae6:	296c      	cmp	r1, #108	; 0x6c
     ae8:	d024      	beq.n	b34 <cbvprintf_package+0x25c>
				parsing = false;
     aea:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     aec:	4444      	add	r4, r8
     aee:	3c01      	subs	r4, #1
     af0:	f1c8 0100 	rsb	r1, r8, #0
     af4:	400c      	ands	r4, r1
     af6:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     af8:	b127      	cbz	r7, b04 <cbvprintf_package+0x22c>
     afa:	1be1      	subs	r1, r4, r7
     afc:	4449      	add	r1, r9
     afe:	4551      	cmp	r1, sl
     b00:	f200 8152 	bhi.w	da8 <cbvprintf_package+0x4d0>
		if (is_str_arg) {
     b04:	2a00      	cmp	r2, #0
     b06:	d15d      	bne.n	bc4 <cbvprintf_package+0x2ec>
		} else if (size == sizeof(int)) {
     b08:	f1b9 0f04 	cmp.w	r9, #4
     b0c:	f000 80ad 	beq.w	c6a <cbvprintf_package+0x392>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     b10:	f1b9 0f08 	cmp.w	r9, #8
     b14:	f040 80b1 	bne.w	c7a <cbvprintf_package+0x3a2>
			long long v = va_arg(ap, long long);
     b18:	9916      	ldr	r1, [sp, #88]	; 0x58
     b1a:	3107      	adds	r1, #7
     b1c:	f021 0107 	bic.w	r1, r1, #7
     b20:	f101 0008 	add.w	r0, r1, #8
     b24:	9016      	str	r0, [sp, #88]	; 0x58
     b26:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
     b2a:	b10f      	cbz	r7, b30 <cbvprintf_package+0x258>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     b2c:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
     b30:	3408      	adds	r4, #8
     b32:	e75d      	b.n	9f0 <cbvprintf_package+0x118>
					if (fmt[-2] == 'l') {
     b34:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     b38:	296c      	cmp	r1, #108	; 0x6c
     b3a:	d004      	beq.n	b46 <cbvprintf_package+0x26e>
				parsing = false;
     b3c:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
     b3e:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
     b42:	46c1      	mov	r9, r8
     b44:	e7d2      	b.n	aec <cbvprintf_package+0x214>
				parsing = false;
     b46:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
     b48:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
     b4c:	46c1      	mov	r9, r8
     b4e:	e7cd      	b.n	aec <cbvprintf_package+0x214>
				if (fmt[-1] == 'L') {
     b50:	7829      	ldrb	r1, [r5, #0]
     b52:	294c      	cmp	r1, #76	; 0x4c
     b54:	d01b      	beq.n	b8e <cbvprintf_package+0x2b6>
					v.d = va_arg(ap, double);
     b56:	9916      	ldr	r1, [sp, #88]	; 0x58
     b58:	3107      	adds	r1, #7
     b5a:	f021 0107 	bic.w	r1, r1, #7
     b5e:	f101 0008 	add.w	r0, r1, #8
     b62:	9016      	str	r0, [sp, #88]	; 0x58
     b64:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
     b68:	3407      	adds	r4, #7
     b6a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     b6e:	b147      	cbz	r7, b82 <cbvprintf_package+0x2aa>
					if (BUF_OFFSET + size > len) {
     b70:	1be6      	subs	r6, r4, r7
     b72:	3608      	adds	r6, #8
     b74:	4556      	cmp	r6, sl
     b76:	d814      	bhi.n	ba2 <cbvprintf_package+0x2ca>
					} else if (fmt[-1] == 'L') {
     b78:	782d      	ldrb	r5, [r5, #0]
     b7a:	2d4c      	cmp	r5, #76	; 0x4c
     b7c:	d014      	beq.n	ba8 <cbvprintf_package+0x2d0>
						*(double *)buf = v.d;
     b7e:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
     b82:	3408      	adds	r4, #8
				parsing = false;
     b84:	2600      	movs	r6, #0
				continue;
     b86:	f04f 0808 	mov.w	r8, #8
     b8a:	46c1      	mov	r9, r8
     b8c:	e730      	b.n	9f0 <cbvprintf_package+0x118>
					v.ld = va_arg(ap, long double);
     b8e:	9916      	ldr	r1, [sp, #88]	; 0x58
     b90:	3107      	adds	r1, #7
     b92:	f021 0107 	bic.w	r1, r1, #7
     b96:	f101 0008 	add.w	r0, r1, #8
     b9a:	9016      	str	r0, [sp, #88]	; 0x58
     b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
     ba0:	e7e2      	b.n	b68 <cbvprintf_package+0x290>
						return -ENOSPC;
     ba2:	f06f 001b 	mvn.w	r0, #27
     ba6:	e0f6      	b.n	d96 <cbvprintf_package+0x4be>
						*(long double *)buf = v.ld;
     ba8:	e9c4 0100 	strd	r0, r1, [r4]
     bac:	e7e9      	b.n	b82 <cbvprintf_package+0x2aa>
				parsing = false;
     bae:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     bb0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     bb4:	46c1      	mov	r9, r8
     bb6:	e799      	b.n	aec <cbvprintf_package+0x214>
				is_str_arg = true;
     bb8:	4632      	mov	r2, r6
				parsing = false;
     bba:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     bbc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     bc0:	46c1      	mov	r9, r8
     bc2:	e793      	b.n	aec <cbvprintf_package+0x214>
			s = va_arg(ap, char *);
     bc4:	4604      	mov	r4, r0
     bc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
     bc8:	1d11      	adds	r1, r2, #4
     bca:	9116      	str	r1, [sp, #88]	; 0x58
     bcc:	6812      	ldr	r2, [r2, #0]
     bce:	9203      	str	r2, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     bd0:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
     bd2:	461d      	mov	r5, r3
     bd4:	e6a8      	b.n	928 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     bd6:	4b79      	ldr	r3, [pc, #484]	; (dbc <cbvprintf_package+0x4e4>)
     bd8:	9a03      	ldr	r2, [sp, #12]
     bda:	429a      	cmp	r2, r3
     bdc:	d304      	bcc.n	be8 <cbvprintf_package+0x310>
     bde:	4b78      	ldr	r3, [pc, #480]	; (dc0 <cbvprintf_package+0x4e8>)
     be0:	429a      	cmp	r2, r3
     be2:	d30a      	bcc.n	bfa <cbvprintf_package+0x322>
     be4:	2300      	movs	r3, #0
     be6:	e000      	b.n	bea <cbvprintf_package+0x312>
     be8:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     bea:	2b00      	cmp	r3, #0
     bec:	f47f aea4 	bne.w	938 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     bf0:	9b05      	ldr	r3, [sp, #20]
     bf2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     bf6:	2000      	movs	r0, #0
     bf8:	e6a3      	b.n	942 <cbvprintf_package+0x6a>
     bfa:	2301      	movs	r3, #1
     bfc:	e7f5      	b.n	bea <cbvprintf_package+0x312>
					__ASSERT(false, "String with too many arguments");
     bfe:	4c71      	ldr	r4, [pc, #452]	; (dc4 <cbvprintf_package+0x4ec>)
     c00:	f240 2375 	movw	r3, #629	; 0x275
     c04:	4622      	mov	r2, r4
     c06:	4970      	ldr	r1, [pc, #448]	; (dc8 <cbvprintf_package+0x4f0>)
     c08:	4870      	ldr	r0, [pc, #448]	; (dcc <cbvprintf_package+0x4f4>)
     c0a:	f00f fd95 	bl	10738 <assert_print>
     c0e:	4870      	ldr	r0, [pc, #448]	; (dd0 <cbvprintf_package+0x4f8>)
     c10:	f00f fd92 	bl	10738 <assert_print>
     c14:	f240 2175 	movw	r1, #629	; 0x275
     c18:	4620      	mov	r0, r4
     c1a:	f00f fd86 	bl	1072a <assert_post_action>
					return -EINVAL;
     c1e:	f06f 0015 	mvn.w	r0, #21
     c22:	e0b8      	b.n	d96 <cbvprintf_package+0x4be>
					__ASSERT(false, "str_ptr_pos[] too small");
     c24:	4c67      	ldr	r4, [pc, #412]	; (dc4 <cbvprintf_package+0x4ec>)
     c26:	f240 237a 	movw	r3, #634	; 0x27a
     c2a:	4622      	mov	r2, r4
     c2c:	4966      	ldr	r1, [pc, #408]	; (dc8 <cbvprintf_package+0x4f0>)
     c2e:	4867      	ldr	r0, [pc, #412]	; (dcc <cbvprintf_package+0x4f4>)
     c30:	f00f fd82 	bl	10738 <assert_print>
     c34:	4867      	ldr	r0, [pc, #412]	; (dd4 <cbvprintf_package+0x4fc>)
     c36:	f00f fd7f 	bl	10738 <assert_print>
     c3a:	f240 217a 	movw	r1, #634	; 0x27a
     c3e:	4620      	mov	r0, r4
     c40:	f00f fd73 	bl	1072a <assert_post_action>
					return -EINVAL;
     c44:	f06f 0015 	mvn.w	r0, #21
     c48:	e0a5      	b.n	d96 <cbvprintf_package+0x4be>
						s_rw_cnt++;
     c4a:	9b06      	ldr	r3, [sp, #24]
     c4c:	3301      	adds	r3, #1
     c4e:	9306      	str	r3, [sp, #24]
     c50:	e698      	b.n	984 <cbvprintf_package+0xac>
				} else if (is_ro || rws_pos_en) {
     c52:	b908      	cbnz	r0, c58 <cbvprintf_package+0x380>
     c54:	9b01      	ldr	r3, [sp, #4]
     c56:	b113      	cbz	r3, c5e <cbvprintf_package+0x386>
					len += 1;
     c58:	f10a 0a01 	add.w	sl, sl, #1
     c5c:	e692      	b.n	984 <cbvprintf_package+0xac>
					len += strlen(s) + 1 + 1;
     c5e:	9803      	ldr	r0, [sp, #12]
     c60:	f010 fb2b 	bl	112ba <strlen>
     c64:	1c83      	adds	r3, r0, #2
     c66:	449a      	add	sl, r3
     c68:	e68c      	b.n	984 <cbvprintf_package+0xac>
			int v = va_arg(ap, int);
     c6a:	9916      	ldr	r1, [sp, #88]	; 0x58
     c6c:	1d08      	adds	r0, r1, #4
     c6e:	9016      	str	r0, [sp, #88]	; 0x58
     c70:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
     c72:	b107      	cbz	r7, c76 <cbvprintf_package+0x39e>
				*(int *)buf = v;
     c74:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
     c76:	3404      	adds	r4, #4
     c78:	e6ba      	b.n	9f0 <cbvprintf_package+0x118>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     c7a:	4c52      	ldr	r4, [pc, #328]	; (dc4 <cbvprintf_package+0x4ec>)
     c7c:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     c80:	4622      	mov	r2, r4
     c82:	4951      	ldr	r1, [pc, #324]	; (dc8 <cbvprintf_package+0x4f0>)
     c84:	4851      	ldr	r0, [pc, #324]	; (dcc <cbvprintf_package+0x4f4>)
     c86:	f00f fd57 	bl	10738 <assert_print>
     c8a:	4649      	mov	r1, r9
     c8c:	4852      	ldr	r0, [pc, #328]	; (dd8 <cbvprintf_package+0x500>)
     c8e:	f00f fd53 	bl	10738 <assert_print>
     c92:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     c96:	4620      	mov	r0, r4
     c98:	f00f fd47 	bl	1072a <assert_post_action>
			return -EINVAL;
     c9c:	f06f 0015 	mvn.w	r0, #21
     ca0:	e079      	b.n	d96 <cbvprintf_package+0x4be>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     ca2:	1be3      	subs	r3, r4, r7
     ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     ca8:	d211      	bcs.n	cce <cbvprintf_package+0x3f6>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     caa:	b31f      	cbz	r7, cf4 <cbvprintf_package+0x41c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     cac:	2200      	movs	r2, #0
     cae:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     cb0:	089b      	lsrs	r3, r3, #2
     cb2:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     cb4:	9b01      	ldr	r3, [sp, #4]
     cb6:	b30b      	cbz	r3, cfc <cbvprintf_package+0x424>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     cb8:	9b06      	ldr	r3, [sp, #24]
     cba:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     cbc:	9b04      	ldr	r3, [sp, #16]
     cbe:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     cc0:	bba3      	cbnz	r3, d2c <cbvprintf_package+0x454>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     cc2:	9d02      	ldr	r5, [sp, #8]
     cc4:	f8dd 9010 	ldr.w	r9, [sp, #16]
     cc8:	f8dd 800c 	ldr.w	r8, [sp, #12]
     ccc:	e046      	b.n	d5c <cbvprintf_package+0x484>
		__ASSERT(false, "too many format args");
     cce:	4c3d      	ldr	r4, [pc, #244]	; (dc4 <cbvprintf_package+0x4ec>)
     cd0:	f44f 7331 	mov.w	r3, #708	; 0x2c4
     cd4:	4622      	mov	r2, r4
     cd6:	493c      	ldr	r1, [pc, #240]	; (dc8 <cbvprintf_package+0x4f0>)
     cd8:	483c      	ldr	r0, [pc, #240]	; (dcc <cbvprintf_package+0x4f4>)
     cda:	f00f fd2d 	bl	10738 <assert_print>
     cde:	483f      	ldr	r0, [pc, #252]	; (ddc <cbvprintf_package+0x504>)
     ce0:	f00f fd2a 	bl	10738 <assert_print>
     ce4:	f44f 7131 	mov.w	r1, #708	; 0x2c4
     ce8:	4620      	mov	r0, r4
     cea:	f00f fd1e 	bl	1072a <assert_post_action>
		return -EINVAL;
     cee:	f06f 0015 	mvn.w	r0, #21
     cf2:	e050      	b.n	d96 <cbvprintf_package+0x4be>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     cf4:	4453      	add	r3, sl
     cf6:	f1a3 0008 	sub.w	r0, r3, #8
     cfa:	e04c      	b.n	d96 <cbvprintf_package+0x4be>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     cfc:	9b06      	ldr	r3, [sp, #24]
     cfe:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     d00:	e7dc      	b.n	cbc <cbvprintf_package+0x3e4>
		for (i = 0; i < s_idx; i++) {
     d02:	3301      	adds	r3, #1
     d04:	459b      	cmp	fp, r3
     d06:	d9dc      	bls.n	cc2 <cbvprintf_package+0x3ea>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     d08:	f103 0230 	add.w	r2, r3, #48	; 0x30
     d0c:	446a      	add	r2, sp
     d0e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     d12:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     d16:	2a00      	cmp	r2, #0
     d18:	daf3      	bge.n	d02 <cbvprintf_package+0x42a>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     d1a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     d1e:	1be2      	subs	r2, r4, r7
     d20:	3201      	adds	r2, #1
     d22:	4552      	cmp	r2, sl
     d24:	d843      	bhi.n	dae <cbvprintf_package+0x4d6>
			*buf++ = pos;
     d26:	f804 1b01 	strb.w	r1, [r4], #1
     d2a:	e7ea      	b.n	d02 <cbvprintf_package+0x42a>
		for (i = 0; i < s_idx; i++) {
     d2c:	9b02      	ldr	r3, [sp, #8]
     d2e:	e7e9      	b.n	d04 <cbvprintf_package+0x42c>
		if (rws_pos_en) {
     d30:	9b01      	ldr	r3, [sp, #4]
     d32:	b303      	cbz	r3, d76 <cbvprintf_package+0x49e>
			size = 0;
     d34:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     d36:	1be3      	subs	r3, r4, r7
     d38:	4433      	add	r3, r6
     d3a:	3301      	adds	r3, #1
     d3c:	4553      	cmp	r3, sl
     d3e:	d839      	bhi.n	db4 <cbvprintf_package+0x4dc>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     d40:	f105 0330 	add.w	r3, r5, #48	; 0x30
     d44:	446b      	add	r3, sp
     d46:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     d4a:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     d4e:	4632      	mov	r2, r6
     d50:	4641      	mov	r1, r8
     d52:	4620      	mov	r0, r4
     d54:	f010 fae2 	bl	1131c <memcpy>
		buf += size;
     d58:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     d5a:	3501      	adds	r5, #1
     d5c:	45ab      	cmp	fp, r5
     d5e:	d919      	bls.n	d94 <cbvprintf_package+0x4bc>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     d60:	f1b9 0f00 	cmp.w	r9, #0
     d64:	d0e4      	beq.n	d30 <cbvprintf_package+0x458>
     d66:	f105 0330 	add.w	r3, r5, #48	; 0x30
     d6a:	446b      	add	r3, sp
     d6c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     d70:	2b00      	cmp	r3, #0
     d72:	dadd      	bge.n	d30 <cbvprintf_package+0x458>
     d74:	e7f1      	b.n	d5a <cbvprintf_package+0x482>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     d76:	f105 0330 	add.w	r3, r5, #48	; 0x30
     d7a:	446b      	add	r3, sp
     d7c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     d80:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     d84:	2200      	movs	r2, #0
     d86:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     d8a:	4640      	mov	r0, r8
     d8c:	f010 fa95 	bl	112ba <strlen>
     d90:	1c46      	adds	r6, r0, #1
     d92:	e7d0      	b.n	d36 <cbvprintf_package+0x45e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     d94:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     d96:	b00d      	add	sp, #52	; 0x34
     d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     d9c:	f06f 000d 	mvn.w	r0, #13
     da0:	e7f9      	b.n	d96 <cbvprintf_package+0x4be>
		return -ENOSPC;
     da2:	f06f 001b 	mvn.w	r0, #27
     da6:	e7f6      	b.n	d96 <cbvprintf_package+0x4be>
			return -ENOSPC;
     da8:	f06f 001b 	mvn.w	r0, #27
     dac:	e7f3      	b.n	d96 <cbvprintf_package+0x4be>
				return -ENOSPC;
     dae:	f06f 001b 	mvn.w	r0, #27
     db2:	e7f0      	b.n	d96 <cbvprintf_package+0x4be>
			return -ENOSPC;
     db4:	f06f 001b 	mvn.w	r0, #27
     db8:	e7ed      	b.n	d96 <cbvprintf_package+0x4be>
     dba:	bf00      	nop
     dbc:	0001364c 	.word	0x0001364c
     dc0:	00016d88 	.word	0x00016d88
     dc4:	00013cfc 	.word	0x00013cfc
     dc8:	000156e0 	.word	0x000156e0
     dcc:	00013d44 	.word	0x00013d44
     dd0:	00013d64 	.word	0x00013d64
     dd4:	00013d88 	.word	0x00013d88
     dd8:	00013da4 	.word	0x00013da4
     ddc:	00013dbc 	.word	0x00013dbc

00000de0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de4:	b093      	sub	sp, #76	; 0x4c
     de6:	9101      	str	r1, [sp, #4]
     de8:	4693      	mov	fp, r2
     dea:	9303      	str	r3, [sp, #12]
     dec:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
	__ASSERT_NO_MSG(in_packaged != NULL);
     df0:	4606      	mov	r6, r0
     df2:	b168      	cbz	r0, e10 <cbprintf_package_convert+0x30>
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     df4:	9b01      	ldr	r3, [sp, #4]
     df6:	b1cb      	cbz	r3, e2c <cbprintf_package_convert+0x4c>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     df8:	f896 8002 	ldrb.w	r8, [r6, #2]
     dfc:	f8cd 8008 	str.w	r8, [sp, #8]
	ro_cpy = ros_nbr &&
     e00:	f1b8 0f00 	cmp.w	r8, #0
     e04:	d017      	beq.n	e36 <cbprintf_package_convert+0x56>
     e06:	f01a 0f01 	tst.w	sl, #1
     e0a:	d11c      	bne.n	e46 <cbprintf_package_convert+0x66>
     e0c:	2300      	movs	r3, #0
     e0e:	e013      	b.n	e38 <cbprintf_package_convert+0x58>
	__ASSERT_NO_MSG(in_packaged != NULL);
     e10:	4ca9      	ldr	r4, [pc, #676]	; (10b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>)
     e12:	f240 335f 	movw	r3, #863	; 0x35f
     e16:	4622      	mov	r2, r4
     e18:	49a8      	ldr	r1, [pc, #672]	; (10bc <CONFIG_HEAP_MEM_POOL_SIZE+0xbc>)
     e1a:	48a9      	ldr	r0, [pc, #676]	; (10c0 <CONFIG_HEAP_MEM_POOL_SIZE+0xc0>)
     e1c:	f00f fc8c 	bl	10738 <assert_print>
     e20:	f240 315f 	movw	r1, #863	; 0x35f
     e24:	4620      	mov	r0, r4
     e26:	f00f fc80 	bl	1072a <assert_post_action>
     e2a:	e7e3      	b.n	df4 <cbprintf_package_convert+0x14>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     e2c:	4630      	mov	r0, r6
     e2e:	f7ff fd2b 	bl	888 <get_package_len>
     e32:	9001      	str	r0, [sp, #4]
     e34:	e7e0      	b.n	df8 <cbprintf_package_convert+0x18>
	ro_cpy = ros_nbr &&
     e36:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     e38:	78f7      	ldrb	r7, [r6, #3]
	rw_cpy = rws_nbr > 0 &&
     e3a:	b137      	cbz	r7, e4a <cbprintf_package_convert+0x6a>
     e3c:	f01a 0f02 	tst.w	sl, #2
     e40:	d11d      	bne.n	e7e <cbprintf_package_convert+0x9e>
     e42:	2200      	movs	r2, #0
     e44:	e002      	b.n	e4c <cbprintf_package_convert+0x6c>
	ro_cpy = ros_nbr &&
     e46:	2301      	movs	r3, #1
     e48:	e7f6      	b.n	e38 <cbprintf_package_convert+0x58>
	rw_cpy = rws_nbr > 0 &&
     e4a:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     e4c:	b902      	cbnz	r2, e50 <cbprintf_package_convert+0x70>
     e4e:	b1c3      	cbz	r3, e82 <cbprintf_package_convert+0xa2>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
     e50:	7835      	ldrb	r5, [r6, #0]
     e52:	00aa      	lsls	r2, r5, #2
     e54:	9204      	str	r2, [sp, #16]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	uint8_t *str_pos = &buf[args_size];
     e56:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
     e5a:	f1bb 0f00 	cmp.w	fp, #0
     e5e:	d01c      	beq.n	e9a <cbprintf_package_convert+0xba>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
     e60:	2b00      	cmp	r3, #0
     e62:	f040 8085 	bne.w	f70 <cbprintf_package_convert+0x190>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     e66:	9b02      	ldr	r3, [sp, #8]
     e68:	2b00      	cmp	r3, #0
     e6a:	f000 808f 	beq.w	f8c <cbprintf_package_convert+0x1ac>
     e6e:	f01a 0f04 	tst.w	sl, #4
     e72:	f040 808f 	bne.w	f94 <cbprintf_package_convert+0x1b4>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
     e76:	2000      	movs	r0, #0
		keep_cnt = 0;
     e78:	4681      	mov	r9, r0
		scpy_cnt = 0;
     e7a:	4680      	mov	r8, r0
     e7c:	e07b      	b.n	f76 <cbprintf_package_convert+0x196>
	rw_cpy = rws_nbr > 0 &&
     e7e:	2201      	movs	r2, #1
     e80:	e7e4      	b.n	e4c <cbprintf_package_convert+0x6c>
		if (cb) {
     e82:	f1bb 0f00 	cmp.w	fp, #0
     e86:	d003      	beq.n	e90 <cbprintf_package_convert+0xb0>
			cb(in_packaged, in_len, ctx);
     e88:	9a03      	ldr	r2, [sp, #12]
     e8a:	9901      	ldr	r1, [sp, #4]
     e8c:	4630      	mov	r0, r6
     e8e:	47d8      	blx	fp
		return in_len;
     e90:	9c01      	ldr	r4, [sp, #4]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     e92:	4620      	mov	r0, r4
     e94:	b013      	add	sp, #76	; 0x4c
     e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
     e9a:	9c01      	ldr	r4, [sp, #4]
		if (ro_cpy) {
     e9c:	bb03      	cbnz	r3, ee0 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     e9e:	9b02      	ldr	r3, [sp, #8]
     ea0:	b3a3      	cbz	r3, f0c <cbprintf_package_convert+0x12c>
     ea2:	f01a 0904 	ands.w	r9, sl, #4
     ea6:	d028      	beq.n	efa <cbprintf_package_convert+0x11a>
				str_pos += ros_nbr;
     ea8:	441d      	add	r5, r3
	size_t strl_cnt = 0;
     eaa:	f04f 0900 	mov.w	r9, #0
     eae:	e024      	b.n	efa <cbprintf_package_convert+0x11a>
				out_len += len;
     eb0:	4404      	add	r4, r0
				str_pos++;
     eb2:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
     eb4:	f108 0801 	add.w	r8, r8, #1
     eb8:	45d0      	cmp	r8, sl
     eba:	d21b      	bcs.n	ef4 <cbprintf_package_convert+0x114>
				const char *str = *(const char **)&buf32[*str_pos];
     ebc:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
     ebe:	2300      	movs	r3, #0
     ec0:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
     ec4:	4619      	mov	r1, r3
     ec6:	4658      	mov	r0, fp
     ec8:	f00e ff0e 	bl	fce8 <append_string>
				if (strl && strl_cnt < strl_len) {
     ecc:	2f00      	cmp	r7, #0
     ece:	d0ef      	beq.n	eb0 <cbprintf_package_convert+0xd0>
     ed0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     ed2:	4599      	cmp	r9, r3
     ed4:	d2ec      	bcs.n	eb0 <cbprintf_package_convert+0xd0>
					strl[strl_cnt++] = (uint16_t)len;
     ed6:	f827 0019 	strh.w	r0, [r7, r9, lsl #1]
     eda:	f109 0901 	add.w	r9, r9, #1
     ede:	e7e7      	b.n	eb0 <cbprintf_package_convert+0xd0>
			for (int i = 0; i < ros_nbr; i++) {
     ee0:	f04f 0800 	mov.w	r8, #0
	size_t strl_cnt = 0;
     ee4:	46c1      	mov	r9, r8
     ee6:	9701      	str	r7, [sp, #4]
     ee8:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
     eec:	f8dd a008 	ldr.w	sl, [sp, #8]
     ef0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
     ef2:	e7e1      	b.n	eb8 <cbprintf_package_convert+0xd8>
     ef4:	9f01      	ldr	r7, [sp, #4]
     ef6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
		bool drop_ro_str_pos = !(flags &
     efa:	f00a 0305 	and.w	r3, sl, #5
     efe:	9301      	str	r3, [sp, #4]
		for (int i = 0; i < rws_nbr; i++) {
     f00:	f04f 0800 	mov.w	r8, #0
     f04:	f8cd b008 	str.w	fp, [sp, #8]
     f08:	46b3      	mov	fp, r6
     f0a:	e01d      	b.n	f48 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     f0c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     f10:	e7f3      	b.n	efa <cbprintf_package_convert+0x11a>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     f12:	f01a 0f02 	tst.w	sl, #2
     f16:	d029      	beq.n	f6c <cbprintf_package_convert+0x18c>
     f18:	2600      	movs	r6, #0
				int len = append_string(cb, NULL, str, 0);
     f1a:	2300      	movs	r3, #0
     f1c:	4619      	mov	r1, r3
     f1e:	9802      	ldr	r0, [sp, #8]
     f20:	f00e fee2 	bl	fce8 <append_string>
				if (strl && strl_cnt < strl_len) {
     f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     f26:	b13b      	cbz	r3, f38 <cbprintf_package_convert+0x158>
     f28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     f2a:	4599      	cmp	r9, r3
     f2c:	d204      	bcs.n	f38 <cbprintf_package_convert+0x158>
					strl[strl_cnt++] = (uint16_t)len;
     f2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     f30:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
     f34:	f109 0901 	add.w	r9, r9, #1
				out_len += len;
     f38:	4404      	add	r4, r0
			if (is_ro && drop_ro_str_pos) {
     f3a:	b116      	cbz	r6, f42 <cbprintf_package_convert+0x162>
     f3c:	9b01      	ldr	r3, [sp, #4]
     f3e:	b903      	cbnz	r3, f42 <cbprintf_package_convert+0x162>
				out_len--;
     f40:	3c01      	subs	r4, #1
			str_pos++;
     f42:	3501      	adds	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
     f44:	f108 0801 	add.w	r8, r8, #1
     f48:	45b8      	cmp	r8, r7
     f4a:	d2a2      	bcs.n	e92 <cbprintf_package_convert+0xb2>
			const char *str = *(const char **)&buf32[*str_pos];
     f4c:	782b      	ldrb	r3, [r5, #0]
     f4e:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
     f52:	4b5c      	ldr	r3, [pc, #368]	; (10c4 <CONFIG_HEAP_MEM_POOL_SIZE+0xc4>)
     f54:	429a      	cmp	r2, r3
     f56:	d3dc      	bcc.n	f12 <cbprintf_package_convert+0x132>
     f58:	4b5b      	ldr	r3, [pc, #364]	; (10c8 <CONFIG_HEAP_MEM_POOL_SIZE+0xc8>)
     f5a:	429a      	cmp	r2, r3
     f5c:	d2d9      	bcs.n	f12 <cbprintf_package_convert+0x132>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     f5e:	f01a 0f01 	tst.w	sl, #1
     f62:	d101      	bne.n	f68 <cbprintf_package_convert+0x188>
     f64:	2601      	movs	r6, #1
     f66:	e7e8      	b.n	f3a <cbprintf_package_convert+0x15a>
     f68:	2601      	movs	r6, #1
     f6a:	e7d6      	b.n	f1a <cbprintf_package_convert+0x13a>
     f6c:	2600      	movs	r6, #0
     f6e:	e7e4      	b.n	f3a <cbprintf_package_convert+0x15a>
		dst = cpy_str_pos;
     f70:	a80d      	add	r0, sp, #52	; 0x34
		keep_cnt = 0;
     f72:	f04f 0900 	mov.w	r9, #0
	if (dst) {
     f76:	b118      	cbz	r0, f80 <cbprintf_package_convert+0x1a0>
		memcpy(dst, str_pos, ros_nbr);
     f78:	9a02      	ldr	r2, [sp, #8]
     f7a:	4629      	mov	r1, r5
     f7c:	f010 f9ce 	bl	1131c <memcpy>
	str_pos += ros_nbr;
     f80:	9b02      	ldr	r3, [sp, #8]
     f82:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
     f84:	2400      	movs	r4, #0
     f86:	f8cd b014 	str.w	fp, [sp, #20]
     f8a:	e05a      	b.n	1042 <CONFIG_HEAP_MEM_POOL_SIZE+0x42>
		dst = NULL;
     f8c:	2000      	movs	r0, #0
		keep_cnt = 0;
     f8e:	4681      	mov	r9, r0
		scpy_cnt = 0;
     f90:	4680      	mov	r8, r0
     f92:	e7f0      	b.n	f76 <cbprintf_package_convert+0x196>
		keep_cnt = ros_nbr;
     f94:	46c1      	mov	r9, r8
		dst = keep_str_pos;
     f96:	a809      	add	r0, sp, #36	; 0x24
		scpy_cnt = 0;
     f98:	f04f 0800 	mov.w	r8, #0
     f9c:	e7eb      	b.n	f76 <cbprintf_package_convert+0x196>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     f9e:	f01a 0f01 	tst.w	sl, #1
     fa2:	d01d      	beq.n	fe0 <cbprintf_package_convert+0x200>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
     fa4:	f1b8 0f0f 	cmp.w	r8, #15
     fa8:	d80b      	bhi.n	fc2 <cbprintf_package_convert+0x1e2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     faa:	f108 0301 	add.w	r3, r8, #1
     fae:	782a      	ldrb	r2, [r5, #0]
     fb0:	f108 0148 	add.w	r1, r8, #72	; 0x48
     fb4:	eb0d 0801 	add.w	r8, sp, r1
     fb8:	f808 2c14 	strb.w	r2, [r8, #-20]
     fbc:	fa5f f883 	uxtb.w	r8, r3
     fc0:	e03d      	b.n	103e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
     fc2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 10b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>
     fc6:	f240 33f2 	movw	r3, #1010	; 0x3f2
     fca:	465a      	mov	r2, fp
     fcc:	493f      	ldr	r1, [pc, #252]	; (10cc <CONFIG_HEAP_MEM_POOL_SIZE+0xcc>)
     fce:	483c      	ldr	r0, [pc, #240]	; (10c0 <CONFIG_HEAP_MEM_POOL_SIZE+0xc0>)
     fd0:	f00f fbb2 	bl	10738 <assert_print>
     fd4:	f240 31f2 	movw	r1, #1010	; 0x3f2
     fd8:	4658      	mov	r0, fp
     fda:	f00f fba6 	bl	1072a <assert_post_action>
     fde:	e7e4      	b.n	faa <cbprintf_package_convert+0x1ca>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     fe0:	f01a 0f04 	tst.w	sl, #4
     fe4:	d02b      	beq.n	103e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
     fe6:	f1b9 0f0f 	cmp.w	r9, #15
     fea:	d80b      	bhi.n	1004 <CONFIG_HEAP_MEM_POOL_SIZE+0x4>
				keep_str_pos[keep_cnt++] = *str_pos;
     fec:	f109 0301 	add.w	r3, r9, #1
     ff0:	782a      	ldrb	r2, [r5, #0]
     ff2:	f109 0148 	add.w	r1, r9, #72	; 0x48
     ff6:	eb0d 0901 	add.w	r9, sp, r1
     ffa:	f809 2c24 	strb.w	r2, [r9, #-36]
     ffe:	fa5f f983 	uxtb.w	r9, r3
    1002:	e01c      	b.n	103e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    1004:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 10b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>
    1008:	f240 33f5 	movw	r3, #1013	; 0x3f5
    100c:	465a      	mov	r2, fp
    100e:	4930      	ldr	r1, [pc, #192]	; (10d0 <CONFIG_HEAP_MEM_POOL_SIZE+0xd0>)
    1010:	482b      	ldr	r0, [pc, #172]	; (10c0 <CONFIG_HEAP_MEM_POOL_SIZE+0xc0>)
    1012:	f00f fb91 	bl	10738 <assert_print>
    1016:	f240 31f5 	movw	r1, #1013	; 0x3f5
    101a:	4658      	mov	r0, fp
    101c:	f00f fb85 	bl	1072a <assert_post_action>
    1020:	e7e4      	b.n	fec <cbprintf_package_convert+0x20c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    1022:	f1b8 0f0f 	cmp.w	r8, #15
    1026:	d829      	bhi.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    1028:	f108 0301 	add.w	r3, r8, #1
    102c:	782a      	ldrb	r2, [r5, #0]
    102e:	f108 0148 	add.w	r1, r8, #72	; 0x48
    1032:	eb0d 0801 	add.w	r8, sp, r1
    1036:	f808 2c14 	strb.w	r2, [r8, #-20]
    103a:	fa5f f883 	uxtb.w	r8, r3
		str_pos++;
    103e:	3501      	adds	r5, #1
	for (int i = 0; i < rws_nbr; i++) {
    1040:	3401      	adds	r4, #1
    1042:	42bc      	cmp	r4, r7
    1044:	d246      	bcs.n	10d4 <CONFIG_HEAP_MEM_POOL_SIZE+0xd4>
		const char *str = *(const char **)&buf32[*str_pos];
    1046:	782b      	ldrb	r3, [r5, #0]
    1048:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    104c:	4a1d      	ldr	r2, [pc, #116]	; (10c4 <CONFIG_HEAP_MEM_POOL_SIZE+0xc4>)
    104e:	4293      	cmp	r3, r2
    1050:	d302      	bcc.n	1058 <CONFIG_HEAP_MEM_POOL_SIZE+0x58>
    1052:	4a1d      	ldr	r2, [pc, #116]	; (10c8 <CONFIG_HEAP_MEM_POOL_SIZE+0xc8>)
    1054:	4293      	cmp	r3, r2
    1056:	d3a2      	bcc.n	f9e <cbprintf_package_convert+0x1be>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    1058:	f01a 0f02 	tst.w	sl, #2
    105c:	d1e1      	bne.n	1022 <CONFIG_HEAP_MEM_POOL_SIZE+0x22>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    105e:	f1b9 0f0f 	cmp.w	r9, #15
    1062:	d81a      	bhi.n	109a <CONFIG_HEAP_MEM_POOL_SIZE+0x9a>
				keep_str_pos[keep_cnt++] = *str_pos;
    1064:	f109 0301 	add.w	r3, r9, #1
    1068:	782a      	ldrb	r2, [r5, #0]
    106a:	f109 0148 	add.w	r1, r9, #72	; 0x48
    106e:	eb0d 0901 	add.w	r9, sp, r1
    1072:	f809 2c24 	strb.w	r2, [r9, #-36]
    1076:	fa5f f983 	uxtb.w	r9, r3
    107a:	e7e0      	b.n	103e <CONFIG_HEAP_MEM_POOL_SIZE+0x3e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    107c:	f8df b038 	ldr.w	fp, [pc, #56]	; 10b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>
    1080:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
    1084:	465a      	mov	r2, fp
    1086:	4911      	ldr	r1, [pc, #68]	; (10cc <CONFIG_HEAP_MEM_POOL_SIZE+0xcc>)
    1088:	480d      	ldr	r0, [pc, #52]	; (10c0 <CONFIG_HEAP_MEM_POOL_SIZE+0xc0>)
    108a:	f00f fb55 	bl	10738 <assert_print>
    108e:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1092:	4658      	mov	r0, fp
    1094:	f00f fb49 	bl	1072a <assert_post_action>
    1098:	e7c6      	b.n	1028 <CONFIG_HEAP_MEM_POOL_SIZE+0x28>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    109a:	f8df b01c 	ldr.w	fp, [pc, #28]	; 10b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>
    109e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    10a2:	465a      	mov	r2, fp
    10a4:	490a      	ldr	r1, [pc, #40]	; (10d0 <CONFIG_HEAP_MEM_POOL_SIZE+0xd0>)
    10a6:	4806      	ldr	r0, [pc, #24]	; (10c0 <CONFIG_HEAP_MEM_POOL_SIZE+0xc0>)
    10a8:	f00f fb46 	bl	10738 <assert_print>
    10ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
    10b0:	4658      	mov	r0, fp
    10b2:	f00f fb3a 	bl	1072a <assert_post_action>
    10b6:	e7d5      	b.n	1064 <CONFIG_HEAP_MEM_POOL_SIZE+0x64>
    10b8:	00013cfc 	.word	0x00013cfc
    10bc:	00013dd4 	.word	0x00013dd4
    10c0:	00013d44 	.word	0x00013d44
    10c4:	0001364c 	.word	0x0001364c
    10c8:	00016d88 	.word	0x00016d88
    10cc:	00013df0 	.word	0x00013df0
    10d0:	00013e10 	.word	0x00013e10
	out_desc.len = in_desc->len;
    10d4:	f8dd b014 	ldr.w	fp, [sp, #20]
    10d8:	7833      	ldrb	r3, [r6, #0]
    10da:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    10de:	7873      	ldrb	r3, [r6, #1]
    10e0:	4443      	add	r3, r8
    10e2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    10e6:	f01a 0f02 	tst.w	sl, #2
    10ea:	d00a      	beq.n	1102 <CONFIG_HEAP_MEM_POOL_SIZE+0x102>
    10ec:	2300      	movs	r3, #0
    10ee:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    10f2:	f01a 0f01 	tst.w	sl, #1
    10f6:	d106      	bne.n	1106 <CONFIG_HEAP_MEM_POOL_SIZE+0x106>
    10f8:	f01a 0f04 	tst.w	sl, #4
    10fc:	d133      	bne.n	1166 <CONFIG_HEAP_MEM_POOL_SIZE+0x166>
    10fe:	2300      	movs	r3, #0
    1100:	e002      	b.n	1108 <CONFIG_HEAP_MEM_POOL_SIZE+0x108>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    1102:	464b      	mov	r3, r9
    1104:	e7f3      	b.n	10ee <CONFIG_HEAP_MEM_POOL_SIZE+0xee>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    1106:	2300      	movs	r3, #0
    1108:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    110c:	6830      	ldr	r0, [r6, #0]
    110e:	9008      	str	r0, [sp, #32]
	*in_desc = out_desc;
    1110:	9811      	ldr	r0, [sp, #68]	; 0x44
    1112:	6030      	str	r0, [r6, #0]
	rv = cb(in_packaged, args_size, ctx);
    1114:	f8dd a00c 	ldr.w	sl, [sp, #12]
    1118:	4652      	mov	r2, sl
    111a:	9904      	ldr	r1, [sp, #16]
    111c:	4630      	mov	r0, r6
    111e:	47d8      	blx	fp
	if (rv < 0) {
    1120:	1e04      	subs	r4, r0, #0
    1122:	f6ff aeb6 	blt.w	e92 <cbprintf_package_convert+0xb2>
	*in_desc = in_desc_backup;
    1126:	9808      	ldr	r0, [sp, #32]
    1128:	6030      	str	r0, [r6, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    112a:	4652      	mov	r2, sl
    112c:	4649      	mov	r1, r9
    112e:	a809      	add	r0, sp, #36	; 0x24
    1130:	47d8      	blx	fp
	if (rv < 0) {
    1132:	2800      	cmp	r0, #0
    1134:	db45      	blt.n	11c2 <CONFIG_HEAP_MEM_POOL_SIZE+0x1c2>
	out_len += rv;
    1136:	eb04 0900 	add.w	r9, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    113a:	9a02      	ldr	r2, [sp, #8]
    113c:	9b04      	ldr	r3, [sp, #16]
    113e:	441a      	add	r2, r3
    1140:	4611      	mov	r1, r2
    1142:	4439      	add	r1, r7
	rv = cb(str_pos, strs_len, ctx);
    1144:	4652      	mov	r2, sl
    1146:	9b01      	ldr	r3, [sp, #4]
    1148:	1a59      	subs	r1, r3, r1
    114a:	4628      	mov	r0, r5
    114c:	47d8      	blx	fp
	if (rv < 0) {
    114e:	1e04      	subs	r4, r0, #0
    1150:	f6ff ae9f 	blt.w	e92 <cbprintf_package_convert+0xb2>
	out_len += rv;
    1154:	eb09 0504 	add.w	r5, r9, r4
	for (int i = 0; i < scpy_cnt; i++) {
    1158:	2700      	movs	r7, #0
    115a:	9601      	str	r6, [sp, #4]
    115c:	465e      	mov	r6, fp
    115e:	46d1      	mov	r9, sl
    1160:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    1164:	e015      	b.n	1192 <CONFIG_HEAP_MEM_POOL_SIZE+0x192>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    1166:	464b      	mov	r3, r9
    1168:	e7ce      	b.n	1108 <CONFIG_HEAP_MEM_POOL_SIZE+0x108>
		uint16_t str_len = strl ? strl[i] : 0;
    116a:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    116e:	464a      	mov	r2, r9
    1170:	2101      	movs	r1, #1
    1172:	f10d 001f 	add.w	r0, sp, #31
    1176:	47b0      	blx	r6
		if (rv < 0) {
    1178:	2800      	cmp	r0, #0
    117a:	db24      	blt.n	11c6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1c6>
		out_len += rv;
    117c:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    117e:	4653      	mov	r3, sl
    1180:	4622      	mov	r2, r4
    1182:	4649      	mov	r1, r9
    1184:	4630      	mov	r0, r6
    1186:	f00e fdaf 	bl	fce8 <append_string>
		if (rv < 0) {
    118a:	2800      	cmp	r0, #0
    118c:	db1d      	blt.n	11ca <CONFIG_HEAP_MEM_POOL_SIZE+0x1ca>
		out_len += rv;
    118e:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    1190:	3701      	adds	r7, #1
    1192:	45b8      	cmp	r8, r7
    1194:	dd0f      	ble.n	11b6 <CONFIG_HEAP_MEM_POOL_SIZE+0x1b6>
		uint8_t loc = cpy_str_pos[i];
    1196:	f107 0348 	add.w	r3, r7, #72	; 0x48
    119a:	446b      	add	r3, sp
    119c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    11a0:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
    11a4:	9a01      	ldr	r2, [sp, #4]
    11a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    11aa:	f1bb 0f00 	cmp.w	fp, #0
    11ae:	d0dc      	beq.n	116a <CONFIG_HEAP_MEM_POOL_SIZE+0x16a>
    11b0:	f83b a017 	ldrh.w	sl, [fp, r7, lsl #1]
    11b4:	e7db      	b.n	116e <CONFIG_HEAP_MEM_POOL_SIZE+0x16e>
	(void)cb(NULL, 0, ctx);
    11b6:	9a03      	ldr	r2, [sp, #12]
    11b8:	2100      	movs	r1, #0
    11ba:	4608      	mov	r0, r1
    11bc:	47b0      	blx	r6
	return out_len;
    11be:	462c      	mov	r4, r5
    11c0:	e667      	b.n	e92 <cbprintf_package_convert+0xb2>
		return rv;
    11c2:	4604      	mov	r4, r0
    11c4:	e665      	b.n	e92 <cbprintf_package_convert+0xb2>
    11c6:	4604      	mov	r4, r0
    11c8:	e663      	b.n	e92 <cbprintf_package_convert+0xb2>
    11ca:	4604      	mov	r4, r0
    11cc:	e661      	b.n	e92 <cbprintf_package_convert+0xb2>
    11ce:	bf00      	nop

000011d0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    11d0:	b538      	push	{r3, r4, r5, lr}
    11d2:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    11d4:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    11d6:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    11da:	6081      	str	r1, [r0, #8]
	switch (method) {
    11dc:	2b02      	cmp	r3, #2
    11de:	d903      	bls.n	11e8 <sys_notify_finalize+0x18>
    11e0:	2b03      	cmp	r3, #3
    11e2:	d102      	bne.n	11ea <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    11e4:	6800      	ldr	r0, [r0, #0]
		break;
    11e6:	e00e      	b.n	1206 <sys_notify_finalize+0x36>
	switch (method) {
    11e8:	b963      	cbnz	r3, 1204 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    11ea:	4d08      	ldr	r5, [pc, #32]	; (120c <sys_notify_finalize+0x3c>)
    11ec:	2345      	movs	r3, #69	; 0x45
    11ee:	462a      	mov	r2, r5
    11f0:	4907      	ldr	r1, [pc, #28]	; (1210 <sys_notify_finalize+0x40>)
    11f2:	4808      	ldr	r0, [pc, #32]	; (1214 <sys_notify_finalize+0x44>)
    11f4:	f00f faa0 	bl	10738 <assert_print>
    11f8:	2145      	movs	r1, #69	; 0x45
    11fa:	4628      	mov	r0, r5
    11fc:	f00f fa95 	bl	1072a <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1200:	2000      	movs	r0, #0
    1202:	e000      	b.n	1206 <sys_notify_finalize+0x36>
	switch (method) {
    1204:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1206:	2300      	movs	r3, #0
    1208:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    120a:	bd38      	pop	{r3, r4, r5, pc}
    120c:	00013e30 	.word	0x00013e30
    1210:	000156e0 	.word	0x000156e0
    1214:	00013d44 	.word	0x00013d44

00001218 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1218:	4b01      	ldr	r3, [pc, #4]	; (1220 <__printk_hook_install+0x8>)
    121a:	6018      	str	r0, [r3, #0]
}
    121c:	4770      	bx	lr
    121e:	bf00      	nop
    1220:	20000018 	.word	0x20000018

00001224 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1224:	b510      	push	{r4, lr}
    1226:	b086      	sub	sp, #24
    1228:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    122a:	9003      	str	r0, [sp, #12]
    122c:	9104      	str	r1, [sp, #16]
    122e:	2100      	movs	r1, #0
    1230:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1232:	9100      	str	r1, [sp, #0]
    1234:	a903      	add	r1, sp, #12
    1236:	4806      	ldr	r0, [pc, #24]	; (1250 <vsnprintk+0x2c>)
    1238:	f000 fdca 	bl	1dd0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    123c:	9b05      	ldr	r3, [sp, #20]
    123e:	9a04      	ldr	r2, [sp, #16]
    1240:	4293      	cmp	r3, r2
    1242:	da01      	bge.n	1248 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    1244:	2200      	movs	r2, #0
    1246:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    1248:	9805      	ldr	r0, [sp, #20]
    124a:	b006      	add	sp, #24
    124c:	bd10      	pop	{r4, pc}
    124e:	bf00      	nop
    1250:	0000fda7 	.word	0x0000fda7

00001254 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    1254:	b538      	push	{r3, r4, r5, lr}
    1256:	4604      	mov	r4, r0
    1258:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    125a:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    125c:	2a00      	cmp	r2, #0
    125e:	db14      	blt.n	128a <process_complete+0x36>
    1260:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    1264:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1266:	2a01      	cmp	r2, #1
    1268:	d91b      	bls.n	12a2 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    126a:	2b04      	cmp	r3, #4
    126c:	d053      	beq.n	1316 <process_complete+0xc2>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    126e:	4c30      	ldr	r4, [pc, #192]	; (1330 <process_complete+0xdc>)
    1270:	f240 131b 	movw	r3, #283	; 0x11b
    1274:	4622      	mov	r2, r4
    1276:	492f      	ldr	r1, [pc, #188]	; (1334 <process_complete+0xe0>)
    1278:	482f      	ldr	r0, [pc, #188]	; (1338 <process_complete+0xe4>)
    127a:	f00f fa5d 	bl	10738 <assert_print>
    127e:	f240 111b 	movw	r1, #283	; 0x11b
    1282:	4620      	mov	r0, r4
    1284:	f00f fa51 	bl	1072a <assert_post_action>
	}
}
    1288:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    128a:	e9d0 0100 	ldrd	r0, r1, [r0]
    128e:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1292:	2300      	movs	r3, #0
    1294:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    1296:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    1298:	2101      	movs	r1, #1
    129a:	4620      	mov	r0, r4
    129c:	f00e fdbb 	bl	fe16 <set_state>
    12a0:	e7f2      	b.n	1288 <process_complete+0x34>
		*clients = mgr->clients;
    12a2:	e9d0 0100 	ldrd	r0, r1, [r0]
    12a6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    12aa:	2200      	movs	r2, #0
    12ac:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    12ae:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    12b0:	2b06      	cmp	r3, #6
    12b2:	d00f      	beq.n	12d4 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    12b4:	2b05      	cmp	r3, #5
    12b6:	d120      	bne.n	12fa <process_complete+0xa6>
			set_state(mgr, ONOFF_STATE_OFF);
    12b8:	2100      	movs	r1, #0
    12ba:	4620      	mov	r0, r4
    12bc:	f00e fdab 	bl	fe16 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    12c0:	4620      	mov	r0, r4
    12c2:	f00e fdd2 	bl	fe6a <process_recheck>
    12c6:	2800      	cmp	r0, #0
    12c8:	d0de      	beq.n	1288 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12ca:	8ba3      	ldrh	r3, [r4, #28]
    12cc:	f043 0320 	orr.w	r3, r3, #32
    12d0:	83a3      	strh	r3, [r4, #28]
    12d2:	e7d9      	b.n	1288 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    12d4:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    12d8:	b153      	cbz	r3, 12f0 <process_complete+0x9c>
				mgr->refs += 1U;
    12da:	8be2      	ldrh	r2, [r4, #30]
    12dc:	3201      	adds	r2, #1
    12de:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    12e0:	461a      	mov	r2, r3
	return node->next;
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d0f7      	beq.n	12d8 <process_complete+0x84>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    12e8:	2a00      	cmp	r2, #0
    12ea:	d1f5      	bne.n	12d8 <process_complete+0x84>
    12ec:	4613      	mov	r3, r2
    12ee:	e7f3      	b.n	12d8 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    12f0:	2102      	movs	r1, #2
    12f2:	4620      	mov	r0, r4
    12f4:	f00e fd8f 	bl	fe16 <set_state>
    12f8:	e7e2      	b.n	12c0 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    12fa:	4d0d      	ldr	r5, [pc, #52]	; (1330 <process_complete+0xdc>)
    12fc:	f240 1309 	movw	r3, #265	; 0x109
    1300:	462a      	mov	r2, r5
    1302:	490e      	ldr	r1, [pc, #56]	; (133c <process_complete+0xe8>)
    1304:	480c      	ldr	r0, [pc, #48]	; (1338 <process_complete+0xe4>)
    1306:	f00f fa17 	bl	10738 <assert_print>
    130a:	f240 1109 	movw	r1, #265	; 0x109
    130e:	4628      	mov	r0, r5
    1310:	f00f fa0b 	bl	1072a <assert_post_action>
    1314:	e7d0      	b.n	12b8 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    1316:	2100      	movs	r1, #0
    1318:	f00e fd7d 	bl	fe16 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    131c:	4620      	mov	r0, r4
    131e:	f00e fda4 	bl	fe6a <process_recheck>
    1322:	2800      	cmp	r0, #0
    1324:	d0b0      	beq.n	1288 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1326:	8ba3      	ldrh	r3, [r4, #28]
    1328:	f043 0320 	orr.w	r3, r3, #32
    132c:	83a3      	strh	r3, [r4, #28]
    132e:	e7ab      	b.n	1288 <process_complete+0x34>
    1330:	00013e54 	.word	0x00013e54
    1334:	000156e0 	.word	0x000156e0
    1338:	00013d44 	.word	0x00013d44
    133c:	00013e78 	.word	0x00013e78

00001340 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1344:	b083      	sub	sp, #12
    1346:	4604      	mov	r4, r0
    1348:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    134a:	8b83      	ldrh	r3, [r0, #28]
    134c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    1350:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    1354:	460d      	mov	r5, r1
    1356:	b131      	cbz	r1, 1366 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1358:	f1b8 0f00 	cmp.w	r8, #0
    135c:	d112      	bne.n	1384 <process_event+0x44>
	list->head = NULL;
    135e:	2300      	movs	r3, #0
    1360:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1362:	9301      	str	r3, [sp, #4]
}
    1364:	e090      	b.n	1488 <process_event+0x148>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    1366:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 163c <process_event+0x2fc>
    136a:	f240 1333 	movw	r3, #307	; 0x133
    136e:	464a      	mov	r2, r9
    1370:	49b3      	ldr	r1, [pc, #716]	; (1640 <process_event+0x300>)
    1372:	48b4      	ldr	r0, [pc, #720]	; (1644 <process_event+0x304>)
    1374:	f00f f9e0 	bl	10738 <assert_print>
    1378:	f240 1133 	movw	r1, #307	; 0x133
    137c:	4648      	mov	r0, r9
    137e:	f00f f9d4 	bl	1072a <assert_post_action>
    1382:	e7e9      	b.n	1358 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    1384:	2d01      	cmp	r5, #1
    1386:	d013      	beq.n	13b0 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    1388:	2d02      	cmp	r5, #2
    138a:	d116      	bne.n	13ba <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    138c:	8ba3      	ldrh	r3, [r4, #28]
    138e:	f043 0320 	orr.w	r3, r3, #32
    1392:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1394:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1396:	4620      	mov	r0, r4
    1398:	f00b f9c4 	bl	c724 <z_spin_unlock_valid>
    139c:	2800      	cmp	r0, #0
    139e:	f000 8196 	beq.w	16ce <process_event+0x38e>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13a2:	f386 8811 	msr	BASEPRI, r6
    13a6:	f3bf 8f6f 	isb	sy
}
    13aa:	b003      	add	sp, #12
    13ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13b0:	8ba3      	ldrh	r3, [r4, #28]
    13b2:	f043 0310 	orr.w	r3, r3, #16
    13b6:	83a3      	strh	r3, [r4, #28]
    13b8:	e7ec      	b.n	1394 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    13ba:	4da0      	ldr	r5, [pc, #640]	; (163c <process_event+0x2fc>)
    13bc:	f44f 739e 	mov.w	r3, #316	; 0x13c
    13c0:	462a      	mov	r2, r5
    13c2:	49a1      	ldr	r1, [pc, #644]	; (1648 <process_event+0x308>)
    13c4:	489f      	ldr	r0, [pc, #636]	; (1644 <process_event+0x304>)
    13c6:	f00f f9b7 	bl	10738 <assert_print>
    13ca:	f44f 719e 	mov.w	r1, #316	; 0x13c
    13ce:	4628      	mov	r0, r5
    13d0:	f00f f9ab 	bl	1072a <assert_post_action>
    13d4:	e7da      	b.n	138c <process_event+0x4c>
			evt = process_recheck(mgr);
    13d6:	4620      	mov	r0, r4
    13d8:	f00e fd47 	bl	fe6a <process_recheck>
    13dc:	4605      	mov	r5, r0
    13de:	e055      	b.n	148c <process_event+0x14c>
			res = mgr->last_res;
    13e0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    13e4:	464a      	mov	r2, r9
    13e6:	4669      	mov	r1, sp
    13e8:	4620      	mov	r0, r4
    13ea:	f7ff ff33 	bl	1254 <process_complete>
		onoff_transition_fn transit = NULL;
    13ee:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13f0:	8ba3      	ldrh	r3, [r4, #28]
    13f2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13f6:	45b8      	cmp	r8, r7
    13f8:	f000 8116 	beq.w	1628 <process_event+0x2e8>
	return list->head;
    13fc:	68a2      	ldr	r2, [r4, #8]
    13fe:	2a00      	cmp	r2, #0
    1400:	f000 8112 	beq.w	1628 <process_event+0x2e8>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1404:	2701      	movs	r7, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1406:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    140a:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    140c:	f104 0a14 	add.w	sl, r4, #20
    1410:	4650      	mov	r0, sl
    1412:	f00b f987 	bl	c724 <z_spin_unlock_valid>
    1416:	2800      	cmp	r0, #0
    1418:	f000 8128 	beq.w	166c <process_event+0x32c>
    141c:	f386 8811 	msr	BASEPRI, r6
    1420:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1424:	2f00      	cmp	r7, #0
    1426:	f040 8132 	bne.w	168e <process_event+0x34e>
    142a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    142c:	b12b      	cbz	r3, 143a <process_event+0xfa>
				notify_all(mgr, &clients, state, res);
    142e:	464b      	mov	r3, r9
    1430:	4642      	mov	r2, r8
    1432:	4669      	mov	r1, sp
    1434:	4620      	mov	r0, r4
    1436:	f00e fd59 	bl	feec <notify_all>
			if (transit != NULL) {
    143a:	b115      	cbz	r5, 1442 <process_event+0x102>
				transit(mgr, transition_complete);
    143c:	4983      	ldr	r1, [pc, #524]	; (164c <process_event+0x30c>)
    143e:	4620      	mov	r0, r4
    1440:	47a8      	blx	r5
	__asm__ volatile(
    1442:	f04f 0320 	mov.w	r3, #32
    1446:	f3ef 8611 	mrs	r6, BASEPRI
    144a:	f383 8812 	msr	BASEPRI_MAX, r3
    144e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1452:	4650      	mov	r0, sl
    1454:	f00b f956 	bl	c704 <z_spin_lock_valid>
    1458:	2800      	cmp	r0, #0
    145a:	f000 811e 	beq.w	169a <process_event+0x35a>
	z_spin_lock_set_owner(l);
    145e:	4650      	mov	r0, sl
    1460:	f00b f970 	bl	c744 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1464:	8ba3      	ldrh	r3, [r4, #28]
    1466:	f023 0308 	bic.w	r3, r3, #8
    146a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    146c:	8ba3      	ldrh	r3, [r4, #28]
    146e:	f013 0f10 	tst.w	r3, #16
    1472:	f000 8122 	beq.w	16ba <process_event+0x37a>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1476:	f023 0310 	bic.w	r3, r3, #16
    147a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    147c:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    147e:	8ba7      	ldrh	r7, [r4, #28]
    1480:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    1484:	2d00      	cmp	r5, #0
    1486:	d085      	beq.n	1394 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    1488:	2d02      	cmp	r5, #2
    148a:	d0a4      	beq.n	13d6 <process_event+0x96>
		if (evt == EVT_NOP) {
    148c:	2d00      	cmp	r5, #0
    148e:	d081      	beq.n	1394 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    1490:	3d01      	subs	r5, #1
    1492:	2d04      	cmp	r5, #4
    1494:	f200 80b8 	bhi.w	1608 <process_event+0x2c8>
    1498:	a301      	add	r3, pc, #4	; (adr r3, 14a0 <process_event+0x160>)
    149a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    149e:	bf00      	nop
    14a0:	000013e1 	.word	0x000013e1
    14a4:	00001609 	.word	0x00001609
    14a8:	000014b5 	.word	0x000014b5
    14ac:	00001525 	.word	0x00001525
    14b0:	00001597 	.word	0x00001597
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    14b4:	b95f      	cbnz	r7, 14ce <process_event+0x18e>
    14b6:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    14b8:	b1bb      	cbz	r3, 14ea <process_event+0x1aa>
			transit = mgr->transitions->start;
    14ba:	6923      	ldr	r3, [r4, #16]
    14bc:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    14be:	b315      	cbz	r5, 1506 <process_event+0x1c6>
			set_state(mgr, ONOFF_STATE_TO_ON);
    14c0:	2106      	movs	r1, #6
    14c2:	4620      	mov	r0, r4
    14c4:	f00e fca7 	bl	fe16 <set_state>
		res = 0;
    14c8:	f04f 0900 	mov.w	r9, #0
    14cc:	e790      	b.n	13f0 <process_event+0xb0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    14ce:	4d5b      	ldr	r5, [pc, #364]	; (163c <process_event+0x2fc>)
    14d0:	f44f 73ab 	mov.w	r3, #342	; 0x156
    14d4:	462a      	mov	r2, r5
    14d6:	495e      	ldr	r1, [pc, #376]	; (1650 <process_event+0x310>)
    14d8:	485a      	ldr	r0, [pc, #360]	; (1644 <process_event+0x304>)
    14da:	f00f f92d 	bl	10738 <assert_print>
    14de:	f44f 71ab 	mov.w	r1, #342	; 0x156
    14e2:	4628      	mov	r0, r5
    14e4:	f00f f921 	bl	1072a <assert_post_action>
    14e8:	e7e5      	b.n	14b6 <process_event+0x176>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    14ea:	4d54      	ldr	r5, [pc, #336]	; (163c <process_event+0x2fc>)
    14ec:	f240 1357 	movw	r3, #343	; 0x157
    14f0:	462a      	mov	r2, r5
    14f2:	4958      	ldr	r1, [pc, #352]	; (1654 <process_event+0x314>)
    14f4:	4853      	ldr	r0, [pc, #332]	; (1644 <process_event+0x304>)
    14f6:	f00f f91f 	bl	10738 <assert_print>
    14fa:	f240 1157 	movw	r1, #343	; 0x157
    14fe:	4628      	mov	r0, r5
    1500:	f00f f913 	bl	1072a <assert_post_action>
    1504:	e7d9      	b.n	14ba <process_event+0x17a>
			__ASSERT_NO_MSG(transit != NULL);
    1506:	f8df 8134 	ldr.w	r8, [pc, #308]	; 163c <process_event+0x2fc>
    150a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    150e:	4642      	mov	r2, r8
    1510:	4951      	ldr	r1, [pc, #324]	; (1658 <process_event+0x318>)
    1512:	484c      	ldr	r0, [pc, #304]	; (1644 <process_event+0x304>)
    1514:	f00f f910 	bl	10738 <assert_print>
    1518:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    151c:	4640      	mov	r0, r8
    151e:	f00f f904 	bl	1072a <assert_post_action>
    1522:	e7cd      	b.n	14c0 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1524:	2f02      	cmp	r7, #2
    1526:	d10b      	bne.n	1540 <process_event+0x200>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1528:	8be3      	ldrh	r3, [r4, #30]
    152a:	b9bb      	cbnz	r3, 155c <process_event+0x21c>
			transit = mgr->transitions->stop;
    152c:	6923      	ldr	r3, [r4, #16]
    152e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1530:	b315      	cbz	r5, 1578 <process_event+0x238>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1532:	2104      	movs	r1, #4
    1534:	4620      	mov	r0, r4
    1536:	f00e fc6e 	bl	fe16 <set_state>
		res = 0;
    153a:	f04f 0900 	mov.w	r9, #0
    153e:	e757      	b.n	13f0 <process_event+0xb0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1540:	4d3e      	ldr	r5, [pc, #248]	; (163c <process_event+0x2fc>)
    1542:	f240 135d 	movw	r3, #349	; 0x15d
    1546:	462a      	mov	r2, r5
    1548:	4944      	ldr	r1, [pc, #272]	; (165c <process_event+0x31c>)
    154a:	483e      	ldr	r0, [pc, #248]	; (1644 <process_event+0x304>)
    154c:	f00f f8f4 	bl	10738 <assert_print>
    1550:	f240 115d 	movw	r1, #349	; 0x15d
    1554:	4628      	mov	r0, r5
    1556:	f00f f8e8 	bl	1072a <assert_post_action>
    155a:	e7e5      	b.n	1528 <process_event+0x1e8>
			__ASSERT_NO_MSG(mgr->refs == 0);
    155c:	4d37      	ldr	r5, [pc, #220]	; (163c <process_event+0x2fc>)
    155e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1562:	462a      	mov	r2, r5
    1564:	493e      	ldr	r1, [pc, #248]	; (1660 <process_event+0x320>)
    1566:	4837      	ldr	r0, [pc, #220]	; (1644 <process_event+0x304>)
    1568:	f00f f8e6 	bl	10738 <assert_print>
    156c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1570:	4628      	mov	r0, r5
    1572:	f00f f8da 	bl	1072a <assert_post_action>
    1576:	e7d9      	b.n	152c <process_event+0x1ec>
			__ASSERT_NO_MSG(transit != NULL);
    1578:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 163c <process_event+0x2fc>
    157c:	f240 1361 	movw	r3, #353	; 0x161
    1580:	4642      	mov	r2, r8
    1582:	4935      	ldr	r1, [pc, #212]	; (1658 <process_event+0x318>)
    1584:	482f      	ldr	r0, [pc, #188]	; (1644 <process_event+0x304>)
    1586:	f00f f8d7 	bl	10738 <assert_print>
    158a:	f240 1161 	movw	r1, #353	; 0x161
    158e:	4640      	mov	r0, r8
    1590:	f00f f8cb 	bl	1072a <assert_post_action>
    1594:	e7cd      	b.n	1532 <process_event+0x1f2>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1596:	2f01      	cmp	r7, #1
    1598:	d10b      	bne.n	15b2 <process_event+0x272>
    159a:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    159c:	b1bb      	cbz	r3, 15ce <process_event+0x28e>
			transit = mgr->transitions->reset;
    159e:	6923      	ldr	r3, [r4, #16]
    15a0:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    15a2:	b315      	cbz	r5, 15ea <process_event+0x2aa>
			set_state(mgr, ONOFF_STATE_RESETTING);
    15a4:	2105      	movs	r1, #5
    15a6:	4620      	mov	r0, r4
    15a8:	f00e fc35 	bl	fe16 <set_state>
		res = 0;
    15ac:	f04f 0900 	mov.w	r9, #0
    15b0:	e71e      	b.n	13f0 <process_event+0xb0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    15b2:	4d22      	ldr	r5, [pc, #136]	; (163c <process_event+0x2fc>)
    15b4:	f44f 73b2 	mov.w	r3, #356	; 0x164
    15b8:	462a      	mov	r2, r5
    15ba:	492a      	ldr	r1, [pc, #168]	; (1664 <process_event+0x324>)
    15bc:	4821      	ldr	r0, [pc, #132]	; (1644 <process_event+0x304>)
    15be:	f00f f8bb 	bl	10738 <assert_print>
    15c2:	f44f 71b2 	mov.w	r1, #356	; 0x164
    15c6:	4628      	mov	r0, r5
    15c8:	f00f f8af 	bl	1072a <assert_post_action>
    15cc:	e7e5      	b.n	159a <process_event+0x25a>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    15ce:	4d1b      	ldr	r5, [pc, #108]	; (163c <process_event+0x2fc>)
    15d0:	f240 1365 	movw	r3, #357	; 0x165
    15d4:	462a      	mov	r2, r5
    15d6:	491f      	ldr	r1, [pc, #124]	; (1654 <process_event+0x314>)
    15d8:	481a      	ldr	r0, [pc, #104]	; (1644 <process_event+0x304>)
    15da:	f00f f8ad 	bl	10738 <assert_print>
    15de:	f240 1165 	movw	r1, #357	; 0x165
    15e2:	4628      	mov	r0, r5
    15e4:	f00f f8a1 	bl	1072a <assert_post_action>
    15e8:	e7d9      	b.n	159e <process_event+0x25e>
			__ASSERT_NO_MSG(transit != NULL);
    15ea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 163c <process_event+0x2fc>
    15ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
    15f2:	4642      	mov	r2, r8
    15f4:	4918      	ldr	r1, [pc, #96]	; (1658 <process_event+0x318>)
    15f6:	4813      	ldr	r0, [pc, #76]	; (1644 <process_event+0x304>)
    15f8:	f00f f89e 	bl	10738 <assert_print>
    15fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1600:	4640      	mov	r0, r8
    1602:	f00f f892 	bl	1072a <assert_post_action>
    1606:	e7cd      	b.n	15a4 <process_event+0x264>
			__ASSERT_NO_MSG(false);
    1608:	4d0c      	ldr	r5, [pc, #48]	; (163c <process_event+0x2fc>)
    160a:	f240 136b 	movw	r3, #363	; 0x16b
    160e:	462a      	mov	r2, r5
    1610:	4915      	ldr	r1, [pc, #84]	; (1668 <process_event+0x328>)
    1612:	480c      	ldr	r0, [pc, #48]	; (1644 <process_event+0x304>)
    1614:	f00f f890 	bl	10738 <assert_print>
    1618:	f240 116b 	movw	r1, #363	; 0x16b
    161c:	4628      	mov	r0, r5
    161e:	f00f f884 	bl	1072a <assert_post_action>
		onoff_transition_fn transit = NULL;
    1622:	2500      	movs	r5, #0
		res = 0;
    1624:	46a9      	mov	r9, r5
    1626:	e6e3      	b.n	13f0 <process_event+0xb0>
    1628:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    162a:	b10a      	cbz	r2, 1630 <process_event+0x2f0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    162c:	2700      	movs	r7, #0
    162e:	e6ea      	b.n	1406 <process_event+0xc6>
		    || (transit != NULL)) {
    1630:	2d00      	cmp	r5, #0
    1632:	f43f af1b 	beq.w	146c <process_event+0x12c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1636:	2700      	movs	r7, #0
    1638:	e6e5      	b.n	1406 <process_event+0xc6>
    163a:	bf00      	nop
    163c:	00013e54 	.word	0x00013e54
    1640:	00013ea0 	.word	0x00013ea0
    1644:	00013d44 	.word	0x00013d44
    1648:	00013eb0 	.word	0x00013eb0
    164c:	00001709 	.word	0x00001709
    1650:	00013ec4 	.word	0x00013ec4
    1654:	00013ed0 	.word	0x00013ed0
    1658:	00013ef4 	.word	0x00013ef4
    165c:	00013f0c 	.word	0x00013f0c
    1660:	00013f24 	.word	0x00013f24
    1664:	00013f34 	.word	0x00013f34
    1668:	000156e0 	.word	0x000156e0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    166c:	f8df b080 	ldr.w	fp, [pc, #128]	; 16f0 <process_event+0x3b0>
    1670:	23b9      	movs	r3, #185	; 0xb9
    1672:	465a      	mov	r2, fp
    1674:	491f      	ldr	r1, [pc, #124]	; (16f4 <process_event+0x3b4>)
    1676:	4820      	ldr	r0, [pc, #128]	; (16f8 <process_event+0x3b8>)
    1678:	f00f f85e 	bl	10738 <assert_print>
    167c:	4651      	mov	r1, sl
    167e:	481f      	ldr	r0, [pc, #124]	; (16fc <process_event+0x3bc>)
    1680:	f00f f85a 	bl	10738 <assert_print>
    1684:	21b9      	movs	r1, #185	; 0xb9
    1686:	4658      	mov	r0, fp
    1688:	f00f f84f 	bl	1072a <assert_post_action>
    168c:	e6c6      	b.n	141c <process_event+0xdc>
				notify_monitors(mgr, state, res);
    168e:	464a      	mov	r2, r9
    1690:	4641      	mov	r1, r8
    1692:	4620      	mov	r0, r4
    1694:	f00e fbc7 	bl	fe26 <notify_monitors>
    1698:	e6c7      	b.n	142a <process_event+0xea>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    169a:	4d15      	ldr	r5, [pc, #84]	; (16f0 <process_event+0x3b0>)
    169c:	238e      	movs	r3, #142	; 0x8e
    169e:	462a      	mov	r2, r5
    16a0:	4917      	ldr	r1, [pc, #92]	; (1700 <process_event+0x3c0>)
    16a2:	4815      	ldr	r0, [pc, #84]	; (16f8 <process_event+0x3b8>)
    16a4:	f00f f848 	bl	10738 <assert_print>
    16a8:	4651      	mov	r1, sl
    16aa:	4816      	ldr	r0, [pc, #88]	; (1704 <process_event+0x3c4>)
    16ac:	f00f f844 	bl	10738 <assert_print>
    16b0:	218e      	movs	r1, #142	; 0x8e
    16b2:	4628      	mov	r0, r5
    16b4:	f00f f839 	bl	1072a <assert_post_action>
    16b8:	e6d1      	b.n	145e <process_event+0x11e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    16ba:	f013 0f20 	tst.w	r3, #32
    16be:	d004      	beq.n	16ca <process_event+0x38a>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    16c0:	f023 0320 	bic.w	r3, r3, #32
    16c4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    16c6:	2502      	movs	r5, #2
    16c8:	e6d9      	b.n	147e <process_event+0x13e>
		evt = EVT_NOP;
    16ca:	2500      	movs	r5, #0
    16cc:	e6d7      	b.n	147e <process_event+0x13e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    16ce:	4d08      	ldr	r5, [pc, #32]	; (16f0 <process_event+0x3b0>)
    16d0:	23b9      	movs	r3, #185	; 0xb9
    16d2:	462a      	mov	r2, r5
    16d4:	4907      	ldr	r1, [pc, #28]	; (16f4 <process_event+0x3b4>)
    16d6:	4808      	ldr	r0, [pc, #32]	; (16f8 <process_event+0x3b8>)
    16d8:	f00f f82e 	bl	10738 <assert_print>
    16dc:	4621      	mov	r1, r4
    16de:	4807      	ldr	r0, [pc, #28]	; (16fc <process_event+0x3bc>)
    16e0:	f00f f82a 	bl	10738 <assert_print>
    16e4:	21b9      	movs	r1, #185	; 0xb9
    16e6:	4628      	mov	r0, r5
    16e8:	f00f f81f 	bl	1072a <assert_post_action>
    16ec:	e659      	b.n	13a2 <process_event+0x62>
    16ee:	bf00      	nop
    16f0:	00013f4c 	.word	0x00013f4c
    16f4:	00013f7c 	.word	0x00013f7c
    16f8:	00013d44 	.word	0x00013d44
    16fc:	00013f94 	.word	0x00013f94
    1700:	00013fac 	.word	0x00013fac
    1704:	00013fc4 	.word	0x00013fc4

00001708 <transition_complete>:
{
    1708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    170c:	4604      	mov	r4, r0
    170e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1710:	f100 0614 	add.w	r6, r0, #20
    1714:	f04f 0320 	mov.w	r3, #32
    1718:	f3ef 8711 	mrs	r7, BASEPRI
    171c:	f383 8812 	msr	BASEPRI_MAX, r3
    1720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1724:	4630      	mov	r0, r6
    1726:	f00a ffed 	bl	c704 <z_spin_lock_valid>
    172a:	b150      	cbz	r0, 1742 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    172c:	4630      	mov	r0, r6
    172e:	f00b f809 	bl	c744 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1732:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1734:	463a      	mov	r2, r7
    1736:	2101      	movs	r1, #1
    1738:	4620      	mov	r0, r4
    173a:	f7ff fe01 	bl	1340 <process_event>
}
    173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1742:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1764 <transition_complete+0x5c>
    1746:	238e      	movs	r3, #142	; 0x8e
    1748:	4642      	mov	r2, r8
    174a:	4907      	ldr	r1, [pc, #28]	; (1768 <transition_complete+0x60>)
    174c:	4807      	ldr	r0, [pc, #28]	; (176c <transition_complete+0x64>)
    174e:	f00e fff3 	bl	10738 <assert_print>
    1752:	4631      	mov	r1, r6
    1754:	4806      	ldr	r0, [pc, #24]	; (1770 <transition_complete+0x68>)
    1756:	f00e ffef 	bl	10738 <assert_print>
    175a:	218e      	movs	r1, #142	; 0x8e
    175c:	4640      	mov	r0, r8
    175e:	f00e ffe4 	bl	1072a <assert_post_action>
    1762:	e7e3      	b.n	172c <transition_complete+0x24>
    1764:	00013f4c 	.word	0x00013f4c
    1768:	00013fac 	.word	0x00013fac
    176c:	00013d44 	.word	0x00013d44
    1770:	00013fc4 	.word	0x00013fc4

00001774 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1778:	4604      	mov	r4, r0
    177a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    177c:	f00e fb8e 	bl	fe9c <validate_args>

	if (rv < 0) {
    1780:	1e06      	subs	r6, r0, #0
    1782:	db4a      	blt.n	181a <onoff_request+0xa6>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1784:	f104 0714 	add.w	r7, r4, #20
    1788:	f04f 0320 	mov.w	r3, #32
    178c:	f3ef 8911 	mrs	r9, BASEPRI
    1790:	f383 8812 	msr	BASEPRI_MAX, r3
    1794:	f3bf 8f6f 	isb	sy
    1798:	46ca      	mov	sl, r9
    179a:	4638      	mov	r0, r7
    179c:	f00a ffb2 	bl	c704 <z_spin_lock_valid>
    17a0:	b1a8      	cbz	r0, 17ce <onoff_request+0x5a>
	z_spin_lock_set_owner(l);
    17a2:	4638      	mov	r0, r7
    17a4:	f00a ffce 	bl	c744 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17a8:	8ba5      	ldrh	r5, [r4, #28]
    17aa:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    17ae:	8be3      	ldrh	r3, [r4, #30]
    17b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17b4:	4293      	cmp	r3, r2
    17b6:	d055      	beq.n	1864 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    17b8:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    17ba:	2d02      	cmp	r5, #2
    17bc:	d017      	beq.n	17ee <onoff_request+0x7a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    17be:	2d06      	cmp	r5, #6
    17c0:	d83c      	bhi.n	183c <onoff_request+0xc8>
    17c2:	e8df f005 	tbb	[pc, r5]
    17c6:	5634      	.short	0x5634
    17c8:	2d343b3b 	.word	0x2d343b3b
    17cc:	34          	.byte	0x34
    17cd:	00          	.byte	0x00
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17ce:	4d40      	ldr	r5, [pc, #256]	; (18d0 <onoff_request+0x15c>)
    17d0:	238e      	movs	r3, #142	; 0x8e
    17d2:	462a      	mov	r2, r5
    17d4:	493f      	ldr	r1, [pc, #252]	; (18d4 <onoff_request+0x160>)
    17d6:	4840      	ldr	r0, [pc, #256]	; (18d8 <onoff_request+0x164>)
    17d8:	f00e ffae 	bl	10738 <assert_print>
    17dc:	4639      	mov	r1, r7
    17de:	483f      	ldr	r0, [pc, #252]	; (18dc <onoff_request+0x168>)
    17e0:	f00e ffaa 	bl	10738 <assert_print>
    17e4:	218e      	movs	r1, #142	; 0x8e
    17e6:	4628      	mov	r0, r5
    17e8:	f00e ff9f 	bl	1072a <assert_post_action>
    17ec:	e7d9      	b.n	17a2 <onoff_request+0x2e>
		mgr->refs += 1U;
    17ee:	3301      	adds	r3, #1
    17f0:	83e3      	strh	r3, [r4, #30]
		notify = true;
    17f2:	f04f 0b01 	mov.w	fp, #1
	bool start = false;             /* trigger a start transition */
    17f6:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    17f8:	461a      	mov	r2, r3
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    17fa:	b142      	cbz	r2, 180e <onoff_request+0x9a>
	parent->next = child;
    17fc:	2200      	movs	r2, #0
    17fe:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    1802:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1804:	b3e2      	cbz	r2, 1880 <onoff_request+0x10c>
	parent->next = child;
    1806:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    180a:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    180e:	b3e3      	cbz	r3, 188a <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1810:	464a      	mov	r2, r9
    1812:	2102      	movs	r1, #2
    1814:	4620      	mov	r0, r4
    1816:	f7ff fd93 	bl	1340 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    181a:	4630      	mov	r0, r6
    181c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (state == ONOFF_STATE_ON) {
    1820:	f06f 0685 	mvn.w	r6, #133	; 0x85
    1824:	f04f 0b00 	mov.w	fp, #0
    1828:	465b      	mov	r3, fp
    182a:	465a      	mov	r2, fp
    182c:	e7e5      	b.n	17fa <onoff_request+0x86>
		start = (state == ONOFF_STATE_OFF);
    182e:	fab5 f385 	clz	r3, r5
    1832:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1834:	f04f 0b00 	mov.w	fp, #0
		add_client = true;
    1838:	2201      	movs	r2, #1
    183a:	e7de      	b.n	17fa <onoff_request+0x86>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    183c:	4e28      	ldr	r6, [pc, #160]	; (18e0 <onoff_request+0x16c>)
    183e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    1842:	4632      	mov	r2, r6
    1844:	4927      	ldr	r1, [pc, #156]	; (18e4 <onoff_request+0x170>)
    1846:	4824      	ldr	r0, [pc, #144]	; (18d8 <onoff_request+0x164>)
    1848:	f00e ff76 	bl	10738 <assert_print>
    184c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    1850:	4630      	mov	r0, r6
    1852:	f00e ff6a 	bl	1072a <assert_post_action>
		rv = -EIO;
    1856:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    185a:	f04f 0b00 	mov.w	fp, #0
	bool start = false;             /* trigger a start transition */
    185e:	465b      	mov	r3, fp
	bool add_client = false;        /* add client to pending list */
    1860:	465a      	mov	r2, fp
    1862:	e7ca      	b.n	17fa <onoff_request+0x86>
		rv = -EAGAIN;
    1864:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1868:	f04f 0b00 	mov.w	fp, #0
	bool start = false;             /* trigger a start transition */
    186c:	465b      	mov	r3, fp
	bool add_client = false;        /* add client to pending list */
    186e:	465a      	mov	r2, fp
    1870:	e7c3      	b.n	17fa <onoff_request+0x86>
	if (state == ONOFF_STATE_ON) {
    1872:	f06f 0604 	mvn.w	r6, #4
    1876:	f04f 0b00 	mov.w	fp, #0
    187a:	465b      	mov	r3, fp
    187c:	465a      	mov	r2, fp
    187e:	e7bc      	b.n	17fa <onoff_request+0x86>
    1880:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1884:	f8c4 8000 	str.w	r8, [r4]
}
    1888:	e7c1      	b.n	180e <onoff_request+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    188a:	4638      	mov	r0, r7
    188c:	f00a ff4a 	bl	c724 <z_spin_unlock_valid>
    1890:	b168      	cbz	r0, 18ae <onoff_request+0x13a>
	__asm__ volatile(
    1892:	f38a 8811 	msr	BASEPRI, sl
    1896:	f3bf 8f6f 	isb	sy
		if (notify) {
    189a:	f1bb 0f00 	cmp.w	fp, #0
    189e:	d0bc      	beq.n	181a <onoff_request+0xa6>
			notify_one(mgr, cli, state, 0);
    18a0:	2300      	movs	r3, #0
    18a2:	462a      	mov	r2, r5
    18a4:	4641      	mov	r1, r8
    18a6:	4620      	mov	r0, r4
    18a8:	f00e fb0d 	bl	fec6 <notify_one>
    18ac:	e7b5      	b.n	181a <onoff_request+0xa6>
    18ae:	f8df 9020 	ldr.w	r9, [pc, #32]	; 18d0 <onoff_request+0x15c>
    18b2:	23b9      	movs	r3, #185	; 0xb9
    18b4:	464a      	mov	r2, r9
    18b6:	490c      	ldr	r1, [pc, #48]	; (18e8 <onoff_request+0x174>)
    18b8:	4807      	ldr	r0, [pc, #28]	; (18d8 <onoff_request+0x164>)
    18ba:	f00e ff3d 	bl	10738 <assert_print>
    18be:	4639      	mov	r1, r7
    18c0:	480a      	ldr	r0, [pc, #40]	; (18ec <onoff_request+0x178>)
    18c2:	f00e ff39 	bl	10738 <assert_print>
    18c6:	21b9      	movs	r1, #185	; 0xb9
    18c8:	4648      	mov	r0, r9
    18ca:	f00e ff2e 	bl	1072a <assert_post_action>
    18ce:	e7e0      	b.n	1892 <onoff_request+0x11e>
    18d0:	00013f4c 	.word	0x00013f4c
    18d4:	00013fac 	.word	0x00013fac
    18d8:	00013d44 	.word	0x00013d44
    18dc:	00013fc4 	.word	0x00013fc4
    18e0:	00013e54 	.word	0x00013e54
    18e4:	00013f34 	.word	0x00013f34
    18e8:	00013f7c 	.word	0x00013f7c
    18ec:	00013f94 	.word	0x00013f94

000018f0 <onoff_sync_lock>:
	return rv;
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
    18f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18f2:	4604      	mov	r4, r0
    18f4:	460d      	mov	r5, r1
	__asm__ volatile(
    18f6:	f04f 0320 	mov.w	r3, #32
    18fa:	f3ef 8611 	mrs	r6, BASEPRI
    18fe:	f383 8812 	msr	BASEPRI_MAX, r3
    1902:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1906:	f00a fefd 	bl	c704 <z_spin_lock_valid>
    190a:	b128      	cbz	r0, 1918 <onoff_sync_lock+0x28>
	z_spin_lock_set_owner(l);
    190c:	4620      	mov	r0, r4
    190e:	f00a ff19 	bl	c744 <z_spin_lock_set_owner>
	*keyp = k_spin_lock(&srv->lock);
    1912:	602e      	str	r6, [r5, #0]
	return srv->count;
}
    1914:	6860      	ldr	r0, [r4, #4]
    1916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1918:	4f07      	ldr	r7, [pc, #28]	; (1938 <onoff_sync_lock+0x48>)
    191a:	238e      	movs	r3, #142	; 0x8e
    191c:	463a      	mov	r2, r7
    191e:	4907      	ldr	r1, [pc, #28]	; (193c <onoff_sync_lock+0x4c>)
    1920:	4807      	ldr	r0, [pc, #28]	; (1940 <onoff_sync_lock+0x50>)
    1922:	f00e ff09 	bl	10738 <assert_print>
    1926:	4621      	mov	r1, r4
    1928:	4806      	ldr	r0, [pc, #24]	; (1944 <onoff_sync_lock+0x54>)
    192a:	f00e ff05 	bl	10738 <assert_print>
    192e:	218e      	movs	r1, #142	; 0x8e
    1930:	4638      	mov	r0, r7
    1932:	f00e fefa 	bl	1072a <assert_post_action>
    1936:	e7e9      	b.n	190c <onoff_sync_lock+0x1c>
    1938:	00013f4c 	.word	0x00013f4c
    193c:	00013fac 	.word	0x00013fac
    1940:	00013d44 	.word	0x00013d44
    1944:	00013fc4 	.word	0x00013fc4

00001948 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    1948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    194c:	4604      	mov	r4, r0
    194e:	460d      	mov	r5, r1
    1950:	4617      	mov	r7, r2
    1952:	461e      	mov	r6, r3
    1954:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    1958:	6843      	ldr	r3, [r0, #4]
    195a:	2b00      	cmp	r3, #0
    195c:	db0a      	blt.n	1974 <onoff_sync_finalize+0x2c>
		srv->count = 0;
	}
	if (res < 0) {
    195e:	2e00      	cmp	r6, #0
    1960:	db0b      	blt.n	197a <onoff_sync_finalize+0x32>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
    1962:	f1b8 0f00 	cmp.w	r8, #0
    1966:	d022      	beq.n	19ae <onoff_sync_finalize+0x66>
		srv->count += 1;
    1968:	6863      	ldr	r3, [r4, #4]
    196a:	3301      	adds	r3, #1
    196c:	6063      	str	r3, [r4, #4]
	uint32_t state = ONOFF_STATE_ON;
    196e:	f04f 0a02 	mov.w	sl, #2
    1972:	e005      	b.n	1980 <onoff_sync_finalize+0x38>
		srv->count = 0;
    1974:	2300      	movs	r3, #0
    1976:	6043      	str	r3, [r0, #4]
    1978:	e7f1      	b.n	195e <onoff_sync_finalize+0x16>
		srv->count = res;
    197a:	6066      	str	r6, [r4, #4]
		state = ONOFF_STATE_ERROR;
    197c:	f04f 0a01 	mov.w	sl, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    1980:	f8d4 9004 	ldr.w	r9, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1984:	4620      	mov	r0, r4
    1986:	f00a fecd 	bl	c724 <z_spin_unlock_valid>
    198a:	b1b0      	cbz	r0, 19ba <onoff_sync_finalize+0x72>
	__asm__ volatile(
    198c:	f385 8811 	msr	BASEPRI, r5
    1990:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    1994:	b147      	cbz	r7, 19a8 <onoff_sync_finalize+0x60>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
    1996:	f1b8 0f00 	cmp.w	r8, #0
    199a:	d01f      	beq.n	19dc <onoff_sync_finalize+0x94>
		notify_one(NULL, cli, state, res);
    199c:	4633      	mov	r3, r6
    199e:	4652      	mov	r2, sl
    19a0:	4639      	mov	r1, r7
    19a2:	2000      	movs	r0, #0
    19a4:	f00e fa8f 	bl	fec6 <notify_one>
	}

	return rv;
}
    19a8:	4648      	mov	r0, r9
    19aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		srv->count -= 1;
    19ae:	6863      	ldr	r3, [r4, #4]
    19b0:	3b01      	subs	r3, #1
    19b2:	6063      	str	r3, [r4, #4]
	uint32_t state = ONOFF_STATE_ON;
    19b4:	f04f 0a02 	mov.w	sl, #2
    19b8:	e7e2      	b.n	1980 <onoff_sync_finalize+0x38>
    19ba:	f8df b03c 	ldr.w	fp, [pc, #60]	; 19f8 <onoff_sync_finalize+0xb0>
    19be:	23b9      	movs	r3, #185	; 0xb9
    19c0:	465a      	mov	r2, fp
    19c2:	490e      	ldr	r1, [pc, #56]	; (19fc <onoff_sync_finalize+0xb4>)
    19c4:	480e      	ldr	r0, [pc, #56]	; (1a00 <onoff_sync_finalize+0xb8>)
    19c6:	f00e feb7 	bl	10738 <assert_print>
    19ca:	4621      	mov	r1, r4
    19cc:	480d      	ldr	r0, [pc, #52]	; (1a04 <onoff_sync_finalize+0xbc>)
    19ce:	f00e feb3 	bl	10738 <assert_print>
    19d2:	21b9      	movs	r1, #185	; 0xb9
    19d4:	4658      	mov	r0, fp
    19d6:	f00e fea8 	bl	1072a <assert_post_action>
    19da:	e7d7      	b.n	198c <onoff_sync_finalize+0x44>
		__ASSERT_NO_MSG(on);
    19dc:	4c0a      	ldr	r4, [pc, #40]	; (1a08 <onoff_sync_finalize+0xc0>)
    19de:	f240 238a 	movw	r3, #650	; 0x28a
    19e2:	4622      	mov	r2, r4
    19e4:	4909      	ldr	r1, [pc, #36]	; (1a0c <onoff_sync_finalize+0xc4>)
    19e6:	4806      	ldr	r0, [pc, #24]	; (1a00 <onoff_sync_finalize+0xb8>)
    19e8:	f00e fea6 	bl	10738 <assert_print>
    19ec:	f240 218a 	movw	r1, #650	; 0x28a
    19f0:	4620      	mov	r0, r4
    19f2:	f00e fe9a 	bl	1072a <assert_post_action>
    19f6:	e7d1      	b.n	199c <onoff_sync_finalize+0x54>
    19f8:	00013f4c 	.word	0x00013f4c
    19fc:	00013f7c 	.word	0x00013f7c
    1a00:	00013d44 	.word	0x00013d44
    1a04:	00013f94 	.word	0x00013f94
    1a08:	00013e54 	.word	0x00013e54
    1a0c:	00016998 	.word	0x00016998

00001a10 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    1a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a14:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
    1a16:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    1a18:	424b      	negs	r3, r1
    1a1a:	400b      	ands	r3, r1
	if (align != rew) {
    1a1c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    1a20:	ea19 0901 	ands.w	r9, r9, r1
    1a24:	d00c      	beq.n	1a40 <sys_heap_aligned_alloc+0x30>
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    1a26:	68b2      	ldr	r2, [r6, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    1a28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1a2c:	d306      	bcc.n	1a3c <sys_heap_aligned_alloc+0x2c>
    1a2e:	2708      	movs	r7, #8
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    1a30:	42bb      	cmp	r3, r7
    1a32:	d25b      	bcs.n	1aec <sys_heap_aligned_alloc+0xdc>
    1a34:	461f      	mov	r7, r3
		align -= rew;
    1a36:	464c      	mov	r4, r9
	rew = align & -align;
    1a38:	4699      	mov	r9, r3
    1a3a:	e009      	b.n	1a50 <sys_heap_aligned_alloc+0x40>
    1a3c:	2704      	movs	r7, #4
    1a3e:	e7f7      	b.n	1a30 <sys_heap_aligned_alloc+0x20>
    1a40:	460c      	mov	r4, r1
	return big_heap_chunks(h->end_chunk);
    1a42:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    1a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1a48:	d349      	bcc.n	1ade <sys_heap_aligned_alloc+0xce>
    1a4a:	2708      	movs	r7, #8
	} else {
		if (align <= chunk_header_bytes(h)) {
    1a4c:	42bc      	cmp	r4, r7
    1a4e:	d948      	bls.n	1ae2 <sys_heap_aligned_alloc+0xd2>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1a50:	1e63      	subs	r3, r4, #1
    1a52:	4223      	tst	r3, r4
    1a54:	d14d      	bne.n	1af2 <sys_heap_aligned_alloc+0xe2>

	if (bytes == 0 || size_too_big(h, bytes)) {
    1a56:	2d00      	cmp	r5, #0
    1a58:	d075      	beq.n	1b46 <sys_heap_aligned_alloc+0x136>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    1a5a:	68b3      	ldr	r3, [r6, #8]
    1a5c:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
    1a60:	d974      	bls.n	1b4c <sys_heap_aligned_alloc+0x13c>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    1a62:	1961      	adds	r1, r4, r5
    1a64:	1bc9      	subs	r1, r1, r7
	return big_heap(h) ? 8 : 4;
    1a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1a6a:	d354      	bcc.n	1b16 <sys_heap_aligned_alloc+0x106>
    1a6c:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    1a6e:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1a70:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    1a72:	08c9      	lsrs	r1, r1, #3
    1a74:	4630      	mov	r0, r6
    1a76:	f00e fb9d 	bl	101b4 <alloc_chunk>

	if (c0 == 0) {
    1a7a:	4607      	mov	r7, r0
    1a7c:	2800      	cmp	r0, #0
    1a7e:	d068      	beq.n	1b52 <sys_heap_aligned_alloc+0x142>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    1a80:	4601      	mov	r1, r0
    1a82:	4630      	mov	r0, r6
    1a84:	f00e fa8b 	bl	ff9e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    1a88:	eb00 0809 	add.w	r8, r0, r9
    1a8c:	44a0      	add	r8, r4
    1a8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1a92:	4264      	negs	r4, r4
    1a94:	ea08 0804 	and.w	r8, r8, r4
    1a98:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    1a9c:	eb08 0405 	add.w	r4, r8, r5
    1aa0:	3407      	adds	r4, #7
    1aa2:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    1aa6:	4641      	mov	r1, r8
    1aa8:	4630      	mov	r0, r6
    1aaa:	f00e fb4f 	bl	1014c <mem_to_chunkid>
    1aae:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
    1ab0:	1ba4      	subs	r4, r4, r6
    1ab2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    1ab4:	4287      	cmp	r7, r0
    1ab6:	d330      	bcc.n	1b1a <sys_heap_aligned_alloc+0x10a>
	void *cmem = &buf[c];
    1ab8:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
    1abc:	68b2      	ldr	r2, [r6, #8]
	if (big_heap(h)) {
    1abe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1ac2:	d334      	bcc.n	1b2e <sys_heap_aligned_alloc+0x11e>
		return ((uint32_t *)cmem)[f];
    1ac4:	685b      	ldr	r3, [r3, #4]
	return c + chunk_size(h, c);
    1ac6:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    1aca:	429c      	cmp	r4, r3
    1acc:	d331      	bcc.n	1b32 <sys_heap_aligned_alloc+0x122>
		split_chunks(h, c, c_end);
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
    1ace:	2201      	movs	r2, #1
    1ad0:	4629      	mov	r1, r5
    1ad2:	4630      	mov	r0, r6
    1ad4:	f00e fa47 	bl	ff66 <set_chunk_used>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    1ad8:	4640      	mov	r0, r8
    1ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return big_heap(h) ? 8 : 4;
    1ade:	2704      	movs	r7, #4
    1ae0:	e7b4      	b.n	1a4c <sys_heap_aligned_alloc+0x3c>
			return sys_heap_alloc(heap, bytes);
    1ae2:	4629      	mov	r1, r5
    1ae4:	f00e fbb7 	bl	10256 <sys_heap_alloc>
    1ae8:	4680      	mov	r8, r0
    1aea:	e7f5      	b.n	1ad8 <sys_heap_aligned_alloc+0xc8>
		align -= rew;
    1aec:	464c      	mov	r4, r9
	rew = align & -align;
    1aee:	4699      	mov	r9, r3
    1af0:	e7ae      	b.n	1a50 <sys_heap_aligned_alloc+0x40>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1af2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1b58 <sys_heap_aligned_alloc+0x148>
    1af6:	f44f 73a0 	mov.w	r3, #320	; 0x140
    1afa:	4642      	mov	r2, r8
    1afc:	4917      	ldr	r1, [pc, #92]	; (1b5c <sys_heap_aligned_alloc+0x14c>)
    1afe:	4818      	ldr	r0, [pc, #96]	; (1b60 <sys_heap_aligned_alloc+0x150>)
    1b00:	f00e fe1a 	bl	10738 <assert_print>
    1b04:	4817      	ldr	r0, [pc, #92]	; (1b64 <sys_heap_aligned_alloc+0x154>)
    1b06:	f00e fe17 	bl	10738 <assert_print>
    1b0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
    1b0e:	4640      	mov	r0, r8
    1b10:	f00e fe0b 	bl	1072a <assert_post_action>
    1b14:	e79f      	b.n	1a56 <sys_heap_aligned_alloc+0x46>
    1b16:	2304      	movs	r3, #4
    1b18:	e7a9      	b.n	1a6e <sys_heap_aligned_alloc+0x5e>
		split_chunks(h, c0, c);
    1b1a:	4602      	mov	r2, r0
    1b1c:	4639      	mov	r1, r7
    1b1e:	4630      	mov	r0, r6
    1b20:	f00e fad1 	bl	100c6 <split_chunks>
		free_list_add(h, c0);
    1b24:	4639      	mov	r1, r7
    1b26:	4630      	mov	r0, r6
    1b28:	f00e fb1b 	bl	10162 <free_list_add>
    1b2c:	e7c4      	b.n	1ab8 <sys_heap_aligned_alloc+0xa8>
		return ((uint16_t *)cmem)[f];
    1b2e:	885b      	ldrh	r3, [r3, #2]
    1b30:	e7c9      	b.n	1ac6 <sys_heap_aligned_alloc+0xb6>
		split_chunks(h, c, c_end);
    1b32:	4622      	mov	r2, r4
    1b34:	4629      	mov	r1, r5
    1b36:	4630      	mov	r0, r6
    1b38:	f00e fac5 	bl	100c6 <split_chunks>
		free_list_add(h, c_end);
    1b3c:	4621      	mov	r1, r4
    1b3e:	4630      	mov	r0, r6
    1b40:	f00e fb0f 	bl	10162 <free_list_add>
    1b44:	e7c3      	b.n	1ace <sys_heap_aligned_alloc+0xbe>
		return NULL;
    1b46:	f04f 0800 	mov.w	r8, #0
    1b4a:	e7c5      	b.n	1ad8 <sys_heap_aligned_alloc+0xc8>
    1b4c:	f04f 0800 	mov.w	r8, #0
    1b50:	e7c2      	b.n	1ad8 <sys_heap_aligned_alloc+0xc8>
		return NULL;
    1b52:	f04f 0800 	mov.w	r8, #0
    1b56:	e7bf      	b.n	1ad8 <sys_heap_aligned_alloc+0xc8>
    1b58:	00013fdc 	.word	0x00013fdc
    1b5c:	000140b0 	.word	0x000140b0
    1b60:	00013d44 	.word	0x00013d44
    1b64:	000140cc 	.word	0x000140cc

00001b68 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b6c:	4606      	mov	r6, r0
    1b6e:	460d      	mov	r5, r1
    1b70:	4614      	mov	r4, r2
	return big_heap_bytes(size) ? 8 : 4;
    1b72:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    1b76:	d201      	bcs.n	1b7c <sys_heap_init+0x14>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1b78:	2a04      	cmp	r2, #4
    1b7a:	d92c      	bls.n	1bd6 <sys_heap_init+0x6e>
    1b7c:	f5b4 2f80 	cmp.w	r4, #262144	; 0x40000
    1b80:	d33a      	bcc.n	1bf8 <sys_heap_init+0x90>
    1b82:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    1b84:	1ae2      	subs	r2, r4, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1b86:	1dec      	adds	r4, r5, #7
    1b88:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1b8c:	4415      	add	r5, r2
    1b8e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1b92:	1b2d      	subs	r5, r5, r4
    1b94:	ea4f 09d5 	mov.w	r9, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1b98:	2d17      	cmp	r5, #23
    1b9a:	d92f      	bls.n	1bfc <sys_heap_init+0x94>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1b9c:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    1b9e:	f8c4 9008 	str.w	r9, [r4, #8]
	h->avail_buckets = 0;
    1ba2:	2300      	movs	r3, #0
    1ba4:	60e3      	str	r3, [r4, #12]
	return big_heap(h) ? 8 : 4;
    1ba6:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
    1baa:	d338      	bcc.n	1c1e <sys_heap_init+0xb6>
    1bac:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1bae:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    1bb0:	eba9 06d3 	sub.w	r6, r9, r3, lsr #3
    1bb4:	3601      	adds	r6, #1
	return 31 - __builtin_clz(usable_sz);
    1bb6:	fab6 f686 	clz	r6, r6
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1bba:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1bbe:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    1bc2:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1bc4:	3607      	adds	r6, #7
    1bc6:	ea4f 08d6 	mov.w	r8, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1bca:	eb08 03d3 	add.w	r3, r8, r3, lsr #3
    1bce:	454b      	cmp	r3, r9
    1bd0:	d827      	bhi.n	1c22 <sys_heap_init+0xba>
	return big_heap(h) ? 8 : 4;
    1bd2:	2300      	movs	r3, #0
    1bd4:	e03c      	b.n	1c50 <sys_heap_init+0xe8>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1bd6:	4f47      	ldr	r7, [pc, #284]	; (1cf4 <sys_heap_init+0x18c>)
    1bd8:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1bdc:	463a      	mov	r2, r7
    1bde:	4946      	ldr	r1, [pc, #280]	; (1cf8 <sys_heap_init+0x190>)
    1be0:	4846      	ldr	r0, [pc, #280]	; (1cfc <sys_heap_init+0x194>)
    1be2:	f00e fda9 	bl	10738 <assert_print>
    1be6:	4846      	ldr	r0, [pc, #280]	; (1d00 <sys_heap_init+0x198>)
    1be8:	f00e fda6 	bl	10738 <assert_print>
    1bec:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1bf0:	4638      	mov	r0, r7
    1bf2:	f00e fd9a 	bl	1072a <assert_post_action>
    1bf6:	e7c1      	b.n	1b7c <sys_heap_init+0x14>
	return big_heap_bytes(size) ? 8 : 4;
    1bf8:	2304      	movs	r3, #4
    1bfa:	e7c3      	b.n	1b84 <sys_heap_init+0x1c>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1bfc:	4f3d      	ldr	r7, [pc, #244]	; (1cf4 <sys_heap_init+0x18c>)
    1bfe:	f240 13f3 	movw	r3, #499	; 0x1f3
    1c02:	463a      	mov	r2, r7
    1c04:	493f      	ldr	r1, [pc, #252]	; (1d04 <sys_heap_init+0x19c>)
    1c06:	483d      	ldr	r0, [pc, #244]	; (1cfc <sys_heap_init+0x194>)
    1c08:	f00e fd96 	bl	10738 <assert_print>
    1c0c:	483c      	ldr	r0, [pc, #240]	; (1d00 <sys_heap_init+0x198>)
    1c0e:	f00e fd93 	bl	10738 <assert_print>
    1c12:	f240 11f3 	movw	r1, #499	; 0x1f3
    1c16:	4638      	mov	r0, r7
    1c18:	f00e fd87 	bl	1072a <assert_post_action>
    1c1c:	e7be      	b.n	1b9c <sys_heap_init+0x34>
	return big_heap(h) ? 8 : 4;
    1c1e:	2304      	movs	r3, #4
    1c20:	e7c5      	b.n	1bae <sys_heap_init+0x46>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1c22:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1cf4 <sys_heap_init+0x18c>
    1c26:	f44f 7301 	mov.w	r3, #516	; 0x204
    1c2a:	4652      	mov	r2, sl
    1c2c:	4936      	ldr	r1, [pc, #216]	; (1d08 <sys_heap_init+0x1a0>)
    1c2e:	4833      	ldr	r0, [pc, #204]	; (1cfc <sys_heap_init+0x194>)
    1c30:	f00e fd82 	bl	10738 <assert_print>
    1c34:	4832      	ldr	r0, [pc, #200]	; (1d00 <sys_heap_init+0x198>)
    1c36:	f00e fd7f 	bl	10738 <assert_print>
    1c3a:	f44f 7101 	mov.w	r1, #516	; 0x204
    1c3e:	4650      	mov	r0, sl
    1c40:	f00e fd73 	bl	1072a <assert_post_action>
    1c44:	e7c5      	b.n	1bd2 <sys_heap_init+0x6a>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1c46:	1d1a      	adds	r2, r3, #4
    1c48:	2100      	movs	r1, #0
    1c4a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1c4e:	3301      	adds	r3, #1
    1c50:	42bb      	cmp	r3, r7
    1c52:	dbf8      	blt.n	1c46 <sys_heap_init+0xde>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1c54:	ea4f 0248 	mov.w	r2, r8, lsl #1
	return big_heap_chunks(h->end_chunk);
    1c58:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    1c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1c5e:	d335      	bcc.n	1ccc <sys_heap_init+0x164>
		((uint32_t *)cmem)[f] = val;
    1c60:	6062      	str	r2, [r4, #4]
	if (big_heap(h)) {
    1c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1c66:	d333      	bcc.n	1cd0 <sys_heap_init+0x168>
		((uint32_t *)cmem)[f] = val;
    1c68:	2200      	movs	r2, #0
    1c6a:	6022      	str	r2, [r4, #0]
	if (big_heap(h)) {
    1c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1c70:	d331      	bcc.n	1cd6 <sys_heap_init+0x16e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    1c72:	6862      	ldr	r2, [r4, #4]
    1c74:	f042 0201 	orr.w	r2, r2, #1
    1c78:	6062      	str	r2, [r4, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1c7a:	eba9 0208 	sub.w	r2, r9, r8
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1c7e:	0050      	lsls	r0, r2, #1
	void *cmem = &buf[c];
    1c80:	f026 0607 	bic.w	r6, r6, #7
    1c84:	19a1      	adds	r1, r4, r6
	if (big_heap(h)) {
    1c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1c8a:	d329      	bcc.n	1ce0 <sys_heap_init+0x178>
		((uint32_t *)cmem)[f] = val;
    1c8c:	6048      	str	r0, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    1c8e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    1c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1c94:	d326      	bcc.n	1ce4 <sys_heap_init+0x17c>
		((uint32_t *)cmem)[f] = val;
    1c96:	f844 8006 	str.w	r8, [r4, r6]
	void *cmem = &buf[c];
    1c9a:	f025 0307 	bic.w	r3, r5, #7
    1c9e:	4425      	add	r5, r4
	return big_heap_chunks(h->end_chunk);
    1ca0:	68a1      	ldr	r1, [r4, #8]
	if (big_heap(h)) {
    1ca2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    1ca6:	d320      	bcc.n	1cea <sys_heap_init+0x182>
		((uint32_t *)cmem)[f] = val;
    1ca8:	2100      	movs	r1, #0
    1caa:	6069      	str	r1, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    1cac:	68a1      	ldr	r1, [r4, #8]
	if (big_heap(h)) {
    1cae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    1cb2:	d31d      	bcc.n	1cf0 <sys_heap_init+0x188>
		((uint32_t *)cmem)[f] = val;
    1cb4:	50e2      	str	r2, [r4, r3]
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    1cb6:	2201      	movs	r2, #1
    1cb8:	4649      	mov	r1, r9
    1cba:	4620      	mov	r0, r4
    1cbc:	f00e f953 	bl	ff66 <set_chunk_used>

	free_list_add(h, chunk0_size);
    1cc0:	4641      	mov	r1, r8
    1cc2:	4620      	mov	r0, r4
    1cc4:	f00e fa4d 	bl	10162 <free_list_add>
}
    1cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		((uint16_t *)cmem)[f] = val;
    1ccc:	8062      	strh	r2, [r4, #2]
    1cce:	e7c8      	b.n	1c62 <sys_heap_init+0xfa>
    1cd0:	2200      	movs	r2, #0
    1cd2:	8022      	strh	r2, [r4, #0]
    1cd4:	e7ca      	b.n	1c6c <sys_heap_init+0x104>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1cd6:	8862      	ldrh	r2, [r4, #2]
    1cd8:	f042 0201 	orr.w	r2, r2, #1
    1cdc:	8062      	strh	r2, [r4, #2]
    1cde:	e7cc      	b.n	1c7a <sys_heap_init+0x112>
		((uint16_t *)cmem)[f] = val;
    1ce0:	8048      	strh	r0, [r1, #2]
    1ce2:	e7d4      	b.n	1c8e <sys_heap_init+0x126>
    1ce4:	f824 8006 	strh.w	r8, [r4, r6]
    1ce8:	e7d7      	b.n	1c9a <sys_heap_init+0x132>
    1cea:	2100      	movs	r1, #0
    1cec:	8069      	strh	r1, [r5, #2]
    1cee:	e7dd      	b.n	1cac <sys_heap_init+0x144>
    1cf0:	52e2      	strh	r2, [r4, r3]
    1cf2:	e7e0      	b.n	1cb6 <sys_heap_init+0x14e>
    1cf4:	00013fdc 	.word	0x00013fdc
    1cf8:	000140ec 	.word	0x000140ec
    1cfc:	00013d44 	.word	0x00013d44
    1d00:	00014110 	.word	0x00014110
    1d04:	0001412c 	.word	0x0001412c
    1d08:	00014158 	.word	0x00014158

00001d0c <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    1d0c:	4684      	mov	ip, r0
    1d0e:	4608      	mov	r0, r1
	bool loop = true;
    1d10:	2201      	movs	r2, #1
    1d12:	e026      	b.n	1d62 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    1d14:	f89c 3000 	ldrb.w	r3, [ip]
    1d18:	f043 0304 	orr.w	r3, r3, #4
    1d1c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    1d20:	b1f2      	cbz	r2, 1d60 <extract_flags+0x54>
			++sp;
    1d22:	3001      	adds	r0, #1
    1d24:	e01c      	b.n	1d60 <extract_flags+0x54>
			conv->flag_plus = true;
    1d26:	f89c 3000 	ldrb.w	r3, [ip]
    1d2a:	f043 0308 	orr.w	r3, r3, #8
    1d2e:	f88c 3000 	strb.w	r3, [ip]
			break;
    1d32:	e7f5      	b.n	1d20 <extract_flags+0x14>
			conv->flag_space = true;
    1d34:	f89c 3000 	ldrb.w	r3, [ip]
    1d38:	f043 0310 	orr.w	r3, r3, #16
    1d3c:	f88c 3000 	strb.w	r3, [ip]
			break;
    1d40:	e7ee      	b.n	1d20 <extract_flags+0x14>
			conv->flag_hash = true;
    1d42:	f89c 3000 	ldrb.w	r3, [ip]
    1d46:	f043 0320 	orr.w	r3, r3, #32
    1d4a:	f88c 3000 	strb.w	r3, [ip]
			break;
    1d4e:	e7e7      	b.n	1d20 <extract_flags+0x14>
			conv->flag_zero = true;
    1d50:	f89c 3000 	ldrb.w	r3, [ip]
    1d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d58:	f88c 3000 	strb.w	r3, [ip]
			break;
    1d5c:	e7e0      	b.n	1d20 <extract_flags+0x14>
		switch (*sp) {
    1d5e:	2200      	movs	r2, #0
		}
	} while (loop);
    1d60:	b342      	cbz	r2, 1db4 <extract_flags+0xa8>
		switch (*sp) {
    1d62:	7803      	ldrb	r3, [r0, #0]
    1d64:	3b20      	subs	r3, #32
    1d66:	2b10      	cmp	r3, #16
    1d68:	d8f9      	bhi.n	1d5e <extract_flags+0x52>
    1d6a:	a101      	add	r1, pc, #4	; (adr r1, 1d70 <extract_flags+0x64>)
    1d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1d70:	00001d35 	.word	0x00001d35
    1d74:	00001d5f 	.word	0x00001d5f
    1d78:	00001d5f 	.word	0x00001d5f
    1d7c:	00001d43 	.word	0x00001d43
    1d80:	00001d5f 	.word	0x00001d5f
    1d84:	00001d5f 	.word	0x00001d5f
    1d88:	00001d5f 	.word	0x00001d5f
    1d8c:	00001d5f 	.word	0x00001d5f
    1d90:	00001d5f 	.word	0x00001d5f
    1d94:	00001d5f 	.word	0x00001d5f
    1d98:	00001d5f 	.word	0x00001d5f
    1d9c:	00001d27 	.word	0x00001d27
    1da0:	00001d5f 	.word	0x00001d5f
    1da4:	00001d15 	.word	0x00001d15
    1da8:	00001d5f 	.word	0x00001d5f
    1dac:	00001d5f 	.word	0x00001d5f
    1db0:	00001d51 	.word	0x00001d51

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    1db4:	f89c 3000 	ldrb.w	r3, [ip]
    1db8:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1dbc:	2b44      	cmp	r3, #68	; 0x44
    1dbe:	d000      	beq.n	1dc2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    1dc0:	4770      	bx	lr
		conv->flag_zero = false;
    1dc2:	f89c 3000 	ldrb.w	r3, [ip]
    1dc6:	f36f 1386 	bfc	r3, #6, #1
    1dca:	f88c 3000 	strb.w	r3, [ip]
    1dce:	e7f7      	b.n	1dc0 <extract_flags+0xb4>

00001dd0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dd4:	b091      	sub	sp, #68	; 0x44
    1dd6:	4606      	mov	r6, r0
    1dd8:	460d      	mov	r5, r1
    1dda:	4691      	mov	r9, r2
    1ddc:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1dde:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1de0:	f899 0000 	ldrb.w	r0, [r9]
    1de4:	2800      	cmp	r0, #0
    1de6:	f000 82b9 	beq.w	235c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35c>
		if (*fp != '%') {
    1dea:	2825      	cmp	r0, #37	; 0x25
    1dec:	d008      	beq.n	1e00 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1dee:	f109 0901 	add.w	r9, r9, #1
    1df2:	4629      	mov	r1, r5
    1df4:	47b0      	blx	r6
    1df6:	2800      	cmp	r0, #0
    1df8:	f2c0 82b1 	blt.w	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    1dfc:	3401      	adds	r4, #1
			continue;
    1dfe:	e7ef      	b.n	1de0 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1e00:	2300      	movs	r3, #0
    1e02:	9304      	str	r3, [sp, #16]
    1e04:	9305      	str	r3, [sp, #20]
    1e06:	9306      	str	r3, [sp, #24]
    1e08:	9307      	str	r3, [sp, #28]
    1e0a:	9308      	str	r3, [sp, #32]
    1e0c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1e0e:	4649      	mov	r1, r9
    1e10:	a806      	add	r0, sp, #24
    1e12:	f00e fbca 	bl	105aa <extract_conversion>
    1e16:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1e18:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1e1c:	f013 0f01 	tst.w	r3, #1
    1e20:	f000 8097 	beq.w	1f52 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    1e24:	9b03      	ldr	r3, [sp, #12]
    1e26:	1d1a      	adds	r2, r3, #4
    1e28:	9203      	str	r2, [sp, #12]
    1e2a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1e2c:	2f00      	cmp	r7, #0
    1e2e:	f2c0 8088 	blt.w	1f42 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1e32:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1e36:	f013 0f04 	tst.w	r3, #4
    1e3a:	f000 809c 	beq.w	1f76 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    1e3e:	9b03      	ldr	r3, [sp, #12]
    1e40:	1d1a      	adds	r2, r3, #4
    1e42:	9203      	str	r2, [sp, #12]
    1e44:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1e48:	f1ba 0f00 	cmp.w	sl, #0
    1e4c:	f2c0 808a 	blt.w	1f64 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1e50:	2300      	movs	r3, #0
    1e52:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1e54:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1e56:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1e5a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1e5e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1e62:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1e66:	2b01      	cmp	r3, #1
    1e68:	f000 808e 	beq.w	1f88 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1e6c:	2b02      	cmp	r3, #2
    1e6e:	f000 80d3 	beq.w	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1e72:	2b04      	cmp	r3, #4
    1e74:	f000 8124 	beq.w	20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1e78:	2b03      	cmp	r3, #3
    1e7a:	f000 813b 	beq.w	20f4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf4>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1e7e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1e82:	f018 0b03 	ands.w	fp, r8, #3
    1e86:	f040 813b 	bne.w	2100 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x100>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1e8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1e8e:	3b25      	subs	r3, #37	; 0x25
    1e90:	2b53      	cmp	r3, #83	; 0x53
    1e92:	f200 81ca 	bhi.w	222a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22a>
    1e96:	e8df f013 	tbh	[pc, r3, lsl #1]
    1e9a:	0140      	.short	0x0140
    1e9c:	01c801c8 	.word	0x01c801c8
    1ea0:	01c801c8 	.word	0x01c801c8
    1ea4:	01c801c8 	.word	0x01c801c8
    1ea8:	01c801c8 	.word	0x01c801c8
    1eac:	01c801c8 	.word	0x01c801c8
    1eb0:	01c801c8 	.word	0x01c801c8
    1eb4:	01c801c8 	.word	0x01c801c8
    1eb8:	01c801c8 	.word	0x01c801c8
    1ebc:	01c801c8 	.word	0x01c801c8
    1ec0:	01c801c8 	.word	0x01c801c8
    1ec4:	01c801c8 	.word	0x01c801c8
    1ec8:	01c801c8 	.word	0x01c801c8
    1ecc:	01c801c8 	.word	0x01c801c8
    1ed0:	01c801c8 	.word	0x01c801c8
    1ed4:	01c801c8 	.word	0x01c801c8
    1ed8:	01c801c8 	.word	0x01c801c8
    1edc:	01c801c8 	.word	0x01c801c8
    1ee0:	01c801c8 	.word	0x01c801c8
    1ee4:	01c801c8 	.word	0x01c801c8
    1ee8:	01c801c8 	.word	0x01c801c8
    1eec:	01c801c8 	.word	0x01c801c8
    1ef0:	01c801c8 	.word	0x01c801c8
    1ef4:	01c801c8 	.word	0x01c801c8
    1ef8:	01c801c8 	.word	0x01c801c8
    1efc:	01c801c8 	.word	0x01c801c8
    1f00:	01c80181 	.word	0x01c80181
    1f04:	01c801c8 	.word	0x01c801c8
    1f08:	01c801c8 	.word	0x01c801c8
    1f0c:	01c801c8 	.word	0x01c801c8
    1f10:	01c801c8 	.word	0x01c801c8
    1f14:	015e01c8 	.word	0x015e01c8
    1f18:	01c80167 	.word	0x01c80167
    1f1c:	01c801c8 	.word	0x01c801c8
    1f20:	016701c8 	.word	0x016701c8
    1f24:	01c801c8 	.word	0x01c801c8
    1f28:	01c801c8 	.word	0x01c801c8
    1f2c:	018101bd 	.word	0x018101bd
    1f30:	01c801a1 	.word	0x01c801a1
    1f34:	014d01c8 	.word	0x014d01c8
    1f38:	018101c8 	.word	0x018101c8
    1f3c:	01c801c8 	.word	0x01c801c8
    1f40:	0181      	.short	0x0181
				conv->flag_dash = true;
    1f42:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1f46:	f043 0304 	orr.w	r3, r3, #4
    1f4a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1f4e:	427f      	negs	r7, r7
    1f50:	e76f      	b.n	1e32 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    1f52:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1f56:	2b00      	cmp	r3, #0
    1f58:	db02      	blt.n	1f60 <z_cbvprintf_impl+0x190>
		int width = -1;
    1f5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1f5e:	e768      	b.n	1e32 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    1f60:	9f07      	ldr	r7, [sp, #28]
    1f62:	e766      	b.n	1e32 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    1f64:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1f68:	f36f 0341 	bfc	r3, #1, #1
    1f6c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1f70:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1f74:	e76c      	b.n	1e50 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    1f76:	f013 0f02 	tst.w	r3, #2
    1f7a:	d002      	beq.n	1f82 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    1f7c:	f8dd a020 	ldr.w	sl, [sp, #32]
    1f80:	e766      	b.n	1e50 <z_cbvprintf_impl+0x80>
		int precision = -1;
    1f82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1f86:	e763      	b.n	1e50 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    1f88:	1ecb      	subs	r3, r1, #3
    1f8a:	2b04      	cmp	r3, #4
    1f8c:	d804      	bhi.n	1f98 <z_cbvprintf_impl+0x1c8>
    1f8e:	e8df f003 	tbb	[pc, r3]
    1f92:	1d0b      	.short	0x1d0b
    1f94:	3529      	.short	0x3529
    1f96:	35          	.byte	0x35
    1f97:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1f98:	9b03      	ldr	r3, [sp, #12]
    1f9a:	1d1a      	adds	r2, r3, #4
    1f9c:	9203      	str	r2, [sp, #12]
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	17da      	asrs	r2, r3, #31
    1fa2:	9304      	str	r3, [sp, #16]
    1fa4:	9205      	str	r2, [sp, #20]
				break;
    1fa6:	e006      	b.n	1fb6 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	1d1a      	adds	r2, r3, #4
    1fac:	9203      	str	r2, [sp, #12]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	17da      	asrs	r2, r3, #31
    1fb2:	9304      	str	r3, [sp, #16]
    1fb4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    1fb6:	2901      	cmp	r1, #1
    1fb8:	d028      	beq.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
			} else if (length_mod == LENGTH_H) {
    1fba:	2902      	cmp	r1, #2
    1fbc:	f47f af5f 	bne.w	1e7e <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    1fc0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1fc4:	17da      	asrs	r2, r3, #31
    1fc6:	9304      	str	r3, [sp, #16]
    1fc8:	9205      	str	r2, [sp, #20]
    1fca:	e758      	b.n	1e7e <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    1fcc:	9b03      	ldr	r3, [sp, #12]
    1fce:	3307      	adds	r3, #7
    1fd0:	f023 0307 	bic.w	r3, r3, #7
    1fd4:	f103 0208 	add.w	r2, r3, #8
    1fd8:	9203      	str	r2, [sp, #12]
    1fda:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1fe2:	e7e8      	b.n	1fb6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1fe4:	9b03      	ldr	r3, [sp, #12]
    1fe6:	3307      	adds	r3, #7
    1fe8:	f023 0307 	bic.w	r3, r3, #7
    1fec:	f103 0208 	add.w	r2, r3, #8
    1ff0:	9203      	str	r2, [sp, #12]
    1ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1ff6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1ffa:	e7dc      	b.n	1fb6 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1ffc:	9b03      	ldr	r3, [sp, #12]
    1ffe:	1d1a      	adds	r2, r3, #4
    2000:	9203      	str	r2, [sp, #12]
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	17da      	asrs	r2, r3, #31
				value->sint =
    2006:	9304      	str	r3, [sp, #16]
    2008:	9205      	str	r2, [sp, #20]
				break;
    200a:	e7d4      	b.n	1fb6 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    200c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    2010:	17da      	asrs	r2, r3, #31
    2012:	9304      	str	r3, [sp, #16]
    2014:	9205      	str	r2, [sp, #20]
    2016:	e732      	b.n	1e7e <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    2018:	1ecb      	subs	r3, r1, #3
    201a:	2b04      	cmp	r3, #4
    201c:	d804      	bhi.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    201e:	e8df f003 	tbb	[pc, r3]
    2022:	1f0b      	.short	0x1f0b
    2024:	4135      	.short	0x4135
    2026:	41          	.byte	0x41
    2027:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2028:	9b03      	ldr	r3, [sp, #12]
    202a:	1d1a      	adds	r2, r3, #4
    202c:	9203      	str	r2, [sp, #12]
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	9304      	str	r3, [sp, #16]
    2032:	2300      	movs	r3, #0
    2034:	9305      	str	r3, [sp, #20]
				break;
    2036:	e01e      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
				    && (conv->specifier == 'c')) {
    2038:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    203c:	2b63      	cmp	r3, #99	; 0x63
    203e:	d007      	beq.n	2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>
					value->uint = va_arg(ap, unsigned long);
    2040:	9b03      	ldr	r3, [sp, #12]
    2042:	1d1a      	adds	r2, r3, #4
    2044:	9203      	str	r2, [sp, #12]
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	9304      	str	r3, [sp, #16]
    204a:	2300      	movs	r3, #0
    204c:	9305      	str	r3, [sp, #20]
    204e:	e012      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
					value->uint = (wchar_t)va_arg(ap,
    2050:	9b03      	ldr	r3, [sp, #12]
    2052:	1d1a      	adds	r2, r3, #4
    2054:	9203      	str	r2, [sp, #12]
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	9304      	str	r3, [sp, #16]
    205a:	2300      	movs	r3, #0
    205c:	9305      	str	r3, [sp, #20]
    205e:	e00a      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
					(uint_value_type)va_arg(ap,
    2060:	9b03      	ldr	r3, [sp, #12]
    2062:	3307      	adds	r3, #7
    2064:	f023 0307 	bic.w	r3, r3, #7
    2068:	f103 0208 	add.w	r2, r3, #8
    206c:	9203      	str	r2, [sp, #12]
    206e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2072:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    2076:	2901      	cmp	r1, #1
    2078:	d01c      	beq.n	20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>
			} else if (length_mod == LENGTH_H) {
    207a:	2902      	cmp	r1, #2
    207c:	f47f aeff 	bne.w	1e7e <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    2080:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    2084:	9304      	str	r3, [sp, #16]
    2086:	2300      	movs	r3, #0
    2088:	9305      	str	r3, [sp, #20]
    208a:	e6f8      	b.n	1e7e <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    208c:	9b03      	ldr	r3, [sp, #12]
    208e:	3307      	adds	r3, #7
    2090:	f023 0307 	bic.w	r3, r3, #7
    2094:	f103 0208 	add.w	r2, r3, #8
    2098:	9203      	str	r2, [sp, #12]
    209a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    209e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    20a2:	e7e8      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
					(uint_value_type)va_arg(ap, size_t);
    20a4:	9b03      	ldr	r3, [sp, #12]
    20a6:	1d1a      	adds	r2, r3, #4
    20a8:	9203      	str	r2, [sp, #12]
    20aa:	681b      	ldr	r3, [r3, #0]
				value->uint =
    20ac:	9304      	str	r3, [sp, #16]
    20ae:	2300      	movs	r3, #0
    20b0:	9305      	str	r3, [sp, #20]
				break;
    20b2:	e7e0      	b.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
				value->uint = (unsigned char)value->uint;
    20b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    20b8:	9304      	str	r3, [sp, #16]
    20ba:	2300      	movs	r3, #0
    20bc:	9305      	str	r3, [sp, #20]
    20be:	e6de      	b.n	1e7e <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    20c0:	2908      	cmp	r1, #8
    20c2:	d00b      	beq.n	20dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xdc>
				value->dbl = va_arg(ap, double);
    20c4:	9b03      	ldr	r3, [sp, #12]
    20c6:	3307      	adds	r3, #7
    20c8:	f023 0307 	bic.w	r3, r3, #7
    20cc:	f103 0208 	add.w	r2, r3, #8
    20d0:	9203      	str	r2, [sp, #12]
    20d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    20d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    20da:	e6d0      	b.n	1e7e <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    20dc:	9b03      	ldr	r3, [sp, #12]
    20de:	3307      	adds	r3, #7
    20e0:	f023 0307 	bic.w	r3, r3, #7
    20e4:	f103 0208 	add.w	r2, r3, #8
    20e8:	9203      	str	r2, [sp, #12]
    20ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    20f2:	e6c4      	b.n	1e7e <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    20f4:	9b03      	ldr	r3, [sp, #12]
    20f6:	1d1a      	adds	r2, r3, #4
    20f8:	9203      	str	r2, [sp, #12]
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	9304      	str	r3, [sp, #16]
    20fe:	e6be      	b.n	1e7e <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    2100:	9f02      	ldr	r7, [sp, #8]
    2102:	463b      	mov	r3, r7
    2104:	464a      	mov	r2, r9
    2106:	4629      	mov	r1, r5
    2108:	4630      	mov	r0, r6
    210a:	f00e faf4 	bl	106f6 <outs>
    210e:	2800      	cmp	r0, #0
    2110:	f2c0 8125 	blt.w	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    2114:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2116:	46b9      	mov	r9, r7
			continue;
    2118:	e662      	b.n	1de0 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    211a:	4629      	mov	r1, r5
    211c:	2025      	movs	r0, #37	; 0x25
    211e:	47b0      	blx	r6
    2120:	2800      	cmp	r0, #0
    2122:	f2c0 811c 	blt.w	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    2126:	3401      	adds	r4, #1
		char sign = 0;
    2128:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    212a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    212e:	f04f 0900 	mov.w	r9, #0
			break;
    2132:	e07f      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
		case 's': {
			bps = (const char *)value->ptr;
    2134:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    2138:	f1ba 0f00 	cmp.w	sl, #0
    213c:	db07      	blt.n	214e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14e>
				len = strnlen(bps, precision);
    213e:	4651      	mov	r1, sl
    2140:	4648      	mov	r0, r9
    2142:	f00f f8c3 	bl	112cc <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2146:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    214a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    214c:	e072      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
				len = strlen(bps);
    214e:	4648      	mov	r0, r9
    2150:	f00f f8b3 	bl	112ba <strlen>
    2154:	e7f7      	b.n	2146 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x146>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2156:	9b04      	ldr	r3, [sp, #16]
    2158:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    215c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    215e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    2162:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    2166:	e065      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2168:	f018 0f08 	tst.w	r8, #8
    216c:	d105      	bne.n	217a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17a>
				sign = '+';
			} else if (conv->flag_space) {
    216e:	f018 0810 	ands.w	r8, r8, #16
    2172:	d004      	beq.n	217e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17e>
				sign = ' ';
    2174:	f04f 0820 	mov.w	r8, #32
    2178:	e001      	b.n	217e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17e>
				sign = '+';
    217a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    217e:	9a04      	ldr	r2, [sp, #16]
    2180:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    2182:	2b00      	cmp	r3, #0
    2184:	db02      	blt.n	218c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2186:	9204      	str	r2, [sp, #16]
    2188:	9305      	str	r3, [sp, #20]
    218a:	e008      	b.n	219e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x19e>
				value->uint = (uint_value_type)-sint;
    218c:	4252      	negs	r2, r2
    218e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2192:	9204      	str	r2, [sp, #16]
    2194:	9305      	str	r3, [sp, #20]
				sign = '-';
    2196:	f04f 082d 	mov.w	r8, #45	; 0x2d
    219a:	e000      	b.n	219e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x19e>
		switch (conv->specifier) {
    219c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    219e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    21a2:	9300      	str	r3, [sp, #0]
    21a4:	ab0a      	add	r3, sp, #40	; 0x28
    21a6:	aa06      	add	r2, sp, #24
    21a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    21ac:	f00e fa34 	bl	10618 <encode_uint>
    21b0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    21b2:	f1ba 0f00 	cmp.w	sl, #0
    21b6:	db6c      	blt.n	2292 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x292>
				size_t len = bpe - bps;
    21b8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    21bc:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    21c0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    21c4:	f36f 1286 	bfc	r2, #6, #1
    21c8:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    21cc:	459a      	cmp	sl, r3
    21ce:	d963      	bls.n	2298 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x298>
					conv->pad0_value = precision - (int)len;
    21d0:	ebaa 0303 	sub.w	r3, sl, r3
    21d4:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    21d6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    21da:	e02b      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    21dc:	9804      	ldr	r0, [sp, #16]
    21de:	b928      	cbnz	r0, 21ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ec>
		char sign = 0;
    21e0:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    21e2:	f8df a180 	ldr.w	sl, [pc, #384]	; 2364 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x364>
			bps = "(nil)";
    21e6:	f1aa 0905 	sub.w	r9, sl, #5
    21ea:	e023      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    21ec:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    21f0:	9300      	str	r3, [sp, #0]
    21f2:	ab0a      	add	r3, sp, #40	; 0x28
    21f4:	aa06      	add	r2, sp, #24
    21f6:	2100      	movs	r1, #0
    21f8:	f00e fa0e 	bl	10618 <encode_uint>
    21fc:	4681      	mov	r9, r0
				conv->altform_0c = true;
    21fe:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2202:	f043 0310 	orr.w	r3, r3, #16
    2206:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    220a:	2378      	movs	r3, #120	; 0x78
    220c:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    2210:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    2212:	e7ce      	b.n	21b2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2214:	4622      	mov	r2, r4
    2216:	9904      	ldr	r1, [sp, #16]
    2218:	a806      	add	r0, sp, #24
    221a:	f00e fa4d 	bl	106b8 <store_count>
		char sign = 0;
    221e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2220:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2224:	f04f 0900 	mov.w	r9, #0
			}

			break;
    2228:	e004      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
		switch (conv->specifier) {
    222a:	46d8      	mov	r8, fp
    222c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2230:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2234:	f1b9 0f00 	cmp.w	r9, #0
    2238:	f000 808d 	beq.w	2356 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x356>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    223c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    2240:	f1b8 0f00 	cmp.w	r8, #0
    2244:	d000      	beq.n	2248 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x248>
			nj_len += 1U;
    2246:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    2248:	f89d 201a 	ldrb.w	r2, [sp, #26]
    224c:	f012 0f10 	tst.w	r2, #16
    2250:	d025      	beq.n	229e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x29e>
			nj_len += 2U;
    2252:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2254:	9907      	ldr	r1, [sp, #28]
    2256:	440b      	add	r3, r1
		if (conv->pad_fp) {
    2258:	f012 0f40 	tst.w	r2, #64	; 0x40
    225c:	d001      	beq.n	2262 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x262>
			nj_len += conv->pad0_pre_exp;
    225e:	9a08      	ldr	r2, [sp, #32]
    2260:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2262:	2f00      	cmp	r7, #0
    2264:	dd31      	ble.n	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
			width -= (int)nj_len;
    2266:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2268:	f89d 3018 	ldrb.w	r3, [sp, #24]
    226c:	f013 0f04 	tst.w	r3, #4
    2270:	d12b      	bne.n	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2272:	f013 0f40 	tst.w	r3, #64	; 0x40
    2276:	d017      	beq.n	22a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2a8>
					if (sign != 0) {
    2278:	f1b8 0f00 	cmp.w	r8, #0
    227c:	d017      	beq.n	22ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ae>
						OUTC(sign);
    227e:	4629      	mov	r1, r5
    2280:	4640      	mov	r0, r8
    2282:	47b0      	blx	r6
    2284:	2800      	cmp	r0, #0
    2286:	db6a      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    2288:	3401      	adds	r4, #1
						sign = 0;
    228a:	46d8      	mov	r8, fp
					}
					pad = '0';
    228c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2290:	e00f      	b.n	22b2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2b2>
		const char *bpe = buf + sizeof(buf);
    2292:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2296:	e7cd      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
    2298:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    229c:	e7ca      	b.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
		} else if (conv->altform_0) {
    229e:	f012 0f08 	tst.w	r2, #8
    22a2:	d0d7      	beq.n	2254 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x254>
			nj_len += 1U;
    22a4:	3301      	adds	r3, #1
    22a6:	e7d5      	b.n	2254 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x254>
				char pad = ' ';
    22a8:	f04f 0b20 	mov.w	fp, #32
    22ac:	e001      	b.n	22b2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2b2>
					pad = '0';
    22ae:	f04f 0b30 	mov.w	fp, #48	; 0x30
    22b2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    22b4:	1e5f      	subs	r7, r3, #1
    22b6:	2b00      	cmp	r3, #0
    22b8:	dd07      	ble.n	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
					OUTC(pad);
    22ba:	4629      	mov	r1, r5
    22bc:	4658      	mov	r0, fp
    22be:	47b0      	blx	r6
    22c0:	2800      	cmp	r0, #0
    22c2:	db4c      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    22c4:	3401      	adds	r4, #1
				while (width-- > 0) {
    22c6:	463b      	mov	r3, r7
    22c8:	e7f4      	b.n	22b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2b4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    22ca:	f1b8 0f00 	cmp.w	r8, #0
    22ce:	d005      	beq.n	22dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2dc>
			OUTC(sign);
    22d0:	4629      	mov	r1, r5
    22d2:	4640      	mov	r0, r8
    22d4:	47b0      	blx	r6
    22d6:	2800      	cmp	r0, #0
    22d8:	db41      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    22da:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    22dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    22e0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    22e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    22e8:	431a      	orrs	r2, r3
    22ea:	d005      	beq.n	22f8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2f8>
				OUTC('0');
    22ec:	4629      	mov	r1, r5
    22ee:	2030      	movs	r0, #48	; 0x30
    22f0:	47b0      	blx	r6
    22f2:	2800      	cmp	r0, #0
    22f4:	db33      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    22f6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    22f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    22fc:	f013 0f10 	tst.w	r3, #16
    2300:	d006      	beq.n	2310 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x310>
				OUTC(conv->specifier);
    2302:	4629      	mov	r1, r5
    2304:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2308:	47b0      	blx	r6
    230a:	2800      	cmp	r0, #0
    230c:	db27      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    230e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2310:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    2312:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2316:	2b00      	cmp	r3, #0
    2318:	dd07      	ble.n	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
				OUTC('0');
    231a:	4629      	mov	r1, r5
    231c:	2030      	movs	r0, #48	; 0x30
    231e:	47b0      	blx	r6
    2320:	2800      	cmp	r0, #0
    2322:	db1c      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    2324:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2326:	4643      	mov	r3, r8
    2328:	e7f3      	b.n	2312 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x312>
			}

			OUTS(bps, bpe);
    232a:	4653      	mov	r3, sl
    232c:	464a      	mov	r2, r9
    232e:	4629      	mov	r1, r5
    2330:	4630      	mov	r0, r6
    2332:	f00e f9e0 	bl	106f6 <outs>
    2336:	2800      	cmp	r0, #0
    2338:	db11      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    233a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    233c:	2f00      	cmp	r7, #0
    233e:	dd07      	ble.n	2350 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x350>
			OUTC(' ');
    2340:	4629      	mov	r1, r5
    2342:	2020      	movs	r0, #32
    2344:	47b0      	blx	r6
    2346:	2800      	cmp	r0, #0
    2348:	db09      	blt.n	235e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x35e>
    234a:	3401      	adds	r4, #1
			--width;
    234c:	3f01      	subs	r7, #1
    234e:	e7f5      	b.n	233c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x33c>
		fp = extract_conversion(conv, sp);
    2350:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2354:	e544      	b.n	1de0 <z_cbvprintf_impl+0x10>
    2356:	f8dd 9008 	ldr.w	r9, [sp, #8]
    235a:	e541      	b.n	1de0 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    235c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    235e:	b011      	add	sp, #68	; 0x44
    2360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2364:	00014189 	.word	0x00014189

00002368 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    2368:	b538      	push	{r3, r4, r5, lr}
    236a:	4604      	mov	r4, r0
    236c:	460d      	mov	r5, r1
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    236e:	2220      	movs	r2, #32
    2370:	2100      	movs	r1, #0
    2372:	f00f f802 	bl	1137a <memset>
	buffer->get_wlen = cfg->get_wlen;
    2376:	68eb      	ldr	r3, [r5, #12]
    2378:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    237a:	68ab      	ldr	r3, [r5, #8]
    237c:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    237e:	682b      	ldr	r3, [r5, #0]
    2380:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    2382:	686b      	ldr	r3, [r5, #4]
    2384:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
    2386:	2200      	movs	r2, #0
    2388:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
    238a:	692a      	ldr	r2, [r5, #16]
    238c:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    238e:	b12b      	cbz	r3, 239c <mpsc_pbuf_init+0x34>
    2390:	1e59      	subs	r1, r3, #1
    2392:	420b      	tst	r3, r1
    2394:	d102      	bne.n	239c <mpsc_pbuf_init+0x34>

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    2396:	f042 0201 	orr.w	r2, r2, #1
    239a:	6122      	str	r2, [r4, #16]
	}

	err = k_sem_init(&buffer->sem, 0, 1);
    239c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return z_impl_k_sem_init(sem, initial_count, limit);
    23a0:	2201      	movs	r2, #1
    23a2:	2100      	movs	r1, #0
    23a4:	f011 f82d 	bl	13402 <z_impl_k_sem_init>
	__ASSERT_NO_MSG(err == 0);
    23a8:	b900      	cbnz	r0, 23ac <mpsc_pbuf_init+0x44>
	ARG_UNUSED(err);
}
    23aa:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(err == 0);
    23ac:	4c05      	ldr	r4, [pc, #20]	; (23c4 <mpsc_pbuf_init+0x5c>)
    23ae:	232e      	movs	r3, #46	; 0x2e
    23b0:	4622      	mov	r2, r4
    23b2:	4905      	ldr	r1, [pc, #20]	; (23c8 <mpsc_pbuf_init+0x60>)
    23b4:	4805      	ldr	r0, [pc, #20]	; (23cc <mpsc_pbuf_init+0x64>)
    23b6:	f00e f9bf 	bl	10738 <assert_print>
    23ba:	212e      	movs	r1, #46	; 0x2e
    23bc:	4620      	mov	r0, r4
    23be:	f00e f9b4 	bl	1072a <assert_post_action>
}
    23c2:	e7f2      	b.n	23aa <mpsc_pbuf_init+0x42>
    23c4:	0001418c 	.word	0x0001418c
    23c8:	000141b4 	.word	0x000141b4
    23cc:	00013d44 	.word	0x00013d44

000023d0 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    23d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23d4:	b085      	sub	sp, #20
    23d6:	9200      	str	r2, [sp, #0]
    23d8:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    23da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    23dc:	3b01      	subs	r3, #1
    23de:	428b      	cmp	r3, r1
    23e0:	f0c0 80e4 	bcc.w	25ac <mpsc_pbuf_alloc+0x1dc>
    23e4:	4680      	mov	r8, r0
    23e6:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
    23e8:	2700      	movs	r7, #0
	union mpsc_pbuf_generic *item = NULL;
    23ea:	46ba      	mov	sl, r7
    23ec:	e032      	b.n	2454 <mpsc_pbuf_alloc+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    23ee:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 25b8 <mpsc_pbuf_alloc+0x1e8>
    23f2:	238e      	movs	r3, #142	; 0x8e
    23f4:	465a      	mov	r2, fp
    23f6:	4971      	ldr	r1, [pc, #452]	; (25bc <mpsc_pbuf_alloc+0x1ec>)
    23f8:	4871      	ldr	r0, [pc, #452]	; (25c0 <mpsc_pbuf_alloc+0x1f0>)
    23fa:	f00e f99d 	bl	10738 <assert_print>
    23fe:	4629      	mov	r1, r5
    2400:	4870      	ldr	r0, [pc, #448]	; (25c4 <mpsc_pbuf_alloc+0x1f4>)
    2402:	f00e f999 	bl	10738 <assert_print>
    2406:	218e      	movs	r1, #142	; 0x8e
    2408:	4658      	mov	r0, fp
    240a:	f00e f98e 	bl	1072a <assert_post_action>
    240e:	e031      	b.n	2474 <mpsc_pbuf_alloc+0xa4>
		return i & (buffer->size - 1);
    2410:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    2414:	3a01      	subs	r2, #1
    2416:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    2418:	f8c8 3000 	str.w	r3, [r8]
		cont = false;
    241c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    241e:	4628      	mov	r0, r5
    2420:	f00a f980 	bl	c724 <z_spin_unlock_valid>
    2424:	2800      	cmp	r0, #0
    2426:	f000 80af 	beq.w	2588 <mpsc_pbuf_alloc+0x1b8>
    242a:	f38b 8811 	msr	BASEPRI, fp
    242e:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    2432:	b164      	cbz	r4, 244e <mpsc_pbuf_alloc+0x7e>
    2434:	b15f      	cbz	r7, 244e <mpsc_pbuf_alloc+0x7e>
    2436:	f89d 300b 	ldrb.w	r3, [sp, #11]
    243a:	b143      	cbz	r3, 244e <mpsc_pbuf_alloc+0x7e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    243c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    2440:	2b00      	cmp	r3, #0
    2442:	f000 80b1 	beq.w	25a8 <mpsc_pbuf_alloc+0x1d8>
				buffer->notify_drop(buffer, dropped_item);
    2446:	4639      	mov	r1, r7
    2448:	4640      	mov	r0, r8
    244a:	4798      	blx	r3
			}
			dropped_item = NULL;
    244c:	2700      	movs	r7, #0
		}
	} while (cont);
    244e:	2c00      	cmp	r4, #0
    2450:	f000 80ae 	beq.w	25b0 <mpsc_pbuf_alloc+0x1e0>
		key = k_spin_lock(&buffer->lock);
    2454:	f108 0514 	add.w	r5, r8, #20
	__asm__ volatile(
    2458:	f04f 0320 	mov.w	r3, #32
    245c:	f3ef 8411 	mrs	r4, BASEPRI
    2460:	f383 8812 	msr	BASEPRI_MAX, r3
    2464:	f3bf 8f6f 	isb	sy
    2468:	4626      	mov	r6, r4
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    246a:	4628      	mov	r0, r5
    246c:	f00a f94a 	bl	c704 <z_spin_lock_valid>
    2470:	2800      	cmp	r0, #0
    2472:	d0bc      	beq.n	23ee <mpsc_pbuf_alloc+0x1e>
	z_spin_lock_set_owner(l);
    2474:	4628      	mov	r0, r5
    2476:	f00a f965 	bl	c744 <z_spin_lock_set_owner>
	return k;
    247a:	46a3      	mov	fp, r4
		wrap = free_space(buffer, &free_wlen);
    247c:	a903      	add	r1, sp, #12
    247e:	4640      	mov	r0, r8
    2480:	f00e f968 	bl	10754 <free_space>
    2484:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
    2486:	9903      	ldr	r1, [sp, #12]
    2488:	4549      	cmp	r1, r9
    248a:	d31e      	bcc.n	24ca <mpsc_pbuf_alloc+0xfa>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    248c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    2490:	f8d8 2000 	ldr.w	r2, [r8]
			item =
    2494:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    2498:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    249c:	f36f 0100 	bfc	r1, #0, #1
    24a0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    24a4:	b2c9      	uxtb	r1, r1
    24a6:	f36f 0141 	bfc	r1, #1, #1
    24aa:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    24ae:	f8d8 3000 	ldr.w	r3, [r8]
	uint32_t i = idx + val;
    24b2:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    24b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
    24b8:	f012 0f01 	tst.w	r2, #1
    24bc:	d1a8      	bne.n	2410 <mpsc_pbuf_alloc+0x40>
	return (i >= buffer->size) ? i - buffer->size : i;
    24be:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    24c2:	4293      	cmp	r3, r2
    24c4:	d3a8      	bcc.n	2418 <mpsc_pbuf_alloc+0x48>
    24c6:	1a9b      	subs	r3, r3, r2
    24c8:	e7a6      	b.n	2418 <mpsc_pbuf_alloc+0x48>
		} else if (wrap) {
    24ca:	b9b0      	cbnz	r0, 24fa <mpsc_pbuf_alloc+0x12a>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    24cc:	9b01      	ldr	r3, [sp, #4]
    24ce:	9a00      	ldr	r2, [sp, #0]
    24d0:	4313      	orrs	r3, r2
    24d2:	d003      	beq.n	24dc <mpsc_pbuf_alloc+0x10c>
			   !k_is_in_isr()) {
    24d4:	f010 ff5b 	bl	1338e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    24d8:	4604      	mov	r4, r0
    24da:	b190      	cbz	r0, 2502 <mpsc_pbuf_alloc+0x132>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    24dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    24e0:	f10d 030b 	add.w	r3, sp, #11
    24e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    24e8:	9903      	ldr	r1, [sp, #12]
    24ea:	4640      	mov	r0, r8
    24ec:	f00e f995 	bl	1081a <drop_item_locked>
			cont = dropped_item != NULL;
    24f0:	4607      	mov	r7, r0
    24f2:	1e04      	subs	r4, r0, #0
    24f4:	bf18      	it	ne
    24f6:	2401      	movne	r4, #1
    24f8:	e791      	b.n	241e <mpsc_pbuf_alloc+0x4e>
			add_skip_item(buffer, free_wlen);
    24fa:	4640      	mov	r0, r8
    24fc:	f00e f964 	bl	107c8 <add_skip_item>
			cont = true;
    2500:	e78d      	b.n	241e <mpsc_pbuf_alloc+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2502:	4628      	mov	r0, r5
    2504:	f00a f90e 	bl	c724 <z_spin_unlock_valid>
    2508:	b1f0      	cbz	r0, 2548 <mpsc_pbuf_alloc+0x178>
	__asm__ volatile(
    250a:	f386 8811 	msr	BASEPRI, r6
    250e:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    2512:	f108 002c 	add.w	r0, r8, #44	; 0x2c
	return z_impl_k_sem_take(sem, timeout);
    2516:	9a00      	ldr	r2, [sp, #0]
    2518:	9b01      	ldr	r3, [sp, #4]
    251a:	f00a fd2d 	bl	cf78 <z_impl_k_sem_take>
    251e:	4606      	mov	r6, r0
	__asm__ volatile(
    2520:	f04f 0320 	mov.w	r3, #32
    2524:	f3ef 8b11 	mrs	fp, BASEPRI
    2528:	f383 8812 	msr	BASEPRI_MAX, r3
    252c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2530:	4628      	mov	r0, r5
    2532:	f00a f8e7 	bl	c704 <z_spin_lock_valid>
    2536:	b1c0      	cbz	r0, 256a <mpsc_pbuf_alloc+0x19a>
	z_spin_lock_set_owner(l);
    2538:	4628      	mov	r0, r5
    253a:	f00a f903 	bl	c744 <z_spin_lock_set_owner>
			if (err == 0) {
    253e:	2e00      	cmp	r6, #0
    2540:	f47f af6d 	bne.w	241e <mpsc_pbuf_alloc+0x4e>
				cont = true;
    2544:	2401      	movs	r4, #1
    2546:	e76a      	b.n	241e <mpsc_pbuf_alloc+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2548:	f8df b06c 	ldr.w	fp, [pc, #108]	; 25b8 <mpsc_pbuf_alloc+0x1e8>
    254c:	23b9      	movs	r3, #185	; 0xb9
    254e:	465a      	mov	r2, fp
    2550:	491d      	ldr	r1, [pc, #116]	; (25c8 <mpsc_pbuf_alloc+0x1f8>)
    2552:	481b      	ldr	r0, [pc, #108]	; (25c0 <mpsc_pbuf_alloc+0x1f0>)
    2554:	f00e f8f0 	bl	10738 <assert_print>
    2558:	4629      	mov	r1, r5
    255a:	481c      	ldr	r0, [pc, #112]	; (25cc <mpsc_pbuf_alloc+0x1fc>)
    255c:	f00e f8ec 	bl	10738 <assert_print>
    2560:	21b9      	movs	r1, #185	; 0xb9
    2562:	4658      	mov	r0, fp
    2564:	f00e f8e1 	bl	1072a <assert_post_action>
    2568:	e7cf      	b.n	250a <mpsc_pbuf_alloc+0x13a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    256a:	238e      	movs	r3, #142	; 0x8e
    256c:	4a12      	ldr	r2, [pc, #72]	; (25b8 <mpsc_pbuf_alloc+0x1e8>)
    256e:	4913      	ldr	r1, [pc, #76]	; (25bc <mpsc_pbuf_alloc+0x1ec>)
    2570:	4813      	ldr	r0, [pc, #76]	; (25c0 <mpsc_pbuf_alloc+0x1f0>)
    2572:	f00e f8e1 	bl	10738 <assert_print>
    2576:	4629      	mov	r1, r5
    2578:	4812      	ldr	r0, [pc, #72]	; (25c4 <mpsc_pbuf_alloc+0x1f4>)
    257a:	f00e f8dd 	bl	10738 <assert_print>
    257e:	218e      	movs	r1, #142	; 0x8e
    2580:	480d      	ldr	r0, [pc, #52]	; (25b8 <mpsc_pbuf_alloc+0x1e8>)
    2582:	f00e f8d2 	bl	1072a <assert_post_action>
    2586:	e7d7      	b.n	2538 <mpsc_pbuf_alloc+0x168>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2588:	4e0b      	ldr	r6, [pc, #44]	; (25b8 <mpsc_pbuf_alloc+0x1e8>)
    258a:	23b9      	movs	r3, #185	; 0xb9
    258c:	4632      	mov	r2, r6
    258e:	490e      	ldr	r1, [pc, #56]	; (25c8 <mpsc_pbuf_alloc+0x1f8>)
    2590:	480b      	ldr	r0, [pc, #44]	; (25c0 <mpsc_pbuf_alloc+0x1f0>)
    2592:	f00e f8d1 	bl	10738 <assert_print>
    2596:	4629      	mov	r1, r5
    2598:	480c      	ldr	r0, [pc, #48]	; (25cc <mpsc_pbuf_alloc+0x1fc>)
    259a:	f00e f8cd 	bl	10738 <assert_print>
    259e:	21b9      	movs	r1, #185	; 0xb9
    25a0:	4630      	mov	r0, r6
    25a2:	f00e f8c2 	bl	1072a <assert_post_action>
    25a6:	e740      	b.n	242a <mpsc_pbuf_alloc+0x5a>
			dropped_item = NULL;
    25a8:	2700      	movs	r7, #0
    25aa:	e750      	b.n	244e <mpsc_pbuf_alloc+0x7e>
		return NULL;
    25ac:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    25b0:	4650      	mov	r0, sl
    25b2:	b005      	add	sp, #20
    25b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25b8:	00013f4c 	.word	0x00013f4c
    25bc:	00013fac 	.word	0x00013fac
    25c0:	00013d44 	.word	0x00013d44
    25c4:	00013fc4 	.word	0x00013fc4
    25c8:	00013f7c 	.word	0x00013f7c
    25cc:	00013f94 	.word	0x00013f94

000025d0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    25d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25d4:	4604      	mov	r4, r0
    25d6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    25d8:	69c3      	ldr	r3, [r0, #28]
    25da:	4608      	mov	r0, r1
    25dc:	4798      	blx	r3
    25de:	4680      	mov	r8, r0

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    25e0:	f104 0614 	add.w	r6, r4, #20
    25e4:	f04f 0320 	mov.w	r3, #32
    25e8:	f3ef 8711 	mrs	r7, BASEPRI
    25ec:	f383 8812 	msr	BASEPRI_MAX, r3
    25f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    25f4:	4630      	mov	r0, r6
    25f6:	f00a f885 	bl	c704 <z_spin_lock_valid>
    25fa:	b190      	cbz	r0, 2622 <mpsc_pbuf_commit+0x52>
	z_spin_lock_set_owner(l);
    25fc:	4630      	mov	r0, r6
    25fe:	f00a f8a1 	bl	c744 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    2602:	782b      	ldrb	r3, [r5, #0]
    2604:	f043 0301 	orr.w	r3, r3, #1
    2608:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    260a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    260c:	eb03 0008 	add.w	r0, r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2610:	6923      	ldr	r3, [r4, #16]
    2612:	f013 0f01 	tst.w	r3, #1
    2616:	d115      	bne.n	2644 <mpsc_pbuf_commit+0x74>
	return (i >= buffer->size) ? i - buffer->size : i;
    2618:	6a63      	ldr	r3, [r4, #36]	; 0x24
    261a:	4298      	cmp	r0, r3
    261c:	d315      	bcc.n	264a <mpsc_pbuf_commit+0x7a>
    261e:	1ac0      	subs	r0, r0, r3
    2620:	e013      	b.n	264a <mpsc_pbuf_commit+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2622:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2688 <mpsc_pbuf_commit+0xb8>
    2626:	238e      	movs	r3, #142	; 0x8e
    2628:	464a      	mov	r2, r9
    262a:	4918      	ldr	r1, [pc, #96]	; (268c <mpsc_pbuf_commit+0xbc>)
    262c:	4818      	ldr	r0, [pc, #96]	; (2690 <mpsc_pbuf_commit+0xc0>)
    262e:	f00e f883 	bl	10738 <assert_print>
    2632:	4631      	mov	r1, r6
    2634:	4817      	ldr	r0, [pc, #92]	; (2694 <mpsc_pbuf_commit+0xc4>)
    2636:	f00e f87f 	bl	10738 <assert_print>
    263a:	218e      	movs	r1, #142	; 0x8e
    263c:	4648      	mov	r0, r9
    263e:	f00e f874 	bl	1072a <assert_post_action>
    2642:	e7db      	b.n	25fc <mpsc_pbuf_commit+0x2c>
		return i & (buffer->size - 1);
    2644:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2646:	3b01      	subs	r3, #1
    2648:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    264a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    264c:	4620      	mov	r0, r4
    264e:	f00e f8a8 	bl	107a2 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2652:	4630      	mov	r0, r6
    2654:	f00a f866 	bl	c724 <z_spin_unlock_valid>
    2658:	b128      	cbz	r0, 2666 <mpsc_pbuf_commit+0x96>
	__asm__ volatile(
    265a:	f387 8811 	msr	BASEPRI, r7
    265e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    2662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2666:	4c08      	ldr	r4, [pc, #32]	; (2688 <mpsc_pbuf_commit+0xb8>)
    2668:	23b9      	movs	r3, #185	; 0xb9
    266a:	4622      	mov	r2, r4
    266c:	490a      	ldr	r1, [pc, #40]	; (2698 <mpsc_pbuf_commit+0xc8>)
    266e:	4808      	ldr	r0, [pc, #32]	; (2690 <mpsc_pbuf_commit+0xc0>)
    2670:	f00e f862 	bl	10738 <assert_print>
    2674:	4631      	mov	r1, r6
    2676:	4809      	ldr	r0, [pc, #36]	; (269c <mpsc_pbuf_commit+0xcc>)
    2678:	f00e f85e 	bl	10738 <assert_print>
    267c:	21b9      	movs	r1, #185	; 0xb9
    267e:	4620      	mov	r0, r4
    2680:	f00e f853 	bl	1072a <assert_post_action>
    2684:	e7e9      	b.n	265a <mpsc_pbuf_commit+0x8a>
    2686:	bf00      	nop
    2688:	00013f4c 	.word	0x00013f4c
    268c:	00013fac 	.word	0x00013fac
    2690:	00013d44 	.word	0x00013d44
    2694:	00013fc4 	.word	0x00013fc4
    2698:	00013f7c 	.word	0x00013f7c
    269c:	00013f94 	.word	0x00013f94

000026a0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    26a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26a4:	4604      	mov	r4, r0
    26a6:	e054      	b.n	2752 <mpsc_pbuf_claim+0xb2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    26a8:	4f52      	ldr	r7, [pc, #328]	; (27f4 <mpsc_pbuf_claim+0x154>)
    26aa:	238e      	movs	r3, #142	; 0x8e
    26ac:	463a      	mov	r2, r7
    26ae:	4952      	ldr	r1, [pc, #328]	; (27f8 <mpsc_pbuf_claim+0x158>)
    26b0:	4852      	ldr	r0, [pc, #328]	; (27fc <mpsc_pbuf_claim+0x15c>)
    26b2:	f00e f841 	bl	10738 <assert_print>
    26b6:	4629      	mov	r1, r5
    26b8:	4851      	ldr	r0, [pc, #324]	; (2800 <mpsc_pbuf_claim+0x160>)
    26ba:	f00e f83d 	bl	10738 <assert_print>
    26be:	218e      	movs	r1, #142	; 0x8e
    26c0:	4638      	mov	r0, r7
    26c2:	f00e f832 	bl	1072a <assert_post_action>
    26c6:	e053      	b.n	2770 <mpsc_pbuf_claim+0xd0>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    26c8:	1a9b      	subs	r3, r3, r2
		return false;
    26ca:	e05a      	b.n	2782 <mpsc_pbuf_claim+0xe2>
		return item->skip.len;
    26cc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    26d0:	0880      	lsrs	r0, r0, #2
    26d2:	d16c      	bne.n	27ae <mpsc_pbuf_claim+0x10e>
    26d4:	e062      	b.n	279c <mpsc_pbuf_claim+0xfc>
		return i & (buffer->size - 1);
    26d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    26d8:	3901      	subs	r1, #1
    26da:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    26dc:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    26de:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    26e0:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    26e2:	b922      	cbnz	r2, 26ee <mpsc_pbuf_claim+0x4e>
	return (i >= buffer->size) ? i - buffer->size : i;
    26e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    26e6:	4293      	cmp	r3, r2
    26e8:	d304      	bcc.n	26f4 <mpsc_pbuf_claim+0x54>
    26ea:	1a9b      	subs	r3, r3, r2
    26ec:	e002      	b.n	26f4 <mpsc_pbuf_claim+0x54>
		return i & (buffer->size - 1);
    26ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    26f0:	3a01      	subs	r2, #1
    26f2:	4013      	ands	r3, r2
				buffer->rd_idx =
    26f4:	60e3      	str	r3, [r4, #12]
				cont = true;
    26f6:	f04f 0801 	mov.w	r8, #1
			if (skip || !is_valid(item)) {
    26fa:	e01e      	b.n	273a <mpsc_pbuf_claim+0x9a>
			} else {
				item->hdr.busy = 1;
    26fc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
    2700:	f043 0302 	orr.w	r3, r3, #2
    2704:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    2708:	f8d4 8008 	ldr.w	r8, [r4, #8]
						buffer->get_wlen(item));
    270c:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
    270e:	4638      	mov	r0, r7
    2710:	4798      	blx	r3
	uint32_t i = idx + val;
    2712:	4440      	add	r0, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2714:	6923      	ldr	r3, [r4, #16]
    2716:	f013 0f01 	tst.w	r3, #1
    271a:	d104      	bne.n	2726 <mpsc_pbuf_claim+0x86>
	return (i >= buffer->size) ? i - buffer->size : i;
    271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    271e:	4298      	cmp	r0, r3
    2720:	d304      	bcc.n	272c <mpsc_pbuf_claim+0x8c>
    2722:	1ac0      	subs	r0, r0, r3
    2724:	e002      	b.n	272c <mpsc_pbuf_claim+0x8c>
		return i & (buffer->size - 1);
    2726:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2728:	3b01      	subs	r3, #1
    272a:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    272c:	60a0      	str	r0, [r4, #8]
		cont = false;
    272e:	f04f 0800 	mov.w	r8, #0
    2732:	e002      	b.n	273a <mpsc_pbuf_claim+0x9a>
    2734:	f04f 0800 	mov.w	r8, #0
			item = NULL;
    2738:	4647      	mov	r7, r8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    273a:	4628      	mov	r0, r5
    273c:	f009 fff2 	bl	c724 <z_spin_unlock_valid>
    2740:	2800      	cmp	r0, #0
    2742:	d043      	beq.n	27cc <mpsc_pbuf_claim+0x12c>
    2744:	f386 8811 	msr	BASEPRI, r6
    2748:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    274c:	f1b8 0f00 	cmp.w	r8, #0
    2750:	d04d      	beq.n	27ee <mpsc_pbuf_claim+0x14e>
		key = k_spin_lock(&buffer->lock);
    2752:	f104 0514 	add.w	r5, r4, #20
	__asm__ volatile(
    2756:	f04f 0320 	mov.w	r3, #32
    275a:	f3ef 8611 	mrs	r6, BASEPRI
    275e:	f383 8812 	msr	BASEPRI_MAX, r3
    2762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2766:	4628      	mov	r0, r5
    2768:	f009 ffcc 	bl	c704 <z_spin_lock_valid>
    276c:	2800      	cmp	r0, #0
    276e:	d09b      	beq.n	26a8 <mpsc_pbuf_claim+0x8>
	z_spin_lock_set_owner(l);
    2770:	4628      	mov	r0, r5
    2772:	f009 ffe7 	bl	c744 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    2776:	68a2      	ldr	r2, [r4, #8]
    2778:	6863      	ldr	r3, [r4, #4]
    277a:	429a      	cmp	r2, r3
    277c:	d9a4      	bls.n	26c8 <mpsc_pbuf_claim+0x28>
	*res = buffer->size - buffer->tmp_rd_idx;
    277e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2780:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
    2782:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
    2784:	eb01 0782 	add.w	r7, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    2788:	2b00      	cmp	r3, #0
    278a:	d0d3      	beq.n	2734 <mpsc_pbuf_claim+0x94>
	return !item->hdr.valid && !item->hdr.busy;
    278c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
    2790:	f013 0303 	ands.w	r3, r3, #3
    2794:	d016      	beq.n	27c4 <mpsc_pbuf_claim+0x124>
	if (item->hdr.busy && !item->hdr.valid) {
    2796:	2b02      	cmp	r3, #2
    2798:	d098      	beq.n	26cc <mpsc_pbuf_claim+0x2c>
	return 0;
    279a:	2000      	movs	r0, #0
	return item->hdr.valid;
    279c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
    27a0:	f013 0f01 	tst.w	r3, #1
    27a4:	d1aa      	bne.n	26fc <mpsc_pbuf_claim+0x5c>
					skip ? skip : buffer->get_wlen(item);
    27a6:	b910      	cbnz	r0, 27ae <mpsc_pbuf_claim+0x10e>
    27a8:	69e3      	ldr	r3, [r4, #28]
    27aa:	4638      	mov	r0, r7
    27ac:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    27ae:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
    27b0:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    27b2:	6922      	ldr	r2, [r4, #16]
    27b4:	f012 0201 	ands.w	r2, r2, #1
    27b8:	d18d      	bne.n	26d6 <mpsc_pbuf_claim+0x36>
	return (i >= buffer->size) ? i - buffer->size : i;
    27ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    27bc:	428b      	cmp	r3, r1
    27be:	d38d      	bcc.n	26dc <mpsc_pbuf_claim+0x3c>
    27c0:	1a5b      	subs	r3, r3, r1
    27c2:	e78b      	b.n	26dc <mpsc_pbuf_claim+0x3c>
		cont = false;
    27c4:	f04f 0800 	mov.w	r8, #0
			item = NULL;
    27c8:	4647      	mov	r7, r8
    27ca:	e7b6      	b.n	273a <mpsc_pbuf_claim+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27cc:	f8df 9024 	ldr.w	r9, [pc, #36]	; 27f4 <mpsc_pbuf_claim+0x154>
    27d0:	23b9      	movs	r3, #185	; 0xb9
    27d2:	464a      	mov	r2, r9
    27d4:	490b      	ldr	r1, [pc, #44]	; (2804 <mpsc_pbuf_claim+0x164>)
    27d6:	4809      	ldr	r0, [pc, #36]	; (27fc <mpsc_pbuf_claim+0x15c>)
    27d8:	f00d ffae 	bl	10738 <assert_print>
    27dc:	4629      	mov	r1, r5
    27de:	480a      	ldr	r0, [pc, #40]	; (2808 <mpsc_pbuf_claim+0x168>)
    27e0:	f00d ffaa 	bl	10738 <assert_print>
    27e4:	21b9      	movs	r1, #185	; 0xb9
    27e6:	4648      	mov	r0, r9
    27e8:	f00d ff9f 	bl	1072a <assert_post_action>
    27ec:	e7aa      	b.n	2744 <mpsc_pbuf_claim+0xa4>

	return item;
}
    27ee:	4638      	mov	r0, r7
    27f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27f4:	00013f4c 	.word	0x00013f4c
    27f8:	00013fac 	.word	0x00013fac
    27fc:	00013d44 	.word	0x00013d44
    2800:	00013fc4 	.word	0x00013fc4
    2804:	00013f7c 	.word	0x00013f7c
    2808:	00013f94 	.word	0x00013f94

0000280c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2810:	4604      	mov	r4, r0
    2812:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    2814:	69c3      	ldr	r3, [r0, #28]
    2816:	4608      	mov	r0, r1
    2818:	4798      	blx	r3
    281a:	4680      	mov	r8, r0
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    281c:	f104 0614 	add.w	r6, r4, #20
    2820:	f04f 0320 	mov.w	r3, #32
    2824:	f3ef 8711 	mrs	r7, BASEPRI
    2828:	f383 8812 	msr	BASEPRI_MAX, r3
    282c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2830:	4630      	mov	r0, r6
    2832:	f009 ff67 	bl	c704 <z_spin_lock_valid>
    2836:	b1a8      	cbz	r0, 2864 <mpsc_pbuf_free+0x58>
	z_spin_lock_set_owner(l);
    2838:	4630      	mov	r0, r6
    283a:	f009 ff83 	bl	c744 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    283e:	782b      	ldrb	r3, [r5, #0]
    2840:	f36f 0300 	bfc	r3, #0, #1
    2844:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    2846:	6923      	ldr	r3, [r4, #16]
    2848:	f013 0f02 	tst.w	r3, #2
    284c:	d01b      	beq.n	2886 <mpsc_pbuf_free+0x7a>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    284e:	6a23      	ldr	r3, [r4, #32]
    2850:	68e2      	ldr	r2, [r4, #12]
    2852:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    2856:	42ab      	cmp	r3, r5
    2858:	d015      	beq.n	2886 <mpsc_pbuf_free+0x7a>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
    285a:	682b      	ldr	r3, [r5, #0]
    285c:	f368 039f 	bfi	r3, r8, #2, #30
    2860:	602b      	str	r3, [r5, #0]
    2862:	e023      	b.n	28ac <mpsc_pbuf_free+0xa0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2864:	f8df 9080 	ldr.w	r9, [pc, #128]	; 28e8 <mpsc_pbuf_free+0xdc>
    2868:	238e      	movs	r3, #142	; 0x8e
    286a:	464a      	mov	r2, r9
    286c:	491f      	ldr	r1, [pc, #124]	; (28ec <mpsc_pbuf_free+0xe0>)
    286e:	4820      	ldr	r0, [pc, #128]	; (28f0 <mpsc_pbuf_free+0xe4>)
    2870:	f00d ff62 	bl	10738 <assert_print>
    2874:	4631      	mov	r1, r6
    2876:	481f      	ldr	r0, [pc, #124]	; (28f4 <mpsc_pbuf_free+0xe8>)
    2878:	f00d ff5e 	bl	10738 <assert_print>
    287c:	218e      	movs	r1, #142	; 0x8e
    287e:	4648      	mov	r0, r9
    2880:	f00d ff53 	bl	1072a <assert_post_action>
    2884:	e7d8      	b.n	2838 <mpsc_pbuf_free+0x2c>
		witem->hdr.busy = 0;
    2886:	782b      	ldrb	r3, [r5, #0]
    2888:	f36f 0341 	bfc	r3, #1, #1
    288c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    288e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    2890:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    2892:	6922      	ldr	r2, [r4, #16]
    2894:	f012 0f01 	tst.w	r2, #1
    2898:	d104      	bne.n	28a4 <mpsc_pbuf_free+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
    289a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    289c:	4293      	cmp	r3, r2
    289e:	d304      	bcc.n	28aa <mpsc_pbuf_free+0x9e>
    28a0:	1a9b      	subs	r3, r3, r2
    28a2:	e002      	b.n	28aa <mpsc_pbuf_free+0x9e>
		return i & (buffer->size - 1);
    28a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    28a6:	3a01      	subs	r2, #1
    28a8:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    28aa:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    28ac:	4630      	mov	r0, r6
    28ae:	f009 ff39 	bl	c724 <z_spin_unlock_valid>
    28b2:	b148      	cbz	r0, 28c8 <mpsc_pbuf_free+0xbc>
	__asm__ volatile(
    28b4:	f387 8811 	msr	BASEPRI, r7
    28b8:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    28bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	z_impl_k_sem_give(sem);
    28c0:	f00a fb16 	bl	cef0 <z_impl_k_sem_give>
}
    28c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    28c8:	4d07      	ldr	r5, [pc, #28]	; (28e8 <mpsc_pbuf_free+0xdc>)
    28ca:	23b9      	movs	r3, #185	; 0xb9
    28cc:	462a      	mov	r2, r5
    28ce:	490a      	ldr	r1, [pc, #40]	; (28f8 <mpsc_pbuf_free+0xec>)
    28d0:	4807      	ldr	r0, [pc, #28]	; (28f0 <mpsc_pbuf_free+0xe4>)
    28d2:	f00d ff31 	bl	10738 <assert_print>
    28d6:	4631      	mov	r1, r6
    28d8:	4808      	ldr	r0, [pc, #32]	; (28fc <mpsc_pbuf_free+0xf0>)
    28da:	f00d ff2d 	bl	10738 <assert_print>
    28de:	21b9      	movs	r1, #185	; 0xb9
    28e0:	4628      	mov	r0, r5
    28e2:	f00d ff22 	bl	1072a <assert_post_action>
    28e6:	e7e5      	b.n	28b4 <mpsc_pbuf_free+0xa8>
    28e8:	00013f4c 	.word	0x00013f4c
    28ec:	00013fac 	.word	0x00013fac
    28f0:	00013d44 	.word	0x00013d44
    28f4:	00013fc4 	.word	0x00013fc4
    28f8:	00013f7c 	.word	0x00013f7c
    28fc:	00013f94 	.word	0x00013f94

00002900 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2900:	b168      	cbz	r0, 291e <nrfx_coredep_delay_us+0x1e>
{
    2902:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2904:	4a06      	ldr	r2, [pc, #24]	; (2920 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    2906:	4b07      	ldr	r3, [pc, #28]	; (2924 <nrfx_coredep_delay_us+0x24>)
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	4907      	ldr	r1, [pc, #28]	; (2928 <nrfx_coredep_delay_us+0x28>)
    290c:	fba1 1303 	umull	r1, r3, r1, r3
    2910:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    2912:	fb00 f003 	mul.w	r0, r0, r3
    2916:	f042 0301 	orr.w	r3, r2, #1
    291a:	4798      	blx	r3
}
    291c:	bd08      	pop	{r3, pc}
    291e:	4770      	bx	lr
    2920:	00013b90 	.word	0x00013b90
    2924:	20000124 	.word	0x20000124
    2928:	431bde83 	.word	0x431bde83

0000292c <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    292c:	b538      	push	{r3, r4, r5, lr}
    292e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2930:	6800      	ldr	r0, [r0, #0]
    2932:	f00e f809 	bl	10948 <nrf_gpio_pin_present_check>
    2936:	b1b0      	cbz	r0, 2966 <nrf_gpio_pin_port_decode+0x3a>
    return (mask & (1UL << pin_number)) ? true : false;
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    2938:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    293a:	f003 021f 	and.w	r2, r3, #31
    293e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2940:	095b      	lsrs	r3, r3, #5
    2942:	d01e      	beq.n	2982 <nrf_gpio_pin_port_decode+0x56>
    2944:	2b01      	cmp	r3, #1
    2946:	d01e      	beq.n	2986 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    2948:	4c10      	ldr	r4, [pc, #64]	; (298c <nrf_gpio_pin_port_decode+0x60>)
    294a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    294e:	4622      	mov	r2, r4
    2950:	490f      	ldr	r1, [pc, #60]	; (2990 <nrf_gpio_pin_port_decode+0x64>)
    2952:	4810      	ldr	r0, [pc, #64]	; (2994 <nrf_gpio_pin_port_decode+0x68>)
    2954:	f00d fef0 	bl	10738 <assert_print>
    2958:	f44f 7113 	mov.w	r1, #588	; 0x24c
    295c:	4620      	mov	r0, r4
    295e:	f00d fee4 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    2962:	480d      	ldr	r0, [pc, #52]	; (2998 <nrf_gpio_pin_port_decode+0x6c>)
    2964:	e010      	b.n	2988 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2966:	4d09      	ldr	r5, [pc, #36]	; (298c <nrf_gpio_pin_port_decode+0x60>)
    2968:	f240 2347 	movw	r3, #583	; 0x247
    296c:	462a      	mov	r2, r5
    296e:	490b      	ldr	r1, [pc, #44]	; (299c <nrf_gpio_pin_port_decode+0x70>)
    2970:	4808      	ldr	r0, [pc, #32]	; (2994 <nrf_gpio_pin_port_decode+0x68>)
    2972:	f00d fee1 	bl	10738 <assert_print>
    2976:	f240 2147 	movw	r1, #583	; 0x247
    297a:	4628      	mov	r0, r5
    297c:	f00d fed5 	bl	1072a <assert_post_action>
    2980:	e7da      	b.n	2938 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    2982:	4805      	ldr	r0, [pc, #20]	; (2998 <nrf_gpio_pin_port_decode+0x6c>)
    2984:	e000      	b.n	2988 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2986:	4806      	ldr	r0, [pc, #24]	; (29a0 <nrf_gpio_pin_port_decode+0x74>)
}
    2988:	bd38      	pop	{r3, r4, r5, pc}
    298a:	bf00      	nop
    298c:	000141c0 	.word	0x000141c0
    2990:	000156e0 	.word	0x000156e0
    2994:	00013d44 	.word	0x00013d44
    2998:	50842500 	.word	0x50842500
    299c:	000141f4 	.word	0x000141f4
    29a0:	50842800 	.word	0x50842800

000029a4 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    29a4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    29a6:	f04f 0320 	mov.w	r3, #32
    29aa:	f3ef 8611 	mrs	r6, BASEPRI
    29ae:	f383 8812 	msr	BASEPRI_MAX, r3
    29b2:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    29b6:	2401      	movs	r4, #1
    29b8:	4b12      	ldr	r3, [pc, #72]	; (2a04 <nordicsemi_nrf53_init+0x60>)
    29ba:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    29be:	4d12      	ldr	r5, [pc, #72]	; (2a08 <nordicsemi_nrf53_init+0x64>)
    29c0:	2302      	movs	r3, #2
    29c2:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    29c6:	2103      	movs	r1, #3
    29c8:	2000      	movs	r0, #0
    29ca:	f00d ffcf 	bl	1096c <nrf_gpio_pin_control_select>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    29ce:	2103      	movs	r1, #3
    29d0:	4620      	mov	r0, r4
    29d2:	f00d ffcb 	bl	1096c <nrf_gpio_pin_control_select>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    29d6:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    29da:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    29de:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
#if defined(NRF_GPIO_FORWARDER_FOR_NRF5340_CPUAPP_ENABLED)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
    29e2:	2400      	movs	r4, #0
    29e4:	e005      	b.n	29f2 <nordicsemi_nrf53_init+0x4e>

#if NRF_GPIO_HAS_SEL
static inline void soc_secure_gpio_pin_mcu_select(uint32_t pin_number,
						  nrf_gpio_pin_sel_t mcu)
{
	nrf_gpio_pin_control_select(pin_number, mcu);
    29e6:	2101      	movs	r1, #1
    29e8:	4b08      	ldr	r3, [pc, #32]	; (2a0c <nordicsemi_nrf53_init+0x68>)
    29ea:	5d18      	ldrb	r0, [r3, r4]
    29ec:	f00d ffbe 	bl	1096c <nrf_gpio_pin_control_select>
    29f0:	3401      	adds	r4, #1
    29f2:	2c03      	cmp	r4, #3
    29f4:	d9f7      	bls.n	29e6 <nordicsemi_nrf53_init+0x42>
	__asm__ volatile(
    29f6:	f386 8811 	msr	BASEPRI, r6
    29fa:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    29fe:	2000      	movs	r0, #0
    2a00:	bd70      	pop	{r4, r5, r6, pc}
    2a02:	bf00      	nop
    2a04:	50001000 	.word	0x50001000
    2a08:	50004000 	.word	0x50004000
    2a0c:	00014218 	.word	0x00014218

00002a10 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    2a10:	2806      	cmp	r0, #6
    2a12:	d000      	beq.n	2a16 <pm_state_set+0x6>
    2a14:	4770      	bx	lr
{
    2a16:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
    2a18:	4801      	ldr	r0, [pc, #4]	; (2a20 <pm_state_set+0x10>)
    2a1a:	f00d ffbe 	bl	1099a <nrf_regulators_system_off>
    2a1e:	bf00      	nop
    2a20:	50004000 	.word	0x50004000

00002a24 <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
    2a24:	b500      	push	{lr}
    2a26:	b083      	sub	sp, #12
    2a28:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
    2a2a:	4b08      	ldr	r3, [pc, #32]	; (2a4c <mbox_rx_init+0x28>)
    2a2c:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
    2a2e:	2308      	movs	r3, #8
    2a30:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
    2a32:	4907      	ldr	r1, [pc, #28]	; (2a50 <mbox_rx_init+0x2c>)
    2a34:	4668      	mov	r0, sp
    2a36:	f00d ffbd 	bl	109b4 <mbox_register_callback>
	if (err < 0) {
    2a3a:	2800      	cmp	r0, #0
    2a3c:	db03      	blt.n	2a46 <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
    2a3e:	2101      	movs	r1, #1
    2a40:	4668      	mov	r0, sp
    2a42:	f00d ffc6 	bl	109d2 <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
    2a46:	b003      	add	sp, #12
    2a48:	f85d fb04 	ldr.w	pc, [sp], #4
    2a4c:	00013794 	.word	0x00013794
    2a50:	00002cc1 	.word	0x00002cc1

00002a54 <nrf_ipc_send_task_get>:
    NRFX_ASSERT(index < IPC_GPMEM_NUM);
    return p_reg->GPMEM[index];
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    2a54:	b538      	push	{r3, r4, r5, lr}
    2a56:	4604      	mov	r4, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
    2a58:	280f      	cmp	r0, #15
    2a5a:	d803      	bhi.n	2a64 <nrf_ipc_send_task_get+0x10>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    2a5c:	00a0      	lsls	r0, r4, #2
}
    2a5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    2a62:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(index < IPC_CH_NUM);
    2a64:	4d06      	ldr	r5, [pc, #24]	; (2a80 <nrf_ipc_send_task_get+0x2c>)
    2a66:	f240 13e1 	movw	r3, #481	; 0x1e1
    2a6a:	462a      	mov	r2, r5
    2a6c:	4905      	ldr	r1, [pc, #20]	; (2a84 <nrf_ipc_send_task_get+0x30>)
    2a6e:	4806      	ldr	r0, [pc, #24]	; (2a88 <nrf_ipc_send_task_get+0x34>)
    2a70:	f00d fe62 	bl	10738 <assert_print>
    2a74:	f240 11e1 	movw	r1, #481	; 0x1e1
    2a78:	4628      	mov	r0, r5
    2a7a:	f00d fe56 	bl	1072a <assert_post_action>
    2a7e:	e7ed      	b.n	2a5c <nrf_ipc_send_task_get+0x8>
    2a80:	00014220 	.word	0x00014220
    2a84:	00014254 	.word	0x00014254
    2a88:	00013d44 	.word	0x00013d44

00002a8c <nrfx_gppi_event_endpoint_setup>:
{
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	4604      	mov	r4, r0
    NRFX_ASSERT(eep);
    2a90:	460d      	mov	r5, r1
    2a92:	b121      	cbz	r1, 2a9e <nrfx_gppi_event_endpoint_setup+0x12>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2a94:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    2a98:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
    2a9c:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(eep);
    2a9e:	4e07      	ldr	r6, [pc, #28]	; (2abc <nrfx_gppi_event_endpoint_setup+0x30>)
    2aa0:	f44f 7312 	mov.w	r3, #584	; 0x248
    2aa4:	4632      	mov	r2, r6
    2aa6:	4906      	ldr	r1, [pc, #24]	; (2ac0 <nrfx_gppi_event_endpoint_setup+0x34>)
    2aa8:	4806      	ldr	r0, [pc, #24]	; (2ac4 <nrfx_gppi_event_endpoint_setup+0x38>)
    2aaa:	f00d fe45 	bl	10738 <assert_print>
    2aae:	f44f 7112 	mov.w	r1, #584	; 0x248
    2ab2:	4630      	mov	r0, r6
    2ab4:	f00d fe39 	bl	1072a <assert_post_action>
    2ab8:	e7ec      	b.n	2a94 <nrfx_gppi_event_endpoint_setup+0x8>
    2aba:	bf00      	nop
    2abc:	00014260 	.word	0x00014260
    2ac0:	00014298 	.word	0x00014298
    2ac4:	00013d44 	.word	0x00013d44

00002ac8 <nrfx_gppi_event_endpoint_clear>:
    nrfx_gppi_event_endpoint_setup(channel, eep);
    nrfx_gppi_task_endpoint_setup(channel, tep);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    2ac8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(eep);
    2aca:	460c      	mov	r4, r1
    2acc:	b119      	cbz	r1, 2ad6 <nrfx_gppi_event_endpoint_clear+0xe>
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    2ace:	2300      	movs	r3, #0
    2ad0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
    2ad4:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(eep);
    2ad6:	4d07      	ldr	r5, [pc, #28]	; (2af4 <nrfx_gppi_event_endpoint_clear+0x2c>)
    2ad8:	f44f 7317 	mov.w	r3, #604	; 0x25c
    2adc:	462a      	mov	r2, r5
    2ade:	4906      	ldr	r1, [pc, #24]	; (2af8 <nrfx_gppi_event_endpoint_clear+0x30>)
    2ae0:	4806      	ldr	r0, [pc, #24]	; (2afc <nrfx_gppi_event_endpoint_clear+0x34>)
    2ae2:	f00d fe29 	bl	10738 <assert_print>
    2ae6:	f44f 7117 	mov.w	r1, #604	; 0x25c
    2aea:	4628      	mov	r0, r5
    2aec:	f00d fe1d 	bl	1072a <assert_post_action>
    2af0:	e7ed      	b.n	2ace <nrfx_gppi_event_endpoint_clear+0x6>
    2af2:	bf00      	nop
    2af4:	00014260 	.word	0x00014260
    2af8:	00014298 	.word	0x00014298
    2afc:	00013d44 	.word	0x00013d44

00002b00 <nrf_ipc_receive_event_get>:

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    2b00:	b538      	push	{r3, r4, r5, lr}
    2b02:	4604      	mov	r4, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
    2b04:	280f      	cmp	r0, #15
    2b06:	d803      	bhi.n	2b10 <nrf_ipc_receive_event_get+0x10>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    2b08:	00a0      	lsls	r0, r4, #2
}
    2b0a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    2b0e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(index < IPC_CH_NUM);
    2b10:	4d06      	ldr	r5, [pc, #24]	; (2b2c <nrf_ipc_receive_event_get+0x2c>)
    2b12:	f240 13e7 	movw	r3, #487	; 0x1e7
    2b16:	462a      	mov	r2, r5
    2b18:	4905      	ldr	r1, [pc, #20]	; (2b30 <nrf_ipc_receive_event_get+0x30>)
    2b1a:	4806      	ldr	r0, [pc, #24]	; (2b34 <nrf_ipc_receive_event_get+0x34>)
    2b1c:	f00d fe0c 	bl	10738 <assert_print>
    2b20:	f240 11e7 	movw	r1, #487	; 0x1e7
    2b24:	4628      	mov	r0, r5
    2b26:	f00d fe00 	bl	1072a <assert_post_action>
    2b2a:	e7ed      	b.n	2b08 <nrf_ipc_receive_event_get+0x8>
    2b2c:	00014220 	.word	0x00014220
    2b30:	00014254 	.word	0x00014254
    2b34:	00013d44 	.word	0x00013d44

00002b38 <nrfx_gppi_task_endpoint_setup>:
{
    2b38:	b570      	push	{r4, r5, r6, lr}
    2b3a:	4604      	mov	r4, r0
    NRFX_ASSERT(tep);
    2b3c:	460d      	mov	r5, r1
    2b3e:	b121      	cbz	r1, 2b4a <nrfx_gppi_task_endpoint_setup+0x12>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2b40:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    2b44:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
    2b48:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(tep);
    2b4a:	4e07      	ldr	r6, [pc, #28]	; (2b68 <nrfx_gppi_task_endpoint_setup+0x30>)
    2b4c:	f240 234e 	movw	r3, #590	; 0x24e
    2b50:	4632      	mov	r2, r6
    2b52:	4906      	ldr	r1, [pc, #24]	; (2b6c <nrfx_gppi_task_endpoint_setup+0x34>)
    2b54:	4806      	ldr	r0, [pc, #24]	; (2b70 <nrfx_gppi_task_endpoint_setup+0x38>)
    2b56:	f00d fdef 	bl	10738 <assert_print>
    2b5a:	f240 214e 	movw	r1, #590	; 0x24e
    2b5e:	4630      	mov	r0, r6
    2b60:	f00d fde3 	bl	1072a <assert_post_action>
    2b64:	e7ec      	b.n	2b40 <nrfx_gppi_task_endpoint_setup+0x8>
    2b66:	bf00      	nop
    2b68:	00014260 	.word	0x00014260
    2b6c:	0001429c 	.word	0x0001429c
    2b70:	00013d44 	.word	0x00013d44

00002b74 <nrfx_gppi_task_endpoint_clear>:

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    2b74:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(tep);
    2b76:	460c      	mov	r4, r1
    2b78:	b119      	cbz	r1, 2b82 <nrfx_gppi_task_endpoint_clear+0xe>
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    2b7a:	2300      	movs	r3, #0
    2b7c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
    2b80:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(tep);
    2b82:	4d07      	ldr	r5, [pc, #28]	; (2ba0 <nrfx_gppi_task_endpoint_clear+0x2c>)
    2b84:	f240 2363 	movw	r3, #611	; 0x263
    2b88:	462a      	mov	r2, r5
    2b8a:	4906      	ldr	r1, [pc, #24]	; (2ba4 <nrfx_gppi_task_endpoint_clear+0x30>)
    2b8c:	4806      	ldr	r0, [pc, #24]	; (2ba8 <nrfx_gppi_task_endpoint_clear+0x34>)
    2b8e:	f00d fdd3 	bl	10738 <assert_print>
    2b92:	f240 2163 	movw	r1, #611	; 0x263
    2b96:	4628      	mov	r0, r5
    2b98:	f00d fdc7 	bl	1072a <assert_post_action>
    2b9c:	e7ed      	b.n	2b7a <nrfx_gppi_task_endpoint_clear+0x6>
    2b9e:	bf00      	nop
    2ba0:	00014260 	.word	0x00014260
    2ba4:	0001429c 	.word	0x0001429c
    2ba8:	00013d44 	.word	0x00013d44

00002bac <free_resources>:
{
    2bac:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    2bae:	b2c4      	uxtb	r4, r0
    2bb0:	2301      	movs	r3, #1
    2bb2:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    2bb4:	4a0c      	ldr	r2, [pc, #48]	; (2be8 <free_resources+0x3c>)
    2bb6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    2bba:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2bbe:	f006 f853 	bl	8c68 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    2bc2:	4620      	mov	r0, r4
    2bc4:	f006 ffd2 	bl	9b6c <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    2bc8:	4b08      	ldr	r3, [pc, #32]	; (2bec <free_resources+0x40>)
    2bca:	4298      	cmp	r0, r3
    2bcc:	d100      	bne.n	2bd0 <free_resources+0x24>
}
    2bce:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    2bd0:	4c07      	ldr	r4, [pc, #28]	; (2bf0 <free_resources+0x44>)
    2bd2:	2375      	movs	r3, #117	; 0x75
    2bd4:	4622      	mov	r2, r4
    2bd6:	4907      	ldr	r1, [pc, #28]	; (2bf4 <free_resources+0x48>)
    2bd8:	4807      	ldr	r0, [pc, #28]	; (2bf8 <free_resources+0x4c>)
    2bda:	f00d fdad 	bl	10738 <assert_print>
    2bde:	2175      	movs	r1, #117	; 0x75
    2be0:	4620      	mov	r0, r4
    2be2:	f00d fda2 	bl	1072a <assert_post_action>
}
    2be6:	e7f2      	b.n	2bce <free_resources+0x22>
    2be8:	50017000 	.word	0x50017000
    2bec:	0bad0000 	.word	0x0bad0000
    2bf0:	000142a0 	.word	0x000142a0
    2bf4:	000142d8 	.word	0x000142d8
    2bf8:	00013d44 	.word	0x00013d44

00002bfc <ppi_rtc_to_ipc>:
{
    2bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bfe:	4604      	mov	r4, r0
    2c00:	460f      	mov	r7, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    2c02:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2c06:	f005 fe6b 	bl	88e0 <z_nrf_rtc_timer_compare_evt_address_get>
    2c0a:	4606      	mov	r6, r0
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
    2c0c:	f3c4 4007 	ubfx	r0, r4, #16, #8
    2c10:	f7ff ff20 	bl	2a54 <nrf_ipc_send_task_get>
    2c14:	4605      	mov	r5, r0
	if (setup) {
    2c16:	b147      	cbz	r7, 2c2a <ppi_rtc_to_ipc+0x2e>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
    2c18:	b2e0      	uxtb	r0, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    2c1a:	4b08      	ldr	r3, [pc, #32]	; (2c3c <ppi_rtc_to_ipc+0x40>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    2c1c:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    2c20:	515a      	str	r2, [r3, r5]
		nrfx_gppi_event_endpoint_setup(channels.ch.ppi, evt_addr);
    2c22:	4631      	mov	r1, r6
    2c24:	f7ff ff32 	bl	2a8c <nrfx_gppi_event_endpoint_setup>
}
    2c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_gppi_event_endpoint_clear(channels.ch.ppi, evt_addr);
    2c2a:	4631      	mov	r1, r6
    2c2c:	b2e0      	uxtb	r0, r4
    2c2e:	f7ff ff4b 	bl	2ac8 <nrfx_gppi_event_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    2c32:	4b02      	ldr	r3, [pc, #8]	; (2c3c <ppi_rtc_to_ipc+0x40>)
    2c34:	2200      	movs	r2, #0
    2c36:	515a      	str	r2, [r3, r5]
}
    2c38:	e7f6      	b.n	2c28 <ppi_rtc_to_ipc+0x2c>
    2c3a:	bf00      	nop
    2c3c:	5002a080 	.word	0x5002a080

00002c40 <ppi_ipc_to_rtc>:
{
    2c40:	b570      	push	{r4, r5, r6, lr}
    2c42:	4604      	mov	r4, r0
    2c44:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
    2c46:	0e00      	lsrs	r0, r0, #24
    2c48:	f7ff ff5a 	bl	2b00 <nrf_ipc_receive_event_get>
    2c4c:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    2c4e:	f3c4 2007 	ubfx	r0, r4, #8, #8
    2c52:	f005 fe63 	bl	891c <z_nrf_rtc_timer_capture_task_address_get>
    2c56:	4601      	mov	r1, r0
	if (setup) {
    2c58:	b146      	cbz	r6, 2c6c <ppi_ipc_to_rtc+0x2c>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
    2c5a:	b2e4      	uxtb	r4, r4
    2c5c:	4620      	mov	r0, r4
    2c5e:	f7ff ff6b 	bl	2b38 <nrfx_gppi_task_endpoint_setup>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    2c62:	4b06      	ldr	r3, [pc, #24]	; (2c7c <ppi_ipc_to_rtc+0x3c>)
            ((uint32_t)channel | IPC_PUBLISH_RECEIVE_EN_Msk);
    2c64:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    2c68:	515c      	str	r4, [r3, r5]
}
    2c6a:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
    2c6c:	b2e0      	uxtb	r0, r4
    2c6e:	f7ff ff81 	bl	2b74 <nrfx_gppi_task_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    2c72:	4b02      	ldr	r3, [pc, #8]	; (2c7c <ppi_ipc_to_rtc+0x3c>)
    2c74:	2200      	movs	r2, #0
    2c76:	515a      	str	r2, [r3, r5]
}
    2c78:	e7f7      	b.n	2c6a <ppi_ipc_to_rtc+0x2a>
    2c7a:	bf00      	nop
    2c7c:	5002a080 	.word	0x5002a080

00002c80 <remote_callback>:
{
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	b082      	sub	sp, #8
    2c84:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    2c86:	f3c0 2607 	ubfx	r6, r0, #8, #8
    2c8a:	4630      	mov	r0, r6
    2c8c:	f005 fe68 	bl	8960 <z_nrf_rtc_timer_compare_read>
    2c90:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
    2c92:	2100      	movs	r1, #0
    2c94:	4620      	mov	r0, r4
    2c96:	f7ff ffd3 	bl	2c40 <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
    2c9a:	2101      	movs	r1, #1
    2c9c:	4620      	mov	r0, r4
    2c9e:	f7ff ffad 	bl	2bfc <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    2ca2:	f105 0232 	add.w	r2, r5, #50	; 0x32
    2ca6:	9401      	str	r4, [sp, #4]
    2ca8:	4b04      	ldr	r3, [pc, #16]	; (2cbc <remote_callback+0x3c>)
    2caa:	9300      	str	r3, [sp, #0]
    2cac:	0052      	lsls	r2, r2, #1
    2cae:	2300      	movs	r3, #0
    2cb0:	4630      	mov	r0, r6
    2cb2:	f005 fedf 	bl	8a74 <z_nrf_rtc_timer_set>
}
    2cb6:	b002      	add	sp, #8
    2cb8:	bd70      	pop	{r4, r5, r6, pc}
    2cba:	bf00      	nop
    2cbc:	000109ed 	.word	0x000109ed

00002cc0 <mbox_callback>:
{
    2cc0:	b530      	push	{r4, r5, lr}
    2cc2:	b083      	sub	sp, #12
    2cc4:	4614      	mov	r4, r2
	channel->dev = dev;
    2cc6:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
    2cc8:	9101      	str	r1, [sp, #4]
    2cca:	2100      	movs	r1, #0
    2ccc:	4668      	mov	r0, sp
    2cce:	f00d fe80 	bl	109d2 <z_impl_mbox_set_enabled>
	__ASSERT_NO_MSG(err == 0);
    2cd2:	b920      	cbnz	r0, 2cde <mbox_callback+0x1e>
	remote_callback(user_data);
    2cd4:	4620      	mov	r0, r4
    2cd6:	f7ff ffd3 	bl	2c80 <remote_callback>
}
    2cda:	b003      	add	sp, #12
    2cdc:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(err == 0);
    2cde:	4d06      	ldr	r5, [pc, #24]	; (2cf8 <mbox_callback+0x38>)
    2ce0:	23cb      	movs	r3, #203	; 0xcb
    2ce2:	462a      	mov	r2, r5
    2ce4:	4905      	ldr	r1, [pc, #20]	; (2cfc <mbox_callback+0x3c>)
    2ce6:	4806      	ldr	r0, [pc, #24]	; (2d00 <mbox_callback+0x40>)
    2ce8:	f00d fd26 	bl	10738 <assert_print>
    2cec:	21cb      	movs	r1, #203	; 0xcb
    2cee:	4628      	mov	r0, r5
    2cf0:	f00d fd1b 	bl	1072a <assert_post_action>
    2cf4:	e7ee      	b.n	2cd4 <mbox_callback+0x14>
    2cf6:	bf00      	nop
    2cf8:	000142a0 	.word	0x000142a0
    2cfc:	000141b4 	.word	0x000141b4
    2d00:	00013d44 	.word	0x00013d44

00002d04 <sync_rtc_setup>:
	return ipm_set_enabled(ipm_dev, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    2d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d06:	b083      	sub	sp, #12
    2d08:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    2d0a:	1d38      	adds	r0, r7, #4
    2d0c:	f006 ff26 	bl	9b5c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    2d10:	4b31      	ldr	r3, [pc, #196]	; (2dd8 <sync_rtc_setup+0xd4>)
    2d12:	4298      	cmp	r0, r3
    2d14:	d03b      	beq.n	2d8e <sync_rtc_setup+0x8a>
		rv = -ENODEV;
    2d16:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    2d1a:	466d      	mov	r5, sp
    2d1c:	b088      	sub	sp, #32
    2d1e:	466b      	mov	r3, sp
    2d20:	f113 0210 	adds.w	r2, r3, #16
    2d24:	d052      	beq.n	2dcc <sync_rtc_setup+0xc8>
    2d26:	210c      	movs	r1, #12
    2d28:	b13a      	cbz	r2, 2d3a <sync_rtc_setup+0x36>
    2d2a:	4608      	mov	r0, r1
    2d2c:	2904      	cmp	r1, #4
    2d2e:	dd01      	ble.n	2d34 <sync_rtc_setup+0x30>
    2d30:	4e2a      	ldr	r6, [pc, #168]	; (2ddc <sync_rtc_setup+0xd8>)
    2d32:	615e      	str	r6, [r3, #20]
    2d34:	2808      	cmp	r0, #8
    2d36:	dd00      	ble.n	2d3a <sync_rtc_setup+0x36>
    2d38:	619c      	str	r4, [r3, #24]
    2d3a:	290b      	cmp	r1, #11
    2d3c:	dd49      	ble.n	2dd2 <sync_rtc_setup+0xce>
    2d3e:	f04f 0c0c 	mov.w	ip, #12
    2d42:	b13a      	cbz	r2, 2d54 <sync_rtc_setup+0x50>
    2d44:	2103      	movs	r1, #3
    2d46:	7039      	strb	r1, [r7, #0]
    2d48:	2100      	movs	r1, #0
    2d4a:	7079      	strb	r1, [r7, #1]
    2d4c:	70b9      	strb	r1, [r7, #2]
    2d4e:	70f9      	strb	r1, [r7, #3]
    2d50:	6838      	ldr	r0, [r7, #0]
    2d52:	6118      	str	r0, [r3, #16]
    2d54:	2100      	movs	r1, #0
    2d56:	f36f 0100 	bfc	r1, #0, #1
    2d5a:	f36f 0141 	bfc	r1, #1, #1
    2d5e:	f36f 0182 	bfc	r1, #2, #1
    2d62:	f36f 01c5 	bfc	r1, #3, #3
    2d66:	2301      	movs	r3, #1
    2d68:	f363 1188 	bfi	r1, r3, #6, #3
    2d6c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    2d70:	f36c 2152 	bfi	r1, ip, #9, #10
    2d74:	f36f 41de 	bfc	r1, #19, #12
    2d78:	f36f 71df 	bfc	r1, #31, #1
    2d7c:	2300      	movs	r3, #0
    2d7e:	4818      	ldr	r0, [pc, #96]	; (2de0 <sync_rtc_setup+0xdc>)
    2d80:	f000 fc72 	bl	3668 <z_impl_z_log_msg_static_create>
    2d84:	46ad      	mov	sp, r5
	}

	return rv;
}
    2d86:	4620      	mov	r0, r4
    2d88:	370c      	adds	r7, #12
    2d8a:	46bd      	mov	sp, r7
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    2d8e:	f005 ff43 	bl	8c18 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    2d92:	1e04      	subs	r4, r0, #0
    2d94:	db16      	blt.n	2dc4 <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    2d96:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    2d98:	2307      	movs	r3, #7
    2d9a:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
    2d9c:	2308      	movs	r3, #8
    2d9e:	71fb      	strb	r3, [r7, #7]
	rv = IS_ENABLED(CONFIG_MBOX) ? mbox_rx_init((void *)channels.raw) :
    2da0:	6878      	ldr	r0, [r7, #4]
    2da2:	f7ff fe3f 	bl	2a24 <mbox_rx_init>
	if (rv < 0) {
    2da6:	1e04      	subs	r4, r0, #0
    2da8:	dbb7      	blt.n	2d1a <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    2daa:	793b      	ldrb	r3, [r7, #4]
    2dac:	2101      	movs	r1, #1
    2dae:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
    2db2:	4a0c      	ldr	r2, [pc, #48]	; (2de4 <sync_rtc_setup+0xe0>)
    2db4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    2db8:	6878      	ldr	r0, [r7, #4]
    2dba:	f7ff ff41 	bl	2c40 <ppi_ipc_to_rtc>
	if (rv != 0) {
    2dbe:	2c00      	cmp	r4, #0
    2dc0:	d0e1      	beq.n	2d86 <sync_rtc_setup+0x82>
    2dc2:	e7aa      	b.n	2d1a <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
    2dc4:	7938      	ldrb	r0, [r7, #4]
    2dc6:	f006 fed1 	bl	9b6c <nrfx_dppi_channel_free>
		goto bail;
    2dca:	e7f8      	b.n	2dbe <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    2dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2dd0:	e7aa      	b.n	2d28 <sync_rtc_setup+0x24>
    2dd2:	f06f 0c1b 	mvn.w	ip, #27
    2dd6:	e7b4      	b.n	2d42 <sync_rtc_setup+0x3e>
    2dd8:	0bad0000 	.word	0x0bad0000
    2ddc:	000142ec 	.word	0x000142ec
    2de0:	00013ad4 	.word	0x00013ad4
    2de4:	50017000 	.word	0x50017000

00002de8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    2de8:	f006 bb98 	b.w	951c <SystemInit>

00002dec <log_backend_is_active>:
 *
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
    2dec:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(backend != NULL);
    2dee:	4604      	mov	r4, r0
    2df0:	b110      	cbz	r0, 2df8 <log_backend_is_active+0xc>
	return backend->cb->active;
    2df2:	6863      	ldr	r3, [r4, #4]
}
    2df4:	7958      	ldrb	r0, [r3, #5]
    2df6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2df8:	4d06      	ldr	r5, [pc, #24]	; (2e14 <log_backend_is_active+0x28>)
    2dfa:	f44f 7395 	mov.w	r3, #298	; 0x12a
    2dfe:	462a      	mov	r2, r5
    2e00:	4905      	ldr	r1, [pc, #20]	; (2e18 <log_backend_is_active+0x2c>)
    2e02:	4806      	ldr	r0, [pc, #24]	; (2e1c <log_backend_is_active+0x30>)
    2e04:	f00d fc98 	bl	10738 <assert_print>
    2e08:	f44f 7195 	mov.w	r1, #298	; 0x12a
    2e0c:	4628      	mov	r0, r5
    2e0e:	f00d fc8c 	bl	1072a <assert_post_action>
    2e12:	e7ee      	b.n	2df2 <log_backend_is_active+0x6>
    2e14:	00014320 	.word	0x00014320
    2e18:	00014358 	.word	0x00014358
    2e1c:	00013d44 	.word	0x00013d44

00002e20 <log_backend_init>:
{
    2e20:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(backend != NULL);
    2e22:	4604      	mov	r4, r0
    2e24:	b128      	cbz	r0, 2e32 <log_backend_init+0x12>
	if (backend->api->init) {
    2e26:	6823      	ldr	r3, [r4, #0]
    2e28:	68db      	ldr	r3, [r3, #12]
    2e2a:	b10b      	cbz	r3, 2e30 <log_backend_init+0x10>
		backend->api->init(backend);
    2e2c:	4620      	mov	r0, r4
    2e2e:	4798      	blx	r3
}
    2e30:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2e32:	4d06      	ldr	r5, [pc, #24]	; (2e4c <log_backend_init+0x2c>)
    2e34:	238a      	movs	r3, #138	; 0x8a
    2e36:	462a      	mov	r2, r5
    2e38:	4905      	ldr	r1, [pc, #20]	; (2e50 <log_backend_init+0x30>)
    2e3a:	4806      	ldr	r0, [pc, #24]	; (2e54 <log_backend_init+0x34>)
    2e3c:	f00d fc7c 	bl	10738 <assert_print>
    2e40:	218a      	movs	r1, #138	; 0x8a
    2e42:	4628      	mov	r0, r5
    2e44:	f00d fc71 	bl	1072a <assert_post_action>
    2e48:	e7ed      	b.n	2e26 <log_backend_init+0x6>
    2e4a:	bf00      	nop
    2e4c:	00014320 	.word	0x00014320
    2e50:	00014358 	.word	0x00014358
    2e54:	00013d44 	.word	0x00013d44

00002e58 <log_backend_is_ready>:
{
    2e58:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(backend != NULL);
    2e5a:	4604      	mov	r4, r0
    2e5c:	b128      	cbz	r0, 2e6a <log_backend_is_ready+0x12>
	if (backend->api->is_ready != NULL) {
    2e5e:	6823      	ldr	r3, [r4, #0]
    2e60:	691b      	ldr	r3, [r3, #16]
    2e62:	b173      	cbz	r3, 2e82 <log_backend_is_ready+0x2a>
		return backend->api->is_ready(backend);
    2e64:	4620      	mov	r0, r4
    2e66:	4798      	blx	r3
}
    2e68:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2e6a:	4d07      	ldr	r5, [pc, #28]	; (2e88 <log_backend_is_ready+0x30>)
    2e6c:	239d      	movs	r3, #157	; 0x9d
    2e6e:	462a      	mov	r2, r5
    2e70:	4906      	ldr	r1, [pc, #24]	; (2e8c <log_backend_is_ready+0x34>)
    2e72:	4807      	ldr	r0, [pc, #28]	; (2e90 <log_backend_is_ready+0x38>)
    2e74:	f00d fc60 	bl	10738 <assert_print>
    2e78:	219d      	movs	r1, #157	; 0x9d
    2e7a:	4628      	mov	r0, r5
    2e7c:	f00d fc55 	bl	1072a <assert_post_action>
    2e80:	e7ed      	b.n	2e5e <log_backend_is_ready+0x6>
	return 0;
    2e82:	2000      	movs	r0, #0
    2e84:	e7f0      	b.n	2e68 <log_backend_is_ready+0x10>
    2e86:	bf00      	nop
    2e88:	00014320 	.word	0x00014320
    2e8c:	00014358 	.word	0x00014358
    2e90:	00013d44 	.word	0x00013d44

00002e94 <log_backend_panic>:
{
    2e94:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(backend != NULL);
    2e96:	4604      	mov	r4, r0
    2e98:	b120      	cbz	r0, 2ea4 <log_backend_panic+0x10>
	backend->api->panic(backend);
    2e9a:	6823      	ldr	r3, [r4, #0]
    2e9c:	689b      	ldr	r3, [r3, #8]
    2e9e:	4620      	mov	r0, r4
    2ea0:	4798      	blx	r3
}
    2ea2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2ea4:	4d05      	ldr	r5, [pc, #20]	; (2ebc <log_backend_panic+0x28>)
    2ea6:	23cf      	movs	r3, #207	; 0xcf
    2ea8:	462a      	mov	r2, r5
    2eaa:	4905      	ldr	r1, [pc, #20]	; (2ec0 <log_backend_panic+0x2c>)
    2eac:	4805      	ldr	r0, [pc, #20]	; (2ec4 <log_backend_panic+0x30>)
    2eae:	f00d fc43 	bl	10738 <assert_print>
    2eb2:	21cf      	movs	r1, #207	; 0xcf
    2eb4:	4628      	mov	r0, r5
    2eb6:	f00d fc38 	bl	1072a <assert_post_action>
    2eba:	e7ee      	b.n	2e9a <log_backend_panic+0x6>
    2ebc:	00014320 	.word	0x00014320
    2ec0:	00014358 	.word	0x00014358
    2ec4:	00013d44 	.word	0x00013d44

00002ec8 <log_backend_dropped>:
{
    2ec8:	b570      	push	{r4, r5, r6, lr}
    2eca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(backend != NULL);
    2ecc:	4605      	mov	r5, r0
    2ece:	b130      	cbz	r0, 2ede <log_backend_dropped+0x16>
	if (backend->api->dropped != NULL) {
    2ed0:	682b      	ldr	r3, [r5, #0]
    2ed2:	685b      	ldr	r3, [r3, #4]
    2ed4:	b113      	cbz	r3, 2edc <log_backend_dropped+0x14>
		backend->api->dropped(backend, cnt);
    2ed6:	4621      	mov	r1, r4
    2ed8:	4628      	mov	r0, r5
    2eda:	4798      	blx	r3
}
    2edc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2ede:	4e06      	ldr	r6, [pc, #24]	; (2ef8 <log_backend_dropped+0x30>)
    2ee0:	23c1      	movs	r3, #193	; 0xc1
    2ee2:	4632      	mov	r2, r6
    2ee4:	4905      	ldr	r1, [pc, #20]	; (2efc <log_backend_dropped+0x34>)
    2ee6:	4806      	ldr	r0, [pc, #24]	; (2f00 <log_backend_dropped+0x38>)
    2ee8:	f00d fc26 	bl	10738 <assert_print>
    2eec:	21c1      	movs	r1, #193	; 0xc1
    2eee:	4630      	mov	r0, r6
    2ef0:	f00d fc1b 	bl	1072a <assert_post_action>
    2ef4:	e7ec      	b.n	2ed0 <log_backend_dropped+0x8>
    2ef6:	bf00      	nop
    2ef8:	00014320 	.word	0x00014320
    2efc:	00014358 	.word	0x00014358
    2f00:	00013d44 	.word	0x00013d44

00002f04 <log_backend_msg_process>:
{
    2f04:	b570      	push	{r4, r5, r6, lr}
    2f06:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(backend != NULL);
    2f08:	4605      	mov	r5, r0
    2f0a:	b130      	cbz	r0, 2f1a <log_backend_msg_process+0x16>
	__ASSERT_NO_MSG(msg != NULL);
    2f0c:	b18c      	cbz	r4, 2f32 <log_backend_msg_process+0x2e>
	backend->api->process(backend, msg);
    2f0e:	682b      	ldr	r3, [r5, #0]
    2f10:	681b      	ldr	r3, [r3, #0]
    2f12:	4621      	mov	r1, r4
    2f14:	4628      	mov	r0, r5
    2f16:	4798      	blx	r3
}
    2f18:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2f1a:	4e0c      	ldr	r6, [pc, #48]	; (2f4c <log_backend_msg_process+0x48>)
    2f1c:	23b1      	movs	r3, #177	; 0xb1
    2f1e:	4632      	mov	r2, r6
    2f20:	490b      	ldr	r1, [pc, #44]	; (2f50 <log_backend_msg_process+0x4c>)
    2f22:	480c      	ldr	r0, [pc, #48]	; (2f54 <log_backend_msg_process+0x50>)
    2f24:	f00d fc08 	bl	10738 <assert_print>
    2f28:	21b1      	movs	r1, #177	; 0xb1
    2f2a:	4630      	mov	r0, r6
    2f2c:	f00d fbfd 	bl	1072a <assert_post_action>
    2f30:	e7ec      	b.n	2f0c <log_backend_msg_process+0x8>
	__ASSERT_NO_MSG(msg != NULL);
    2f32:	4e06      	ldr	r6, [pc, #24]	; (2f4c <log_backend_msg_process+0x48>)
    2f34:	23b2      	movs	r3, #178	; 0xb2
    2f36:	4632      	mov	r2, r6
    2f38:	4907      	ldr	r1, [pc, #28]	; (2f58 <log_backend_msg_process+0x54>)
    2f3a:	4806      	ldr	r0, [pc, #24]	; (2f54 <log_backend_msg_process+0x50>)
    2f3c:	f00d fbfc 	bl	10738 <assert_print>
    2f40:	21b2      	movs	r1, #178	; 0xb2
    2f42:	4630      	mov	r0, r6
    2f44:	f00d fbf1 	bl	1072a <assert_post_action>
    2f48:	e7e1      	b.n	2f0e <log_backend_msg_process+0xa>
    2f4a:	bf00      	nop
    2f4c:	00014320 	.word	0x00014320
    2f50:	00014358 	.word	0x00014358
    2f54:	00013d44 	.word	0x00013d44
    2f58:	00014370 	.word	0x00014370

00002f5c <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msg_generic *msg)
{
    2f5c:	b570      	push	{r4, r5, r6, lr}
    2f5e:	4606      	mov	r6, r0
	struct log_backend const *backend;

	for (int i = 0; i < log_backend_count_get(); i++) {
    2f60:	2500      	movs	r5, #0
    2f62:	e000      	b.n	2f66 <msg_process+0xa>
    2f64:	3501      	adds	r5, #1
    2f66:	4b0d      	ldr	r3, [pc, #52]	; (2f9c <msg_process+0x40>)
    2f68:	4a0d      	ldr	r2, [pc, #52]	; (2fa0 <msg_process+0x44>)
    2f6a:	1a9b      	subs	r3, r3, r2
    2f6c:	ebb5 1f23 	cmp.w	r5, r3, asr #4
    2f70:	da12      	bge.n	2f98 <msg_process+0x3c>
	return &__log_backends_start[idx];
    2f72:	4c0b      	ldr	r4, [pc, #44]	; (2fa0 <msg_process+0x44>)
    2f74:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		backend = log_backend_get(i);
		if (log_backend_is_active(backend) &&
    2f78:	4620      	mov	r0, r4
    2f7a:	f7ff ff37 	bl	2dec <log_backend_is_active>
    2f7e:	2800      	cmp	r0, #0
    2f80:	d0f0      	beq.n	2f64 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    2f82:	4631      	mov	r1, r6
    2f84:	4620      	mov	r0, r4
    2f86:	f00d fd4e 	bl	10a26 <msg_filter_check>
		if (log_backend_is_active(backend) &&
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d0ea      	beq.n	2f64 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
    2f8e:	4631      	mov	r1, r6
    2f90:	4620      	mov	r0, r4
    2f92:	f7ff ffb7 	bl	2f04 <log_backend_msg_process>
    2f96:	e7e5      	b.n	2f64 <msg_process+0x8>
		}
	}
}
    2f98:	bd70      	pop	{r4, r5, r6, pc}
    2f9a:	bf00      	nop
    2f9c:	00013afc 	.word	0x00013afc
    2fa0:	00013aec 	.word	0x00013aec

00002fa4 <log_backend_notify>:
 * @param arg Pointer to the argument(s).
 */
static inline void log_backend_notify(const struct log_backend *const backend,
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
    2fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fa6:	460c      	mov	r4, r1
    2fa8:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(backend != NULL);
    2faa:	4606      	mov	r6, r0
    2fac:	b138      	cbz	r0, 2fbe <log_backend_notify+0x1a>

	if (backend->api->notify) {
    2fae:	6833      	ldr	r3, [r6, #0]
    2fb0:	699b      	ldr	r3, [r3, #24]
    2fb2:	b11b      	cbz	r3, 2fbc <log_backend_notify+0x18>
		backend->api->notify(backend, event, arg);
    2fb4:	462a      	mov	r2, r5
    2fb6:	4621      	mov	r1, r4
    2fb8:	4630      	mov	r0, r6
    2fba:	4798      	blx	r3
	}
}
    2fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
    2fbe:	4f07      	ldr	r7, [pc, #28]	; (2fdc <log_backend_notify+0x38>)
    2fc0:	f240 1359 	movw	r3, #345	; 0x159
    2fc4:	463a      	mov	r2, r7
    2fc6:	4906      	ldr	r1, [pc, #24]	; (2fe0 <log_backend_notify+0x3c>)
    2fc8:	4806      	ldr	r0, [pc, #24]	; (2fe4 <log_backend_notify+0x40>)
    2fca:	f00d fbb5 	bl	10738 <assert_print>
    2fce:	f240 1159 	movw	r1, #345	; 0x159
    2fd2:	4638      	mov	r0, r7
    2fd4:	f00d fba9 	bl	1072a <assert_post_action>
    2fd8:	e7e9      	b.n	2fae <log_backend_notify+0xa>
    2fda:	bf00      	nop
    2fdc:	00014320 	.word	0x00014320
    2fe0:	00014358 	.word	0x00014358
    2fe4:	00013d44 	.word	0x00013d44

00002fe8 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	4606      	mov	r6, r0
    2fec:	460d      	mov	r5, r1
	for (int i = 0; i < log_backend_count_get(); i++) {
    2fee:	2400      	movs	r4, #0
    2ff0:	e007      	b.n	3002 <log_backend_notify_all+0x1a>
		const struct log_backend *backend = log_backend_get(i);

		log_backend_notify(backend, event, arg);
    2ff2:	462a      	mov	r2, r5
    2ff4:	4631      	mov	r1, r6
    2ff6:	4806      	ldr	r0, [pc, #24]	; (3010 <log_backend_notify_all+0x28>)
    2ff8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    2ffc:	f7ff ffd2 	bl	2fa4 <log_backend_notify>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3000:	3401      	adds	r4, #1
    3002:	4b04      	ldr	r3, [pc, #16]	; (3014 <log_backend_notify_all+0x2c>)
    3004:	4a02      	ldr	r2, [pc, #8]	; (3010 <log_backend_notify_all+0x28>)
    3006:	1a9b      	subs	r3, r3, r2
    3008:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    300c:	dbf1      	blt.n	2ff2 <log_backend_notify_all+0xa>
	}
}
    300e:	bd70      	pop	{r4, r5, r6, pc}
    3010:	00013aec 	.word	0x00013aec
    3014:	00013afc 	.word	0x00013afc

00003018 <activate_foreach_backend>:
{
    3018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    301c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    301e:	4605      	mov	r5, r0
	while (mask_cpy) {
    3020:	b1ed      	cbz	r5, 305e <activate_foreach_backend+0x46>
		uint32_t i = __builtin_ctz(mask_cpy);
    3022:	fa95 f6a5 	rbit	r6, r5
    3026:	fab6 f686 	clz	r6, r6
	return &__log_backends_start[idx];
    302a:	4c0e      	ldr	r4, [pc, #56]	; (3064 <activate_foreach_backend+0x4c>)
    302c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    3030:	2301      	movs	r3, #1
    3032:	40b3      	lsls	r3, r6
    3034:	ea6f 0803 	mvn.w	r8, r3
    3038:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    303c:	7b23      	ldrb	r3, [r4, #12]
    303e:	2b00      	cmp	r3, #0
    3040:	d0ee      	beq.n	3020 <activate_foreach_backend+0x8>
    3042:	4620      	mov	r0, r4
    3044:	f7ff ff08 	bl	2e58 <log_backend_is_ready>
    3048:	2800      	cmp	r0, #0
    304a:	d1e9      	bne.n	3020 <activate_foreach_backend+0x8>
			mask &= ~BIT(i);
    304c:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    3050:	6863      	ldr	r3, [r4, #4]
			log_backend_enable(backend,
    3052:	2204      	movs	r2, #4
    3054:	6819      	ldr	r1, [r3, #0]
    3056:	4620      	mov	r0, r4
    3058:	f000 fada 	bl	3610 <log_backend_enable>
    305c:	e7e0      	b.n	3020 <activate_foreach_backend+0x8>
}
    305e:	4638      	mov	r0, r7
    3060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3064:	00013aec 	.word	0x00013aec

00003068 <z_log_init>:
{
    3068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    306c:	4682      	mov	sl, r0
    306e:	4689      	mov	r9, r1
	return __log_backends_end - __log_backends_start;
    3070:	4b26      	ldr	r3, [pc, #152]	; (310c <z_log_init+0xa4>)
    3072:	4a27      	ldr	r2, [pc, #156]	; (3110 <z_log_init+0xa8>)
    3074:	1a9b      	subs	r3, r3, r2
    3076:	111f      	asrs	r7, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3078:	2b90      	cmp	r3, #144	; 0x90
    307a:	d80b      	bhi.n	3094 <z_log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    307c:	4b25      	ldr	r3, [pc, #148]	; (3114 <z_log_init+0xac>)
    307e:	e8d3 6fef 	ldaex	r6, [r3]
    3082:	1c72      	adds	r2, r6, #1
    3084:	e8c3 2fe1 	stlex	r1, r2, [r3]
    3088:	2900      	cmp	r1, #0
    308a:	d1f8      	bne.n	307e <z_log_init+0x16>
	if (atomic_inc(&initialized) != 0) {
    308c:	2e00      	cmp	r6, #0
    308e:	d139      	bne.n	3104 <z_log_init+0x9c>
	for (i = 0; i < log_backend_count_get(); i++) {
    3090:	2400      	movs	r4, #0
    3092:	e014      	b.n	30be <z_log_init+0x56>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3094:	4c20      	ldr	r4, [pc, #128]	; (3118 <z_log_init+0xb0>)
    3096:	f44f 7384 	mov.w	r3, #264	; 0x108
    309a:	4622      	mov	r2, r4
    309c:	491f      	ldr	r1, [pc, #124]	; (311c <z_log_init+0xb4>)
    309e:	4820      	ldr	r0, [pc, #128]	; (3120 <z_log_init+0xb8>)
    30a0:	f00d fb4a 	bl	10738 <assert_print>
    30a4:	f44f 7184 	mov.w	r1, #264	; 0x108
    30a8:	4620      	mov	r0, r4
    30aa:	f00d fb3e 	bl	1072a <assert_post_action>
    30ae:	e7e5      	b.n	307c <z_log_init+0x14>
						   backend->cb->ctx,
    30b0:	686b      	ldr	r3, [r5, #4]
				log_backend_enable(backend,
    30b2:	2204      	movs	r2, #4
    30b4:	6819      	ldr	r1, [r3, #0]
    30b6:	4628      	mov	r0, r5
    30b8:	f000 faaa 	bl	3610 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    30bc:	3401      	adds	r4, #1
    30be:	42bc      	cmp	r4, r7
    30c0:	da11      	bge.n	30e6 <z_log_init+0x7e>
	return &__log_backends_start[idx];
    30c2:	4d13      	ldr	r5, [pc, #76]	; (3110 <z_log_init+0xa8>)
    30c4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    30c8:	7b2b      	ldrb	r3, [r5, #12]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d0f6      	beq.n	30bc <z_log_init+0x54>
			log_backend_init(backend);
    30ce:	4628      	mov	r0, r5
    30d0:	f7ff fea6 	bl	2e20 <log_backend_init>
			if (log_backend_is_ready(backend) == 0) {
    30d4:	4628      	mov	r0, r5
    30d6:	f7ff febf 	bl	2e58 <log_backend_is_ready>
    30da:	2800      	cmp	r0, #0
    30dc:	d0e8      	beq.n	30b0 <z_log_init+0x48>
				mask |= BIT(i);
    30de:	2301      	movs	r3, #1
    30e0:	40a3      	lsls	r3, r4
    30e2:	431e      	orrs	r6, r3
    30e4:	e7ea      	b.n	30bc <z_log_init+0x54>
	if (blocking) {
    30e6:	f1ba 0f00 	cmp.w	sl, #0
    30ea:	d00c      	beq.n	3106 <z_log_init+0x9e>
		while (mask) {
    30ec:	b15e      	cbz	r6, 3106 <z_log_init+0x9e>
			mask = activate_foreach_backend(mask);
    30ee:	4630      	mov	r0, r6
    30f0:	f7ff ff92 	bl	3018 <activate_foreach_backend>
    30f4:	4606      	mov	r6, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    30f6:	f1b9 0f00 	cmp.w	r9, #0
    30fa:	d0f7      	beq.n	30ec <z_log_init+0x84>
				k_msleep(10);
    30fc:	200a      	movs	r0, #10
    30fe:	f00d fc98 	bl	10a32 <k_msleep>
    3102:	e7f3      	b.n	30ec <z_log_init+0x84>
		return 0;
    3104:	2600      	movs	r6, #0
}
    3106:	4630      	mov	r0, r6
    3108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    310c:	00013afc 	.word	0x00013afc
    3110:	00013aec 	.word	0x00013aec
    3114:	20001aa4 	.word	0x20001aa4
    3118:	00014384 	.word	0x00014384
    311c:	000143b4 	.word	0x000143b4
    3120:	00013d44 	.word	0x00013d44

00003124 <thread_set>:
{
    3124:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    3126:	4b06      	ldr	r3, [pc, #24]	; (3140 <thread_set+0x1c>)
    3128:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    312a:	b118      	cbz	r0, 3134 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    312c:	4b05      	ldr	r3, [pc, #20]	; (3144 <thread_set+0x20>)
    312e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    3130:	2b09      	cmp	r3, #9
    3132:	dc00      	bgt.n	3136 <thread_set+0x12>
}
    3134:	bd08      	pop	{r3, pc}
    3136:	4804      	ldr	r0, [pc, #16]	; (3148 <thread_set+0x24>)
    3138:	f009 feda 	bl	cef0 <z_impl_k_sem_give>
}
    313c:	e7fa      	b.n	3134 <thread_set+0x10>
    313e:	bf00      	nop
    3140:	20001a98 	.word	0x20001a98
    3144:	20001aa0 	.word	0x20001aa0
    3148:	200002f0 	.word	0x200002f0

0000314c <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    314c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    314e:	4802      	ldr	r0, [pc, #8]	; (3158 <log_process_thread_timer_expiry_fn+0xc>)
    3150:	f009 fece 	bl	cef0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    3154:	bd08      	pop	{r3, pc}
    3156:	bf00      	nop
    3158:	200002f0 	.word	0x200002f0

0000315c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    315c:	b530      	push	{r4, r5, lr}
    315e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3160:	2200      	movs	r2, #0
    3162:	490f      	ldr	r1, [pc, #60]	; (31a0 <enable_logger+0x44>)
    3164:	480f      	ldr	r0, [pc, #60]	; (31a4 <enable_logger+0x48>)
    3166:	f010 fa40 	bl	135ea <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    316a:	4d0f      	ldr	r5, [pc, #60]	; (31a8 <enable_logger+0x4c>)
    316c:	2200      	movs	r2, #0
    316e:	2300      	movs	r3, #0
    3170:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3174:	2400      	movs	r4, #0
    3176:	9404      	str	r4, [sp, #16]
    3178:	230e      	movs	r3, #14
    317a:	9303      	str	r3, [sp, #12]
    317c:	9402      	str	r4, [sp, #8]
    317e:	9401      	str	r4, [sp, #4]
    3180:	9400      	str	r4, [sp, #0]
    3182:	4b0a      	ldr	r3, [pc, #40]	; (31ac <enable_logger+0x50>)
    3184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3188:	4909      	ldr	r1, [pc, #36]	; (31b0 <enable_logger+0x54>)
    318a:	4628      	mov	r0, r5
    318c:	f009 fc02 	bl	c994 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3190:	4908      	ldr	r1, [pc, #32]	; (31b4 <enable_logger+0x58>)
    3192:	4628      	mov	r0, r5
    3194:	f009 fa96 	bl	c6c4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    3198:	4620      	mov	r0, r4
    319a:	b009      	add	sp, #36	; 0x24
    319c:	bd30      	pop	{r4, r5, pc}
    319e:	bf00      	nop
    31a0:	0000314d 	.word	0x0000314d
    31a4:	200013b0 	.word	0x200013b0
    31a8:	20000300 	.word	0x20000300
    31ac:	000034d5 	.word	0x000034d5
    31b0:	20002978 	.word	0x20002978
    31b4:	000143d8 	.word	0x000143d8

000031b8 <log_format_func_t_get>:
}
    31b8:	4b01      	ldr	r3, [pc, #4]	; (31c0 <log_format_func_t_get+0x8>)
    31ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    31be:	4770      	bx	lr
    31c0:	00014410 	.word	0x00014410

000031c4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    31c4:	b138      	cbz	r0, 31d6 <log_set_timestamp_func+0x12>
{
    31c6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    31c8:	4a04      	ldr	r2, [pc, #16]	; (31dc <log_set_timestamp_func+0x18>)
    31ca:	6010      	str	r0, [r2, #0]
		log_output_timestamp_freq_set(freq);
    31cc:	4608      	mov	r0, r1
    31ce:	f000 fd4b 	bl	3c68 <log_output_timestamp_freq_set>
	return 0;
    31d2:	2000      	movs	r0, #0
}
    31d4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    31d6:	f06f 0015 	mvn.w	r0, #21
}
    31da:	4770      	bx	lr
    31dc:	2000001c 	.word	0x2000001c

000031e0 <z_log_notify_backend_enabled>:
{
    31e0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    31e2:	4b05      	ldr	r3, [pc, #20]	; (31f8 <z_log_notify_backend_enabled+0x18>)
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	b11b      	cbz	r3, 31f0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    31e8:	4b03      	ldr	r3, [pc, #12]	; (31f8 <z_log_notify_backend_enabled+0x18>)
    31ea:	2201      	movs	r2, #1
    31ec:	701a      	strb	r2, [r3, #0]
}
    31ee:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    31f0:	4802      	ldr	r0, [pc, #8]	; (31fc <z_log_notify_backend_enabled+0x1c>)
    31f2:	f009 fe7d 	bl	cef0 <z_impl_k_sem_give>
}
    31f6:	e7f7      	b.n	31e8 <z_log_notify_backend_enabled+0x8>
    31f8:	2000296c 	.word	0x2000296c
    31fc:	200002f0 	.word	0x200002f0

00003200 <z_log_dropped>:
    3200:	4b09      	ldr	r3, [pc, #36]	; (3228 <z_log_dropped+0x28>)
    3202:	e8d3 1fef 	ldaex	r1, [r3]
    3206:	3101      	adds	r1, #1
    3208:	e8c3 1fe2 	stlex	r2, r1, [r3]
    320c:	2a00      	cmp	r2, #0
    320e:	d1f8      	bne.n	3202 <z_log_dropped+0x2>
	if (buffered) {
    3210:	b900      	cbnz	r0, 3214 <z_log_dropped+0x14>
}
    3212:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3214:	4b05      	ldr	r3, [pc, #20]	; (322c <z_log_dropped+0x2c>)
    3216:	e8d3 1fef 	ldaex	r1, [r3]
    321a:	3901      	subs	r1, #1
    321c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    3220:	2a00      	cmp	r2, #0
    3222:	d0f6      	beq.n	3212 <z_log_dropped+0x12>
    3224:	e7f7      	b.n	3216 <z_log_dropped+0x16>
    3226:	bf00      	nop
    3228:	20001a9c 	.word	0x20001a9c
    322c:	20001aa0 	.word	0x20001aa0

00003230 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3230:	4b04      	ldr	r3, [pc, #16]	; (3244 <z_log_dropped_read_and_clear+0x14>)
}
    3232:	2000      	movs	r0, #0
    3234:	4601      	mov	r1, r0
    3236:	e8d3 0fef 	ldaex	r0, [r3]
    323a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    323e:	2a00      	cmp	r2, #0
    3240:	d1f9      	bne.n	3236 <z_log_dropped_read_and_clear+0x6>
    3242:	4770      	bx	lr
    3244:	20001a9c 	.word	0x20001a9c

00003248 <dropped_notify>:
{
    3248:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    324a:	f7ff fff1 	bl	3230 <z_log_dropped_read_and_clear>
    324e:	4606      	mov	r6, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    3250:	2500      	movs	r5, #0
    3252:	e000      	b.n	3256 <dropped_notify+0xe>
    3254:	3501      	adds	r5, #1
    3256:	4b0a      	ldr	r3, [pc, #40]	; (3280 <dropped_notify+0x38>)
    3258:	4a0a      	ldr	r2, [pc, #40]	; (3284 <dropped_notify+0x3c>)
    325a:	1a9b      	subs	r3, r3, r2
    325c:	ebb5 1f23 	cmp.w	r5, r3, asr #4
    3260:	da0c      	bge.n	327c <dropped_notify+0x34>
    3262:	4c08      	ldr	r4, [pc, #32]	; (3284 <dropped_notify+0x3c>)
    3264:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		if (log_backend_is_active(backend)) {
    3268:	4620      	mov	r0, r4
    326a:	f7ff fdbf 	bl	2dec <log_backend_is_active>
    326e:	2800      	cmp	r0, #0
    3270:	d0f0      	beq.n	3254 <dropped_notify+0xc>
			log_backend_dropped(backend, dropped);
    3272:	4631      	mov	r1, r6
    3274:	4620      	mov	r0, r4
    3276:	f7ff fe27 	bl	2ec8 <log_backend_dropped>
    327a:	e7eb      	b.n	3254 <dropped_notify+0xc>
}
    327c:	bd70      	pop	{r4, r5, r6, pc}
    327e:	bf00      	nop
    3280:	00013afc 	.word	0x00013afc
    3284:	00013aec 	.word	0x00013aec

00003288 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    3288:	4b03      	ldr	r3, [pc, #12]	; (3298 <z_log_dropped_pending+0x10>)
    328a:	6818      	ldr	r0, [r3, #0]
}
    328c:	2800      	cmp	r0, #0
    328e:	bfd4      	ite	le
    3290:	2000      	movle	r0, #0
    3292:	2001      	movgt	r0, #1
    3294:	4770      	bx	lr
    3296:	bf00      	nop
    3298:	20001a9c 	.word	0x20001a9c

0000329c <z_log_msg_init>:
{
    329c:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    329e:	4902      	ldr	r1, [pc, #8]	; (32a8 <z_log_msg_init+0xc>)
    32a0:	4802      	ldr	r0, [pc, #8]	; (32ac <z_log_msg_init+0x10>)
    32a2:	f7ff f861 	bl	2368 <mpsc_pbuf_init>
}
    32a6:	bd08      	pop	{r3, pc}
    32a8:	000143fc 	.word	0x000143fc
    32ac:	20001a5c 	.word	0x20001a5c

000032b0 <log_core_init>:
{
    32b0:	b508      	push	{r3, lr}
	panic_mode = false;
    32b2:	2300      	movs	r3, #0
    32b4:	4a05      	ldr	r2, [pc, #20]	; (32cc <log_core_init+0x1c>)
    32b6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    32b8:	4a05      	ldr	r2, [pc, #20]	; (32d0 <log_core_init+0x20>)
    32ba:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    32bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    32c0:	4804      	ldr	r0, [pc, #16]	; (32d4 <log_core_init+0x24>)
    32c2:	f7ff ff7f 	bl	31c4 <log_set_timestamp_func>
		z_log_msg_init();
    32c6:	f7ff ffe9 	bl	329c <z_log_msg_init>
}
    32ca:	bd08      	pop	{r3, pc}
    32cc:	2000296d 	.word	0x2000296d
    32d0:	20001a9c 	.word	0x20001a9c
    32d4:	00010a2b 	.word	0x00010a2b

000032d8 <z_log_msg_alloc>:
{
    32d8:	b508      	push	{r3, lr}
    32da:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    32dc:	2200      	movs	r2, #0
    32de:	2300      	movs	r3, #0
    32e0:	4801      	ldr	r0, [pc, #4]	; (32e8 <z_log_msg_alloc+0x10>)
    32e2:	f7ff f875 	bl	23d0 <mpsc_pbuf_alloc>
}
    32e6:	bd08      	pop	{r3, pc}
    32e8:	20001a5c 	.word	0x20001a5c

000032ec <z_log_msg_claim>:
{
    32ec:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    32ee:	4802      	ldr	r0, [pc, #8]	; (32f8 <z_log_msg_claim+0xc>)
    32f0:	f7ff f9d6 	bl	26a0 <mpsc_pbuf_claim>
}
    32f4:	bd08      	pop	{r3, pc}
    32f6:	bf00      	nop
    32f8:	20001a5c 	.word	0x20001a5c

000032fc <z_log_msg_free>:
{
    32fc:	b508      	push	{r3, lr}
    32fe:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    3300:	4801      	ldr	r0, [pc, #4]	; (3308 <z_log_msg_free+0xc>)
    3302:	f7ff fa83 	bl	280c <mpsc_pbuf_free>
}
    3306:	bd08      	pop	{r3, pc}
    3308:	20001a5c 	.word	0x20001a5c

0000330c <z_log_msg_pending>:
{
    330c:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
    330e:	4802      	ldr	r0, [pc, #8]	; (3318 <z_log_msg_pending+0xc>)
    3310:	f00d fb0d 	bl	1092e <mpsc_pbuf_is_pending>
}
    3314:	bd08      	pop	{r3, pc}
    3316:	bf00      	nop
    3318:	20001a5c 	.word	0x20001a5c

0000331c <z_impl_log_process>:
	if (!backend_attached) {
    331c:	4b0f      	ldr	r3, [pc, #60]	; (335c <z_impl_log_process+0x40>)
    331e:	7818      	ldrb	r0, [r3, #0]
    3320:	b900      	cbnz	r0, 3324 <z_impl_log_process+0x8>
}
    3322:	4770      	bx	lr
{
    3324:	b510      	push	{r4, lr}
	msg = z_log_msg_claim();
    3326:	f7ff ffe1 	bl	32ec <z_log_msg_claim>
	if (msg) {
    332a:	4604      	mov	r4, r0
    332c:	b168      	cbz	r0, 334a <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    332e:	4b0c      	ldr	r3, [pc, #48]	; (3360 <z_impl_log_process+0x44>)
    3330:	e8d3 1fef 	ldaex	r1, [r3]
    3334:	3901      	subs	r1, #1
    3336:	e8c3 1fe2 	stlex	r2, r1, [r3]
    333a:	2a00      	cmp	r2, #0
    333c:	d1f8      	bne.n	3330 <z_impl_log_process+0x14>
		msg_process(msg);
    333e:	4620      	mov	r0, r4
    3340:	f7ff fe0c 	bl	2f5c <msg_process>
		z_log_msg_free(msg);
    3344:	4620      	mov	r0, r4
    3346:	f7ff ffd9 	bl	32fc <z_log_msg_free>
	if (z_log_dropped_pending()) {
    334a:	f7ff ff9d 	bl	3288 <z_log_dropped_pending>
    334e:	b910      	cbnz	r0, 3356 <z_impl_log_process+0x3a>
	return z_log_msg_pending();
    3350:	f7ff ffdc 	bl	330c <z_log_msg_pending>
}
    3354:	bd10      	pop	{r4, pc}
		dropped_notify();
    3356:	f7ff ff77 	bl	3248 <dropped_notify>
    335a:	e7f9      	b.n	3350 <z_impl_log_process+0x34>
    335c:	2000296c 	.word	0x2000296c
    3360:	20001aa0 	.word	0x20001aa0

00003364 <z_impl_log_panic>:
{
    3364:	b538      	push	{r3, r4, r5, lr}
	if (panic_mode) {
    3366:	4b12      	ldr	r3, [pc, #72]	; (33b0 <z_impl_log_panic+0x4c>)
    3368:	781b      	ldrb	r3, [r3, #0]
    336a:	b103      	cbz	r3, 336e <z_impl_log_panic+0xa>
}
    336c:	bd38      	pop	{r3, r4, r5, pc}
	(void)z_log_init(true, false);
    336e:	2100      	movs	r1, #0
    3370:	2001      	movs	r0, #1
    3372:	f7ff fe79 	bl	3068 <z_log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3376:	2500      	movs	r5, #0
    3378:	e000      	b.n	337c <z_impl_log_panic+0x18>
    337a:	3501      	adds	r5, #1
    337c:	4b0d      	ldr	r3, [pc, #52]	; (33b4 <z_impl_log_panic+0x50>)
    337e:	4a0e      	ldr	r2, [pc, #56]	; (33b8 <z_impl_log_panic+0x54>)
    3380:	1a9b      	subs	r3, r3, r2
    3382:	ebb5 1f23 	cmp.w	r5, r3, asr #4
    3386:	da0b      	bge.n	33a0 <z_impl_log_panic+0x3c>
    3388:	4c0b      	ldr	r4, [pc, #44]	; (33b8 <z_impl_log_panic+0x54>)
    338a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		if (log_backend_is_active(backend)) {
    338e:	4620      	mov	r0, r4
    3390:	f7ff fd2c 	bl	2dec <log_backend_is_active>
    3394:	2800      	cmp	r0, #0
    3396:	d0f0      	beq.n	337a <z_impl_log_panic+0x16>
			log_backend_panic(backend);
    3398:	4620      	mov	r0, r4
    339a:	f7ff fd7b 	bl	2e94 <log_backend_panic>
    339e:	e7ec      	b.n	337a <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    33a0:	f7ff ffbc 	bl	331c <z_impl_log_process>
		while (log_process() == true) {
    33a4:	2800      	cmp	r0, #0
    33a6:	d1fb      	bne.n	33a0 <z_impl_log_panic+0x3c>
	panic_mode = true;
    33a8:	4b01      	ldr	r3, [pc, #4]	; (33b0 <z_impl_log_panic+0x4c>)
    33aa:	2201      	movs	r2, #1
    33ac:	701a      	strb	r2, [r3, #0]
    33ae:	e7dd      	b.n	336c <z_impl_log_panic+0x8>
    33b0:	2000296d 	.word	0x2000296d
    33b4:	00013afc 	.word	0x00013afc
    33b8:	00013aec 	.word	0x00013aec

000033bc <z_log_msg_post_finalize>:
{
    33bc:	b530      	push	{r4, r5, lr}
    33be:	b083      	sub	sp, #12
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    33c0:	4b2f      	ldr	r3, [pc, #188]	; (3480 <z_log_msg_post_finalize+0xc4>)
    33c2:	e8d3 2fef 	ldaex	r2, [r3]
    33c6:	1c51      	adds	r1, r2, #1
    33c8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    33cc:	2800      	cmp	r0, #0
    33ce:	d1f8      	bne.n	33c2 <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
    33d0:	4b2c      	ldr	r3, [pc, #176]	; (3484 <z_log_msg_post_finalize+0xc8>)
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	b96b      	cbnz	r3, 33f2 <z_log_msg_post_finalize+0x36>
	} else if (proc_tid != NULL) {
    33d6:	4b2c      	ldr	r3, [pc, #176]	; (3488 <z_log_msg_post_finalize+0xcc>)
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	b323      	cbz	r3, 3426 <z_log_msg_post_finalize+0x6a>
		if (cnt == 0) {
    33dc:	2a00      	cmp	r2, #0
    33de:	d044      	beq.n	346a <z_log_msg_post_finalize+0xae>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    33e0:	2a0a      	cmp	r2, #10
    33e2:	d120      	bne.n	3426 <z_log_msg_post_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    33e4:	4829      	ldr	r0, [pc, #164]	; (348c <z_log_msg_post_finalize+0xd0>)
    33e6:	f010 f90c 	bl	13602 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    33ea:	4829      	ldr	r0, [pc, #164]	; (3490 <z_log_msg_post_finalize+0xd4>)
    33ec:	f009 fd80 	bl	cef0 <z_impl_k_sem_give>
}
    33f0:	e019      	b.n	3426 <z_log_msg_post_finalize+0x6a>
	__asm__ volatile(
    33f2:	f04f 0320 	mov.w	r3, #32
    33f6:	f3ef 8411 	mrs	r4, BASEPRI
    33fa:	f383 8812 	msr	BASEPRI_MAX, r3
    33fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3402:	4824      	ldr	r0, [pc, #144]	; (3494 <z_log_msg_post_finalize+0xd8>)
    3404:	f009 f97e 	bl	c704 <z_spin_lock_valid>
    3408:	b178      	cbz	r0, 342a <z_log_msg_post_finalize+0x6e>
	z_spin_lock_set_owner(l);
    340a:	4d22      	ldr	r5, [pc, #136]	; (3494 <z_log_msg_post_finalize+0xd8>)
    340c:	4628      	mov	r0, r5
    340e:	f009 f999 	bl	c744 <z_spin_lock_set_owner>
    3412:	f7ff ff83 	bl	331c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3416:	4628      	mov	r0, r5
    3418:	f009 f984 	bl	c724 <z_spin_unlock_valid>
    341c:	b1a8      	cbz	r0, 344a <z_log_msg_post_finalize+0x8e>
	__asm__ volatile(
    341e:	f384 8811 	msr	BASEPRI, r4
    3422:	f3bf 8f6f 	isb	sy
    3426:	b003      	add	sp, #12
    3428:	bd30      	pop	{r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    342a:	4d1b      	ldr	r5, [pc, #108]	; (3498 <z_log_msg_post_finalize+0xdc>)
    342c:	238e      	movs	r3, #142	; 0x8e
    342e:	462a      	mov	r2, r5
    3430:	491a      	ldr	r1, [pc, #104]	; (349c <z_log_msg_post_finalize+0xe0>)
    3432:	481b      	ldr	r0, [pc, #108]	; (34a0 <z_log_msg_post_finalize+0xe4>)
    3434:	f00d f980 	bl	10738 <assert_print>
    3438:	4916      	ldr	r1, [pc, #88]	; (3494 <z_log_msg_post_finalize+0xd8>)
    343a:	481a      	ldr	r0, [pc, #104]	; (34a4 <z_log_msg_post_finalize+0xe8>)
    343c:	f00d f97c 	bl	10738 <assert_print>
    3440:	218e      	movs	r1, #142	; 0x8e
    3442:	4628      	mov	r0, r5
    3444:	f00d f971 	bl	1072a <assert_post_action>
    3448:	e7df      	b.n	340a <z_log_msg_post_finalize+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    344a:	4d13      	ldr	r5, [pc, #76]	; (3498 <z_log_msg_post_finalize+0xdc>)
    344c:	23b9      	movs	r3, #185	; 0xb9
    344e:	462a      	mov	r2, r5
    3450:	4915      	ldr	r1, [pc, #84]	; (34a8 <z_log_msg_post_finalize+0xec>)
    3452:	4813      	ldr	r0, [pc, #76]	; (34a0 <z_log_msg_post_finalize+0xe4>)
    3454:	f00d f970 	bl	10738 <assert_print>
    3458:	490e      	ldr	r1, [pc, #56]	; (3494 <z_log_msg_post_finalize+0xd8>)
    345a:	4814      	ldr	r0, [pc, #80]	; (34ac <z_log_msg_post_finalize+0xf0>)
    345c:	f00d f96c 	bl	10738 <assert_print>
    3460:	21b9      	movs	r1, #185	; 0xb9
    3462:	4628      	mov	r0, r5
    3464:	f00d f961 	bl	1072a <assert_post_action>
    3468:	e7d9      	b.n	341e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    346a:	2200      	movs	r2, #0
    346c:	2300      	movs	r3, #0
    346e:	e9cd 2300 	strd	r2, r3, [sp]
    3472:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3476:	2300      	movs	r3, #0
    3478:	4804      	ldr	r0, [pc, #16]	; (348c <z_log_msg_post_finalize+0xd0>)
    347a:	f00c f8d9 	bl	f630 <z_impl_k_timer_start>
    347e:	e7d2      	b.n	3426 <z_log_msg_post_finalize+0x6a>
    3480:	20001aa0 	.word	0x20001aa0
    3484:	2000296d 	.word	0x2000296d
    3488:	20001a98 	.word	0x20001a98
    348c:	200013b0 	.word	0x200013b0
    3490:	200002f0 	.word	0x200002f0
    3494:	20001a58 	.word	0x20001a58
    3498:	00013f4c 	.word	0x00013f4c
    349c:	00013fac 	.word	0x00013fac
    34a0:	00013d44 	.word	0x00013d44
    34a4:	00013fc4 	.word	0x00013fc4
    34a8:	00013f7c 	.word	0x00013f7c
    34ac:	00013f94 	.word	0x00013f94

000034b0 <z_log_msg_commit>:
{
    34b0:	b510      	push	{r4, lr}
    34b2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    34b4:	4b05      	ldr	r3, [pc, #20]	; (34cc <z_log_msg_commit+0x1c>)
    34b6:	681b      	ldr	r3, [r3, #0]
    34b8:	4798      	blx	r3
    34ba:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    34bc:	4621      	mov	r1, r4
    34be:	4804      	ldr	r0, [pc, #16]	; (34d0 <z_log_msg_commit+0x20>)
    34c0:	f7ff f886 	bl	25d0 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    34c4:	f7ff ff7a 	bl	33bc <z_log_msg_post_finalize>
}
    34c8:	bd10      	pop	{r4, pc}
    34ca:	bf00      	nop
    34cc:	2000001c 	.word	0x2000001c
    34d0:	20001a5c 	.word	0x20001a5c

000034d4 <log_process_thread_func>:
{
    34d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __log_backends_end - __log_backends_start;
    34d8:	4b23      	ldr	r3, [pc, #140]	; (3568 <log_process_thread_func+0x94>)
    34da:	4a24      	ldr	r2, [pc, #144]	; (356c <log_process_thread_func+0x98>)
    34dc:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    34de:	2b00      	cmp	r3, #0
    34e0:	dd0e      	ble.n	3500 <log_process_thread_func+0x2c>
	uint32_t activate_mask = z_log_init(false, false);
    34e2:	2100      	movs	r1, #0
    34e4:	4608      	mov	r0, r1
    34e6:	f7ff fdbf 	bl	3068 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    34ea:	4680      	mov	r8, r0
    34ec:	b1b0      	cbz	r0, 351c <log_process_thread_func+0x48>
    34ee:	f240 6667 	movw	r6, #1639	; 0x667
    34f2:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    34f4:	f00b fad4 	bl	eaa0 <z_impl_z_current_get>
	thread_set(k_current_get());
    34f8:	f7ff fe14 	bl	3124 <thread_set>
	bool processed_any = false;
    34fc:	2500      	movs	r5, #0
    34fe:	e023      	b.n	3548 <log_process_thread_func+0x74>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    3500:	4c1b      	ldr	r4, [pc, #108]	; (3570 <log_process_thread_func+0x9c>)
    3502:	f240 238a 	movw	r3, #650	; 0x28a
    3506:	4622      	mov	r2, r4
    3508:	491a      	ldr	r1, [pc, #104]	; (3574 <log_process_thread_func+0xa0>)
    350a:	481b      	ldr	r0, [pc, #108]	; (3578 <log_process_thread_func+0xa4>)
    350c:	f00d f914 	bl	10738 <assert_print>
    3510:	f240 218a 	movw	r1, #650	; 0x28a
    3514:	4620      	mov	r0, r4
    3516:	f00d f908 	bl	1072a <assert_post_action>
    351a:	e7e2      	b.n	34e2 <log_process_thread_func+0xe>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    351c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3520:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3524:	e7e6      	b.n	34f4 <log_process_thread_func+0x20>
			activate_mask = activate_foreach_backend(activate_mask);
    3526:	4640      	mov	r0, r8
    3528:	f7ff fd76 	bl	3018 <activate_foreach_backend>
			if (!activate_mask) {
    352c:	4680      	mov	r8, r0
    352e:	b970      	cbnz	r0, 354e <log_process_thread_func+0x7a>
				timeout = K_FOREVER;
    3530:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3534:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3538:	e009      	b.n	354e <log_process_thread_func+0x7a>
    353a:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    353c:	4632      	mov	r2, r6
    353e:	463b      	mov	r3, r7
    3540:	480e      	ldr	r0, [pc, #56]	; (357c <log_process_thread_func+0xa8>)
    3542:	f009 fd19 	bl	cf78 <z_impl_k_sem_take>
{
    3546:	4625      	mov	r5, r4
		if (activate_mask) {
    3548:	f1b8 0f00 	cmp.w	r8, #0
    354c:	d1eb      	bne.n	3526 <log_process_thread_func+0x52>
    354e:	f7ff fee5 	bl	331c <z_impl_log_process>
		if (log_process() == false) {
    3552:	4604      	mov	r4, r0
    3554:	2800      	cmp	r0, #0
    3556:	d1f6      	bne.n	3546 <log_process_thread_func+0x72>
			if (processed_any) {
    3558:	2d00      	cmp	r5, #0
    355a:	d0ee      	beq.n	353a <log_process_thread_func+0x66>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    355c:	2100      	movs	r1, #0
    355e:	4608      	mov	r0, r1
    3560:	f7ff fd42 	bl	2fe8 <log_backend_notify_all>
    3564:	e7ea      	b.n	353c <log_process_thread_func+0x68>
    3566:	bf00      	nop
    3568:	00013afc 	.word	0x00013afc
    356c:	00013aec 	.word	0x00013aec
    3570:	00014384 	.word	0x00014384
    3574:	000143e0 	.word	0x000143e0
    3578:	00013d44 	.word	0x00013d44
    357c:	200002f0 	.word	0x200002f0

00003580 <log_backend_id_set>:
{
    3580:	b570      	push	{r4, r5, r6, lr}
    3582:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(backend != NULL);
    3584:	4605      	mov	r5, r0
    3586:	b110      	cbz	r0, 358e <log_backend_id_set+0xe>
	backend->cb->id = id;
    3588:	686b      	ldr	r3, [r5, #4]
    358a:	711c      	strb	r4, [r3, #4]
}
    358c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(backend != NULL);
    358e:	4e06      	ldr	r6, [pc, #24]	; (35a8 <log_backend_id_set+0x28>)
    3590:	23de      	movs	r3, #222	; 0xde
    3592:	4632      	mov	r2, r6
    3594:	4905      	ldr	r1, [pc, #20]	; (35ac <log_backend_id_set+0x2c>)
    3596:	4806      	ldr	r0, [pc, #24]	; (35b0 <log_backend_id_set+0x30>)
    3598:	f00d f8ce 	bl	10738 <assert_print>
    359c:	21de      	movs	r1, #222	; 0xde
    359e:	4630      	mov	r0, r6
    35a0:	f00d f8c3 	bl	1072a <assert_post_action>
    35a4:	e7f0      	b.n	3588 <log_backend_id_set+0x8>
    35a6:	bf00      	nop
    35a8:	00014320 	.word	0x00014320
    35ac:	00014358 	.word	0x00014358
    35b0:	00013d44 	.word	0x00013d44

000035b4 <log_backend_activate>:
{
    35b4:	b570      	push	{r4, r5, r6, lr}
    35b6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(backend != NULL);
    35b8:	4605      	mov	r5, r0
    35ba:	b128      	cbz	r0, 35c8 <log_backend_activate+0x14>
	backend->cb->ctx = ctx;
    35bc:	686b      	ldr	r3, [r5, #4]
    35be:	601c      	str	r4, [r3, #0]
	backend->cb->active = true;
    35c0:	686b      	ldr	r3, [r5, #4]
    35c2:	2201      	movs	r2, #1
    35c4:	715a      	strb	r2, [r3, #5]
}
    35c6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(backend != NULL);
    35c8:	4e06      	ldr	r6, [pc, #24]	; (35e4 <log_backend_activate+0x30>)
    35ca:	f240 130f 	movw	r3, #271	; 0x10f
    35ce:	4632      	mov	r2, r6
    35d0:	4905      	ldr	r1, [pc, #20]	; (35e8 <log_backend_activate+0x34>)
    35d2:	4806      	ldr	r0, [pc, #24]	; (35ec <log_backend_activate+0x38>)
    35d4:	f00d f8b0 	bl	10738 <assert_print>
    35d8:	f240 110f 	movw	r1, #271	; 0x10f
    35dc:	4630      	mov	r0, r6
    35de:	f00d f8a4 	bl	1072a <assert_post_action>
    35e2:	e7eb      	b.n	35bc <log_backend_activate+0x8>
    35e4:	00014320 	.word	0x00014320
    35e8:	00014358 	.word	0x00014358
    35ec:	00013d44 	.word	0x00013d44

000035f0 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    35f0:	4b05      	ldr	r3, [pc, #20]	; (3608 <log_source_name_get+0x18>)
    35f2:	4a06      	ldr	r2, [pc, #24]	; (360c <log_source_name_get+0x1c>)
    35f4:	1a9b      	subs	r3, r3, r2
    35f6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    35fa:	d202      	bcs.n	3602 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    35fc:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3600:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3602:	2000      	movs	r0, #0
}
    3604:	4770      	bx	lr
    3606:	bf00      	nop
    3608:	00013aec 	.word	0x00013aec
    360c:	00013a6c 	.word	0x00013a6c

00003610 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3610:	b538      	push	{r3, r4, r5, lr}
    3612:	4604      	mov	r4, r0
    3614:	460d      	mov	r5, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3616:	4b07      	ldr	r3, [pc, #28]	; (3634 <log_backend_enable+0x24>)
    3618:	1ac3      	subs	r3, r0, r3
    361a:	111b      	asrs	r3, r3, #4
    361c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    361e:	b2d9      	uxtb	r1, r3
    3620:	f7ff ffae 	bl	3580 <log_backend_id_set>
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    3624:	4629      	mov	r1, r5
    3626:	4620      	mov	r0, r4
    3628:	f7ff ffc4 	bl	35b4 <log_backend_activate>

	z_log_notify_backend_enabled();
    362c:	f7ff fdd8 	bl	31e0 <z_log_notify_backend_enabled>
}
    3630:	bd38      	pop	{r3, r4, r5, pc}
    3632:	bf00      	nop
    3634:	00013aec 	.word	0x00013aec

00003638 <cbprintf_package_copy>:
{
    3638:	b500      	push	{lr}
    363a:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    363c:	9205      	str	r2, [sp, #20]
    363e:	9306      	str	r3, [sp, #24]
    3640:	2300      	movs	r3, #0
    3642:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    3644:	b162      	cbz	r2, 3660 <cbprintf_package_copy+0x28>
    3646:	4a07      	ldr	r2, [pc, #28]	; (3664 <cbprintf_package_copy+0x2c>)
    3648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    364a:	9302      	str	r3, [sp, #8]
    364c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    364e:	9301      	str	r3, [sp, #4]
    3650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3652:	9300      	str	r3, [sp, #0]
    3654:	ab05      	add	r3, sp, #20
    3656:	f7fd fbc3 	bl	de0 <cbprintf_package_convert>
}
    365a:	b009      	add	sp, #36	; 0x24
    365c:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    3660:	2200      	movs	r2, #0
    3662:	e7f1      	b.n	3648 <cbprintf_package_copy+0x10>
    3664:	00010a8b 	.word	0x00010a8b

00003668 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    3668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    366c:	b08a      	sub	sp, #40	; 0x28
    366e:	4605      	mov	r5, r0
    3670:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    3672:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    3674:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
    3678:	2c00      	cmp	r4, #0
    367a:	d039      	beq.n	36f0 <z_impl_z_log_msg_static_create+0x88>
    367c:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
    367e:	2200      	movs	r2, #0
    3680:	9207      	str	r2, [sp, #28]
    3682:	9208      	str	r2, [sp, #32]
    3684:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    3686:	2304      	movs	r3, #4
    3688:	9302      	str	r3, [sp, #8]
    368a:	ab05      	add	r3, sp, #20
    368c:	9301      	str	r3, [sp, #4]
    368e:	2302      	movs	r3, #2
    3690:	9300      	str	r3, [sp, #0]
    3692:	ab07      	add	r3, sp, #28
    3694:	4621      	mov	r1, r4
    3696:	4640      	mov	r0, r8
    3698:	f7fd fba2 	bl	de0 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    369c:	f360 2752 	bfi	r7, r0, #9, #10
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    36a0:	f3c0 0909 	ubfx	r9, r0, #0, #10
    36a4:	f3c7 41cb 	ubfx	r1, r7, #19, #12
    36a8:	4449      	add	r1, r9
    36aa:	3117      	adds	r1, #23
    36ac:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    36b0:	0888      	lsrs	r0, r1, #2
    36b2:	f7ff fe11 	bl	32d8 <z_log_msg_alloc>
		if (msg) {
    36b6:	4682      	mov	sl, r0
    36b8:	b320      	cbz	r0, 3704 <z_impl_z_log_msg_static_create+0x9c>
			len = cbprintf_package_copy(package, inlen,
    36ba:	2304      	movs	r3, #4
    36bc:	9302      	str	r3, [sp, #8]
    36be:	ab05      	add	r3, sp, #20
    36c0:	9301      	str	r3, [sp, #4]
    36c2:	2302      	movs	r3, #2
    36c4:	9300      	str	r3, [sp, #0]
    36c6:	464b      	mov	r3, r9
    36c8:	f100 0210 	add.w	r2, r0, #16
    36cc:	4621      	mov	r1, r4
    36ce:	4640      	mov	r0, r8
    36d0:	f7ff ffb2 	bl	3638 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    36d4:	2800      	cmp	r0, #0
    36d6:	da15      	bge.n	3704 <z_impl_z_log_msg_static_create+0x9c>
    36d8:	4c0f      	ldr	r4, [pc, #60]	; (3718 <z_impl_z_log_msg_static_create+0xb0>)
    36da:	2348      	movs	r3, #72	; 0x48
    36dc:	4622      	mov	r2, r4
    36de:	490f      	ldr	r1, [pc, #60]	; (371c <z_impl_z_log_msg_static_create+0xb4>)
    36e0:	480f      	ldr	r0, [pc, #60]	; (3720 <z_impl_z_log_msg_static_create+0xb8>)
    36e2:	f00d f829 	bl	10738 <assert_print>
    36e6:	2148      	movs	r1, #72	; 0x48
    36e8:	4620      	mov	r0, r4
    36ea:	f00d f81e 	bl	1072a <assert_post_action>
    36ee:	e009      	b.n	3704 <z_impl_z_log_msg_static_create+0x9c>
    36f0:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    36f4:	440c      	add	r4, r1
    36f6:	3417      	adds	r4, #23
    36f8:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    36fc:	08a0      	lsrs	r0, r4, #2
    36fe:	f7ff fdeb 	bl	32d8 <z_log_msg_alloc>
    3702:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    3704:	4633      	mov	r3, r6
    3706:	463a      	mov	r2, r7
    3708:	4629      	mov	r1, r5
    370a:	4650      	mov	r0, sl
    370c:	f00d f9d3 	bl	10ab6 <z_log_msg_finalize>
}
    3710:	b00a      	add	sp, #40	; 0x28
    3712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3716:	bf00      	nop
    3718:	00014420 	.word	0x00014420
    371c:	0001444c 	.word	0x0001444c
    3720:	00013d44 	.word	0x00013d44

00003724 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3728:	b087      	sub	sp, #28
    372a:	4681      	mov	r9, r0
    372c:	460e      	mov	r6, r1
    372e:	4690      	mov	r8, r2
    3730:	461f      	mov	r7, r3
    3732:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    3736:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	int plen;

	if (fmt) {
    373a:	f1ba 0f00 	cmp.w	sl, #0
    373e:	d016      	beq.n	376e <z_impl_z_log_msg_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    3740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3742:	9305      	str	r3, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3744:	9300      	str	r3, [sp, #0]
    3746:	4653      	mov	r3, sl
    3748:	9a11      	ldr	r2, [sp, #68]	; 0x44
    374a:	2110      	movs	r1, #16
    374c:	2000      	movs	r0, #0
    374e:	f7fd f8c3 	bl	8d8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3752:	1e05      	subs	r5, r0, #0
    3754:	da0c      	bge.n	3770 <z_impl_z_log_msg_runtime_vcreate+0x4c>
    3756:	4c26      	ldr	r4, [pc, #152]	; (37f0 <z_impl_z_log_msg_runtime_vcreate+0xcc>)
    3758:	2367      	movs	r3, #103	; 0x67
    375a:	4622      	mov	r2, r4
    375c:	4925      	ldr	r1, [pc, #148]	; (37f4 <z_impl_z_log_msg_runtime_vcreate+0xd0>)
    375e:	4826      	ldr	r0, [pc, #152]	; (37f8 <z_impl_z_log_msg_runtime_vcreate+0xd4>)
    3760:	f00c ffea 	bl	10738 <assert_print>
    3764:	2167      	movs	r1, #103	; 0x67
    3766:	4620      	mov	r0, r4
    3768:	f00c ffdf 	bl	1072a <assert_post_action>
		va_end(ap2);
    376c:	e000      	b.n	3770 <z_impl_z_log_msg_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    376e:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3770:	9503      	str	r5, [sp, #12]
    3772:	eb05 000b 	add.w	r0, r5, fp
    3776:	3017      	adds	r0, #23
    3778:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    377c:	2400      	movs	r4, #0
    377e:	f36f 0400 	bfc	r4, #0, #1
    3782:	f36f 0441 	bfc	r4, #1, #1
    3786:	f36f 0482 	bfc	r4, #2, #1
    378a:	f369 04c5 	bfi	r4, r9, #3, #3
    378e:	f368 1488 	bfi	r4, r8, #6, #3
    3792:	f365 2452 	bfi	r4, r5, #9, #10
    3796:	f36b 44de 	bfi	r4, fp, #19, #12
    379a:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    379e:	0880      	lsrs	r0, r0, #2
    37a0:	f7ff fd9a 	bl	32d8 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    37a4:	4605      	mov	r5, r0
    37a6:	b160      	cbz	r0, 37c2 <z_impl_z_log_msg_runtime_vcreate+0x9e>
    37a8:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    37aa:	f1ba 0f00 	cmp.w	sl, #0
    37ae:	d008      	beq.n	37c2 <z_impl_z_log_msg_runtime_vcreate+0x9e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    37b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    37b2:	9300      	str	r3, [sp, #0]
    37b4:	4653      	mov	r3, sl
    37b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    37b8:	9903      	ldr	r1, [sp, #12]
    37ba:	f7fd f88d 	bl	8d8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    37be:	2800      	cmp	r0, #0
    37c0:	db08      	blt.n	37d4 <z_impl_z_log_msg_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    37c2:	463b      	mov	r3, r7
    37c4:	4622      	mov	r2, r4
    37c6:	4631      	mov	r1, r6
    37c8:	4628      	mov	r0, r5
    37ca:	f00d f974 	bl	10ab6 <z_log_msg_finalize>
	}
}
    37ce:	b007      	add	sp, #28
    37d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    37d4:	f8df 8018 	ldr.w	r8, [pc, #24]	; 37f0 <z_impl_z_log_msg_runtime_vcreate+0xcc>
    37d8:	2381      	movs	r3, #129	; 0x81
    37da:	4642      	mov	r2, r8
    37dc:	4905      	ldr	r1, [pc, #20]	; (37f4 <z_impl_z_log_msg_runtime_vcreate+0xd0>)
    37de:	4806      	ldr	r0, [pc, #24]	; (37f8 <z_impl_z_log_msg_runtime_vcreate+0xd4>)
    37e0:	f00c ffaa 	bl	10738 <assert_print>
    37e4:	2181      	movs	r1, #129	; 0x81
    37e6:	4640      	mov	r0, r8
    37e8:	f00c ff9f 	bl	1072a <assert_post_action>
    37ec:	e7e9      	b.n	37c2 <z_impl_z_log_msg_runtime_vcreate+0x9e>
    37ee:	bf00      	nop
    37f0:	00014420 	.word	0x00014420
    37f4:	00014458 	.word	0x00014458
    37f8:	00013d44 	.word	0x00013d44

000037fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    37fc:	b40e      	push	{r1, r2, r3}
    37fe:	b500      	push	{lr}
    3800:	b084      	sub	sp, #16
    3802:	4601      	mov	r1, r0
    3804:	ab05      	add	r3, sp, #20
    3806:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    380a:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    380c:	2000      	movs	r0, #0
    380e:	9000      	str	r0, [sp, #0]
    3810:	4803      	ldr	r0, [pc, #12]	; (3820 <print_formatted+0x24>)
    3812:	f7fe fadd 	bl	1dd0 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    3816:	b004      	add	sp, #16
    3818:	f85d eb04 	ldr.w	lr, [sp], #4
    381c:	b003      	add	sp, #12
    381e:	4770      	bx	lr
    3820:	00003aa1 	.word	0x00003aa1

00003824 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    3824:	b530      	push	{r4, r5, lr}
    3826:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    3828:	f011 0f44 	tst.w	r1, #68	; 0x44
    382c:	d005      	beq.n	383a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    382e:	4b1a      	ldr	r3, [pc, #104]	; (3898 <timestamp_print+0x74>)
    3830:	681c      	ldr	r4, [r3, #0]
    3832:	b934      	cbnz	r4, 3842 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    3834:	2000      	movs	r0, #0
	}

	return length;
}
    3836:	b005      	add	sp, #20
    3838:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    383a:	4918      	ldr	r1, [pc, #96]	; (389c <timestamp_print+0x78>)
    383c:	f7ff ffde 	bl	37fc <print_formatted>
    3840:	e7f9      	b.n	3836 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3842:	4b17      	ldr	r3, [pc, #92]	; (38a0 <timestamp_print+0x7c>)
    3844:	6819      	ldr	r1, [r3, #0]
    3846:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    384a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    384e:	4a15      	ldr	r2, [pc, #84]	; (38a4 <timestamp_print+0x80>)
    3850:	fba2 320c 	umull	r3, r2, r2, ip
    3854:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    3856:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    385a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    385e:	4b12      	ldr	r3, [pc, #72]	; (38a8 <timestamp_print+0x84>)
    3860:	fba3 530e 	umull	r5, r3, r3, lr
    3864:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    3866:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    386a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    386e:	fb0c f101 	mul.w	r1, ip, r1
    3872:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3876:	fb04 1115 	mls	r1, r4, r5, r1
    387a:	fb0c f101 	mul.w	r1, ip, r1
    387e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    3882:	9102      	str	r1, [sp, #8]
    3884:	9501      	str	r5, [sp, #4]
    3886:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    388a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    388e:	9100      	str	r1, [sp, #0]
    3890:	4906      	ldr	r1, [pc, #24]	; (38ac <timestamp_print+0x88>)
    3892:	f7ff ffb3 	bl	37fc <print_formatted>
    3896:	e7ce      	b.n	3836 <timestamp_print+0x12>
    3898:	20001aac 	.word	0x20001aac
    389c:	00014464 	.word	0x00014464
    38a0:	20001aa8 	.word	0x20001aa8
    38a4:	91a2b3c5 	.word	0x91a2b3c5
    38a8:	88888889 	.word	0x88888889
    38ac:	00014470 	.word	0x00014470

000038b0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    38b0:	b161      	cbz	r1, 38cc <color_print+0x1c>
{
    38b2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    38b4:	b12a      	cbz	r2, 38c2 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    38b6:	4a06      	ldr	r2, [pc, #24]	; (38d0 <color_print+0x20>)
    38b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    38bc:	b912      	cbnz	r2, 38c4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    38be:	4a05      	ldr	r2, [pc, #20]	; (38d4 <color_print+0x24>)
    38c0:	e000      	b.n	38c4 <color_print+0x14>
    38c2:	4a04      	ldr	r2, [pc, #16]	; (38d4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    38c4:	4904      	ldr	r1, [pc, #16]	; (38d8 <color_print+0x28>)
    38c6:	f7ff ff99 	bl	37fc <print_formatted>
	}
}
    38ca:	bd08      	pop	{r3, pc}
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	00014580 	.word	0x00014580
    38d4:	0001448c 	.word	0x0001448c
    38d8:	00014494 	.word	0x00014494

000038dc <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    38dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38e0:	4605      	mov	r5, r0
    38e2:	4690      	mov	r8, r2
    38e4:	461e      	mov	r6, r3
    38e6:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    38e8:	b981      	cbnz	r1, 390c <ids_print+0x30>
	int total = 0;
    38ea:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    38ec:	b12e      	cbz	r6, 38fa <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    38ee:	4632      	mov	r2, r6
    38f0:	4910      	ldr	r1, [pc, #64]	; (3934 <ids_print+0x58>)
    38f2:	4628      	mov	r0, r5
    38f4:	f7ff ff82 	bl	37fc <print_formatted>
    38f8:	4404      	add	r4, r0
	}

	if (source) {
    38fa:	b1b7      	cbz	r7, 392a <ids_print+0x4e>
		total += print_formatted(output,
    38fc:	f1b8 0f00 	cmp.w	r8, #0
    3900:	d00d      	beq.n	391e <ids_print+0x42>
				(func_on &&
    3902:	9b07      	ldr	r3, [sp, #28]
    3904:	2b04      	cmp	r3, #4
    3906:	d013      	beq.n	3930 <ids_print+0x54>
		total += print_formatted(output,
    3908:	490b      	ldr	r1, [pc, #44]	; (3938 <ids_print+0x5c>)
    390a:	e009      	b.n	3920 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    390c:	4b0b      	ldr	r3, [pc, #44]	; (393c <ids_print+0x60>)
    390e:	9a07      	ldr	r2, [sp, #28]
    3910:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3914:	490a      	ldr	r1, [pc, #40]	; (3940 <ids_print+0x64>)
    3916:	f7ff ff71 	bl	37fc <print_formatted>
    391a:	4604      	mov	r4, r0
    391c:	e7e6      	b.n	38ec <ids_print+0x10>
		total += print_formatted(output,
    391e:	4906      	ldr	r1, [pc, #24]	; (3938 <ids_print+0x5c>)
    3920:	463a      	mov	r2, r7
    3922:	4628      	mov	r0, r5
    3924:	f7ff ff6a 	bl	37fc <print_formatted>
    3928:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    392a:	4620      	mov	r0, r4
    392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3930:	4904      	ldr	r1, [pc, #16]	; (3944 <ids_print+0x68>)
    3932:	e7f5      	b.n	3920 <ids_print+0x44>
    3934:	000144ac 	.word	0x000144ac
    3938:	0001449c 	.word	0x0001449c
    393c:	00014594 	.word	0x00014594
    3940:	000144a4 	.word	0x000144a4
    3944:	00014498 	.word	0x00014498

00003948 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    3948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    394c:	b085      	sub	sp, #20
    394e:	4605      	mov	r5, r0
    3950:	460c      	mov	r4, r1
    3952:	4616      	mov	r6, r2
    3954:	9303      	str	r3, [sp, #12]
    3956:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    395a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    395e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3962:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3966:	f00d f88e 	bl	10a86 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    396a:	b1d8      	cbz	r0, 39a4 <prefix_print+0x5c>
    396c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    396e:	4912      	ldr	r1, [pc, #72]	; (39b8 <prefix_print+0x70>)
    3970:	4628      	mov	r0, r5
    3972:	f7ff ff43 	bl	37fc <print_formatted>
    3976:	4607      	mov	r7, r0
	}

	if (stamp) {
    3978:	f1bb 0f00 	cmp.w	fp, #0
    397c:	d114      	bne.n	39a8 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    397e:	4642      	mov	r2, r8
    3980:	4651      	mov	r1, sl
    3982:	4628      	mov	r0, r5
    3984:	f00d f8c4 	bl	10b10 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    3988:	f8cd 8004 	str.w	r8, [sp, #4]
    398c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    398e:	9300      	str	r3, [sp, #0]
    3990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3992:	4632      	mov	r2, r6
    3994:	4649      	mov	r1, r9
    3996:	4628      	mov	r0, r5
    3998:	f7ff ffa0 	bl	38dc <ids_print>

	return length;
}
    399c:	4438      	add	r0, r7
    399e:	b005      	add	sp, #20
    39a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    39a4:	2700      	movs	r7, #0
    39a6:	e7e7      	b.n	3978 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    39a8:	9a03      	ldr	r2, [sp, #12]
    39aa:	4621      	mov	r1, r4
    39ac:	4628      	mov	r0, r5
    39ae:	f7ff ff39 	bl	3824 <timestamp_print>
    39b2:	4407      	add	r7, r0
    39b4:	e7e3      	b.n	397e <prefix_print+0x36>
    39b6:	bf00      	nop
    39b8:	000144b0 	.word	0x000144b0

000039bc <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    39bc:	f011 0f10 	tst.w	r1, #16
    39c0:	d10b      	bne.n	39da <newline_print+0x1e>
{
    39c2:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    39c4:	f011 0f20 	tst.w	r1, #32
    39c8:	d003      	beq.n	39d2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    39ca:	4904      	ldr	r1, [pc, #16]	; (39dc <newline_print+0x20>)
    39cc:	f7ff ff16 	bl	37fc <print_formatted>
}
    39d0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    39d2:	4903      	ldr	r1, [pc, #12]	; (39e0 <newline_print+0x24>)
    39d4:	f7ff ff12 	bl	37fc <print_formatted>
    39d8:	e7fa      	b.n	39d0 <newline_print+0x14>
    39da:	4770      	bx	lr
    39dc:	00014dc8 	.word	0x00014dc8
    39e0:	00016d64 	.word	0x00016d64

000039e4 <hexdump_line_print>:
{
    39e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39e8:	4605      	mov	r5, r0
    39ea:	460f      	mov	r7, r1
    39ec:	4616      	mov	r6, r2
    39ee:	4698      	mov	r8, r3
	newline_print(output, flags);
    39f0:	9906      	ldr	r1, [sp, #24]
    39f2:	f7ff ffe3 	bl	39bc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    39f6:	2400      	movs	r4, #0
    39f8:	4544      	cmp	r4, r8
    39fa:	da05      	bge.n	3a08 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    39fc:	4923      	ldr	r1, [pc, #140]	; (3a8c <hexdump_line_print+0xa8>)
    39fe:	4628      	mov	r0, r5
    3a00:	f7ff fefc 	bl	37fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3a04:	3401      	adds	r4, #1
    3a06:	e7f7      	b.n	39f8 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a08:	2400      	movs	r4, #0
    3a0a:	e009      	b.n	3a20 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    3a0c:	491f      	ldr	r1, [pc, #124]	; (3a8c <hexdump_line_print+0xa8>)
    3a0e:	4628      	mov	r0, r5
    3a10:	f7ff fef4 	bl	37fc <print_formatted>
    3a14:	e00b      	b.n	3a2e <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    3a16:	491e      	ldr	r1, [pc, #120]	; (3a90 <hexdump_line_print+0xac>)
    3a18:	4628      	mov	r0, r5
    3a1a:	f7ff feef 	bl	37fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a1e:	3401      	adds	r4, #1
    3a20:	2c0f      	cmp	r4, #15
    3a22:	dc0c      	bgt.n	3a3e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3a24:	2c00      	cmp	r4, #0
    3a26:	dd02      	ble.n	3a2e <hexdump_line_print+0x4a>
    3a28:	f014 0f07 	tst.w	r4, #7
    3a2c:	d0ee      	beq.n	3a0c <hexdump_line_print+0x28>
		if (i < length) {
    3a2e:	42b4      	cmp	r4, r6
    3a30:	d2f1      	bcs.n	3a16 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    3a32:	5d3a      	ldrb	r2, [r7, r4]
    3a34:	4917      	ldr	r1, [pc, #92]	; (3a94 <hexdump_line_print+0xb0>)
    3a36:	4628      	mov	r0, r5
    3a38:	f7ff fee0 	bl	37fc <print_formatted>
    3a3c:	e7ef      	b.n	3a1e <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    3a3e:	4916      	ldr	r1, [pc, #88]	; (3a98 <hexdump_line_print+0xb4>)
    3a40:	4628      	mov	r0, r5
    3a42:	f7ff fedb 	bl	37fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a46:	2400      	movs	r4, #0
    3a48:	e009      	b.n	3a5e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    3a4a:	4910      	ldr	r1, [pc, #64]	; (3a8c <hexdump_line_print+0xa8>)
    3a4c:	4628      	mov	r0, r5
    3a4e:	f7ff fed5 	bl	37fc <print_formatted>
    3a52:	e00b      	b.n	3a6c <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    3a54:	4911      	ldr	r1, [pc, #68]	; (3a9c <hexdump_line_print+0xb8>)
    3a56:	4628      	mov	r0, r5
    3a58:	f7ff fed0 	bl	37fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a5c:	3401      	adds	r4, #1
    3a5e:	2c0f      	cmp	r4, #15
    3a60:	dc12      	bgt.n	3a88 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    3a62:	2c00      	cmp	r4, #0
    3a64:	dd02      	ble.n	3a6c <hexdump_line_print+0x88>
    3a66:	f014 0f07 	tst.w	r4, #7
    3a6a:	d0ee      	beq.n	3a4a <hexdump_line_print+0x66>
		if (i < length) {
    3a6c:	42b4      	cmp	r4, r6
    3a6e:	d206      	bcs.n	3a7e <hexdump_line_print+0x9a>
			char c = (char)data[i];
    3a70:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    3a72:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    3a76:	2b5e      	cmp	r3, #94	; 0x5e
    3a78:	d9ec      	bls.n	3a54 <hexdump_line_print+0x70>
    3a7a:	222e      	movs	r2, #46	; 0x2e
    3a7c:	e7ea      	b.n	3a54 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    3a7e:	4903      	ldr	r1, [pc, #12]	; (3a8c <hexdump_line_print+0xa8>)
    3a80:	4628      	mov	r0, r5
    3a82:	f7ff febb 	bl	37fc <print_formatted>
    3a86:	e7e9      	b.n	3a5c <hexdump_line_print+0x78>
}
    3a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a8c:	000144a8 	.word	0x000144a8
    3a90:	000144bc 	.word	0x000144bc
    3a94:	000144b4 	.word	0x000144b4
    3a98:	000144c0 	.word	0x000144c0
    3a9c:	000144c4 	.word	0x000144c4

00003aa0 <out_func>:
{
    3aa0:	b538      	push	{r3, r4, r5, lr}
    3aa2:	4605      	mov	r5, r0
    3aa4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    3aa6:	684b      	ldr	r3, [r1, #4]
    3aa8:	681a      	ldr	r2, [r3, #0]
    3aaa:	68cb      	ldr	r3, [r1, #12]
    3aac:	429a      	cmp	r2, r3
    3aae:	d010      	beq.n	3ad2 <out_func+0x32>
	idx = atomic_inc(&out_ctx->control_block->offset);
    3ab0:	6863      	ldr	r3, [r4, #4]
    3ab2:	e8d3 2fef 	ldaex	r2, [r3]
    3ab6:	1c51      	adds	r1, r2, #1
    3ab8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3abc:	2800      	cmp	r0, #0
    3abe:	d1f8      	bne.n	3ab2 <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
    3ac0:	68a3      	ldr	r3, [r4, #8]
    3ac2:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    3ac4:	6863      	ldr	r3, [r4, #4]
    3ac6:	681a      	ldr	r2, [r3, #0]
    3ac8:	68e3      	ldr	r3, [r4, #12]
    3aca:	429a      	cmp	r2, r3
    3acc:	d805      	bhi.n	3ada <out_func+0x3a>
}
    3ace:	2000      	movs	r0, #0
    3ad0:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    3ad2:	4608      	mov	r0, r1
    3ad4:	f00d f84f 	bl	10b76 <log_output_flush>
    3ad8:	e7ea      	b.n	3ab0 <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    3ada:	4c06      	ldr	r4, [pc, #24]	; (3af4 <out_func+0x54>)
    3adc:	2379      	movs	r3, #121	; 0x79
    3ade:	4622      	mov	r2, r4
    3ae0:	4905      	ldr	r1, [pc, #20]	; (3af8 <out_func+0x58>)
    3ae2:	4806      	ldr	r0, [pc, #24]	; (3afc <out_func+0x5c>)
    3ae4:	f00c fe28 	bl	10738 <assert_print>
    3ae8:	2179      	movs	r1, #121	; 0x79
    3aea:	4620      	mov	r0, r4
    3aec:	f00c fe1d 	bl	1072a <assert_post_action>
    3af0:	e7ed      	b.n	3ace <out_func+0x2e>
    3af2:	bf00      	nop
    3af4:	000144c8 	.word	0x000144c8
    3af8:	000144f8 	.word	0x000144f8
    3afc:	00013d44 	.word	0x00013d44

00003b00 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    3b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b04:	b084      	sub	sp, #16
    3b06:	4604      	mov	r4, r0
    3b08:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    3b0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3b0e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3b10:	b99d      	cbnz	r5, 3b3a <log_output_process+0x3a>
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
    3b12:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    3b16:	b147      	cbz	r7, 3b2a <log_output_process+0x2a>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3b18:	b9cd      	cbnz	r5, 3b4e <log_output_process+0x4e>
    3b1a:	481c      	ldr	r0, [pc, #112]	; (3b8c <log_output_process+0x8c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3b1c:	463b      	mov	r3, r7
    3b1e:	4622      	mov	r2, r4
    3b20:	491b      	ldr	r1, [pc, #108]	; (3b90 <log_output_process+0x90>)
    3b22:	f00c f8f8 	bl	fd16 <cbpprintf_external>
				    (void *)output, (void *)package);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    3b26:	2800      	cmp	r0, #0
    3b28:	db13      	blt.n	3b52 <log_output_process+0x52>
	}

	if (data_len) {
    3b2a:	bb06      	cbnz	r6, 3b6e <log_output_process+0x6e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    3b2c:	bb45      	cbnz	r5, 3b80 <log_output_process+0x80>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3b2e:	4620      	mov	r0, r4
    3b30:	f00d f821 	bl	10b76 <log_output_flush>
}
    3b34:	b004      	add	sp, #16
    3b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    3b3a:	9502      	str	r5, [sp, #8]
    3b3c:	9301      	str	r3, [sp, #4]
    3b3e:	9200      	str	r2, [sp, #0]
    3b40:	460b      	mov	r3, r1
    3b42:	2200      	movs	r2, #0
    3b44:	990e      	ldr	r1, [sp, #56]	; 0x38
    3b46:	f7ff feff 	bl	3948 <prefix_print>
    3b4a:	4680      	mov	r8, r0
    3b4c:	e7e3      	b.n	3b16 <log_output_process+0x16>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3b4e:	4811      	ldr	r0, [pc, #68]	; (3b94 <log_output_process+0x94>)
    3b50:	e7e4      	b.n	3b1c <log_output_process+0x1c>
		__ASSERT_NO_MSG(err >= 0);
    3b52:	4f11      	ldr	r7, [pc, #68]	; (3b98 <log_output_process+0x98>)
    3b54:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
    3b58:	463a      	mov	r2, r7
    3b5a:	4910      	ldr	r1, [pc, #64]	; (3b9c <log_output_process+0x9c>)
    3b5c:	4810      	ldr	r0, [pc, #64]	; (3ba0 <log_output_process+0xa0>)
    3b5e:	f00c fdeb 	bl	10738 <assert_print>
    3b62:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    3b66:	4638      	mov	r0, r7
    3b68:	f00c fddf 	bl	1072a <assert_post_action>
    3b6c:	e7dd      	b.n	3b2a <log_output_process+0x2a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    3b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3b70:	9300      	str	r3, [sp, #0]
    3b72:	4643      	mov	r3, r8
    3b74:	4632      	mov	r2, r6
    3b76:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b78:	4620      	mov	r0, r4
    3b7a:	f00c ffe1 	bl	10b40 <log_msg_hexdump>
    3b7e:	e7d5      	b.n	3b2c <log_output_process+0x2c>
		postfix_print(output, flags, level);
    3b80:	462a      	mov	r2, r5
    3b82:	990e      	ldr	r1, [sp, #56]	; 0x38
    3b84:	4620      	mov	r0, r4
    3b86:	f00c ffcf 	bl	10b28 <postfix_print>
    3b8a:	e7d0      	b.n	3b2e <log_output_process+0x2e>
    3b8c:	00010b91 	.word	0x00010b91
    3b90:	00010b01 	.word	0x00010b01
    3b94:	00003aa1 	.word	0x00003aa1
    3b98:	000144c8 	.word	0x000144c8
    3b9c:	00014528 	.word	0x00014528
    3ba0:	00013d44 	.word	0x00013d44

00003ba4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ba8:	b087      	sub	sp, #28
    3baa:	4606      	mov	r6, r0
    3bac:	460c      	mov	r4, r1
    3bae:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3bb0:	f8d1 9008 	ldr.w	r9, [r1, #8]
	return msg->hdr.desc.level;
    3bb4:	880f      	ldrh	r7, [r1, #0]
    3bb6:	f3c7 1782 	ubfx	r7, r7, #6, #3
	return msg->hdr.source;
    3bba:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    3bbc:	7808      	ldrb	r0, [r1, #0]
    3bbe:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    3bc2:	b133      	cbz	r3, 3bd2 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3bc4:	4911      	ldr	r1, [pc, #68]	; (3c0c <log_output_msg_process+0x68>)
    3bc6:	1a59      	subs	r1, r3, r1
    3bc8:	f341 01cf 	sbfx	r1, r1, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3bcc:	2900      	cmp	r1, #0
    3bce:	da19      	bge.n	3c04 <log_output_msg_process+0x60>
    3bd0:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3bd2:	4621      	mov	r1, r4
    3bd4:	f851 5b10 	ldr.w	r5, [r1], #16
    3bd8:	f3c5 2549 	ubfx	r5, r5, #9, #10
	*len = msg->hdr.desc.data_len;
    3bdc:	8862      	ldrh	r2, [r4, #2]
    3bde:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3be2:	1948      	adds	r0, r1, r5
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    3be4:	b905      	cbnz	r5, 3be8 <log_output_msg_process+0x44>
    3be6:	2100      	movs	r1, #0
    3be8:	f8cd 8010 	str.w	r8, [sp, #16]
    3bec:	9203      	str	r2, [sp, #12]
    3bee:	9002      	str	r0, [sp, #8]
    3bf0:	9101      	str	r1, [sp, #4]
    3bf2:	9700      	str	r7, [sp, #0]
    3bf4:	2200      	movs	r2, #0
    3bf6:	4649      	mov	r1, r9
    3bf8:	4630      	mov	r0, r6
    3bfa:	f7ff ff81 	bl	3b00 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    3bfe:	b007      	add	sp, #28
    3c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3c04:	f7ff fcf4 	bl	35f0 <log_source_name_get>
    3c08:	4603      	mov	r3, r0
    3c0a:	e7e2      	b.n	3bd2 <log_output_msg_process+0x2e>
    3c0c:	00013a6c 	.word	0x00013a6c

00003c10 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3c10:	b570      	push	{r4, r5, r6, lr}
    3c12:	b082      	sub	sp, #8
    3c14:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    3c16:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3c18:	f242 730f 	movw	r3, #9999	; 0x270f
    3c1c:	428b      	cmp	r3, r1
    3c1e:	bf28      	it	cs
    3c20:	460b      	movcs	r3, r1
    3c22:	4a0e      	ldr	r2, [pc, #56]	; (3c5c <log_output_dropped_process+0x4c>)
    3c24:	2105      	movs	r1, #5
    3c26:	4668      	mov	r0, sp
    3c28:	f00c f8e7 	bl	fdfa <snprintk>
    3c2c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    3c2e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3c30:	685b      	ldr	r3, [r3, #4]
    3c32:	220b      	movs	r2, #11
    3c34:	490a      	ldr	r1, [pc, #40]	; (3c60 <log_output_dropped_process+0x50>)
    3c36:	4628      	mov	r0, r5
    3c38:	f00c ff55 	bl	10ae6 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    3c3c:	6863      	ldr	r3, [r4, #4]
    3c3e:	685b      	ldr	r3, [r3, #4]
    3c40:	4632      	mov	r2, r6
    3c42:	4669      	mov	r1, sp
    3c44:	4628      	mov	r0, r5
    3c46:	f00c ff4e 	bl	10ae6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    3c4a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3c4c:	685b      	ldr	r3, [r3, #4]
    3c4e:	221b      	movs	r2, #27
    3c50:	4904      	ldr	r1, [pc, #16]	; (3c64 <log_output_dropped_process+0x54>)
    3c52:	4628      	mov	r0, r5
    3c54:	f00c ff47 	bl	10ae6 <buffer_write>
}
    3c58:	b002      	add	sp, #8
    3c5a:	bd70      	pop	{r4, r5, r6, pc}
    3c5c:	00014534 	.word	0x00014534
    3c60:	00014554 	.word	0x00014554
    3c64:	00014538 	.word	0x00014538

00003c68 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3c68:	4b07      	ldr	r3, [pc, #28]	; (3c88 <log_output_timestamp_freq_set+0x20>)
    3c6a:	2201      	movs	r2, #1
    3c6c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3c6e:	e004      	b.n	3c7a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3c70:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3c72:	4a05      	ldr	r2, [pc, #20]	; (3c88 <log_output_timestamp_freq_set+0x20>)
    3c74:	6813      	ldr	r3, [r2, #0]
    3c76:	005b      	lsls	r3, r3, #1
    3c78:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3c7a:	4b04      	ldr	r3, [pc, #16]	; (3c8c <log_output_timestamp_freq_set+0x24>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d8f7      	bhi.n	3c70 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <log_output_timestamp_freq_set+0x28>)
    3c82:	6018      	str	r0, [r3, #0]
}
    3c84:	4770      	bx	lr
    3c86:	bf00      	nop
    3c88:	20001aa8 	.word	0x20001aa8
    3c8c:	000f4240 	.word	0x000f4240
    3c90:	20001aac 	.word	0x20001aac

00003c94 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3c94:	4b03      	ldr	r3, [pc, #12]	; (3ca4 <log_backend_rtt_init+0x10>)
    3c96:	2201      	movs	r2, #1
    3c98:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3c9a:	4b03      	ldr	r3, [pc, #12]	; (3ca8 <log_backend_rtt_init+0x14>)
    3c9c:	4a03      	ldr	r2, [pc, #12]	; (3cac <log_backend_rtt_init+0x18>)
    3c9e:	601a      	str	r2, [r3, #0]
}
    3ca0:	4770      	bx	lr
    3ca2:	bf00      	nop
    3ca4:	2000296e 	.word	0x2000296e
    3ca8:	20001ad8 	.word	0x20001ad8
    3cac:	20001adc 	.word	0x20001adc

00003cb0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3cb0:	4b01      	ldr	r3, [pc, #4]	; (3cb8 <format_set+0x8>)
    3cb2:	6019      	str	r1, [r3, #0]
	return 0;
}
    3cb4:	2000      	movs	r0, #0
    3cb6:	4770      	bx	lr
    3cb8:	20001ac4 	.word	0x20001ac4

00003cbc <on_failed_write>:
{
    3cbc:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3cbe:	b918      	cbnz	r0, 3cc8 <on_failed_write+0xc>
		host_present = false;
    3cc0:	4b07      	ldr	r3, [pc, #28]	; (3ce0 <on_failed_write+0x24>)
    3cc2:	2200      	movs	r2, #0
    3cc4:	701a      	strb	r2, [r3, #0]
}
    3cc6:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <on_failed_write+0x28>)
    3cca:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3ccc:	b123      	cbz	r3, 3cd8 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    3cce:	f241 3088 	movw	r0, #5000	; 0x1388
    3cd2:	f00f fc4b 	bl	1356c <z_impl_k_busy_wait>
}
    3cd6:	e7f6      	b.n	3cc6 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    3cd8:	2005      	movs	r0, #5
    3cda:	f00c ff67 	bl	10bac <k_msleep>
}
    3cde:	e7f2      	b.n	3cc6 <on_failed_write+0xa>
    3ce0:	2000296e 	.word	0x2000296e
    3ce4:	2000296f 	.word	0x2000296f

00003ce8 <on_write>:
{
    3ce8:	b538      	push	{r3, r4, r5, lr}
    3cea:	4604      	mov	r4, r0
	host_present = true;
    3cec:	4b0a      	ldr	r3, [pc, #40]	; (3d18 <on_write+0x30>)
    3cee:	2201      	movs	r2, #1
    3cf0:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3cf2:	4b0a      	ldr	r3, [pc, #40]	; (3d1c <on_write+0x34>)
    3cf4:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3cf6:	b92b      	cbnz	r3, 3d04 <on_write+0x1c>
}
    3cf8:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3cfa:	1e65      	subs	r5, r4, #1
    3cfc:	4620      	mov	r0, r4
    3cfe:	f7ff ffdd 	bl	3cbc <on_failed_write>
    3d02:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3d04:	2000      	movs	r0, #0
    3d06:	f008 f8eb 	bl	bee0 <SEGGER_RTT_HasDataUp>
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d0f4      	beq.n	3cf8 <on_write+0x10>
    3d0e:	4b02      	ldr	r3, [pc, #8]	; (3d18 <on_write+0x30>)
    3d10:	781b      	ldrb	r3, [r3, #0]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d1f1      	bne.n	3cfa <on_write+0x12>
    3d16:	e7ef      	b.n	3cf8 <on_write+0x10>
    3d18:	2000296e 	.word	0x2000296e
    3d1c:	2000296f 	.word	0x2000296f

00003d20 <data_out_block_mode>:
{
    3d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d22:	4606      	mov	r6, r0
    3d24:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3d26:	2704      	movs	r7, #4
    3d28:	e00d      	b.n	3d46 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3d2a:	462a      	mov	r2, r5
    3d2c:	4631      	mov	r1, r6
    3d2e:	2000      	movs	r0, #0
    3d30:	f008 f83c 	bl	bdac <SEGGER_RTT_WriteSkipNoLock>
    3d34:	4604      	mov	r4, r0
    3d36:	e014      	b.n	3d62 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    3d38:	4638      	mov	r0, r7
    3d3a:	f7ff ffd5 	bl	3ce8 <on_write>
	} while ((ret == 0) && host_present);
    3d3e:	b9dc      	cbnz	r4, 3d78 <data_out_block_mode+0x58>
    3d40:	4b11      	ldr	r3, [pc, #68]	; (3d88 <data_out_block_mode+0x68>)
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	b1c3      	cbz	r3, 3d78 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3d46:	4b11      	ldr	r3, [pc, #68]	; (3d8c <data_out_block_mode+0x6c>)
    3d48:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d1ed      	bne.n	3d2a <data_out_block_mode+0xa>
			RTT_LOCK();
    3d4e:	f008 f8d7 	bl	bf00 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3d52:	462a      	mov	r2, r5
    3d54:	4631      	mov	r1, r6
    3d56:	2000      	movs	r0, #0
    3d58:	f008 f828 	bl	bdac <SEGGER_RTT_WriteSkipNoLock>
    3d5c:	4604      	mov	r4, r0
			RTT_UNLOCK();
    3d5e:	f008 f8db 	bl	bf18 <zephyr_rtt_mutex_unlock>
		if (ret) {
    3d62:	2c00      	cmp	r4, #0
    3d64:	d1e8      	bne.n	3d38 <data_out_block_mode+0x18>
		} else if (host_present) {
    3d66:	4b08      	ldr	r3, [pc, #32]	; (3d88 <data_out_block_mode+0x68>)
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d0e7      	beq.n	3d3e <data_out_block_mode+0x1e>
			retry_cnt--;
    3d6e:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3d70:	4638      	mov	r0, r7
    3d72:	f7ff ffa3 	bl	3cbc <on_failed_write>
    3d76:	e7e2      	b.n	3d3e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    3d78:	b914      	cbnz	r4, 3d80 <data_out_block_mode+0x60>
    3d7a:	4b03      	ldr	r3, [pc, #12]	; (3d88 <data_out_block_mode+0x68>)
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	b903      	cbnz	r3, 3d82 <data_out_block_mode+0x62>
    3d80:	462c      	mov	r4, r5
}
    3d82:	4620      	mov	r0, r4
    3d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d86:	bf00      	nop
    3d88:	2000296e 	.word	0x2000296e
    3d8c:	2000296f 	.word	0x2000296f

00003d90 <panic>:
{
    3d90:	b508      	push	{r3, lr}
	panic_mode = true;
    3d92:	4b03      	ldr	r3, [pc, #12]	; (3da0 <panic+0x10>)
    3d94:	2201      	movs	r2, #1
    3d96:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3d98:	4802      	ldr	r0, [pc, #8]	; (3da4 <panic+0x14>)
    3d9a:	f00c feec 	bl	10b76 <log_output_flush>
}
    3d9e:	bd08      	pop	{r3, pc}
    3da0:	2000296f 	.word	0x2000296f
    3da4:	000145d4 	.word	0x000145d4

00003da8 <dropped>:
{
    3da8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3daa:	4802      	ldr	r0, [pc, #8]	; (3db4 <dropped+0xc>)
    3dac:	f7ff ff30 	bl	3c10 <log_output_dropped_process>
}
    3db0:	bd08      	pop	{r3, pc}
    3db2:	bf00      	nop
    3db4:	000145d4 	.word	0x000145d4

00003db8 <process>:
{
    3db8:	b510      	push	{r4, lr}
    3dba:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3dbc:	4b04      	ldr	r3, [pc, #16]	; (3dd0 <process+0x18>)
    3dbe:	6818      	ldr	r0, [r3, #0]
    3dc0:	f7ff f9fa 	bl	31b8 <log_format_func_t_get>
    3dc4:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3dc6:	220f      	movs	r2, #15
    3dc8:	4621      	mov	r1, r4
    3dca:	4802      	ldr	r0, [pc, #8]	; (3dd4 <process+0x1c>)
    3dcc:	4798      	blx	r3
}
    3dce:	bd10      	pop	{r4, pc}
    3dd0:	20001ac4 	.word	0x20001ac4
    3dd4:	000145d4 	.word	0x000145d4

00003dd8 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    3dd8:	b500      	push	{lr}
    3dda:	b08f      	sub	sp, #60	; 0x3c
	const struct ipc_service_backend *backend;

	if (!instance) {
    3ddc:	b140      	cbz	r0, 3df0 <ipc_service_open_instance+0x18>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    3dde:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
    3de0:	b373      	cbz	r3, 3e40 <ipc_service_open_instance+0x68>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
    3de2:	681b      	ldr	r3, [r3, #0]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d053      	beq.n	3e90 <ipc_service_open_instance+0xb8>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
    3de8:	4798      	blx	r3
}
    3dea:	b00f      	add	sp, #60	; 0x3c
    3dec:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Invalid instance");
    3df0:	4b28      	ldr	r3, [pc, #160]	; (3e94 <ipc_service_open_instance+0xbc>)
    3df2:	930d      	str	r3, [sp, #52]	; 0x34
    3df4:	2302      	movs	r3, #2
    3df6:	f88d 3004 	strb.w	r3, [sp, #4]
    3dfa:	2300      	movs	r3, #0
    3dfc:	f88d 3005 	strb.w	r3, [sp, #5]
    3e00:	f88d 3006 	strb.w	r3, [sp, #6]
    3e04:	f88d 3007 	strb.w	r3, [sp, #7]
    3e08:	9a01      	ldr	r2, [sp, #4]
    3e0a:	920c      	str	r2, [sp, #48]	; 0x30
    3e0c:	4619      	mov	r1, r3
    3e0e:	f363 0100 	bfi	r1, r3, #0, #1
    3e12:	f363 0141 	bfi	r1, r3, #1, #1
    3e16:	f363 0182 	bfi	r1, r3, #2, #1
    3e1a:	f363 01c5 	bfi	r1, r3, #3, #3
    3e1e:	2201      	movs	r2, #1
    3e20:	f362 1188 	bfi	r1, r2, #6, #3
    3e24:	2208      	movs	r2, #8
    3e26:	f362 2152 	bfi	r1, r2, #9, #10
    3e2a:	f363 41de 	bfi	r1, r3, #19, #12
    3e2e:	f363 71df 	bfi	r1, r3, #31, #1
    3e32:	aa0c      	add	r2, sp, #48	; 0x30
    3e34:	4818      	ldr	r0, [pc, #96]	; (3e98 <ipc_service_open_instance+0xc0>)
    3e36:	f7ff fc17 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3e3a:	f06f 0015 	mvn.w	r0, #21
    3e3e:	e7d4      	b.n	3dea <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
    3e40:	4b16      	ldr	r3, [pc, #88]	; (3e9c <ipc_service_open_instance+0xc4>)
    3e42:	9307      	str	r3, [sp, #28]
    3e44:	2302      	movs	r3, #2
    3e46:	f88d 3004 	strb.w	r3, [sp, #4]
    3e4a:	2300      	movs	r3, #0
    3e4c:	f88d 3005 	strb.w	r3, [sp, #5]
    3e50:	f88d 3006 	strb.w	r3, [sp, #6]
    3e54:	f88d 3007 	strb.w	r3, [sp, #7]
    3e58:	9a01      	ldr	r2, [sp, #4]
    3e5a:	9206      	str	r2, [sp, #24]
    3e5c:	4619      	mov	r1, r3
    3e5e:	f363 0100 	bfi	r1, r3, #0, #1
    3e62:	f363 0141 	bfi	r1, r3, #1, #1
    3e66:	f363 0182 	bfi	r1, r3, #2, #1
    3e6a:	f363 01c5 	bfi	r1, r3, #3, #3
    3e6e:	2201      	movs	r2, #1
    3e70:	f362 1188 	bfi	r1, r2, #6, #3
    3e74:	2208      	movs	r2, #8
    3e76:	f362 2152 	bfi	r1, r2, #9, #10
    3e7a:	f363 41de 	bfi	r1, r3, #19, #12
    3e7e:	f363 71df 	bfi	r1, r3, #31, #1
    3e82:	aa06      	add	r2, sp, #24
    3e84:	4804      	ldr	r0, [pc, #16]	; (3e98 <ipc_service_open_instance+0xc0>)
    3e86:	f7ff fbef 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EIO;
    3e8a:	f06f 0004 	mvn.w	r0, #4
    3e8e:	e7ac      	b.n	3dea <ipc_service_open_instance+0x12>
		return 0;
    3e90:	2000      	movs	r0, #0
    3e92:	e7aa      	b.n	3dea <ipc_service_open_instance+0x12>
    3e94:	000145e4 	.word	0x000145e4
    3e98:	00013a8c 	.word	0x00013a8c
    3e9c:	000145f8 	.word	0x000145f8

00003ea0 <ipc_service_register_endpoint>:

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    3ea0:	b510      	push	{r4, lr}
    3ea2:	b08e      	sub	sp, #56	; 0x38
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    3ea4:	b168      	cbz	r0, 3ec2 <ipc_service_register_endpoint+0x22>
    3ea6:	4603      	mov	r3, r0
    3ea8:	b159      	cbz	r1, 3ec2 <ipc_service_register_endpoint+0x22>
    3eaa:	b152      	cbz	r2, 3ec2 <ipc_service_register_endpoint+0x22>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    3eac:	6880      	ldr	r0, [r0, #8]

	if (!backend || !backend->register_endpoint) {
    3eae:	b380      	cbz	r0, 3f12 <ipc_service_register_endpoint+0x72>
    3eb0:	6884      	ldr	r4, [r0, #8]
    3eb2:	b374      	cbz	r4, 3f12 <ipc_service_register_endpoint+0x72>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
    3eb4:	f841 3b04 	str.w	r3, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
    3eb8:	6884      	ldr	r4, [r0, #8]
    3eba:	4618      	mov	r0, r3
    3ebc:	47a0      	blx	r4
}
    3ebe:	b00e      	add	sp, #56	; 0x38
    3ec0:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid instance, endpoint or configuration");
    3ec2:	4b28      	ldr	r3, [pc, #160]	; (3f64 <ipc_service_register_endpoint+0xc4>)
    3ec4:	930d      	str	r3, [sp, #52]	; 0x34
    3ec6:	2302      	movs	r3, #2
    3ec8:	f88d 3004 	strb.w	r3, [sp, #4]
    3ecc:	2300      	movs	r3, #0
    3ece:	f88d 3005 	strb.w	r3, [sp, #5]
    3ed2:	f88d 3006 	strb.w	r3, [sp, #6]
    3ed6:	f88d 3007 	strb.w	r3, [sp, #7]
    3eda:	9a01      	ldr	r2, [sp, #4]
    3edc:	920c      	str	r2, [sp, #48]	; 0x30
    3ede:	4619      	mov	r1, r3
    3ee0:	f363 0100 	bfi	r1, r3, #0, #1
    3ee4:	f363 0141 	bfi	r1, r3, #1, #1
    3ee8:	f363 0182 	bfi	r1, r3, #2, #1
    3eec:	f363 01c5 	bfi	r1, r3, #3, #3
    3ef0:	2201      	movs	r2, #1
    3ef2:	f362 1188 	bfi	r1, r2, #6, #3
    3ef6:	2208      	movs	r2, #8
    3ef8:	f362 2152 	bfi	r1, r2, #9, #10
    3efc:	f363 41de 	bfi	r1, r3, #19, #12
    3f00:	f363 71df 	bfi	r1, r3, #31, #1
    3f04:	aa0c      	add	r2, sp, #48	; 0x30
    3f06:	4818      	ldr	r0, [pc, #96]	; (3f68 <ipc_service_register_endpoint+0xc8>)
    3f08:	f7ff fbae 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3f0c:	f06f 0015 	mvn.w	r0, #21
    3f10:	e7d5      	b.n	3ebe <ipc_service_register_endpoint+0x1e>
		LOG_ERR("Invalid backend configuration");
    3f12:	4b16      	ldr	r3, [pc, #88]	; (3f6c <ipc_service_register_endpoint+0xcc>)
    3f14:	9307      	str	r3, [sp, #28]
    3f16:	2302      	movs	r3, #2
    3f18:	f88d 3004 	strb.w	r3, [sp, #4]
    3f1c:	2300      	movs	r3, #0
    3f1e:	f88d 3005 	strb.w	r3, [sp, #5]
    3f22:	f88d 3006 	strb.w	r3, [sp, #6]
    3f26:	f88d 3007 	strb.w	r3, [sp, #7]
    3f2a:	9a01      	ldr	r2, [sp, #4]
    3f2c:	9206      	str	r2, [sp, #24]
    3f2e:	4619      	mov	r1, r3
    3f30:	f363 0100 	bfi	r1, r3, #0, #1
    3f34:	f363 0141 	bfi	r1, r3, #1, #1
    3f38:	f363 0182 	bfi	r1, r3, #2, #1
    3f3c:	f363 01c5 	bfi	r1, r3, #3, #3
    3f40:	2201      	movs	r2, #1
    3f42:	f362 1188 	bfi	r1, r2, #6, #3
    3f46:	2208      	movs	r2, #8
    3f48:	f362 2152 	bfi	r1, r2, #9, #10
    3f4c:	f363 41de 	bfi	r1, r3, #19, #12
    3f50:	f363 71df 	bfi	r1, r3, #31, #1
    3f54:	aa06      	add	r2, sp, #24
    3f56:	4804      	ldr	r0, [pc, #16]	; (3f68 <ipc_service_register_endpoint+0xc8>)
    3f58:	f7ff fb86 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EIO;
    3f5c:	f06f 0004 	mvn.w	r0, #4
    3f60:	e7ad      	b.n	3ebe <ipc_service_register_endpoint+0x1e>
    3f62:	bf00      	nop
    3f64:	00014618 	.word	0x00014618
    3f68:	00013a8c 	.word	0x00013a8c
    3f6c:	000145f8 	.word	0x000145f8

00003f70 <ipc_service_send>:

int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    3f70:	b510      	push	{r4, lr}
    3f72:	b094      	sub	sp, #80	; 0x50
	const struct ipc_service_backend *backend;

	if (!ept) {
    3f74:	b180      	cbz	r0, 3f98 <ipc_service_send+0x28>
    3f76:	4613      	mov	r3, r2
    3f78:	4684      	mov	ip, r0
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
    3f7a:	6800      	ldr	r0, [r0, #0]
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d033      	beq.n	3fe8 <ipc_service_send+0x78>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
    3f80:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
    3f82:	2a00      	cmp	r2, #0
    3f84:	d058      	beq.n	4038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    3f86:	6854      	ldr	r4, [r2, #4]
    3f88:	2c00      	cmp	r4, #0
    3f8a:	d055      	beq.n	4038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
    3f8c:	460a      	mov	r2, r1
    3f8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3f92:	47a0      	blx	r4
}
    3f94:	b014      	add	sp, #80	; 0x50
    3f96:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid endpoint");
    3f98:	4b3b      	ldr	r3, [pc, #236]	; (4088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    3f9a:	9313      	str	r3, [sp, #76]	; 0x4c
    3f9c:	2302      	movs	r3, #2
    3f9e:	f88d 3004 	strb.w	r3, [sp, #4]
    3fa2:	2300      	movs	r3, #0
    3fa4:	f88d 3005 	strb.w	r3, [sp, #5]
    3fa8:	f88d 3006 	strb.w	r3, [sp, #6]
    3fac:	f88d 3007 	strb.w	r3, [sp, #7]
    3fb0:	9a01      	ldr	r2, [sp, #4]
    3fb2:	9212      	str	r2, [sp, #72]	; 0x48
    3fb4:	4619      	mov	r1, r3
    3fb6:	f363 0100 	bfi	r1, r3, #0, #1
    3fba:	f363 0141 	bfi	r1, r3, #1, #1
    3fbe:	f363 0182 	bfi	r1, r3, #2, #1
    3fc2:	f363 01c5 	bfi	r1, r3, #3, #3
    3fc6:	2201      	movs	r2, #1
    3fc8:	f362 1188 	bfi	r1, r2, #6, #3
    3fcc:	2208      	movs	r2, #8
    3fce:	f362 2152 	bfi	r1, r2, #9, #10
    3fd2:	f363 41de 	bfi	r1, r3, #19, #12
    3fd6:	f363 71df 	bfi	r1, r3, #31, #1
    3fda:	aa12      	add	r2, sp, #72	; 0x48
    3fdc:	482b      	ldr	r0, [pc, #172]	; (408c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    3fde:	f7ff fb43 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3fe2:	f06f 0015 	mvn.w	r0, #21
    3fe6:	e7d5      	b.n	3f94 <ipc_service_send+0x24>
		LOG_ERR("Endpoint not registered\n");
    3fe8:	4b29      	ldr	r3, [pc, #164]	; (4090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    3fea:	930d      	str	r3, [sp, #52]	; 0x34
    3fec:	2302      	movs	r3, #2
    3fee:	f88d 3004 	strb.w	r3, [sp, #4]
    3ff2:	2300      	movs	r3, #0
    3ff4:	f88d 3005 	strb.w	r3, [sp, #5]
    3ff8:	f88d 3006 	strb.w	r3, [sp, #6]
    3ffc:	f88d 3007 	strb.w	r3, [sp, #7]
    4000:	9a01      	ldr	r2, [sp, #4]
    4002:	920c      	str	r2, [sp, #48]	; 0x30
    4004:	4619      	mov	r1, r3
    4006:	f363 0100 	bfi	r1, r3, #0, #1
    400a:	f363 0141 	bfi	r1, r3, #1, #1
    400e:	f363 0182 	bfi	r1, r3, #2, #1
    4012:	f363 01c5 	bfi	r1, r3, #3, #3
    4016:	2201      	movs	r2, #1
    4018:	f362 1188 	bfi	r1, r2, #6, #3
    401c:	2208      	movs	r2, #8
    401e:	f362 2152 	bfi	r1, r2, #9, #10
    4022:	f363 41de 	bfi	r1, r3, #19, #12
    4026:	f363 71df 	bfi	r1, r3, #31, #1
    402a:	aa0c      	add	r2, sp, #48	; 0x30
    402c:	4817      	ldr	r0, [pc, #92]	; (408c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    402e:	f7ff fb1b 	bl	3668 <z_impl_z_log_msg_static_create>
		return -ENOENT;
    4032:	f06f 0001 	mvn.w	r0, #1
    4036:	e7ad      	b.n	3f94 <ipc_service_send+0x24>
		LOG_ERR("Invalid backend configuration");
    4038:	4b16      	ldr	r3, [pc, #88]	; (4094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    403a:	9307      	str	r3, [sp, #28]
    403c:	2302      	movs	r3, #2
    403e:	f88d 3004 	strb.w	r3, [sp, #4]
    4042:	2300      	movs	r3, #0
    4044:	f88d 3005 	strb.w	r3, [sp, #5]
    4048:	f88d 3006 	strb.w	r3, [sp, #6]
    404c:	f88d 3007 	strb.w	r3, [sp, #7]
    4050:	9a01      	ldr	r2, [sp, #4]
    4052:	9206      	str	r2, [sp, #24]
    4054:	4619      	mov	r1, r3
    4056:	f363 0100 	bfi	r1, r3, #0, #1
    405a:	f363 0141 	bfi	r1, r3, #1, #1
    405e:	f363 0182 	bfi	r1, r3, #2, #1
    4062:	f363 01c5 	bfi	r1, r3, #3, #3
    4066:	2201      	movs	r2, #1
    4068:	f362 1188 	bfi	r1, r2, #6, #3
    406c:	2208      	movs	r2, #8
    406e:	f362 2152 	bfi	r1, r2, #9, #10
    4072:	f363 41de 	bfi	r1, r3, #19, #12
    4076:	f363 71df 	bfi	r1, r3, #31, #1
    407a:	aa06      	add	r2, sp, #24
    407c:	4803      	ldr	r0, [pc, #12]	; (408c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    407e:	f7ff faf3 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EIO;
    4082:	f06f 0004 	mvn.w	r0, #4
    4086:	e785      	b.n	3f94 <ipc_service_send+0x24>
    4088:	00014644 	.word	0x00014644
    408c:	00013a8c 	.word	0x00013a8c
    4090:	00014658 	.word	0x00014658
    4094:	000145f8 	.word	0x000145f8

00004098 <get_available_ept_slot>:

	return NULL;
}

static struct ipc_rpmsg_ept *get_available_ept_slot(struct ipc_rpmsg_instance *rpmsg_inst)
{
    4098:	b508      	push	{r3, lr}
	return get_ept_slot_with_name(rpmsg_inst, "");
    409a:	4902      	ldr	r1, [pc, #8]	; (40a4 <get_available_ept_slot+0xc>)
    409c:	f00c fe63 	bl	10d66 <get_ept_slot_with_name>
}
    40a0:	bd08      	pop	{r3, pc}
    40a2:	bf00      	nop
    40a4:	00014f84 	.word	0x00014f84

000040a8 <advertise_ept>:
	return false;
}

static void advertise_ept(struct ipc_rpmsg_instance *rpmsg_inst, struct ipc_rpmsg_ept *rpmsg_ept,
			  const char *name, uint32_t dest)
{
    40a8:	b530      	push	{r4, r5, lr}
    40aa:	b085      	sub	sp, #20
    40ac:	4604      	mov	r4, r0
    40ae:	460d      	mov	r5, r1
	struct rpmsg_device *rdev;
	int err;

	rdev = rpmsg_virtio_get_rpmsg_device(&rpmsg_inst->rvdev);

	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    40b0:	490b      	ldr	r1, [pc, #44]	; (40e0 <advertise_ept+0x38>)
    40b2:	9102      	str	r1, [sp, #8]
    40b4:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    40b8:	9101      	str	r1, [sp, #4]
    40ba:	9300      	str	r3, [sp, #0]
    40bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40c0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    40c4:	4628      	mov	r0, r5
    40c6:	f007 fb7d 	bl	b7c4 <rpmsg_create_ept>
			       dest, rpmsg_inst->cb, rpmsg_service_unbind);
	if (err != 0) {
    40ca:	b938      	cbnz	r0, 40dc <advertise_ept+0x34>
		return;
	}

	rpmsg_ept->bound = true;
    40cc:	2301      	movs	r3, #1
    40ce:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    40d2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    40d6:	b10b      	cbz	r3, 40dc <advertise_ept+0x34>
		rpmsg_inst->bound_cb(rpmsg_ept);
    40d8:	4628      	mov	r0, r5
    40da:	4798      	blx	r3
	}
}
    40dc:	b005      	add	sp, #20
    40de:	bd30      	pop	{r4, r5, pc}
    40e0:	00010dbf 	.word	0x00010dbf

000040e4 <send>:
	return 0;
}

static int send(const struct device *instance, void *token,
		const void *msg, size_t len)
{
    40e4:	b508      	push	{r3, lr}
    40e6:	4684      	mov	ip, r0
    40e8:	4608      	mov	r0, r1
    40ea:	4611      	mov	r1, r2
    40ec:	461a      	mov	r2, r3
	struct backend_data_t *data = instance->data;
    40ee:	f8dc 3010 	ldr.w	r3, [ip, #16]
	struct ipc_rpmsg_ept *rpmsg_ept;
	int ret;

	/* Instance is not ready */
	if (atomic_get(&data->state) != STATE_INITED) {
    40f2:	f503 735d 	add.w	r3, r3, #884	; 0x374
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    40f6:	e8d3 3faf 	lda	r3, [r3]
    40fa:	2b02      	cmp	r3, #2
    40fc:	d107      	bne.n	410e <send+0x2a>
		return -EBUSY;
	}

	/* Empty message is not allowed */
	if (len == 0) {
    40fe:	b14a      	cbz	r2, 4114 <send+0x30>
	}

	rpmsg_ept = (struct ipc_rpmsg_ept *) token;

	/* Endpoint is not registered with instance */
	if (!rpmsg_ept) {
    4100:	b158      	cbz	r0, 411a <send+0x36>
		return -ENOENT;
	}

	ret = rpmsg_send(&rpmsg_ept->ep, msg, len);
    4102:	f00c ff15 	bl	10f30 <rpmsg_send>

	/* No buffers available */
	if (ret == RPMSG_ERR_NO_BUFF) {
    4106:	4b08      	ldr	r3, [pc, #32]	; (4128 <send+0x44>)
    4108:	4298      	cmp	r0, r3
    410a:	d009      	beq.n	4120 <send+0x3c>
		return -ENOMEM;
	}

	return ret;
}
    410c:	bd08      	pop	{r3, pc}
		return -EBUSY;
    410e:	f06f 000f 	mvn.w	r0, #15
    4112:	e7fb      	b.n	410c <send+0x28>
		return -EBADMSG;
    4114:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    4118:	e7f8      	b.n	410c <send+0x28>
		return -ENOENT;
    411a:	f06f 0001 	mvn.w	r0, #1
    411e:	e7f5      	b.n	410c <send+0x28>
		return -ENOMEM;
    4120:	f06f 000b 	mvn.w	r0, #11
    4124:	e7f2      	b.n	410c <send+0x28>
    4126:	bf00      	nop
    4128:	fffff82e 	.word	0xfffff82e

0000412c <bound_cb>:
{
    412c:	b510      	push	{r4, lr}
    412e:	4604      	mov	r4, r0
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);
    4130:	2200      	movs	r2, #0
    4132:	4904      	ldr	r1, [pc, #16]	; (4144 <bound_cb+0x18>)
    4134:	f00c fefc 	bl	10f30 <rpmsg_send>
	if (ept->cb->bound) {
    4138:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	b10b      	cbz	r3, 4142 <bound_cb+0x16>
		ept->cb->bound(ept->priv);
    413e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4140:	4798      	blx	r3
}
    4142:	bd10      	pop	{r4, pc}
    4144:	00014f84 	.word	0x00014f84

00004148 <mbox_init>:
{
    4148:	b5f0      	push	{r4, r5, r6, r7, lr}
    414a:	b083      	sub	sp, #12
	const struct backend_config_t *conf = instance->config;
    414c:	6844      	ldr	r4, [r0, #4]
	struct backend_data_t *data = instance->data;
    414e:	6905      	ldr	r5, [r0, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    4150:	69e3      	ldr	r3, [r4, #28]
    4152:	2b01      	cmp	r3, #1
    4154:	d01f      	beq.n	4196 <mbox_init+0x4e>
						   K_PRIO_PREEMPT(conf->wq_prio);
    4156:	6a27      	ldr	r7, [r4, #32]
	k_work_queue_init(&data->mbox_wq);
    4158:	f505 7628 	add.w	r6, r5, #672	; 0x2a0
    415c:	4630      	mov	r0, r6
    415e:	f009 f9dd 	bl	d51c <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    4162:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4164:	2300      	movs	r3, #0
    4166:	9300      	str	r3, [sp, #0]
    4168:	463b      	mov	r3, r7
    416a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    416e:	490e      	ldr	r1, [pc, #56]	; (41a8 <mbox_init+0x60>)
    4170:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    4174:	4630      	mov	r0, r6
    4176:	f009 f9ef 	bl	d558 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    417a:	490c      	ldr	r1, [pc, #48]	; (41ac <mbox_init+0x64>)
    417c:	f505 7024 	add.w	r0, r5, #656	; 0x290
    4180:	f009 f93a 	bl	d3f8 <k_work_init>
	err = mbox_register_callback(&conf->mbox_rx, mbox_callback, data);
    4184:	3414      	adds	r4, #20
    4186:	462a      	mov	r2, r5
    4188:	4909      	ldr	r1, [pc, #36]	; (41b0 <mbox_init+0x68>)
    418a:	4620      	mov	r0, r4
    418c:	f00c fd31 	bl	10bf2 <mbox_register_callback>
	if (err != 0) {
    4190:	b120      	cbz	r0, 419c <mbox_init+0x54>
}
    4192:	b003      	add	sp, #12
    4194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    4196:	6a27      	ldr	r7, [r4, #32]
    4198:	3f10      	subs	r7, #16
    419a:	e7dd      	b.n	4158 <mbox_init+0x10>
    419c:	2101      	movs	r1, #1
    419e:	4620      	mov	r0, r4
    41a0:	f00c fd36 	bl	10c10 <z_impl_mbox_set_enabled>
	return mbox_set_enabled(&conf->mbox_rx, 1);
    41a4:	e7f5      	b.n	4192 <mbox_init+0x4a>
    41a6:	bf00      	nop
    41a8:	20003978 	.word	0x20003978
    41ac:	00011015 	.word	0x00011015
    41b0:	00011005 	.word	0x00011005

000041b4 <open>:

	return rpmsg_send_nocopy(&rpmsg_ept->ep, msg, len);
}

static int open(const struct device *instance)
{
    41b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41b8:	b085      	sub	sp, #20
    41ba:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
    41bc:	6846      	ldr	r6, [r0, #4]
	struct backend_data_t *data = instance->data;
    41be:	6905      	ldr	r5, [r0, #16]
	struct ipc_rpmsg_instance *rpmsg_inst;
	struct rpmsg_device *rdev;
	int err;

	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    41c0:	f505 795d 	add.w	r9, r5, #884	; 0x374
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    41c4:	2301      	movs	r3, #1
    41c6:	e8d9 2fef 	ldaex	r2, [r9]
    41ca:	2a00      	cmp	r2, #0
    41cc:	d103      	bne.n	41d6 <open+0x22>
    41ce:	e8c9 3fe1 	stlex	r1, r3, [r9]
    41d2:	2900      	cmp	r1, #0
    41d4:	d1f7      	bne.n	41c6 <open+0x12>
    41d6:	d152      	bne.n	427e <open+0xca>
		return -EALREADY;
	}

	err = vr_shm_configure(&data->vr, conf);
    41d8:	f505 78d4 	add.w	r8, r5, #424	; 0x1a8
    41dc:	4631      	mov	r1, r6
    41de:	4640      	mov	r0, r8
    41e0:	f00c feca 	bl	10f78 <vr_shm_configure>
	if (err != 0) {
    41e4:	4607      	mov	r7, r0
    41e6:	b150      	cbz	r0, 41fe <open+0x4a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    41e8:	2300      	movs	r3, #0
    41ea:	e8d9 2fef 	ldaex	r2, [r9]
    41ee:	e8c9 3fe1 	stlex	r1, r3, [r9]
    41f2:	2900      	cmp	r1, #0
    41f4:	d1f9      	bne.n	41ea <open+0x36>
error:
	/* Back to the ready state */
	atomic_set(&data->state, STATE_READY);
	return err;

}
    41f6:	4638      	mov	r0, r7
    41f8:	b005      	add	sp, #20
    41fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->vr.notify_cb = virtio_notify_cb;
    41fe:	4b21      	ldr	r3, [pc, #132]	; (4284 <open+0xd0>)
    4200:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
	data->vr.priv = (void *) conf;
    4204:	f8c5 6284 	str.w	r6, [r5, #644]	; 0x284
	err = ipc_static_vrings_init(&data->vr, conf->role);
    4208:	6831      	ldr	r1, [r6, #0]
    420a:	4640      	mov	r0, r8
    420c:	f000 f968 	bl	44e0 <ipc_static_vrings_init>
	if (err != 0) {
    4210:	4607      	mov	r7, r0
    4212:	2800      	cmp	r0, #0
    4214:	d1e8      	bne.n	41e8 <open+0x34>
	err = mbox_init(instance);
    4216:	4620      	mov	r0, r4
    4218:	f7ff ff96 	bl	4148 <mbox_init>
	if (err != 0) {
    421c:	4607      	mov	r7, r0
    421e:	2800      	cmp	r0, #0
    4220:	d1e2      	bne.n	41e8 <open+0x34>
	rpmsg_inst->bound_cb = bound_cb;
    4222:	4b19      	ldr	r3, [pc, #100]	; (4288 <open+0xd4>)
    4224:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
	rpmsg_inst->cb = ept_cb;
    4228:	4b18      	ldr	r3, [pc, #96]	; (428c <open+0xd8>)
    422a:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    422e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    4230:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
    4234:	f8d5 1370 	ldr.w	r1, [r5, #880]	; 0x370
    4238:	4815      	ldr	r0, [pc, #84]	; (4290 <open+0xdc>)
    423a:	9003      	str	r0, [sp, #12]
    423c:	f8d5 01f0 	ldr.w	r0, [r5, #496]	; 0x1f0
    4240:	9002      	str	r0, [sp, #8]
    4242:	f8d5 01e8 	ldr.w	r0, [r5, #488]	; 0x1e8
    4246:	9001      	str	r0, [sp, #4]
    4248:	f8cd 8000 	str.w	r8, [sp]
    424c:	4628      	mov	r0, r5
    424e:	f000 f8a3 	bl	4398 <ipc_rpmsg_init>
	if (err != 0) {
    4252:	4607      	mov	r7, r0
    4254:	2800      	cmp	r0, #0
    4256:	d1c7      	bne.n	41e8 <open+0x34>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    4258:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    425c:	f007 fc60 	bl	bb20 <rpmsg_virtio_get_buffer_size>
    4260:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
	if (data->tx_buffer_size < 0) {
    4264:	2800      	cmp	r0, #0
    4266:	db07      	blt.n	4278 <open+0xc4>
    4268:	2302      	movs	r3, #2
    426a:	e8d9 2fef 	ldaex	r2, [r9]
    426e:	e8c9 3fe1 	stlex	r1, r3, [r9]
    4272:	2900      	cmp	r1, #0
    4274:	d0bf      	beq.n	41f6 <open+0x42>
    4276:	e7f8      	b.n	426a <open+0xb6>
		err = -EINVAL;
    4278:	f06f 0715 	mvn.w	r7, #21
    427c:	e7b4      	b.n	41e8 <open+0x34>
		return -EALREADY;
    427e:	f06f 0777 	mvn.w	r7, #119	; 0x77
    4282:	e7b8      	b.n	41f6 <open+0x42>
    4284:	00010c4d 	.word	0x00010c4d
    4288:	0000412d 	.word	0x0000412d
    428c:	00010f4b 	.word	0x00010f4b
    4290:	00010e39 	.word	0x00010e39

00004294 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    4294:	b510      	push	{r4, lr}
    4296:	b08c      	sub	sp, #48	; 0x30
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
    4298:	f10d 0c04 	add.w	ip, sp, #4
    429c:	4c0d      	ldr	r4, [pc, #52]	; (42d4 <shared_memory_prepare+0x40>)
    429e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    42a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    42a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    42a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    42aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    42ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		DT_INST_FOREACH_STATUS_OKAY(BACKEND_CONFIG_DEFINE)
	};

	for (backend_config = backend_configs;
    42b2:	ac01      	add	r4, sp, #4
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
    42b4:	ab0c      	add	r3, sp, #48	; 0x30
    42b6:	429c      	cmp	r4, r3
    42b8:	d302      	bcc.n	42c0 <shared_memory_prepare+0x2c>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    42ba:	2000      	movs	r0, #0
    42bc:	b00c      	add	sp, #48	; 0x30
    42be:	bd10      	pop	{r4, pc}
		if (backend_config->role == ROLE_HOST) {
    42c0:	6823      	ldr	r3, [r4, #0]
    42c2:	b10b      	cbz	r3, 42c8 <shared_memory_prepare+0x34>
	     backend_config++) {
    42c4:	342c      	adds	r4, #44	; 0x2c
    42c6:	e7f5      	b.n	42b4 <shared_memory_prepare+0x20>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    42c8:	2204      	movs	r2, #4
    42ca:	2100      	movs	r1, #0
    42cc:	6860      	ldr	r0, [r4, #4]
    42ce:	f00d f854 	bl	1137a <memset>
    42d2:	e7f7      	b.n	42c4 <shared_memory_prepare+0x30>
    42d4:	00013b40 	.word	0x00013b40

000042d8 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    42d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    42dc:	b085      	sub	sp, #20
    42de:	4607      	mov	r7, r0
    42e0:	460e      	mov	r6, r1
    42e2:	4691      	mov	r9, r2
	struct ipc_rpmsg_instance *instance;
	struct ipc_rpmsg_ept *ept;
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    42e4:	f8d0 809c 	ldr.w	r8, [r0, #156]	; 0x9c

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    42e8:	2400      	movs	r4, #0
    42ea:	e000      	b.n	42ee <ns_bind_cb+0x16>
    42ec:	3401      	adds	r4, #1
    42ee:	2c01      	cmp	r4, #1
    42f0:	d828      	bhi.n	4344 <ns_bind_cb+0x6c>
		ept = &instance->endpoint[i];
    42f2:	f5a8 71c0 	sub.w	r1, r8, #384	; 0x180
    42f6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    42fa:	eb01 1505 	add.w	r5, r1, r5, lsl #4

		if (strcmp(name, ept->name) == 0) {
    42fe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    4302:	011b      	lsls	r3, r3, #4
    4304:	3340      	adds	r3, #64	; 0x40
    4306:	4419      	add	r1, r3
    4308:	4630      	mov	r0, r6
    430a:	f00c ffe9 	bl	112e0 <strcmp>
    430e:	2800      	cmp	r0, #0
    4310:	d1ec      	bne.n	42ec <ns_bind_cb+0x14>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    4312:	4b0e      	ldr	r3, [pc, #56]	; (434c <ns_bind_cb+0x74>)
    4314:	9302      	str	r3, [sp, #8]
    4316:	f8d8 3010 	ldr.w	r3, [r8, #16]
    431a:	9301      	str	r3, [sp, #4]
    431c:	f8cd 9000 	str.w	r9, [sp]
    4320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4324:	4632      	mov	r2, r6
    4326:	4639      	mov	r1, r7
    4328:	4628      	mov	r0, r5
    432a:	f007 fa4b 	bl	b7c4 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    432e:	b948      	cbnz	r0, 4344 <ns_bind_cb+0x6c>
				return;
			}

			ept->bound = true;
    4330:	2101      	movs	r1, #1
    4332:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (instance->bound_cb) {
    4336:	f8d8 300c 	ldr.w	r3, [r8, #12]
    433a:	2b00      	cmp	r3, #0
    433c:	d0d6      	beq.n	42ec <ns_bind_cb+0x14>
				instance->bound_cb(ept);
    433e:	4628      	mov	r0, r5
    4340:	4798      	blx	r3
    4342:	e7d3      	b.n	42ec <ns_bind_cb+0x14>
			}
		}
	}
}
    4344:	b005      	add	sp, #20
    4346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    434a:	bf00      	nop
    434c:	0001105b 	.word	0x0001105b

00004350 <ipc_rpmsg_register_ept>:
int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    4350:	b1c8      	cbz	r0, 4386 <ipc_rpmsg_register_ept+0x36>
{
    4352:	b510      	push	{r4, lr}
    4354:	b084      	sub	sp, #16
    4356:	4614      	mov	r4, r2
    4358:	4603      	mov	r3, r0
	if (!instance || !ept) {
    435a:	b1ba      	cbz	r2, 438c <ipc_rpmsg_register_ept+0x3c>
 * @return - RPMsg device pointed by RPMsg virtio device
 */
static inline struct rpmsg_device *
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
	return &rvdev->rdev;
    435c:	30e0      	adds	r0, #224	; 0xe0
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    435e:	2901      	cmp	r1, #1
    4360:	d002      	beq.n	4368 <ipc_rpmsg_register_ept+0x18>
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
    4362:	2000      	movs	r0, #0
}
    4364:	b004      	add	sp, #16
    4366:	bd10      	pop	{r4, pc}
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    4368:	4a0a      	ldr	r2, [pc, #40]	; (4394 <ipc_rpmsg_register_ept+0x44>)
    436a:	9202      	str	r2, [sp, #8]
    436c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    4370:	9301      	str	r3, [sp, #4]
    4372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4376:	9300      	str	r3, [sp, #0]
    4378:	f104 0240 	add.w	r2, r4, #64	; 0x40
    437c:	4601      	mov	r1, r0
    437e:	4620      	mov	r0, r4
    4380:	f007 fa20 	bl	b7c4 <rpmsg_create_ept>
    4384:	e7ee      	b.n	4364 <ipc_rpmsg_register_ept+0x14>
		return -EINVAL;
    4386:	f06f 0015 	mvn.w	r0, #21
}
    438a:	4770      	bx	lr
		return -EINVAL;
    438c:	f06f 0015 	mvn.w	r0, #21
    4390:	e7e8      	b.n	4364 <ipc_rpmsg_register_ept+0x14>
    4392:	bf00      	nop
    4394:	0001105b 	.word	0x0001105b

00004398 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    4398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    439c:	b084      	sub	sp, #16
    439e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    43a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    43a2:	b338      	cbz	r0, 43f4 <ipc_rpmsg_init+0x5c>
    43a4:	461f      	mov	r7, r3
    43a6:	4606      	mov	r6, r0
    43a8:	b33d      	cbz	r5, 43fa <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
    43aa:	b1bc      	cbz	r4, 43dc <ipc_rpmsg_init+0x44>
		bind_cb = ns_bind_cb;
	}

	if (role == RPMSG_HOST) {
    43ac:	b9c1      	cbnz	r1, 43e0 <ipc_rpmsg_init+0x48>
		struct rpmsg_virtio_config config;

		config.h2r_buf_size = (uint32_t) buffer_size;
    43ae:	9202      	str	r2, [sp, #8]
		config.r2h_buf_size = (uint32_t) buffer_size;
    43b0:	9203      	str	r2, [sp, #12]

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    43b2:	f506 78c0 	add.w	r8, r6, #384	; 0x180
    43b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    43b8:	4629      	mov	r1, r5
    43ba:	4640      	mov	r0, r8
    43bc:	f00e ff2c 	bl	13218 <rpmsg_virtio_init_shm_pool>

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    43c0:	ab02      	add	r3, sp, #8
    43c2:	9301      	str	r3, [sp, #4]
    43c4:	f8cd 8000 	str.w	r8, [sp]
    43c8:	463b      	mov	r3, r7
    43ca:	4622      	mov	r2, r4
    43cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    43ce:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    43d2:	f007 fbbb 	bl	bb4c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    43d6:	b004      	add	sp, #16
    43d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bind_cb = ns_bind_cb;
    43dc:	4c08      	ldr	r4, [pc, #32]	; (4400 <ipc_rpmsg_init+0x68>)
    43de:	e7e5      	b.n	43ac <ipc_rpmsg_init+0x14>
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    43e0:	2300      	movs	r3, #0
    43e2:	9300      	str	r3, [sp, #0]
    43e4:	463b      	mov	r3, r7
    43e6:	4622      	mov	r2, r4
    43e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    43ea:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    43ee:	f007 fc99 	bl	bd24 <rpmsg_init_vdev>
    43f2:	e7f0      	b.n	43d6 <ipc_rpmsg_init+0x3e>
		return -EINVAL;
    43f4:	f06f 0015 	mvn.w	r0, #21
    43f8:	e7ed      	b.n	43d6 <ipc_rpmsg_init+0x3e>
    43fa:	f06f 0015 	mvn.w	r0, #21
    43fe:	e7ea      	b.n	43d6 <ipc_rpmsg_init+0x3e>
    4400:	000042d9 	.word	0x000042d9

00004404 <libmetal_setup>:
	.set_features = virtio_set_features,
	.notify = virtio_notify,
};

static int libmetal_setup(struct ipc_static_vrings *vr)
{
    4404:	b510      	push	{r4, lr}
    4406:	b084      	sub	sp, #16
    4408:	4604      	mov	r4, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    440a:	4a11      	ldr	r2, [pc, #68]	; (4450 <libmetal_setup+0x4c>)
    440c:	ab02      	add	r3, sp, #8
    440e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4412:	e883 0003 	stmia.w	r3, {r0, r1}
	struct metal_device *device;
	int err;

	err = metal_init(&metal_params);
    4416:	4618      	mov	r0, r3
    4418:	f007 f8b4 	bl	b584 <metal_init>
	if (err != 0) {
    441c:	b108      	cbz	r0, 4422 <libmetal_setup+0x1e>
	if (vr->shm_io == NULL) {
		return err;
	}

	return 0;
}
    441e:	b004      	add	sp, #16
    4420:	bd10      	pop	{r4, pc}
	err = metal_register_generic_device(&vr->shm_device);
    4422:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4426:	f007 f88d 	bl	b544 <metal_register_generic_device>
	if (err != 0) {
    442a:	2800      	cmp	r0, #0
    442c:	d1f7      	bne.n	441e <libmetal_setup+0x1a>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    442e:	aa01      	add	r2, sp, #4
    4430:	4908      	ldr	r1, [pc, #32]	; (4454 <libmetal_setup+0x50>)
    4432:	4809      	ldr	r0, [pc, #36]	; (4458 <libmetal_setup+0x54>)
    4434:	f00e fa47 	bl	128c6 <metal_device_open>
	if (err != 0) {
    4438:	2800      	cmp	r0, #0
    443a:	d1f0      	bne.n	441e <libmetal_setup+0x1a>
	vr->shm_io = metal_device_io_region(device, 0);
    443c:	9b01      	ldr	r3, [sp, #4]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    443e:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
    4440:	b11a      	cbz	r2, 444a <libmetal_setup+0x46>
    4442:	330c      	adds	r3, #12
    4444:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (vr->shm_io == NULL) {
    4448:	e7e9      	b.n	441e <libmetal_setup+0x1a>
    444a:	2300      	movs	r3, #0
    444c:	e7fa      	b.n	4444 <libmetal_setup+0x40>
    444e:	bf00      	nop
    4450:	00013b6c 	.word	0x00013b6c
    4454:	000146ac 	.word	0x000146ac
    4458:	000146b8 	.word	0x000146b8

0000445c <vq_setup>:

static int vq_setup(struct ipc_static_vrings *vr, unsigned int role)
{
    445c:	b538      	push	{r3, r4, r5, lr}
    445e:	4604      	mov	r4, r0
    4460:	460d      	mov	r5, r1
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    4462:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    4466:	f00c fe18 	bl	1109a <virtqueue_allocate>
    446a:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    446e:	b378      	cbz	r0, 44d0 <vq_setup+0x74>
		return -ENOMEM;
	}

	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    4470:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    4474:	f00c fe11 	bl	1109a <virtqueue_allocate>
    4478:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    447c:	b358      	cbz	r0, 44d6 <vq_setup+0x7a>
		return -ENOMEM;
	}

	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    447e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    4482:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    4486:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    448a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    448e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4492:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    4496:	2304      	movs	r3, #4
    4498:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    449c:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
    44a0:	f8c4 c0a4 	str.w	ip, [r4, #164]	; 0xa4

	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    44a4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    44a8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    44ac:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    44b0:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    44b4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    44b8:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

	vr->vdev.role = role;
    44bc:	61a5      	str	r5, [r4, #24]

	vr->vdev.vrings_num = VRING_COUNT;
    44be:	2302      	movs	r3, #2
    44c0:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    44c2:	4b06      	ldr	r3, [pc, #24]	; (44dc <vq_setup+0x80>)
    44c4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    44c6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    44ca:	62e3      	str	r3, [r4, #44]	; 0x2c

	return 0;
    44cc:	2000      	movs	r0, #0
}
    44ce:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    44d0:	f06f 000b 	mvn.w	r0, #11
    44d4:	e7fb      	b.n	44ce <vq_setup+0x72>
		return -ENOMEM;
    44d6:	f06f 000b 	mvn.w	r0, #11
    44da:	e7f8      	b.n	44ce <vq_setup+0x72>
    44dc:	000146c0 	.word	0x000146c0

000044e0 <ipc_static_vrings_init>:

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
	int err = 0;

	if (!vr) {
    44e0:	b310      	cbz	r0, 4528 <ipc_static_vrings_init+0x48>
{
    44e2:	b530      	push	{r4, r5, lr}
    44e4:	b085      	sub	sp, #20
    44e6:	460d      	mov	r5, r1
    44e8:	4604      	mov	r4, r0
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
    44ea:	4b11      	ldr	r3, [pc, #68]	; (4530 <ipc_static_vrings_init+0x50>)
    44ec:	6343      	str	r3, [r0, #52]	; 0x34
	vr->shm_device.num_regions = 1;
    44ee:	2301      	movs	r3, #1
    44f0:	63c3      	str	r3, [r0, #60]	; 0x3c
	vr->shm_physmap[0] = vr->shm_addr;
    44f2:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    44f6:	6301      	str	r1, [r0, #48]	; 0x30

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    44f8:	2300      	movs	r3, #0
    44fa:	9302      	str	r3, [sp, #8]
    44fc:	9301      	str	r3, [sp, #4]
    44fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4502:	9300      	str	r3, [sp, #0]
    4504:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    4508:	f100 0230 	add.w	r2, r0, #48	; 0x30
    450c:	3040      	adds	r0, #64	; 0x40
    450e:	f00e f9ff 	bl	12910 <metal_io_init>
		      vr->shm_physmap, vr->shm_size, -1, 0, NULL);

	err = libmetal_setup(vr);
    4512:	4620      	mov	r0, r4
    4514:	f7ff ff76 	bl	4404 <libmetal_setup>
	if (err != 0) {
    4518:	b108      	cbz	r0, 451e <ipc_static_vrings_init+0x3e>
		return err;
	}

	return vq_setup(vr, role);
}
    451a:	b005      	add	sp, #20
    451c:	bd30      	pop	{r4, r5, pc}
	return vq_setup(vr, role);
    451e:	4629      	mov	r1, r5
    4520:	4620      	mov	r0, r4
    4522:	f7ff ff9b 	bl	445c <vq_setup>
    4526:	e7f8      	b.n	451a <ipc_static_vrings_init+0x3a>
		return -EINVAL;
    4528:	f06f 0015 	mvn.w	r0, #21
}
    452c:	4770      	bx	lr
    452e:	bf00      	nop
    4530:	000146ac 	.word	0x000146ac

00004534 <pm_exit_pos_ops>:
}
#endif  /* !CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE */
#endif	/* CONFIG_PM_DEVICE */

static inline void pm_exit_pos_ops(struct pm_state_info *info)
{
    4534:	b508      	push	{r3, lr}
	extern __weak void
		pm_state_exit_post_ops(enum pm_state state, uint8_t substate_id);

	if (pm_state_exit_post_ops != NULL) {
    4536:	4b06      	ldr	r3, [pc, #24]	; (4550 <pm_exit_pos_ops+0x1c>)
    4538:	b123      	cbz	r3, 4544 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    453a:	7841      	ldrb	r1, [r0, #1]
    453c:	7800      	ldrb	r0, [r0, #0]
    453e:	f00c fa33 	bl	109a8 <pm_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
    4542:	bd08      	pop	{r3, pc}
    4544:	2300      	movs	r3, #0
    4546:	f383 8811 	msr	BASEPRI, r3
    454a:	f3bf 8f6f 	isb	sy
    454e:	e7f8      	b.n	4542 <pm_exit_pos_ops+0xe>
    4550:	000109a9 	.word	0x000109a9

00004554 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4605      	mov	r5, r0
	__asm__ volatile(
    4558:	f04f 0320 	mov.w	r3, #32
    455c:	f3ef 8611 	mrs	r6, BASEPRI
    4560:	f383 8812 	msr	BASEPRI_MAX, r3
    4564:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4568:	4823      	ldr	r0, [pc, #140]	; (45f8 <pm_state_notify+0xa4>)
    456a:	f008 f8cb 	bl	c704 <z_spin_lock_valid>
    456e:	b128      	cbz	r0, 457c <pm_state_notify+0x28>
	z_spin_lock_set_owner(l);
    4570:	4821      	ldr	r0, [pc, #132]	; (45f8 <pm_state_notify+0xa4>)
    4572:	f008 f8e7 	bl	c744 <z_spin_lock_set_owner>
	return list->head;
    4576:	4b21      	ldr	r3, [pc, #132]	; (45fc <pm_state_notify+0xa8>)
    4578:	681c      	ldr	r4, [r3, #0]
    457a:	e01d      	b.n	45b8 <pm_state_notify+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    457c:	4c20      	ldr	r4, [pc, #128]	; (4600 <pm_state_notify+0xac>)
    457e:	238e      	movs	r3, #142	; 0x8e
    4580:	4622      	mov	r2, r4
    4582:	4920      	ldr	r1, [pc, #128]	; (4604 <pm_state_notify+0xb0>)
    4584:	4820      	ldr	r0, [pc, #128]	; (4608 <pm_state_notify+0xb4>)
    4586:	f00c f8d7 	bl	10738 <assert_print>
    458a:	491b      	ldr	r1, [pc, #108]	; (45f8 <pm_state_notify+0xa4>)
    458c:	481f      	ldr	r0, [pc, #124]	; (460c <pm_state_notify+0xb8>)
    458e:	f00c f8d3 	bl	10738 <assert_print>
    4592:	218e      	movs	r1, #142	; 0x8e
    4594:	4620      	mov	r0, r4
    4596:	f00c f8c8 	bl	1072a <assert_post_action>
    459a:	e7e9      	b.n	4570 <pm_state_notify+0x1c>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    459c:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    459e:	b13a      	cbz	r2, 45b0 <pm_state_notify+0x5c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    45a0:	4b1b      	ldr	r3, [pc, #108]	; (4610 <pm_state_notify+0xbc>)
    45a2:	7d1b      	ldrb	r3, [r3, #20]
    45a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    45a8:	491a      	ldr	r1, [pc, #104]	; (4614 <pm_state_notify+0xc0>)
    45aa:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    45ae:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    45b0:	4623      	mov	r3, r4
	return node->next;
    45b2:	6824      	ldr	r4, [r4, #0]
    45b4:	b104      	cbz	r4, 45b8 <pm_state_notify+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    45b6:	b123      	cbz	r3, 45c2 <pm_state_notify+0x6e>
    45b8:	b12c      	cbz	r4, 45c6 <pm_state_notify+0x72>
		if (entering_state) {
    45ba:	2d00      	cmp	r5, #0
    45bc:	d0ee      	beq.n	459c <pm_state_notify+0x48>
			callback = notifier->state_entry;
    45be:	6862      	ldr	r2, [r4, #4]
    45c0:	e7ed      	b.n	459e <pm_state_notify+0x4a>
    45c2:	461c      	mov	r4, r3
    45c4:	e7f8      	b.n	45b8 <pm_state_notify+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45c6:	480c      	ldr	r0, [pc, #48]	; (45f8 <pm_state_notify+0xa4>)
    45c8:	f008 f8ac 	bl	c724 <z_spin_unlock_valid>
    45cc:	b120      	cbz	r0, 45d8 <pm_state_notify+0x84>
	__asm__ volatile(
    45ce:	f386 8811 	msr	BASEPRI, r6
    45d2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    45d6:	bd70      	pop	{r4, r5, r6, pc}
    45d8:	4c09      	ldr	r4, [pc, #36]	; (4600 <pm_state_notify+0xac>)
    45da:	23b9      	movs	r3, #185	; 0xb9
    45dc:	4622      	mov	r2, r4
    45de:	490e      	ldr	r1, [pc, #56]	; (4618 <pm_state_notify+0xc4>)
    45e0:	4809      	ldr	r0, [pc, #36]	; (4608 <pm_state_notify+0xb4>)
    45e2:	f00c f8a9 	bl	10738 <assert_print>
    45e6:	4904      	ldr	r1, [pc, #16]	; (45f8 <pm_state_notify+0xa4>)
    45e8:	480c      	ldr	r0, [pc, #48]	; (461c <pm_state_notify+0xc8>)
    45ea:	f00c f8a5 	bl	10738 <assert_print>
    45ee:	21b9      	movs	r1, #185	; 0xb9
    45f0:	4620      	mov	r0, r4
    45f2:	f00c f89a 	bl	1072a <assert_post_action>
    45f6:	e7ea      	b.n	45ce <pm_state_notify+0x7a>
    45f8:	20001af4 	.word	0x20001af4
    45fc:	20001b14 	.word	0x20001b14
    4600:	00013f4c 	.word	0x00013f4c
    4604:	00013fac 	.word	0x00013fac
    4608:	00013d44 	.word	0x00013d44
    460c:	00013fc4 	.word	0x00013fc4
    4610:	20002734 	.word	0x20002734
    4614:	20001b08 	.word	0x20001b08
    4618:	00013f7c 	.word	0x00013f7c
    461c:	00013f94 	.word	0x00013f94

00004620 <pm_system_resume>:

void pm_system_resume(void)
{
    4620:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    4622:	4b0e      	ldr	r3, [pc, #56]	; (465c <pm_system_resume+0x3c>)
    4624:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4626:	4621      	mov	r1, r4
    4628:	480d      	ldr	r0, [pc, #52]	; (4660 <pm_system_resume+0x40>)
    462a:	f00c fd44 	bl	110b6 <atomic_test_and_clear_bit>
    462e:	b900      	cbnz	r0, 4632 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    4630:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    4632:	0065      	lsls	r5, r4, #1
    4634:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    4638:	4e0a      	ldr	r6, [pc, #40]	; (4664 <pm_system_resume+0x44>)
    463a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    463e:	f7ff ff79 	bl	4534 <pm_exit_pos_ops>
		pm_state_notify(false);
    4642:	2000      	movs	r0, #0
    4644:	f7ff ff86 	bl	4554 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4648:	192b      	adds	r3, r5, r4
    464a:	0099      	lsls	r1, r3, #2
    464c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4650:	2200      	movs	r2, #0
    4652:	5072      	str	r2, [r6, r1]
    4654:	605a      	str	r2, [r3, #4]
    4656:	609a      	str	r2, [r3, #8]
}
    4658:	e7ea      	b.n	4630 <pm_system_resume+0x10>
    465a:	bf00      	nop
    465c:	20002734 	.word	0x20002734
    4660:	20001b1c 	.word	0x20001b1c
    4664:	20001b08 	.word	0x20001b08

00004668 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    4668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    466a:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    466c:	4b50      	ldr	r3, [pc, #320]	; (47b0 <pm_system_suspend+0x148>)
    466e:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
    4670:	f04f 0320 	mov.w	r3, #32
    4674:	f3ef 8611 	mrs	r6, BASEPRI
    4678:	f383 8812 	msr	BASEPRI_MAX, r3
    467c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4680:	484c      	ldr	r0, [pc, #304]	; (47b4 <pm_system_suspend+0x14c>)
    4682:	f008 f83f 	bl	c704 <z_spin_lock_valid>
    4686:	2800      	cmp	r0, #0
    4688:	d04a      	beq.n	4720 <pm_system_suspend+0xb8>
	z_spin_lock_set_owner(l);
    468a:	484a      	ldr	r0, [pc, #296]	; (47b4 <pm_system_suspend+0x14c>)
    468c:	f008 f85a 	bl	c744 <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    4690:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4694:	4a48      	ldr	r2, [pc, #288]	; (47b8 <pm_system_suspend+0x150>)
    4696:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    469a:	2b00      	cmp	r3, #0
    469c:	d050      	beq.n	4740 <pm_system_suspend+0xd8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    469e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    46a2:	4b46      	ldr	r3, [pc, #280]	; (47bc <pm_system_suspend+0x154>)
    46a4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    46a8:	4f43      	ldr	r7, [pc, #268]	; (47b8 <pm_system_suspend+0x150>)
    46aa:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    46ae:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    46b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    46b6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    46ba:	2300      	movs	r3, #0
    46bc:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46c0:	483c      	ldr	r0, [pc, #240]	; (47b4 <pm_system_suspend+0x14c>)
    46c2:	f008 f82f 	bl	c724 <z_spin_unlock_valid>
    46c6:	2800      	cmp	r0, #0
    46c8:	d049      	beq.n	475e <pm_system_suspend+0xf6>
	__asm__ volatile(
    46ca:	f386 8811 	msr	BASEPRI, r6
    46ce:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    46d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    46d6:	4a39      	ldr	r2, [pc, #228]	; (47bc <pm_system_suspend+0x154>)
    46d8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    46dc:	2b00      	cmp	r3, #0
    46de:	d064      	beq.n	47aa <pm_system_suspend+0x142>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    46e0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    46e4:	d14b      	bne.n	477e <pm_system_suspend+0x116>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    46e6:	f009 f967 	bl	d9b8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    46ea:	2001      	movs	r0, #1
    46ec:	f7ff ff32 	bl	4554 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    46f0:	4621      	mov	r1, r4
    46f2:	4833      	ldr	r0, [pc, #204]	; (47c0 <pm_system_suspend+0x158>)
    46f4:	f00c fcf7 	bl	110e6 <atomic_set_bit>
	if (pm_state_set != NULL) {
    46f8:	4b32      	ldr	r3, [pc, #200]	; (47c4 <pm_system_suspend+0x15c>)
    46fa:	b15b      	cbz	r3, 4714 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    46fc:	4a2f      	ldr	r2, [pc, #188]	; (47bc <pm_system_suspend+0x154>)
    46fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4706:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    470a:	7859      	ldrb	r1, [r3, #1]
    470c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    4710:	f7fe f97e 	bl	2a10 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    4714:	f7ff ff84 	bl	4620 <pm_system_resume>
	k_sched_unlock();
    4718:	f009 fe88 	bl	e42c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    471c:	2001      	movs	r0, #1
}
    471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4720:	4f29      	ldr	r7, [pc, #164]	; (47c8 <pm_system_suspend+0x160>)
    4722:	238e      	movs	r3, #142	; 0x8e
    4724:	463a      	mov	r2, r7
    4726:	4929      	ldr	r1, [pc, #164]	; (47cc <pm_system_suspend+0x164>)
    4728:	4829      	ldr	r0, [pc, #164]	; (47d0 <pm_system_suspend+0x168>)
    472a:	f00c f805 	bl	10738 <assert_print>
    472e:	4921      	ldr	r1, [pc, #132]	; (47b4 <pm_system_suspend+0x14c>)
    4730:	4828      	ldr	r0, [pc, #160]	; (47d4 <pm_system_suspend+0x16c>)
    4732:	f00c f801 	bl	10738 <assert_print>
    4736:	218e      	movs	r1, #142	; 0x8e
    4738:	4638      	mov	r0, r7
    473a:	f00b fff6 	bl	1072a <assert_post_action>
    473e:	e7a4      	b.n	468a <pm_system_suspend+0x22>
		info = pm_policy_next_state(id, ticks);
    4740:	4629      	mov	r1, r5
    4742:	4620      	mov	r0, r4
    4744:	f000 f850 	bl	47e8 <pm_policy_next_state>
		if (info != NULL) {
    4748:	2800      	cmp	r0, #0
    474a:	d0b9      	beq.n	46c0 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
    474c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    4750:	4b1a      	ldr	r3, [pc, #104]	; (47bc <pm_system_suspend+0x154>)
    4752:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4756:	c807      	ldmia	r0, {r0, r1, r2}
    4758:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    475c:	e7b0      	b.n	46c0 <pm_system_suspend+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    475e:	4f1a      	ldr	r7, [pc, #104]	; (47c8 <pm_system_suspend+0x160>)
    4760:	23b9      	movs	r3, #185	; 0xb9
    4762:	463a      	mov	r2, r7
    4764:	491c      	ldr	r1, [pc, #112]	; (47d8 <pm_system_suspend+0x170>)
    4766:	481a      	ldr	r0, [pc, #104]	; (47d0 <pm_system_suspend+0x168>)
    4768:	f00b ffe6 	bl	10738 <assert_print>
    476c:	4911      	ldr	r1, [pc, #68]	; (47b4 <pm_system_suspend+0x14c>)
    476e:	481b      	ldr	r0, [pc, #108]	; (47dc <pm_system_suspend+0x174>)
    4770:	f00b ffe2 	bl	10738 <assert_print>
    4774:	21b9      	movs	r1, #185	; 0xb9
    4776:	4638      	mov	r0, r7
    4778:	f00b ffd7 	bl	1072a <assert_post_action>
    477c:	e7a5      	b.n	46ca <pm_system_suspend+0x62>
		     k_us_to_ticks_ceil32(
    477e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4782:	4b0e      	ldr	r3, [pc, #56]	; (47bc <pm_system_suspend+0x154>)
    4784:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4788:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    478a:	0c41      	lsrs	r1, r0, #17
    478c:	03c0      	lsls	r0, r0, #15
    478e:	4b14      	ldr	r3, [pc, #80]	; (47e0 <pm_system_suspend+0x178>)
    4790:	18c0      	adds	r0, r0, r3
    4792:	4a14      	ldr	r2, [pc, #80]	; (47e4 <pm_system_suspend+0x17c>)
    4794:	f04f 0300 	mov.w	r3, #0
    4798:	f141 0100 	adc.w	r1, r1, #0
    479c:	f7fb fcda 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    47a0:	2101      	movs	r1, #1
    47a2:	1a28      	subs	r0, r5, r0
    47a4:	f00a fcca 	bl	f13c <z_set_timeout_expiry>
    47a8:	e79d      	b.n	46e6 <pm_system_suspend+0x7e>
		return false;
    47aa:	2000      	movs	r0, #0
    47ac:	e7b7      	b.n	471e <pm_system_suspend+0xb6>
    47ae:	bf00      	nop
    47b0:	20002734 	.word	0x20002734
    47b4:	20001af8 	.word	0x20001af8
    47b8:	20001afc 	.word	0x20001afc
    47bc:	20001b08 	.word	0x20001b08
    47c0:	20001b1c 	.word	0x20001b1c
    47c4:	00002a11 	.word	0x00002a11
    47c8:	00013f4c 	.word	0x00013f4c
    47cc:	00013fac 	.word	0x00013fac
    47d0:	00013d44 	.word	0x00013d44
    47d4:	00013fc4 	.word	0x00013fc4
    47d8:	00013f7c 	.word	0x00013f7c
    47dc:	00013f94 	.word	0x00013f94
    47e0:	000f423f 	.word	0x000f423f
    47e4:	000f4240 	.word	0x000f4240

000047e8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    47e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47ec:	b082      	sub	sp, #8
    47ee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    47f0:	a901      	add	r1, sp, #4
    47f2:	f000 f845 	bl	4880 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    47f6:	1e44      	subs	r4, r0, #1
    47f8:	b224      	sxth	r4, r4
    47fa:	e007      	b.n	480c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    47fc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4800:	d033      	beq.n	486a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    4802:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    4804:	45b0      	cmp	r8, r6
    4806:	d930      	bls.n	486a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4808:	3c01      	subs	r4, #1
    480a:	b224      	sxth	r4, r4
    480c:	2c00      	cmp	r4, #0
    480e:	db2b      	blt.n	4868 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    4810:	9b01      	ldr	r3, [sp, #4]
    4812:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4816:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    481a:	7869      	ldrb	r1, [r5, #1]
    481c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    4820:	f00c fc70 	bl	11104 <pm_policy_state_lock_is_active>
    4824:	2800      	cmp	r0, #0
    4826:	d1ef      	bne.n	4808 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    4828:	6868      	ldr	r0, [r5, #4]
    482a:	0c41      	lsrs	r1, r0, #17
    482c:	03c0      	lsls	r0, r0, #15
    482e:	4f11      	ldr	r7, [pc, #68]	; (4874 <pm_policy_next_state+0x8c>)
    4830:	19c0      	adds	r0, r0, r7
    4832:	4a11      	ldr	r2, [pc, #68]	; (4878 <pm_policy_next_state+0x90>)
    4834:	f04f 0300 	mov.w	r3, #0
    4838:	f141 0100 	adc.w	r1, r1, #0
    483c:	f7fb fc8a 	bl	154 <__aeabi_uldivmod>
    4840:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    4842:	68ab      	ldr	r3, [r5, #8]
    4844:	0c59      	lsrs	r1, r3, #17
    4846:	03db      	lsls	r3, r3, #15
    4848:	19d8      	adds	r0, r3, r7
    484a:	4a0b      	ldr	r2, [pc, #44]	; (4878 <pm_policy_next_state+0x90>)
    484c:	f04f 0300 	mov.w	r3, #0
    4850:	f141 0100 	adc.w	r1, r1, #0
    4854:	f7fb fc7e 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4858:	4b08      	ldr	r3, [pc, #32]	; (487c <pm_policy_next_state+0x94>)
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4860:	d0cc      	beq.n	47fc <pm_policy_next_state+0x14>
    4862:	4283      	cmp	r3, r0
    4864:	d8ca      	bhi.n	47fc <pm_policy_next_state+0x14>
    4866:	e7cf      	b.n	4808 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    4868:	2500      	movs	r5, #0
}
    486a:	4628      	mov	r0, r5
    486c:	b002      	add	sp, #8
    486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4872:	bf00      	nop
    4874:	000f423f 	.word	0x000f423f
    4878:	000f4240 	.word	0x000f4240
    487c:	2000004c 	.word	0x2000004c

00004880 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    4880:	b908      	cbnz	r0, 4886 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    4882:	4b02      	ldr	r3, [pc, #8]	; (488c <pm_state_cpu_get_all+0xc>)
    4884:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    4886:	2000      	movs	r0, #0
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	000146e8 	.word	0x000146e8

00004890 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4890:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4892:	4802      	ldr	r0, [pc, #8]	; (489c <nrf_cc3xx_platform_abort_init+0xc>)
    4894:	f00b f8f6 	bl	fa84 <nrf_cc3xx_platform_set_abort>
}
    4898:	bd08      	pop	{r3, pc}
    489a:	bf00      	nop
    489c:	000146e8 	.word	0x000146e8

000048a0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    48a0:	b308      	cbz	r0, 48e6 <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    48a2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    48a4:	6843      	ldr	r3, [r0, #4]
    48a6:	2b04      	cmp	r3, #4
    48a8:	d007      	beq.n	48ba <mutex_unlock_platform+0x1a>
    48aa:	2b08      	cmp	r3, #8
    48ac:	d012      	beq.n	48d4 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    48ae:	b1fb      	cbz	r3, 48f0 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    48b0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    48b2:	f008 fa7b 	bl	cdac <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    48b6:	2000      	movs	r0, #0
    48b8:	e014      	b.n	48e4 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    48ba:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    48bc:	2200      	movs	r2, #0
    48be:	e8d3 1fef 	ldaex	r1, [r3]
    48c2:	2901      	cmp	r1, #1
    48c4:	d103      	bne.n	48ce <mutex_unlock_platform+0x2e>
    48c6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    48ca:	2800      	cmp	r0, #0
    48cc:	d1f7      	bne.n	48be <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    48ce:	d10d      	bne.n	48ec <mutex_unlock_platform+0x4c>
    48d0:	4610      	mov	r0, r2
    48d2:	e007      	b.n	48e4 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    48d4:	6803      	ldr	r3, [r0, #0]
    48d6:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    48d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    48dc:	2000      	movs	r0, #0
    48de:	4a05      	ldr	r2, [pc, #20]	; (48f4 <mutex_unlock_platform+0x54>)
    48e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    48e4:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    48e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    48ea:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    48ec:	4802      	ldr	r0, [pc, #8]	; (48f8 <mutex_unlock_platform+0x58>)
    48ee:	e7f9      	b.n	48e4 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    48f0:	4802      	ldr	r0, [pc, #8]	; (48fc <mutex_unlock_platform+0x5c>)
    48f2:	e7f7      	b.n	48e4 <mutex_unlock_platform+0x44>
    48f4:	50030000 	.word	0x50030000
    48f8:	ffff8fe9 	.word	0xffff8fe9
    48fc:	ffff8fea 	.word	0xffff8fea

00004900 <mutex_lock_platform>:
    if(mutex == NULL) {
    4900:	b370      	cbz	r0, 4960 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4902:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4904:	6843      	ldr	r3, [r0, #4]
    4906:	2b04      	cmp	r3, #4
    4908:	d004      	beq.n	4914 <mutex_lock_platform+0x14>
    490a:	2b08      	cmp	r3, #8
    490c:	d00f      	beq.n	492e <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    490e:	b9c3      	cbnz	r3, 4942 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4910:	4815      	ldr	r0, [pc, #84]	; (4968 <mutex_lock_platform+0x68>)
    4912:	e00b      	b.n	492c <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4914:	6803      	ldr	r3, [r0, #0]
    4916:	2201      	movs	r2, #1
    4918:	e8d3 1fef 	ldaex	r1, [r3]
    491c:	2900      	cmp	r1, #0
    491e:	d103      	bne.n	4928 <mutex_lock_platform+0x28>
    4920:	e8c3 2fe0 	stlex	r0, r2, [r3]
    4924:	2800      	cmp	r0, #0
    4926:	d1f7      	bne.n	4918 <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4928:	d116      	bne.n	4958 <mutex_lock_platform+0x58>
    492a:	2000      	movs	r0, #0
}
    492c:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    492e:	6803      	ldr	r3, [r0, #0]
    4930:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    4932:	f503 7380 	add.w	r3, r3, #256	; 0x100
    4936:	4a0d      	ldr	r2, [pc, #52]	; (496c <mutex_lock_platform+0x6c>)
    4938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    493c:	b973      	cbnz	r3, 495c <mutex_lock_platform+0x5c>
    493e:	2000      	movs	r0, #0
    4940:	e7f4      	b.n	492c <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4942:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    494c:	f008 f91a 	bl	cb84 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4950:	2800      	cmp	r0, #0
    4952:	d0eb      	beq.n	492c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4954:	4806      	ldr	r0, [pc, #24]	; (4970 <mutex_lock_platform+0x70>)
    4956:	e7e9      	b.n	492c <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4958:	4805      	ldr	r0, [pc, #20]	; (4970 <mutex_lock_platform+0x70>)
    495a:	e7e7      	b.n	492c <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    495c:	4804      	ldr	r0, [pc, #16]	; (4970 <mutex_lock_platform+0x70>)
    495e:	e7e5      	b.n	492c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4960:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	ffff8fea 	.word	0xffff8fea
    496c:	50030000 	.word	0x50030000
    4970:	ffff8fe9 	.word	0xffff8fe9

00004974 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4974:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4976:	4604      	mov	r4, r0
    4978:	b188      	cbz	r0, 499e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    497a:	6863      	ldr	r3, [r4, #4]
    497c:	2b04      	cmp	r3, #4
    497e:	d00d      	beq.n	499c <mutex_free_platform+0x28>
    4980:	2b08      	cmp	r3, #8
    4982:	d00b      	beq.n	499c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4984:	b153      	cbz	r3, 499c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4986:	f013 0f02 	tst.w	r3, #2
    498a:	d00d      	beq.n	49a8 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    498c:	4621      	mov	r1, r4
    498e:	4809      	ldr	r0, [pc, #36]	; (49b4 <mutex_free_platform+0x40>)
    4990:	f007 fe30 	bl	c5f4 <k_mem_slab_free>
        mutex->mutex = NULL;
    4994:	2300      	movs	r3, #0
    4996:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4998:	2300      	movs	r3, #0
    499a:	6063      	str	r3, [r4, #4]
}
    499c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    499e:	4b06      	ldr	r3, [pc, #24]	; (49b8 <mutex_free_platform+0x44>)
    49a0:	685b      	ldr	r3, [r3, #4]
    49a2:	4806      	ldr	r0, [pc, #24]	; (49bc <mutex_free_platform+0x48>)
    49a4:	4798      	blx	r3
    49a6:	e7e8      	b.n	497a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    49a8:	2214      	movs	r2, #20
    49aa:	2100      	movs	r1, #0
    49ac:	6820      	ldr	r0, [r4, #0]
    49ae:	f00c fce4 	bl	1137a <memset>
    49b2:	e7f1      	b.n	4998 <mutex_free_platform+0x24>
    49b4:	20002020 	.word	0x20002020
    49b8:	200001dc 	.word	0x200001dc
    49bc:	000146f0 	.word	0x000146f0

000049c0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    49c0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    49c2:	4604      	mov	r4, r0
    49c4:	b178      	cbz	r0, 49e6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    49c6:	6863      	ldr	r3, [r4, #4]
    49c8:	2b04      	cmp	r3, #4
    49ca:	d00b      	beq.n	49e4 <mutex_init_platform+0x24>
    49cc:	2b08      	cmp	r3, #8
    49ce:	d009      	beq.n	49e4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    49d0:	b90b      	cbnz	r3, 49d6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    49d2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    49d4:	b163      	cbz	r3, 49f0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    49d6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    49d8:	f00e fd0c 	bl	133f4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    49dc:	6863      	ldr	r3, [r4, #4]
    49de:	f043 0301 	orr.w	r3, r3, #1
    49e2:	6063      	str	r3, [r4, #4]
}
    49e4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    49e6:	4b0f      	ldr	r3, [pc, #60]	; (4a24 <mutex_init_platform+0x64>)
    49e8:	685b      	ldr	r3, [r3, #4]
    49ea:	480f      	ldr	r0, [pc, #60]	; (4a28 <mutex_init_platform+0x68>)
    49ec:	4798      	blx	r3
    49ee:	e7ea      	b.n	49c6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    49f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49f8:	4621      	mov	r1, r4
    49fa:	480c      	ldr	r0, [pc, #48]	; (4a2c <mutex_init_platform+0x6c>)
    49fc:	f007 fd84 	bl	c508 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4a00:	b908      	cbnz	r0, 4a06 <mutex_init_platform+0x46>
    4a02:	6823      	ldr	r3, [r4, #0]
    4a04:	b91b      	cbnz	r3, 4a0e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    4a06:	4b07      	ldr	r3, [pc, #28]	; (4a24 <mutex_init_platform+0x64>)
    4a08:	685b      	ldr	r3, [r3, #4]
    4a0a:	4809      	ldr	r0, [pc, #36]	; (4a30 <mutex_init_platform+0x70>)
    4a0c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4a0e:	2214      	movs	r2, #20
    4a10:	2100      	movs	r1, #0
    4a12:	6820      	ldr	r0, [r4, #0]
    4a14:	f00c fcb1 	bl	1137a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4a18:	6863      	ldr	r3, [r4, #4]
    4a1a:	f043 0302 	orr.w	r3, r3, #2
    4a1e:	6063      	str	r3, [r4, #4]
    4a20:	e7d9      	b.n	49d6 <mutex_init_platform+0x16>
    4a22:	bf00      	nop
    4a24:	200001dc 	.word	0x200001dc
    4a28:	000146f0 	.word	0x000146f0
    4a2c:	20002020 	.word	0x20002020
    4a30:	00014718 	.word	0x00014718

00004a34 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4a34:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4a36:	2340      	movs	r3, #64	; 0x40
    4a38:	2214      	movs	r2, #20
    4a3a:	4904      	ldr	r1, [pc, #16]	; (4a4c <nrf_cc3xx_platform_mutex_init+0x18>)
    4a3c:	4804      	ldr	r0, [pc, #16]	; (4a50 <nrf_cc3xx_platform_mutex_init+0x1c>)
    4a3e:	f00e fc8b 	bl	13358 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4a42:	4904      	ldr	r1, [pc, #16]	; (4a54 <nrf_cc3xx_platform_mutex_init+0x20>)
    4a44:	4804      	ldr	r0, [pc, #16]	; (4a58 <nrf_cc3xx_platform_mutex_init+0x24>)
    4a46:	f00b f87f 	bl	fb48 <nrf_cc3xx_platform_set_mutexes>
}
    4a4a:	bd08      	pop	{r3, pc}
    4a4c:	20001b20 	.word	0x20001b20
    4a50:	20002020 	.word	0x20002020
    4a54:	00014748 	.word	0x00014748
    4a58:	0001475c 	.word	0x0001475c

00004a5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4a5c:	4901      	ldr	r1, [pc, #4]	; (4a64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4a5e:	2210      	movs	r2, #16
	str	r2, [r1]
    4a60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4a62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4a64:	e000ed10 	.word	0xe000ed10

00004a68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4a68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4a6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4a6c:	f380 8811 	msr	BASEPRI, r0
	isb
    4a70:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4a74:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4a78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4a7a:	b662      	cpsie	i
	isb
    4a7c:	f3bf 8f6f 	isb	sy

	bx	lr
    4a80:	4770      	bx	lr
    4a82:	bf00      	nop

00004a84 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4a84:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4a86:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4a88:	f381 8811 	msr	BASEPRI, r1

	wfe
    4a8c:	bf20      	wfe

	msr	BASEPRI, r0
    4a8e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4a92:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop

00004a98 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a9c:	b082      	sub	sp, #8
    4a9e:	af00      	add	r7, sp, #0
    4aa0:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4aa2:	f8d0 e000 	ldr.w	lr, [r0]
    4aa6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4aaa:	6886      	ldr	r6, [r0, #8]
    4aac:	466d      	mov	r5, sp
    4aae:	b08a      	sub	sp, #40	; 0x28
    4ab0:	466b      	mov	r3, sp
    4ab2:	f113 0210 	adds.w	r2, r3, #16
    4ab6:	f000 80f3 	beq.w	4ca0 <esf_dump+0x208>
    4aba:	2114      	movs	r1, #20
    4abc:	b18a      	cbz	r2, 4ae2 <esf_dump+0x4a>
    4abe:	4608      	mov	r0, r1
    4ac0:	2904      	cmp	r1, #4
    4ac2:	dd03      	ble.n	4acc <esf_dump+0x34>
    4ac4:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4cd0 <esf_dump+0x238>
    4ac8:	f8c3 8014 	str.w	r8, [r3, #20]
    4acc:	2808      	cmp	r0, #8
    4ace:	dd01      	ble.n	4ad4 <esf_dump+0x3c>
    4ad0:	f8c3 e018 	str.w	lr, [r3, #24]
    4ad4:	280c      	cmp	r0, #12
    4ad6:	dd01      	ble.n	4adc <esf_dump+0x44>
    4ad8:	f8c3 c01c 	str.w	ip, [r3, #28]
    4adc:	2810      	cmp	r0, #16
    4ade:	dd00      	ble.n	4ae2 <esf_dump+0x4a>
    4ae0:	621e      	str	r6, [r3, #32]
    4ae2:	2913      	cmp	r1, #19
    4ae4:	f340 80df 	ble.w	4ca6 <esf_dump+0x20e>
    4ae8:	f04f 0c14 	mov.w	ip, #20
    4aec:	b13a      	cbz	r2, 4afe <esf_dump+0x66>
    4aee:	2105      	movs	r1, #5
    4af0:	7139      	strb	r1, [r7, #4]
    4af2:	2100      	movs	r1, #0
    4af4:	7179      	strb	r1, [r7, #5]
    4af6:	71b9      	strb	r1, [r7, #6]
    4af8:	71f9      	strb	r1, [r7, #7]
    4afa:	6878      	ldr	r0, [r7, #4]
    4afc:	6118      	str	r0, [r3, #16]
    4afe:	2100      	movs	r1, #0
    4b00:	f36f 0100 	bfc	r1, #0, #1
    4b04:	f36f 0141 	bfc	r1, #1, #1
    4b08:	f36f 0182 	bfc	r1, #2, #1
    4b0c:	f36f 01c5 	bfc	r1, #3, #3
    4b10:	2301      	movs	r3, #1
    4b12:	f363 1188 	bfi	r1, r3, #6, #3
    4b16:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    4b1a:	f36c 2152 	bfi	r1, ip, #9, #10
    4b1e:	f36f 41de 	bfc	r1, #19, #12
    4b22:	f36f 71df 	bfc	r1, #31, #1
    4b26:	2300      	movs	r3, #0
    4b28:	486a      	ldr	r0, [pc, #424]	; (4cd4 <esf_dump+0x23c>)
    4b2a:	f7fe fd9d 	bl	3668 <z_impl_z_log_msg_static_create>
    4b2e:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4b30:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    4b34:	f8d4 c010 	ldr.w	ip, [r4, #16]
    4b38:	6966      	ldr	r6, [r4, #20]
    4b3a:	466d      	mov	r5, sp
    4b3c:	b08a      	sub	sp, #40	; 0x28
    4b3e:	466b      	mov	r3, sp
    4b40:	f113 0210 	adds.w	r2, r3, #16
    4b44:	f000 80b2 	beq.w	4cac <esf_dump+0x214>
    4b48:	2114      	movs	r1, #20
    4b4a:	b18a      	cbz	r2, 4b70 <esf_dump+0xd8>
    4b4c:	4608      	mov	r0, r1
    4b4e:	2904      	cmp	r1, #4
    4b50:	dd03      	ble.n	4b5a <esf_dump+0xc2>
    4b52:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4cd8 <esf_dump+0x240>
    4b56:	f8c3 8014 	str.w	r8, [r3, #20]
    4b5a:	2808      	cmp	r0, #8
    4b5c:	dd01      	ble.n	4b62 <esf_dump+0xca>
    4b5e:	f8c3 e018 	str.w	lr, [r3, #24]
    4b62:	280c      	cmp	r0, #12
    4b64:	dd01      	ble.n	4b6a <esf_dump+0xd2>
    4b66:	f8c3 c01c 	str.w	ip, [r3, #28]
    4b6a:	2810      	cmp	r0, #16
    4b6c:	dd00      	ble.n	4b70 <esf_dump+0xd8>
    4b6e:	621e      	str	r6, [r3, #32]
    4b70:	2913      	cmp	r1, #19
    4b72:	f340 809e 	ble.w	4cb2 <esf_dump+0x21a>
    4b76:	f04f 0c14 	mov.w	ip, #20
    4b7a:	b13a      	cbz	r2, 4b8c <esf_dump+0xf4>
    4b7c:	2105      	movs	r1, #5
    4b7e:	7139      	strb	r1, [r7, #4]
    4b80:	2100      	movs	r1, #0
    4b82:	7179      	strb	r1, [r7, #5]
    4b84:	71b9      	strb	r1, [r7, #6]
    4b86:	71f9      	strb	r1, [r7, #7]
    4b88:	6878      	ldr	r0, [r7, #4]
    4b8a:	6118      	str	r0, [r3, #16]
    4b8c:	2100      	movs	r1, #0
    4b8e:	f36f 0100 	bfc	r1, #0, #1
    4b92:	f36f 0141 	bfc	r1, #1, #1
    4b96:	f36f 0182 	bfc	r1, #2, #1
    4b9a:	f36f 01c5 	bfc	r1, #3, #3
    4b9e:	2301      	movs	r3, #1
    4ba0:	f363 1188 	bfi	r1, r3, #6, #3
    4ba4:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    4ba8:	f36c 2152 	bfi	r1, ip, #9, #10
    4bac:	f36f 41de 	bfc	r1, #19, #12
    4bb0:	f36f 71df 	bfc	r1, #31, #1
    4bb4:	2300      	movs	r3, #0
    4bb6:	4847      	ldr	r0, [pc, #284]	; (4cd4 <esf_dump+0x23c>)
    4bb8:	f7fe fd56 	bl	3668 <z_impl_z_log_msg_static_create>
    4bbc:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4bbe:	69e6      	ldr	r6, [r4, #28]
    4bc0:	466d      	mov	r5, sp
    4bc2:	b088      	sub	sp, #32
    4bc4:	466b      	mov	r3, sp
    4bc6:	f113 0210 	adds.w	r2, r3, #16
    4bca:	d075      	beq.n	4cb8 <esf_dump+0x220>
    4bcc:	210c      	movs	r1, #12
    4bce:	b14a      	cbz	r2, 4be4 <esf_dump+0x14c>
    4bd0:	4608      	mov	r0, r1
    4bd2:	2904      	cmp	r1, #4
    4bd4:	dd03      	ble.n	4bde <esf_dump+0x146>
    4bd6:	f8df c104 	ldr.w	ip, [pc, #260]	; 4cdc <esf_dump+0x244>
    4bda:	f8c3 c014 	str.w	ip, [r3, #20]
    4bde:	2808      	cmp	r0, #8
    4be0:	dd00      	ble.n	4be4 <esf_dump+0x14c>
    4be2:	619e      	str	r6, [r3, #24]
    4be4:	290b      	cmp	r1, #11
    4be6:	dd6a      	ble.n	4cbe <esf_dump+0x226>
    4be8:	f04f 0c0c 	mov.w	ip, #12
    4bec:	b13a      	cbz	r2, 4bfe <esf_dump+0x166>
    4bee:	2103      	movs	r1, #3
    4bf0:	7139      	strb	r1, [r7, #4]
    4bf2:	2100      	movs	r1, #0
    4bf4:	7179      	strb	r1, [r7, #5]
    4bf6:	71b9      	strb	r1, [r7, #6]
    4bf8:	71f9      	strb	r1, [r7, #7]
    4bfa:	6878      	ldr	r0, [r7, #4]
    4bfc:	6118      	str	r0, [r3, #16]
    4bfe:	2100      	movs	r1, #0
    4c00:	f36f 0100 	bfc	r1, #0, #1
    4c04:	f36f 0141 	bfc	r1, #1, #1
    4c08:	f36f 0182 	bfc	r1, #2, #1
    4c0c:	f36f 01c5 	bfc	r1, #3, #3
    4c10:	2301      	movs	r3, #1
    4c12:	f363 1188 	bfi	r1, r3, #6, #3
    4c16:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    4c1a:	f36c 2152 	bfi	r1, ip, #9, #10
    4c1e:	f36f 41de 	bfc	r1, #19, #12
    4c22:	f36f 71df 	bfc	r1, #31, #1
    4c26:	2300      	movs	r3, #0
    4c28:	482a      	ldr	r0, [pc, #168]	; (4cd4 <esf_dump+0x23c>)
    4c2a:	f7fe fd1d 	bl	3668 <z_impl_z_log_msg_static_create>
    4c2e:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4c30:	69a4      	ldr	r4, [r4, #24]
    4c32:	b088      	sub	sp, #32
    4c34:	466b      	mov	r3, sp
    4c36:	f113 0210 	adds.w	r2, r3, #16
    4c3a:	d043      	beq.n	4cc4 <esf_dump+0x22c>
    4c3c:	210c      	movs	r1, #12
    4c3e:	b13a      	cbz	r2, 4c50 <esf_dump+0x1b8>
    4c40:	4608      	mov	r0, r1
    4c42:	2904      	cmp	r1, #4
    4c44:	dd01      	ble.n	4c4a <esf_dump+0x1b2>
    4c46:	4d26      	ldr	r5, [pc, #152]	; (4ce0 <esf_dump+0x248>)
    4c48:	615d      	str	r5, [r3, #20]
    4c4a:	2808      	cmp	r0, #8
    4c4c:	dd00      	ble.n	4c50 <esf_dump+0x1b8>
    4c4e:	619c      	str	r4, [r3, #24]
    4c50:	290b      	cmp	r1, #11
    4c52:	dd3a      	ble.n	4cca <esf_dump+0x232>
    4c54:	240c      	movs	r4, #12
    4c56:	b13a      	cbz	r2, 4c68 <esf_dump+0x1d0>
    4c58:	2103      	movs	r1, #3
    4c5a:	7139      	strb	r1, [r7, #4]
    4c5c:	2100      	movs	r1, #0
    4c5e:	7179      	strb	r1, [r7, #5]
    4c60:	71b9      	strb	r1, [r7, #6]
    4c62:	71f9      	strb	r1, [r7, #7]
    4c64:	6878      	ldr	r0, [r7, #4]
    4c66:	6118      	str	r0, [r3, #16]
    4c68:	2100      	movs	r1, #0
    4c6a:	f36f 0100 	bfc	r1, #0, #1
    4c6e:	f36f 0141 	bfc	r1, #1, #1
    4c72:	f36f 0182 	bfc	r1, #2, #1
    4c76:	f36f 01c5 	bfc	r1, #3, #3
    4c7a:	2301      	movs	r3, #1
    4c7c:	f363 1188 	bfi	r1, r3, #6, #3
    4c80:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    4c84:	f364 2152 	bfi	r1, r4, #9, #10
    4c88:	f36f 41de 	bfc	r1, #19, #12
    4c8c:	f36f 71df 	bfc	r1, #31, #1
    4c90:	2300      	movs	r3, #0
    4c92:	4810      	ldr	r0, [pc, #64]	; (4cd4 <esf_dump+0x23c>)
    4c94:	f7fe fce8 	bl	3668 <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    4c98:	3708      	adds	r7, #8
    4c9a:	46bd      	mov	sp, r7
    4c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ca4:	e70a      	b.n	4abc <esf_dump+0x24>
    4ca6:	f06f 0c1b 	mvn.w	ip, #27
    4caa:	e71f      	b.n	4aec <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4cb0:	e74b      	b.n	4b4a <esf_dump+0xb2>
    4cb2:	f06f 0c1b 	mvn.w	ip, #27
    4cb6:	e760      	b.n	4b7a <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4cbc:	e787      	b.n	4bce <esf_dump+0x136>
    4cbe:	f06f 0c1b 	mvn.w	ip, #27
    4cc2:	e793      	b.n	4bec <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4cc8:	e7b9      	b.n	4c3e <esf_dump+0x1a6>
    4cca:	f06f 041b 	mvn.w	r4, #27
    4cce:	e7c2      	b.n	4c56 <esf_dump+0x1be>
    4cd0:	0001476c 	.word	0x0001476c
    4cd4:	00013aac 	.word	0x00013aac
    4cd8:	0001479c 	.word	0x0001479c
    4cdc:	000147cc 	.word	0x000147cc
    4ce0:	000147dc 	.word	0x000147dc

00004ce4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4ce4:	2800      	cmp	r0, #0
    4ce6:	db07      	blt.n	4cf8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ce8:	f000 021f 	and.w	r2, r0, #31
    4cec:	0940      	lsrs	r0, r0, #5
    4cee:	2301      	movs	r3, #1
    4cf0:	4093      	lsls	r3, r2
    4cf2:	4a02      	ldr	r2, [pc, #8]	; (4cfc <__NVIC_EnableIRQ+0x18>)
    4cf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    4cf8:	4770      	bx	lr
    4cfa:	bf00      	nop
    4cfc:	e000e100 	.word	0xe000e100

00004d00 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4d00:	2800      	cmp	r0, #0
    4d02:	db0c      	blt.n	4d1e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d04:	f000 021f 	and.w	r2, r0, #31
    4d08:	0940      	lsrs	r0, r0, #5
    4d0a:	2301      	movs	r3, #1
    4d0c:	4093      	lsls	r3, r2
    4d0e:	3020      	adds	r0, #32
    4d10:	4a03      	ldr	r2, [pc, #12]	; (4d20 <__NVIC_DisableIRQ+0x20>)
    4d12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4d16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d1a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4d1e:	4770      	bx	lr
    4d20:	e000e100 	.word	0xe000e100

00004d24 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4d24:	2800      	cmp	r0, #0
    4d26:	db08      	blt.n	4d3a <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d28:	0149      	lsls	r1, r1, #5
    4d2a:	b2c9      	uxtb	r1, r1
    4d2c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4d30:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4d34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    4d38:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d3a:	f000 000f 	and.w	r0, r0, #15
    4d3e:	0149      	lsls	r1, r1, #5
    4d40:	b2c9      	uxtb	r1, r1
    4d42:	4b01      	ldr	r3, [pc, #4]	; (4d48 <__NVIC_SetPriority+0x24>)
    4d44:	5419      	strb	r1, [r3, r0]
  }
}
    4d46:	4770      	bx	lr
    4d48:	e000ed14 	.word	0xe000ed14

00004d4c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4d4c:	0942      	lsrs	r2, r0, #5
    4d4e:	4b05      	ldr	r3, [pc, #20]	; (4d64 <arch_irq_is_enabled+0x18>)
    4d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4d54:	f000 001f 	and.w	r0, r0, #31
    4d58:	2301      	movs	r3, #1
    4d5a:	fa03 f000 	lsl.w	r0, r3, r0
}
    4d5e:	4010      	ands	r0, r2
    4d60:	4770      	bx	lr
    4d62:	bf00      	nop
    4d64:	e000e100 	.word	0xe000e100

00004d68 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d6a:	4604      	mov	r4, r0
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4d6c:	1c4e      	adds	r6, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4d6e:	2e07      	cmp	r6, #7
    4d70:	d804      	bhi.n	4d7c <z_arm_irq_priority_set+0x14>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4d72:	4631      	mov	r1, r6
    4d74:	b260      	sxtb	r0, r4
    4d76:	f7ff ffd5 	bl	4d24 <__NVIC_SetPriority>
}
    4d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d7c:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4d7e:	4f09      	ldr	r7, [pc, #36]	; (4da4 <z_arm_irq_priority_set+0x3c>)
    4d80:	235b      	movs	r3, #91	; 0x5b
    4d82:	463a      	mov	r2, r7
    4d84:	4908      	ldr	r1, [pc, #32]	; (4da8 <z_arm_irq_priority_set+0x40>)
    4d86:	4809      	ldr	r0, [pc, #36]	; (4dac <z_arm_irq_priority_set+0x44>)
    4d88:	f00b fcd6 	bl	10738 <assert_print>
    4d8c:	2307      	movs	r3, #7
    4d8e:	4622      	mov	r2, r4
    4d90:	4629      	mov	r1, r5
    4d92:	4807      	ldr	r0, [pc, #28]	; (4db0 <z_arm_irq_priority_set+0x48>)
    4d94:	f00b fcd0 	bl	10738 <assert_print>
    4d98:	215b      	movs	r1, #91	; 0x5b
    4d9a:	4638      	mov	r0, r7
    4d9c:	f00b fcc5 	bl	1072a <assert_post_action>
    4da0:	e7e7      	b.n	4d72 <z_arm_irq_priority_set+0xa>
    4da2:	bf00      	nop
    4da4:	0001480c 	.word	0x0001480c
    4da8:	00014844 	.word	0x00014844
    4dac:	00013d44 	.word	0x00013d44
    4db0:	00014860 	.word	0x00014860

00004db4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4db4:	bf30      	wfi
    b z_SysNmiOnReset
    4db6:	f7ff bffd 	b.w	4db4 <z_SysNmiOnReset>
    4dba:	bf00      	nop

00004dbc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4dbc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4dbe:	4b0b      	ldr	r3, [pc, #44]	; (4dec <z_arm_prep_c+0x30>)
    4dc0:	4a0b      	ldr	r2, [pc, #44]	; (4df0 <z_arm_prep_c+0x34>)
    4dc2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4dc6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4dc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4dcc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4dd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4dd4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4ddc:	f007 fac2 	bl	c364 <z_bss_zero>
	z_data_copy();
    4de0:	f009 ffbe 	bl	ed60 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4de4:	f001 f806 	bl	5df4 <z_arm_interrupt_init>
	z_cstart();
    4de8:	f007 fb18 	bl	c41c <z_cstart>
    4dec:	e000ed00 	.word	0xe000ed00
    4df0:	00000000 	.word	0x00000000

00004df4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4df4:	4a0a      	ldr	r2, [pc, #40]	; (4e20 <arch_swap+0x2c>)
    4df6:	6893      	ldr	r3, [r2, #8]
    4df8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4dfc:	4909      	ldr	r1, [pc, #36]	; (4e24 <arch_swap+0x30>)
    4dfe:	6809      	ldr	r1, [r1, #0]
    4e00:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4e04:	4908      	ldr	r1, [pc, #32]	; (4e28 <arch_swap+0x34>)
    4e06:	684b      	ldr	r3, [r1, #4]
    4e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4e0c:	604b      	str	r3, [r1, #4]
    4e0e:	2300      	movs	r3, #0
    4e10:	f383 8811 	msr	BASEPRI, r3
    4e14:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4e18:	6893      	ldr	r3, [r2, #8]
}
    4e1a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    4e1e:	4770      	bx	lr
    4e20:	20002734 	.word	0x20002734
    4e24:	00016424 	.word	0x00016424
    4e28:	e000ed00 	.word	0xe000ed00

00004e2c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4e2c:	4914      	ldr	r1, [pc, #80]	; (4e80 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4e2e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4e30:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4e34:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4e36:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4e3a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4e3e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4e40:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4e44:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4e48:	4f0e      	ldr	r7, [pc, #56]	; (4e84 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4e4a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4e4e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4e50:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4e52:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4e54:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4e58:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4e5a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4e5e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4e62:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4e66:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4e6a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    4e6e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    4e72:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    4e74:	f00c f971 	bl	1115a <configure_builtin_stack_guard>
    pop {r2, lr}
    4e78:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4e7c:	4770      	bx	lr
    4e7e:	0000      	.short	0x0000
    ldr r1, =_kernel
    4e80:	20002734 	.word	0x20002734
    ldr v4, =_SCS_ICSR
    4e84:	e000ed04 	.word	0xe000ed04

00004e88 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4e88:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4e8c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4e8e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4e92:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4e96:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4e98:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4e9c:	2902      	cmp	r1, #2
    beq _oops
    4e9e:	d0ff      	beq.n	4ea0 <_oops>

00004ea0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4ea0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4ea2:	f00c f93e 	bl	11122 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4ea6:	bd01      	pop	{r0, pc}

00004ea8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4ea8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4eaa:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4eae:	490e      	ldr	r1, [pc, #56]	; (4ee8 <arch_new_thread+0x40>)
    4eb0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4eb4:	f021 0101 	bic.w	r1, r1, #1
    4eb8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4ebc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4ec0:	9b01      	ldr	r3, [sp, #4]
    4ec2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4ec6:	9b02      	ldr	r3, [sp, #8]
    4ec8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4ecc:	9b03      	ldr	r3, [sp, #12]
    4ece:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4ed6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    4eda:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4edc:	2300      	movs	r3, #0
    4ede:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4ee2:	bc10      	pop	{r4}
    4ee4:	4770      	bx	lr
    4ee6:	bf00      	nop
    4ee8:	0000ff53 	.word	0x0000ff53

00004eec <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4eec:	4b09      	ldr	r3, [pc, #36]	; (4f14 <arch_switch_to_main_thread+0x28>)
    4eee:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    4ef0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4ef4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4ef8:	4610      	mov	r0, r2
    4efa:	f381 8809 	msr	PSP, r1
    4efe:	2100      	movs	r1, #0
    4f00:	b663      	cpsie	if
    4f02:	f381 8811 	msr	BASEPRI, r1
    4f06:	f3bf 8f6f 	isb	sy
    4f0a:	2200      	movs	r2, #0
    4f0c:	2300      	movs	r3, #0
    4f0e:	f00b f820 	bl	ff52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4f12:	bf00      	nop
    4f14:	20002734 	.word	0x20002734

00004f18 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4f18:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4f1a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4f1c:	4a0b      	ldr	r2, [pc, #44]	; (4f4c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4f1e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4f20:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4f22:	bf1e      	ittt	ne
	movne	r1, #0
    4f24:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4f26:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4f28:	f00e fa48 	blne	133bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4f2c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4f2e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4f32:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4f36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4f3a:	4905      	ldr	r1, [pc, #20]	; (4f50 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4f3c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4f3e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4f40:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4f42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4f46:	4903      	ldr	r1, [pc, #12]	; (4f54 <_isr_wrapper+0x3c>)
	bx r1
    4f48:	4708      	bx	r1
    4f4a:	0000      	.short	0x0000
	ldr r2, =_kernel
    4f4c:	20002734 	.word	0x20002734
	ldr r1, =_sw_isr_table
    4f50:	000137f4 	.word	0x000137f4
	ldr r1, =z_arm_int_exit
    4f54:	00004f59 	.word	0x00004f59

00004f58 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4f58:	4b04      	ldr	r3, [pc, #16]	; (4f6c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4f5a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4f5c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4f5e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4f60:	d003      	beq.n	4f6a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4f62:	4903      	ldr	r1, [pc, #12]	; (4f70 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4f68:	600a      	str	r2, [r1, #0]

00004f6a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4f6a:	4770      	bx	lr
	ldr r3, =_kernel
    4f6c:	20002734 	.word	0x20002734
	ldr r1, =_SCS_ICSR
    4f70:	e000ed04 	.word	0xe000ed04

00004f74 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    4f74:	b510      	push	{r4, lr}
    4f76:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    4f78:	2400      	movs	r4, #0
    4f7a:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4f7c:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    4f80:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    4f84:	d134      	bne.n	4ff0 <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4f86:	f002 040c 	and.w	r4, r2, #12
    4f8a:	2c08      	cmp	r4, #8
    4f8c:	d005      	beq.n	4f9a <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4f8e:	f012 0f08 	tst.w	r2, #8
    4f92:	d02a      	beq.n	4fea <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    4f94:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    4f96:	b008      	add	sp, #32
    4f98:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4f9a:	4b16      	ldr	r3, [pc, #88]	; (4ff4 <get_esf+0x80>)
    4f9c:	9307      	str	r3, [sp, #28]
    4f9e:	2302      	movs	r3, #2
    4fa0:	f88d 3004 	strb.w	r3, [sp, #4]
    4fa4:	2400      	movs	r4, #0
    4fa6:	f88d 4005 	strb.w	r4, [sp, #5]
    4faa:	f88d 4006 	strb.w	r4, [sp, #6]
    4fae:	f88d 4007 	strb.w	r4, [sp, #7]
    4fb2:	9b01      	ldr	r3, [sp, #4]
    4fb4:	9306      	str	r3, [sp, #24]
    4fb6:	4621      	mov	r1, r4
    4fb8:	f364 0100 	bfi	r1, r4, #0, #1
    4fbc:	f364 0141 	bfi	r1, r4, #1, #1
    4fc0:	f364 0182 	bfi	r1, r4, #2, #1
    4fc4:	f364 01c5 	bfi	r1, r4, #3, #3
    4fc8:	2301      	movs	r3, #1
    4fca:	f363 1188 	bfi	r1, r3, #6, #3
    4fce:	2308      	movs	r3, #8
    4fd0:	f363 2152 	bfi	r1, r3, #9, #10
    4fd4:	f364 41de 	bfi	r1, r4, #19, #12
    4fd8:	f364 71df 	bfi	r1, r4, #31, #1
    4fdc:	4623      	mov	r3, r4
    4fde:	aa06      	add	r2, sp, #24
    4fe0:	4805      	ldr	r0, [pc, #20]	; (4ff8 <get_esf+0x84>)
    4fe2:	f7fe fb41 	bl	3668 <z_impl_z_log_msg_static_create>
		return NULL;
    4fe6:	4620      	mov	r0, r4
    4fe8:	e7d5      	b.n	4f96 <get_esf+0x22>
			*nested_exc = true;
    4fea:	2201      	movs	r2, #1
    4fec:	701a      	strb	r2, [r3, #0]
    4fee:	e7d2      	b.n	4f96 <get_esf+0x22>
		return NULL;
    4ff0:	2000      	movs	r0, #0
    4ff2:	e7d0      	b.n	4f96 <get_esf+0x22>
    4ff4:	000148a0 	.word	0x000148a0
    4ff8:	00013aac 	.word	0x00013aac

00004ffc <mem_manage_fault>:
{
    4ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5000:	b0a6      	sub	sp, #152	; 0x98
    5002:	af00      	add	r7, sp, #0
    5004:	4605      	mov	r5, r0
    5006:	460e      	mov	r6, r1
    5008:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    500a:	4bbc      	ldr	r3, [pc, #752]	; (52fc <mem_manage_fault+0x300>)
    500c:	61fb      	str	r3, [r7, #28]
    500e:	2302      	movs	r3, #2
    5010:	713b      	strb	r3, [r7, #4]
    5012:	2300      	movs	r3, #0
    5014:	717b      	strb	r3, [r7, #5]
    5016:	71bb      	strb	r3, [r7, #6]
    5018:	71fb      	strb	r3, [r7, #7]
    501a:	687a      	ldr	r2, [r7, #4]
    501c:	61ba      	str	r2, [r7, #24]
    501e:	4619      	mov	r1, r3
    5020:	f363 0100 	bfi	r1, r3, #0, #1
    5024:	f363 0141 	bfi	r1, r3, #1, #1
    5028:	f363 0182 	bfi	r1, r3, #2, #1
    502c:	f363 01c5 	bfi	r1, r3, #3, #3
    5030:	2201      	movs	r2, #1
    5032:	f362 1188 	bfi	r1, r2, #6, #3
    5036:	2208      	movs	r2, #8
    5038:	f362 2152 	bfi	r1, r2, #9, #10
    503c:	f363 41de 	bfi	r1, r3, #19, #12
    5040:	f363 71df 	bfi	r1, r3, #31, #1
    5044:	f107 0218 	add.w	r2, r7, #24
    5048:	48ad      	ldr	r0, [pc, #692]	; (5300 <mem_manage_fault+0x304>)
    504a:	f7fe fb0d 	bl	3668 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    504e:	4bad      	ldr	r3, [pc, #692]	; (5304 <mem_manage_fault+0x308>)
    5050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5052:	f013 0f10 	tst.w	r3, #16
    5056:	d13e      	bne.n	50d6 <mem_manage_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5058:	4baa      	ldr	r3, [pc, #680]	; (5304 <mem_manage_fault+0x308>)
    505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    505c:	f013 0f08 	tst.w	r3, #8
    5060:	d15c      	bne.n	511c <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5062:	4ba8      	ldr	r3, [pc, #672]	; (5304 <mem_manage_fault+0x308>)
    5064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5066:	f013 0f02 	tst.w	r3, #2
    506a:	d17a      	bne.n	5162 <mem_manage_fault+0x166>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    506c:	4ba5      	ldr	r3, [pc, #660]	; (5304 <mem_manage_fault+0x308>)
    506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5070:	f013 0f01 	tst.w	r3, #1
    5074:	f040 80e9 	bne.w	524a <mem_manage_fault+0x24e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5078:	4ba2      	ldr	r3, [pc, #648]	; (5304 <mem_manage_fault+0x308>)
    507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    507c:	f013 0f20 	tst.w	r3, #32
    5080:	f040 8106 	bne.w	5290 <mem_manage_fault+0x294>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5084:	4b9f      	ldr	r3, [pc, #636]	; (5304 <mem_manage_fault+0x308>)
    5086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5088:	f013 0f10 	tst.w	r3, #16
    508c:	d104      	bne.n	5098 <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    508e:	4b9d      	ldr	r3, [pc, #628]	; (5304 <mem_manage_fault+0x308>)
    5090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5092:	f013 0f02 	tst.w	r3, #2
    5096:	d005      	beq.n	50a4 <mem_manage_fault+0xa8>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    5098:	4b9a      	ldr	r3, [pc, #616]	; (5304 <mem_manage_fault+0x308>)
    509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    509c:	f013 0f10 	tst.w	r3, #16
    50a0:	f040 811b 	bne.w	52da <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    50a4:	4b97      	ldr	r3, [pc, #604]	; (5304 <mem_manage_fault+0x308>)
    50a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50a8:	f013 0f20 	tst.w	r3, #32
    50ac:	d004      	beq.n	50b8 <mem_manage_fault+0xbc>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    50ae:	4a95      	ldr	r2, [pc, #596]	; (5304 <mem_manage_fault+0x308>)
    50b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    50b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    50b6:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    50b8:	4a92      	ldr	r2, [pc, #584]	; (5304 <mem_manage_fault+0x308>)
    50ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    50bc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    50c0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    50c2:	2101      	movs	r1, #1
    50c4:	4628      	mov	r0, r5
    50c6:	f00c f84d 	bl	11164 <memory_fault_recoverable>
    50ca:	7020      	strb	r0, [r4, #0]
}
    50cc:	2000      	movs	r0, #0
    50ce:	3798      	adds	r7, #152	; 0x98
    50d0:	46bd      	mov	sp, r7
    50d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    50d6:	4b8c      	ldr	r3, [pc, #560]	; (5308 <mem_manage_fault+0x30c>)
    50d8:	637b      	str	r3, [r7, #52]	; 0x34
    50da:	2302      	movs	r3, #2
    50dc:	713b      	strb	r3, [r7, #4]
    50de:	2300      	movs	r3, #0
    50e0:	717b      	strb	r3, [r7, #5]
    50e2:	71bb      	strb	r3, [r7, #6]
    50e4:	71fb      	strb	r3, [r7, #7]
    50e6:	687a      	ldr	r2, [r7, #4]
    50e8:	633a      	str	r2, [r7, #48]	; 0x30
    50ea:	4619      	mov	r1, r3
    50ec:	f363 0100 	bfi	r1, r3, #0, #1
    50f0:	f363 0141 	bfi	r1, r3, #1, #1
    50f4:	f363 0182 	bfi	r1, r3, #2, #1
    50f8:	f363 01c5 	bfi	r1, r3, #3, #3
    50fc:	2201      	movs	r2, #1
    50fe:	f362 1188 	bfi	r1, r2, #6, #3
    5102:	2208      	movs	r2, #8
    5104:	f362 2152 	bfi	r1, r2, #9, #10
    5108:	f363 41de 	bfi	r1, r3, #19, #12
    510c:	f363 71df 	bfi	r1, r3, #31, #1
    5110:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5114:	487a      	ldr	r0, [pc, #488]	; (5300 <mem_manage_fault+0x304>)
    5116:	f7fe faa7 	bl	3668 <z_impl_z_log_msg_static_create>
    511a:	e79d      	b.n	5058 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    511c:	4b7b      	ldr	r3, [pc, #492]	; (530c <mem_manage_fault+0x310>)
    511e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5120:	2302      	movs	r3, #2
    5122:	713b      	strb	r3, [r7, #4]
    5124:	2300      	movs	r3, #0
    5126:	717b      	strb	r3, [r7, #5]
    5128:	71bb      	strb	r3, [r7, #6]
    512a:	71fb      	strb	r3, [r7, #7]
    512c:	687a      	ldr	r2, [r7, #4]
    512e:	64ba      	str	r2, [r7, #72]	; 0x48
    5130:	4619      	mov	r1, r3
    5132:	f363 0100 	bfi	r1, r3, #0, #1
    5136:	f363 0141 	bfi	r1, r3, #1, #1
    513a:	f363 0182 	bfi	r1, r3, #2, #1
    513e:	f363 01c5 	bfi	r1, r3, #3, #3
    5142:	2201      	movs	r2, #1
    5144:	f362 1188 	bfi	r1, r2, #6, #3
    5148:	2208      	movs	r2, #8
    514a:	f362 2152 	bfi	r1, r2, #9, #10
    514e:	f363 41de 	bfi	r1, r3, #19, #12
    5152:	f363 71df 	bfi	r1, r3, #31, #1
    5156:	f107 0248 	add.w	r2, r7, #72	; 0x48
    515a:	4869      	ldr	r0, [pc, #420]	; (5300 <mem_manage_fault+0x304>)
    515c:	f7fe fa84 	bl	3668 <z_impl_z_log_msg_static_create>
    5160:	e77f      	b.n	5062 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    5162:	4b6b      	ldr	r3, [pc, #428]	; (5310 <mem_manage_fault+0x314>)
    5164:	667b      	str	r3, [r7, #100]	; 0x64
    5166:	2302      	movs	r3, #2
    5168:	713b      	strb	r3, [r7, #4]
    516a:	2300      	movs	r3, #0
    516c:	717b      	strb	r3, [r7, #5]
    516e:	71bb      	strb	r3, [r7, #6]
    5170:	71fb      	strb	r3, [r7, #7]
    5172:	687a      	ldr	r2, [r7, #4]
    5174:	663a      	str	r2, [r7, #96]	; 0x60
    5176:	4619      	mov	r1, r3
    5178:	f363 0100 	bfi	r1, r3, #0, #1
    517c:	f363 0141 	bfi	r1, r3, #1, #1
    5180:	f363 0182 	bfi	r1, r3, #2, #1
    5184:	f363 01c5 	bfi	r1, r3, #3, #3
    5188:	2201      	movs	r2, #1
    518a:	f362 1188 	bfi	r1, r2, #6, #3
    518e:	2208      	movs	r2, #8
    5190:	f362 2152 	bfi	r1, r2, #9, #10
    5194:	f363 41de 	bfi	r1, r3, #19, #12
    5198:	f363 71df 	bfi	r1, r3, #31, #1
    519c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    51a0:	4857      	ldr	r0, [pc, #348]	; (5300 <mem_manage_fault+0x304>)
    51a2:	f7fe fa61 	bl	3668 <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    51a6:	4b57      	ldr	r3, [pc, #348]	; (5304 <mem_manage_fault+0x308>)
    51a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    51aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    51b0:	f43f af5c 	beq.w	506c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    51b4:	46e8      	mov	r8, sp
    51b6:	b088      	sub	sp, #32
    51b8:	466b      	mov	r3, sp
    51ba:	f113 0210 	adds.w	r2, r3, #16
    51be:	d011      	beq.n	51e4 <mem_manage_fault+0x1e8>
    51c0:	210c      	movs	r1, #12
    51c2:	b152      	cbz	r2, 51da <mem_manage_fault+0x1de>
    51c4:	468c      	mov	ip, r1
    51c6:	2904      	cmp	r1, #4
    51c8:	dd03      	ble.n	51d2 <mem_manage_fault+0x1d6>
    51ca:	f8df e148 	ldr.w	lr, [pc, #328]	; 5314 <mem_manage_fault+0x318>
    51ce:	f8c3 e014 	str.w	lr, [r3, #20]
    51d2:	f1bc 0f08 	cmp.w	ip, #8
    51d6:	dd08      	ble.n	51ea <mem_manage_fault+0x1ee>
    51d8:	6198      	str	r0, [r3, #24]
    51da:	290b      	cmp	r1, #11
    51dc:	dd32      	ble.n	5244 <mem_manage_fault+0x248>
    51de:	f04f 0c0c 	mov.w	ip, #12
    51e2:	e004      	b.n	51ee <mem_manage_fault+0x1f2>
    51e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    51e8:	e7eb      	b.n	51c2 <mem_manage_fault+0x1c6>
    51ea:	f06f 0c1b 	mvn.w	ip, #27
    51ee:	b13a      	cbz	r2, 5200 <mem_manage_fault+0x204>
    51f0:	2103      	movs	r1, #3
    51f2:	7139      	strb	r1, [r7, #4]
    51f4:	2100      	movs	r1, #0
    51f6:	7179      	strb	r1, [r7, #5]
    51f8:	71b9      	strb	r1, [r7, #6]
    51fa:	71f9      	strb	r1, [r7, #7]
    51fc:	6878      	ldr	r0, [r7, #4]
    51fe:	6118      	str	r0, [r3, #16]
    5200:	2100      	movs	r1, #0
    5202:	f36f 0100 	bfc	r1, #0, #1
    5206:	f36f 0141 	bfc	r1, #1, #1
    520a:	f36f 0182 	bfc	r1, #2, #1
    520e:	f36f 01c5 	bfc	r1, #3, #3
    5212:	2301      	movs	r3, #1
    5214:	f363 1188 	bfi	r1, r3, #6, #3
    5218:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    521c:	f363 2152 	bfi	r1, r3, #9, #10
    5220:	f36f 41de 	bfc	r1, #19, #12
    5224:	f36f 71df 	bfc	r1, #31, #1
    5228:	2300      	movs	r3, #0
    522a:	4835      	ldr	r0, [pc, #212]	; (5300 <mem_manage_fault+0x304>)
    522c:	f7fe fa1c 	bl	3668 <z_impl_z_log_msg_static_create>
    5230:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    5232:	2e00      	cmp	r6, #0
    5234:	f43f af1a 	beq.w	506c <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5238:	4a32      	ldr	r2, [pc, #200]	; (5304 <mem_manage_fault+0x308>)
    523a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    523c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5240:	6293      	str	r3, [r2, #40]	; 0x28
    5242:	e713      	b.n	506c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5244:	f06f 0c1b 	mvn.w	ip, #27
    5248:	e7d1      	b.n	51ee <mem_manage_fault+0x1f2>
		PR_FAULT_INFO("  Instruction Access Violation");
    524a:	4b33      	ldr	r3, [pc, #204]	; (5318 <mem_manage_fault+0x31c>)
    524c:	67fb      	str	r3, [r7, #124]	; 0x7c
    524e:	2302      	movs	r3, #2
    5250:	713b      	strb	r3, [r7, #4]
    5252:	2300      	movs	r3, #0
    5254:	717b      	strb	r3, [r7, #5]
    5256:	71bb      	strb	r3, [r7, #6]
    5258:	71fb      	strb	r3, [r7, #7]
    525a:	687a      	ldr	r2, [r7, #4]
    525c:	67ba      	str	r2, [r7, #120]	; 0x78
    525e:	4619      	mov	r1, r3
    5260:	f363 0100 	bfi	r1, r3, #0, #1
    5264:	f363 0141 	bfi	r1, r3, #1, #1
    5268:	f363 0182 	bfi	r1, r3, #2, #1
    526c:	f363 01c5 	bfi	r1, r3, #3, #3
    5270:	2201      	movs	r2, #1
    5272:	f362 1188 	bfi	r1, r2, #6, #3
    5276:	2208      	movs	r2, #8
    5278:	f362 2152 	bfi	r1, r2, #9, #10
    527c:	f363 41de 	bfi	r1, r3, #19, #12
    5280:	f363 71df 	bfi	r1, r3, #31, #1
    5284:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5288:	481d      	ldr	r0, [pc, #116]	; (5300 <mem_manage_fault+0x304>)
    528a:	f7fe f9ed 	bl	3668 <z_impl_z_log_msg_static_create>
    528e:	e6f3      	b.n	5078 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
    5290:	4b22      	ldr	r3, [pc, #136]	; (531c <mem_manage_fault+0x320>)
    5292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    5296:	2302      	movs	r3, #2
    5298:	713b      	strb	r3, [r7, #4]
    529a:	2300      	movs	r3, #0
    529c:	717b      	strb	r3, [r7, #5]
    529e:	71bb      	strb	r3, [r7, #6]
    52a0:	71fb      	strb	r3, [r7, #7]
    52a2:	687a      	ldr	r2, [r7, #4]
    52a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    52a8:	4619      	mov	r1, r3
    52aa:	f363 0100 	bfi	r1, r3, #0, #1
    52ae:	f363 0141 	bfi	r1, r3, #1, #1
    52b2:	f363 0182 	bfi	r1, r3, #2, #1
    52b6:	f363 01c5 	bfi	r1, r3, #3, #3
    52ba:	2201      	movs	r2, #1
    52bc:	f362 1188 	bfi	r1, r2, #6, #3
    52c0:	2208      	movs	r2, #8
    52c2:	f362 2152 	bfi	r1, r2, #9, #10
    52c6:	f363 41de 	bfi	r1, r3, #19, #12
    52ca:	f363 71df 	bfi	r1, r3, #31, #1
    52ce:	f107 0290 	add.w	r2, r7, #144	; 0x90
    52d2:	480b      	ldr	r0, [pc, #44]	; (5300 <mem_manage_fault+0x304>)
    52d4:	f7fe f9c8 	bl	3668 <z_impl_z_log_msg_static_create>
    52d8:	e6d4      	b.n	5084 <mem_manage_fault+0x88>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    52da:	4e11      	ldr	r6, [pc, #68]	; (5320 <mem_manage_fault+0x324>)
    52dc:	f240 1359 	movw	r3, #345	; 0x159
    52e0:	4632      	mov	r2, r6
    52e2:	4910      	ldr	r1, [pc, #64]	; (5324 <mem_manage_fault+0x328>)
    52e4:	4810      	ldr	r0, [pc, #64]	; (5328 <mem_manage_fault+0x32c>)
    52e6:	f00b fa27 	bl	10738 <assert_print>
    52ea:	4810      	ldr	r0, [pc, #64]	; (532c <mem_manage_fault+0x330>)
    52ec:	f00b fa24 	bl	10738 <assert_print>
    52f0:	f240 1159 	movw	r1, #345	; 0x159
    52f4:	4630      	mov	r0, r6
    52f6:	f00b fa18 	bl	1072a <assert_post_action>
    52fa:	e6d3      	b.n	50a4 <mem_manage_fault+0xa8>
    52fc:	000148cc 	.word	0x000148cc
    5300:	00013aac 	.word	0x00013aac
    5304:	e000ed00 	.word	0xe000ed00
    5308:	000148e4 	.word	0x000148e4
    530c:	00014918 	.word	0x00014918
    5310:	0001492c 	.word	0x0001492c
    5314:	00014944 	.word	0x00014944
    5318:	0001495c 	.word	0x0001495c
    531c:	0001497c 	.word	0x0001497c
    5320:	000149ac 	.word	0x000149ac
    5324:	000149e8 	.word	0x000149e8
    5328:	00013d44 	.word	0x00013d44
    532c:	00014a34 	.word	0x00014a34

00005330 <bus_fault>:
{
    5330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5334:	b0ac      	sub	sp, #176	; 0xb0
    5336:	af00      	add	r7, sp, #0
    5338:	4605      	mov	r5, r0
    533a:	460e      	mov	r6, r1
    533c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    533e:	4bbc      	ldr	r3, [pc, #752]	; (5630 <bus_fault+0x300>)
    5340:	61fb      	str	r3, [r7, #28]
    5342:	2302      	movs	r3, #2
    5344:	713b      	strb	r3, [r7, #4]
    5346:	2300      	movs	r3, #0
    5348:	717b      	strb	r3, [r7, #5]
    534a:	71bb      	strb	r3, [r7, #6]
    534c:	71fb      	strb	r3, [r7, #7]
    534e:	687a      	ldr	r2, [r7, #4]
    5350:	61ba      	str	r2, [r7, #24]
    5352:	4619      	mov	r1, r3
    5354:	f363 0100 	bfi	r1, r3, #0, #1
    5358:	f363 0141 	bfi	r1, r3, #1, #1
    535c:	f363 0182 	bfi	r1, r3, #2, #1
    5360:	f363 01c5 	bfi	r1, r3, #3, #3
    5364:	2201      	movs	r2, #1
    5366:	f362 1188 	bfi	r1, r2, #6, #3
    536a:	2208      	movs	r2, #8
    536c:	f362 2152 	bfi	r1, r2, #9, #10
    5370:	f363 41de 	bfi	r1, r3, #19, #12
    5374:	f363 71df 	bfi	r1, r3, #31, #1
    5378:	f107 0218 	add.w	r2, r7, #24
    537c:	48ad      	ldr	r0, [pc, #692]	; (5634 <bus_fault+0x304>)
    537e:	f7fe f973 	bl	3668 <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5382:	4bad      	ldr	r3, [pc, #692]	; (5638 <bus_fault+0x308>)
    5384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5386:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    538a:	d12a      	bne.n	53e2 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    538c:	4baa      	ldr	r3, [pc, #680]	; (5638 <bus_fault+0x308>)
    538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5390:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5394:	d148      	bne.n	5428 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5396:	4ba8      	ldr	r3, [pc, #672]	; (5638 <bus_fault+0x308>)
    5398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    539a:	f413 7f00 	tst.w	r3, #512	; 0x200
    539e:	d166      	bne.n	546e <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    53a0:	4ba5      	ldr	r3, [pc, #660]	; (5638 <bus_fault+0x308>)
    53a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    53a8:	f040 80d5 	bne.w	5556 <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    53ac:	4ba2      	ldr	r3, [pc, #648]	; (5638 <bus_fault+0x308>)
    53ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    53b4:	f040 80f2 	bne.w	559c <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    53b8:	4b9f      	ldr	r3, [pc, #636]	; (5638 <bus_fault+0x308>)
    53ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    53c0:	f040 8111 	bne.w	55e6 <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    53c4:	4a9c      	ldr	r2, [pc, #624]	; (5638 <bus_fault+0x308>)
    53c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    53c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    53cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    53ce:	2101      	movs	r1, #1
    53d0:	4628      	mov	r0, r5
    53d2:	f00b fec7 	bl	11164 <memory_fault_recoverable>
    53d6:	7020      	strb	r0, [r4, #0]
}
    53d8:	2000      	movs	r0, #0
    53da:	37b0      	adds	r7, #176	; 0xb0
    53dc:	46bd      	mov	sp, r7
    53de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    53e2:	4b96      	ldr	r3, [pc, #600]	; (563c <bus_fault+0x30c>)
    53e4:	637b      	str	r3, [r7, #52]	; 0x34
    53e6:	2302      	movs	r3, #2
    53e8:	713b      	strb	r3, [r7, #4]
    53ea:	2300      	movs	r3, #0
    53ec:	717b      	strb	r3, [r7, #5]
    53ee:	71bb      	strb	r3, [r7, #6]
    53f0:	71fb      	strb	r3, [r7, #7]
    53f2:	687a      	ldr	r2, [r7, #4]
    53f4:	633a      	str	r2, [r7, #48]	; 0x30
    53f6:	4619      	mov	r1, r3
    53f8:	f363 0100 	bfi	r1, r3, #0, #1
    53fc:	f363 0141 	bfi	r1, r3, #1, #1
    5400:	f363 0182 	bfi	r1, r3, #2, #1
    5404:	f363 01c5 	bfi	r1, r3, #3, #3
    5408:	2201      	movs	r2, #1
    540a:	f362 1188 	bfi	r1, r2, #6, #3
    540e:	2208      	movs	r2, #8
    5410:	f362 2152 	bfi	r1, r2, #9, #10
    5414:	f363 41de 	bfi	r1, r3, #19, #12
    5418:	f363 71df 	bfi	r1, r3, #31, #1
    541c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5420:	4884      	ldr	r0, [pc, #528]	; (5634 <bus_fault+0x304>)
    5422:	f7fe f921 	bl	3668 <z_impl_z_log_msg_static_create>
    5426:	e7b1      	b.n	538c <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    5428:	4b85      	ldr	r3, [pc, #532]	; (5640 <bus_fault+0x310>)
    542a:	64fb      	str	r3, [r7, #76]	; 0x4c
    542c:	2302      	movs	r3, #2
    542e:	713b      	strb	r3, [r7, #4]
    5430:	2300      	movs	r3, #0
    5432:	717b      	strb	r3, [r7, #5]
    5434:	71bb      	strb	r3, [r7, #6]
    5436:	71fb      	strb	r3, [r7, #7]
    5438:	687a      	ldr	r2, [r7, #4]
    543a:	64ba      	str	r2, [r7, #72]	; 0x48
    543c:	4619      	mov	r1, r3
    543e:	f363 0100 	bfi	r1, r3, #0, #1
    5442:	f363 0141 	bfi	r1, r3, #1, #1
    5446:	f363 0182 	bfi	r1, r3, #2, #1
    544a:	f363 01c5 	bfi	r1, r3, #3, #3
    544e:	2201      	movs	r2, #1
    5450:	f362 1188 	bfi	r1, r2, #6, #3
    5454:	2208      	movs	r2, #8
    5456:	f362 2152 	bfi	r1, r2, #9, #10
    545a:	f363 41de 	bfi	r1, r3, #19, #12
    545e:	f363 71df 	bfi	r1, r3, #31, #1
    5462:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5466:	4873      	ldr	r0, [pc, #460]	; (5634 <bus_fault+0x304>)
    5468:	f7fe f8fe 	bl	3668 <z_impl_z_log_msg_static_create>
    546c:	e793      	b.n	5396 <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    546e:	4b75      	ldr	r3, [pc, #468]	; (5644 <bus_fault+0x314>)
    5470:	667b      	str	r3, [r7, #100]	; 0x64
    5472:	2302      	movs	r3, #2
    5474:	713b      	strb	r3, [r7, #4]
    5476:	2300      	movs	r3, #0
    5478:	717b      	strb	r3, [r7, #5]
    547a:	71bb      	strb	r3, [r7, #6]
    547c:	71fb      	strb	r3, [r7, #7]
    547e:	687a      	ldr	r2, [r7, #4]
    5480:	663a      	str	r2, [r7, #96]	; 0x60
    5482:	4619      	mov	r1, r3
    5484:	f363 0100 	bfi	r1, r3, #0, #1
    5488:	f363 0141 	bfi	r1, r3, #1, #1
    548c:	f363 0182 	bfi	r1, r3, #2, #1
    5490:	f363 01c5 	bfi	r1, r3, #3, #3
    5494:	2201      	movs	r2, #1
    5496:	f362 1188 	bfi	r1, r2, #6, #3
    549a:	2208      	movs	r2, #8
    549c:	f362 2152 	bfi	r1, r2, #9, #10
    54a0:	f363 41de 	bfi	r1, r3, #19, #12
    54a4:	f363 71df 	bfi	r1, r3, #31, #1
    54a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
    54ac:	4861      	ldr	r0, [pc, #388]	; (5634 <bus_fault+0x304>)
    54ae:	f7fe f8db 	bl	3668 <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    54b2:	4b61      	ldr	r3, [pc, #388]	; (5638 <bus_fault+0x308>)
    54b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    54b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    54bc:	f43f af70 	beq.w	53a0 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    54c0:	46e8      	mov	r8, sp
    54c2:	b088      	sub	sp, #32
    54c4:	466b      	mov	r3, sp
    54c6:	f113 0210 	adds.w	r2, r3, #16
    54ca:	d011      	beq.n	54f0 <bus_fault+0x1c0>
    54cc:	210c      	movs	r1, #12
    54ce:	b152      	cbz	r2, 54e6 <bus_fault+0x1b6>
    54d0:	468c      	mov	ip, r1
    54d2:	2904      	cmp	r1, #4
    54d4:	dd03      	ble.n	54de <bus_fault+0x1ae>
    54d6:	f8df e170 	ldr.w	lr, [pc, #368]	; 5648 <bus_fault+0x318>
    54da:	f8c3 e014 	str.w	lr, [r3, #20]
    54de:	f1bc 0f08 	cmp.w	ip, #8
    54e2:	dd08      	ble.n	54f6 <bus_fault+0x1c6>
    54e4:	6198      	str	r0, [r3, #24]
    54e6:	290b      	cmp	r1, #11
    54e8:	dd32      	ble.n	5550 <bus_fault+0x220>
    54ea:	f04f 0c0c 	mov.w	ip, #12
    54ee:	e004      	b.n	54fa <bus_fault+0x1ca>
    54f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    54f4:	e7eb      	b.n	54ce <bus_fault+0x19e>
    54f6:	f06f 0c1b 	mvn.w	ip, #27
    54fa:	b13a      	cbz	r2, 550c <bus_fault+0x1dc>
    54fc:	2103      	movs	r1, #3
    54fe:	7139      	strb	r1, [r7, #4]
    5500:	2100      	movs	r1, #0
    5502:	7179      	strb	r1, [r7, #5]
    5504:	71b9      	strb	r1, [r7, #6]
    5506:	71f9      	strb	r1, [r7, #7]
    5508:	6878      	ldr	r0, [r7, #4]
    550a:	6118      	str	r0, [r3, #16]
    550c:	2100      	movs	r1, #0
    550e:	f36f 0100 	bfc	r1, #0, #1
    5512:	f36f 0141 	bfc	r1, #1, #1
    5516:	f36f 0182 	bfc	r1, #2, #1
    551a:	f36f 01c5 	bfc	r1, #3, #3
    551e:	2301      	movs	r3, #1
    5520:	f363 1188 	bfi	r1, r3, #6, #3
    5524:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    5528:	f363 2152 	bfi	r1, r3, #9, #10
    552c:	f36f 41de 	bfc	r1, #19, #12
    5530:	f36f 71df 	bfc	r1, #31, #1
    5534:	2300      	movs	r3, #0
    5536:	483f      	ldr	r0, [pc, #252]	; (5634 <bus_fault+0x304>)
    5538:	f7fe f896 	bl	3668 <z_impl_z_log_msg_static_create>
    553c:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    553e:	2e00      	cmp	r6, #0
    5540:	f43f af2e 	beq.w	53a0 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5544:	4a3c      	ldr	r2, [pc, #240]	; (5638 <bus_fault+0x308>)
    5546:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    554c:	6293      	str	r3, [r2, #40]	; 0x28
    554e:	e727      	b.n	53a0 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5550:	f06f 0c1b 	mvn.w	ip, #27
    5554:	e7d1      	b.n	54fa <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
    5556:	4b3d      	ldr	r3, [pc, #244]	; (564c <bus_fault+0x31c>)
    5558:	67fb      	str	r3, [r7, #124]	; 0x7c
    555a:	2302      	movs	r3, #2
    555c:	713b      	strb	r3, [r7, #4]
    555e:	2300      	movs	r3, #0
    5560:	717b      	strb	r3, [r7, #5]
    5562:	71bb      	strb	r3, [r7, #6]
    5564:	71fb      	strb	r3, [r7, #7]
    5566:	687a      	ldr	r2, [r7, #4]
    5568:	67ba      	str	r2, [r7, #120]	; 0x78
    556a:	4619      	mov	r1, r3
    556c:	f363 0100 	bfi	r1, r3, #0, #1
    5570:	f363 0141 	bfi	r1, r3, #1, #1
    5574:	f363 0182 	bfi	r1, r3, #2, #1
    5578:	f363 01c5 	bfi	r1, r3, #3, #3
    557c:	2201      	movs	r2, #1
    557e:	f362 1188 	bfi	r1, r2, #6, #3
    5582:	2208      	movs	r2, #8
    5584:	f362 2152 	bfi	r1, r2, #9, #10
    5588:	f363 41de 	bfi	r1, r3, #19, #12
    558c:	f363 71df 	bfi	r1, r3, #31, #1
    5590:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5594:	4827      	ldr	r0, [pc, #156]	; (5634 <bus_fault+0x304>)
    5596:	f7fe f867 	bl	3668 <z_impl_z_log_msg_static_create>
    559a:	e707      	b.n	53ac <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    559c:	4b2c      	ldr	r3, [pc, #176]	; (5650 <bus_fault+0x320>)
    559e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    55a2:	2302      	movs	r3, #2
    55a4:	713b      	strb	r3, [r7, #4]
    55a6:	2300      	movs	r3, #0
    55a8:	717b      	strb	r3, [r7, #5]
    55aa:	71bb      	strb	r3, [r7, #6]
    55ac:	71fb      	strb	r3, [r7, #7]
    55ae:	687a      	ldr	r2, [r7, #4]
    55b0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    55b4:	4619      	mov	r1, r3
    55b6:	f363 0100 	bfi	r1, r3, #0, #1
    55ba:	f363 0141 	bfi	r1, r3, #1, #1
    55be:	f363 0182 	bfi	r1, r3, #2, #1
    55c2:	f363 01c5 	bfi	r1, r3, #3, #3
    55c6:	2201      	movs	r2, #1
    55c8:	f362 1188 	bfi	r1, r2, #6, #3
    55cc:	2208      	movs	r2, #8
    55ce:	f362 2152 	bfi	r1, r2, #9, #10
    55d2:	f363 41de 	bfi	r1, r3, #19, #12
    55d6:	f363 71df 	bfi	r1, r3, #31, #1
    55da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    55de:	4815      	ldr	r0, [pc, #84]	; (5634 <bus_fault+0x304>)
    55e0:	f7fe f842 	bl	3668 <z_impl_z_log_msg_static_create>
    55e4:	e6ee      	b.n	53c4 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    55e6:	4b1b      	ldr	r3, [pc, #108]	; (5654 <bus_fault+0x324>)
    55e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    55ec:	2302      	movs	r3, #2
    55ee:	713b      	strb	r3, [r7, #4]
    55f0:	2300      	movs	r3, #0
    55f2:	717b      	strb	r3, [r7, #5]
    55f4:	71bb      	strb	r3, [r7, #6]
    55f6:	71fb      	strb	r3, [r7, #7]
    55f8:	687a      	ldr	r2, [r7, #4]
    55fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    55fe:	4619      	mov	r1, r3
    5600:	f363 0100 	bfi	r1, r3, #0, #1
    5604:	f363 0141 	bfi	r1, r3, #1, #1
    5608:	f363 0182 	bfi	r1, r3, #2, #1
    560c:	f363 01c5 	bfi	r1, r3, #3, #3
    5610:	2201      	movs	r2, #1
    5612:	f362 1188 	bfi	r1, r2, #6, #3
    5616:	2208      	movs	r2, #8
    5618:	f362 2152 	bfi	r1, r2, #9, #10
    561c:	f363 41de 	bfi	r1, r3, #19, #12
    5620:	f363 71df 	bfi	r1, r3, #31, #1
    5624:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5628:	4802      	ldr	r0, [pc, #8]	; (5634 <bus_fault+0x304>)
    562a:	f7fe f81d 	bl	3668 <z_impl_z_log_msg_static_create>
    562e:	e6c9      	b.n	53c4 <bus_fault+0x94>
    5630:	00014a98 	.word	0x00014a98
    5634:	00013aac 	.word	0x00013aac
    5638:	e000ed00 	.word	0xe000ed00
    563c:	00014ab0 	.word	0x00014ab0
    5640:	00014918 	.word	0x00014918
    5644:	00014ac4 	.word	0x00014ac4
    5648:	00014ae0 	.word	0x00014ae0
    564c:	00014af8 	.word	0x00014af8
    5650:	00014b14 	.word	0x00014b14
    5654:	0001497c 	.word	0x0001497c

00005658 <usage_fault>:
{
    5658:	b510      	push	{r4, lr}
    565a:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
    565c:	4baf      	ldr	r3, [pc, #700]	; (591c <usage_fault+0x2c4>)
    565e:	9307      	str	r3, [sp, #28]
    5660:	2302      	movs	r3, #2
    5662:	f88d 3004 	strb.w	r3, [sp, #4]
    5666:	2300      	movs	r3, #0
    5668:	f88d 3005 	strb.w	r3, [sp, #5]
    566c:	f88d 3006 	strb.w	r3, [sp, #6]
    5670:	f88d 3007 	strb.w	r3, [sp, #7]
    5674:	9a01      	ldr	r2, [sp, #4]
    5676:	9206      	str	r2, [sp, #24]
    5678:	4619      	mov	r1, r3
    567a:	f363 0100 	bfi	r1, r3, #0, #1
    567e:	f363 0141 	bfi	r1, r3, #1, #1
    5682:	f363 0182 	bfi	r1, r3, #2, #1
    5686:	f363 01c5 	bfi	r1, r3, #3, #3
    568a:	2201      	movs	r2, #1
    568c:	f362 1188 	bfi	r1, r2, #6, #3
    5690:	2208      	movs	r2, #8
    5692:	f362 2152 	bfi	r1, r2, #9, #10
    5696:	f363 41de 	bfi	r1, r3, #19, #12
    569a:	f363 71df 	bfi	r1, r3, #31, #1
    569e:	aa06      	add	r2, sp, #24
    56a0:	489f      	ldr	r0, [pc, #636]	; (5920 <usage_fault+0x2c8>)
    56a2:	f7fd ffe1 	bl	3668 <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    56a6:	4b9f      	ldr	r3, [pc, #636]	; (5924 <usage_fault+0x2cc>)
    56a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    56ae:	d12b      	bne.n	5708 <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    56b0:	4b9c      	ldr	r3, [pc, #624]	; (5924 <usage_fault+0x2cc>)
    56b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    56b8:	d14c      	bne.n	5754 <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    56ba:	4b9a      	ldr	r3, [pc, #616]	; (5924 <usage_fault+0x2cc>)
    56bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    56be:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    56c2:	d16d      	bne.n	57a0 <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    56c4:	4b97      	ldr	r3, [pc, #604]	; (5924 <usage_fault+0x2cc>)
    56c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56c8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    56cc:	f040 808e 	bne.w	57ec <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    56d0:	4b94      	ldr	r3, [pc, #592]	; (5924 <usage_fault+0x2cc>)
    56d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    56d8:	f040 80ae 	bne.w	5838 <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    56dc:	4b91      	ldr	r3, [pc, #580]	; (5924 <usage_fault+0x2cc>)
    56de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    56e4:	f040 80ce 	bne.w	5884 <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    56e8:	4b8e      	ldr	r3, [pc, #568]	; (5924 <usage_fault+0x2cc>)
    56ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    56ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56f0:	f040 80ee 	bne.w	58d0 <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    56f4:	4a8b      	ldr	r2, [pc, #556]	; (5924 <usage_fault+0x2cc>)
    56f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    56f8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    56fc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5700:	6293      	str	r3, [r2, #40]	; 0x28
}
    5702:	4620      	mov	r0, r4
    5704:	b032      	add	sp, #200	; 0xc8
    5706:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    5708:	4b87      	ldr	r3, [pc, #540]	; (5928 <usage_fault+0x2d0>)
    570a:	930d      	str	r3, [sp, #52]	; 0x34
    570c:	2302      	movs	r3, #2
    570e:	f88d 3004 	strb.w	r3, [sp, #4]
    5712:	2300      	movs	r3, #0
    5714:	f88d 3005 	strb.w	r3, [sp, #5]
    5718:	f88d 3006 	strb.w	r3, [sp, #6]
    571c:	f88d 3007 	strb.w	r3, [sp, #7]
    5720:	9a01      	ldr	r2, [sp, #4]
    5722:	920c      	str	r2, [sp, #48]	; 0x30
    5724:	4619      	mov	r1, r3
    5726:	f363 0100 	bfi	r1, r3, #0, #1
    572a:	f363 0141 	bfi	r1, r3, #1, #1
    572e:	f363 0182 	bfi	r1, r3, #2, #1
    5732:	f363 01c5 	bfi	r1, r3, #3, #3
    5736:	2201      	movs	r2, #1
    5738:	f362 1188 	bfi	r1, r2, #6, #3
    573c:	2208      	movs	r2, #8
    573e:	f362 2152 	bfi	r1, r2, #9, #10
    5742:	f363 41de 	bfi	r1, r3, #19, #12
    5746:	f363 71df 	bfi	r1, r3, #31, #1
    574a:	aa0c      	add	r2, sp, #48	; 0x30
    574c:	4874      	ldr	r0, [pc, #464]	; (5920 <usage_fault+0x2c8>)
    574e:	f7fd ff8b 	bl	3668 <z_impl_z_log_msg_static_create>
    5752:	e7ad      	b.n	56b0 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    5754:	4b75      	ldr	r3, [pc, #468]	; (592c <usage_fault+0x2d4>)
    5756:	9313      	str	r3, [sp, #76]	; 0x4c
    5758:	2302      	movs	r3, #2
    575a:	f88d 3004 	strb.w	r3, [sp, #4]
    575e:	2300      	movs	r3, #0
    5760:	f88d 3005 	strb.w	r3, [sp, #5]
    5764:	f88d 3006 	strb.w	r3, [sp, #6]
    5768:	f88d 3007 	strb.w	r3, [sp, #7]
    576c:	9a01      	ldr	r2, [sp, #4]
    576e:	9212      	str	r2, [sp, #72]	; 0x48
    5770:	4619      	mov	r1, r3
    5772:	f363 0100 	bfi	r1, r3, #0, #1
    5776:	f363 0141 	bfi	r1, r3, #1, #1
    577a:	f363 0182 	bfi	r1, r3, #2, #1
    577e:	f363 01c5 	bfi	r1, r3, #3, #3
    5782:	2201      	movs	r2, #1
    5784:	f362 1188 	bfi	r1, r2, #6, #3
    5788:	2208      	movs	r2, #8
    578a:	f362 2152 	bfi	r1, r2, #9, #10
    578e:	f363 41de 	bfi	r1, r3, #19, #12
    5792:	f363 71df 	bfi	r1, r3, #31, #1
    5796:	aa12      	add	r2, sp, #72	; 0x48
    5798:	4861      	ldr	r0, [pc, #388]	; (5920 <usage_fault+0x2c8>)
    579a:	f7fd ff65 	bl	3668 <z_impl_z_log_msg_static_create>
    579e:	e78c      	b.n	56ba <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    57a0:	4b63      	ldr	r3, [pc, #396]	; (5930 <usage_fault+0x2d8>)
    57a2:	9319      	str	r3, [sp, #100]	; 0x64
    57a4:	2402      	movs	r4, #2
    57a6:	f88d 4004 	strb.w	r4, [sp, #4]
    57aa:	2300      	movs	r3, #0
    57ac:	f88d 3005 	strb.w	r3, [sp, #5]
    57b0:	f88d 3006 	strb.w	r3, [sp, #6]
    57b4:	f88d 3007 	strb.w	r3, [sp, #7]
    57b8:	9a01      	ldr	r2, [sp, #4]
    57ba:	9218      	str	r2, [sp, #96]	; 0x60
    57bc:	4619      	mov	r1, r3
    57be:	f363 0100 	bfi	r1, r3, #0, #1
    57c2:	f363 0141 	bfi	r1, r3, #1, #1
    57c6:	f363 0182 	bfi	r1, r3, #2, #1
    57ca:	f363 01c5 	bfi	r1, r3, #3, #3
    57ce:	2201      	movs	r2, #1
    57d0:	f362 1188 	bfi	r1, r2, #6, #3
    57d4:	2208      	movs	r2, #8
    57d6:	f362 2152 	bfi	r1, r2, #9, #10
    57da:	f363 41de 	bfi	r1, r3, #19, #12
    57de:	f363 71df 	bfi	r1, r3, #31, #1
    57e2:	aa18      	add	r2, sp, #96	; 0x60
    57e4:	484e      	ldr	r0, [pc, #312]	; (5920 <usage_fault+0x2c8>)
    57e6:	f7fd ff3f 	bl	3668 <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
    57ea:	e76b      	b.n	56c4 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    57ec:	4b51      	ldr	r3, [pc, #324]	; (5934 <usage_fault+0x2dc>)
    57ee:	931f      	str	r3, [sp, #124]	; 0x7c
    57f0:	2302      	movs	r3, #2
    57f2:	f88d 3004 	strb.w	r3, [sp, #4]
    57f6:	2300      	movs	r3, #0
    57f8:	f88d 3005 	strb.w	r3, [sp, #5]
    57fc:	f88d 3006 	strb.w	r3, [sp, #6]
    5800:	f88d 3007 	strb.w	r3, [sp, #7]
    5804:	9a01      	ldr	r2, [sp, #4]
    5806:	921e      	str	r2, [sp, #120]	; 0x78
    5808:	4619      	mov	r1, r3
    580a:	f363 0100 	bfi	r1, r3, #0, #1
    580e:	f363 0141 	bfi	r1, r3, #1, #1
    5812:	f363 0182 	bfi	r1, r3, #2, #1
    5816:	f363 01c5 	bfi	r1, r3, #3, #3
    581a:	2201      	movs	r2, #1
    581c:	f362 1188 	bfi	r1, r2, #6, #3
    5820:	2208      	movs	r2, #8
    5822:	f362 2152 	bfi	r1, r2, #9, #10
    5826:	f363 41de 	bfi	r1, r3, #19, #12
    582a:	f363 71df 	bfi	r1, r3, #31, #1
    582e:	aa1e      	add	r2, sp, #120	; 0x78
    5830:	483b      	ldr	r0, [pc, #236]	; (5920 <usage_fault+0x2c8>)
    5832:	f7fd ff19 	bl	3668 <z_impl_z_log_msg_static_create>
    5836:	e74b      	b.n	56d0 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5838:	4b3f      	ldr	r3, [pc, #252]	; (5938 <usage_fault+0x2e0>)
    583a:	9325      	str	r3, [sp, #148]	; 0x94
    583c:	2302      	movs	r3, #2
    583e:	f88d 3004 	strb.w	r3, [sp, #4]
    5842:	2300      	movs	r3, #0
    5844:	f88d 3005 	strb.w	r3, [sp, #5]
    5848:	f88d 3006 	strb.w	r3, [sp, #6]
    584c:	f88d 3007 	strb.w	r3, [sp, #7]
    5850:	9a01      	ldr	r2, [sp, #4]
    5852:	9224      	str	r2, [sp, #144]	; 0x90
    5854:	4619      	mov	r1, r3
    5856:	f363 0100 	bfi	r1, r3, #0, #1
    585a:	f363 0141 	bfi	r1, r3, #1, #1
    585e:	f363 0182 	bfi	r1, r3, #2, #1
    5862:	f363 01c5 	bfi	r1, r3, #3, #3
    5866:	2201      	movs	r2, #1
    5868:	f362 1188 	bfi	r1, r2, #6, #3
    586c:	2208      	movs	r2, #8
    586e:	f362 2152 	bfi	r1, r2, #9, #10
    5872:	f363 41de 	bfi	r1, r3, #19, #12
    5876:	f363 71df 	bfi	r1, r3, #31, #1
    587a:	aa24      	add	r2, sp, #144	; 0x90
    587c:	4828      	ldr	r0, [pc, #160]	; (5920 <usage_fault+0x2c8>)
    587e:	f7fd fef3 	bl	3668 <z_impl_z_log_msg_static_create>
    5882:	e72b      	b.n	56dc <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5884:	4b2d      	ldr	r3, [pc, #180]	; (593c <usage_fault+0x2e4>)
    5886:	932b      	str	r3, [sp, #172]	; 0xac
    5888:	2302      	movs	r3, #2
    588a:	f88d 3004 	strb.w	r3, [sp, #4]
    588e:	2300      	movs	r3, #0
    5890:	f88d 3005 	strb.w	r3, [sp, #5]
    5894:	f88d 3006 	strb.w	r3, [sp, #6]
    5898:	f88d 3007 	strb.w	r3, [sp, #7]
    589c:	9a01      	ldr	r2, [sp, #4]
    589e:	922a      	str	r2, [sp, #168]	; 0xa8
    58a0:	4619      	mov	r1, r3
    58a2:	f363 0100 	bfi	r1, r3, #0, #1
    58a6:	f363 0141 	bfi	r1, r3, #1, #1
    58aa:	f363 0182 	bfi	r1, r3, #2, #1
    58ae:	f363 01c5 	bfi	r1, r3, #3, #3
    58b2:	2201      	movs	r2, #1
    58b4:	f362 1188 	bfi	r1, r2, #6, #3
    58b8:	2208      	movs	r2, #8
    58ba:	f362 2152 	bfi	r1, r2, #9, #10
    58be:	f363 41de 	bfi	r1, r3, #19, #12
    58c2:	f363 71df 	bfi	r1, r3, #31, #1
    58c6:	aa2a      	add	r2, sp, #168	; 0xa8
    58c8:	4815      	ldr	r0, [pc, #84]	; (5920 <usage_fault+0x2c8>)
    58ca:	f7fd fecd 	bl	3668 <z_impl_z_log_msg_static_create>
    58ce:	e70b      	b.n	56e8 <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    58d0:	4b1b      	ldr	r3, [pc, #108]	; (5940 <usage_fault+0x2e8>)
    58d2:	9331      	str	r3, [sp, #196]	; 0xc4
    58d4:	2302      	movs	r3, #2
    58d6:	f88d 3004 	strb.w	r3, [sp, #4]
    58da:	2300      	movs	r3, #0
    58dc:	f88d 3005 	strb.w	r3, [sp, #5]
    58e0:	f88d 3006 	strb.w	r3, [sp, #6]
    58e4:	f88d 3007 	strb.w	r3, [sp, #7]
    58e8:	9a01      	ldr	r2, [sp, #4]
    58ea:	9230      	str	r2, [sp, #192]	; 0xc0
    58ec:	4619      	mov	r1, r3
    58ee:	f363 0100 	bfi	r1, r3, #0, #1
    58f2:	f363 0141 	bfi	r1, r3, #1, #1
    58f6:	f363 0182 	bfi	r1, r3, #2, #1
    58fa:	f363 01c5 	bfi	r1, r3, #3, #3
    58fe:	2201      	movs	r2, #1
    5900:	f362 1188 	bfi	r1, r2, #6, #3
    5904:	2208      	movs	r2, #8
    5906:	f362 2152 	bfi	r1, r2, #9, #10
    590a:	f363 41de 	bfi	r1, r3, #19, #12
    590e:	f363 71df 	bfi	r1, r3, #31, #1
    5912:	aa30      	add	r2, sp, #192	; 0xc0
    5914:	4802      	ldr	r0, [pc, #8]	; (5920 <usage_fault+0x2c8>)
    5916:	f7fd fea7 	bl	3668 <z_impl_z_log_msg_static_create>
    591a:	e6eb      	b.n	56f4 <usage_fault+0x9c>
    591c:	00014b2c 	.word	0x00014b2c
    5920:	00013aac 	.word	0x00013aac
    5924:	e000ed00 	.word	0xe000ed00
    5928:	00014b44 	.word	0x00014b44
    592c:	00014b58 	.word	0x00014b58
    5930:	00014b74 	.word	0x00014b74
    5934:	00014ba0 	.word	0x00014ba0
    5938:	00014bc0 	.word	0x00014bc0
    593c:	00014be8 	.word	0x00014be8
    5940:	00014c04 	.word	0x00014c04

00005944 <hard_fault>:
{
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
    5946:	b09b      	sub	sp, #108	; 0x6c
    5948:	af00      	add	r7, sp, #0
    594a:	4606      	mov	r6, r0
    594c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    594e:	4b98      	ldr	r3, [pc, #608]	; (5bb0 <hard_fault+0x26c>)
    5950:	61fb      	str	r3, [r7, #28]
    5952:	2302      	movs	r3, #2
    5954:	713b      	strb	r3, [r7, #4]
    5956:	2400      	movs	r4, #0
    5958:	717c      	strb	r4, [r7, #5]
    595a:	71bc      	strb	r4, [r7, #6]
    595c:	71fc      	strb	r4, [r7, #7]
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	61bb      	str	r3, [r7, #24]
    5962:	4621      	mov	r1, r4
    5964:	f364 0100 	bfi	r1, r4, #0, #1
    5968:	f364 0141 	bfi	r1, r4, #1, #1
    596c:	f364 0182 	bfi	r1, r4, #2, #1
    5970:	f364 01c5 	bfi	r1, r4, #3, #3
    5974:	2301      	movs	r3, #1
    5976:	f363 1188 	bfi	r1, r3, #6, #3
    597a:	2308      	movs	r3, #8
    597c:	f363 2152 	bfi	r1, r3, #9, #10
    5980:	f364 41de 	bfi	r1, r4, #19, #12
    5984:	f364 71df 	bfi	r1, r4, #31, #1
    5988:	4623      	mov	r3, r4
    598a:	f107 0218 	add.w	r2, r7, #24
    598e:	4889      	ldr	r0, [pc, #548]	; (5bb4 <hard_fault+0x270>)
    5990:	f7fd fe6a 	bl	3668 <z_impl_z_log_msg_static_create>
	*recoverable = false;
    5994:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5996:	4b88      	ldr	r3, [pc, #544]	; (5bb8 <hard_fault+0x274>)
    5998:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    599a:	f014 0402 	ands.w	r4, r4, #2
    599e:	d149      	bne.n	5a34 <hard_fault+0xf0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    59a0:	4b85      	ldr	r3, [pc, #532]	; (5bb8 <hard_fault+0x274>)
    59a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59a4:	2b00      	cmp	r3, #0
    59a6:	db6c      	blt.n	5a82 <hard_fault+0x13e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    59a8:	4b83      	ldr	r3, [pc, #524]	; (5bb8 <hard_fault+0x274>)
    59aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    59ac:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    59b0:	f000 80ec 	beq.w	5b8c <hard_fault+0x248>
		PR_EXC("  Fault escalation (see below)");
    59b4:	4b81      	ldr	r3, [pc, #516]	; (5bbc <hard_fault+0x278>)
    59b6:	637b      	str	r3, [r7, #52]	; 0x34
    59b8:	2302      	movs	r3, #2
    59ba:	713b      	strb	r3, [r7, #4]
    59bc:	2300      	movs	r3, #0
    59be:	717b      	strb	r3, [r7, #5]
    59c0:	71bb      	strb	r3, [r7, #6]
    59c2:	71fb      	strb	r3, [r7, #7]
    59c4:	687a      	ldr	r2, [r7, #4]
    59c6:	633a      	str	r2, [r7, #48]	; 0x30
    59c8:	4619      	mov	r1, r3
    59ca:	f363 0100 	bfi	r1, r3, #0, #1
    59ce:	f363 0141 	bfi	r1, r3, #1, #1
    59d2:	f363 0182 	bfi	r1, r3, #2, #1
    59d6:	f363 01c5 	bfi	r1, r3, #3, #3
    59da:	2201      	movs	r2, #1
    59dc:	f362 1188 	bfi	r1, r2, #6, #3
    59e0:	2208      	movs	r2, #8
    59e2:	f362 2152 	bfi	r1, r2, #9, #10
    59e6:	f363 41de 	bfi	r1, r3, #19, #12
    59ea:	f363 71df 	bfi	r1, r3, #31, #1
    59ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
    59f2:	4870      	ldr	r0, [pc, #448]	; (5bb4 <hard_fault+0x270>)
    59f4:	f7fd fe38 	bl	3668 <z_impl_z_log_msg_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    59f8:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    59fa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    59fe:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5a02:	429a      	cmp	r2, r3
    5a04:	d060      	beq.n	5ac8 <hard_fault+0x184>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5a06:	4b6c      	ldr	r3, [pc, #432]	; (5bb8 <hard_fault+0x274>)
    5a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a0a:	f013 0fff 	tst.w	r3, #255	; 0xff
    5a0e:	f040 809e 	bne.w	5b4e <hard_fault+0x20a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    5a12:	4b69      	ldr	r3, [pc, #420]	; (5bb8 <hard_fault+0x274>)
    5a14:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5a16:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    5a1a:	f040 809f 	bne.w	5b5c <hard_fault+0x218>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    5a1e:	4b66      	ldr	r3, [pc, #408]	; (5bb8 <hard_fault+0x274>)
    5a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5a26:	f0c0 80a0 	bcc.w	5b6a <hard_fault+0x226>
			reason = usage_fault(esf);
    5a2a:	4630      	mov	r0, r6
    5a2c:	f7ff fe14 	bl	5658 <usage_fault>
    5a30:	4604      	mov	r4, r0
    5a32:	e022      	b.n	5a7a <hard_fault+0x136>
		PR_EXC("  Bus fault on vector table read");
    5a34:	4b62      	ldr	r3, [pc, #392]	; (5bc0 <hard_fault+0x27c>)
    5a36:	667b      	str	r3, [r7, #100]	; 0x64
    5a38:	2302      	movs	r3, #2
    5a3a:	713b      	strb	r3, [r7, #4]
    5a3c:	2400      	movs	r4, #0
    5a3e:	717c      	strb	r4, [r7, #5]
    5a40:	71bc      	strb	r4, [r7, #6]
    5a42:	71fc      	strb	r4, [r7, #7]
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	663b      	str	r3, [r7, #96]	; 0x60
    5a48:	4621      	mov	r1, r4
    5a4a:	f364 0100 	bfi	r1, r4, #0, #1
    5a4e:	f364 0141 	bfi	r1, r4, #1, #1
    5a52:	f364 0182 	bfi	r1, r4, #2, #1
    5a56:	f364 01c5 	bfi	r1, r4, #3, #3
    5a5a:	2301      	movs	r3, #1
    5a5c:	f363 1188 	bfi	r1, r3, #6, #3
    5a60:	2308      	movs	r3, #8
    5a62:	f363 2152 	bfi	r1, r3, #9, #10
    5a66:	f364 41de 	bfi	r1, r4, #19, #12
    5a6a:	f364 71df 	bfi	r1, r4, #31, #1
    5a6e:	4623      	mov	r3, r4
    5a70:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5a74:	484f      	ldr	r0, [pc, #316]	; (5bb4 <hard_fault+0x270>)
    5a76:	f7fd fdf7 	bl	3668 <z_impl_z_log_msg_static_create>
}
    5a7a:	4620      	mov	r0, r4
    5a7c:	376c      	adds	r7, #108	; 0x6c
    5a7e:	46bd      	mov	sp, r7
    5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    5a82:	4b50      	ldr	r3, [pc, #320]	; (5bc4 <hard_fault+0x280>)
    5a84:	64fb      	str	r3, [r7, #76]	; 0x4c
    5a86:	2302      	movs	r3, #2
    5a88:	713b      	strb	r3, [r7, #4]
    5a8a:	2300      	movs	r3, #0
    5a8c:	717b      	strb	r3, [r7, #5]
    5a8e:	71bb      	strb	r3, [r7, #6]
    5a90:	71fb      	strb	r3, [r7, #7]
    5a92:	687a      	ldr	r2, [r7, #4]
    5a94:	64ba      	str	r2, [r7, #72]	; 0x48
    5a96:	4619      	mov	r1, r3
    5a98:	f363 0100 	bfi	r1, r3, #0, #1
    5a9c:	f363 0141 	bfi	r1, r3, #1, #1
    5aa0:	f363 0182 	bfi	r1, r3, #2, #1
    5aa4:	f363 01c5 	bfi	r1, r3, #3, #3
    5aa8:	2201      	movs	r2, #1
    5aaa:	f362 1188 	bfi	r1, r2, #6, #3
    5aae:	2208      	movs	r2, #8
    5ab0:	f362 2152 	bfi	r1, r2, #9, #10
    5ab4:	f363 41de 	bfi	r1, r3, #19, #12
    5ab8:	f363 71df 	bfi	r1, r3, #31, #1
    5abc:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5ac0:	483c      	ldr	r0, [pc, #240]	; (5bb4 <hard_fault+0x270>)
    5ac2:	f7fd fdd1 	bl	3668 <z_impl_z_log_msg_static_create>
    5ac6:	e7d8      	b.n	5a7a <hard_fault+0x136>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5ac8:	6834      	ldr	r4, [r6, #0]
    5aca:	466d      	mov	r5, sp
    5acc:	b088      	sub	sp, #32
    5ace:	466b      	mov	r3, sp
    5ad0:	f113 0210 	adds.w	r2, r3, #16
    5ad4:	d00f      	beq.n	5af6 <hard_fault+0x1b2>
    5ad6:	210c      	movs	r1, #12
    5ad8:	b14a      	cbz	r2, 5aee <hard_fault+0x1aa>
    5ada:	4608      	mov	r0, r1
    5adc:	2904      	cmp	r1, #4
    5ade:	dd03      	ble.n	5ae8 <hard_fault+0x1a4>
    5ae0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 5bc8 <hard_fault+0x284>
    5ae4:	f8c3 c014 	str.w	ip, [r3, #20]
    5ae8:	2808      	cmp	r0, #8
    5aea:	dd07      	ble.n	5afc <hard_fault+0x1b8>
    5aec:	619c      	str	r4, [r3, #24]
    5aee:	290b      	cmp	r1, #11
    5af0:	dd2a      	ble.n	5b48 <hard_fault+0x204>
    5af2:	240c      	movs	r4, #12
    5af4:	e004      	b.n	5b00 <hard_fault+0x1bc>
    5af6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5afa:	e7ed      	b.n	5ad8 <hard_fault+0x194>
    5afc:	f06f 041b 	mvn.w	r4, #27
    5b00:	b13a      	cbz	r2, 5b12 <hard_fault+0x1ce>
    5b02:	2103      	movs	r1, #3
    5b04:	7139      	strb	r1, [r7, #4]
    5b06:	2100      	movs	r1, #0
    5b08:	7179      	strb	r1, [r7, #5]
    5b0a:	71b9      	strb	r1, [r7, #6]
    5b0c:	71f9      	strb	r1, [r7, #7]
    5b0e:	6878      	ldr	r0, [r7, #4]
    5b10:	6118      	str	r0, [r3, #16]
    5b12:	2100      	movs	r1, #0
    5b14:	f36f 0100 	bfc	r1, #0, #1
    5b18:	f36f 0141 	bfc	r1, #1, #1
    5b1c:	f36f 0182 	bfc	r1, #2, #1
    5b20:	f36f 01c5 	bfc	r1, #3, #3
    5b24:	2301      	movs	r3, #1
    5b26:	f363 1188 	bfi	r1, r3, #6, #3
    5b2a:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    5b2e:	f364 2152 	bfi	r1, r4, #9, #10
    5b32:	f36f 41de 	bfc	r1, #19, #12
    5b36:	f36f 71df 	bfc	r1, #31, #1
    5b3a:	2300      	movs	r3, #0
    5b3c:	481d      	ldr	r0, [pc, #116]	; (5bb4 <hard_fault+0x270>)
    5b3e:	f7fd fd93 	bl	3668 <z_impl_z_log_msg_static_create>
    5b42:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    5b44:	6834      	ldr	r4, [r6, #0]
    5b46:	e798      	b.n	5a7a <hard_fault+0x136>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5b48:	f06f 041b 	mvn.w	r4, #27
    5b4c:	e7d8      	b.n	5b00 <hard_fault+0x1bc>
			reason = mem_manage_fault(esf, 1, recoverable);
    5b4e:	462a      	mov	r2, r5
    5b50:	2101      	movs	r1, #1
    5b52:	4630      	mov	r0, r6
    5b54:	f7ff fa52 	bl	4ffc <mem_manage_fault>
    5b58:	4604      	mov	r4, r0
    5b5a:	e78e      	b.n	5a7a <hard_fault+0x136>
			reason = bus_fault(esf, 1, recoverable);
    5b5c:	462a      	mov	r2, r5
    5b5e:	2101      	movs	r1, #1
    5b60:	4630      	mov	r0, r6
    5b62:	f7ff fbe5 	bl	5330 <bus_fault>
    5b66:	4604      	mov	r4, r0
    5b68:	e787      	b.n	5a7a <hard_fault+0x136>
			__ASSERT(0,
    5b6a:	4d18      	ldr	r5, [pc, #96]	; (5bcc <hard_fault+0x288>)
    5b6c:	f240 23d7 	movw	r3, #727	; 0x2d7
    5b70:	462a      	mov	r2, r5
    5b72:	4917      	ldr	r1, [pc, #92]	; (5bd0 <hard_fault+0x28c>)
    5b74:	4817      	ldr	r0, [pc, #92]	; (5bd4 <hard_fault+0x290>)
    5b76:	f00a fddf 	bl	10738 <assert_print>
    5b7a:	4817      	ldr	r0, [pc, #92]	; (5bd8 <hard_fault+0x294>)
    5b7c:	f00a fddc 	bl	10738 <assert_print>
    5b80:	f240 21d7 	movw	r1, #727	; 0x2d7
    5b84:	4628      	mov	r0, r5
    5b86:	f00a fdd0 	bl	1072a <assert_post_action>
    5b8a:	e776      	b.n	5a7a <hard_fault+0x136>
		__ASSERT(0,
    5b8c:	4d0f      	ldr	r5, [pc, #60]	; (5bcc <hard_fault+0x288>)
    5b8e:	f240 23db 	movw	r3, #731	; 0x2db
    5b92:	462a      	mov	r2, r5
    5b94:	490e      	ldr	r1, [pc, #56]	; (5bd0 <hard_fault+0x28c>)
    5b96:	480f      	ldr	r0, [pc, #60]	; (5bd4 <hard_fault+0x290>)
    5b98:	f00a fdce 	bl	10738 <assert_print>
    5b9c:	480f      	ldr	r0, [pc, #60]	; (5bdc <hard_fault+0x298>)
    5b9e:	f00a fdcb 	bl	10738 <assert_print>
    5ba2:	f240 21db 	movw	r1, #731	; 0x2db
    5ba6:	4628      	mov	r0, r5
    5ba8:	f00a fdbf 	bl	1072a <assert_post_action>
	return reason;
    5bac:	e765      	b.n	5a7a <hard_fault+0x136>
    5bae:	bf00      	nop
    5bb0:	00014c30 	.word	0x00014c30
    5bb4:	00013aac 	.word	0x00013aac
    5bb8:	e000ed00 	.word	0xe000ed00
    5bbc:	00014c7c 	.word	0x00014c7c
    5bc0:	00014c48 	.word	0x00014c48
    5bc4:	00014c6c 	.word	0x00014c6c
    5bc8:	00014c9c 	.word	0x00014c9c
    5bcc:	000149ac 	.word	0x000149ac
    5bd0:	000156e0 	.word	0x000156e0
    5bd4:	00013d44 	.word	0x00013d44
    5bd8:	00014cb8 	.word	0x00014cb8
    5bdc:	00014cdc 	.word	0x00014cdc

00005be0 <debug_monitor>:
{
    5be0:	b500      	push	{lr}
    5be2:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    5be4:	2300      	movs	r3, #0
    5be6:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    5be8:	4a13      	ldr	r2, [pc, #76]	; (5c38 <debug_monitor+0x58>)
    5bea:	9207      	str	r2, [sp, #28]
    5bec:	2202      	movs	r2, #2
    5bee:	f88d 2004 	strb.w	r2, [sp, #4]
    5bf2:	f88d 3005 	strb.w	r3, [sp, #5]
    5bf6:	f88d 3006 	strb.w	r3, [sp, #6]
    5bfa:	f88d 3007 	strb.w	r3, [sp, #7]
    5bfe:	9a01      	ldr	r2, [sp, #4]
    5c00:	9206      	str	r2, [sp, #24]
    5c02:	4619      	mov	r1, r3
    5c04:	f363 0100 	bfi	r1, r3, #0, #1
    5c08:	f363 0141 	bfi	r1, r3, #1, #1
    5c0c:	f363 0182 	bfi	r1, r3, #2, #1
    5c10:	f363 01c5 	bfi	r1, r3, #3, #3
    5c14:	2201      	movs	r2, #1
    5c16:	f362 1188 	bfi	r1, r2, #6, #3
    5c1a:	2208      	movs	r2, #8
    5c1c:	f362 2152 	bfi	r1, r2, #9, #10
    5c20:	f363 41de 	bfi	r1, r3, #19, #12
    5c24:	f363 71df 	bfi	r1, r3, #31, #1
    5c28:	aa06      	add	r2, sp, #24
    5c2a:	4804      	ldr	r0, [pc, #16]	; (5c3c <debug_monitor+0x5c>)
    5c2c:	f7fd fd1c 	bl	3668 <z_impl_z_log_msg_static_create>
}
    5c30:	b009      	add	sp, #36	; 0x24
    5c32:	f85d fb04 	ldr.w	pc, [sp], #4
    5c36:	bf00      	nop
    5c38:	00014d0c 	.word	0x00014d0c
    5c3c:	00013aac 	.word	0x00013aac

00005c40 <reserved_exception>:
{
    5c40:	b5b0      	push	{r4, r5, r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    5c46:	290f      	cmp	r1, #15
    5c48:	dc4a      	bgt.n	5ce0 <reserved_exception+0xa0>
    5c4a:	4c30      	ldr	r4, [pc, #192]	; (5d0c <reserved_exception+0xcc>)
    5c4c:	3910      	subs	r1, #16
    5c4e:	2302      	movs	r3, #2
    5c50:	713b      	strb	r3, [r7, #4]
    5c52:	b08a      	sub	sp, #40	; 0x28
    5c54:	466b      	mov	r3, sp
    5c56:	f113 0210 	adds.w	r2, r3, #16
    5c5a:	d043      	beq.n	5ce4 <reserved_exception+0xa4>
    5c5c:	f04f 0c11 	mov.w	ip, #17
    5c60:	2a00      	cmp	r2, #0
    5c62:	d042      	beq.n	5cea <reserved_exception+0xaa>
    5c64:	4660      	mov	r0, ip
    5c66:	f1bc 0f04 	cmp.w	ip, #4
    5c6a:	dd01      	ble.n	5c70 <reserved_exception+0x30>
    5c6c:	4d28      	ldr	r5, [pc, #160]	; (5d10 <reserved_exception+0xd0>)
    5c6e:	615d      	str	r5, [r3, #20]
    5c70:	f04f 0e02 	mov.w	lr, #2
    5c74:	f887 e000 	strb.w	lr, [r7]
    5c78:	2808      	cmp	r0, #8
    5c7a:	dd00      	ble.n	5c7e <reserved_exception+0x3e>
    5c7c:	619c      	str	r4, [r3, #24]
    5c7e:	280c      	cmp	r0, #12
    5c80:	dd00      	ble.n	5c84 <reserved_exception+0x44>
    5c82:	61d9      	str	r1, [r3, #28]
    5c84:	f103 0120 	add.w	r1, r3, #32
    5c88:	2000      	movs	r0, #0
    5c8a:	b388      	cbz	r0, 5cf0 <reserved_exception+0xb0>
    5c8c:	f1bc 0f10 	cmp.w	ip, #16
    5c90:	dd38      	ble.n	5d04 <reserved_exception+0xc4>
    5c92:	f04f 0c11 	mov.w	ip, #17
    5c96:	b142      	cbz	r2, 5caa <reserved_exception+0x6a>
    5c98:	2104      	movs	r1, #4
    5c9a:	7139      	strb	r1, [r7, #4]
    5c9c:	2100      	movs	r1, #0
    5c9e:	7179      	strb	r1, [r7, #5]
    5ca0:	71b9      	strb	r1, [r7, #6]
    5ca2:	2101      	movs	r1, #1
    5ca4:	71f9      	strb	r1, [r7, #7]
    5ca6:	6878      	ldr	r0, [r7, #4]
    5ca8:	6118      	str	r0, [r3, #16]
    5caa:	2100      	movs	r1, #0
    5cac:	f36f 0100 	bfc	r1, #0, #1
    5cb0:	f36f 0141 	bfc	r1, #1, #1
    5cb4:	f36f 0182 	bfc	r1, #2, #1
    5cb8:	f36f 01c5 	bfc	r1, #3, #3
    5cbc:	2301      	movs	r3, #1
    5cbe:	f363 1188 	bfi	r1, r3, #6, #3
    5cc2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    5cc6:	f36c 2152 	bfi	r1, ip, #9, #10
    5cca:	f36f 41de 	bfc	r1, #19, #12
    5cce:	f36f 71df 	bfc	r1, #31, #1
    5cd2:	2300      	movs	r3, #0
    5cd4:	480f      	ldr	r0, [pc, #60]	; (5d14 <reserved_exception+0xd4>)
    5cd6:	f7fd fcc7 	bl	3668 <z_impl_z_log_msg_static_create>
}
    5cda:	3708      	adds	r7, #8
    5cdc:	46bd      	mov	sp, r7
    5cde:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    5ce0:	4c0d      	ldr	r4, [pc, #52]	; (5d18 <reserved_exception+0xd8>)
    5ce2:	e7b3      	b.n	5c4c <reserved_exception+0xc>
    5ce4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    5ce8:	e7ba      	b.n	5c60 <reserved_exception+0x20>
    5cea:	2102      	movs	r1, #2
    5cec:	7039      	strb	r1, [r7, #0]
    5cee:	e7cd      	b.n	5c8c <reserved_exception+0x4c>
    5cf0:	f100 0408 	add.w	r4, r0, #8
    5cf4:	eb04 0e07 	add.w	lr, r4, r7
    5cf8:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    5cfc:	f801 eb01 	strb.w	lr, [r1], #1
    5d00:	3001      	adds	r0, #1
    5d02:	e7c2      	b.n	5c8a <reserved_exception+0x4a>
    5d04:	f06f 0c1b 	mvn.w	ip, #27
    5d08:	e7c5      	b.n	5c96 <reserved_exception+0x56>
    5d0a:	bf00      	nop
    5d0c:	00014d30 	.word	0x00014d30
    5d10:	00014d64 	.word	0x00014d64
    5d14:	00013aac 	.word	0x00013aac
    5d18:	00014d48 	.word	0x00014d48

00005d1c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5d1c:	b570      	push	{r4, r5, r6, lr}
    5d1e:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5d20:	4b24      	ldr	r3, [pc, #144]	; (5db4 <z_arm_fault+0x98>)
    5d22:	685c      	ldr	r4, [r3, #4]
    5d24:	f3c4 0408 	ubfx	r4, r4, #0, #9
    5d28:	2300      	movs	r3, #0
    5d2a:	f383 8811 	msr	BASEPRI, r3
    5d2e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    5d32:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    5d36:	f7ff f91d 	bl	4f74 <get_esf>
	__ASSERT(esf != NULL,
    5d3a:	4605      	mov	r5, r0
    5d3c:	b158      	cbz	r0, 5d56 <z_arm_fault+0x3a>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    5d3e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    5d42:	4621      	mov	r1, r4
    5d44:	4628      	mov	r0, r5
    5d46:	f00b fa0f 	bl	11168 <fault_handle>
    5d4a:	4604      	mov	r4, r0
	if (recoverable) {
    5d4c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    5d50:	b193      	cbz	r3, 5d78 <z_arm_fault+0x5c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    5d52:	b00a      	add	sp, #40	; 0x28
    5d54:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(esf != NULL,
    5d56:	4e18      	ldr	r6, [pc, #96]	; (5db8 <z_arm_fault+0x9c>)
    5d58:	f240 4305 	movw	r3, #1029	; 0x405
    5d5c:	4632      	mov	r2, r6
    5d5e:	4917      	ldr	r1, [pc, #92]	; (5dbc <z_arm_fault+0xa0>)
    5d60:	4817      	ldr	r0, [pc, #92]	; (5dc0 <z_arm_fault+0xa4>)
    5d62:	f00a fce9 	bl	10738 <assert_print>
    5d66:	4817      	ldr	r0, [pc, #92]	; (5dc4 <z_arm_fault+0xa8>)
    5d68:	f00a fce6 	bl	10738 <assert_print>
    5d6c:	f240 4105 	movw	r1, #1029	; 0x405
    5d70:	4630      	mov	r0, r6
    5d72:	f00a fcda 	bl	1072a <assert_post_action>
    5d76:	e7e2      	b.n	5d3e <z_arm_fault+0x22>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5d78:	2220      	movs	r2, #32
    5d7a:	4629      	mov	r1, r5
    5d7c:	a801      	add	r0, sp, #4
    5d7e:	f00b facd 	bl	1131c <memcpy>
	if (nested_exc) {
    5d82:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    5d86:	b14b      	cbz	r3, 5d9c <z_arm_fault+0x80>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5d88:	9b08      	ldr	r3, [sp, #32]
    5d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5d8e:	b95a      	cbnz	r2, 5da8 <z_arm_fault+0x8c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5d90:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5d94:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    5d98:	9308      	str	r3, [sp, #32]
    5d9a:	e005      	b.n	5da8 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5d9c:	9b08      	ldr	r3, [sp, #32]
    5d9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5da2:	f023 0301 	bic.w	r3, r3, #1
    5da6:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    5da8:	a901      	add	r1, sp, #4
    5daa:	4620      	mov	r0, r4
    5dac:	f00b f9ad 	bl	1110a <z_arm_fatal_error>
    5db0:	e7cf      	b.n	5d52 <z_arm_fault+0x36>
    5db2:	bf00      	nop
    5db4:	e000ed00 	.word	0xe000ed00
    5db8:	000149ac 	.word	0x000149ac
    5dbc:	00014d78 	.word	0x00014d78
    5dc0:	00013d44 	.word	0x00013d44
    5dc4:	00014d8c 	.word	0x00014d8c

00005dc8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5dc8:	4b04      	ldr	r3, [pc, #16]	; (5ddc <z_arm_fault_init+0x14>)
    5dca:	695a      	ldr	r2, [r3, #20]
    5dcc:	f042 0210 	orr.w	r2, r2, #16
    5dd0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    5dd2:	695a      	ldr	r2, [r3, #20]
    5dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    5dd8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    5dda:	4770      	bx	lr
    5ddc:	e000ed00 	.word	0xe000ed00

00005de0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5de0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5de4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5de8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5dea:	4672      	mov	r2, lr
	bl z_arm_fault
    5dec:	f7ff ff96 	bl	5d1c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5df0:	bd01      	pop	{r0, pc}
    5df2:	bf00      	nop

00005df4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5df4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5df6:	e007      	b.n	5e08 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5df8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5dfc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5e00:	2120      	movs	r1, #32
    5e02:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    5e06:	3201      	adds	r2, #1
    5e08:	2a44      	cmp	r2, #68	; 0x44
    5e0a:	dc09      	bgt.n	5e20 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    5e0c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    5e0e:	2b00      	cmp	r3, #0
    5e10:	daf2      	bge.n	5df8 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e12:	f003 030f 	and.w	r3, r3, #15
    5e16:	4903      	ldr	r1, [pc, #12]	; (5e24 <z_arm_interrupt_init+0x30>)
    5e18:	4419      	add	r1, r3
    5e1a:	2320      	movs	r3, #32
    5e1c:	760b      	strb	r3, [r1, #24]
    5e1e:	e7f2      	b.n	5e06 <z_arm_interrupt_init+0x12>
	}
}
    5e20:	4770      	bx	lr
    5e22:	bf00      	nop
    5e24:	e000ecfc 	.word	0xe000ecfc

00005e28 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    5e28:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    5e2a:	4915      	ldr	r1, [pc, #84]	; (5e80 <__start+0x58>)
    strb r0, [r1]
    5e2c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5e2e:	2000      	movs	r0, #0
    msr CONTROL, r0
    5e30:	f380 8814 	msr	CONTROL, r0
    isb
    5e34:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    5e38:	2000      	movs	r0, #0
    msr MSPLIM, r0
    5e3a:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    5e3e:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5e42:	f7fc ffd1 	bl	2de8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5e46:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5e48:	490e      	ldr	r1, [pc, #56]	; (5e84 <__start+0x5c>)
    str r0, [r1]
    5e4a:	6008      	str	r0, [r1, #0]
    dsb
    5e4c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5e50:	480d      	ldr	r0, [pc, #52]	; (5e88 <__start+0x60>)
    msr msp, r0
    5e52:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5e56:	f000 f82f 	bl	5eb8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5e5a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5e5c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5e60:	480a      	ldr	r0, [pc, #40]	; (5e8c <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5e66:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5e68:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5e6c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5e70:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5e72:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5e74:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5e78:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5e7c:	f7fe ff9e 	bl	4dbc <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    5e80:	20002974 	.word	0x20002974
    ldr r1, =_SCS_MPU_CTRL
    5e84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5e88:	20004ab8 	.word	0x20004ab8
    ldr r0, =z_interrupt_stacks
    5e8c:	20003d78 	.word	0x20003d78

00005e90 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5e90:	4b08      	ldr	r3, [pc, #32]	; (5eb4 <z_arm_clear_arm_mpu_config+0x24>)
    5e92:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    5e96:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    5e9a:	2300      	movs	r3, #0
    5e9c:	e006      	b.n	5eac <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    5e9e:	4a05      	ldr	r2, [pc, #20]	; (5eb4 <z_arm_clear_arm_mpu_config+0x24>)
    5ea0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    5ea4:	2100      	movs	r1, #0
    5ea6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5eaa:	3301      	adds	r3, #1
    5eac:	4283      	cmp	r3, r0
    5eae:	dbf6      	blt.n	5e9e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    5eb0:	4770      	bx	lr
    5eb2:	bf00      	nop
    5eb4:	e000ed00 	.word	0xe000ed00

00005eb8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5eb8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    5eba:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5ebc:	2400      	movs	r4, #0
    5ebe:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5ec2:	f7ff ffe5 	bl	5e90 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5ec6:	4623      	mov	r3, r4
    5ec8:	e008      	b.n	5edc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    5eca:	f103 0120 	add.w	r1, r3, #32
    5ece:	4a0e      	ldr	r2, [pc, #56]	; (5f08 <z_arm_init_arch_hw_at_boot+0x50>)
    5ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5ed4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5ed8:	3301      	adds	r3, #1
    5eda:	b2db      	uxtb	r3, r3
    5edc:	2b0f      	cmp	r3, #15
    5ede:	d9f4      	bls.n	5eca <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5ee0:	2300      	movs	r3, #0
    5ee2:	e008      	b.n	5ef6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5ee4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5ee8:	4a07      	ldr	r2, [pc, #28]	; (5f08 <z_arm_init_arch_hw_at_boot+0x50>)
    5eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5eee:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5ef2:	3301      	adds	r3, #1
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	2b0f      	cmp	r3, #15
    5ef8:	d9f4      	bls.n	5ee4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    5efa:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    5efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f00:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5f04:	bd10      	pop	{r4, pc}
    5f06:	bf00      	nop
    5f08:	e000e100 	.word	0xe000e100

00005f0c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    5f0c:	b508      	push	{r3, lr}
	if (_current == thread) {
    5f0e:	4b0a      	ldr	r3, [pc, #40]	; (5f38 <z_impl_k_thread_abort+0x2c>)
    5f10:	689b      	ldr	r3, [r3, #8]
    5f12:	4283      	cmp	r3, r0
    5f14:	d002      	beq.n	5f1c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    5f16:	f008 fdc9 	bl	eaac <z_thread_abort>
}
    5f1a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5f20:	2b00      	cmp	r3, #0
    5f22:	d0f8      	beq.n	5f16 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5f24:	4b05      	ldr	r3, [pc, #20]	; (5f3c <z_impl_k_thread_abort+0x30>)
    5f26:	685a      	ldr	r2, [r3, #4]
    5f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5f2c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5f34:	625a      	str	r2, [r3, #36]	; 0x24
    5f36:	e7ee      	b.n	5f16 <z_impl_k_thread_abort+0xa>
    5f38:	20002734 	.word	0x20002734
    5f3c:	e000ed00 	.word	0xe000ed00

00005f40 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5f40:	b510      	push	{r4, lr}
    5f42:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5f44:	4c0a      	ldr	r4, [pc, #40]	; (5f70 <z_arm_configure_static_mpu_regions+0x30>)
    5f46:	4623      	mov	r3, r4
    5f48:	4a0a      	ldr	r2, [pc, #40]	; (5f74 <z_arm_configure_static_mpu_regions+0x34>)
    5f4a:	2101      	movs	r1, #1
    5f4c:	480a      	ldr	r0, [pc, #40]	; (5f78 <z_arm_configure_static_mpu_regions+0x38>)
    5f4e:	f000 fa31 	bl	63b4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    5f52:	2300      	movs	r3, #0
    5f54:	9301      	str	r3, [sp, #4]
    5f56:	9302      	str	r3, [sp, #8]
    5f58:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    5f5a:	4b08      	ldr	r3, [pc, #32]	; (5f7c <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    5f5c:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    5f5e:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    5f60:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5f62:	2101      	movs	r1, #1
    5f64:	a801      	add	r0, sp, #4
    5f66:	f000 fa47 	bl	63f8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    5f6a:	b004      	add	sp, #16
    5f6c:	bd10      	pop	{r4, pc}
    5f6e:	bf00      	nop
    5f70:	20070000 	.word	0x20070000
    5f74:	20000000 	.word	0x20000000
    5f78:	00014dcc 	.word	0x00014dcc
    5f7c:	20000300 	.word	0x20000300

00005f80 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    5f80:	4b02      	ldr	r3, [pc, #8]	; (5f8c <mpu_init+0xc>)
    5f82:	4a03      	ldr	r2, [pc, #12]	; (5f90 <mpu_init+0x10>)
    5f84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    5f88:	4770      	bx	lr
    5f8a:	bf00      	nop
    5f8c:	e000ed00 	.word	0xe000ed00
    5f90:	0044ffaa 	.word	0x0044ffaa

00005f94 <mpu_set_region>:
	MPU->RNR = rnr;
    5f94:	4b03      	ldr	r3, [pc, #12]	; (5fa4 <mpu_set_region+0x10>)
    5f96:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    5f9a:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    5f9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    5fa2:	4770      	bx	lr
    5fa4:	e000ed00 	.word	0xe000ed00

00005fa8 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    5fa8:	4b0e      	ldr	r3, [pc, #56]	; (5fe4 <mpu_region_get_conf+0x3c>)
    5faa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    5fae:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    5fb2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    5fb6:	7a0a      	ldrb	r2, [r1, #8]
    5fb8:	f360 0204 	bfi	r2, r0, #0, #5
    5fbc:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    5fbe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    5fc2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    5fc6:	7a08      	ldrb	r0, [r1, #8]
    5fc8:	f362 1047 	bfi	r0, r2, #5, #3
    5fcc:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    5fce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    5fd2:	f022 021f 	bic.w	r2, r2, #31
    5fd6:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    5fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    5fdc:	f023 031f 	bic.w	r3, r3, #31
    5fe0:	60cb      	str	r3, [r1, #12]
}
    5fe2:	4770      	bx	lr
    5fe4:	e000ed00 	.word	0xe000ed00

00005fe8 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	4605      	mov	r5, r0
    5fec:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    5fee:	2400      	movs	r4, #0
    5ff0:	e000      	b.n	5ff4 <mpu_mark_areas_for_dynamic_regions+0xc>
    5ff2:	3401      	adds	r4, #1
    5ff4:	42a6      	cmp	r6, r4
    5ff6:	dd1e      	ble.n	6036 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    5ff8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5ffc:	009a      	lsls	r2, r3, #2
    5ffe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6002:	6859      	ldr	r1, [r3, #4]
    6004:	2900      	cmp	r1, #0
    6006:	d0f4      	beq.n	5ff2 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    6008:	58a8      	ldr	r0, [r5, r2]
    600a:	f00b f902 	bl	11212 <get_region_index>
		dyn_reg_info[i].index =
    600e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    6012:	4a0b      	ldr	r2, [pc, #44]	; (6040 <mpu_mark_areas_for_dynamic_regions+0x58>)
    6014:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    6018:	f110 0f16 	cmn.w	r0, #22
    601c:	d00c      	beq.n	6038 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    601e:	4b09      	ldr	r3, [pc, #36]	; (6044 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	4298      	cmp	r0, r3
    6024:	da09      	bge.n	603a <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    6026:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    602a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    602e:	3104      	adds	r1, #4
    6030:	f7ff ffba 	bl	5fa8 <mpu_region_get_conf>
    6034:	e7dd      	b.n	5ff2 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    6036:	2000      	movs	r0, #0
}
    6038:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    603a:	f06f 0015 	mvn.w	r0, #21
    603e:	e7fb      	b.n	6038 <mpu_mark_areas_for_dynamic_regions+0x50>
    6040:	20002040 	.word	0x20002040
    6044:	20002970 	.word	0x20002970

00006048 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    6048:	b5f0      	push	{r4, r5, r6, r7, lr}
    604a:	b083      	sub	sp, #12
    604c:	af00      	add	r7, sp, #0
    604e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6050:	2807      	cmp	r0, #7
    6052:	d805      	bhi.n	6060 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    6054:	f00b f8b7 	bl	111c6 <region_init>

	return index;
    6058:	4620      	mov	r0, r4
}
    605a:	370c      	adds	r7, #12
    605c:	46bd      	mov	sp, r7
    605e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6060:	466d      	mov	r5, sp
    6062:	b088      	sub	sp, #32
    6064:	466b      	mov	r3, sp
    6066:	f113 0210 	adds.w	r2, r3, #16
    606a:	d031      	beq.n	60d0 <region_allocate_and_init+0x88>
    606c:	210c      	movs	r1, #12
    606e:	b13a      	cbz	r2, 6080 <region_allocate_and_init+0x38>
    6070:	4608      	mov	r0, r1
    6072:	2904      	cmp	r1, #4
    6074:	dd01      	ble.n	607a <region_allocate_and_init+0x32>
    6076:	4e19      	ldr	r6, [pc, #100]	; (60dc <region_allocate_and_init+0x94>)
    6078:	615e      	str	r6, [r3, #20]
    607a:	2808      	cmp	r0, #8
    607c:	dd00      	ble.n	6080 <region_allocate_and_init+0x38>
    607e:	619c      	str	r4, [r3, #24]
    6080:	290b      	cmp	r1, #11
    6082:	dd28      	ble.n	60d6 <region_allocate_and_init+0x8e>
    6084:	240c      	movs	r4, #12
    6086:	b13a      	cbz	r2, 6098 <region_allocate_and_init+0x50>
    6088:	2103      	movs	r1, #3
    608a:	7139      	strb	r1, [r7, #4]
    608c:	2100      	movs	r1, #0
    608e:	7179      	strb	r1, [r7, #5]
    6090:	71b9      	strb	r1, [r7, #6]
    6092:	71f9      	strb	r1, [r7, #7]
    6094:	6878      	ldr	r0, [r7, #4]
    6096:	6118      	str	r0, [r3, #16]
    6098:	2100      	movs	r1, #0
    609a:	f36f 0100 	bfc	r1, #0, #1
    609e:	f36f 0141 	bfc	r1, #1, #1
    60a2:	f36f 0182 	bfc	r1, #2, #1
    60a6:	f36f 01c5 	bfc	r1, #3, #3
    60aa:	2301      	movs	r3, #1
    60ac:	f363 1188 	bfi	r1, r3, #6, #3
    60b0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    60b4:	f364 2152 	bfi	r1, r4, #9, #10
    60b8:	f36f 41de 	bfc	r1, #19, #12
    60bc:	f36f 71df 	bfc	r1, #31, #1
    60c0:	2300      	movs	r3, #0
    60c2:	4807      	ldr	r0, [pc, #28]	; (60e0 <region_allocate_and_init+0x98>)
    60c4:	f7fd fad0 	bl	3668 <z_impl_z_log_msg_static_create>
    60c8:	46ad      	mov	sp, r5
		return -EINVAL;
    60ca:	f06f 0015 	mvn.w	r0, #21
    60ce:	e7c4      	b.n	605a <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    60d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    60d4:	e7cb      	b.n	606e <region_allocate_and_init+0x26>
    60d6:	f06f 041b 	mvn.w	r4, #27
    60da:	e7d4      	b.n	6086 <region_allocate_and_init+0x3e>
    60dc:	00014ddc 	.word	0x00014ddc
    60e0:	00013aa4 	.word	0x00013aa4

000060e4 <mpu_configure_regions_and_partition>:
{
    60e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60e8:	b089      	sub	sp, #36	; 0x24
    60ea:	af00      	add	r7, sp, #0
    60ec:	4682      	mov	sl, r0
    60ee:	60b9      	str	r1, [r7, #8]
    60f0:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
    60f2:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
    60f4:	f04f 0800 	mov.w	r8, #0
    60f8:	e0b5      	b.n	6266 <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
    60fa:	466d      	mov	r5, sp
    60fc:	b088      	sub	sp, #32
    60fe:	466b      	mov	r3, sp
    6100:	f113 0210 	adds.w	r2, r3, #16
    6104:	d032      	beq.n	616c <mpu_configure_regions_and_partition+0x88>
    6106:	210c      	movs	r1, #12
    6108:	b142      	cbz	r2, 611c <mpu_configure_regions_and_partition+0x38>
    610a:	4608      	mov	r0, r1
    610c:	2904      	cmp	r1, #4
    610e:	dd01      	ble.n	6114 <mpu_configure_regions_and_partition+0x30>
    6110:	4c94      	ldr	r4, [pc, #592]	; (6364 <mpu_configure_regions_and_partition+0x280>)
    6112:	615c      	str	r4, [r3, #20]
    6114:	2808      	cmp	r0, #8
    6116:	dd01      	ble.n	611c <mpu_configure_regions_and_partition+0x38>
    6118:	f8c3 8018 	str.w	r8, [r3, #24]
    611c:	290b      	cmp	r1, #11
    611e:	dd28      	ble.n	6172 <mpu_configure_regions_and_partition+0x8e>
    6120:	240c      	movs	r4, #12
    6122:	b13a      	cbz	r2, 6134 <mpu_configure_regions_and_partition+0x50>
    6124:	2103      	movs	r1, #3
    6126:	7439      	strb	r1, [r7, #16]
    6128:	2100      	movs	r1, #0
    612a:	7479      	strb	r1, [r7, #17]
    612c:	74b9      	strb	r1, [r7, #18]
    612e:	74f9      	strb	r1, [r7, #19]
    6130:	6938      	ldr	r0, [r7, #16]
    6132:	6118      	str	r0, [r3, #16]
    6134:	2100      	movs	r1, #0
    6136:	f36f 0100 	bfc	r1, #0, #1
    613a:	f36f 0141 	bfc	r1, #1, #1
    613e:	f36f 0182 	bfc	r1, #2, #1
    6142:	f36f 01c5 	bfc	r1, #3, #3
    6146:	2301      	movs	r3, #1
    6148:	f363 1188 	bfi	r1, r3, #6, #3
    614c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    6150:	f364 2152 	bfi	r1, r4, #9, #10
    6154:	f36f 41de 	bfc	r1, #19, #12
    6158:	f36f 71df 	bfc	r1, #31, #1
    615c:	2300      	movs	r3, #0
    615e:	4882      	ldr	r0, [pc, #520]	; (6368 <mpu_configure_regions_and_partition+0x284>)
    6160:	f7fd fa82 	bl	3668 <z_impl_z_log_msg_static_create>
    6164:	46ad      	mov	sp, r5
			return -EINVAL;
    6166:	f06f 0415 	mvn.w	r4, #21
    616a:	e03c      	b.n	61e6 <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
    616c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6170:	e7ca      	b.n	6108 <mpu_configure_regions_and_partition+0x24>
    6172:	f06f 041b 	mvn.w	r4, #27
    6176:	e7d4      	b.n	6122 <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
    6178:	466d      	mov	r5, sp
    617a:	b088      	sub	sp, #32
    617c:	466b      	mov	r3, sp
    617e:	f113 0210 	adds.w	r2, r3, #16
    6182:	d035      	beq.n	61f0 <mpu_configure_regions_and_partition+0x10c>
    6184:	210c      	movs	r1, #12
    6186:	b13a      	cbz	r2, 6198 <mpu_configure_regions_and_partition+0xb4>
    6188:	4608      	mov	r0, r1
    618a:	2904      	cmp	r1, #4
    618c:	dd01      	ble.n	6192 <mpu_configure_regions_and_partition+0xae>
    618e:	4c77      	ldr	r4, [pc, #476]	; (636c <mpu_configure_regions_and_partition+0x288>)
    6190:	615c      	str	r4, [r3, #20]
    6192:	2808      	cmp	r0, #8
    6194:	dd00      	ble.n	6198 <mpu_configure_regions_and_partition+0xb4>
    6196:	619e      	str	r6, [r3, #24]
    6198:	290b      	cmp	r1, #11
    619a:	dd2c      	ble.n	61f6 <mpu_configure_regions_and_partition+0x112>
    619c:	240c      	movs	r4, #12
    619e:	b13a      	cbz	r2, 61b0 <mpu_configure_regions_and_partition+0xcc>
    61a0:	2103      	movs	r1, #3
    61a2:	7439      	strb	r1, [r7, #16]
    61a4:	2100      	movs	r1, #0
    61a6:	7479      	strb	r1, [r7, #17]
    61a8:	74b9      	strb	r1, [r7, #18]
    61aa:	74f9      	strb	r1, [r7, #19]
    61ac:	6938      	ldr	r0, [r7, #16]
    61ae:	6118      	str	r0, [r3, #16]
    61b0:	2100      	movs	r1, #0
    61b2:	f36f 0100 	bfc	r1, #0, #1
    61b6:	f36f 0141 	bfc	r1, #1, #1
    61ba:	f36f 0182 	bfc	r1, #2, #1
    61be:	f36f 01c5 	bfc	r1, #3, #3
    61c2:	2301      	movs	r3, #1
    61c4:	f363 1188 	bfi	r1, r3, #6, #3
    61c8:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    61cc:	f363 2152 	bfi	r1, r3, #9, #10
    61d0:	f36f 41de 	bfc	r1, #19, #12
    61d4:	f36f 71df 	bfc	r1, #31, #1
    61d8:	2300      	movs	r3, #0
    61da:	4863      	ldr	r0, [pc, #396]	; (6368 <mpu_configure_regions_and_partition+0x284>)
    61dc:	f7fd fa44 	bl	3668 <z_impl_z_log_msg_static_create>
    61e0:	46ad      	mov	sp, r5
			return -EINVAL;
    61e2:	f06f 0415 	mvn.w	r4, #21
}
    61e6:	4620      	mov	r0, r4
    61e8:	3724      	adds	r7, #36	; 0x24
    61ea:	46bd      	mov	sp, r7
    61ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
    61f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    61f4:	e7c7      	b.n	6186 <mpu_configure_regions_and_partition+0xa2>
    61f6:	f06f 041b 	mvn.w	r4, #27
    61fa:	e7d0      	b.n	619e <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
    61fc:	4581      	cmp	r9, r0
    61fe:	d168      	bne.n	62d2 <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
    6200:	4629      	mov	r1, r5
    6202:	b2f0      	uxtb	r0, r6
    6204:	f00b f816 	bl	11234 <mpu_configure_region>
    6208:	e02b      	b.n	6262 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    620a:	4a59      	ldr	r2, [pc, #356]	; (6370 <mpu_configure_regions_and_partition+0x28c>)
    620c:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    6210:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    6214:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    6218:	f021 011f 	bic.w	r1, r1, #31
    621c:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    621e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    6222:	4629      	mov	r1, r5
    6224:	b2e0      	uxtb	r0, r4
    6226:	f00b f805 	bl	11234 <mpu_configure_region>
    622a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    622c:	f110 0f16 	cmn.w	r0, #22
    6230:	d0d9      	beq.n	61e6 <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    6232:	3401      	adds	r4, #1
    6234:	e015      	b.n	6262 <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
    6236:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    6238:	494d      	ldr	r1, [pc, #308]	; (6370 <mpu_configure_regions_and_partition+0x28c>)
    623a:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    623e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    6242:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6246:	f023 031f 	bic.w	r3, r3, #31
    624a:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    624c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    6250:	4629      	mov	r1, r5
    6252:	b2e0      	uxtb	r0, r4
    6254:	f00a ffee 	bl	11234 <mpu_configure_region>
    6258:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    625a:	f110 0f16 	cmn.w	r0, #22
    625e:	d0c2      	beq.n	61e6 <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    6260:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    6262:	f108 0801 	add.w	r8, r8, #1
    6266:	68bb      	ldr	r3, [r7, #8]
    6268:	4598      	cmp	r8, r3
    626a:	dabc      	bge.n	61e6 <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
    626c:	eb08 0548 	add.w	r5, r8, r8, lsl #1
    6270:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    6274:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    6278:	686e      	ldr	r6, [r5, #4]
    627a:	2e00      	cmp	r6, #0
    627c:	d0f1      	beq.n	6262 <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	b12b      	cbz	r3, 628e <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
    6282:	4628      	mov	r0, r5
    6284:	f00a ffb3 	bl	111ee <mpu_partition_is_valid>
		if (do_sanity_check &&
    6288:	2800      	cmp	r0, #0
    628a:	f43f af36 	beq.w	60fa <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
    628e:	4631      	mov	r1, r6
    6290:	f85a 000b 	ldr.w	r0, [sl, fp]
    6294:	f00a ffbd 	bl	11212 <get_region_index>
    6298:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    629a:	f110 0f16 	cmn.w	r0, #22
    629e:	f43f af6b 	beq.w	6178 <mpu_configure_regions_and_partition+0x94>
    62a2:	4284      	cmp	r4, r0
    62a4:	f77f af68 	ble.w	6178 <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
    62a8:	4b31      	ldr	r3, [pc, #196]	; (6370 <mpu_configure_regions_and_partition+0x28c>)
    62aa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    62ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    62b2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    62b6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    62ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    62be:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    62c2:	f85a 300b 	ldr.w	r3, [sl, fp]
    62c6:	6869      	ldr	r1, [r5, #4]
    62c8:	4419      	add	r1, r3
    62ca:	1e48      	subs	r0, r1, #1
    62cc:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
    62ce:	4293      	cmp	r3, r2
    62d0:	d094      	beq.n	61fc <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
    62d2:	4293      	cmp	r3, r2
    62d4:	d099      	beq.n	620a <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
    62d6:	68fa      	ldr	r2, [r7, #12]
    62d8:	4591      	cmp	r9, r2
    62da:	d0ac      	beq.n	6236 <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
    62dc:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    62de:	4924      	ldr	r1, [pc, #144]	; (6370 <mpu_configure_regions_and_partition+0x28c>)
    62e0:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    62e4:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    62e8:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    62ec:	f023 031f 	bic.w	r3, r3, #31
    62f0:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    62f2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    62f6:	4629      	mov	r1, r5
    62f8:	b2e0      	uxtb	r0, r4
    62fa:	f00a ff9b 	bl	11234 <mpu_configure_region>
    62fe:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6300:	f110 0f16 	cmn.w	r0, #22
    6304:	f43f af6f 	beq.w	61e6 <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    6308:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    630a:	4b19      	ldr	r3, [pc, #100]	; (6370 <mpu_configure_regions_and_partition+0x28c>)
    630c:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    6310:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    6314:	7e3a      	ldrb	r2, [r7, #24]
    6316:	f361 0204 	bfi	r2, r1, #0, #5
    631a:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
    631c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    6320:	f3c3 0342 	ubfx	r3, r3, #1, #3
    6324:	b2d2      	uxtb	r2, r2
    6326:	f363 1247 	bfi	r2, r3, #5, #3
    632a:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
    632c:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
    6330:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    6332:	4413      	add	r3, r2
    6334:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    6336:	f023 031f 	bic.w	r3, r3, #31
    633a:	68fa      	ldr	r2, [r7, #12]
    633c:	eba9 0902 	sub.w	r9, r9, r2
    6340:	444b      	add	r3, r9
    6342:	3b01      	subs	r3, #1
    6344:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    6348:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
    634a:	f107 0110 	add.w	r1, r7, #16
    634e:	b2c0      	uxtb	r0, r0
    6350:	f7ff fe7a 	bl	6048 <region_allocate_and_init>
    6354:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6356:	f110 0f16 	cmn.w	r0, #22
    635a:	f43f af44 	beq.w	61e6 <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    635e:	3401      	adds	r4, #1
    6360:	e77f      	b.n	6262 <mpu_configure_regions_and_partition+0x17e>
    6362:	bf00      	nop
    6364:	00014e04 	.word	0x00014e04
    6368:	00013aa4 	.word	0x00013aa4
    636c:	00014e28 	.word	0x00014e28
    6370:	e000ed00 	.word	0xe000ed00

00006374 <mpu_configure_static_mpu_regions>:
{
    6374:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    6376:	4c03      	ldr	r4, [pc, #12]	; (6384 <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    6378:	2301      	movs	r3, #1
    637a:	7822      	ldrb	r2, [r4, #0]
    637c:	f7ff feb2 	bl	60e4 <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
    6380:	7020      	strb	r0, [r4, #0]
}
    6382:	bd10      	pop	{r4, pc}
    6384:	20002970 	.word	0x20002970

00006388 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6388:	4b04      	ldr	r3, [pc, #16]	; (639c <arm_core_mpu_enable+0x14>)
    638a:	2205      	movs	r2, #5
    638c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6390:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6394:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6398:	4770      	bx	lr
    639a:	bf00      	nop
    639c:	e000ed00 	.word	0xe000ed00

000063a0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    63a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    63a4:	4b02      	ldr	r3, [pc, #8]	; (63b0 <arm_core_mpu_disable+0x10>)
    63a6:	2200      	movs	r2, #0
    63a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    63ac:	4770      	bx	lr
    63ae:	bf00      	nop
    63b0:	e000ed00 	.word	0xe000ed00

000063b4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    63b4:	b538      	push	{r3, r4, r5, lr}
    63b6:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    63b8:	f7ff ffdc 	bl	6374 <mpu_configure_static_mpu_regions>
    63bc:	f110 0f16 	cmn.w	r0, #22
    63c0:	d000      	beq.n	63c4 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    63c2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    63c4:	4d08      	ldr	r5, [pc, #32]	; (63e8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    63c6:	f44f 738b 	mov.w	r3, #278	; 0x116
    63ca:	462a      	mov	r2, r5
    63cc:	4907      	ldr	r1, [pc, #28]	; (63ec <arm_core_mpu_configure_static_mpu_regions+0x38>)
    63ce:	4808      	ldr	r0, [pc, #32]	; (63f0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    63d0:	f00a f9b2 	bl	10738 <assert_print>
    63d4:	4621      	mov	r1, r4
    63d6:	4807      	ldr	r0, [pc, #28]	; (63f4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    63d8:	f00a f9ae 	bl	10738 <assert_print>
    63dc:	f44f 718b 	mov.w	r1, #278	; 0x116
    63e0:	4628      	mov	r0, r5
    63e2:	f00a f9a2 	bl	1072a <assert_post_action>
}
    63e6:	e7ec      	b.n	63c2 <arm_core_mpu_configure_static_mpu_regions+0xe>
    63e8:	00014e4c 	.word	0x00014e4c
    63ec:	000156e0 	.word	0x000156e0
    63f0:	00013d44 	.word	0x00013d44
    63f4:	00014e84 	.word	0x00014e84

000063f8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    63f8:	b538      	push	{r3, r4, r5, lr}
    63fa:	460c      	mov	r4, r1
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    63fc:	f7ff fdf4 	bl	5fe8 <mpu_mark_areas_for_dynamic_regions>
    6400:	f110 0f16 	cmn.w	r0, #22
    6404:	d000      	beq.n	6408 <arm_core_mpu_mark_areas_for_dynamic_regions+0x10>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    6406:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    6408:	4d08      	ldr	r5, [pc, #32]	; (642c <arm_core_mpu_mark_areas_for_dynamic_regions+0x34>)
    640a:	f44f 7393 	mov.w	r3, #294	; 0x126
    640e:	462a      	mov	r2, r5
    6410:	4907      	ldr	r1, [pc, #28]	; (6430 <arm_core_mpu_mark_areas_for_dynamic_regions+0x38>)
    6412:	4808      	ldr	r0, [pc, #32]	; (6434 <arm_core_mpu_mark_areas_for_dynamic_regions+0x3c>)
    6414:	f00a f990 	bl	10738 <assert_print>
    6418:	4621      	mov	r1, r4
    641a:	4807      	ldr	r0, [pc, #28]	; (6438 <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>)
    641c:	f00a f98c 	bl	10738 <assert_print>
    6420:	f44f 7193 	mov.w	r1, #294	; 0x126
    6424:	4628      	mov	r0, r5
    6426:	f00a f980 	bl	1072a <assert_post_action>
}
    642a:	e7ec      	b.n	6406 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe>
    642c:	00014e4c 	.word	0x00014e4c
    6430:	000156e0 	.word	0x000156e0
    6434:	00013d44 	.word	0x00013d44
    6438:	00014eb0 	.word	0x00014eb0

0000643c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    643c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    643e:	4b24      	ldr	r3, [pc, #144]	; (64d0 <z_arm_mpu_init+0x94>)
    6440:	681d      	ldr	r5, [r3, #0]
    6442:	2d08      	cmp	r5, #8
    6444:	d805      	bhi.n	6452 <z_arm_mpu_init+0x16>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6446:	f7ff ffab 	bl	63a0 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    644a:	f7ff fd99 	bl	5f80 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    644e:	2400      	movs	r4, #0
    6450:	e01c      	b.n	648c <z_arm_mpu_init+0x50>
		__ASSERT(0,
    6452:	4c20      	ldr	r4, [pc, #128]	; (64d4 <z_arm_mpu_init+0x98>)
    6454:	f240 134d 	movw	r3, #333	; 0x14d
    6458:	4622      	mov	r2, r4
    645a:	491f      	ldr	r1, [pc, #124]	; (64d8 <z_arm_mpu_init+0x9c>)
    645c:	481f      	ldr	r0, [pc, #124]	; (64dc <z_arm_mpu_init+0xa0>)
    645e:	f00a f96b 	bl	10738 <assert_print>
    6462:	2208      	movs	r2, #8
    6464:	4629      	mov	r1, r5
    6466:	481e      	ldr	r0, [pc, #120]	; (64e0 <z_arm_mpu_init+0xa4>)
    6468:	f00a f966 	bl	10738 <assert_print>
    646c:	f240 114d 	movw	r1, #333	; 0x14d
    6470:	4620      	mov	r0, r4
    6472:	f00a f95a 	bl	1072a <assert_post_action>
		return -1;
    6476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    647a:	e015      	b.n	64a8 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    647c:	4b14      	ldr	r3, [pc, #80]	; (64d0 <z_arm_mpu_init+0x94>)
    647e:	6859      	ldr	r1, [r3, #4]
    6480:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    6484:	4620      	mov	r0, r4
    6486:	f00a fe9e 	bl	111c6 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    648a:	3401      	adds	r4, #1
    648c:	42a5      	cmp	r5, r4
    648e:	d8f5      	bhi.n	647c <z_arm_mpu_init+0x40>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6490:	4b14      	ldr	r3, [pc, #80]	; (64e4 <z_arm_mpu_init+0xa8>)
    6492:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6494:	f7ff ff78 	bl	6388 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    6498:	4b13      	ldr	r3, [pc, #76]	; (64e8 <z_arm_mpu_init+0xac>)
    649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    649e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    64a2:	2b08      	cmp	r3, #8
    64a4:	d101      	bne.n	64aa <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    64a6:	2000      	movs	r0, #0
}
    64a8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    64aa:	4c0a      	ldr	r4, [pc, #40]	; (64d4 <z_arm_mpu_init+0x98>)
    64ac:	f240 13b1 	movw	r3, #433	; 0x1b1
    64b0:	4622      	mov	r2, r4
    64b2:	490e      	ldr	r1, [pc, #56]	; (64ec <z_arm_mpu_init+0xb0>)
    64b4:	4809      	ldr	r0, [pc, #36]	; (64dc <z_arm_mpu_init+0xa0>)
    64b6:	f00a f93f 	bl	10738 <assert_print>
    64ba:	480d      	ldr	r0, [pc, #52]	; (64f0 <z_arm_mpu_init+0xb4>)
    64bc:	f00a f93c 	bl	10738 <assert_print>
    64c0:	f240 11b1 	movw	r1, #433	; 0x1b1
    64c4:	4620      	mov	r0, r4
    64c6:	f00a f930 	bl	1072a <assert_post_action>
	return 0;
    64ca:	2000      	movs	r0, #0
    64cc:	e7ec      	b.n	64a8 <z_arm_mpu_init+0x6c>
    64ce:	bf00      	nop
    64d0:	00014f88 	.word	0x00014f88
    64d4:	00014e4c 	.word	0x00014e4c
    64d8:	000156e0 	.word	0x000156e0
    64dc:	00013d44 	.word	0x00013d44
    64e0:	00014ee0 	.word	0x00014ee0
    64e4:	20002970 	.word	0x20002970
    64e8:	e000ed00 	.word	0xe000ed00
    64ec:	00014f14 	.word	0x00014f14
    64f0:	00014f64 	.word	0x00014f64

000064f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    64f4:	4b01      	ldr	r3, [pc, #4]	; (64fc <__stdout_hook_install+0x8>)
    64f6:	6018      	str	r0, [r3, #0]
}
    64f8:	4770      	bx	lr
    64fa:	bf00      	nop
    64fc:	20000070 	.word	0x20000070

00006500 <enable_cpunet>:
{
#if !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	/* Retain nRF5340 Network MCU in Secure domain (bus
	 * accesses by Network MCU will have Secure attribute set).
	 */
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    6500:	4b04      	ldr	r3, [pc, #16]	; (6514 <enable_cpunet+0x14>)
    6502:	2210      	movs	r2, #16
    6504:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    6508:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    650c:	2200      	movs	r2, #0
    650e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */
}
    6512:	4770      	bx	lr
    6514:	50003000 	.word	0x50003000

00006518 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6518:	4800      	ldr	r0, [pc, #0]	; (651c <get_hf_flags+0x4>)
    651a:	4770      	bx	lr
    651c:	200020f0 	.word	0x200020f0

00006520 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6520:	4b01      	ldr	r3, [pc, #4]	; (6528 <get_subsys+0x8>)
    6522:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    6524:	1140      	asrs	r0, r0, #5
    6526:	4770      	bx	lr
    6528:	20002068 	.word	0x20002068

0000652c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    652c:	b530      	push	{r4, r5, lr}
    652e:	b083      	sub	sp, #12
    6530:	4605      	mov	r5, r0
    6532:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6534:	f7ff fff4 	bl	6520 <get_subsys>
    6538:	4601      	mov	r1, r0
    653a:	2340      	movs	r3, #64	; 0x40
    653c:	9300      	str	r3, [sp, #0]
    653e:	4623      	mov	r3, r4
    6540:	4a05      	ldr	r2, [pc, #20]	; (6558 <onoff_start+0x2c>)
    6542:	4806      	ldr	r0, [pc, #24]	; (655c <onoff_start+0x30>)
    6544:	f00a ffac 	bl	114a0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6548:	1e01      	subs	r1, r0, #0
    654a:	db01      	blt.n	6550 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    654c:	b003      	add	sp, #12
    654e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6550:	4628      	mov	r0, r5
    6552:	47a0      	blx	r4
}
    6554:	e7fa      	b.n	654c <onoff_start+0x20>
    6556:	bf00      	nop
    6558:	000114e9 	.word	0x000114e9
    655c:	00013704 	.word	0x00013704

00006560 <generic_hfclk_stop>:
{
    6560:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6562:	4b08      	ldr	r3, [pc, #32]	; (6584 <generic_hfclk_stop+0x24>)
    6564:	e8d3 2fef 	ldaex	r2, [r3]
    6568:	f022 0102 	bic.w	r1, r2, #2
    656c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    6570:	2800      	cmp	r0, #0
    6572:	d1f7      	bne.n	6564 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6574:	f012 0f01 	tst.w	r2, #1
    6578:	d000      	beq.n	657c <generic_hfclk_stop+0x1c>
}
    657a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    657c:	f00a ffd0 	bl	11520 <hfclk_stop>
    6580:	e7fb      	b.n	657a <generic_hfclk_stop+0x1a>
    6582:	bf00      	nop
    6584:	20002118 	.word	0x20002118

00006588 <sys_notify_init_spinwait>:
 * reinitialized before it can be re-used.
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
    6588:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(notify != NULL);
    658a:	4604      	mov	r4, r0
    658c:	b130      	cbz	r0, 659c <sys_notify_init_spinwait+0x14>

	*notify = (struct sys_notify){
    658e:	2300      	movs	r3, #0
    6590:	6023      	str	r3, [r4, #0]
    6592:	6063      	str	r3, [r4, #4]
    6594:	60a3      	str	r3, [r4, #8]
    6596:	2301      	movs	r3, #1
    6598:	6063      	str	r3, [r4, #4]
		.flags = SYS_NOTIFY_METHOD_SPINWAIT,
	};
}
    659a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(notify != NULL);
    659c:	4d06      	ldr	r5, [pc, #24]	; (65b8 <sys_notify_init_spinwait+0x30>)
    659e:	f44f 7385 	mov.w	r3, #266	; 0x10a
    65a2:	462a      	mov	r2, r5
    65a4:	4905      	ldr	r1, [pc, #20]	; (65bc <sys_notify_init_spinwait+0x34>)
    65a6:	4806      	ldr	r0, [pc, #24]	; (65c0 <sys_notify_init_spinwait+0x38>)
    65a8:	f00a f8c6 	bl	10738 <assert_print>
    65ac:	f44f 7185 	mov.w	r1, #266	; 0x10a
    65b0:	4628      	mov	r0, r5
    65b2:	f00a f8ba 	bl	1072a <assert_post_action>
    65b6:	e7ea      	b.n	658e <sys_notify_init_spinwait+0x6>
    65b8:	00014fd4 	.word	0x00014fd4
    65bc:	00015004 	.word	0x00015004
    65c0:	00013d44 	.word	0x00013d44

000065c4 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
    65c4:	2903      	cmp	r1, #3
    65c6:	d82f      	bhi.n	6628 <nrf_clock_is_running+0x64>
    65c8:	e8df f001 	tbb	[pc, r1]
    65cc:	291c0f02 	.word	0x291c0f02
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
    65d0:	b122      	cbz	r2, 65dc <nrf_clock_is_running+0x18>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    65d2:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    65d6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    65da:	7013      	strb	r3, [r2, #0]
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    65dc:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    65e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    65e4:	d130      	bne.n	6648 <nrf_clock_is_running+0x84>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
    65e6:	2000      	movs	r0, #0
    65e8:	4770      	bx	lr
            if (p_clk_src != NULL)
    65ea:	b122      	cbz	r2, 65f6 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    65ec:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    65f0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    65f4:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    65f6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    65fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    65fe:	d125      	bne.n	664c <nrf_clock_is_running+0x88>
    return false;
    6600:	2000      	movs	r0, #0
    6602:	4770      	bx	lr
            if (p_clk_src != NULL)
    6604:	b122      	cbz	r2, 6610 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6606:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    660a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    660e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6610:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6614:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6618:	d11a      	bne.n	6650 <nrf_clock_is_running+0x8c>
    return false;
    661a:	2000      	movs	r0, #0
    661c:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    661e:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6622:	f3c0 4000 	ubfx	r0, r0, #16, #1
    6626:	4770      	bx	lr
{
    6628:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
    662a:	4c0a      	ldr	r4, [pc, #40]	; (6654 <nrf_clock_is_running+0x90>)
    662c:	f44f 734f 	mov.w	r3, #828	; 0x33c
    6630:	4622      	mov	r2, r4
    6632:	4909      	ldr	r1, [pc, #36]	; (6658 <nrf_clock_is_running+0x94>)
    6634:	4809      	ldr	r0, [pc, #36]	; (665c <nrf_clock_is_running+0x98>)
    6636:	f00a f87f 	bl	10738 <assert_print>
    663a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    663e:	4620      	mov	r0, r4
    6640:	f00a f873 	bl	1072a <assert_post_action>
            return false;
    6644:	2000      	movs	r0, #0
}
    6646:	bd10      	pop	{r4, pc}
                return true;
    6648:	2001      	movs	r0, #1
    664a:	4770      	bx	lr
                return true;
    664c:	2001      	movs	r0, #1
    664e:	4770      	bx	lr
                return true;
    6650:	2001      	movs	r0, #1
}
    6652:	4770      	bx	lr
    6654:	0001501c 	.word	0x0001501c
    6658:	000156e0 	.word	0x000156e0
    665c:	00013d44 	.word	0x00013d44

00006660 <generic_hfclk_start>:
{
    6660:	b510      	push	{r4, lr}
    6662:	b082      	sub	sp, #8
	__asm__ volatile(
    6664:	f04f 0320 	mov.w	r3, #32
    6668:	f3ef 8411 	mrs	r4, BASEPRI
    666c:	f383 8812 	msr	BASEPRI_MAX, r3
    6670:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6674:	4a14      	ldr	r2, [pc, #80]	; (66c8 <generic_hfclk_start+0x68>)
    6676:	6813      	ldr	r3, [r2, #0]
    6678:	f043 0102 	orr.w	r1, r3, #2
    667c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    667e:	f013 0f01 	tst.w	r3, #1
    6682:	d109      	bne.n	6698 <generic_hfclk_start+0x38>
	bool already_started = false;
    6684:	2300      	movs	r3, #0
	__asm__ volatile(
    6686:	f384 8811 	msr	BASEPRI, r4
    668a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    668e:	b9b3      	cbnz	r3, 66be <generic_hfclk_start+0x5e>
	hfclk_start();
    6690:	f00a ff32 	bl	114f8 <hfclk_start>
}
    6694:	b002      	add	sp, #8
    6696:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    6698:	f10d 0207 	add.w	r2, sp, #7
    669c:	2101      	movs	r1, #1
    669e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    66a2:	f7ff ff8f 	bl	65c4 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    66a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66aa:	2b01      	cmp	r3, #1
    66ac:	d001      	beq.n	66b2 <generic_hfclk_start+0x52>
	bool already_started = false;
    66ae:	2300      	movs	r3, #0
    66b0:	e7e9      	b.n	6686 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    66b2:	f7ff ff31 	bl	6518 <get_hf_flags>
    66b6:	f00a fece 	bl	11456 <set_on_state>
			already_started = true;
    66ba:	2301      	movs	r3, #1
    66bc:	e7e3      	b.n	6686 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    66be:	2100      	movs	r1, #0
    66c0:	4802      	ldr	r0, [pc, #8]	; (66cc <generic_hfclk_start+0x6c>)
    66c2:	f00a fedb 	bl	1147c <clkstarted_handle>
		return;
    66c6:	e7e5      	b.n	6694 <generic_hfclk_start+0x34>
    66c8:	20002118 	.word	0x20002118
    66cc:	00013704 	.word	0x00013704

000066d0 <get_status>:
{
    66d0:	b570      	push	{r4, r5, r6, lr}
    66d2:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    66d4:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    66d6:	2c03      	cmp	r4, #3
    66d8:	d807      	bhi.n	66ea <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    66da:	4621      	mov	r1, r4
    66dc:	4628      	mov	r0, r5
    66de:	f00a fe72 	bl	113c6 <get_sub_data>
    66e2:	6880      	ldr	r0, [r0, #8]
}
    66e4:	f000 0007 	and.w	r0, r0, #7
    66e8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    66ea:	4e06      	ldr	r6, [pc, #24]	; (6704 <get_status+0x34>)
    66ec:	2379      	movs	r3, #121	; 0x79
    66ee:	4632      	mov	r2, r6
    66f0:	4905      	ldr	r1, [pc, #20]	; (6708 <get_status+0x38>)
    66f2:	4806      	ldr	r0, [pc, #24]	; (670c <get_status+0x3c>)
    66f4:	f00a f820 	bl	10738 <assert_print>
    66f8:	2179      	movs	r1, #121	; 0x79
    66fa:	4630      	mov	r0, r6
    66fc:	f00a f815 	bl	1072a <assert_post_action>
    6700:	e7eb      	b.n	66da <get_status+0xa>
    6702:	bf00      	nop
    6704:	00015050 	.word	0x00015050
    6708:	00015090 	.word	0x00015090
    670c:	00013d44 	.word	0x00013d44

00006710 <stop>:
{
    6710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6714:	4607      	mov	r7, r0
    6716:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6718:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    671a:	4621      	mov	r1, r4
    671c:	f00a fe53 	bl	113c6 <get_sub_data>
    6720:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6722:	2c03      	cmp	r4, #3
    6724:	d80f      	bhi.n	6746 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    6726:	4631      	mov	r1, r6
    6728:	f105 0008 	add.w	r0, r5, #8
    672c:	f00a fe5c 	bl	113e8 <set_off_state>
	if (err < 0) {
    6730:	2800      	cmp	r0, #0
    6732:	db06      	blt.n	6742 <stop+0x32>
	get_sub_config(dev, type)->stop();
    6734:	4621      	mov	r1, r4
    6736:	4638      	mov	r0, r7
    6738:	f00a fe4c 	bl	113d4 <get_sub_config>
    673c:	6843      	ldr	r3, [r0, #4]
    673e:	4798      	blx	r3
	return 0;
    6740:	2000      	movs	r0, #0
}
    6742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6746:	f8df 801c 	ldr.w	r8, [pc, #28]	; 6764 <stop+0x54>
    674a:	f240 134d 	movw	r3, #333	; 0x14d
    674e:	4642      	mov	r2, r8
    6750:	4905      	ldr	r1, [pc, #20]	; (6768 <stop+0x58>)
    6752:	4806      	ldr	r0, [pc, #24]	; (676c <stop+0x5c>)
    6754:	f009 fff0 	bl	10738 <assert_print>
    6758:	f240 114d 	movw	r1, #333	; 0x14d
    675c:	4640      	mov	r0, r8
    675e:	f009 ffe4 	bl	1072a <assert_post_action>
    6762:	e7e0      	b.n	6726 <stop+0x16>
    6764:	00015050 	.word	0x00015050
    6768:	00015090 	.word	0x00015090
    676c:	00013d44 	.word	0x00013d44

00006770 <onoff_stop>:
{
    6770:	b538      	push	{r3, r4, r5, lr}
    6772:	4605      	mov	r5, r0
    6774:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6776:	f7ff fed3 	bl	6520 <get_subsys>
    677a:	4601      	mov	r1, r0
    677c:	2240      	movs	r2, #64	; 0x40
    677e:	4803      	ldr	r0, [pc, #12]	; (678c <onoff_stop+0x1c>)
    6780:	f7ff ffc6 	bl	6710 <stop>
    6784:	4601      	mov	r1, r0
	notify(mgr, res);
    6786:	4628      	mov	r0, r5
    6788:	47a0      	blx	r4
}
    678a:	bd38      	pop	{r3, r4, r5, pc}
    678c:	00013704 	.word	0x00013704

00006790 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6790:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    6792:	2805      	cmp	r0, #5
    6794:	d82e      	bhi.n	67f4 <clock_event_handler+0x64>
    6796:	e8df f000 	tbb	[pc, r0]
    679a:	1a03      	.short	0x1a03
    679c:	10151f2d 	.word	0x10151f2d
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    67a0:	2100      	movs	r1, #0
    67a2:	481b      	ldr	r0, [pc, #108]	; (6810 <clock_event_handler+0x80>)
    67a4:	f00a fe0f 	bl	113c6 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    67a8:	6883      	ldr	r3, [r0, #8]
    67aa:	f013 0f07 	tst.w	r3, #7
    67ae:	d108      	bne.n	67c2 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    67b0:	2100      	movs	r1, #0
    67b2:	4817      	ldr	r0, [pc, #92]	; (6810 <clock_event_handler+0x80>)
    67b4:	f00a fe62 	bl	1147c <clkstarted_handle>
    67b8:	e003      	b.n	67c2 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    67ba:	2102      	movs	r1, #2
    67bc:	4814      	ldr	r0, [pc, #80]	; (6810 <clock_event_handler+0x80>)
    67be:	f00a fe5d 	bl	1147c <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    67c2:	bd10      	pop	{r4, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    67c4:	2103      	movs	r1, #3
    67c6:	4812      	ldr	r0, [pc, #72]	; (6810 <clock_event_handler+0x80>)
    67c8:	f00a fe58 	bl	1147c <clkstarted_handle>
		break;
    67cc:	e7f9      	b.n	67c2 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    67ce:	2101      	movs	r1, #1
    67d0:	480f      	ldr	r0, [pc, #60]	; (6810 <clock_event_handler+0x80>)
    67d2:	f00a fe53 	bl	1147c <clkstarted_handle>
		break;
    67d6:	e7f4      	b.n	67c2 <clock_event_handler+0x32>
			__ASSERT_NO_MSG(false);
    67d8:	4c0e      	ldr	r4, [pc, #56]	; (6814 <clock_event_handler+0x84>)
    67da:	f240 235e 	movw	r3, #606	; 0x25e
    67de:	4622      	mov	r2, r4
    67e0:	490d      	ldr	r1, [pc, #52]	; (6818 <clock_event_handler+0x88>)
    67e2:	480e      	ldr	r0, [pc, #56]	; (681c <clock_event_handler+0x8c>)
    67e4:	f009 ffa8 	bl	10738 <assert_print>
    67e8:	f240 215e 	movw	r1, #606	; 0x25e
    67ec:	4620      	mov	r0, r4
    67ee:	f009 ff9c 	bl	1072a <assert_post_action>
		break;
    67f2:	e7e6      	b.n	67c2 <clock_event_handler+0x32>
		__ASSERT_NO_MSG(0);
    67f4:	4c07      	ldr	r4, [pc, #28]	; (6814 <clock_event_handler+0x84>)
    67f6:	f240 2362 	movw	r3, #610	; 0x262
    67fa:	4622      	mov	r2, r4
    67fc:	4906      	ldr	r1, [pc, #24]	; (6818 <clock_event_handler+0x88>)
    67fe:	4807      	ldr	r0, [pc, #28]	; (681c <clock_event_handler+0x8c>)
    6800:	f009 ff9a 	bl	10738 <assert_print>
    6804:	f240 2162 	movw	r1, #610	; 0x262
    6808:	4620      	mov	r0, r4
    680a:	f009 ff8e 	bl	1072a <assert_post_action>
}
    680e:	e7d8      	b.n	67c2 <clock_event_handler+0x32>
    6810:	00013704 	.word	0x00013704
    6814:	00015050 	.word	0x00015050
    6818:	000156e0 	.word	0x000156e0
    681c:	00013d44 	.word	0x00013d44

00006820 <lfclk_spinwait>:
{
    6820:	b570      	push	{r4, r5, r6, lr}
    6822:	b082      	sub	sp, #8
    6824:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6826:	2801      	cmp	r0, #1
    6828:	d107      	bne.n	683a <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    682a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    682e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6832:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6836:	2b02      	cmp	r3, #2
    6838:	d037      	beq.n	68aa <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    683a:	f00c fda8 	bl	1338e <k_is_in_isr>
    683e:	4604      	mov	r4, r0
    6840:	b910      	cbnz	r0, 6848 <lfclk_spinwait+0x28>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    6842:	4b2b      	ldr	r3, [pc, #172]	; (68f0 <lfclk_spinwait+0xd0>)
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	b97b      	cbnz	r3, 6868 <lfclk_spinwait+0x48>
	__asm__ volatile(
    6848:	f04f 0320 	mov.w	r3, #32
    684c:	f3ef 8611 	mrs	r6, BASEPRI
    6850:	f383 8812 	msr	BASEPRI_MAX, r3
    6854:	f3bf 8f6f 	isb	sy
    6858:	2401      	movs	r4, #1
	if (!isr_mode) {
    685a:	b994      	cbnz	r4, 6882 <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    685c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6860:	2202      	movs	r2, #2
    6862:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6866:	e00c      	b.n	6882 <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    6868:	2600      	movs	r6, #0
    686a:	e7f6      	b.n	685a <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    686c:	b1fc      	cbz	r4, 68ae <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    686e:	4630      	mov	r0, r6
    6870:	f7fe f908 	bl	4a84 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6874:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6878:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    687c:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    687e:	2b01      	cmp	r3, #1
    6880:	d019      	beq.n	68b6 <lfclk_spinwait+0x96>
    6882:	f10d 0207 	add.w	r2, sp, #7
    6886:	2100      	movs	r1, #0
    6888:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    688c:	f7ff fe9a 	bl	65c4 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6890:	2800      	cmp	r0, #0
    6892:	d0eb      	beq.n	686c <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    6894:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6898:	2b02      	cmp	r3, #2
    689a:	d001      	beq.n	68a0 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    689c:	2d01      	cmp	r5, #1
    689e:	d1e5      	bne.n	686c <lfclk_spinwait+0x4c>
	if (isr_mode) {
    68a0:	b304      	cbz	r4, 68e4 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    68a2:	f386 8811 	msr	BASEPRI, r6
    68a6:	f3bf 8f6f 	isb	sy
}
    68aa:	b002      	add	sp, #8
    68ac:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    68ae:	2001      	movs	r0, #1
    68b0:	f00a fe4f 	bl	11552 <k_msleep>
    68b4:	e7de      	b.n	6874 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    68b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    68be:	2b00      	cmp	r3, #0
    68c0:	d0df      	beq.n	6882 <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68c6:	2200      	movs	r2, #0
    68c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    68cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    68d0:	2202      	movs	r2, #2
    68d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68d6:	4a07      	ldr	r2, [pc, #28]	; (68f4 <lfclk_spinwait+0xd4>)
    68d8:	2120      	movs	r1, #32
    68da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68de:	2201      	movs	r2, #1
    68e0:	609a      	str	r2, [r3, #8]
}
    68e2:	e7ce      	b.n	6882 <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    68e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68e8:	2202      	movs	r2, #2
    68ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    68ee:	e7dc      	b.n	68aa <lfclk_spinwait+0x8a>
    68f0:	20002974 	.word	0x20002974
    68f4:	e000e100 	.word	0xe000e100

000068f8 <api_blocking_start>:
{
    68f8:	b500      	push	{lr}
    68fa:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    68fc:	f8cd d000 	str.w	sp, [sp]
    6900:	f8cd d004 	str.w	sp, [sp, #4]
    6904:	2300      	movs	r3, #0
    6906:	9302      	str	r3, [sp, #8]
    6908:	2301      	movs	r3, #1
    690a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    690c:	466b      	mov	r3, sp
    690e:	4a07      	ldr	r2, [pc, #28]	; (692c <api_blocking_start+0x34>)
    6910:	f00a fde2 	bl	114d8 <api_start>
	if (err < 0) {
    6914:	2800      	cmp	r0, #0
    6916:	db05      	blt.n	6924 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6918:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    691c:	2300      	movs	r3, #0
    691e:	4668      	mov	r0, sp
    6920:	f006 fb2a 	bl	cf78 <z_impl_k_sem_take>
}
    6924:	b005      	add	sp, #20
    6926:	f85d fb04 	ldr.w	pc, [sp], #4
    692a:	bf00      	nop
    692c:	0001157f 	.word	0x0001157f

00006930 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    6930:	b570      	push	{r4, r5, r6, lr}
    6932:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6934:	2200      	movs	r2, #0
    6936:	2101      	movs	r1, #1
    6938:	2005      	movs	r0, #5
    693a:	f7fe fa15 	bl	4d68 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    693e:	4811      	ldr	r0, [pc, #68]	; (6984 <clk_init+0x54>)
    6940:	f002 ff9c 	bl	987c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6944:	4b10      	ldr	r3, [pc, #64]	; (6988 <clk_init+0x58>)
    6946:	4298      	cmp	r0, r3
    6948:	d119      	bne.n	697e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    694a:	f002 ffbf 	bl	98cc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    694e:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    6950:	2c03      	cmp	r4, #3
    6952:	d812      	bhi.n	697a <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6954:	4621      	mov	r1, r4
    6956:	4630      	mov	r0, r6
    6958:	f00a fd35 	bl	113c6 <get_sub_data>
    695c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    695e:	4621      	mov	r1, r4
    6960:	4630      	mov	r0, r6
    6962:	f00a fd3d 	bl	113e0 <get_onoff_manager>
    6966:	4909      	ldr	r1, [pc, #36]	; (698c <clk_init+0x5c>)
    6968:	f009 fad7 	bl	ff1a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    696c:	2800      	cmp	r0, #0
    696e:	db05      	blt.n	697c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6970:	2301      	movs	r3, #1
    6972:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    6974:	441c      	add	r4, r3
    6976:	b2e4      	uxtb	r4, r4
    6978:	e7ea      	b.n	6950 <clk_init+0x20>
	}

	return 0;
    697a:	2000      	movs	r0, #0
}
    697c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    697e:	f06f 0004 	mvn.w	r0, #4
    6982:	e7fb      	b.n	697c <clk_init+0x4c>
    6984:	00006791 	.word	0x00006791
    6988:	0bad0000 	.word	0x0bad0000
    698c:	000150b4 	.word	0x000150b4

00006990 <z_nrf_clock_control_lf_on>:
{
    6990:	b570      	push	{r4, r5, r6, lr}
    6992:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6994:	4b1d      	ldr	r3, [pc, #116]	; (6a0c <z_nrf_clock_control_lf_on+0x7c>)
    6996:	2101      	movs	r1, #1
    6998:	e8d3 2fef 	ldaex	r2, [r3]
    699c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    69a0:	2800      	cmp	r0, #0
    69a2:	d1f9      	bne.n	6998 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    69a4:	b142      	cbz	r2, 69b8 <z_nrf_clock_control_lf_on+0x28>
	switch (start_mode) {
    69a6:	b134      	cbz	r4, 69b6 <z_nrf_clock_control_lf_on+0x26>
    69a8:	1e63      	subs	r3, r4, #1
    69aa:	b2db      	uxtb	r3, r3
    69ac:	2b01      	cmp	r3, #1
    69ae:	d81f      	bhi.n	69f0 <z_nrf_clock_control_lf_on+0x60>
		lfclk_spinwait(start_mode);
    69b0:	4620      	mov	r0, r4
    69b2:	f7ff ff35 	bl	6820 <lfclk_spinwait>
}
    69b6:	bd70      	pop	{r4, r5, r6, pc}
				get_onoff_manager(CLOCK_DEVICE,
    69b8:	4815      	ldr	r0, [pc, #84]	; (6a10 <z_nrf_clock_control_lf_on+0x80>)
    69ba:	f00a fd11 	bl	113e0 <get_onoff_manager>
    69be:	4605      	mov	r5, r0
		sys_notify_init_spinwait(&cli.notify);
    69c0:	4e14      	ldr	r6, [pc, #80]	; (6a14 <z_nrf_clock_control_lf_on+0x84>)
    69c2:	4630      	mov	r0, r6
    69c4:	f7ff fde0 	bl	6588 <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
    69c8:	1f31      	subs	r1, r6, #4
    69ca:	4628      	mov	r0, r5
    69cc:	f7fa fed2 	bl	1774 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    69d0:	2800      	cmp	r0, #0
    69d2:	dae8      	bge.n	69a6 <z_nrf_clock_control_lf_on+0x16>
    69d4:	4d10      	ldr	r5, [pc, #64]	; (6a18 <z_nrf_clock_control_lf_on+0x88>)
    69d6:	f44f 7308 	mov.w	r3, #544	; 0x220
    69da:	462a      	mov	r2, r5
    69dc:	490f      	ldr	r1, [pc, #60]	; (6a1c <z_nrf_clock_control_lf_on+0x8c>)
    69de:	4810      	ldr	r0, [pc, #64]	; (6a20 <z_nrf_clock_control_lf_on+0x90>)
    69e0:	f009 feaa 	bl	10738 <assert_print>
    69e4:	f44f 7108 	mov.w	r1, #544	; 0x220
    69e8:	4628      	mov	r0, r5
    69ea:	f009 fe9e 	bl	1072a <assert_post_action>
    69ee:	e7da      	b.n	69a6 <z_nrf_clock_control_lf_on+0x16>
		__ASSERT_NO_MSG(false);
    69f0:	4c09      	ldr	r4, [pc, #36]	; (6a18 <z_nrf_clock_control_lf_on+0x88>)
    69f2:	f240 2332 	movw	r3, #562	; 0x232
    69f6:	4622      	mov	r2, r4
    69f8:	490a      	ldr	r1, [pc, #40]	; (6a24 <z_nrf_clock_control_lf_on+0x94>)
    69fa:	4809      	ldr	r0, [pc, #36]	; (6a20 <z_nrf_clock_control_lf_on+0x90>)
    69fc:	f009 fe9c 	bl	10738 <assert_print>
    6a00:	f240 2132 	movw	r1, #562	; 0x232
    6a04:	4620      	mov	r0, r4
    6a06:	f009 fe90 	bl	1072a <assert_post_action>
    6a0a:	e7d4      	b.n	69b6 <z_nrf_clock_control_lf_on+0x26>
    6a0c:	20002064 	.word	0x20002064
    6a10:	00013704 	.word	0x00013704
    6a14:	20002058 	.word	0x20002058
    6a18:	00015050 	.word	0x00015050
    6a1c:	00014528 	.word	0x00014528
    6a20:	00013d44 	.word	0x00013d44
    6a24:	000156e0 	.word	0x000156e0

00006a28 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    6a28:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    6a2a:	4c04      	ldr	r4, [pc, #16]	; (6a3c <rtt_console_init+0x14>)
    6a2c:	4620      	mov	r0, r4
    6a2e:	f7fa fbf3 	bl	1218 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    6a32:	4620      	mov	r0, r4
    6a34:	f7ff fd5e 	bl	64f4 <__stdout_hook_install>

	return 0;
}
    6a38:	2000      	movs	r0, #0
    6a3a:	bd10      	pop	{r4, pc}
    6a3c:	00006a41 	.word	0x00006a41

00006a40 <rtt_console_out>:
{
    6a40:	b570      	push	{r4, r5, r6, lr}
    6a42:	b082      	sub	sp, #8
    6a44:	4606      	mov	r6, r0
	char c = (char)character;
    6a46:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    6a4a:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
    6a4c:	f005 fa58 	bl	bf00 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    6a50:	2201      	movs	r2, #1
    6a52:	f10d 0107 	add.w	r1, sp, #7
    6a56:	2000      	movs	r0, #0
    6a58:	f005 fa0c 	bl	be74 <SEGGER_RTT_WriteNoLock>
    6a5c:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
    6a5e:	f005 fa5b 	bl	bf18 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    6a62:	b93c      	cbnz	r4, 6a74 <rtt_console_out+0x34>
		} else if (host_present) {
    6a64:	4b08      	ldr	r3, [pc, #32]	; (6a88 <rtt_console_out+0x48>)
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	b15b      	cbz	r3, 6a82 <rtt_console_out+0x42>
			if (max_cnt) {
    6a6a:	b13d      	cbz	r5, 6a7c <rtt_console_out+0x3c>
				wait();
    6a6c:	f00a fda2 	bl	115b4 <wait>
				max_cnt--;
    6a70:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
    6a72:	e7eb      	b.n	6a4c <rtt_console_out+0xc>
			host_present = true;
    6a74:	4b04      	ldr	r3, [pc, #16]	; (6a88 <rtt_console_out+0x48>)
    6a76:	2201      	movs	r2, #1
    6a78:	701a      	strb	r2, [r3, #0]
    6a7a:	e002      	b.n	6a82 <rtt_console_out+0x42>
				host_present = false;
    6a7c:	4b02      	ldr	r3, [pc, #8]	; (6a88 <rtt_console_out+0x48>)
    6a7e:	2200      	movs	r2, #0
    6a80:	701a      	strb	r2, [r3, #0]
}
    6a82:	4630      	mov	r0, r6
    6a84:	b002      	add	sp, #8
    6a86:	bd70      	pop	{r4, r5, r6, pc}
    6a88:	20002971 	.word	0x20002971

00006a8c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6a8c:	b128      	cbz	r0, 6a9a <get_dev+0xe>
    6a8e:	2801      	cmp	r0, #1
    6a90:	d101      	bne.n	6a96 <get_dev+0xa>
    6a92:	4803      	ldr	r0, [pc, #12]	; (6aa0 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    6a94:	4770      	bx	lr
	const struct device *dev = NULL;
    6a96:	2000      	movs	r0, #0
    6a98:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6a9a:	4802      	ldr	r0, [pc, #8]	; (6aa4 <get_dev+0x18>)
    6a9c:	4770      	bx	lr
    6a9e:	bf00      	nop
    6aa0:	0001371c 	.word	0x0001371c
    6aa4:	00013734 	.word	0x00013734

00006aa8 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    6aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aaa:	4604      	mov	r4, r0
    6aac:	4615      	mov	r5, r2
	__ASSERT(callback, "No callback!");
    6aae:	460e      	mov	r6, r1
    6ab0:	b161      	cbz	r1, 6acc <gpio_manage_callback+0x24>
	__ASSERT(callback->handler, "No callback handler!");
    6ab2:	6873      	ldr	r3, [r6, #4]
    6ab4:	b1cb      	cbz	r3, 6aea <gpio_manage_callback+0x42>
	return list->head;
    6ab6:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
    6ab8:	b333      	cbz	r3, 6b08 <gpio_manage_callback+0x60>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6aba:	4631      	mov	r1, r6
    6abc:	4620      	mov	r0, r4
    6abe:	f00a fda7 	bl	11610 <sys_slist_find_and_remove>
    6ac2:	bb08      	cbnz	r0, 6b08 <gpio_manage_callback+0x60>
			if (!set) {
    6ac4:	bb0d      	cbnz	r5, 6b0a <gpio_manage_callback+0x62>
				return -EINVAL;
    6ac6:	f06f 0015 	mvn.w	r0, #21
    6aca:	e024      	b.n	6b16 <gpio_manage_callback+0x6e>
	__ASSERT(callback, "No callback!");
    6acc:	4f15      	ldr	r7, [pc, #84]	; (6b24 <gpio_manage_callback+0x7c>)
    6ace:	2324      	movs	r3, #36	; 0x24
    6ad0:	463a      	mov	r2, r7
    6ad2:	4915      	ldr	r1, [pc, #84]	; (6b28 <gpio_manage_callback+0x80>)
    6ad4:	4815      	ldr	r0, [pc, #84]	; (6b2c <gpio_manage_callback+0x84>)
    6ad6:	f009 fe2f 	bl	10738 <assert_print>
    6ada:	4815      	ldr	r0, [pc, #84]	; (6b30 <gpio_manage_callback+0x88>)
    6adc:	f009 fe2c 	bl	10738 <assert_print>
    6ae0:	2124      	movs	r1, #36	; 0x24
    6ae2:	4638      	mov	r0, r7
    6ae4:	f009 fe21 	bl	1072a <assert_post_action>
    6ae8:	e7e3      	b.n	6ab2 <gpio_manage_callback+0xa>
	__ASSERT(callback->handler, "No callback handler!");
    6aea:	4f0e      	ldr	r7, [pc, #56]	; (6b24 <gpio_manage_callback+0x7c>)
    6aec:	2325      	movs	r3, #37	; 0x25
    6aee:	463a      	mov	r2, r7
    6af0:	4910      	ldr	r1, [pc, #64]	; (6b34 <gpio_manage_callback+0x8c>)
    6af2:	480e      	ldr	r0, [pc, #56]	; (6b2c <gpio_manage_callback+0x84>)
    6af4:	f009 fe20 	bl	10738 <assert_print>
    6af8:	480f      	ldr	r0, [pc, #60]	; (6b38 <gpio_manage_callback+0x90>)
    6afa:	f009 fe1d 	bl	10738 <assert_print>
    6afe:	2125      	movs	r1, #37	; 0x25
    6b00:	4638      	mov	r0, r7
    6b02:	f009 fe12 	bl	1072a <assert_post_action>
    6b06:	e7d6      	b.n	6ab6 <gpio_manage_callback+0xe>
			}
		}
	}

	if (set) {
    6b08:	b14d      	cbz	r5, 6b1e <gpio_manage_callback+0x76>
    6b0a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    6b0c:	6033      	str	r3, [r6, #0]
	list->head = node;
    6b0e:	6026      	str	r6, [r4, #0]
	return list->tail;
    6b10:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    6b12:	b10b      	cbz	r3, 6b18 <gpio_manage_callback+0x70>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6b14:	2000      	movs	r0, #0
}
    6b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	list->tail = node;
    6b18:	6066      	str	r6, [r4, #4]
	return 0;
    6b1a:	2000      	movs	r0, #0
}
    6b1c:	e7fb      	b.n	6b16 <gpio_manage_callback+0x6e>
    6b1e:	2000      	movs	r0, #0
    6b20:	e7f9      	b.n	6b16 <gpio_manage_callback+0x6e>
    6b22:	bf00      	nop
    6b24:	00015150 	.word	0x00015150
    6b28:	00015180 	.word	0x00015180
    6b2c:	00013d44 	.word	0x00013d44
    6b30:	0001518c 	.word	0x0001518c
    6b34:	0001519c 	.word	0x0001519c
    6b38:	000151b0 	.word	0x000151b0

00006b3c <nrf_gpio_pin_port_decode>:
{
    6b3c:	b538      	push	{r3, r4, r5, lr}
    6b3e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b40:	6800      	ldr	r0, [r0, #0]
    6b42:	f00a fd40 	bl	115c6 <nrf_gpio_pin_present_check>
    6b46:	b1b0      	cbz	r0, 6b76 <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    6b48:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    6b4a:	f003 021f 	and.w	r2, r3, #31
    6b4e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b50:	095b      	lsrs	r3, r3, #5
    6b52:	d01e      	beq.n	6b92 <nrf_gpio_pin_port_decode+0x56>
    6b54:	2b01      	cmp	r3, #1
    6b56:	d01e      	beq.n	6b96 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    6b58:	4c10      	ldr	r4, [pc, #64]	; (6b9c <nrf_gpio_pin_port_decode+0x60>)
    6b5a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    6b5e:	4622      	mov	r2, r4
    6b60:	490f      	ldr	r1, [pc, #60]	; (6ba0 <nrf_gpio_pin_port_decode+0x64>)
    6b62:	4810      	ldr	r0, [pc, #64]	; (6ba4 <nrf_gpio_pin_port_decode+0x68>)
    6b64:	f009 fde8 	bl	10738 <assert_print>
    6b68:	f44f 7113 	mov.w	r1, #588	; 0x24c
    6b6c:	4620      	mov	r0, r4
    6b6e:	f009 fddc 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    6b72:	480d      	ldr	r0, [pc, #52]	; (6ba8 <nrf_gpio_pin_port_decode+0x6c>)
    6b74:	e010      	b.n	6b98 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b76:	4d09      	ldr	r5, [pc, #36]	; (6b9c <nrf_gpio_pin_port_decode+0x60>)
    6b78:	f240 2347 	movw	r3, #583	; 0x247
    6b7c:	462a      	mov	r2, r5
    6b7e:	490b      	ldr	r1, [pc, #44]	; (6bac <nrf_gpio_pin_port_decode+0x70>)
    6b80:	4808      	ldr	r0, [pc, #32]	; (6ba4 <nrf_gpio_pin_port_decode+0x68>)
    6b82:	f009 fdd9 	bl	10738 <assert_print>
    6b86:	f240 2147 	movw	r1, #583	; 0x247
    6b8a:	4628      	mov	r0, r5
    6b8c:	f009 fdcd 	bl	1072a <assert_post_action>
    6b90:	e7da      	b.n	6b48 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    6b92:	4805      	ldr	r0, [pc, #20]	; (6ba8 <nrf_gpio_pin_port_decode+0x6c>)
    6b94:	e000      	b.n	6b98 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b96:	4806      	ldr	r0, [pc, #24]	; (6bb0 <nrf_gpio_pin_port_decode+0x74>)
}
    6b98:	bd38      	pop	{r3, r4, r5, pc}
    6b9a:	bf00      	nop
    6b9c:	000141c0 	.word	0x000141c0
    6ba0:	000156e0 	.word	0x000156e0
    6ba4:	00013d44 	.word	0x00013d44
    6ba8:	50842500 	.word	0x50842500
    6bac:	000141f4 	.word	0x000141f4
    6bb0:	50842800 	.word	0x50842800

00006bb4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    6bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bb8:	460f      	mov	r7, r1
    6bba:	4616      	mov	r6, r2
	return list->head;
    6bbc:	6804      	ldr	r4, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6bbe:	b124      	cbz	r4, 6bca <gpio_fire_callbacks+0x16>
	return node->next;
    6bc0:	6825      	ldr	r5, [r4, #0]
    6bc2:	b185      	cbz	r5, 6be6 <gpio_fire_callbacks+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6bc4:	b97c      	cbnz	r4, 6be6 <gpio_fire_callbacks+0x32>
    6bc6:	4625      	mov	r5, r4
    6bc8:	e00d      	b.n	6be6 <gpio_fire_callbacks+0x32>
    6bca:	4625      	mov	r5, r4
    6bcc:	e00b      	b.n	6be6 <gpio_fire_callbacks+0x32>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6bce:	6863      	ldr	r3, [r4, #4]
    6bd0:	68a2      	ldr	r2, [r4, #8]
    6bd2:	4032      	ands	r2, r6
    6bd4:	4621      	mov	r1, r4
    6bd6:	4638      	mov	r0, r7
    6bd8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6bda:	b1ed      	cbz	r5, 6c18 <gpio_fire_callbacks+0x64>
	return node->next;
    6bdc:	682b      	ldr	r3, [r5, #0]
    6bde:	b103      	cbz	r3, 6be2 <gpio_fire_callbacks+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6be0:	b1c5      	cbz	r5, 6c14 <gpio_fire_callbacks+0x60>
    6be2:	462c      	mov	r4, r5
    6be4:	461d      	mov	r5, r3
    6be6:	b1cc      	cbz	r4, 6c1c <gpio_fire_callbacks+0x68>
		if (cb->pin_mask & pins) {
    6be8:	68a3      	ldr	r3, [r4, #8]
    6bea:	4233      	tst	r3, r6
    6bec:	d0f5      	beq.n	6bda <gpio_fire_callbacks+0x26>
			__ASSERT(cb->handler, "No callback handler!");
    6bee:	6863      	ldr	r3, [r4, #4]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d1ec      	bne.n	6bce <gpio_fire_callbacks+0x1a>
    6bf4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 6c20 <gpio_fire_callbacks+0x6c>
    6bf8:	2345      	movs	r3, #69	; 0x45
    6bfa:	4642      	mov	r2, r8
    6bfc:	4909      	ldr	r1, [pc, #36]	; (6c24 <gpio_fire_callbacks+0x70>)
    6bfe:	480a      	ldr	r0, [pc, #40]	; (6c28 <gpio_fire_callbacks+0x74>)
    6c00:	f009 fd9a 	bl	10738 <assert_print>
    6c04:	4809      	ldr	r0, [pc, #36]	; (6c2c <gpio_fire_callbacks+0x78>)
    6c06:	f009 fd97 	bl	10738 <assert_print>
    6c0a:	2145      	movs	r1, #69	; 0x45
    6c0c:	4640      	mov	r0, r8
    6c0e:	f009 fd8c 	bl	1072a <assert_post_action>
    6c12:	e7dc      	b.n	6bce <gpio_fire_callbacks+0x1a>
    6c14:	462b      	mov	r3, r5
    6c16:	e7e4      	b.n	6be2 <gpio_fire_callbacks+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6c18:	462b      	mov	r3, r5
    6c1a:	e7e2      	b.n	6be2 <gpio_fire_callbacks+0x2e>
		}
	}
}
    6c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c20:	00015150 	.word	0x00015150
    6c24:	000151c8 	.word	0x000151c8
    6c28:	00013d44 	.word	0x00013d44
    6c2c:	000151b0 	.word	0x000151b0

00006c30 <gpio_nrfx_pin_interrupt_configure>:
{
    6c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c32:	b085      	sub	sp, #20
    6c34:	460e      	mov	r6, r1
    6c36:	4619      	mov	r1, r3
	return port->config;
    6c38:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6c3a:	7b1b      	ldrb	r3, [r3, #12]
    6c3c:	f006 051f 	and.w	r5, r6, #31
    6c40:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6c44:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    6c48:	d022      	beq.n	6c90 <gpio_nrfx_pin_interrupt_configure+0x60>
    6c4a:	4607      	mov	r7, r0
    6c4c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6c4e:	2300      	movs	r3, #0
    6c50:	9301      	str	r3, [sp, #4]
    6c52:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    6c54:	4610      	mov	r0, r2
    6c56:	f00a fd5e 	bl	11716 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6c5a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    6c5e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6c60:	6899      	ldr	r1, [r3, #8]
    6c62:	40f1      	lsrs	r1, r6
    6c64:	f011 0f01 	tst.w	r1, #1
    6c68:	d102      	bne.n	6c70 <gpio_nrfx_pin_interrupt_configure+0x40>
    6c6a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    6c6e:	d014      	beq.n	6c9a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6c70:	2300      	movs	r3, #0
    6c72:	aa01      	add	r2, sp, #4
    6c74:	4619      	mov	r1, r3
    6c76:	4628      	mov	r0, r5
    6c78:	f003 f99a 	bl	9fb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6c7c:	4b16      	ldr	r3, [pc, #88]	; (6cd8 <gpio_nrfx_pin_interrupt_configure+0xa8>)
    6c7e:	4298      	cmp	r0, r3
    6c80:	d126      	bne.n	6cd0 <gpio_nrfx_pin_interrupt_configure+0xa0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    6c82:	2101      	movs	r1, #1
    6c84:	4628      	mov	r0, r5
    6c86:	f003 fb0b 	bl	a2a0 <nrfx_gpiote_trigger_enable>
	return 0;
    6c8a:	2000      	movs	r0, #0
}
    6c8c:	b005      	add	sp, #20
    6c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    6c90:	4628      	mov	r0, r5
    6c92:	f003 fb5f 	bl	a354 <nrfx_gpiote_trigger_disable>
		return 0;
    6c96:	2000      	movs	r0, #0
    6c98:	e7f8      	b.n	6c8c <gpio_nrfx_pin_interrupt_configure+0x5c>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_INPUT)) {
    6c9a:	4628      	mov	r0, r5
    6c9c:	f00a fd57 	bl	1174e <nrf_gpio_pin_dir_get>
	    (mode == GPIO_INT_MODE_EDGE) &&
    6ca0:	2800      	cmp	r0, #0
    6ca2:	d1e5      	bne.n	6c70 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6ca4:	f10d 010f 	add.w	r1, sp, #15
    6ca8:	4628      	mov	r0, r5
    6caa:	f003 fa89 	bl	a1c0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    6cae:	4b0b      	ldr	r3, [pc, #44]	; (6cdc <gpio_nrfx_pin_interrupt_configure+0xac>)
    6cb0:	4298      	cmp	r0, r3
    6cb2:	d003      	beq.n	6cbc <gpio_nrfx_pin_interrupt_configure+0x8c>
		trigger_config.p_in_channel = &ch;
    6cb4:	f10d 030f 	add.w	r3, sp, #15
    6cb8:	9302      	str	r3, [sp, #8]
    6cba:	e7d9      	b.n	6c70 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    6cbc:	f10d 000f 	add.w	r0, sp, #15
    6cc0:	f003 fae6 	bl	a290 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    6cc4:	4b04      	ldr	r3, [pc, #16]	; (6cd8 <gpio_nrfx_pin_interrupt_configure+0xa8>)
    6cc6:	4298      	cmp	r0, r3
    6cc8:	d0f4      	beq.n	6cb4 <gpio_nrfx_pin_interrupt_configure+0x84>
				return -ENOMEM;
    6cca:	f06f 000b 	mvn.w	r0, #11
    6cce:	e7dd      	b.n	6c8c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    6cd0:	f06f 0015 	mvn.w	r0, #21
    6cd4:	e7da      	b.n	6c8c <gpio_nrfx_pin_interrupt_configure+0x5c>
    6cd6:	bf00      	nop
    6cd8:	0bad0000 	.word	0x0bad0000
    6cdc:	0bad0004 	.word	0x0bad0004

00006ce0 <gpio_nrfx_pin_configure>:
{
    6ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce4:	b086      	sub	sp, #24
    6ce6:	460e      	mov	r6, r1
    6ce8:	4614      	mov	r4, r2
	return port->config;
    6cea:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6cee:	f898 300c 	ldrb.w	r3, [r8, #12]
    6cf2:	f001 051f 	and.w	r5, r1, #31
    6cf6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6cfa:	f10d 0117 	add.w	r1, sp, #23
    6cfe:	4628      	mov	r0, r5
    6d00:	f003 fa5e 	bl	a1c0 <nrfx_gpiote_channel_get>
    6d04:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6d06:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    6d0a:	d039      	beq.n	6d80 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6d0c:	2100      	movs	r1, #0
    6d0e:	9103      	str	r1, [sp, #12]
    6d10:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6d12:	460b      	mov	r3, r1
    6d14:	aa03      	add	r2, sp, #12
    6d16:	4628      	mov	r0, r5
    6d18:	f003 f94a 	bl	9fb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6d1c:	4b40      	ldr	r3, [pc, #256]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6d1e:	4298      	cmp	r0, r3
    6d20:	d17b      	bne.n	6e1a <gpio_nrfx_pin_configure+0x13a>
	if (free_ch) {
    6d22:	429f      	cmp	r7, r3
    6d24:	d04a      	beq.n	6dbc <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_OUTPUT) {
    6d26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    6d2a:	d063      	beq.n	6df4 <gpio_nrfx_pin_configure+0x114>
		int rv = get_drive(flags, &drive);
    6d2c:	f10d 0103 	add.w	r1, sp, #3
    6d30:	4620      	mov	r0, r4
    6d32:	f00a fc7d 	bl	11630 <get_drive>
		if (rv != 0) {
    6d36:	4607      	mov	r7, r0
    6d38:	bb48      	cbnz	r0, 6d8e <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    6d3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6d3e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6d42:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    6d46:	bf0c      	ite	eq
    6d48:	2301      	moveq	r3, #1
    6d4a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    6d4c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    6d50:	4620      	mov	r0, r4
    6d52:	f00a fcb0 	bl	116b6 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    6d56:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6d5a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    6d5e:	d040      	beq.n	6de2 <gpio_nrfx_pin_configure+0x102>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6d60:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6d64:	2301      	movs	r3, #1
    6d66:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    6d68:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6d6a:	2200      	movs	r2, #0
    6d6c:	a901      	add	r1, sp, #4
    6d6e:	4628      	mov	r0, r5
    6d70:	f003 f9b4 	bl	a0dc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6d74:	4b2a      	ldr	r3, [pc, #168]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6d76:	4298      	cmp	r0, r3
    6d78:	d009      	beq.n	6d8e <gpio_nrfx_pin_configure+0xae>
    6d7a:	f06f 0715 	mvn.w	r7, #21
    6d7e:	e006      	b.n	6d8e <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6d80:	4628      	mov	r0, r5
    6d82:	f003 fb09 	bl	a398 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6d86:	4b26      	ldr	r3, [pc, #152]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6d88:	429f      	cmp	r7, r3
    6d8a:	d004      	beq.n	6d96 <gpio_nrfx_pin_configure+0xb6>
		return 0;
    6d8c:	2700      	movs	r7, #0
}
    6d8e:	4638      	mov	r0, r7
    6d90:	b006      	add	sp, #24
    6d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    6d96:	f89d 0017 	ldrb.w	r0, [sp, #23]
    6d9a:	f003 fa71 	bl	a280 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    6d9e:	4b20      	ldr	r3, [pc, #128]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6da0:	4298      	cmp	r0, r3
    6da2:	d0f3      	beq.n	6d8c <gpio_nrfx_pin_configure+0xac>
    6da4:	4c1f      	ldr	r4, [pc, #124]	; (6e24 <gpio_nrfx_pin_configure+0x144>)
    6da6:	2368      	movs	r3, #104	; 0x68
    6da8:	4622      	mov	r2, r4
    6daa:	491f      	ldr	r1, [pc, #124]	; (6e28 <gpio_nrfx_pin_configure+0x148>)
    6dac:	481f      	ldr	r0, [pc, #124]	; (6e2c <gpio_nrfx_pin_configure+0x14c>)
    6dae:	f009 fcc3 	bl	10738 <assert_print>
    6db2:	2168      	movs	r1, #104	; 0x68
    6db4:	4620      	mov	r0, r4
    6db6:	f009 fcb8 	bl	1072a <assert_post_action>
    6dba:	e7e7      	b.n	6d8c <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    6dbc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    6dc0:	f003 fa5e 	bl	a280 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    6dc4:	4b16      	ldr	r3, [pc, #88]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6dc6:	4298      	cmp	r0, r3
    6dc8:	d0ad      	beq.n	6d26 <gpio_nrfx_pin_configure+0x46>
    6dca:	4f16      	ldr	r7, [pc, #88]	; (6e24 <gpio_nrfx_pin_configure+0x144>)
    6dcc:	237a      	movs	r3, #122	; 0x7a
    6dce:	463a      	mov	r2, r7
    6dd0:	4915      	ldr	r1, [pc, #84]	; (6e28 <gpio_nrfx_pin_configure+0x148>)
    6dd2:	4816      	ldr	r0, [pc, #88]	; (6e2c <gpio_nrfx_pin_configure+0x14c>)
    6dd4:	f009 fcb0 	bl	10738 <assert_print>
    6dd8:	217a      	movs	r1, #122	; 0x7a
    6dda:	4638      	mov	r0, r7
    6ddc:	f009 fca5 	bl	1072a <assert_post_action>
    6de0:	e7a1      	b.n	6d26 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6de2:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    6de6:	d0c0      	beq.n	6d6a <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6de8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6dec:	2301      	movs	r3, #1
    6dee:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    6df0:	60d3      	str	r3, [r2, #12]
}
    6df2:	e7ba      	b.n	6d6a <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    6df4:	4620      	mov	r0, r4
    6df6:	f00a fc5e 	bl	116b6 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    6dfa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6dfe:	2300      	movs	r3, #0
    6e00:	461a      	mov	r2, r3
    6e02:	a902      	add	r1, sp, #8
    6e04:	4628      	mov	r0, r5
    6e06:	f003 f8d3 	bl	9fb0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6e0a:	4b05      	ldr	r3, [pc, #20]	; (6e20 <gpio_nrfx_pin_configure+0x140>)
    6e0c:	4298      	cmp	r0, r3
    6e0e:	d101      	bne.n	6e14 <gpio_nrfx_pin_configure+0x134>
    6e10:	2700      	movs	r7, #0
    6e12:	e7bc      	b.n	6d8e <gpio_nrfx_pin_configure+0xae>
    6e14:	f06f 0715 	mvn.w	r7, #21
    6e18:	e7b9      	b.n	6d8e <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    6e1a:	f06f 0715 	mvn.w	r7, #21
    6e1e:	e7b6      	b.n	6d8e <gpio_nrfx_pin_configure+0xae>
    6e20:	0bad0000 	.word	0x0bad0000
    6e24:	000151d4 	.word	0x000151d4
    6e28:	000142d8 	.word	0x000142d8
    6e2c:	00013d44 	.word	0x00013d44

00006e30 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6e30:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6e32:	f003 fa1b 	bl	a26c <nrfx_gpiote_is_init>
    6e36:	b108      	cbz	r0, 6e3c <gpio_nrfx_init+0xc>
		return 0;
    6e38:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6e3a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    6e3c:	f003 f9ec 	bl	a218 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6e40:	4b08      	ldr	r3, [pc, #32]	; (6e64 <gpio_nrfx_init+0x34>)
    6e42:	4298      	cmp	r0, r3
    6e44:	d10a      	bne.n	6e5c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6e46:	2100      	movs	r1, #0
    6e48:	4807      	ldr	r0, [pc, #28]	; (6e68 <gpio_nrfx_init+0x38>)
    6e4a:	f003 f9b3 	bl	a1b4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6e4e:	2200      	movs	r2, #0
    6e50:	2105      	movs	r1, #5
    6e52:	200d      	movs	r0, #13
    6e54:	f7fd ff88 	bl	4d68 <z_arm_irq_priority_set>
	return 0;
    6e58:	2000      	movs	r0, #0
    6e5a:	e7ee      	b.n	6e3a <gpio_nrfx_init+0xa>
		return -EIO;
    6e5c:	f06f 0004 	mvn.w	r0, #4
    6e60:	e7eb      	b.n	6e3a <gpio_nrfx_init+0xa>
    6e62:	bf00      	nop
    6e64:	0bad0000 	.word	0x0bad0000
    6e68:	0001176d 	.word	0x0001176d

00006e6c <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    6e6c:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6e6e:	6844      	ldr	r4, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    6e70:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    6e72:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    6e76:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
#endif

	/* disable peripheral if active (required to release SCL/SDA lines) */
	(void)pm_device_state_get(dev, &state);
	if (state == PM_DEVICE_STATE_ACTIVE) {
		nrfx_twim_disable(&dev_config->twim);
    6e7a:	4620      	mov	r0, r4
    6e7c:	f004 f9ae 	bl	b1dc <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    6e80:	4631      	mov	r1, r6
    6e82:	4628      	mov	r0, r5
    6e84:	f004 fa8c 	bl	b3a0 <nrfx_twi_twim_bus_recover>
    6e88:	4605      	mov	r5, r0

	err = nrfx_twim_bus_recover(scl_pin, sda_pin);

	/* restore peripheral if it was active before */
	if (state == PM_DEVICE_STATE_ACTIVE) {
		(void)pinctrl_apply_state(dev_config->pcfg,
    6e8a:	2100      	movs	r1, #0
    6e8c:	6a20      	ldr	r0, [r4, #32]
    6e8e:	f00a fc7c 	bl	1178a <pinctrl_apply_state>
					  PINCTRL_STATE_DEFAULT);
		nrfx_twim_enable(&dev_config->twim);
    6e92:	4620      	mov	r0, r4
    6e94:	f004 f974 	bl	b180 <nrfx_twim_enable>
	}

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    6e98:	4b03      	ldr	r3, [pc, #12]	; (6ea8 <i2c_nrfx_twim_recover_bus+0x3c>)
    6e9a:	429d      	cmp	r5, r3
    6e9c:	d101      	bne.n	6ea2 <i2c_nrfx_twim_recover_bus+0x36>
    6e9e:	2000      	movs	r0, #0
}
    6ea0:	bd70      	pop	{r4, r5, r6, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    6ea2:	f06f 000f 	mvn.w	r0, #15
    6ea6:	e7fb      	b.n	6ea0 <i2c_nrfx_twim_recover_bus+0x34>
    6ea8:	0bad0000 	.word	0x0bad0000

00006eac <i2c_nrfx_twim_configure>:
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6eac:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    6eae:	f011 0f01 	tst.w	r1, #1
    6eb2:	d148      	bne.n	6f46 <i2c_nrfx_twim_configure+0x9a>
	switch (I2C_SPEED_GET(i2c_config)) {
    6eb4:	f3c1 0142 	ubfx	r1, r1, #1, #3
    6eb8:	2902      	cmp	r1, #2
    6eba:	d036      	beq.n	6f2a <i2c_nrfx_twim_configure+0x7e>
    6ebc:	2903      	cmp	r1, #3
    6ebe:	d03b      	beq.n	6f38 <i2c_nrfx_twim_configure+0x8c>
    6ec0:	2901      	cmp	r1, #1
    6ec2:	d02b      	beq.n	6f1c <i2c_nrfx_twim_configure+0x70>
{
    6ec4:	b500      	push	{lr}
    6ec6:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("unsupported speed");
    6ec8:	4b20      	ldr	r3, [pc, #128]	; (6f4c <i2c_nrfx_twim_configure+0xa0>)
    6eca:	9307      	str	r3, [sp, #28]
    6ecc:	2302      	movs	r3, #2
    6ece:	f88d 3004 	strb.w	r3, [sp, #4]
    6ed2:	2300      	movs	r3, #0
    6ed4:	f88d 3005 	strb.w	r3, [sp, #5]
    6ed8:	f88d 3006 	strb.w	r3, [sp, #6]
    6edc:	f88d 3007 	strb.w	r3, [sp, #7]
    6ee0:	9a01      	ldr	r2, [sp, #4]
    6ee2:	9206      	str	r2, [sp, #24]
    6ee4:	4619      	mov	r1, r3
    6ee6:	f363 0100 	bfi	r1, r3, #0, #1
    6eea:	f363 0141 	bfi	r1, r3, #1, #1
    6eee:	f363 0182 	bfi	r1, r3, #2, #1
    6ef2:	f363 01c5 	bfi	r1, r3, #3, #3
    6ef6:	2201      	movs	r2, #1
    6ef8:	f362 1188 	bfi	r1, r2, #6, #3
    6efc:	2208      	movs	r2, #8
    6efe:	f362 2152 	bfi	r1, r2, #9, #10
    6f02:	f363 41de 	bfi	r1, r3, #19, #12
    6f06:	f363 71df 	bfi	r1, r3, #31, #1
    6f0a:	aa06      	add	r2, sp, #24
    6f0c:	4810      	ldr	r0, [pc, #64]	; (6f50 <i2c_nrfx_twim_configure+0xa4>)
    6f0e:	f7fc fbab 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    6f12:	f06f 0015 	mvn.w	r0, #21
}
    6f16:	b009      	add	sp, #36	; 0x24
    6f18:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6f1c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    6f1e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6f22:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    6f26:	2000      	movs	r0, #0
}
    6f28:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6f2a:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    6f2c:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    6f30:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    6f34:	2000      	movs	r0, #0
}
    6f36:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6f38:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    6f3a:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
    6f3e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    6f42:	2000      	movs	r0, #0
}
    6f44:	4770      	bx	lr
		return -EINVAL;
    6f46:	f06f 0015 	mvn.w	r0, #21
}
    6f4a:	4770      	bx	lr
    6f4c:	00015260 	.word	0x00015260
    6f50:	00013a84 	.word	0x00013a84

00006f54 <i2c_nrfx_twim_transfer>:
{
    6f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f58:	b091      	sub	sp, #68	; 0x44
    6f5a:	af00      	add	r7, sp, #0
    6f5c:	4683      	mov	fp, r0
    6f5e:	4689      	mov	r9, r1
    6f60:	4692      	mov	sl, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    6f62:	6901      	ldr	r1, [r0, #16]
    6f64:	460c      	mov	r4, r1
    6f66:	60f9      	str	r1, [r7, #12]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6f68:	6842      	ldr	r2, [r0, #4]
    6f6a:	617a      	str	r2, [r7, #20]
	uint8_t *msg_buf = dev_data->msg_buf;
    6f6c:	6a48      	ldr	r0, [r1, #36]	; 0x24
    6f6e:	61b8      	str	r0, [r7, #24]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    6f70:	8b12      	ldrh	r2, [r2, #24]
    6f72:	607a      	str	r2, [r7, #4]
	nrfx_twim_xfer_desc_t cur_xfer = {
    6f74:	2500      	movs	r5, #0
    6f76:	62fd      	str	r5, [r7, #44]	; 0x2c
    6f78:	633d      	str	r5, [r7, #48]	; 0x30
    6f7a:	637d      	str	r5, [r7, #52]	; 0x34
    6f7c:	63bd      	str	r5, [r7, #56]	; 0x38
    6f7e:	63fd      	str	r5, [r7, #60]	; 0x3c
    6f80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    6f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f8c:	4608      	mov	r0, r1
    6f8e:	f005 fff3 	bl	cf78 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    6f92:	f104 0310 	add.w	r3, r4, #16
    6f96:	4618      	mov	r0, r3
    6f98:	60bb      	str	r3, [r7, #8]
    6f9a:	2200      	movs	r2, #0
    6f9c:	2300      	movs	r3, #0
    6f9e:	f005 ffeb 	bl	cf78 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    6fa2:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
    6fa4:	462c      	mov	r4, r5
	int ret = 0;
    6fa6:	613d      	str	r5, [r7, #16]
    6fa8:	f8c7 b000 	str.w	fp, [r7]
	for (size_t i = 0; i < num_msgs; i++) {
    6fac:	e04b      	b.n	7046 <i2c_nrfx_twim_transfer+0xf2>
		if (concat_next || (msg_buf_used != 0)) {
    6fae:	2c00      	cmp	r4, #0
    6fb0:	f000 80e6 	beq.w	7180 <i2c_nrfx_twim_transfer+0x22c>
		bool concat_next = ((i + 1) < num_msgs)
    6fb4:	2200      	movs	r2, #0
    6fb6:	61fa      	str	r2, [r7, #28]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    6fb8:	4620      	mov	r0, r4
    6fba:	686a      	ldr	r2, [r5, #4]
    6fbc:	18a1      	adds	r1, r4, r2
    6fbe:	f8d7 c004 	ldr.w	ip, [r7, #4]
    6fc2:	4561      	cmp	r1, ip
    6fc4:	d863      	bhi.n	708e <i2c_nrfx_twim_transfer+0x13a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    6fc6:	f013 0f01 	tst.w	r3, #1
    6fca:	f000 80d2 	beq.w	7172 <i2c_nrfx_twim_transfer+0x21e>
			msg_buf_used += msgs[i].len;
    6fce:	686b      	ldr	r3, [r5, #4]
    6fd0:	4423      	add	r3, r4
    6fd2:	b29c      	uxth	r4, r3
		if (concat_next) {
    6fd4:	69fb      	ldr	r3, [r7, #28]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d134      	bne.n	7044 <i2c_nrfx_twim_transfer+0xf0>
		if (msg_buf_used == 0) {
    6fda:	2c00      	cmp	r4, #0
    6fdc:	f040 8154 	bne.w	7288 <i2c_nrfx_twim_transfer+0x334>
			cur_xfer.p_primary_buf = msgs[i].buf;
    6fe0:	f859 300b 	ldr.w	r3, [r9, fp]
    6fe4:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msgs[i].len;
    6fe6:	686b      	ldr	r3, [r5, #4]
    6fe8:	633b      	str	r3, [r7, #48]	; 0x30
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    6fea:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    6fec:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    6ff0:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    6ff4:	f013 0f02 	tst.w	r3, #2
    6ff8:	f000 814a 	beq.w	7290 <i2c_nrfx_twim_transfer+0x33c>
    6ffc:	2200      	movs	r2, #0
    6ffe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    7002:	6978      	ldr	r0, [r7, #20]
    7004:	f004 f924 	bl	b250 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    7008:	4ba8      	ldr	r3, [pc, #672]	; (72ac <i2c_nrfx_twim_transfer+0x358>)
    700a:	4298      	cmp	r0, r3
    700c:	f040 8142 	bne.w	7294 <i2c_nrfx_twim_transfer+0x340>
    7010:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7014:	2300      	movs	r3, #0
    7016:	68b8      	ldr	r0, [r7, #8]
    7018:	f005 ffae 	bl	cf78 <z_impl_k_sem_take>
		if (ret != 0) {
    701c:	6138      	str	r0, [r7, #16]
    701e:	2800      	cmp	r0, #0
    7020:	f040 814c 	bne.w	72bc <i2c_nrfx_twim_transfer+0x368>
		res = dev_data->res;
    7024:	68fb      	ldr	r3, [r7, #12]
    7026:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    7028:	4aa0      	ldr	r2, [pc, #640]	; (72ac <i2c_nrfx_twim_transfer+0x358>)
    702a:	4293      	cmp	r3, r2
    702c:	f040 818e 	bne.w	734c <i2c_nrfx_twim_transfer+0x3f8>
		if ((msgs[i].flags & I2C_MSG_READ)
    7030:	7a2b      	ldrb	r3, [r5, #8]
    7032:	f013 0f01 	tst.w	r3, #1
    7036:	d004      	beq.n	7042 <i2c_nrfx_twim_transfer+0xee>
		    && cur_xfer.p_primary_buf == msg_buf) {
    7038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    703a:	69ba      	ldr	r2, [r7, #24]
    703c:	429a      	cmp	r2, r3
    703e:	f000 81cd 	beq.w	73dc <i2c_nrfx_twim_transfer+0x488>
		msg_buf_used = 0;
    7042:	2400      	movs	r4, #0
    7044:	4646      	mov	r6, r8
	for (size_t i = 0; i < num_msgs; i++) {
    7046:	4556      	cmp	r6, sl
    7048:	f080 81de 	bcs.w	7408 <i2c_nrfx_twim_transfer+0x4b4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    704c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    7050:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    7054:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    7058:	7a2b      	ldrb	r3, [r5, #8]
    705a:	f013 0f08 	tst.w	r3, #8
    705e:	f040 81d0 	bne.w	7402 <i2c_nrfx_twim_transfer+0x4ae>
		bool concat_next = ((i + 1) < num_msgs)
    7062:	f106 0801 	add.w	r8, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    7066:	45d0      	cmp	r8, sl
    7068:	d2a1      	bcs.n	6fae <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    706a:	f013 0f02 	tst.w	r3, #2
    706e:	d19e      	bne.n	6fae <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    7070:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    7074:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    7078:	7a12      	ldrb	r2, [r2, #8]
    707a:	f012 0f04 	tst.w	r2, #4
    707e:	d196      	bne.n	6fae <i2c_nrfx_twim_transfer+0x5a>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    7080:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    7082:	f012 0f01 	tst.w	r2, #1
    7086:	d192      	bne.n	6fae <i2c_nrfx_twim_transfer+0x5a>
		bool concat_next = ((i + 1) < num_msgs)
    7088:	2201      	movs	r2, #1
    708a:	61fa      	str	r2, [r7, #28]
    708c:	e794      	b.n	6fb8 <i2c_nrfx_twim_transfer+0x64>
				LOG_ERR("Need to use concatenation buffer and "
    708e:	f8d7 b000 	ldr.w	fp, [r7]
    7092:	f8db 0000 	ldr.w	r0, [fp]
    7096:	466d      	mov	r5, sp
    7098:	2305      	movs	r3, #5
    709a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    709e:	b08c      	sub	sp, #48	; 0x30
    70a0:	466b      	mov	r3, sp
    70a2:	f113 0610 	adds.w	r6, r3, #16
    70a6:	d04f      	beq.n	7148 <i2c_nrfx_twim_transfer+0x1f4>
    70a8:	f04f 0c19 	mov.w	ip, #25
    70ac:	2e00      	cmp	r6, #0
    70ae:	d04e      	beq.n	714e <i2c_nrfx_twim_transfer+0x1fa>
    70b0:	4661      	mov	r1, ip
    70b2:	f1bc 0f04 	cmp.w	ip, #4
    70b6:	dd03      	ble.n	70c0 <i2c_nrfx_twim_transfer+0x16c>
    70b8:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 72b0 <i2c_nrfx_twim_transfer+0x35c>
    70bc:	f8c3 e014 	str.w	lr, [r3, #20]
    70c0:	2908      	cmp	r1, #8
    70c2:	dd00      	ble.n	70c6 <i2c_nrfx_twim_transfer+0x172>
    70c4:	619c      	str	r4, [r3, #24]
    70c6:	290c      	cmp	r1, #12
    70c8:	dd00      	ble.n	70cc <i2c_nrfx_twim_transfer+0x178>
    70ca:	61da      	str	r2, [r3, #28]
    70cc:	2910      	cmp	r1, #16
    70ce:	dd01      	ble.n	70d4 <i2c_nrfx_twim_transfer+0x180>
    70d0:	687a      	ldr	r2, [r7, #4]
    70d2:	621a      	str	r2, [r3, #32]
    70d4:	2205      	movs	r2, #5
    70d6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    70da:	2914      	cmp	r1, #20
    70dc:	dd00      	ble.n	70e0 <i2c_nrfx_twim_transfer+0x18c>
    70de:	6258      	str	r0, [r3, #36]	; 0x24
    70e0:	f103 0128 	add.w	r1, r3, #40	; 0x28
    70e4:	2000      	movs	r0, #0
    70e6:	b3b0      	cbz	r0, 7156 <i2c_nrfx_twim_transfer+0x202>
    70e8:	f1bc 0f18 	cmp.w	ip, #24
    70ec:	dd3e      	ble.n	716c <i2c_nrfx_twim_transfer+0x218>
    70ee:	2219      	movs	r2, #25
    70f0:	b166      	cbz	r6, 710c <i2c_nrfx_twim_transfer+0x1b8>
    70f2:	2106      	movs	r1, #6
    70f4:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    70f8:	2100      	movs	r1, #0
    70fa:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    70fe:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    7102:	2101      	movs	r1, #1
    7104:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    7108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    710a:	6118      	str	r0, [r3, #16]
    710c:	2100      	movs	r1, #0
    710e:	f36f 0100 	bfc	r1, #0, #1
    7112:	f36f 0141 	bfc	r1, #1, #1
    7116:	f36f 0182 	bfc	r1, #2, #1
    711a:	f36f 01c5 	bfc	r1, #3, #3
    711e:	2301      	movs	r3, #1
    7120:	f363 1188 	bfi	r1, r3, #6, #3
    7124:	f3c2 0209 	ubfx	r2, r2, #0, #10
    7128:	f362 2152 	bfi	r1, r2, #9, #10
    712c:	f36f 41de 	bfc	r1, #19, #12
    7130:	f36f 71df 	bfc	r1, #31, #1
    7134:	2300      	movs	r3, #0
    7136:	4632      	mov	r2, r6
    7138:	485e      	ldr	r0, [pc, #376]	; (72b4 <i2c_nrfx_twim_transfer+0x360>)
    713a:	f7fc fa95 	bl	3668 <z_impl_z_log_msg_static_create>
    713e:	46ad      	mov	sp, r5
				ret = -ENOSPC;
    7140:	f06f 031b 	mvn.w	r3, #27
    7144:	613b      	str	r3, [r7, #16]
				break;
    7146:	e15f      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
				LOG_ERR("Need to use concatenation buffer and "
    7148:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    714c:	e7ae      	b.n	70ac <i2c_nrfx_twim_transfer+0x158>
    714e:	2205      	movs	r2, #5
    7150:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    7154:	e7c8      	b.n	70e8 <i2c_nrfx_twim_transfer+0x194>
    7156:	f100 0220 	add.w	r2, r0, #32
    715a:	f107 0420 	add.w	r4, r7, #32
    715e:	4422      	add	r2, r4
    7160:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
    7164:	f801 2b01 	strb.w	r2, [r1], #1
    7168:	3001      	adds	r0, #1
    716a:	e7bc      	b.n	70e6 <i2c_nrfx_twim_transfer+0x192>
    716c:	f06f 021b 	mvn.w	r2, #27
    7170:	e7be      	b.n	70f0 <i2c_nrfx_twim_transfer+0x19c>
				memcpy(msg_buf + msg_buf_used,
    7172:	f859 100b 	ldr.w	r1, [r9, fp]
    7176:	69bb      	ldr	r3, [r7, #24]
    7178:	4418      	add	r0, r3
    717a:	f00a f8cf 	bl	1131c <memcpy>
    717e:	e726      	b.n	6fce <i2c_nrfx_twim_transfer+0x7a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    7180:	f013 0f01 	tst.w	r3, #1
    7184:	d17a      	bne.n	727c <i2c_nrfx_twim_transfer+0x328>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    7186:	f859 100b 	ldr.w	r1, [r9, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    718a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    718e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7192:	d076      	beq.n	7282 <i2c_nrfx_twim_transfer+0x32e>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    7194:	686a      	ldr	r2, [r5, #4]
    7196:	697b      	ldr	r3, [r7, #20]
    7198:	8b5b      	ldrh	r3, [r3, #26]
    719a:	429a      	cmp	r2, r3
    719c:	d806      	bhi.n	71ac <i2c_nrfx_twim_transfer+0x258>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    719e:	69b8      	ldr	r0, [r7, #24]
    71a0:	f00a f8bc 	bl	1131c <memcpy>
			msg_buf_used = msgs[i].len;
    71a4:	88ac      	ldrh	r4, [r5, #4]
		bool concat_next = ((i + 1) < num_msgs)
    71a6:	2300      	movs	r3, #0
    71a8:	61fb      	str	r3, [r7, #28]
    71aa:	e713      	b.n	6fd4 <i2c_nrfx_twim_transfer+0x80>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    71ac:	f8d7 b000 	ldr.w	fp, [r7]
    71b0:	f8db 6000 	ldr.w	r6, [fp]
    71b4:	466c      	mov	r4, sp
    71b6:	2303      	movs	r3, #3
    71b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    71bc:	b08a      	sub	sp, #40	; 0x28
    71be:	466b      	mov	r3, sp
    71c0:	f113 0510 	adds.w	r5, r3, #16
    71c4:	d045      	beq.n	7252 <i2c_nrfx_twim_transfer+0x2fe>
    71c6:	2011      	movs	r0, #17
    71c8:	2d00      	cmp	r5, #0
    71ca:	d045      	beq.n	7258 <i2c_nrfx_twim_transfer+0x304>
    71cc:	4601      	mov	r1, r0
    71ce:	2804      	cmp	r0, #4
    71d0:	dd03      	ble.n	71da <i2c_nrfx_twim_transfer+0x286>
    71d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 72b8 <i2c_nrfx_twim_transfer+0x364>
    71d6:	f8c3 c014 	str.w	ip, [r3, #20]
    71da:	2908      	cmp	r1, #8
    71dc:	dd00      	ble.n	71e0 <i2c_nrfx_twim_transfer+0x28c>
    71de:	619a      	str	r2, [r3, #24]
    71e0:	2203      	movs	r2, #3
    71e2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    71e6:	290c      	cmp	r1, #12
    71e8:	dd00      	ble.n	71ec <i2c_nrfx_twim_transfer+0x298>
    71ea:	61de      	str	r6, [r3, #28]
    71ec:	f103 0120 	add.w	r1, r3, #32
    71f0:	2200      	movs	r2, #0
    71f2:	b3aa      	cbz	r2, 7260 <i2c_nrfx_twim_transfer+0x30c>
    71f4:	2810      	cmp	r0, #16
    71f6:	dd3e      	ble.n	7276 <i2c_nrfx_twim_transfer+0x322>
    71f8:	2211      	movs	r2, #17
    71fa:	b165      	cbz	r5, 7216 <i2c_nrfx_twim_transfer+0x2c2>
    71fc:	2104      	movs	r1, #4
    71fe:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    7202:	2100      	movs	r1, #0
    7204:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    7208:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    720c:	2101      	movs	r1, #1
    720e:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    7212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7214:	6118      	str	r0, [r3, #16]
    7216:	2100      	movs	r1, #0
    7218:	f36f 0100 	bfc	r1, #0, #1
    721c:	f36f 0141 	bfc	r1, #1, #1
    7220:	f36f 0182 	bfc	r1, #2, #1
    7224:	f36f 01c5 	bfc	r1, #3, #3
    7228:	2301      	movs	r3, #1
    722a:	f363 1188 	bfi	r1, r3, #6, #3
    722e:	f3c2 0309 	ubfx	r3, r2, #0, #10
    7232:	f363 2152 	bfi	r1, r3, #9, #10
    7236:	f36f 41de 	bfc	r1, #19, #12
    723a:	f36f 71df 	bfc	r1, #31, #1
    723e:	2300      	movs	r3, #0
    7240:	462a      	mov	r2, r5
    7242:	481c      	ldr	r0, [pc, #112]	; (72b4 <i2c_nrfx_twim_transfer+0x360>)
    7244:	f7fc fa10 	bl	3668 <z_impl_z_log_msg_static_create>
    7248:	46a5      	mov	sp, r4
				ret = -EINVAL;
    724a:	f06f 0315 	mvn.w	r3, #21
    724e:	613b      	str	r3, [r7, #16]
				break;
    7250:	e0da      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    7252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7256:	e7b7      	b.n	71c8 <i2c_nrfx_twim_transfer+0x274>
    7258:	2203      	movs	r2, #3
    725a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    725e:	e7c9      	b.n	71f4 <i2c_nrfx_twim_transfer+0x2a0>
    7260:	f102 0620 	add.w	r6, r2, #32
    7264:	f107 0c20 	add.w	ip, r7, #32
    7268:	4466      	add	r6, ip
    726a:	f816 6c1c 	ldrb.w	r6, [r6, #-28]
    726e:	f801 6b01 	strb.w	r6, [r1], #1
    7272:	3201      	adds	r2, #1
    7274:	e7bd      	b.n	71f2 <i2c_nrfx_twim_transfer+0x29e>
    7276:	f06f 021b 	mvn.w	r2, #27
    727a:	e7be      	b.n	71fa <i2c_nrfx_twim_transfer+0x2a6>
		bool concat_next = ((i + 1) < num_msgs)
    727c:	2300      	movs	r3, #0
    727e:	61fb      	str	r3, [r7, #28]
    7280:	e6a8      	b.n	6fd4 <i2c_nrfx_twim_transfer+0x80>
    7282:	2300      	movs	r3, #0
    7284:	61fb      	str	r3, [r7, #28]
    7286:	e6a5      	b.n	6fd4 <i2c_nrfx_twim_transfer+0x80>
			cur_xfer.p_primary_buf = msg_buf;
    7288:	69bb      	ldr	r3, [r7, #24]
    728a:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msg_buf_used;
    728c:	633c      	str	r4, [r7, #48]	; 0x30
    728e:	e6ac      	b.n	6fea <i2c_nrfx_twim_transfer+0x96>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    7290:	2220      	movs	r2, #32
    7292:	e6b4      	b.n	6ffe <i2c_nrfx_twim_transfer+0xaa>
			if (res == NRFX_ERROR_BUSY) {
    7294:	330b      	adds	r3, #11
    7296:	4298      	cmp	r0, r3
    7298:	d003      	beq.n	72a2 <i2c_nrfx_twim_transfer+0x34e>
				ret = -EIO;
    729a:	f06f 0304 	mvn.w	r3, #4
    729e:	613b      	str	r3, [r7, #16]
    72a0:	e0b2      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
				ret = -EBUSY;
    72a2:	f06f 030f 	mvn.w	r3, #15
    72a6:	613b      	str	r3, [r7, #16]
    72a8:	e0ae      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
    72aa:	bf00      	nop
    72ac:	0bad0000 	.word	0x0bad0000
    72b0:	00015274 	.word	0x00015274
    72b4:	00013a84 	.word	0x00013a84
    72b8:	00015304 	.word	0x00015304
			LOG_ERR("Error on I2C line occurred for message %d", i);
    72bc:	f8d7 b000 	ldr.w	fp, [r7]
    72c0:	466c      	mov	r4, sp
    72c2:	b088      	sub	sp, #32
    72c4:	466b      	mov	r3, sp
    72c6:	f113 0210 	adds.w	r2, r3, #16
    72ca:	d039      	beq.n	7340 <i2c_nrfx_twim_transfer+0x3ec>
    72cc:	210c      	movs	r1, #12
    72ce:	b13a      	cbz	r2, 72e0 <i2c_nrfx_twim_transfer+0x38c>
    72d0:	4608      	mov	r0, r1
    72d2:	2904      	cmp	r1, #4
    72d4:	dd01      	ble.n	72da <i2c_nrfx_twim_transfer+0x386>
    72d6:	4d50      	ldr	r5, [pc, #320]	; (7418 <i2c_nrfx_twim_transfer+0x4c4>)
    72d8:	615d      	str	r5, [r3, #20]
    72da:	2808      	cmp	r0, #8
    72dc:	dd00      	ble.n	72e0 <i2c_nrfx_twim_transfer+0x38c>
    72de:	619e      	str	r6, [r3, #24]
    72e0:	290b      	cmp	r1, #11
    72e2:	dd30      	ble.n	7346 <i2c_nrfx_twim_transfer+0x3f2>
    72e4:	250c      	movs	r5, #12
    72e6:	b15a      	cbz	r2, 7300 <i2c_nrfx_twim_transfer+0x3ac>
    72e8:	2103      	movs	r1, #3
    72ea:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    72ee:	2100      	movs	r1, #0
    72f0:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    72f4:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    72f8:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    72fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    72fe:	6118      	str	r0, [r3, #16]
    7300:	2100      	movs	r1, #0
    7302:	f36f 0100 	bfc	r1, #0, #1
    7306:	f36f 0141 	bfc	r1, #1, #1
    730a:	f36f 0182 	bfc	r1, #2, #1
    730e:	f36f 01c5 	bfc	r1, #3, #3
    7312:	2301      	movs	r3, #1
    7314:	f363 1188 	bfi	r1, r3, #6, #3
    7318:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    731c:	f365 2152 	bfi	r1, r5, #9, #10
    7320:	f36f 41de 	bfc	r1, #19, #12
    7324:	f36f 71df 	bfc	r1, #31, #1
    7328:	2300      	movs	r3, #0
    732a:	483c      	ldr	r0, [pc, #240]	; (741c <i2c_nrfx_twim_transfer+0x4c8>)
    732c:	f7fc f99c 	bl	3668 <z_impl_z_log_msg_static_create>
    7330:	46a5      	mov	sp, r4
			(void)i2c_nrfx_twim_recover_bus(dev);
    7332:	4658      	mov	r0, fp
    7334:	f7ff fd9a 	bl	6e6c <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
    7338:	f06f 0304 	mvn.w	r3, #4
    733c:	613b      	str	r3, [r7, #16]
			break;
    733e:	e063      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    7340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7344:	e7c3      	b.n	72ce <i2c_nrfx_twim_transfer+0x37a>
    7346:	f06f 051b 	mvn.w	r5, #27
    734a:	e7cc      	b.n	72e6 <i2c_nrfx_twim_transfer+0x392>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    734c:	466c      	mov	r4, sp
    734e:	b088      	sub	sp, #32
    7350:	4669      	mov	r1, sp
    7352:	f111 0210 	adds.w	r2, r1, #16
    7356:	d03b      	beq.n	73d0 <i2c_nrfx_twim_transfer+0x47c>
    7358:	2010      	movs	r0, #16
    735a:	b162      	cbz	r2, 7376 <i2c_nrfx_twim_transfer+0x422>
    735c:	4605      	mov	r5, r0
    735e:	2804      	cmp	r0, #4
    7360:	dd03      	ble.n	736a <i2c_nrfx_twim_transfer+0x416>
    7362:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 7420 <i2c_nrfx_twim_transfer+0x4cc>
    7366:	f8c1 c014 	str.w	ip, [r1, #20]
    736a:	2d08      	cmp	r5, #8
    736c:	dd00      	ble.n	7370 <i2c_nrfx_twim_transfer+0x41c>
    736e:	618b      	str	r3, [r1, #24]
    7370:	2d0c      	cmp	r5, #12
    7372:	dd00      	ble.n	7376 <i2c_nrfx_twim_transfer+0x422>
    7374:	61ce      	str	r6, [r1, #28]
    7376:	280f      	cmp	r0, #15
    7378:	dd2d      	ble.n	73d6 <i2c_nrfx_twim_transfer+0x482>
    737a:	2310      	movs	r3, #16
    737c:	b15a      	cbz	r2, 7396 <i2c_nrfx_twim_transfer+0x442>
    737e:	2004      	movs	r0, #4
    7380:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    7384:	2000      	movs	r0, #0
    7386:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    738a:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    738e:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    7392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7394:	6108      	str	r0, [r1, #16]
    7396:	2100      	movs	r1, #0
    7398:	f36f 0100 	bfc	r1, #0, #1
    739c:	f36f 0141 	bfc	r1, #1, #1
    73a0:	f36f 0182 	bfc	r1, #2, #1
    73a4:	f36f 01c5 	bfc	r1, #3, #3
    73a8:	2001      	movs	r0, #1
    73aa:	f360 1188 	bfi	r1, r0, #6, #3
    73ae:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
    73b2:	f363 2152 	bfi	r1, r3, #9, #10
    73b6:	f36f 41de 	bfc	r1, #19, #12
    73ba:	f36f 71df 	bfc	r1, #31, #1
    73be:	2300      	movs	r3, #0
    73c0:	4816      	ldr	r0, [pc, #88]	; (741c <i2c_nrfx_twim_transfer+0x4c8>)
    73c2:	f7fc f951 	bl	3668 <z_impl_z_log_msg_static_create>
    73c6:	46a5      	mov	sp, r4
			ret = -EIO;
    73c8:	f06f 0304 	mvn.w	r3, #4
    73cc:	613b      	str	r3, [r7, #16]
			break;
    73ce:	e01b      	b.n	7408 <i2c_nrfx_twim_transfer+0x4b4>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    73d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    73d4:	e7c1      	b.n	735a <i2c_nrfx_twim_transfer+0x406>
    73d6:	f06f 031b 	mvn.w	r3, #27
    73da:	e7cf      	b.n	737c <i2c_nrfx_twim_transfer+0x428>
			while (msg_buf_used >= msgs[j].len) {
    73dc:	4615      	mov	r5, r2
    73de:	e007      	b.n	73f0 <i2c_nrfx_twim_transfer+0x49c>
				msg_buf_used -= msgs[j].len;
    73e0:	1aa4      	subs	r4, r4, r2
    73e2:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
    73e4:	1929      	adds	r1, r5, r4
    73e6:	f859 0000 	ldr.w	r0, [r9, r0]
    73ea:	f009 ff97 	bl	1131c <memcpy>
				j--;
    73ee:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
    73f0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    73f4:	0098      	lsls	r0, r3, #2
    73f6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    73fa:	685a      	ldr	r2, [r3, #4]
    73fc:	4294      	cmp	r4, r2
    73fe:	d2ef      	bcs.n	73e0 <i2c_nrfx_twim_transfer+0x48c>
    7400:	e61f      	b.n	7042 <i2c_nrfx_twim_transfer+0xee>
			ret = -ENOTSUP;
    7402:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7406:	613b      	str	r3, [r7, #16]
	z_impl_k_sem_give(sem);
    7408:	68f8      	ldr	r0, [r7, #12]
    740a:	f005 fd71 	bl	cef0 <z_impl_k_sem_give>
}
    740e:	6938      	ldr	r0, [r7, #16]
    7410:	3744      	adds	r7, #68	; 0x44
    7412:	46bd      	mov	sp, r7
    7414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7418:	0001536c 	.word	0x0001536c
    741c:	00013a84 	.word	0x00013a84
    7420:	00015398 	.word	0x00015398

00007424 <event_handler>:
{
    7424:	b508      	push	{r3, lr}
	switch (p_event->type) {
    7426:	7803      	ldrb	r3, [r0, #0]
    7428:	2b01      	cmp	r3, #1
    742a:	d00c      	beq.n	7446 <event_handler+0x22>
    742c:	2b02      	cmp	r3, #2
    742e:	d00d      	beq.n	744c <event_handler+0x28>
    7430:	b113      	cbz	r3, 7438 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    7432:	4b08      	ldr	r3, [pc, #32]	; (7454 <event_handler+0x30>)
    7434:	620b      	str	r3, [r1, #32]
		break;
    7436:	e001      	b.n	743c <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    7438:	4b07      	ldr	r3, [pc, #28]	; (7458 <event_handler+0x34>)
    743a:	620b      	str	r3, [r1, #32]
	k_sem_give(&dev_data->completion_sync);
    743c:	f101 0010 	add.w	r0, r1, #16
    7440:	f005 fd56 	bl	cef0 <z_impl_k_sem_give>
}
    7444:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    7446:	4b05      	ldr	r3, [pc, #20]	; (745c <event_handler+0x38>)
    7448:	620b      	str	r3, [r1, #32]
		break;
    744a:	e7f7      	b.n	743c <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    744c:	4b04      	ldr	r3, [pc, #16]	; (7460 <event_handler+0x3c>)
    744e:	620b      	str	r3, [r1, #32]
		break;
    7450:	e7f4      	b.n	743c <event_handler+0x18>
    7452:	bf00      	nop
    7454:	0bad0001 	.word	0x0bad0001
    7458:	0bad0000 	.word	0x0bad0000
    745c:	0bae0001 	.word	0x0bae0001
    7460:	0bae0002 	.word	0x0bae0002

00007464 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    7464:	b5f0      	push	{r4, r5, r6, r7, lr}
    7466:	b083      	sub	sp, #12
    7468:	af00      	add	r7, sp, #0
    746a:	4604      	mov	r4, r0
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    746c:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    746e:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    7470:	69eb      	ldr	r3, [r5, #28]
    7472:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
    7474:	2100      	movs	r1, #0
    7476:	6a28      	ldr	r0, [r5, #32]
    7478:	f00a f987 	bl	1178a <pinctrl_apply_state>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    747c:	2800      	cmp	r0, #0
    747e:	db0d      	blt.n	749c <i2c_nrfx_twim_init+0x38>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    7480:	4633      	mov	r3, r6
    7482:	4a32      	ldr	r2, [pc, #200]	; (754c <i2c_nrfx_twim_init+0xe8>)
    7484:	f105 0108 	add.w	r1, r5, #8
    7488:	4628      	mov	r0, r5
    748a:	f003 fe15 	bl	b0b8 <nrfx_twim_init>
    748e:	4b30      	ldr	r3, [pc, #192]	; (7550 <i2c_nrfx_twim_init+0xec>)
    7490:	4298      	cmp	r0, r3
    7492:	d106      	bne.n	74a2 <i2c_nrfx_twim_init+0x3e>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    7494:	4628      	mov	r0, r5
    7496:	f003 fe73 	bl	b180 <nrfx_twim_enable>
#endif

	return 0;
    749a:	2000      	movs	r0, #0
}
    749c:	370c      	adds	r7, #12
    749e:	46bd      	mov	sp, r7
    74a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
    74a2:	6826      	ldr	r6, [r4, #0]
    74a4:	466c      	mov	r4, sp
    74a6:	2302      	movs	r3, #2
    74a8:	713b      	strb	r3, [r7, #4]
    74aa:	b088      	sub	sp, #32
    74ac:	466b      	mov	r3, sp
    74ae:	f113 0210 	adds.w	r2, r3, #16
    74b2:	d038      	beq.n	7526 <i2c_nrfx_twim_init+0xc2>
    74b4:	250d      	movs	r5, #13
    74b6:	b3ca      	cbz	r2, 752c <i2c_nrfx_twim_init+0xc8>
    74b8:	4629      	mov	r1, r5
    74ba:	2d04      	cmp	r5, #4
    74bc:	dd01      	ble.n	74c2 <i2c_nrfx_twim_init+0x5e>
    74be:	4825      	ldr	r0, [pc, #148]	; (7554 <i2c_nrfx_twim_init+0xf0>)
    74c0:	6158      	str	r0, [r3, #20]
    74c2:	2002      	movs	r0, #2
    74c4:	7038      	strb	r0, [r7, #0]
    74c6:	2908      	cmp	r1, #8
    74c8:	dd00      	ble.n	74cc <i2c_nrfx_twim_init+0x68>
    74ca:	619e      	str	r6, [r3, #24]
    74cc:	f103 011c 	add.w	r1, r3, #28
    74d0:	2000      	movs	r0, #0
    74d2:	b370      	cbz	r0, 7532 <i2c_nrfx_twim_init+0xce>
    74d4:	2d0c      	cmp	r5, #12
    74d6:	dd35      	ble.n	7544 <i2c_nrfx_twim_init+0xe0>
    74d8:	250d      	movs	r5, #13
    74da:	b142      	cbz	r2, 74ee <i2c_nrfx_twim_init+0x8a>
    74dc:	2103      	movs	r1, #3
    74de:	7139      	strb	r1, [r7, #4]
    74e0:	2100      	movs	r1, #0
    74e2:	7179      	strb	r1, [r7, #5]
    74e4:	71b9      	strb	r1, [r7, #6]
    74e6:	2101      	movs	r1, #1
    74e8:	71f9      	strb	r1, [r7, #7]
    74ea:	6878      	ldr	r0, [r7, #4]
    74ec:	6118      	str	r0, [r3, #16]
    74ee:	2100      	movs	r1, #0
    74f0:	f36f 0100 	bfc	r1, #0, #1
    74f4:	f36f 0141 	bfc	r1, #1, #1
    74f8:	f36f 0182 	bfc	r1, #2, #1
    74fc:	f36f 01c5 	bfc	r1, #3, #3
    7500:	2301      	movs	r3, #1
    7502:	f363 1188 	bfi	r1, r3, #6, #3
    7506:	f3c5 0309 	ubfx	r3, r5, #0, #10
    750a:	f363 2152 	bfi	r1, r3, #9, #10
    750e:	f36f 41de 	bfc	r1, #19, #12
    7512:	f36f 71df 	bfc	r1, #31, #1
    7516:	2300      	movs	r3, #0
    7518:	480f      	ldr	r0, [pc, #60]	; (7558 <i2c_nrfx_twim_init+0xf4>)
    751a:	f7fc f8a5 	bl	3668 <z_impl_z_log_msg_static_create>
    751e:	46a5      	mov	sp, r4
		return -EIO;
    7520:	f06f 0004 	mvn.w	r0, #4
    7524:	e7ba      	b.n	749c <i2c_nrfx_twim_init+0x38>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    7526:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    752a:	e7c4      	b.n	74b6 <i2c_nrfx_twim_init+0x52>
    752c:	2102      	movs	r1, #2
    752e:	7039      	strb	r1, [r7, #0]
    7530:	e7d0      	b.n	74d4 <i2c_nrfx_twim_init+0x70>
    7532:	f100 0608 	add.w	r6, r0, #8
    7536:	443e      	add	r6, r7
    7538:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    753c:	f801 6b01 	strb.w	r6, [r1], #1
    7540:	3001      	adds	r0, #1
    7542:	e7c6      	b.n	74d2 <i2c_nrfx_twim_init+0x6e>
    7544:	f06f 051b 	mvn.w	r5, #27
    7548:	e7c7      	b.n	74da <i2c_nrfx_twim_init+0x76>
    754a:	bf00      	nop
    754c:	00007425 	.word	0x00007425
    7550:	0bad0000 	.word	0x0bad0000
    7554:	000153c0 	.word	0x000153c0
    7558:	00013a84 	.word	0x00013a84

0000755c <get_nrf_spim_frequency>:

static inline nrf_spim_frequency_t get_nrf_spim_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
    755c:	4b19      	ldr	r3, [pc, #100]	; (75c4 <get_nrf_spim_frequency+0x68>)
    755e:	4298      	cmp	r0, r3
    7560:	d917      	bls.n	7592 <get_nrf_spim_frequency+0x36>
		return NRF_SPIM_FREQ_125K;
	} else if (frequency < 500000) {
    7562:	4b19      	ldr	r3, [pc, #100]	; (75c8 <get_nrf_spim_frequency+0x6c>)
    7564:	4298      	cmp	r0, r3
    7566:	d917      	bls.n	7598 <get_nrf_spim_frequency+0x3c>
		return NRF_SPIM_FREQ_250K;
	} else if (frequency < 1000000) {
    7568:	4b18      	ldr	r3, [pc, #96]	; (75cc <get_nrf_spim_frequency+0x70>)
    756a:	4298      	cmp	r0, r3
    756c:	d917      	bls.n	759e <get_nrf_spim_frequency+0x42>
		return NRF_SPIM_FREQ_500K;
	} else if (frequency < 2000000) {
    756e:	4b18      	ldr	r3, [pc, #96]	; (75d0 <get_nrf_spim_frequency+0x74>)
    7570:	4298      	cmp	r0, r3
    7572:	d917      	bls.n	75a4 <get_nrf_spim_frequency+0x48>
		return NRF_SPIM_FREQ_1M;
	} else if (frequency < 4000000) {
    7574:	4b17      	ldr	r3, [pc, #92]	; (75d4 <get_nrf_spim_frequency+0x78>)
    7576:	4298      	cmp	r0, r3
    7578:	d917      	bls.n	75aa <get_nrf_spim_frequency+0x4e>
		return NRF_SPIM_FREQ_2M;
	} else if (frequency < 8000000) {
    757a:	4b17      	ldr	r3, [pc, #92]	; (75d8 <get_nrf_spim_frequency+0x7c>)
    757c:	4298      	cmp	r0, r3
    757e:	d317      	bcc.n	75b0 <get_nrf_spim_frequency+0x54>
		return NRF_SPIM_FREQ_4M;
/* Only the devices with HS-SPI can use SPI clock higher than 8 MHz and
 * have SPIM_FREQUENCY_FREQUENCY_M32 defined in their own bitfields.h
 */
#if defined(SPIM_FREQUENCY_FREQUENCY_M32)
	} else if (frequency < 16000000) {
    7580:	4b16      	ldr	r3, [pc, #88]	; (75dc <get_nrf_spim_frequency+0x80>)
    7582:	4298      	cmp	r0, r3
    7584:	d317      	bcc.n	75b6 <get_nrf_spim_frequency+0x5a>
		return NRF_SPIM_FREQ_8M;
	} else if (frequency < 32000000) {
    7586:	4b16      	ldr	r3, [pc, #88]	; (75e0 <get_nrf_spim_frequency+0x84>)
    7588:	4298      	cmp	r0, r3
    758a:	d217      	bcs.n	75bc <get_nrf_spim_frequency+0x60>
		return NRF_SPIM_FREQ_16M;
    758c:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
    7590:	4770      	bx	lr
		return NRF_SPIM_FREQ_125K;
    7592:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    7596:	4770      	bx	lr
		return NRF_SPIM_FREQ_250K;
    7598:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    759c:	4770      	bx	lr
		return NRF_SPIM_FREQ_500K;
    759e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    75a2:	4770      	bx	lr
		return NRF_SPIM_FREQ_1M;
    75a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    75a8:	4770      	bx	lr
		return NRF_SPIM_FREQ_2M;
    75aa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    75ae:	4770      	bx	lr
		return NRF_SPIM_FREQ_4M;
    75b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    75b4:	4770      	bx	lr
		return NRF_SPIM_FREQ_8M;
    75b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    75ba:	4770      	bx	lr
	} else {
		return NRF_SPIM_FREQ_32M;
    75bc:	f04f 50a0 	mov.w	r0, #335544320	; 0x14000000
#else
	} else {
		return NRF_SPIM_FREQ_8M;
#endif
	}
}
    75c0:	4770      	bx	lr
    75c2:	bf00      	nop
    75c4:	0003d08f 	.word	0x0003d08f
    75c8:	0007a11f 	.word	0x0007a11f
    75cc:	000f423f 	.word	0x000f423f
    75d0:	001e847f 	.word	0x001e847f
    75d4:	003d08ff 	.word	0x003d08ff
    75d8:	007a1200 	.word	0x007a1200
    75dc:	00f42400 	.word	0x00f42400
    75e0:	01e84800 	.word	0x01e84800

000075e4 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
    75e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75e6:	4604      	mov	r4, r0
    75e8:	4616      	mov	r6, r2
	__unused const struct gpio_driver_config *const cfg =
    75ea:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    75ec:	681b      	ldr	r3, [r3, #0]
    75ee:	2501      	movs	r5, #1
    75f0:	408d      	lsls	r5, r1
    75f2:	422b      	tst	r3, r5
    75f4:	d006      	beq.n	7604 <gpio_pin_set_raw+0x20>
		 "Unsupported pin");

	if (value != 0)	{
    75f6:	b1b6      	cbz	r6, 7626 <gpio_pin_set_raw+0x42>
	const struct gpio_driver_api *api =
    75f8:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    75fa:	68db      	ldr	r3, [r3, #12]
    75fc:	4629      	mov	r1, r5
    75fe:	4620      	mov	r0, r4
    7600:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
    7602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7604:	4f0b      	ldr	r7, [pc, #44]	; (7634 <gpio_pin_set_raw+0x50>)
    7606:	f240 43fc 	movw	r3, #1276	; 0x4fc
    760a:	463a      	mov	r2, r7
    760c:	490a      	ldr	r1, [pc, #40]	; (7638 <gpio_pin_set_raw+0x54>)
    760e:	480b      	ldr	r0, [pc, #44]	; (763c <gpio_pin_set_raw+0x58>)
    7610:	f009 f892 	bl	10738 <assert_print>
    7614:	480a      	ldr	r0, [pc, #40]	; (7640 <gpio_pin_set_raw+0x5c>)
    7616:	f009 f88f 	bl	10738 <assert_print>
    761a:	f240 41fc 	movw	r1, #1276	; 0x4fc
    761e:	4638      	mov	r0, r7
    7620:	f009 f883 	bl	1072a <assert_post_action>
    7624:	e7e7      	b.n	75f6 <gpio_pin_set_raw+0x12>
	const struct gpio_driver_api *api =
    7626:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    7628:	691b      	ldr	r3, [r3, #16]
    762a:	4629      	mov	r1, r5
    762c:	4620      	mov	r0, r4
    762e:	4798      	blx	r3
	return ret;
    7630:	e7e7      	b.n	7602 <gpio_pin_set_raw+0x1e>
    7632:	bf00      	nop
    7634:	00015454 	.word	0x00015454
    7638:	00015488 	.word	0x00015488
    763c:	00013d44 	.word	0x00013d44
    7640:	000154c8 	.word	0x000154c8

00007644 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
    7644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7648:	4604      	mov	r4, r0
    764a:	460e      	mov	r6, r1
    764c:	4615      	mov	r5, r2
	__unused const struct gpio_driver_config *const cfg =
    764e:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    7650:	f8d0 8010 	ldr.w	r8, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7654:	681b      	ldr	r3, [r3, #0]
    7656:	2701      	movs	r7, #1
    7658:	408f      	lsls	r7, r1
    765a:	423b      	tst	r3, r7
    765c:	d00d      	beq.n	767a <gpio_pin_set+0x36>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    765e:	f8d8 3000 	ldr.w	r3, [r8]
    7662:	421f      	tst	r7, r3
    7664:	d002      	beq.n	766c <gpio_pin_set+0x28>
		value = (value != 0) ? 0 : 1;
    7666:	fab5 f585 	clz	r5, r5
    766a:	096d      	lsrs	r5, r5, #5
	}

	return gpio_pin_set_raw(port, pin, value);
    766c:	462a      	mov	r2, r5
    766e:	4631      	mov	r1, r6
    7670:	4620      	mov	r0, r4
    7672:	f7ff ffb7 	bl	75e4 <gpio_pin_set_raw>
}
    7676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    767a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 76a0 <gpio_pin_set+0x5c>
    767e:	f240 5325 	movw	r3, #1317	; 0x525
    7682:	464a      	mov	r2, r9
    7684:	4907      	ldr	r1, [pc, #28]	; (76a4 <gpio_pin_set+0x60>)
    7686:	4808      	ldr	r0, [pc, #32]	; (76a8 <gpio_pin_set+0x64>)
    7688:	f009 f856 	bl	10738 <assert_print>
    768c:	4807      	ldr	r0, [pc, #28]	; (76ac <gpio_pin_set+0x68>)
    768e:	f009 f853 	bl	10738 <assert_print>
    7692:	f240 5125 	movw	r1, #1317	; 0x525
    7696:	4648      	mov	r0, r9
    7698:	f009 f847 	bl	1072a <assert_post_action>
    769c:	e7df      	b.n	765e <gpio_pin_set+0x1a>
    769e:	bf00      	nop
    76a0:	00015454 	.word	0x00015454
    76a4:	00015488 	.word	0x00015488
    76a8:	00013d44 	.word	0x00013d44
    76ac:	000154c8 	.word	0x000154c8

000076b0 <z_impl_gpio_pin_configure>:
{
    76b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76b4:	4605      	mov	r5, r0
    76b6:	460e      	mov	r6, r1
    76b8:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
    76ba:	f8d0 a008 	ldr.w	sl, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
    76be:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct gpio_driver_data *data =
    76c2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    76c6:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
    76ca:	d136      	bne.n	773a <z_impl_gpio_pin_configure+0x8a>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    76cc:	f004 0330 	and.w	r3, r4, #48	; 0x30
    76d0:	2b30      	cmp	r3, #48	; 0x30
    76d2:	d043      	beq.n	775c <z_impl_gpio_pin_configure+0xac>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    76d4:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
    76d8:	2b02      	cmp	r3, #2
    76da:	d050      	beq.n	777e <z_impl_gpio_pin_configure+0xce>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    76dc:	f004 0306 	and.w	r3, r4, #6
    76e0:	2b04      	cmp	r3, #4
    76e2:	d05d      	beq.n	77a0 <z_impl_gpio_pin_configure+0xf0>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    76e4:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
    76e8:	d002      	beq.n	76f0 <z_impl_gpio_pin_configure+0x40>
    76ea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    76ee:	d065      	beq.n	77bc <z_impl_gpio_pin_configure+0x10c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    76f0:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
    76f4:	d074      	beq.n	77e0 <z_impl_gpio_pin_configure+0x130>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    76f6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
    76fa:	d005      	beq.n	7708 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    76fc:	b127      	cbz	r7, 7708 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    76fe:	f014 0f01 	tst.w	r4, #1
    7702:	d001      	beq.n	7708 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7704:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7708:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    770c:	f8db 3000 	ldr.w	r3, [fp]
    7710:	2701      	movs	r7, #1
    7712:	40b7      	lsls	r7, r6
    7714:	423b      	tst	r3, r7
    7716:	d075      	beq.n	7804 <z_impl_gpio_pin_configure+0x154>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7718:	f014 0f01 	tst.w	r4, #1
    771c:	f000 8084 	beq.w	7828 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7720:	f8d8 3000 	ldr.w	r3, [r8]
    7724:	433b      	orrs	r3, r7
    7726:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
    772a:	f8da 3000 	ldr.w	r3, [sl]
    772e:	464a      	mov	r2, r9
    7730:	4631      	mov	r1, r6
    7732:	4628      	mov	r0, r5
    7734:	4798      	blx	r3
}
    7736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    773a:	4f3f      	ldr	r7, [pc, #252]	; (7838 <z_impl_gpio_pin_configure+0x188>)
    773c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    7740:	463a      	mov	r2, r7
    7742:	493e      	ldr	r1, [pc, #248]	; (783c <z_impl_gpio_pin_configure+0x18c>)
    7744:	483e      	ldr	r0, [pc, #248]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    7746:	f008 fff7 	bl	10738 <assert_print>
    774a:	483e      	ldr	r0, [pc, #248]	; (7844 <z_impl_gpio_pin_configure+0x194>)
    774c:	f008 fff4 	bl	10738 <assert_print>
    7750:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    7754:	4638      	mov	r0, r7
    7756:	f008 ffe8 	bl	1072a <assert_post_action>
    775a:	e7b7      	b.n	76cc <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    775c:	4f36      	ldr	r7, [pc, #216]	; (7838 <z_impl_gpio_pin_configure+0x188>)
    775e:	f240 23bf 	movw	r3, #703	; 0x2bf
    7762:	463a      	mov	r2, r7
    7764:	4938      	ldr	r1, [pc, #224]	; (7848 <z_impl_gpio_pin_configure+0x198>)
    7766:	4836      	ldr	r0, [pc, #216]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    7768:	f008 ffe6 	bl	10738 <assert_print>
    776c:	4837      	ldr	r0, [pc, #220]	; (784c <z_impl_gpio_pin_configure+0x19c>)
    776e:	f008 ffe3 	bl	10738 <assert_print>
    7772:	f240 21bf 	movw	r1, #703	; 0x2bf
    7776:	4638      	mov	r0, r7
    7778:	f008 ffd7 	bl	1072a <assert_post_action>
    777c:	e7aa      	b.n	76d4 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    777e:	4f2e      	ldr	r7, [pc, #184]	; (7838 <z_impl_gpio_pin_configure+0x188>)
    7780:	f240 23c3 	movw	r3, #707	; 0x2c3
    7784:	463a      	mov	r2, r7
    7786:	4932      	ldr	r1, [pc, #200]	; (7850 <z_impl_gpio_pin_configure+0x1a0>)
    7788:	482d      	ldr	r0, [pc, #180]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    778a:	f008 ffd5 	bl	10738 <assert_print>
    778e:	4831      	ldr	r0, [pc, #196]	; (7854 <z_impl_gpio_pin_configure+0x1a4>)
    7790:	f008 ffd2 	bl	10738 <assert_print>
    7794:	f240 21c3 	movw	r1, #707	; 0x2c3
    7798:	4638      	mov	r0, r7
    779a:	f008 ffc6 	bl	1072a <assert_post_action>
    779e:	e79d      	b.n	76dc <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    77a0:	4f25      	ldr	r7, [pc, #148]	; (7838 <z_impl_gpio_pin_configure+0x188>)
    77a2:	f240 23c7 	movw	r3, #711	; 0x2c7
    77a6:	463a      	mov	r2, r7
    77a8:	492b      	ldr	r1, [pc, #172]	; (7858 <z_impl_gpio_pin_configure+0x1a8>)
    77aa:	4825      	ldr	r0, [pc, #148]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    77ac:	f008 ffc4 	bl	10738 <assert_print>
    77b0:	f240 21c7 	movw	r1, #711	; 0x2c7
    77b4:	4638      	mov	r0, r7
    77b6:	f008 ffb8 	bl	1072a <assert_post_action>
    77ba:	e793      	b.n	76e4 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    77bc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 7838 <z_impl_gpio_pin_configure+0x188>
    77c0:	f240 23ca 	movw	r3, #714	; 0x2ca
    77c4:	464a      	mov	r2, r9
    77c6:	4925      	ldr	r1, [pc, #148]	; (785c <z_impl_gpio_pin_configure+0x1ac>)
    77c8:	481d      	ldr	r0, [pc, #116]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    77ca:	f008 ffb5 	bl	10738 <assert_print>
    77ce:	4824      	ldr	r0, [pc, #144]	; (7860 <z_impl_gpio_pin_configure+0x1b0>)
    77d0:	f008 ffb2 	bl	10738 <assert_print>
    77d4:	f240 21ca 	movw	r1, #714	; 0x2ca
    77d8:	4648      	mov	r0, r9
    77da:	f008 ffa6 	bl	1072a <assert_post_action>
    77de:	e787      	b.n	76f0 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    77e0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 7838 <z_impl_gpio_pin_configure+0x188>
    77e4:	f240 23ce 	movw	r3, #718	; 0x2ce
    77e8:	464a      	mov	r2, r9
    77ea:	491e      	ldr	r1, [pc, #120]	; (7864 <z_impl_gpio_pin_configure+0x1b4>)
    77ec:	4814      	ldr	r0, [pc, #80]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    77ee:	f008 ffa3 	bl	10738 <assert_print>
    77f2:	481d      	ldr	r0, [pc, #116]	; (7868 <z_impl_gpio_pin_configure+0x1b8>)
    77f4:	f008 ffa0 	bl	10738 <assert_print>
    77f8:	f240 21ce 	movw	r1, #718	; 0x2ce
    77fc:	4648      	mov	r0, r9
    77fe:	f008 ff94 	bl	1072a <assert_post_action>
    7802:	e778      	b.n	76f6 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7804:	f8df b030 	ldr.w	fp, [pc, #48]	; 7838 <z_impl_gpio_pin_configure+0x188>
    7808:	f240 23da 	movw	r3, #730	; 0x2da
    780c:	465a      	mov	r2, fp
    780e:	4917      	ldr	r1, [pc, #92]	; (786c <z_impl_gpio_pin_configure+0x1bc>)
    7810:	480b      	ldr	r0, [pc, #44]	; (7840 <z_impl_gpio_pin_configure+0x190>)
    7812:	f008 ff91 	bl	10738 <assert_print>
    7816:	4816      	ldr	r0, [pc, #88]	; (7870 <z_impl_gpio_pin_configure+0x1c0>)
    7818:	f008 ff8e 	bl	10738 <assert_print>
    781c:	f240 21da 	movw	r1, #730	; 0x2da
    7820:	4658      	mov	r0, fp
    7822:	f008 ff82 	bl	1072a <assert_post_action>
    7826:	e777      	b.n	7718 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7828:	f8d8 3000 	ldr.w	r3, [r8]
    782c:	ea23 0307 	bic.w	r3, r3, r7
    7830:	f8c8 3000 	str.w	r3, [r8]
    7834:	e779      	b.n	772a <z_impl_gpio_pin_configure+0x7a>
    7836:	bf00      	nop
    7838:	00015454 	.word	0x00015454
    783c:	000154dc 	.word	0x000154dc
    7840:	00013d44 	.word	0x00013d44
    7844:	0001553c 	.word	0x0001553c
    7848:	00015560 	.word	0x00015560
    784c:	0001559c 	.word	0x0001559c
    7850:	000155dc 	.word	0x000155dc
    7854:	00015614 	.word	0x00015614
    7858:	00015668 	.word	0x00015668
    785c:	0001569c 	.word	0x0001569c
    7860:	000156e4 	.word	0x000156e4
    7864:	00015720 	.word	0x00015720
    7868:	00015764 	.word	0x00015764
    786c:	00015488 	.word	0x00015488
    7870:	000154c8 	.word	0x000154c8

00007874 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    7874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7878:	b0a1      	sub	sp, #132	; 0x84
    787a:	af00      	add	r7, sp, #0
    787c:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    787e:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    7880:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
    7882:	f8d6 9008 	ldr.w	r9, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    7886:	f895 805d 	ldrb.w	r8, [r5, #93]	; 0x5d
    788a:	f1b8 0f00 	cmp.w	r8, #0
    788e:	d003      	beq.n	7898 <configure+0x24>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    7890:	682b      	ldr	r3, [r5, #0]
    7892:	428b      	cmp	r3, r1
    7894:	f000 8199 	beq.w	7bca <configure+0x356>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    7898:	88a3      	ldrh	r3, [r4, #4]
    789a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    789e:	d159      	bne.n	7954 <configure+0xe0>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    78a0:	f013 0f01 	tst.w	r3, #1
    78a4:	d17b      	bne.n	799e <configure+0x12a>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    78a6:	f013 0f08 	tst.w	r3, #8
    78aa:	f040 80cc 	bne.w	7a46 <configure+0x1d2>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    78ae:	f3c3 1345 	ubfx	r3, r3, #5, #6
    78b2:	2b08      	cmp	r3, #8
    78b4:	f040 80ec 	bne.w	7a90 <configure+0x21c>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    78b8:	6822      	ldr	r2, [r4, #0]
    78ba:	4bc5      	ldr	r3, [pc, #788]	; (7bd0 <configure+0x35c>)
    78bc:	429a      	cmp	r2, r3
    78be:	f240 810c 	bls.w	7ada <configure+0x266>
#if defined(CONFIG_SOC_NRF5340_CPUAPP)
	/* On nRF5340, the 32 Mbps speed is supported by the application core
	 * when it is running at 128 MHz (see the Timing specifications section
	 * in the nRF5340 PS).
	 */
	if (max_freq > 16000000 &&
    78c2:	4bc4      	ldr	r3, [pc, #784]	; (7bd4 <configure+0x360>)
    78c4:	4599      	cmp	r9, r3
    78c6:	d908      	bls.n	78da <configure+0x66>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
    78c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    78cc:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
    78d0:	f013 0f03 	tst.w	r3, #3
    78d4:	d001      	beq.n	78da <configure+0x66>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
    78d6:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 7bd4 <configure+0x360>
	}
#endif

	config = dev_config->def_config;
    78da:	f107 0c08 	add.w	ip, r7, #8
    78de:	f106 0e0c 	add.w	lr, r6, #12
    78e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    78e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    78ea:	e89e 0003 	ldmia.w	lr, {r0, r1}
    78ee:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    78f2:	6820      	ldr	r0, [r4, #0]
    78f4:	4548      	cmp	r0, r9
    78f6:	bf28      	it	cs
    78f8:	4648      	movcs	r0, r9
    78fa:	f7ff fe2f 	bl	755c <get_nrf_spim_frequency>
    78fe:	6138      	str	r0, [r7, #16]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    7900:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7902:	f013 0f02 	tst.w	r3, #2
    7906:	f000 810d 	beq.w	7b24 <configure+0x2b0>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    790a:	f013 0f04 	tst.w	r3, #4
    790e:	f000 810e 	beq.w	7b2e <configure+0x2ba>
			return NRF_SPIM_MODE_3;
    7912:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    7914:	753b      	strb	r3, [r7, #20]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    7916:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    7918:	f013 0f10 	tst.w	r3, #16
    791c:	f000 810b 	beq.w	7b36 <configure+0x2c2>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
    7920:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    7922:	757b      	strb	r3, [r7, #21]

	if (dev_data->initialized) {
    7924:	f1b8 0f00 	cmp.w	r8, #0
    7928:	f040 8107 	bne.w	7b3a <configure+0x2c6>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
    792c:	462b      	mov	r3, r5
    792e:	4aaa      	ldr	r2, [pc, #680]	; (7bd8 <configure+0x364>)
    7930:	f107 0108 	add.w	r1, r7, #8
    7934:	4630      	mov	r0, r6
    7936:	f002 ff1f 	bl	a778 <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    793a:	4ba8      	ldr	r3, [pc, #672]	; (7bdc <configure+0x368>)
    793c:	4298      	cmp	r0, r3
    793e:	f040 8103 	bne.w	7b48 <configure+0x2d4>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    7942:	2301      	movs	r3, #1
    7944:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	ctx->config = spi_cfg;
    7948:	602c      	str	r4, [r5, #0]

	return 0;
    794a:	2000      	movs	r0, #0
}
    794c:	3784      	adds	r7, #132	; 0x84
    794e:	46bd      	mov	sp, r7
    7950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Half-duplex not supported");
    7954:	4ba2      	ldr	r3, [pc, #648]	; (7be0 <configure+0x36c>)
    7956:	67fb      	str	r3, [r7, #124]	; 0x7c
    7958:	2302      	movs	r3, #2
    795a:	713b      	strb	r3, [r7, #4]
    795c:	2300      	movs	r3, #0
    795e:	717b      	strb	r3, [r7, #5]
    7960:	71bb      	strb	r3, [r7, #6]
    7962:	71fb      	strb	r3, [r7, #7]
    7964:	687a      	ldr	r2, [r7, #4]
    7966:	67ba      	str	r2, [r7, #120]	; 0x78
    7968:	4619      	mov	r1, r3
    796a:	f363 0100 	bfi	r1, r3, #0, #1
    796e:	f363 0141 	bfi	r1, r3, #1, #1
    7972:	f363 0182 	bfi	r1, r3, #2, #1
    7976:	f363 01c5 	bfi	r1, r3, #3, #3
    797a:	2201      	movs	r2, #1
    797c:	f362 1188 	bfi	r1, r2, #6, #3
    7980:	2208      	movs	r2, #8
    7982:	f362 2152 	bfi	r1, r2, #9, #10
    7986:	f363 41de 	bfi	r1, r3, #19, #12
    798a:	f363 71df 	bfi	r1, r3, #31, #1
    798e:	f107 0278 	add.w	r2, r7, #120	; 0x78
    7992:	4894      	ldr	r0, [pc, #592]	; (7be4 <configure+0x370>)
    7994:	f7fb fe68 	bl	3668 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
    7998:	f06f 0085 	mvn.w	r0, #133	; 0x85
    799c:	e7d6      	b.n	794c <configure+0xd8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    799e:	6801      	ldr	r1, [r0, #0]
    79a0:	466c      	mov	r4, sp
    79a2:	2302      	movs	r3, #2
    79a4:	713b      	strb	r3, [r7, #4]
    79a6:	b088      	sub	sp, #32
    79a8:	466b      	mov	r3, sp
    79aa:	f113 0210 	adds.w	r2, r3, #16
    79ae:	d038      	beq.n	7a22 <configure+0x1ae>
    79b0:	250d      	movs	r5, #13
    79b2:	b3ca      	cbz	r2, 7a28 <configure+0x1b4>
    79b4:	4628      	mov	r0, r5
    79b6:	2d04      	cmp	r5, #4
    79b8:	dd01      	ble.n	79be <configure+0x14a>
    79ba:	4e8b      	ldr	r6, [pc, #556]	; (7be8 <configure+0x374>)
    79bc:	615e      	str	r6, [r3, #20]
    79be:	2602      	movs	r6, #2
    79c0:	703e      	strb	r6, [r7, #0]
    79c2:	2808      	cmp	r0, #8
    79c4:	dd00      	ble.n	79c8 <configure+0x154>
    79c6:	6199      	str	r1, [r3, #24]
    79c8:	f103 011c 	add.w	r1, r3, #28
    79cc:	2000      	movs	r0, #0
    79ce:	b370      	cbz	r0, 7a2e <configure+0x1ba>
    79d0:	2d0c      	cmp	r5, #12
    79d2:	dd35      	ble.n	7a40 <configure+0x1cc>
    79d4:	250d      	movs	r5, #13
    79d6:	b142      	cbz	r2, 79ea <configure+0x176>
    79d8:	2103      	movs	r1, #3
    79da:	7139      	strb	r1, [r7, #4]
    79dc:	2100      	movs	r1, #0
    79de:	7179      	strb	r1, [r7, #5]
    79e0:	71b9      	strb	r1, [r7, #6]
    79e2:	2101      	movs	r1, #1
    79e4:	71f9      	strb	r1, [r7, #7]
    79e6:	6878      	ldr	r0, [r7, #4]
    79e8:	6118      	str	r0, [r3, #16]
    79ea:	2100      	movs	r1, #0
    79ec:	f36f 0100 	bfc	r1, #0, #1
    79f0:	f36f 0141 	bfc	r1, #1, #1
    79f4:	f36f 0182 	bfc	r1, #2, #1
    79f8:	f36f 01c5 	bfc	r1, #3, #3
    79fc:	2301      	movs	r3, #1
    79fe:	f363 1188 	bfi	r1, r3, #6, #3
    7a02:	f3c5 0309 	ubfx	r3, r5, #0, #10
    7a06:	f363 2152 	bfi	r1, r3, #9, #10
    7a0a:	f36f 41de 	bfc	r1, #19, #12
    7a0e:	f36f 71df 	bfc	r1, #31, #1
    7a12:	2300      	movs	r3, #0
    7a14:	4873      	ldr	r0, [pc, #460]	; (7be4 <configure+0x370>)
    7a16:	f7fb fe27 	bl	3668 <z_impl_z_log_msg_static_create>
    7a1a:	46a5      	mov	sp, r4
		return -EINVAL;
    7a1c:	f06f 0015 	mvn.w	r0, #21
    7a20:	e794      	b.n	794c <configure+0xd8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    7a22:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    7a26:	e7c4      	b.n	79b2 <configure+0x13e>
    7a28:	2102      	movs	r1, #2
    7a2a:	7039      	strb	r1, [r7, #0]
    7a2c:	e7d0      	b.n	79d0 <configure+0x15c>
    7a2e:	f100 0680 	add.w	r6, r0, #128	; 0x80
    7a32:	443e      	add	r6, r7
    7a34:	f816 6c80 	ldrb.w	r6, [r6, #-128]
    7a38:	f801 6b01 	strb.w	r6, [r1], #1
    7a3c:	3001      	adds	r0, #1
    7a3e:	e7c6      	b.n	79ce <configure+0x15a>
    7a40:	f06f 051b 	mvn.w	r5, #27
    7a44:	e7c7      	b.n	79d6 <configure+0x162>
		LOG_ERR("Loopback mode is not supported");
    7a46:	4b69      	ldr	r3, [pc, #420]	; (7bec <configure+0x378>)
    7a48:	667b      	str	r3, [r7, #100]	; 0x64
    7a4a:	2302      	movs	r3, #2
    7a4c:	713b      	strb	r3, [r7, #4]
    7a4e:	2300      	movs	r3, #0
    7a50:	717b      	strb	r3, [r7, #5]
    7a52:	71bb      	strb	r3, [r7, #6]
    7a54:	71fb      	strb	r3, [r7, #7]
    7a56:	687a      	ldr	r2, [r7, #4]
    7a58:	663a      	str	r2, [r7, #96]	; 0x60
    7a5a:	4619      	mov	r1, r3
    7a5c:	f363 0100 	bfi	r1, r3, #0, #1
    7a60:	f363 0141 	bfi	r1, r3, #1, #1
    7a64:	f363 0182 	bfi	r1, r3, #2, #1
    7a68:	f363 01c5 	bfi	r1, r3, #3, #3
    7a6c:	2201      	movs	r2, #1
    7a6e:	f362 1188 	bfi	r1, r2, #6, #3
    7a72:	2208      	movs	r2, #8
    7a74:	f362 2152 	bfi	r1, r2, #9, #10
    7a78:	f363 41de 	bfi	r1, r3, #19, #12
    7a7c:	f363 71df 	bfi	r1, r3, #31, #1
    7a80:	f107 0260 	add.w	r2, r7, #96	; 0x60
    7a84:	4857      	ldr	r0, [pc, #348]	; (7be4 <configure+0x370>)
    7a86:	f7fb fdef 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    7a8a:	f06f 0015 	mvn.w	r0, #21
    7a8e:	e75d      	b.n	794c <configure+0xd8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    7a90:	4b57      	ldr	r3, [pc, #348]	; (7bf0 <configure+0x37c>)
    7a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    7a94:	2302      	movs	r3, #2
    7a96:	713b      	strb	r3, [r7, #4]
    7a98:	2300      	movs	r3, #0
    7a9a:	717b      	strb	r3, [r7, #5]
    7a9c:	71bb      	strb	r3, [r7, #6]
    7a9e:	71fb      	strb	r3, [r7, #7]
    7aa0:	687a      	ldr	r2, [r7, #4]
    7aa2:	64ba      	str	r2, [r7, #72]	; 0x48
    7aa4:	4619      	mov	r1, r3
    7aa6:	f363 0100 	bfi	r1, r3, #0, #1
    7aaa:	f363 0141 	bfi	r1, r3, #1, #1
    7aae:	f363 0182 	bfi	r1, r3, #2, #1
    7ab2:	f363 01c5 	bfi	r1, r3, #3, #3
    7ab6:	2201      	movs	r2, #1
    7ab8:	f362 1188 	bfi	r1, r2, #6, #3
    7abc:	2208      	movs	r2, #8
    7abe:	f362 2152 	bfi	r1, r2, #9, #10
    7ac2:	f363 41de 	bfi	r1, r3, #19, #12
    7ac6:	f363 71df 	bfi	r1, r3, #31, #1
    7aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
    7ace:	4845      	ldr	r0, [pc, #276]	; (7be4 <configure+0x370>)
    7ad0:	f7fb fdca 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    7ad4:	f06f 0015 	mvn.w	r0, #21
    7ad8:	e738      	b.n	794c <configure+0xd8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7ada:	4b46      	ldr	r3, [pc, #280]	; (7bf4 <configure+0x380>)
    7adc:	637b      	str	r3, [r7, #52]	; 0x34
    7ade:	2302      	movs	r3, #2
    7ae0:	713b      	strb	r3, [r7, #4]
    7ae2:	2300      	movs	r3, #0
    7ae4:	717b      	strb	r3, [r7, #5]
    7ae6:	71bb      	strb	r3, [r7, #6]
    7ae8:	71fb      	strb	r3, [r7, #7]
    7aea:	687a      	ldr	r2, [r7, #4]
    7aec:	633a      	str	r2, [r7, #48]	; 0x30
    7aee:	4619      	mov	r1, r3
    7af0:	f363 0100 	bfi	r1, r3, #0, #1
    7af4:	f363 0141 	bfi	r1, r3, #1, #1
    7af8:	f363 0182 	bfi	r1, r3, #2, #1
    7afc:	f363 01c5 	bfi	r1, r3, #3, #3
    7b00:	2201      	movs	r2, #1
    7b02:	f362 1188 	bfi	r1, r2, #6, #3
    7b06:	2208      	movs	r2, #8
    7b08:	f362 2152 	bfi	r1, r2, #9, #10
    7b0c:	f363 41de 	bfi	r1, r3, #19, #12
    7b10:	f363 71df 	bfi	r1, r3, #31, #1
    7b14:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7b18:	4832      	ldr	r0, [pc, #200]	; (7be4 <configure+0x370>)
    7b1a:	f7fb fda5 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    7b1e:	f06f 0015 	mvn.w	r0, #21
    7b22:	e713      	b.n	794c <configure+0xd8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    7b24:	f013 0f04 	tst.w	r3, #4
    7b28:	d003      	beq.n	7b32 <configure+0x2be>
			return NRF_SPIM_MODE_1;
    7b2a:	2301      	movs	r3, #1
    7b2c:	e6f2      	b.n	7914 <configure+0xa0>
			return NRF_SPIM_MODE_2;
    7b2e:	2302      	movs	r3, #2
    7b30:	e6f0      	b.n	7914 <configure+0xa0>
			return NRF_SPIM_MODE_0;
    7b32:	2300      	movs	r3, #0
    7b34:	e6ee      	b.n	7914 <configure+0xa0>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
    7b36:	2300      	movs	r3, #0
    7b38:	e6f3      	b.n	7922 <configure+0xae>
		nrfx_spim_uninit(&dev_config->spim);
    7b3a:	4630      	mov	r0, r6
    7b3c:	f002 feb0 	bl	a8a0 <nrfx_spim_uninit>
		dev_data->initialized = false;
    7b40:	2300      	movs	r3, #0
    7b42:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    7b46:	e6f1      	b.n	792c <configure+0xb8>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7b48:	466d      	mov	r5, sp
    7b4a:	b088      	sub	sp, #32
    7b4c:	466b      	mov	r3, sp
    7b4e:	f113 0210 	adds.w	r2, r3, #16
    7b52:	d00d      	beq.n	7b70 <configure+0x2fc>
    7b54:	210c      	movs	r1, #12
    7b56:	b13a      	cbz	r2, 7b68 <configure+0x2f4>
    7b58:	460c      	mov	r4, r1
    7b5a:	2904      	cmp	r1, #4
    7b5c:	dd01      	ble.n	7b62 <configure+0x2ee>
    7b5e:	4e26      	ldr	r6, [pc, #152]	; (7bf8 <configure+0x384>)
    7b60:	615e      	str	r6, [r3, #20]
    7b62:	2c08      	cmp	r4, #8
    7b64:	dd07      	ble.n	7b76 <configure+0x302>
    7b66:	6198      	str	r0, [r3, #24]
    7b68:	290b      	cmp	r1, #11
    7b6a:	dd2b      	ble.n	7bc4 <configure+0x350>
    7b6c:	240c      	movs	r4, #12
    7b6e:	e004      	b.n	7b7a <configure+0x306>
    7b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7b74:	e7ef      	b.n	7b56 <configure+0x2e2>
    7b76:	f06f 041b 	mvn.w	r4, #27
    7b7a:	b13a      	cbz	r2, 7b8c <configure+0x318>
    7b7c:	2103      	movs	r1, #3
    7b7e:	7139      	strb	r1, [r7, #4]
    7b80:	2100      	movs	r1, #0
    7b82:	7179      	strb	r1, [r7, #5]
    7b84:	71b9      	strb	r1, [r7, #6]
    7b86:	71f9      	strb	r1, [r7, #7]
    7b88:	6878      	ldr	r0, [r7, #4]
    7b8a:	6118      	str	r0, [r3, #16]
    7b8c:	2100      	movs	r1, #0
    7b8e:	f36f 0100 	bfc	r1, #0, #1
    7b92:	f36f 0141 	bfc	r1, #1, #1
    7b96:	f36f 0182 	bfc	r1, #2, #1
    7b9a:	f36f 01c5 	bfc	r1, #3, #3
    7b9e:	2301      	movs	r3, #1
    7ba0:	f363 1188 	bfi	r1, r3, #6, #3
    7ba4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    7ba8:	f363 2152 	bfi	r1, r3, #9, #10
    7bac:	f36f 41de 	bfc	r1, #19, #12
    7bb0:	f36f 71df 	bfc	r1, #31, #1
    7bb4:	2300      	movs	r3, #0
    7bb6:	480b      	ldr	r0, [pc, #44]	; (7be4 <configure+0x370>)
    7bb8:	f7fb fd56 	bl	3668 <z_impl_z_log_msg_static_create>
    7bbc:	46ad      	mov	sp, r5
		return -EIO;
    7bbe:	f06f 0004 	mvn.w	r0, #4
    7bc2:	e6c3      	b.n	794c <configure+0xd8>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7bc4:	f06f 041b 	mvn.w	r4, #27
    7bc8:	e7d7      	b.n	7b7a <configure+0x306>
		return 0;
    7bca:	2000      	movs	r0, #0
    7bcc:	e6be      	b.n	794c <configure+0xd8>
    7bce:	bf00      	nop
    7bd0:	0001e847 	.word	0x0001e847
    7bd4:	00f42400 	.word	0x00f42400
    7bd8:	00007d5d 	.word	0x00007d5d
    7bdc:	0bad0000 	.word	0x0bad0000
    7be0:	00015790 	.word	0x00015790
    7be4:	00013acc 	.word	0x00013acc
    7be8:	000157ac 	.word	0x000157ac
    7bec:	000157d0 	.word	0x000157d0
    7bf0:	000157f0 	.word	0x000157f0
    7bf4:	00015820 	.word	0x00015820
    7bf8:	00015854 	.word	0x00015854

00007bfc <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
    7bfc:	b530      	push	{r4, r5, lr}
    7bfe:	b089      	sub	sp, #36	; 0x24
    7c00:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7c02:	6d03      	ldr	r3, [r0, #80]	; 0x50
    7c04:	6c82      	ldr	r2, [r0, #72]	; 0x48
    7c06:	4293      	cmp	r3, r2
    7c08:	bf38      	it	cc
    7c0a:	4613      	movcc	r3, r2
    7c0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    7c10:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
    7c14:	4605      	mov	r5, r0
    7c16:	f855 2b20 	ldr.w	r2, [r5], #32
    7c1a:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7c1c:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7c20:	33c8      	adds	r3, #200	; 0xc8
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7c22:	0c59      	lsrs	r1, r3, #17
    7c24:	03db      	lsls	r3, r3, #15
    7c26:	f240 32e7 	movw	r2, #999	; 0x3e7
    7c2a:	1898      	adds	r0, r3, r2
    7c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c30:	f04f 0300 	mov.w	r3, #0
    7c34:	f141 0100 	adc.w	r1, r1, #0
    7c38:	f7f8 fa8c 	bl	154 <__aeabi_uldivmod>
    7c3c:	4602      	mov	r2, r0
    7c3e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7c40:	4628      	mov	r0, r5
    7c42:	f005 f999 	bl	cf78 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
    7c46:	b910      	cbnz	r0, 7c4e <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
    7c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
    7c4a:	b009      	add	sp, #36	; 0x24
    7c4c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
    7c4e:	4b14      	ldr	r3, [pc, #80]	; (7ca0 <spi_context_wait_for_completion+0xa4>)
    7c50:	9307      	str	r3, [sp, #28]
    7c52:	2302      	movs	r3, #2
    7c54:	f88d 3004 	strb.w	r3, [sp, #4]
    7c58:	2300      	movs	r3, #0
    7c5a:	f88d 3005 	strb.w	r3, [sp, #5]
    7c5e:	f88d 3006 	strb.w	r3, [sp, #6]
    7c62:	f88d 3007 	strb.w	r3, [sp, #7]
    7c66:	9a01      	ldr	r2, [sp, #4]
    7c68:	9206      	str	r2, [sp, #24]
    7c6a:	4619      	mov	r1, r3
    7c6c:	f363 0100 	bfi	r1, r3, #0, #1
    7c70:	f363 0141 	bfi	r1, r3, #1, #1
    7c74:	f363 0182 	bfi	r1, r3, #2, #1
    7c78:	f363 01c5 	bfi	r1, r3, #3, #3
    7c7c:	2201      	movs	r2, #1
    7c7e:	f362 1188 	bfi	r1, r2, #6, #3
    7c82:	2208      	movs	r2, #8
    7c84:	f362 2152 	bfi	r1, r2, #9, #10
    7c88:	f363 41de 	bfi	r1, r3, #19, #12
    7c8c:	f363 71df 	bfi	r1, r3, #31, #1
    7c90:	aa06      	add	r2, sp, #24
    7c92:	4804      	ldr	r0, [pc, #16]	; (7ca4 <spi_context_wait_for_completion+0xa8>)
    7c94:	f7fb fce8 	bl	3668 <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
    7c98:	f06f 0073 	mvn.w	r0, #115	; 0x73
    7c9c:	e7d5      	b.n	7c4a <spi_context_wait_for_completion+0x4e>
    7c9e:	bf00      	nop
    7ca0:	0001587c 	.word	0x0001587c
    7ca4:	00013acc 	.word	0x00013acc

00007ca8 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    7ca8:	b570      	push	{r4, r5, r6, lr}
    7caa:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
    7cac:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    7cae:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7cb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	d043      	beq.n	7d3e <transfer_next_chunk+0x96>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    7cb6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7cb8:	2d00      	cmp	r5, #0
    7cba:	d042      	beq.n	7d42 <transfer_next_chunk+0x9a>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    7cbc:	429d      	cmp	r5, r3
    7cbe:	bf28      	it	cs
    7cc0:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    7cc2:	2d00      	cmp	r5, #0
    7cc4:	d045      	beq.n	7d52 <transfer_next_chunk+0xaa>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
    7cc6:	6c61      	ldr	r1, [r4, #68]	; 0x44
	return !!(ctx->tx_buf && ctx->tx_len);
    7cc8:	b169      	cbz	r1, 7ce6 <transfer_next_chunk+0x3e>
    7cca:	b163      	cbz	r3, 7ce6 <transfer_next_chunk+0x3e>
    7ccc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    7cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7cd4:	d007      	beq.n	7ce6 <transfer_next_chunk+0x3e>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    7cd6:	2d08      	cmp	r5, #8
    7cd8:	d900      	bls.n	7cdc <transfer_next_chunk+0x34>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
    7cda:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
    7cdc:	462a      	mov	r2, r5
    7cde:	6e20      	ldr	r0, [r4, #96]	; 0x60
    7ce0:	f009 fb1c 	bl	1131c <memcpy>
			tx_buf = dev_data->buffer;
    7ce4:	6e21      	ldr	r1, [r4, #96]	; 0x60
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
    7ce6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    7cea:	d301      	bcc.n	7cf0 <transfer_next_chunk+0x48>
			chunk_len = MAX_CHUNK_LEN;
    7cec:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
    7cf0:	65a5      	str	r5, [r4, #88]	; 0x58

		xfer.p_tx_buffer = tx_buf;
    7cf2:	9100      	str	r1, [sp, #0]
    7cf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7cf6:	b333      	cbz	r3, 7d46 <transfer_next_chunk+0x9e>
    7cf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7cfa:	bb33      	cbnz	r3, 7d4a <transfer_next_chunk+0xa2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7cfc:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    7cfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7d00:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    7d02:	b323      	cbz	r3, 7d4e <transfer_next_chunk+0xa6>
    7d04:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7d06:	b903      	cbnz	r3, 7d0a <transfer_next_chunk+0x62>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7d08:	461d      	mov	r5, r3
    7d0a:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    7d0c:	2200      	movs	r2, #0
    7d0e:	4669      	mov	r1, sp
    7d10:	4630      	mov	r0, r6
    7d12:	f002 fe21 	bl	a958 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    7d16:	4b10      	ldr	r3, [pc, #64]	; (7d58 <transfer_next_chunk+0xb0>)
    7d18:	4298      	cmp	r0, r3
    7d1a:	d00e      	beq.n	7d3a <transfer_next_chunk+0x92>
				return;
			}
			error = -EIO;
    7d1c:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
    7d20:	2200      	movs	r2, #0
    7d22:	4611      	mov	r1, r2
    7d24:	4620      	mov	r0, r4
    7d26:	f009 fd8e 	bl	11846 <_spi_context_cs_control>
	ctx->sync_status = status;
    7d2a:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
    7d2c:	f104 0020 	add.w	r0, r4, #32
	z_impl_k_sem_give(sem);
    7d30:	f005 f8de 	bl	cef0 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    7d34:	2300      	movs	r3, #0
    7d36:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    7d3a:	b004      	add	sp, #16
    7d3c:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
    7d3e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7d40:	e7bf      	b.n	7cc2 <transfer_next_chunk+0x1a>
		return ctx->tx_len;
    7d42:	461d      	mov	r5, r3
    7d44:	e7bd      	b.n	7cc2 <transfer_next_chunk+0x1a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7d46:	2300      	movs	r3, #0
    7d48:	e7d8      	b.n	7cfc <transfer_next_chunk+0x54>
    7d4a:	462b      	mov	r3, r5
    7d4c:	e7d6      	b.n	7cfc <transfer_next_chunk+0x54>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7d4e:	2500      	movs	r5, #0
    7d50:	e7db      	b.n	7d0a <transfer_next_chunk+0x62>
	int error = 0;
    7d52:	2500      	movs	r5, #0
    7d54:	e7e4      	b.n	7d20 <transfer_next_chunk+0x78>
    7d56:	bf00      	nop
    7d58:	0bad0000 	.word	0x0bad0000

00007d5c <event_handler>:

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    7d5c:	7803      	ldrb	r3, [r0, #0]
    7d5e:	2b00      	cmp	r3, #0
    7d60:	f040 808f 	bne.w	7e82 <event_handler+0x126>
{
    7d64:	b510      	push	{r4, lr}
    7d66:	b08e      	sub	sp, #56	; 0x38
    7d68:	460c      	mov	r4, r1
#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
		anomaly_58_workaround_clear(dev_data);
#endif
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    7d6a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    7d6c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7d6e:	b14b      	cbz	r3, 7d84 <event_handler+0x28>
	if (len > ctx->tx_len) {
    7d70:	429a      	cmp	r2, r3
    7d72:	d819      	bhi.n	7da8 <event_handler+0x4c>
	ctx->tx_len -= len;
    7d74:	1a9b      	subs	r3, r3, r2
    7d76:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    7d78:	2b00      	cmp	r3, #0
    7d7a:	d03b      	beq.n	7df4 <event_handler+0x98>
	} else if (ctx->tx_buf) {
    7d7c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    7d7e:	b10b      	cbz	r3, 7d84 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    7d80:	4413      	add	r3, r2
    7d82:	644b      	str	r3, [r1, #68]	; 0x44
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    7d84:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    7d86:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7d88:	b14b      	cbz	r3, 7d9e <event_handler+0x42>
	if (len > ctx->rx_len) {
    7d8a:	429a      	cmp	r2, r3
    7d8c:	d842      	bhi.n	7e14 <event_handler+0xb8>
	ctx->rx_len -= len;
    7d8e:	1a9b      	subs	r3, r3, r2
    7d90:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    7d92:	2b00      	cmp	r3, #0
    7d94:	d064      	beq.n	7e60 <event_handler+0x104>
	} else if (ctx->rx_buf) {
    7d96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7d98:	b10b      	cbz	r3, 7d9e <event_handler+0x42>
		ctx->rx_buf += dfs * len;
    7d9a:	4413      	add	r3, r2
    7d9c:	64e3      	str	r3, [r4, #76]	; 0x4c

		transfer_next_chunk(dev_data->dev);
    7d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7da0:	f7ff ff82 	bl	7ca8 <transfer_next_chunk>
	}
}
    7da4:	b00e      	add	sp, #56	; 0x38
    7da6:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
    7da8:	4b36      	ldr	r3, [pc, #216]	; (7e84 <event_handler+0x128>)
    7daa:	930d      	str	r3, [sp, #52]	; 0x34
    7dac:	2302      	movs	r3, #2
    7dae:	f88d 3004 	strb.w	r3, [sp, #4]
    7db2:	2300      	movs	r3, #0
    7db4:	f88d 3005 	strb.w	r3, [sp, #5]
    7db8:	f88d 3006 	strb.w	r3, [sp, #6]
    7dbc:	f88d 3007 	strb.w	r3, [sp, #7]
    7dc0:	9a01      	ldr	r2, [sp, #4]
    7dc2:	920c      	str	r2, [sp, #48]	; 0x30
    7dc4:	4619      	mov	r1, r3
    7dc6:	f363 0100 	bfi	r1, r3, #0, #1
    7dca:	f363 0141 	bfi	r1, r3, #1, #1
    7dce:	f363 0182 	bfi	r1, r3, #2, #1
    7dd2:	f363 01c5 	bfi	r1, r3, #3, #3
    7dd6:	2201      	movs	r2, #1
    7dd8:	f362 1188 	bfi	r1, r2, #6, #3
    7ddc:	2208      	movs	r2, #8
    7dde:	f362 2152 	bfi	r1, r2, #9, #10
    7de2:	f363 41de 	bfi	r1, r3, #19, #12
    7de6:	f363 71df 	bfi	r1, r3, #31, #1
    7dea:	aa0c      	add	r2, sp, #48	; 0x30
    7dec:	4826      	ldr	r0, [pc, #152]	; (7e88 <event_handler+0x12c>)
    7dee:	f7fb fc3b 	bl	3668 <z_impl_z_log_msg_static_create>
		return;
    7df2:	e7c7      	b.n	7d84 <event_handler+0x28>
		++ctx->current_tx;
    7df4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7df6:	3308      	adds	r3, #8
    7df8:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    7dfa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7dfc:	3b01      	subs	r3, #1
    7dfe:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    7e00:	2301      	movs	r3, #1
    7e02:	f101 0248 	add.w	r2, r1, #72	; 0x48
    7e06:	3138      	adds	r1, #56	; 0x38
    7e08:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7e0c:	f009 fcd4 	bl	117b8 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
    7e10:	6460      	str	r0, [r4, #68]	; 0x44
    7e12:	e7b7      	b.n	7d84 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
    7e14:	4b1b      	ldr	r3, [pc, #108]	; (7e84 <event_handler+0x128>)
    7e16:	9307      	str	r3, [sp, #28]
    7e18:	2302      	movs	r3, #2
    7e1a:	f88d 3004 	strb.w	r3, [sp, #4]
    7e1e:	2300      	movs	r3, #0
    7e20:	f88d 3005 	strb.w	r3, [sp, #5]
    7e24:	f88d 3006 	strb.w	r3, [sp, #6]
    7e28:	f88d 3007 	strb.w	r3, [sp, #7]
    7e2c:	9a01      	ldr	r2, [sp, #4]
    7e2e:	9206      	str	r2, [sp, #24]
    7e30:	4619      	mov	r1, r3
    7e32:	f363 0100 	bfi	r1, r3, #0, #1
    7e36:	f363 0141 	bfi	r1, r3, #1, #1
    7e3a:	f363 0182 	bfi	r1, r3, #2, #1
    7e3e:	f363 01c5 	bfi	r1, r3, #3, #3
    7e42:	2201      	movs	r2, #1
    7e44:	f362 1188 	bfi	r1, r2, #6, #3
    7e48:	2208      	movs	r2, #8
    7e4a:	f362 2152 	bfi	r1, r2, #9, #10
    7e4e:	f363 41de 	bfi	r1, r3, #19, #12
    7e52:	f363 71df 	bfi	r1, r3, #31, #1
    7e56:	aa06      	add	r2, sp, #24
    7e58:	480b      	ldr	r0, [pc, #44]	; (7e88 <event_handler+0x12c>)
    7e5a:	f7fb fc05 	bl	3668 <z_impl_z_log_msg_static_create>
		return;
    7e5e:	e79e      	b.n	7d9e <event_handler+0x42>
		++ctx->current_rx;
    7e60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7e62:	3308      	adds	r3, #8
    7e64:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    7e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7e68:	3b01      	subs	r3, #1
    7e6a:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    7e6c:	2301      	movs	r3, #1
    7e6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7e72:	f104 0140 	add.w	r1, r4, #64	; 0x40
    7e76:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    7e7a:	f009 fc9d 	bl	117b8 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
    7e7e:	64e0      	str	r0, [r4, #76]	; 0x4c
    7e80:	e78d      	b.n	7d9e <event_handler+0x42>
    7e82:	4770      	bx	lr
    7e84:	000158a4 	.word	0x000158a4
    7e88:	00013acc 	.word	0x00013acc

00007e8c <spi_context_cs_configure_all>:
{
    7e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e8e:	b083      	sub	sp, #12
    7e90:	af00      	add	r7, sp, #0
    7e92:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7e94:	6884      	ldr	r4, [r0, #8]
    7e96:	e05d      	b.n	7f54 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    7e98:	6823      	ldr	r3, [r4, #0]
    7e9a:	f8d3 c000 	ldr.w	ip, [r3]
    7e9e:	7926      	ldrb	r6, [r4, #4]
    7ea0:	466c      	mov	r4, sp
    7ea2:	2302      	movs	r3, #2
    7ea4:	713b      	strb	r3, [r7, #4]
    7ea6:	b08a      	sub	sp, #40	; 0x28
    7ea8:	466b      	mov	r3, sp
    7eaa:	f113 0210 	adds.w	r2, r3, #16
    7eae:	d03d      	beq.n	7f2c <spi_context_cs_configure_all+0xa0>
    7eb0:	2511      	movs	r5, #17
    7eb2:	2a00      	cmp	r2, #0
    7eb4:	d03d      	beq.n	7f32 <spi_context_cs_configure_all+0xa6>
    7eb6:	4629      	mov	r1, r5
    7eb8:	2d04      	cmp	r5, #4
    7eba:	dd01      	ble.n	7ec0 <spi_context_cs_configure_all+0x34>
    7ebc:	4831      	ldr	r0, [pc, #196]	; (7f84 <spi_context_cs_configure_all+0xf8>)
    7ebe:	6158      	str	r0, [r3, #20]
    7ec0:	2002      	movs	r0, #2
    7ec2:	7038      	strb	r0, [r7, #0]
    7ec4:	2908      	cmp	r1, #8
    7ec6:	dd01      	ble.n	7ecc <spi_context_cs_configure_all+0x40>
    7ec8:	f8c3 c018 	str.w	ip, [r3, #24]
    7ecc:	290c      	cmp	r1, #12
    7ece:	dd00      	ble.n	7ed2 <spi_context_cs_configure_all+0x46>
    7ed0:	61de      	str	r6, [r3, #28]
    7ed2:	f103 0120 	add.w	r1, r3, #32
    7ed6:	2000      	movs	r0, #0
    7ed8:	b370      	cbz	r0, 7f38 <spi_context_cs_configure_all+0xac>
    7eda:	2d10      	cmp	r5, #16
    7edc:	dd36      	ble.n	7f4c <spi_context_cs_configure_all+0xc0>
    7ede:	2511      	movs	r5, #17
    7ee0:	b142      	cbz	r2, 7ef4 <spi_context_cs_configure_all+0x68>
    7ee2:	2104      	movs	r1, #4
    7ee4:	7139      	strb	r1, [r7, #4]
    7ee6:	2100      	movs	r1, #0
    7ee8:	7179      	strb	r1, [r7, #5]
    7eea:	71b9      	strb	r1, [r7, #6]
    7eec:	2101      	movs	r1, #1
    7eee:	71f9      	strb	r1, [r7, #7]
    7ef0:	6878      	ldr	r0, [r7, #4]
    7ef2:	6118      	str	r0, [r3, #16]
    7ef4:	2100      	movs	r1, #0
    7ef6:	f36f 0100 	bfc	r1, #0, #1
    7efa:	f36f 0141 	bfc	r1, #1, #1
    7efe:	f36f 0182 	bfc	r1, #2, #1
    7f02:	f36f 01c5 	bfc	r1, #3, #3
    7f06:	2301      	movs	r3, #1
    7f08:	f363 1188 	bfi	r1, r3, #6, #3
    7f0c:	f3c5 0309 	ubfx	r3, r5, #0, #10
    7f10:	f363 2152 	bfi	r1, r3, #9, #10
    7f14:	f36f 41de 	bfc	r1, #19, #12
    7f18:	f36f 71df 	bfc	r1, #31, #1
    7f1c:	2300      	movs	r3, #0
    7f1e:	481a      	ldr	r0, [pc, #104]	; (7f88 <spi_context_cs_configure_all+0xfc>)
    7f20:	f7fb fba2 	bl	3668 <z_impl_z_log_msg_static_create>
    7f24:	46a5      	mov	sp, r4
			return -ENODEV;
    7f26:	f06f 0012 	mvn.w	r0, #18
    7f2a:	e027      	b.n	7f7c <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    7f2c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    7f30:	e7bf      	b.n	7eb2 <spi_context_cs_configure_all+0x26>
    7f32:	2102      	movs	r1, #2
    7f34:	7039      	strb	r1, [r7, #0]
    7f36:	e7d0      	b.n	7eda <spi_context_cs_configure_all+0x4e>
    7f38:	f100 0608 	add.w	r6, r0, #8
    7f3c:	eb06 0c07 	add.w	ip, r6, r7
    7f40:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    7f44:	f801 cb01 	strb.w	ip, [r1], #1
    7f48:	3001      	adds	r0, #1
    7f4a:	e7c5      	b.n	7ed8 <spi_context_cs_configure_all+0x4c>
    7f4c:	f06f 051b 	mvn.w	r5, #27
    7f50:	e7c6      	b.n	7ee0 <spi_context_cs_configure_all+0x54>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    7f52:	3408      	adds	r4, #8
    7f54:	68ab      	ldr	r3, [r5, #8]
    7f56:	68ea      	ldr	r2, [r5, #12]
    7f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7f5c:	429c      	cmp	r4, r3
    7f5e:	d20c      	bcs.n	7f7a <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
    7f60:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    7f62:	f00b f9c4 	bl	132ee <z_device_is_ready>
    7f66:	2800      	cmp	r0, #0
    7f68:	d096      	beq.n	7e98 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
    7f6a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    7f6e:	4620      	mov	r0, r4
    7f70:	f009 fc8c 	bl	1188c <gpio_pin_configure_dt>
		if (ret < 0) {
    7f74:	2800      	cmp	r0, #0
    7f76:	daec      	bge.n	7f52 <spi_context_cs_configure_all+0xc6>
    7f78:	e000      	b.n	7f7c <spi_context_cs_configure_all+0xf0>
	return 0;
    7f7a:	2000      	movs	r0, #0
}
    7f7c:	370c      	adds	r7, #12
    7f7e:	46bd      	mov	sp, r7
    7f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f82:	bf00      	nop
    7f84:	000158c4 	.word	0x000158c4
    7f88:	00013acc 	.word	0x00013acc

00007f8c <gpio_pin_set_raw>:
{
    7f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f8e:	4604      	mov	r4, r0
    7f90:	4616      	mov	r6, r2
	__unused const struct gpio_driver_config *const cfg =
    7f92:	6843      	ldr	r3, [r0, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	2501      	movs	r5, #1
    7f98:	408d      	lsls	r5, r1
    7f9a:	422b      	tst	r3, r5
    7f9c:	d006      	beq.n	7fac <gpio_pin_set_raw+0x20>
	if (value != 0)	{
    7f9e:	b1b6      	cbz	r6, 7fce <gpio_pin_set_raw+0x42>
	const struct gpio_driver_api *api =
    7fa0:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    7fa2:	68db      	ldr	r3, [r3, #12]
    7fa4:	4629      	mov	r1, r5
    7fa6:	4620      	mov	r0, r4
    7fa8:	4798      	blx	r3
}
    7faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7fac:	4f0b      	ldr	r7, [pc, #44]	; (7fdc <gpio_pin_set_raw+0x50>)
    7fae:	f240 43fc 	movw	r3, #1276	; 0x4fc
    7fb2:	463a      	mov	r2, r7
    7fb4:	490a      	ldr	r1, [pc, #40]	; (7fe0 <gpio_pin_set_raw+0x54>)
    7fb6:	480b      	ldr	r0, [pc, #44]	; (7fe4 <gpio_pin_set_raw+0x58>)
    7fb8:	f008 fbbe 	bl	10738 <assert_print>
    7fbc:	480a      	ldr	r0, [pc, #40]	; (7fe8 <gpio_pin_set_raw+0x5c>)
    7fbe:	f008 fbbb 	bl	10738 <assert_print>
    7fc2:	f240 41fc 	movw	r1, #1276	; 0x4fc
    7fc6:	4638      	mov	r0, r7
    7fc8:	f008 fbaf 	bl	1072a <assert_post_action>
    7fcc:	e7e7      	b.n	7f9e <gpio_pin_set_raw+0x12>
	const struct gpio_driver_api *api =
    7fce:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    7fd0:	691b      	ldr	r3, [r3, #16]
    7fd2:	4629      	mov	r1, r5
    7fd4:	4620      	mov	r0, r4
    7fd6:	4798      	blx	r3
	return ret;
    7fd8:	e7e7      	b.n	7faa <gpio_pin_set_raw+0x1e>
    7fda:	bf00      	nop
    7fdc:	00015454 	.word	0x00015454
    7fe0:	00015488 	.word	0x00015488
    7fe4:	00013d44 	.word	0x00013d44
    7fe8:	000154c8 	.word	0x000154c8

00007fec <gpio_pin_set>:
{
    7fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ff0:	4604      	mov	r4, r0
    7ff2:	460e      	mov	r6, r1
    7ff4:	4615      	mov	r5, r2
	__unused const struct gpio_driver_config *const cfg =
    7ff6:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    7ff8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	2701      	movs	r7, #1
    8000:	408f      	lsls	r7, r1
    8002:	423b      	tst	r3, r7
    8004:	d00d      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8006:	f8d8 3000 	ldr.w	r3, [r8]
    800a:	421f      	tst	r7, r3
    800c:	d002      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
		value = (value != 0) ? 0 : 1;
    800e:	fab5 f585 	clz	r5, r5
    8012:	096d      	lsrs	r5, r5, #5
	return gpio_pin_set_raw(port, pin, value);
    8014:	462a      	mov	r2, r5
    8016:	4631      	mov	r1, r6
    8018:	4620      	mov	r0, r4
    801a:	f7ff ffb7 	bl	7f8c <gpio_pin_set_raw>
}
    801e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8022:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    8026:	f240 5325 	movw	r3, #1317	; 0x525
    802a:	464a      	mov	r2, r9
    802c:	4907      	ldr	r1, [pc, #28]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    802e:	4808      	ldr	r0, [pc, #32]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    8030:	f008 fb82 	bl	10738 <assert_print>
    8034:	4807      	ldr	r0, [pc, #28]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8036:	f008 fb7f 	bl	10738 <assert_print>
    803a:	f240 5125 	movw	r1, #1317	; 0x525
    803e:	4648      	mov	r0, r9
    8040:	f008 fb73 	bl	1072a <assert_post_action>
    8044:	e7df      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    8046:	bf00      	nop
    8048:	00015454 	.word	0x00015454
    804c:	00015488 	.word	0x00015488
    8050:	00013d44 	.word	0x00013d44
    8054:	000154c8 	.word	0x000154c8

00008058 <z_impl_gpio_pin_configure>:
{
    8058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    805c:	4605      	mov	r5, r0
    805e:	460e      	mov	r6, r1
    8060:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
    8062:	f8d0 a008 	ldr.w	sl, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
    8066:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct gpio_driver_data *data =
    806a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    806e:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
    8072:	d136      	bne.n	80e2 <z_impl_gpio_pin_configure+0x8a>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8074:	f004 0330 	and.w	r3, r4, #48	; 0x30
    8078:	2b30      	cmp	r3, #48	; 0x30
    807a:	d043      	beq.n	8104 <z_impl_gpio_pin_configure+0xac>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    807c:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
    8080:	2b02      	cmp	r3, #2
    8082:	d050      	beq.n	8126 <z_impl_gpio_pin_configure+0xce>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    8084:	f004 0306 	and.w	r3, r4, #6
    8088:	2b04      	cmp	r3, #4
    808a:	d05d      	beq.n	8148 <z_impl_gpio_pin_configure+0xf0>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    808c:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
    8090:	d002      	beq.n	8098 <z_impl_gpio_pin_configure+0x40>
    8092:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    8096:	d065      	beq.n	8164 <z_impl_gpio_pin_configure+0x10c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    8098:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
    809c:	d074      	beq.n	8188 <z_impl_gpio_pin_configure+0x130>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    809e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
    80a2:	d005      	beq.n	80b0 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    80a4:	b127      	cbz	r7, 80b0 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    80a6:	f014 0f01 	tst.w	r4, #1
    80aa:	d001      	beq.n	80b0 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    80ac:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    80b0:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    80b4:	f8db 3000 	ldr.w	r3, [fp]
    80b8:	2701      	movs	r7, #1
    80ba:	40b7      	lsls	r7, r6
    80bc:	423b      	tst	r3, r7
    80be:	d075      	beq.n	81ac <z_impl_gpio_pin_configure+0x154>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    80c0:	f014 0f01 	tst.w	r4, #1
    80c4:	f000 8084 	beq.w	81d0 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    80c8:	f8d8 3000 	ldr.w	r3, [r8]
    80cc:	433b      	orrs	r3, r7
    80ce:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
    80d2:	f8da 3000 	ldr.w	r3, [sl]
    80d6:	464a      	mov	r2, r9
    80d8:	4631      	mov	r1, r6
    80da:	4628      	mov	r0, r5
    80dc:	4798      	blx	r3
}
    80de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    80e2:	4f3f      	ldr	r7, [pc, #252]	; (81e0 <z_impl_gpio_pin_configure+0x188>)
    80e4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    80e8:	463a      	mov	r2, r7
    80ea:	493e      	ldr	r1, [pc, #248]	; (81e4 <z_impl_gpio_pin_configure+0x18c>)
    80ec:	483e      	ldr	r0, [pc, #248]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    80ee:	f008 fb23 	bl	10738 <assert_print>
    80f2:	483e      	ldr	r0, [pc, #248]	; (81ec <z_impl_gpio_pin_configure+0x194>)
    80f4:	f008 fb20 	bl	10738 <assert_print>
    80f8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    80fc:	4638      	mov	r0, r7
    80fe:	f008 fb14 	bl	1072a <assert_post_action>
    8102:	e7b7      	b.n	8074 <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8104:	4f36      	ldr	r7, [pc, #216]	; (81e0 <z_impl_gpio_pin_configure+0x188>)
    8106:	f240 23bf 	movw	r3, #703	; 0x2bf
    810a:	463a      	mov	r2, r7
    810c:	4938      	ldr	r1, [pc, #224]	; (81f0 <z_impl_gpio_pin_configure+0x198>)
    810e:	4836      	ldr	r0, [pc, #216]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    8110:	f008 fb12 	bl	10738 <assert_print>
    8114:	4837      	ldr	r0, [pc, #220]	; (81f4 <z_impl_gpio_pin_configure+0x19c>)
    8116:	f008 fb0f 	bl	10738 <assert_print>
    811a:	f240 21bf 	movw	r1, #703	; 0x2bf
    811e:	4638      	mov	r0, r7
    8120:	f008 fb03 	bl	1072a <assert_post_action>
    8124:	e7aa      	b.n	807c <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    8126:	4f2e      	ldr	r7, [pc, #184]	; (81e0 <z_impl_gpio_pin_configure+0x188>)
    8128:	f240 23c3 	movw	r3, #707	; 0x2c3
    812c:	463a      	mov	r2, r7
    812e:	4932      	ldr	r1, [pc, #200]	; (81f8 <z_impl_gpio_pin_configure+0x1a0>)
    8130:	482d      	ldr	r0, [pc, #180]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    8132:	f008 fb01 	bl	10738 <assert_print>
    8136:	4831      	ldr	r0, [pc, #196]	; (81fc <z_impl_gpio_pin_configure+0x1a4>)
    8138:	f008 fafe 	bl	10738 <assert_print>
    813c:	f240 21c3 	movw	r1, #707	; 0x2c3
    8140:	4638      	mov	r0, r7
    8142:	f008 faf2 	bl	1072a <assert_post_action>
    8146:	e79d      	b.n	8084 <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    8148:	4f25      	ldr	r7, [pc, #148]	; (81e0 <z_impl_gpio_pin_configure+0x188>)
    814a:	f240 23c7 	movw	r3, #711	; 0x2c7
    814e:	463a      	mov	r2, r7
    8150:	492b      	ldr	r1, [pc, #172]	; (8200 <z_impl_gpio_pin_configure+0x1a8>)
    8152:	4825      	ldr	r0, [pc, #148]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    8154:	f008 faf0 	bl	10738 <assert_print>
    8158:	f240 21c7 	movw	r1, #711	; 0x2c7
    815c:	4638      	mov	r0, r7
    815e:	f008 fae4 	bl	1072a <assert_post_action>
    8162:	e793      	b.n	808c <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    8164:	f8df 9078 	ldr.w	r9, [pc, #120]	; 81e0 <z_impl_gpio_pin_configure+0x188>
    8168:	f240 23ca 	movw	r3, #714	; 0x2ca
    816c:	464a      	mov	r2, r9
    816e:	4925      	ldr	r1, [pc, #148]	; (8204 <z_impl_gpio_pin_configure+0x1ac>)
    8170:	481d      	ldr	r0, [pc, #116]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    8172:	f008 fae1 	bl	10738 <assert_print>
    8176:	4824      	ldr	r0, [pc, #144]	; (8208 <z_impl_gpio_pin_configure+0x1b0>)
    8178:	f008 fade 	bl	10738 <assert_print>
    817c:	f240 21ca 	movw	r1, #714	; 0x2ca
    8180:	4648      	mov	r0, r9
    8182:	f008 fad2 	bl	1072a <assert_post_action>
    8186:	e787      	b.n	8098 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    8188:	f8df 9054 	ldr.w	r9, [pc, #84]	; 81e0 <z_impl_gpio_pin_configure+0x188>
    818c:	f240 23ce 	movw	r3, #718	; 0x2ce
    8190:	464a      	mov	r2, r9
    8192:	491e      	ldr	r1, [pc, #120]	; (820c <z_impl_gpio_pin_configure+0x1b4>)
    8194:	4814      	ldr	r0, [pc, #80]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    8196:	f008 facf 	bl	10738 <assert_print>
    819a:	481d      	ldr	r0, [pc, #116]	; (8210 <z_impl_gpio_pin_configure+0x1b8>)
    819c:	f008 facc 	bl	10738 <assert_print>
    81a0:	f240 21ce 	movw	r1, #718	; 0x2ce
    81a4:	4648      	mov	r0, r9
    81a6:	f008 fac0 	bl	1072a <assert_post_action>
    81aa:	e778      	b.n	809e <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    81ac:	f8df b030 	ldr.w	fp, [pc, #48]	; 81e0 <z_impl_gpio_pin_configure+0x188>
    81b0:	f240 23da 	movw	r3, #730	; 0x2da
    81b4:	465a      	mov	r2, fp
    81b6:	4917      	ldr	r1, [pc, #92]	; (8214 <z_impl_gpio_pin_configure+0x1bc>)
    81b8:	480b      	ldr	r0, [pc, #44]	; (81e8 <z_impl_gpio_pin_configure+0x190>)
    81ba:	f008 fabd 	bl	10738 <assert_print>
    81be:	4816      	ldr	r0, [pc, #88]	; (8218 <z_impl_gpio_pin_configure+0x1c0>)
    81c0:	f008 faba 	bl	10738 <assert_print>
    81c4:	f240 21da 	movw	r1, #730	; 0x2da
    81c8:	4658      	mov	r0, fp
    81ca:	f008 faae 	bl	1072a <assert_post_action>
    81ce:	e777      	b.n	80c0 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    81d0:	f8d8 3000 	ldr.w	r3, [r8]
    81d4:	ea23 0307 	bic.w	r3, r3, r7
    81d8:	f8c8 3000 	str.w	r3, [r8]
    81dc:	e779      	b.n	80d2 <z_impl_gpio_pin_configure+0x7a>
    81de:	bf00      	nop
    81e0:	00015454 	.word	0x00015454
    81e4:	000154dc 	.word	0x000154dc
    81e8:	00013d44 	.word	0x00013d44
    81ec:	0001553c 	.word	0x0001553c
    81f0:	00015560 	.word	0x00015560
    81f4:	0001559c 	.word	0x0001559c
    81f8:	000155dc 	.word	0x000155dc
    81fc:	00015614 	.word	0x00015614
    8200:	00015668 	.word	0x00015668
    8204:	0001569c 	.word	0x0001569c
    8208:	000156e4 	.word	0x000156e4
    820c:	00015720 	.word	0x00015720
    8210:	00015764 	.word	0x00015764
    8214:	00015488 	.word	0x00015488
    8218:	000154c8 	.word	0x000154c8

0000821c <common_init>:
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
{
    821c:	b5f0      	push	{r4, r5, r6, r7, lr}
    821e:	b083      	sub	sp, #12
    8220:	af00      	add	r7, sp, #0
	const struct driver_config *cfg = dev->config;
    8222:	6844      	ldr	r4, [r0, #4]
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
    8224:	68e0      	ldr	r0, [r4, #12]
    8226:	f00b f862 	bl	132ee <z_device_is_ready>
    822a:	b138      	cbz	r0, 823c <common_init+0x20>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	bool on = cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON);
    822c:	7d23      	ldrb	r3, [r4, #20]
	uint32_t delay_us = 0;

	if (on) {
    822e:	f013 0f03 	tst.w	r3, #3
    8232:	d059      	beq.n	82e8 <common_init+0xcc>
		flags = GPIO_OUTPUT_ACTIVE;
		delay_us = cfg->startup_delay_us;
    8234:	6865      	ldr	r5, [r4, #4]
		flags = GPIO_OUTPUT_ACTIVE;
    8236:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    823a:	e058      	b.n	82ee <common_init+0xd2>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    823c:	68e3      	ldr	r3, [r4, #12]
    823e:	681e      	ldr	r6, [r3, #0]
    8240:	466c      	mov	r4, sp
    8242:	2302      	movs	r3, #2
    8244:	713b      	strb	r3, [r7, #4]
    8246:	b088      	sub	sp, #32
    8248:	466b      	mov	r3, sp
    824a:	f113 0210 	adds.w	r2, r3, #16
    824e:	d038      	beq.n	82c2 <common_init+0xa6>
    8250:	250d      	movs	r5, #13
    8252:	b3ca      	cbz	r2, 82c8 <common_init+0xac>
    8254:	4629      	mov	r1, r5
    8256:	2d04      	cmp	r5, #4
    8258:	dd01      	ble.n	825e <common_init+0x42>
    825a:	482c      	ldr	r0, [pc, #176]	; (830c <common_init+0xf0>)
    825c:	6158      	str	r0, [r3, #20]
    825e:	2002      	movs	r0, #2
    8260:	7038      	strb	r0, [r7, #0]
    8262:	2908      	cmp	r1, #8
    8264:	dd00      	ble.n	8268 <common_init+0x4c>
    8266:	619e      	str	r6, [r3, #24]
    8268:	f103 011c 	add.w	r1, r3, #28
    826c:	2000      	movs	r0, #0
    826e:	b370      	cbz	r0, 82ce <common_init+0xb2>
    8270:	2d0c      	cmp	r5, #12
    8272:	dd36      	ble.n	82e2 <common_init+0xc6>
    8274:	250d      	movs	r5, #13
    8276:	b142      	cbz	r2, 828a <common_init+0x6e>
    8278:	2103      	movs	r1, #3
    827a:	7139      	strb	r1, [r7, #4]
    827c:	2100      	movs	r1, #0
    827e:	7179      	strb	r1, [r7, #5]
    8280:	71b9      	strb	r1, [r7, #6]
    8282:	2101      	movs	r1, #1
    8284:	71f9      	strb	r1, [r7, #7]
    8286:	6878      	ldr	r0, [r7, #4]
    8288:	6118      	str	r0, [r3, #16]
    828a:	2100      	movs	r1, #0
    828c:	f36f 0100 	bfc	r1, #0, #1
    8290:	f36f 0141 	bfc	r1, #1, #1
    8294:	f36f 0182 	bfc	r1, #2, #1
    8298:	f36f 01c5 	bfc	r1, #3, #3
    829c:	2301      	movs	r3, #1
    829e:	f363 1188 	bfi	r1, r3, #6, #3
    82a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
    82a6:	f365 2152 	bfi	r1, r5, #9, #10
    82aa:	f36f 41de 	bfc	r1, #19, #12
    82ae:	f36f 71df 	bfc	r1, #31, #1
    82b2:	2300      	movs	r3, #0
    82b4:	4816      	ldr	r0, [pc, #88]	; (8310 <common_init+0xf4>)
    82b6:	f7fb f9d7 	bl	3668 <z_impl_z_log_msg_static_create>
    82ba:	46a5      	mov	sp, r4
		return -ENODEV;
    82bc:	f06f 0412 	mvn.w	r4, #18
    82c0:	e01c      	b.n	82fc <common_init+0xe0>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    82c2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    82c6:	e7c4      	b.n	8252 <common_init+0x36>
    82c8:	2102      	movs	r1, #2
    82ca:	7039      	strb	r1, [r7, #0]
    82cc:	e7d0      	b.n	8270 <common_init+0x54>
    82ce:	f100 0608 	add.w	r6, r0, #8
    82d2:	eb06 0c07 	add.w	ip, r6, r7
    82d6:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    82da:	f801 cb01 	strb.w	ip, [r1], #1
    82de:	3001      	adds	r0, #1
    82e0:	e7c5      	b.n	826e <common_init+0x52>
    82e2:	f06f 051b 	mvn.w	r5, #27
    82e6:	e7c6      	b.n	8276 <common_init+0x5a>
	uint32_t delay_us = 0;
    82e8:	2500      	movs	r5, #0
	} else {
		flags = GPIO_OUTPUT_INACTIVE;
    82ea:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
	}

	int rc = gpio_pin_configure_dt(&cfg->enable, flags);
    82ee:	f104 000c 	add.w	r0, r4, #12
    82f2:	f009 fbc2 	bl	11a7a <gpio_pin_configure_dt>

	if ((rc == 0) && (delay_us > 0)) {
    82f6:	4604      	mov	r4, r0
    82f8:	b900      	cbnz	r0, 82fc <common_init+0xe0>
    82fa:	b91d      	cbnz	r5, 8304 <common_init+0xe8>
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
    82fc:	4620      	mov	r0, r4
    82fe:	370c      	adds	r7, #12
    8300:	46bd      	mov	sp, r7
    8302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_busy_wait(usec_to_wait);
    8304:	4628      	mov	r0, r5
    8306:	f00b f931 	bl	1356c <z_impl_k_busy_wait>
}
    830a:	e7f7      	b.n	82fc <common_init+0xe0>
    830c:	00015970 	.word	0x00015970
    8310:	00013abc 	.word	0x00013abc

00008314 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    8314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8318:	b082      	sub	sp, #8
    831a:	af00      	add	r7, sp, #0
    831c:	4604      	mov	r4, r0
	const struct driver_config *cfg = dev->config;
    831e:	6846      	ldr	r6, [r0, #4]
	int rc = common_init(dev);
    8320:	f7ff ff7c 	bl	821c <common_init>
    8324:	4605      	mov	r5, r0

	(void)regulator_fixed_init_onoff;
	(void)api_onoff;
	(void)cfg;

	__ASSERT(cfg->startup_delay_us == 0,
    8326:	6873      	ldr	r3, [r6, #4]
    8328:	2b00      	cmp	r3, #0
    832a:	d149      	bne.n	83c0 <regulator_fixed_init_sync+0xac>
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
    832c:	68b3      	ldr	r3, [r6, #8]
    832e:	2b00      	cmp	r3, #0
    8330:	d158      	bne.n	83e4 <regulator_fixed_init_sync+0xd0>
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    8332:	6826      	ldr	r6, [r4, #0]
    8334:	2302      	movs	r3, #2
    8336:	713b      	strb	r3, [r7, #4]
    8338:	b08a      	sub	sp, #40	; 0x28
    833a:	466b      	mov	r3, sp
    833c:	f113 0210 	adds.w	r2, r3, #16
    8340:	d061      	beq.n	8406 <regulator_fixed_init_sync+0xf2>
    8342:	2411      	movs	r4, #17
    8344:	2a00      	cmp	r2, #0
    8346:	d061      	beq.n	840c <regulator_fixed_init_sync+0xf8>
    8348:	4621      	mov	r1, r4
    834a:	2c04      	cmp	r4, #4
    834c:	dd01      	ble.n	8352 <regulator_fixed_init_sync+0x3e>
    834e:	4837      	ldr	r0, [pc, #220]	; (842c <regulator_fixed_init_sync+0x118>)
    8350:	6158      	str	r0, [r3, #20]
    8352:	2002      	movs	r0, #2
    8354:	7038      	strb	r0, [r7, #0]
    8356:	2908      	cmp	r1, #8
    8358:	dd00      	ble.n	835c <regulator_fixed_init_sync+0x48>
    835a:	619e      	str	r6, [r3, #24]
    835c:	290c      	cmp	r1, #12
    835e:	dd00      	ble.n	8362 <regulator_fixed_init_sync+0x4e>
    8360:	61dd      	str	r5, [r3, #28]
    8362:	f103 0120 	add.w	r1, r3, #32
    8366:	2000      	movs	r0, #0
    8368:	2800      	cmp	r0, #0
    836a:	d052      	beq.n	8412 <regulator_fixed_init_sync+0xfe>
    836c:	2c10      	cmp	r4, #16
    836e:	dd59      	ble.n	8424 <regulator_fixed_init_sync+0x110>
    8370:	2411      	movs	r4, #17
    8372:	b142      	cbz	r2, 8386 <regulator_fixed_init_sync+0x72>
    8374:	2104      	movs	r1, #4
    8376:	7139      	strb	r1, [r7, #4]
    8378:	2100      	movs	r1, #0
    837a:	7179      	strb	r1, [r7, #5]
    837c:	71b9      	strb	r1, [r7, #6]
    837e:	2101      	movs	r1, #1
    8380:	71f9      	strb	r1, [r7, #7]
    8382:	6878      	ldr	r0, [r7, #4]
    8384:	6118      	str	r0, [r3, #16]
    8386:	2100      	movs	r1, #0
    8388:	f36f 0100 	bfc	r1, #0, #1
    838c:	f36f 0141 	bfc	r1, #1, #1
    8390:	f36f 0182 	bfc	r1, #2, #1
    8394:	f36f 01c5 	bfc	r1, #3, #3
    8398:	2303      	movs	r3, #3
    839a:	f363 1188 	bfi	r1, r3, #6, #3
    839e:	f3c4 0409 	ubfx	r4, r4, #0, #10
    83a2:	f364 2152 	bfi	r1, r4, #9, #10
    83a6:	f36f 41de 	bfc	r1, #19, #12
    83aa:	f36f 71df 	bfc	r1, #31, #1
    83ae:	2300      	movs	r3, #0
    83b0:	481f      	ldr	r0, [pc, #124]	; (8430 <regulator_fixed_init_sync+0x11c>)
    83b2:	f7fb f959 	bl	3668 <z_impl_z_log_msg_static_create>

	return rc;
}
    83b6:	4628      	mov	r0, r5
    83b8:	3708      	adds	r7, #8
    83ba:	46bd      	mov	sp, r7
    83bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(cfg->startup_delay_us == 0,
    83c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8434 <regulator_fixed_init_sync+0x120>
    83c4:	f44f 73a6 	mov.w	r3, #332	; 0x14c
    83c8:	4642      	mov	r2, r8
    83ca:	491b      	ldr	r1, [pc, #108]	; (8438 <regulator_fixed_init_sync+0x124>)
    83cc:	481b      	ldr	r0, [pc, #108]	; (843c <regulator_fixed_init_sync+0x128>)
    83ce:	f008 f9b3 	bl	10738 <assert_print>
    83d2:	481b      	ldr	r0, [pc, #108]	; (8440 <regulator_fixed_init_sync+0x12c>)
    83d4:	f008 f9b0 	bl	10738 <assert_print>
    83d8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    83dc:	4640      	mov	r0, r8
    83de:	f008 f9a4 	bl	1072a <assert_post_action>
    83e2:	e7a3      	b.n	832c <regulator_fixed_init_sync+0x18>
	__ASSERT(cfg->off_on_delay_us == 0,
    83e4:	4e13      	ldr	r6, [pc, #76]	; (8434 <regulator_fixed_init_sync+0x120>)
    83e6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    83ea:	4632      	mov	r2, r6
    83ec:	4915      	ldr	r1, [pc, #84]	; (8444 <regulator_fixed_init_sync+0x130>)
    83ee:	4813      	ldr	r0, [pc, #76]	; (843c <regulator_fixed_init_sync+0x128>)
    83f0:	f008 f9a2 	bl	10738 <assert_print>
    83f4:	4814      	ldr	r0, [pc, #80]	; (8448 <regulator_fixed_init_sync+0x134>)
    83f6:	f008 f99f 	bl	10738 <assert_print>
    83fa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    83fe:	4630      	mov	r0, r6
    8400:	f008 f993 	bl	1072a <assert_post_action>
    8404:	e795      	b.n	8332 <regulator_fixed_init_sync+0x1e>
	LOG_INF("%s sync: %d", dev->name, rc);
    8406:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    840a:	e79b      	b.n	8344 <regulator_fixed_init_sync+0x30>
    840c:	2102      	movs	r1, #2
    840e:	7039      	strb	r1, [r7, #0]
    8410:	e7ac      	b.n	836c <regulator_fixed_init_sync+0x58>
    8412:	f100 0608 	add.w	r6, r0, #8
    8416:	443e      	add	r6, r7
    8418:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    841c:	f801 6b01 	strb.w	r6, [r1], #1
    8420:	3001      	adds	r0, #1
    8422:	e7a1      	b.n	8368 <regulator_fixed_init_sync+0x54>
    8424:	f06f 041b 	mvn.w	r4, #27
    8428:	e7a3      	b.n	8372 <regulator_fixed_init_sync+0x5e>
    842a:	bf00      	nop
    842c:	00015a44 	.word	0x00015a44
    8430:	00013abc 	.word	0x00013abc
    8434:	00015988 	.word	0x00015988
    8438:	000159c0 	.word	0x000159c0
    843c:	00013d44 	.word	0x00013d44
    8440:	000159dc 	.word	0x000159dc
    8444:	00015a00 	.word	0x00015a00
    8448:	00015a1c 	.word	0x00015a1c

0000844c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    844c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    844e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    8450:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    8454:	d06f      	beq.n	8536 <baudrate_set+0xea>
    8456:	d83a      	bhi.n	84ce <baudrate_set+0x82>
    8458:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    845c:	d06e      	beq.n	853c <baudrate_set+0xf0>
    845e:	d90a      	bls.n	8476 <baudrate_set+0x2a>
    8460:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    8464:	d075      	beq.n	8552 <baudrate_set+0x106>
    8466:	d924      	bls.n	84b2 <baudrate_set+0x66>
    8468:	f647 2312 	movw	r3, #31250	; 0x7a12
    846c:	4299      	cmp	r1, r3
    846e:	d12b      	bne.n	84c8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    8470:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8474:	e013      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    8476:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    847a:	d061      	beq.n	8540 <baudrate_set+0xf4>
    847c:	d907      	bls.n	848e <baudrate_set+0x42>
    847e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    8482:	d063      	beq.n	854c <baudrate_set+0x100>
    8484:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    8488:	d110      	bne.n	84ac <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    848a:	4b3c      	ldr	r3, [pc, #240]	; (857c <baudrate_set+0x130>)
    848c:	e007      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    848e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    8492:	d058      	beq.n	8546 <baudrate_set+0xfa>
    8494:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    8498:	d105      	bne.n	84a6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    849a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    849e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    84a2:	2000      	movs	r0, #0
    84a4:	4770      	bx	lr
	switch (baudrate) {
    84a6:	f06f 0015 	mvn.w	r0, #21
    84aa:	4770      	bx	lr
    84ac:	f06f 0015 	mvn.w	r0, #21
    84b0:	4770      	bx	lr
    84b2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    84b6:	d04e      	beq.n	8556 <baudrate_set+0x10a>
    84b8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    84bc:	d101      	bne.n	84c2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    84be:	4b30      	ldr	r3, [pc, #192]	; (8580 <baudrate_set+0x134>)
    84c0:	e7ed      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    84c2:	f06f 0015 	mvn.w	r0, #21
    84c6:	4770      	bx	lr
    84c8:	f06f 0015 	mvn.w	r0, #21
    84cc:	4770      	bx	lr
    84ce:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    84d2:	d042      	beq.n	855a <baudrate_set+0x10e>
    84d4:	d909      	bls.n	84ea <baudrate_set+0x9e>
    84d6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    84da:	d046      	beq.n	856a <baudrate_set+0x11e>
    84dc:	d91f      	bls.n	851e <baudrate_set+0xd2>
    84de:	4b29      	ldr	r3, [pc, #164]	; (8584 <baudrate_set+0x138>)
    84e0:	4299      	cmp	r1, r3
    84e2:	d148      	bne.n	8576 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    84e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    84e8:	e7d9      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    84ea:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    84ee:	d037      	beq.n	8560 <baudrate_set+0x114>
    84f0:	d905      	bls.n	84fe <baudrate_set+0xb2>
    84f2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    84f6:	d10f      	bne.n	8518 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    84f8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    84fc:	e7cf      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    84fe:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    8502:	4299      	cmp	r1, r3
    8504:	d02e      	beq.n	8564 <baudrate_set+0x118>
    8506:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    850a:	d102      	bne.n	8512 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    850c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    8510:	e7c5      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    8512:	f06f 0015 	mvn.w	r0, #21
    8516:	4770      	bx	lr
    8518:	f06f 0015 	mvn.w	r0, #21
    851c:	4770      	bx	lr
    851e:	4b1a      	ldr	r3, [pc, #104]	; (8588 <baudrate_set+0x13c>)
    8520:	4299      	cmp	r1, r3
    8522:	d025      	beq.n	8570 <baudrate_set+0x124>
    8524:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    8528:	d102      	bne.n	8530 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    852a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    852e:	e7b6      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    8530:	f06f 0015 	mvn.w	r0, #21
    8534:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    8536:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    853a:	e7b0      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    853c:	4b13      	ldr	r3, [pc, #76]	; (858c <baudrate_set+0x140>)
    853e:	e7ae      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    8540:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    8544:	e7ab      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    8546:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    854a:	e7a8      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    854c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    8550:	e7a5      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    8552:	4b0f      	ldr	r3, [pc, #60]	; (8590 <baudrate_set+0x144>)
    8554:	e7a3      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    8556:	4b0f      	ldr	r3, [pc, #60]	; (8594 <baudrate_set+0x148>)
    8558:	e7a1      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    855a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    855e:	e79e      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    8560:	4b0d      	ldr	r3, [pc, #52]	; (8598 <baudrate_set+0x14c>)
    8562:	e79c      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    8564:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8568:	e799      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    856a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    856e:	e796      	b.n	849e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    8570:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8574:	e793      	b.n	849e <baudrate_set+0x52>
	switch (baudrate) {
    8576:	f06f 0015 	mvn.w	r0, #21
}
    857a:	4770      	bx	lr
    857c:	0013b000 	.word	0x0013b000
    8580:	004ea000 	.word	0x004ea000
    8584:	000f4240 	.word	0x000f4240
    8588:	0003d090 	.word	0x0003d090
    858c:	00275000 	.word	0x00275000
    8590:	0075c000 	.word	0x0075c000
    8594:	003af000 	.word	0x003af000
    8598:	013a9000 	.word	0x013a9000

0000859c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    859e:	4605      	mov	r5, r0
    85a0:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    85a2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    85a4:	f00a fef3 	bl	1338e <k_is_in_isr>
    85a8:	b910      	cbnz	r0, 85b0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    85aa:	4b12      	ldr	r3, [pc, #72]	; (85f4 <uarte_nrfx_poll_out+0x58>)
    85ac:	781b      	ldrb	r3, [r3, #0]
    85ae:	b983      	cbnz	r3, 85d2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    85b0:	f04f 0320 	mov.w	r3, #32
    85b4:	f3ef 8411 	mrs	r4, BASEPRI
    85b8:	f383 8812 	msr	BASEPRI_MAX, r3
    85bc:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    85c0:	4628      	mov	r0, r5
    85c2:	f009 fb19 	bl	11bf8 <is_tx_ready>
    85c6:	b940      	cbnz	r0, 85da <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    85c8:	f384 8811 	msr	BASEPRI, r4
    85cc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    85d0:	e7ee      	b.n	85b0 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    85d2:	4628      	mov	r0, r5
    85d4:	f009 fb75 	bl	11cc2 <wait_tx_ready>
    85d8:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    85da:	693b      	ldr	r3, [r7, #16]
    85dc:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    85de:	2201      	movs	r2, #1
    85e0:	6939      	ldr	r1, [r7, #16]
    85e2:	4628      	mov	r0, r5
    85e4:	f009 fb22 	bl	11c2c <tx_start>
	__asm__ volatile(
    85e8:	f384 8811 	msr	BASEPRI, r4
    85ec:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    85f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85f2:	bf00      	nop
    85f4:	20002974 	.word	0x20002974

000085f8 <nrfx_gppi_event_endpoint_setup>:
{
    85f8:	b570      	push	{r4, r5, r6, lr}
    85fa:	4604      	mov	r4, r0
    NRFX_ASSERT(eep);
    85fc:	460d      	mov	r5, r1
    85fe:	b121      	cbz	r1, 860a <nrfx_gppi_event_endpoint_setup+0x12>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    8600:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    8604:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
    8608:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(eep);
    860a:	4e07      	ldr	r6, [pc, #28]	; (8628 <nrfx_gppi_event_endpoint_setup+0x30>)
    860c:	f44f 7312 	mov.w	r3, #584	; 0x248
    8610:	4632      	mov	r2, r6
    8612:	4906      	ldr	r1, [pc, #24]	; (862c <nrfx_gppi_event_endpoint_setup+0x34>)
    8614:	4806      	ldr	r0, [pc, #24]	; (8630 <nrfx_gppi_event_endpoint_setup+0x38>)
    8616:	f008 f88f 	bl	10738 <assert_print>
    861a:	f44f 7112 	mov.w	r1, #584	; 0x248
    861e:	4630      	mov	r0, r6
    8620:	f008 f883 	bl	1072a <assert_post_action>
    8624:	e7ec      	b.n	8600 <nrfx_gppi_event_endpoint_setup+0x8>
    8626:	bf00      	nop
    8628:	00014260 	.word	0x00014260
    862c:	00014298 	.word	0x00014298
    8630:	00013d44 	.word	0x00013d44

00008634 <nrfx_gppi_task_endpoint_setup>:
{
    8634:	b570      	push	{r4, r5, r6, lr}
    8636:	4604      	mov	r4, r0
    NRFX_ASSERT(tep);
    8638:	460d      	mov	r5, r1
    863a:	b121      	cbz	r1, 8646 <nrfx_gppi_task_endpoint_setup+0x12>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    863c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    8640:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
    8644:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(tep);
    8646:	4e07      	ldr	r6, [pc, #28]	; (8664 <nrfx_gppi_task_endpoint_setup+0x30>)
    8648:	f240 234e 	movw	r3, #590	; 0x24e
    864c:	4632      	mov	r2, r6
    864e:	4906      	ldr	r1, [pc, #24]	; (8668 <nrfx_gppi_task_endpoint_setup+0x34>)
    8650:	4806      	ldr	r0, [pc, #24]	; (866c <nrfx_gppi_task_endpoint_setup+0x38>)
    8652:	f008 f871 	bl	10738 <assert_print>
    8656:	f240 214e 	movw	r1, #590	; 0x24e
    865a:	4630      	mov	r0, r6
    865c:	f008 f865 	bl	1072a <assert_post_action>
    8660:	e7ec      	b.n	863c <nrfx_gppi_task_endpoint_setup+0x8>
    8662:	bf00      	nop
    8664:	00014260 	.word	0x00014260
    8668:	0001429c 	.word	0x0001429c
    866c:	00013d44 	.word	0x00013d44

00008670 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    8670:	b5f0      	push	{r4, r5, r6, r7, lr}
    8672:	b089      	sub	sp, #36	; 0x24
    8674:	4605      	mov	r5, r0
    8676:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    8678:	f101 0018 	add.w	r0, r1, #24
    867c:	f001 fa6e 	bl	9b5c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    8680:	4b1f      	ldr	r3, [pc, #124]	; (8700 <endtx_stoptx_ppi_init+0x90>)
    8682:	4298      	cmp	r0, r3
    8684:	d114      	bne.n	86b0 <endtx_stoptx_ppi_init+0x40>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    8686:	7e26      	ldrb	r6, [r4, #24]
    return (uint32_t)p_reg + (uint32_t)task;
    8688:	f105 070c 	add.w	r7, r5, #12
    nrfx_gppi_event_endpoint_setup(channel, eep);
    868c:	f505 7190 	add.w	r1, r5, #288	; 0x120
    8690:	4630      	mov	r0, r6
    8692:	f7ff ffb1 	bl	85f8 <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
    8696:	4639      	mov	r1, r7
    8698:	4630      	mov	r0, r6
    869a:	f7ff ffcb 	bl	8634 <nrfx_gppi_task_endpoint_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    869e:	7e22      	ldrb	r2, [r4, #24]
    86a0:	2301      	movs	r3, #1
    86a2:	4093      	lsls	r3, r2
    86a4:	4a17      	ldr	r2, [pc, #92]	; (8704 <endtx_stoptx_ppi_init+0x94>)
    86a6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    86aa:	2000      	movs	r0, #0
}
    86ac:	b009      	add	sp, #36	; 0x24
    86ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    86b0:	4b15      	ldr	r3, [pc, #84]	; (8708 <endtx_stoptx_ppi_init+0x98>)
    86b2:	9307      	str	r3, [sp, #28]
    86b4:	2302      	movs	r3, #2
    86b6:	f88d 3004 	strb.w	r3, [sp, #4]
    86ba:	2300      	movs	r3, #0
    86bc:	f88d 3005 	strb.w	r3, [sp, #5]
    86c0:	f88d 3006 	strb.w	r3, [sp, #6]
    86c4:	f88d 3007 	strb.w	r3, [sp, #7]
    86c8:	9a01      	ldr	r2, [sp, #4]
    86ca:	9206      	str	r2, [sp, #24]
    86cc:	4619      	mov	r1, r3
    86ce:	f363 0100 	bfi	r1, r3, #0, #1
    86d2:	f363 0141 	bfi	r1, r3, #1, #1
    86d6:	f363 0182 	bfi	r1, r3, #2, #1
    86da:	f363 01c5 	bfi	r1, r3, #3, #3
    86de:	2201      	movs	r2, #1
    86e0:	f362 1188 	bfi	r1, r2, #6, #3
    86e4:	2208      	movs	r2, #8
    86e6:	f362 2152 	bfi	r1, r2, #9, #10
    86ea:	f363 41de 	bfi	r1, r3, #19, #12
    86ee:	f363 71df 	bfi	r1, r3, #31, #1
    86f2:	aa06      	add	r2, sp, #24
    86f4:	4805      	ldr	r0, [pc, #20]	; (870c <endtx_stoptx_ppi_init+0x9c>)
    86f6:	f7fa ffb7 	bl	3668 <z_impl_z_log_msg_static_create>
		return -EIO;
    86fa:	f06f 0004 	mvn.w	r0, #4
    86fe:	e7d5      	b.n	86ac <endtx_stoptx_ppi_init+0x3c>
    8700:	0bad0000 	.word	0x0bad0000
    8704:	50017000 	.word	0x50017000
    8708:	00015ad0 	.word	0x00015ad0
    870c:	00013ae4 	.word	0x00013ae4

00008710 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8710:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    8714:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8718:	4b01      	ldr	r3, [pc, #4]	; (8720 <set_comparator+0x10>)
    871a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    871e:	4770      	bx	lr
    8720:	50015000 	.word	0x50015000

00008724 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    8724:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8728:	4b01      	ldr	r3, [pc, #4]	; (8730 <get_comparator+0xc>)
    872a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    872e:	4770      	bx	lr
    8730:	50015000 	.word	0x50015000

00008734 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8738:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    873a:	4a02      	ldr	r2, [pc, #8]	; (8744 <event_enable+0x10>)
    873c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    8740:	4770      	bx	lr
    8742:	bf00      	nop
    8744:	50015000 	.word	0x50015000

00008748 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    874c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    874e:	4a02      	ldr	r2, [pc, #8]	; (8758 <event_disable+0x10>)
    8750:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    8754:	4770      	bx	lr
    8756:	bf00      	nop
    8758:	50015000 	.word	0x50015000

0000875c <counter>:
     return p_reg->COUNTER;
    875c:	4b01      	ldr	r3, [pc, #4]	; (8764 <counter+0x8>)
    875e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    8762:	4770      	bx	lr
    8764:	50015000 	.word	0x50015000

00008768 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    8768:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    876a:	2301      	movs	r3, #1
    876c:	4083      	lsls	r3, r0
    876e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8772:	4a0c      	ldr	r2, [pc, #48]	; (87a4 <compare_int_lock+0x3c>)
    8774:	e8d2 1fef 	ldaex	r1, [r2]
    8778:	ea01 0e0c 	and.w	lr, r1, ip
    877c:	e8c2 efe4 	stlex	r4, lr, [r2]
    8780:	2c00      	cmp	r4, #0
    8782:	d1f7      	bne.n	8774 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8784:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8788:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    878a:	4807      	ldr	r0, [pc, #28]	; (87a8 <compare_int_lock+0x40>)
    878c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    8790:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8794:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    8798:	420b      	tst	r3, r1
}
    879a:	bf14      	ite	ne
    879c:	2001      	movne	r0, #1
    879e:	2000      	moveq	r0, #0
    87a0:	bd10      	pop	{r4, pc}
    87a2:	bf00      	nop
    87a4:	20002164 	.word	0x20002164
    87a8:	50015000 	.word	0x50015000

000087ac <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    87ac:	b538      	push	{r3, r4, r5, lr}
    87ae:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    87b0:	f009 fb32 	bl	11e18 <full_int_lock>
    87b4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    87b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    87ba:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    87bc:	4a14      	ldr	r2, [pc, #80]	; (8810 <channel_processing_check_and_clear+0x64>)
    87be:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    87c2:	4213      	tst	r3, r2
    87c4:	d105      	bne.n	87d2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    87c6:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    87c8:	4628      	mov	r0, r5
    87ca:	f009 fb2e 	bl	11e2a <full_int_unlock>

	return result;
}
    87ce:	4620      	mov	r0, r4
    87d0:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    87d2:	2301      	movs	r3, #1
    87d4:	40a3      	lsls	r3, r4
    87d6:	43db      	mvns	r3, r3
    87d8:	4a0e      	ldr	r2, [pc, #56]	; (8814 <channel_processing_check_and_clear+0x68>)
    87da:	e8d2 1fef 	ldaex	r1, [r2]
    87de:	ea01 0003 	and.w	r0, r1, r3
    87e2:	e8c2 0fec 	stlex	ip, r0, [r2]
    87e6:	f1bc 0f00 	cmp.w	ip, #0
    87ea:	d1f6      	bne.n	87da <channel_processing_check_and_clear+0x2e>
    87ec:	b949      	cbnz	r1, 8802 <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    87ee:	f104 0350 	add.w	r3, r4, #80	; 0x50
    87f2:	009b      	lsls	r3, r3, #2
    87f4:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    87f6:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    87fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    87fe:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8800:	b123      	cbz	r3, 880c <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    8802:	4620      	mov	r0, r4
    8804:	f009 faf9 	bl	11dfa <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8808:	2401      	movs	r4, #1
    880a:	e7dd      	b.n	87c8 <channel_processing_check_and_clear+0x1c>
    880c:	2400      	movs	r4, #0
    880e:	e7db      	b.n	87c8 <channel_processing_check_and_clear+0x1c>
    8810:	50015000 	.word	0x50015000
    8814:	2000215c 	.word	0x2000215c

00008818 <compare_int_unlock>:
	if (key) {
    8818:	b901      	cbnz	r1, 881c <compare_int_unlock+0x4>
}
    881a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    881c:	2301      	movs	r3, #1
    881e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8820:	4a0d      	ldr	r2, [pc, #52]	; (8858 <compare_int_unlock+0x40>)
    8822:	e8d2 cfef 	ldaex	ip, [r2]
    8826:	ea4c 0c03 	orr.w	ip, ip, r3
    882a:	e8c2 cfe1 	stlex	r1, ip, [r2]
    882e:	2900      	cmp	r1, #0
    8830:	d1f7      	bne.n	8822 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8836:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    8838:	4a08      	ldr	r2, [pc, #32]	; (885c <compare_int_unlock+0x44>)
    883a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    883e:	4b08      	ldr	r3, [pc, #32]	; (8860 <compare_int_unlock+0x48>)
    8840:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8844:	40c3      	lsrs	r3, r0
    8846:	f013 0f01 	tst.w	r3, #1
    884a:	d0e6      	beq.n	881a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    884c:	4b05      	ldr	r3, [pc, #20]	; (8864 <compare_int_unlock+0x4c>)
    884e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    8852:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    8856:	e7e0      	b.n	881a <compare_int_unlock+0x2>
    8858:	20002164 	.word	0x20002164
    885c:	50015000 	.word	0x50015000
    8860:	2000215c 	.word	0x2000215c
    8864:	e000e100 	.word	0xe000e100

00008868 <sys_clock_timeout_handler>:
{
    8868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    886c:	4607      	mov	r7, r0
    886e:	4614      	mov	r4, r2
    8870:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    8872:	4610      	mov	r0, r2
    8874:	4619      	mov	r1, r3
    8876:	f009 facc 	bl	11e12 <absolute_time_to_cc>
    887a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    887c:	4b15      	ldr	r3, [pc, #84]	; (88d4 <sys_clock_timeout_handler+0x6c>)
    887e:	681a      	ldr	r2, [r3, #0]
    8880:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    8882:	601c      	str	r4, [r3, #0]
    8884:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    8886:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    888a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    888e:	d309      	bcc.n	88a4 <sys_clock_timeout_handler+0x3c>
	return false;
    8890:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    8892:	f006 fcbb 	bl	f20c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    8896:	4638      	mov	r0, r7
    8898:	f7ff ff44 	bl	8724 <get_comparator>
    889c:	42a8      	cmp	r0, r5
    889e:	d00e      	beq.n	88be <sys_clock_timeout_handler+0x56>
}
    88a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    88a4:	4b0c      	ldr	r3, [pc, #48]	; (88d8 <sys_clock_timeout_handler+0x70>)
    88a6:	681b      	ldr	r3, [r3, #0]
    88a8:	0a1a      	lsrs	r2, r3, #8
    88aa:	061b      	lsls	r3, r3, #24
    88ac:	eb15 0803 	adds.w	r8, r5, r3
    88b0:	f142 0900 	adc.w	r9, r2, #0
    88b4:	4b09      	ldr	r3, [pc, #36]	; (88dc <sys_clock_timeout_handler+0x74>)
    88b6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    88ba:	2401      	movs	r4, #1
    88bc:	e7e9      	b.n	8892 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    88be:	b11c      	cbz	r4, 88c8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    88c0:	4638      	mov	r0, r7
    88c2:	f7ff ff37 	bl	8734 <event_enable>
}
    88c6:	e7eb      	b.n	88a0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    88c8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    88cc:	4638      	mov	r0, r7
    88ce:	f7ff ff1f 	bl	8710 <set_comparator>
    88d2:	e7f5      	b.n	88c0 <sys_clock_timeout_handler+0x58>
    88d4:	20001788 	.word	0x20001788
    88d8:	20002168 	.word	0x20002168
    88dc:	20001790 	.word	0x20001790

000088e0 <z_nrf_rtc_timer_compare_evt_address_get>:
{
    88e0:	b538      	push	{r3, r4, r5, lr}
    88e2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    88e4:	2801      	cmp	r0, #1
    88e6:	dc04      	bgt.n	88f2 <z_nrf_rtc_timer_compare_evt_address_get+0x12>
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    88e8:	b2e4      	uxtb	r4, r4
    88ea:	00a4      	lsls	r4, r4, #2
}
    88ec:	4807      	ldr	r0, [pc, #28]	; (890c <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
    88ee:	4420      	add	r0, r4
    88f0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    88f2:	4d07      	ldr	r5, [pc, #28]	; (8910 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
    88f4:	237a      	movs	r3, #122	; 0x7a
    88f6:	462a      	mov	r2, r5
    88f8:	4906      	ldr	r1, [pc, #24]	; (8914 <z_nrf_rtc_timer_compare_evt_address_get+0x34>)
    88fa:	4807      	ldr	r0, [pc, #28]	; (8918 <z_nrf_rtc_timer_compare_evt_address_get+0x38>)
    88fc:	f007 ff1c 	bl	10738 <assert_print>
    8900:	217a      	movs	r1, #122	; 0x7a
    8902:	4628      	mov	r0, r5
    8904:	f007 ff11 	bl	1072a <assert_post_action>
    8908:	e7ee      	b.n	88e8 <z_nrf_rtc_timer_compare_evt_address_get+0x8>
    890a:	bf00      	nop
    890c:	50015140 	.word	0x50015140
    8910:	00015b54 	.word	0x00015b54
    8914:	00015b90 	.word	0x00015b90
    8918:	00013d44 	.word	0x00013d44

0000891c <z_nrf_rtc_timer_capture_task_address_get>:
{
    891c:	b538      	push	{r3, r4, r5, lr}
    891e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    8920:	2801      	cmp	r0, #1
    8922:	dc09      	bgt.n	8938 <z_nrf_rtc_timer_capture_task_address_get+0x1c>
	if (chan == 0) {
    8924:	b1a4      	cbz	r4, 8950 <z_nrf_rtc_timer_capture_task_address_get+0x34>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
    8926:	f104 0010 	add.w	r0, r4, #16
    892a:	0080      	lsls	r0, r0, #2
    892c:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
    892e:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
    8932:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
}
    8936:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    8938:	4d06      	ldr	r5, [pc, #24]	; (8954 <z_nrf_rtc_timer_capture_task_address_get+0x38>)
    893a:	2381      	movs	r3, #129	; 0x81
    893c:	462a      	mov	r2, r5
    893e:	4906      	ldr	r1, [pc, #24]	; (8958 <z_nrf_rtc_timer_capture_task_address_get+0x3c>)
    8940:	4806      	ldr	r0, [pc, #24]	; (895c <z_nrf_rtc_timer_capture_task_address_get+0x40>)
    8942:	f007 fef9 	bl	10738 <assert_print>
    8946:	2181      	movs	r1, #129	; 0x81
    8948:	4628      	mov	r0, r5
    894a:	f007 feee 	bl	1072a <assert_post_action>
    894e:	e7e9      	b.n	8924 <z_nrf_rtc_timer_capture_task_address_get+0x8>
		return 0;
    8950:	2000      	movs	r0, #0
    8952:	e7f0      	b.n	8936 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
    8954:	00015b54 	.word	0x00015b54
    8958:	00015b90 	.word	0x00015b90
    895c:	00013d44 	.word	0x00013d44

00008960 <z_nrf_rtc_timer_compare_read>:
{
    8960:	b538      	push	{r3, r4, r5, lr}
    8962:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    8964:	2801      	cmp	r0, #1
    8966:	dc05      	bgt.n	8974 <z_nrf_rtc_timer_compare_read+0x14>
    return p_reg->CC[ch];
    8968:	f504 74a8 	add.w	r4, r4, #336	; 0x150
    896c:	4b07      	ldr	r3, [pc, #28]	; (898c <z_nrf_rtc_timer_compare_read+0x2c>)
    896e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    8972:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
    8974:	4d06      	ldr	r5, [pc, #24]	; (8990 <z_nrf_rtc_timer_compare_read+0x30>)
    8976:	23b7      	movs	r3, #183	; 0xb7
    8978:	462a      	mov	r2, r5
    897a:	4906      	ldr	r1, [pc, #24]	; (8994 <z_nrf_rtc_timer_compare_read+0x34>)
    897c:	4806      	ldr	r0, [pc, #24]	; (8998 <z_nrf_rtc_timer_compare_read+0x38>)
    897e:	f007 fedb 	bl	10738 <assert_print>
    8982:	21b7      	movs	r1, #183	; 0xb7
    8984:	4628      	mov	r0, r5
    8986:	f007 fed0 	bl	1072a <assert_post_action>
    898a:	e7ed      	b.n	8968 <z_nrf_rtc_timer_compare_read+0x8>
    898c:	50015000 	.word	0x50015000
    8990:	00015b54 	.word	0x00015b54
    8994:	00015b90 	.word	0x00015b90
    8998:	00013d44 	.word	0x00013d44

0000899c <z_nrf_rtc_timer_read>:
{
    899c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    899e:	4b0d      	ldr	r3, [pc, #52]	; (89d4 <z_nrf_rtc_timer_read+0x38>)
    89a0:	681c      	ldr	r4, [r3, #0]
    89a2:	0a25      	lsrs	r5, r4, #8
    89a4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    89a6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    89aa:	f7ff fed7 	bl	875c <counter>
    89ae:	4603      	mov	r3, r0
	val += cntr;
    89b0:	1900      	adds	r0, r0, r4
    89b2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    89b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    89ba:	d20a      	bcs.n	89d2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    89bc:	4b06      	ldr	r3, [pc, #24]	; (89d8 <z_nrf_rtc_timer_read+0x3c>)
    89be:	e9d3 2300 	ldrd	r2, r3, [r3]
    89c2:	4290      	cmp	r0, r2
    89c4:	eb71 0303 	sbcs.w	r3, r1, r3
    89c8:	d203      	bcs.n	89d2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    89ca:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    89ce:	f141 0100 	adc.w	r1, r1, #0
}
    89d2:	bd38      	pop	{r3, r4, r5, pc}
    89d4:	20002168 	.word	0x20002168
    89d8:	20001790 	.word	0x20001790

000089dc <compare_set_nolocks>:
{
    89dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89de:	4606      	mov	r6, r0
    89e0:	4614      	mov	r4, r2
    89e2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    89e4:	4610      	mov	r0, r2
    89e6:	4619      	mov	r1, r3
    89e8:	f009 fa13 	bl	11e12 <absolute_time_to_cc>
    89ec:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    89ee:	f7ff ffd5 	bl	899c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    89f2:	42a0      	cmp	r0, r4
    89f4:	eb71 0305 	sbcs.w	r3, r1, r5
    89f8:	d21d      	bcs.n	8a36 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    89fa:	1a20      	subs	r0, r4, r0
    89fc:	eb65 0101 	sbc.w	r1, r5, r1
    8a00:	4b19      	ldr	r3, [pc, #100]	; (8a68 <compare_set_nolocks+0x8c>)
    8a02:	4298      	cmp	r0, r3
    8a04:	f171 0100 	sbcs.w	r1, r1, #0
    8a08:	d22b      	bcs.n	8a62 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    8a0a:	4b18      	ldr	r3, [pc, #96]	; (8a6c <compare_set_nolocks+0x90>)
    8a0c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    8a10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    8a14:	42ab      	cmp	r3, r5
    8a16:	bf08      	it	eq
    8a18:	42a2      	cmpeq	r2, r4
    8a1a:	d016      	beq.n	8a4a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    8a1c:	4639      	mov	r1, r7
    8a1e:	4630      	mov	r0, r6
    8a20:	f009 fa08 	bl	11e34 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    8a24:	4639      	mov	r1, r7
    8a26:	f009 f9e4 	bl	11df2 <counter_sub>
    8a2a:	1900      	adds	r0, r0, r4
    8a2c:	f145 0300 	adc.w	r3, r5, #0
    8a30:	4604      	mov	r4, r0
    8a32:	461d      	mov	r5, r3
    8a34:	e009      	b.n	8a4a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    8a36:	2301      	movs	r3, #1
    8a38:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8a3a:	4a0d      	ldr	r2, [pc, #52]	; (8a70 <compare_set_nolocks+0x94>)
    8a3c:	e8d2 0fef 	ldaex	r0, [r2]
    8a40:	4318      	orrs	r0, r3
    8a42:	e8c2 0fe1 	stlex	r1, r0, [r2]
    8a46:	2900      	cmp	r1, #0
    8a48:	d1f8      	bne.n	8a3c <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    8a4a:	4b08      	ldr	r3, [pc, #32]	; (8a6c <compare_set_nolocks+0x90>)
    8a4c:	0132      	lsls	r2, r6, #4
    8a4e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    8a52:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    8a56:	9906      	ldr	r1, [sp, #24]
    8a58:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    8a5a:	9b07      	ldr	r3, [sp, #28]
    8a5c:	6073      	str	r3, [r6, #4]
	return ret;
    8a5e:	2000      	movs	r0, #0
}
    8a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    8a62:	f06f 0015 	mvn.w	r0, #21
    8a66:	e7fb      	b.n	8a60 <compare_set_nolocks+0x84>
    8a68:	01000001 	.word	0x01000001
    8a6c:	20001768 	.word	0x20001768
    8a70:	2000215c 	.word	0x2000215c

00008a74 <z_nrf_rtc_timer_set>:
{
    8a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a76:	b083      	sub	sp, #12
    8a78:	4615      	mov	r5, r2
    8a7a:	461c      	mov	r4, r3
	__ASSERT_NO_MSG(chan && chan < CHAN_COUNT);
    8a7c:	4606      	mov	r6, r0
    8a7e:	b108      	cbz	r0, 8a84 <z_nrf_rtc_timer_set+0x10>
    8a80:	2801      	cmp	r0, #1
    8a82:	dd0c      	ble.n	8a9e <z_nrf_rtc_timer_set+0x2a>
    8a84:	4f0b      	ldr	r7, [pc, #44]	; (8ab4 <z_nrf_rtc_timer_set+0x40>)
    8a86:	f44f 73a6 	mov.w	r3, #332	; 0x14c
    8a8a:	463a      	mov	r2, r7
    8a8c:	490a      	ldr	r1, [pc, #40]	; (8ab8 <z_nrf_rtc_timer_set+0x44>)
    8a8e:	480b      	ldr	r0, [pc, #44]	; (8abc <z_nrf_rtc_timer_set+0x48>)
    8a90:	f007 fe52 	bl	10738 <assert_print>
    8a94:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    8a98:	4638      	mov	r0, r7
    8a9a:	f007 fe46 	bl	1072a <assert_post_action>
	return compare_set(chan, target_time, handler, user_data);
    8a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8aa0:	9301      	str	r3, [sp, #4]
    8aa2:	9b08      	ldr	r3, [sp, #32]
    8aa4:	9300      	str	r3, [sp, #0]
    8aa6:	462a      	mov	r2, r5
    8aa8:	4623      	mov	r3, r4
    8aaa:	4630      	mov	r0, r6
    8aac:	f009 f9fd 	bl	11eaa <compare_set>
}
    8ab0:	b003      	add	sp, #12
    8ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ab4:	00015b54 	.word	0x00015b54
    8ab8:	00015b88 	.word	0x00015b88
    8abc:	00013d44 	.word	0x00013d44

00008ac0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    8ac0:	b530      	push	{r4, r5, lr}
    8ac2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    8ac4:	2300      	movs	r3, #0
    8ac6:	4a1f      	ldr	r2, [pc, #124]	; (8b44 <sys_clock_driver_init+0x84>)
    8ac8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8acc:	e00f      	b.n	8aee <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    8ace:	4a1e      	ldr	r2, [pc, #120]	; (8b48 <sys_clock_driver_init+0x88>)
    8ad0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    8ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8adc:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8ae0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8ae4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    8ae6:	4917      	ldr	r1, [pc, #92]	; (8b44 <sys_clock_driver_init+0x84>)
    8ae8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8aec:	3301      	adds	r3, #1
    8aee:	2b01      	cmp	r3, #1
    8af0:	dded      	ble.n	8ace <sys_clock_driver_init+0xe>
    8af2:	4c14      	ldr	r4, [pc, #80]	; (8b44 <sys_clock_driver_init+0x84>)
    8af4:	2502      	movs	r5, #2
    8af6:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8afa:	4b14      	ldr	r3, [pc, #80]	; (8b4c <sys_clock_driver_init+0x8c>)
    8afc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    8b00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8b04:	2200      	movs	r2, #0
    8b06:	2101      	movs	r1, #1
    8b08:	2015      	movs	r0, #21
    8b0a:	f7fc f92d 	bl	4d68 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    8b0e:	2015      	movs	r0, #21
    8b10:	f008 fb0d 	bl	1112e <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8b14:	2301      	movs	r3, #1
    8b16:	60a3      	str	r3, [r4, #8]
    8b18:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    8b1a:	4b0d      	ldr	r3, [pc, #52]	; (8b50 <sys_clock_driver_init+0x90>)
    8b1c:	2203      	movs	r2, #3
    8b1e:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    8b20:	4b0c      	ldr	r3, [pc, #48]	; (8b54 <sys_clock_driver_init+0x94>)
    8b22:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8b24:	2400      	movs	r4, #0
    8b26:	9401      	str	r4, [sp, #4]
    8b28:	4b0b      	ldr	r3, [pc, #44]	; (8b58 <sys_clock_driver_init+0x98>)
    8b2a:	9300      	str	r3, [sp, #0]
    8b2c:	4a0b      	ldr	r2, [pc, #44]	; (8b5c <sys_clock_driver_init+0x9c>)
    8b2e:	2300      	movs	r3, #0
    8b30:	4620      	mov	r0, r4
    8b32:	f009 f9ba 	bl	11eaa <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8b36:	4628      	mov	r0, r5
    8b38:	f7fd ff2a 	bl	6990 <z_nrf_clock_control_lf_on>

	return 0;
}
    8b3c:	4620      	mov	r0, r4
    8b3e:	b003      	add	sp, #12
    8b40:	bd30      	pop	{r4, r5, pc}
    8b42:	bf00      	nop
    8b44:	50015000 	.word	0x50015000
    8b48:	20001768 	.word	0x20001768
    8b4c:	e000e100 	.word	0xe000e100
    8b50:	20002164 	.word	0x20002164
    8b54:	20002160 	.word	0x20002160
    8b58:	00008869 	.word	0x00008869
    8b5c:	007fffff 	.word	0x007fffff

00008b60 <process_channel>:
{
    8b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b64:	b082      	sub	sp, #8
    8b66:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    8b68:	f7ff fe20 	bl	87ac <channel_processing_check_and_clear>
    8b6c:	b910      	cbnz	r0, 8b74 <process_channel+0x14>
}
    8b6e:	b002      	add	sp, #8
    8b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    8b74:	f7ff ff12 	bl	899c <z_nrf_rtc_timer_read>
    8b78:	4682      	mov	sl, r0
    8b7a:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    8b7c:	f009 f94c 	bl	11e18 <full_int_lock>
    8b80:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    8b82:	4b13      	ldr	r3, [pc, #76]	; (8bd0 <process_channel+0x70>)
    8b84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    8b88:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    8b8c:	45c2      	cmp	sl, r8
    8b8e:	eb75 0509 	sbcs.w	r5, r5, r9
    8b92:	d20b      	bcs.n	8bac <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    8b94:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    8b96:	4630      	mov	r0, r6
    8b98:	f009 f947 	bl	11e2a <full_int_unlock>
		if (handler) {
    8b9c:	2d00      	cmp	r5, #0
    8b9e:	d0e6      	beq.n	8b6e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    8ba0:	9700      	str	r7, [sp, #0]
    8ba2:	4642      	mov	r2, r8
    8ba4:	464b      	mov	r3, r9
    8ba6:	4620      	mov	r0, r4
    8ba8:	47a8      	blx	r5
}
    8baa:	e7e0      	b.n	8b6e <process_channel+0xe>
			handler = cc_data[chan].callback;
    8bac:	4a08      	ldr	r2, [pc, #32]	; (8bd0 <process_channel+0x70>)
    8bae:	0123      	lsls	r3, r4, #4
    8bb0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8bb4:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    8bb6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    8bb8:	2000      	movs	r0, #0
    8bba:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    8bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8bc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    8bc8:	4620      	mov	r0, r4
    8bca:	f7ff fdbd 	bl	8748 <event_disable>
    8bce:	e7e2      	b.n	8b96 <process_channel+0x36>
    8bd0:	20001768 	.word	0x20001768

00008bd4 <rtc_nrf_isr>:
{
    8bd4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    8bd6:	4b0e      	ldr	r3, [pc, #56]	; (8c10 <rtc_nrf_isr+0x3c>)
    8bd8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8bdc:	f013 0f02 	tst.w	r3, #2
    8be0:	d00d      	beq.n	8bfe <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8be2:	4b0b      	ldr	r3, [pc, #44]	; (8c10 <rtc_nrf_isr+0x3c>)
    8be4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8be8:	b14b      	cbz	r3, 8bfe <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8bea:	4b09      	ldr	r3, [pc, #36]	; (8c10 <rtc_nrf_isr+0x3c>)
    8bec:	2200      	movs	r2, #0
    8bee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8bf2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    8bf6:	4a07      	ldr	r2, [pc, #28]	; (8c14 <rtc_nrf_isr+0x40>)
    8bf8:	6813      	ldr	r3, [r2, #0]
    8bfa:	3301      	adds	r3, #1
    8bfc:	6013      	str	r3, [r2, #0]
{
    8bfe:	2400      	movs	r4, #0
    8c00:	e003      	b.n	8c0a <rtc_nrf_isr+0x36>
		process_channel(chan);
    8c02:	4620      	mov	r0, r4
    8c04:	f7ff ffac 	bl	8b60 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8c08:	3401      	adds	r4, #1
    8c0a:	2c01      	cmp	r4, #1
    8c0c:	ddf9      	ble.n	8c02 <rtc_nrf_isr+0x2e>
}
    8c0e:	bd10      	pop	{r4, pc}
    8c10:	50015000 	.word	0x50015000
    8c14:	20002168 	.word	0x20002168

00008c18 <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    8c18:	4b12      	ldr	r3, [pc, #72]	; (8c64 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    8c1a:	6818      	ldr	r0, [r3, #0]
    8c1c:	b1f0      	cbz	r0, 8c5c <z_nrf_rtc_timer_chan_alloc+0x44>
{
    8c1e:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    8c20:	fab0 f080 	clz	r0, r0
    8c24:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    8c28:	2301      	movs	r3, #1
    8c2a:	4083      	lsls	r3, r0
    8c2c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8c2e:	490d      	ldr	r1, [pc, #52]	; (8c64 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    8c30:	e8d1 2fef 	ldaex	r2, [r1]
    8c34:	ea02 0c03 	and.w	ip, r2, r3
    8c38:	e8c1 cfee 	stlex	lr, ip, [r1]
    8c3c:	f1be 0f00 	cmp.w	lr, #0
    8c40:	d1f6      	bne.n	8c30 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    8c42:	fa22 f300 	lsr.w	r3, r2, r0
    8c46:	f013 0f01 	tst.w	r3, #1
    8c4a:	d105      	bne.n	8c58 <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    8c4c:	4b05      	ldr	r3, [pc, #20]	; (8c64 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    8c4e:	6818      	ldr	r0, [r3, #0]
    8c50:	2800      	cmp	r0, #0
    8c52:	d1e5      	bne.n	8c20 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
    8c54:	f06f 000b 	mvn.w	r0, #11
}
    8c58:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
    8c5c:	f06f 000b 	mvn.w	r0, #11
}
    8c60:	4770      	bx	lr
    8c62:	bf00      	nop
    8c64:	20002160 	.word	0x20002160

00008c68 <z_nrf_rtc_timer_chan_free>:
{
    8c68:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(chan && chan < CHAN_COUNT);
    8c6a:	4604      	mov	r4, r0
    8c6c:	b108      	cbz	r0, 8c72 <z_nrf_rtc_timer_chan_free+0xa>
    8c6e:	2801      	cmp	r0, #1
    8c70:	dd0c      	ble.n	8c8c <z_nrf_rtc_timer_chan_free+0x24>
    8c72:	4d0c      	ldr	r5, [pc, #48]	; (8ca4 <z_nrf_rtc_timer_chan_free+0x3c>)
    8c74:	f240 231a 	movw	r3, #538	; 0x21a
    8c78:	462a      	mov	r2, r5
    8c7a:	490b      	ldr	r1, [pc, #44]	; (8ca8 <z_nrf_rtc_timer_chan_free+0x40>)
    8c7c:	480b      	ldr	r0, [pc, #44]	; (8cac <z_nrf_rtc_timer_chan_free+0x44>)
    8c7e:	f007 fd5b 	bl	10738 <assert_print>
    8c82:	f240 211a 	movw	r1, #538	; 0x21a
    8c86:	4628      	mov	r0, r5
    8c88:	f007 fd4f 	bl	1072a <assert_post_action>
	atomic_or(&alloc_mask, BIT(chan));
    8c8c:	2301      	movs	r3, #1
    8c8e:	40a3      	lsls	r3, r4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8c90:	4a07      	ldr	r2, [pc, #28]	; (8cb0 <z_nrf_rtc_timer_chan_free+0x48>)
    8c92:	e8d2 0fef 	ldaex	r0, [r2]
    8c96:	4318      	orrs	r0, r3
    8c98:	e8c2 0fe1 	stlex	r1, r0, [r2]
    8c9c:	2900      	cmp	r1, #0
    8c9e:	d1f8      	bne.n	8c92 <z_nrf_rtc_timer_chan_free+0x2a>
}
    8ca0:	bd38      	pop	{r3, r4, r5, pc}
    8ca2:	bf00      	nop
    8ca4:	00015b54 	.word	0x00015b54
    8ca8:	00015b88 	.word	0x00015b88
    8cac:	00013d44 	.word	0x00013d44
    8cb0:	20002160 	.word	0x20002160

00008cb4 <sys_clock_set_timeout>:
{
    8cb4:	b510      	push	{r4, lr}
    8cb6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8cb8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8cbc:	d006      	beq.n	8ccc <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8cbe:	2801      	cmp	r0, #1
    8cc0:	dd06      	ble.n	8cd0 <sys_clock_set_timeout+0x1c>
    8cc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8cc6:	da05      	bge.n	8cd4 <sys_clock_set_timeout+0x20>
    8cc8:	1e44      	subs	r4, r0, #1
    8cca:	e004      	b.n	8cd6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8ccc:	480f      	ldr	r0, [pc, #60]	; (8d0c <sys_clock_set_timeout+0x58>)
    8cce:	e7f8      	b.n	8cc2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8cd0:	2400      	movs	r4, #0
    8cd2:	e000      	b.n	8cd6 <sys_clock_set_timeout+0x22>
    8cd4:	4c0d      	ldr	r4, [pc, #52]	; (8d0c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8cd6:	f7ff fe61 	bl	899c <z_nrf_rtc_timer_read>
    8cda:	4b0d      	ldr	r3, [pc, #52]	; (8d10 <sys_clock_set_timeout+0x5c>)
    8cdc:	681a      	ldr	r2, [r3, #0]
    8cde:	685b      	ldr	r3, [r3, #4]
    8ce0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    8ce2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8ce6:	d300      	bcc.n	8cea <sys_clock_set_timeout+0x36>
		ticks = 0;
    8ce8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    8cea:	4420      	add	r0, r4
    8cec:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    8cee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8cf2:	d300      	bcc.n	8cf6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    8cf4:	4905      	ldr	r1, [pc, #20]	; (8d0c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    8cf6:	2000      	movs	r0, #0
    8cf8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    8cfa:	9001      	str	r0, [sp, #4]
    8cfc:	4905      	ldr	r1, [pc, #20]	; (8d14 <sys_clock_set_timeout+0x60>)
    8cfe:	9100      	str	r1, [sp, #0]
    8d00:	f143 0300 	adc.w	r3, r3, #0
    8d04:	f009 f8d1 	bl	11eaa <compare_set>
}
    8d08:	b002      	add	sp, #8
    8d0a:	bd10      	pop	{r4, pc}
    8d0c:	007fffff 	.word	0x007fffff
    8d10:	20001788 	.word	0x20001788
    8d14:	00008869 	.word	0x00008869

00008d18 <sys_clock_elapsed>:
{
    8d18:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    8d1a:	f7ff fe3f 	bl	899c <z_nrf_rtc_timer_read>
    8d1e:	4b02      	ldr	r3, [pc, #8]	; (8d28 <sys_clock_elapsed+0x10>)
    8d20:	681b      	ldr	r3, [r3, #0]
}
    8d22:	1ac0      	subs	r0, r0, r3
    8d24:	bd08      	pop	{r3, pc}
    8d26:	bf00      	nop
    8d28:	20001788 	.word	0x20001788

00008d2c <nrf_gpio_pin_port_decode>:
{
    8d2c:	b538      	push	{r3, r4, r5, lr}
    8d2e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8d30:	6800      	ldr	r0, [r0, #0]
    8d32:	f009 f8f1 	bl	11f18 <nrf_gpio_pin_present_check>
    8d36:	b1b0      	cbz	r0, 8d66 <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    8d38:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    8d3a:	f003 021f 	and.w	r2, r3, #31
    8d3e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d40:	095b      	lsrs	r3, r3, #5
    8d42:	d01e      	beq.n	8d82 <nrf_gpio_pin_port_decode+0x56>
    8d44:	2b01      	cmp	r3, #1
    8d46:	d01e      	beq.n	8d86 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    8d48:	4c10      	ldr	r4, [pc, #64]	; (8d8c <nrf_gpio_pin_port_decode+0x60>)
    8d4a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    8d4e:	4622      	mov	r2, r4
    8d50:	490f      	ldr	r1, [pc, #60]	; (8d90 <nrf_gpio_pin_port_decode+0x64>)
    8d52:	4810      	ldr	r0, [pc, #64]	; (8d94 <nrf_gpio_pin_port_decode+0x68>)
    8d54:	f007 fcf0 	bl	10738 <assert_print>
    8d58:	f44f 7113 	mov.w	r1, #588	; 0x24c
    8d5c:	4620      	mov	r0, r4
    8d5e:	f007 fce4 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    8d62:	480d      	ldr	r0, [pc, #52]	; (8d98 <nrf_gpio_pin_port_decode+0x6c>)
    8d64:	e010      	b.n	8d88 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8d66:	4d09      	ldr	r5, [pc, #36]	; (8d8c <nrf_gpio_pin_port_decode+0x60>)
    8d68:	f240 2347 	movw	r3, #583	; 0x247
    8d6c:	462a      	mov	r2, r5
    8d6e:	490b      	ldr	r1, [pc, #44]	; (8d9c <nrf_gpio_pin_port_decode+0x70>)
    8d70:	4808      	ldr	r0, [pc, #32]	; (8d94 <nrf_gpio_pin_port_decode+0x68>)
    8d72:	f007 fce1 	bl	10738 <assert_print>
    8d76:	f240 2147 	movw	r1, #583	; 0x247
    8d7a:	4628      	mov	r0, r5
    8d7c:	f007 fcd5 	bl	1072a <assert_post_action>
    8d80:	e7da      	b.n	8d38 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    8d82:	4805      	ldr	r0, [pc, #20]	; (8d98 <nrf_gpio_pin_port_decode+0x6c>)
    8d84:	e000      	b.n	8d88 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d86:	4806      	ldr	r0, [pc, #24]	; (8da0 <nrf_gpio_pin_port_decode+0x74>)
}
    8d88:	bd38      	pop	{r3, r4, r5, pc}
    8d8a:	bf00      	nop
    8d8c:	000141c0 	.word	0x000141c0
    8d90:	000156e0 	.word	0x000156e0
    8d94:	00013d44 	.word	0x00013d44
    8d98:	50842500 	.word	0x50842500
    8d9c:	000141f4 	.word	0x000141f4
    8da0:	50842800 	.word	0x50842800

00008da4 <pinctrl_configure_pins>:
		     NRF_GPIO_PIN_NOSENSE);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    8da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8da8:	4605      	mov	r5, r0
    8daa:	460f      	mov	r7, r1
    8dac:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8dae:	2400      	movs	r4, #0
    8db0:	e012      	b.n	8dd8 <pinctrl_configure_pins+0x34>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    8db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8db6:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    8dba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
        nrf_gpio_pin_set(pin_number);
    8dbe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8dc2:	f009 f8c8 	bl	11f56 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8dc6:	4633      	mov	r3, r6
    8dc8:	2201      	movs	r2, #1
    8dca:	4611      	mov	r1, r2
    8dcc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8dd0:	f009 f8f7 	bl	11fc2 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8dd4:	3401      	adds	r4, #1
    8dd6:	b2e4      	uxtb	r4, r4
    8dd8:	42bc      	cmp	r4, r7
    8dda:	f080 815f 	bcs.w	909c <pinctrl_configure_pins+0x2f8>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    8dde:	00a0      	lsls	r0, r4, #2
    8de0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8de4:	f3c3 2603 	ubfx	r6, r3, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    8de8:	0c1a      	lsrs	r2, r3, #16
    8dea:	2a22      	cmp	r2, #34	; 0x22
    8dec:	f200 8158 	bhi.w	90a0 <pinctrl_configure_pins+0x2fc>
    8df0:	a101      	add	r1, pc, #4	; (adr r1, 8df8 <pinctrl_configure_pins+0x54>)
    8df2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    8df6:	bf00      	nop
    8df8:	00008db3 	.word	0x00008db3
    8dfc:	00008e85 	.word	0x00008e85
    8e00:	00008e9d 	.word	0x00008e9d
    8e04:	00008ec1 	.word	0x00008ec1
    8e08:	00008ed9 	.word	0x00008ed9
    8e0c:	00008efd 	.word	0x00008efd
    8e10:	00008f21 	.word	0x00008f21
    8e14:	000090a1 	.word	0x000090a1
    8e18:	000090a1 	.word	0x000090a1
    8e1c:	000090a1 	.word	0x000090a1
    8e20:	000090a1 	.word	0x000090a1
    8e24:	00008f39 	.word	0x00008f39
    8e28:	00008f53 	.word	0x00008f53
    8e2c:	000090a1 	.word	0x000090a1
    8e30:	000090a1 	.word	0x000090a1
    8e34:	000090a1 	.word	0x000090a1
    8e38:	000090a1 	.word	0x000090a1
    8e3c:	000090a1 	.word	0x000090a1
    8e40:	000090a1 	.word	0x000090a1
    8e44:	000090a1 	.word	0x000090a1
    8e48:	000090a1 	.word	0x000090a1
    8e4c:	000090a1 	.word	0x000090a1
    8e50:	00008f6d 	.word	0x00008f6d
    8e54:	00008f95 	.word	0x00008f95
    8e58:	00008fbd 	.word	0x00008fbd
    8e5c:	00008fe5 	.word	0x00008fe5
    8e60:	000090a1 	.word	0x000090a1
    8e64:	000090a1 	.word	0x000090a1
    8e68:	000090a1 	.word	0x000090a1
    8e6c:	0000900d 	.word	0x0000900d
    8e70:	00009025 	.word	0x00009025
    8e74:	0000903d 	.word	0x0000903d
    8e78:	00009055 	.word	0x00009055
    8e7c:	0000906d 	.word	0x0000906d
    8e80:	00009085 	.word	0x00009085
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    8e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8e88:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8e8c:	4633      	mov	r3, r6
    8e8e:	2200      	movs	r2, #0
    8e90:	4611      	mov	r1, r2
    8e92:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8e96:	f009 f894 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8e9a:	e79b      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    8e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8ea0:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    8ea4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8ea8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8eac:	f009 f853 	bl	11f56 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8eb0:	4633      	mov	r3, r6
    8eb2:	2201      	movs	r2, #1
    8eb4:	4611      	mov	r1, r2
    8eb6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8eba:	f009 f882 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    8ebe:	e789      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    8ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8ec4:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8ec8:	4633      	mov	r3, r6
    8eca:	2200      	movs	r2, #0
    8ecc:	4611      	mov	r1, r2
    8ece:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8ed2:	f009 f876 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8ed6:	e77d      	b.n	8dd4 <pinctrl_configure_pins+0x30>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    8ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8edc:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8ee0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
        nrf_gpio_pin_clear(pin_number);
    8ee4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8ee8:	f009 f828 	bl	11f3c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8eec:	4633      	mov	r3, r6
    8eee:	2200      	movs	r2, #0
    8ef0:	2101      	movs	r1, #1
    8ef2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8ef6:	f009 f864 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8efa:	e76b      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    8efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f00:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8f04:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8f08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f0c:	f009 f816 	bl	11f3c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8f10:	4633      	mov	r3, r6
    8f12:	2201      	movs	r2, #1
    8f14:	4611      	mov	r1, r2
    8f16:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8f1a:	f009 f852 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    8f1e:	e759      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    8f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f24:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8f28:	4633      	mov	r3, r6
    8f2a:	2200      	movs	r2, #0
    8f2c:	4611      	mov	r1, r2
    8f2e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8f32:	f009 f846 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8f36:	e74d      	b.n	8dd4 <pinctrl_configure_pins+0x30>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    8f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f3c:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    8f40:	b906      	cbnz	r6, 8f44 <pinctrl_configure_pins+0x1a0>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    8f42:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8f44:	4633      	mov	r3, r6
    8f46:	2200      	movs	r2, #0
    8f48:	4611      	mov	r1, r2
    8f4a:	5828      	ldr	r0, [r5, r0]
    8f4c:	f009 f839 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8f50:	e740      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    8f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f56:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    8f5a:	b906      	cbnz	r6, 8f5e <pinctrl_configure_pins+0x1ba>
				drive = NRF_DRIVE_S0D1;
    8f5c:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8f5e:	4633      	mov	r3, r6
    8f60:	2200      	movs	r2, #0
    8f62:	4611      	mov	r1, r2
    8f64:	5828      	ldr	r0, [r5, r0]
    8f66:	f009 f82c 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    8f6a:	e733      	b.n	8dd4 <pinctrl_configure_pins+0x30>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    8f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f70:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8f74:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8f78:	f3c0 3140 	ubfx	r1, r0, #13, #1
    8f7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f80:	f008 fff6 	bl	11f70 <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8f84:	4633      	mov	r3, r6
    8f86:	2201      	movs	r2, #1
    8f88:	4611      	mov	r1, r2
    8f8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8f8e:	f009 f818 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    8f92:	e71f      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    8f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8f98:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8f9c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8fa0:	f3c0 3140 	ubfx	r1, r0, #13, #1
    8fa4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8fa8:	f008 ffe2 	bl	11f70 <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8fac:	4633      	mov	r3, r6
    8fae:	2201      	movs	r2, #1
    8fb0:	4611      	mov	r1, r2
    8fb2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8fb6:	f009 f804 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    8fba:	e70b      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    8fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8fc0:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8fc4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8fc8:	f3c0 3140 	ubfx	r1, r0, #13, #1
    8fcc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8fd0:	f008 ffce 	bl	11f70 <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8fd4:	4633      	mov	r3, r6
    8fd6:	2201      	movs	r2, #1
    8fd8:	4611      	mov	r1, r2
    8fda:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8fde:	f008 fff0 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    8fe2:	e6f7      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    8fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8fe8:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8fec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8ff0:	f3c0 3140 	ubfx	r1, r0, #13, #1
    8ff4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8ff8:	f008 ffba 	bl	11f70 <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8ffc:	4633      	mov	r3, r6
    8ffe:	2201      	movs	r2, #1
    9000:	4611      	mov	r1, r2
    9002:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    9006:	f008 ffdc 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    900a:	e6e3      	b.n	8dd4 <pinctrl_configure_pins+0x30>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    900c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9010:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9014:	4633      	mov	r3, r6
    9016:	2201      	movs	r2, #1
    9018:	2100      	movs	r1, #0
    901a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    901e:	f008 ffd0 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    9022:	e6d7      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    9024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9028:	f8c8 3528 	str.w	r3, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    902c:	4633      	mov	r3, r6
    902e:	2201      	movs	r2, #1
    9030:	2100      	movs	r1, #0
    9032:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    9036:	f008 ffc4 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    903a:	e6cb      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    903c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9040:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9044:	4633      	mov	r3, r6
    9046:	2201      	movs	r2, #1
    9048:	2100      	movs	r1, #0
    904a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    904e:	f008 ffb8 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    9052:	e6bf      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    9054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9058:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    905c:	4633      	mov	r3, r6
    905e:	2201      	movs	r2, #1
    9060:	2100      	movs	r1, #0
    9062:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    9066:	f008 ffac 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    906a:	e6b3      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    906c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9070:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9074:	4633      	mov	r3, r6
    9076:	2201      	movs	r2, #1
    9078:	2100      	movs	r1, #0
    907a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    907e:	f008 ffa0 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    9082:	e6a7      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    9084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9088:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    908c:	4633      	mov	r3, r6
    908e:	2201      	movs	r2, #1
    9090:	2100      	movs	r1, #0
    9092:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    9096:	f008 ff94 	bl	11fc2 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    909a:	e69b      	b.n	8dd4 <pinctrl_configure_pins+0x30>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    909c:	2000      	movs	r0, #0
    909e:	e001      	b.n	90a4 <pinctrl_configure_pins+0x300>
		switch (NRF_GET_FUN(pins[i])) {
    90a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    90a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000090a8 <nrf_ipc_send_task_get>:
{
    90a8:	b538      	push	{r3, r4, r5, lr}
    90aa:	4604      	mov	r4, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
    90ac:	280f      	cmp	r0, #15
    90ae:	d803      	bhi.n	90b8 <nrf_ipc_send_task_get+0x10>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    90b0:	00a0      	lsls	r0, r4, #2
}
    90b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    90b6:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(index < IPC_CH_NUM);
    90b8:	4d06      	ldr	r5, [pc, #24]	; (90d4 <nrf_ipc_send_task_get+0x2c>)
    90ba:	f240 13e1 	movw	r3, #481	; 0x1e1
    90be:	462a      	mov	r2, r5
    90c0:	4905      	ldr	r1, [pc, #20]	; (90d8 <nrf_ipc_send_task_get+0x30>)
    90c2:	4806      	ldr	r0, [pc, #24]	; (90dc <nrf_ipc_send_task_get+0x34>)
    90c4:	f007 fb38 	bl	10738 <assert_print>
    90c8:	f240 11e1 	movw	r1, #481	; 0x1e1
    90cc:	4628      	mov	r0, r5
    90ce:	f007 fb2c 	bl	1072a <assert_post_action>
    90d2:	e7ed      	b.n	90b0 <nrf_ipc_send_task_get+0x8>
    90d4:	00014220 	.word	0x00014220
    90d8:	00014254 	.word	0x00014254
    90dc:	00013d44 	.word	0x00013d44

000090e0 <nrfx_ipc_signal>:
    NRFX_ASSERT(mem_index < NRFX_ARRAY_SIZE(NRF_IPC->GPMEM));
    return nrf_ipc_gpmem_get(NRF_IPC, mem_index);
}

NRFX_STATIC_INLINE void nrfx_ipc_signal(uint8_t send_index)
{
    90e0:	b538      	push	{r3, r4, r5, lr}
    90e2:	4604      	mov	r4, r0
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
    90e4:	280f      	cmp	r0, #15
    90e6:	d809      	bhi.n	90fc <nrfx_ipc_signal+0x1c>
    nrf_ipc_task_trigger(NRF_IPC, nrf_ipc_send_task_get(send_index));
    90e8:	4620      	mov	r0, r4
    90ea:	f7ff ffdd 	bl	90a8 <nrf_ipc_send_task_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90ee:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    90f2:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    90f6:	2301      	movs	r3, #1
    90f8:	6003      	str	r3, [r0, #0]
}
    90fa:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
    90fc:	4d05      	ldr	r5, [pc, #20]	; (9114 <nrfx_ipc_signal+0x34>)
    90fe:	23c2      	movs	r3, #194	; 0xc2
    9100:	462a      	mov	r2, r5
    9102:	4905      	ldr	r1, [pc, #20]	; (9118 <nrfx_ipc_signal+0x38>)
    9104:	4805      	ldr	r0, [pc, #20]	; (911c <nrfx_ipc_signal+0x3c>)
    9106:	f007 fb17 	bl	10738 <assert_print>
    910a:	21c2      	movs	r1, #194	; 0xc2
    910c:	4628      	mov	r0, r5
    910e:	f007 fb0c 	bl	1072a <assert_post_action>
    9112:	e7e9      	b.n	90e8 <nrfx_ipc_signal+0x8>
    9114:	00015ba0 	.word	0x00015ba0
    9118:	00015be0 	.word	0x00015be0
    911c:	00013d44 	.word	0x00013d44

00009120 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
    9120:	b530      	push	{r4, r5, lr}
    9122:	b089      	sub	sp, #36	; 0x24
    9124:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    9126:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
    9128:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    912a:	290f      	cmp	r1, #15
    912c:	d806      	bhi.n	913c <mbox_nrf_set_enabled+0x1c>
    912e:	681b      	ldr	r3, [r3, #0]
    9130:	40cb      	lsrs	r3, r1
    9132:	f013 0f01 	tst.w	r3, #1
    9136:	d11d      	bne.n	9174 <mbox_nrf_set_enabled+0x54>
    9138:	2300      	movs	r3, #0
    913a:	e000      	b.n	913e <mbox_nrf_set_enabled+0x1e>
    913c:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
    913e:	2b00      	cmp	r3, #0
    9140:	d061      	beq.n	9206 <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    9142:	b9ca      	cbnz	r2, 9178 <mbox_nrf_set_enabled+0x58>
    9144:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    9148:	40e3      	lsrs	r3, r4
    914a:	f013 0f01 	tst.w	r3, #1
    914e:	d05d      	beq.n	920c <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
    9150:	b2e0      	uxtb	r0, r4
    9152:	f001 fa21 	bl	a598 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
    9156:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    915a:	2201      	movs	r2, #1
    915c:	40a2      	lsls	r2, r4
    915e:	ea23 0302 	bic.w	r3, r3, r2
    9162:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
    9166:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    916a:	2b00      	cmp	r3, #0
    916c:	d046      	beq.n	91fc <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
    916e:	2000      	movs	r0, #0
}
    9170:	b009      	add	sp, #36	; 0x24
    9172:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    9174:	2301      	movs	r3, #1
    9176:	e7e2      	b.n	913e <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    9178:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    917c:	40e3      	lsrs	r3, r4
    917e:	f013 0f01 	tst.w	r3, #1
    9182:	d146      	bne.n	9212 <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
    9184:	2a00      	cmp	r2, #0
    9186:	d0e3      	beq.n	9150 <mbox_nrf_set_enabled+0x30>
    9188:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    918c:	b16b      	cbz	r3, 91aa <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
    918e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    9192:	b37b      	cbz	r3, 91f4 <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
    9194:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    9198:	2201      	movs	r2, #1
    919a:	40a2      	lsls	r2, r4
    919c:	4313      	orrs	r3, r2
    919e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    91a2:	b2e0      	uxtb	r0, r4
    91a4:	f001 f9d4 	bl	a550 <nrfx_ipc_receive_event_enable>
    91a8:	e7dd      	b.n	9166 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
    91aa:	4b1b      	ldr	r3, [pc, #108]	; (9218 <mbox_nrf_set_enabled+0xf8>)
    91ac:	9307      	str	r3, [sp, #28]
    91ae:	2202      	movs	r2, #2
    91b0:	f88d 2004 	strb.w	r2, [sp, #4]
    91b4:	2300      	movs	r3, #0
    91b6:	f88d 3005 	strb.w	r3, [sp, #5]
    91ba:	f88d 3006 	strb.w	r3, [sp, #6]
    91be:	f88d 3007 	strb.w	r3, [sp, #7]
    91c2:	9901      	ldr	r1, [sp, #4]
    91c4:	9106      	str	r1, [sp, #24]
    91c6:	4619      	mov	r1, r3
    91c8:	f363 0100 	bfi	r1, r3, #0, #1
    91cc:	f363 0141 	bfi	r1, r3, #1, #1
    91d0:	f363 0182 	bfi	r1, r3, #2, #1
    91d4:	f363 01c5 	bfi	r1, r3, #3, #3
    91d8:	f362 1188 	bfi	r1, r2, #6, #3
    91dc:	2208      	movs	r2, #8
    91de:	f362 2152 	bfi	r1, r2, #9, #10
    91e2:	f363 41de 	bfi	r1, r3, #19, #12
    91e6:	f363 71df 	bfi	r1, r3, #31, #1
    91ea:	aa06      	add	r2, sp, #24
    91ec:	480b      	ldr	r0, [pc, #44]	; (921c <mbox_nrf_set_enabled+0xfc>)
    91ee:	f7fa fa3b 	bl	3668 <z_impl_z_log_msg_static_create>
    91f2:	e7cc      	b.n	918e <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
    91f4:	202a      	movs	r0, #42	; 0x2a
    91f6:	f007 ff9a 	bl	1112e <arch_irq_enable>
    91fa:	e7cb      	b.n	9194 <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
    91fc:	202a      	movs	r0, #42	; 0x2a
    91fe:	f007 ff9b 	bl	11138 <arch_irq_disable>
	return 0;
    9202:	2000      	movs	r0, #0
    9204:	e7b4      	b.n	9170 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
    9206:	f06f 0015 	mvn.w	r0, #21
    920a:	e7b1      	b.n	9170 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
    920c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9210:	e7ae      	b.n	9170 <mbox_nrf_set_enabled+0x50>
    9212:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9216:	e7ab      	b.n	9170 <mbox_nrf_set_enabled+0x50>
    9218:	00015bf0 	.word	0x00015bf0
    921c:	00013a9c 	.word	0x00013a9c

00009220 <mbox_nrf_send>:
{
    9220:	b530      	push	{r4, r5, lr}
    9222:	b089      	sub	sp, #36	; 0x24
    9224:	4605      	mov	r5, r0
    9226:	460c      	mov	r4, r1
	if (msg) {
    9228:	b31a      	cbz	r2, 9272 <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
    922a:	4b1d      	ldr	r3, [pc, #116]	; (92a0 <mbox_nrf_send+0x80>)
    922c:	9307      	str	r3, [sp, #28]
    922e:	2202      	movs	r2, #2
    9230:	f88d 2004 	strb.w	r2, [sp, #4]
    9234:	2300      	movs	r3, #0
    9236:	f88d 3005 	strb.w	r3, [sp, #5]
    923a:	f88d 3006 	strb.w	r3, [sp, #6]
    923e:	f88d 3007 	strb.w	r3, [sp, #7]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	4619      	mov	r1, r3
    9248:	f363 0100 	bfi	r1, r3, #0, #1
    924c:	f363 0141 	bfi	r1, r3, #1, #1
    9250:	f363 0182 	bfi	r1, r3, #2, #1
    9254:	f363 01c5 	bfi	r1, r3, #3, #3
    9258:	f362 1188 	bfi	r1, r2, #6, #3
    925c:	2208      	movs	r2, #8
    925e:	f362 2152 	bfi	r1, r2, #9, #10
    9262:	f363 41de 	bfi	r1, r3, #19, #12
    9266:	f363 71df 	bfi	r1, r3, #31, #1
    926a:	aa06      	add	r2, sp, #24
    926c:	480d      	ldr	r0, [pc, #52]	; (92a4 <mbox_nrf_send+0x84>)
    926e:	f7fa f9fb 	bl	3668 <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
    9272:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    9274:	2c0f      	cmp	r4, #15
    9276:	d806      	bhi.n	9286 <mbox_nrf_send+0x66>
    9278:	685b      	ldr	r3, [r3, #4]
    927a:	40e3      	lsrs	r3, r4
    927c:	f013 0f01 	tst.w	r3, #1
    9280:	d109      	bne.n	9296 <mbox_nrf_send+0x76>
    9282:	2300      	movs	r3, #0
    9284:	e000      	b.n	9288 <mbox_nrf_send+0x68>
    9286:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
    9288:	b13b      	cbz	r3, 929a <mbox_nrf_send+0x7a>
	nrfx_ipc_signal(channel);
    928a:	b2e0      	uxtb	r0, r4
    928c:	f7ff ff28 	bl	90e0 <nrfx_ipc_signal>
	return 0;
    9290:	2000      	movs	r0, #0
}
    9292:	b009      	add	sp, #36	; 0x24
    9294:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    9296:	2301      	movs	r3, #1
    9298:	e7f6      	b.n	9288 <mbox_nrf_send+0x68>
		return -EINVAL;
    929a:	f06f 0015 	mvn.w	r0, #21
    929e:	e7f8      	b.n	9292 <mbox_nrf_send+0x72>
    92a0:	00015c20 	.word	0x00015c20
    92a4:	00013a9c 	.word	0x00013a9c

000092a8 <mbox_dispatcher>:
{
    92a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92ac:	b08e      	sub	sp, #56	; 0x38
    92ae:	4605      	mov	r5, r0
    92b0:	460e      	mov	r6, r1
	const struct device *dev = data->dev;
    92b2:	f8d1 9080 	ldr.w	r9, [r1, #128]	; 0x80
	while (event_mask) {
    92b6:	e01a      	b.n	92ee <mbox_dispatcher+0x46>
    return 32U;
    92b8:	2320      	movs	r3, #32
    92ba:	e020      	b.n	92fe <mbox_dispatcher+0x56>
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    92bc:	2300      	movs	r3, #0
		if (!is_rx_channel_valid(dev, channel)) {
    92be:	b36b      	cbz	r3, 931c <mbox_dispatcher+0x74>
		if (!(data->enabled_mask & BIT(channel))) {
    92c0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    92c4:	40e3      	lsrs	r3, r4
    92c6:	f013 0f01 	tst.w	r3, #1
    92ca:	d04c      	beq.n	9366 <mbox_dispatcher+0xbe>
		event_mask &= ~BIT(channel);
    92cc:	2301      	movs	r3, #1
    92ce:	40a3      	lsls	r3, r4
    92d0:	ea25 0503 	bic.w	r5, r5, r3
		if (data->cb[channel] != NULL) {
    92d4:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
    92d8:	f1ba 0f00 	cmp.w	sl, #0
    92dc:	d007      	beq.n	92ee <mbox_dispatcher+0x46>
			data->cb[channel](dev, channel, data->user_data[channel], NULL);
    92de:	f104 0210 	add.w	r2, r4, #16
    92e2:	2300      	movs	r3, #0
    92e4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    92e8:	4621      	mov	r1, r4
    92ea:	4648      	mov	r0, r9
    92ec:	47d0      	blx	sl
	while (event_mask) {
    92ee:	2d00      	cmp	r5, #0
    92f0:	d05e      	beq.n	93b0 <mbox_dispatcher+0x108>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    92f2:	fa95 f3a5 	rbit	r3, r5
  if (value == 0U)
    92f6:	2b00      	cmp	r3, #0
    92f8:	d0de      	beq.n	92b8 <mbox_dispatcher+0x10>
  return __builtin_clz(value);
    92fa:	fab3 f383 	clz	r3, r3
		uint32_t channel = __CLZ(__RBIT(event_mask));
    92fe:	461c      	mov	r4, r3
	const struct mbox_nrf_conf *conf = dev->config;
    9300:	f8d9 2004 	ldr.w	r2, [r9, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    9304:	2b0f      	cmp	r3, #15
    9306:	d8d9      	bhi.n	92bc <mbox_dispatcher+0x14>
    9308:	6812      	ldr	r2, [r2, #0]
    930a:	fa22 f303 	lsr.w	r3, r2, r3
    930e:	f013 0f01 	tst.w	r3, #1
    9312:	d101      	bne.n	9318 <mbox_dispatcher+0x70>
    9314:	2300      	movs	r3, #0
    9316:	e7d2      	b.n	92be <mbox_dispatcher+0x16>
    9318:	2301      	movs	r3, #1
    931a:	e7d0      	b.n	92be <mbox_dispatcher+0x16>
			LOG_WRN("RX event on illegal channel");
    931c:	4b26      	ldr	r3, [pc, #152]	; (93b8 <mbox_dispatcher+0x110>)
    931e:	9307      	str	r3, [sp, #28]
    9320:	2202      	movs	r2, #2
    9322:	f88d 2004 	strb.w	r2, [sp, #4]
    9326:	2300      	movs	r3, #0
    9328:	f88d 3005 	strb.w	r3, [sp, #5]
    932c:	f88d 3006 	strb.w	r3, [sp, #6]
    9330:	f88d 3007 	strb.w	r3, [sp, #7]
    9334:	9901      	ldr	r1, [sp, #4]
    9336:	9106      	str	r1, [sp, #24]
    9338:	f363 0700 	bfi	r7, r3, #0, #1
    933c:	f363 0741 	bfi	r7, r3, #1, #1
    9340:	f363 0782 	bfi	r7, r3, #2, #1
    9344:	f363 07c5 	bfi	r7, r3, #3, #3
    9348:	f362 1788 	bfi	r7, r2, #6, #3
    934c:	2208      	movs	r2, #8
    934e:	f362 2752 	bfi	r7, r2, #9, #10
    9352:	f363 47de 	bfi	r7, r3, #19, #12
    9356:	f363 77df 	bfi	r7, r3, #31, #1
    935a:	aa06      	add	r2, sp, #24
    935c:	4639      	mov	r1, r7
    935e:	4817      	ldr	r0, [pc, #92]	; (93bc <mbox_dispatcher+0x114>)
    9360:	f7fa f982 	bl	3668 <z_impl_z_log_msg_static_create>
    9364:	e7ac      	b.n	92c0 <mbox_dispatcher+0x18>
			LOG_WRN("RX event on disabled channel");
    9366:	4b16      	ldr	r3, [pc, #88]	; (93c0 <mbox_dispatcher+0x118>)
    9368:	930d      	str	r3, [sp, #52]	; 0x34
    936a:	2202      	movs	r2, #2
    936c:	f88d 2004 	strb.w	r2, [sp, #4]
    9370:	2300      	movs	r3, #0
    9372:	f88d 3005 	strb.w	r3, [sp, #5]
    9376:	f88d 3006 	strb.w	r3, [sp, #6]
    937a:	f88d 3007 	strb.w	r3, [sp, #7]
    937e:	9901      	ldr	r1, [sp, #4]
    9380:	910c      	str	r1, [sp, #48]	; 0x30
    9382:	f363 0800 	bfi	r8, r3, #0, #1
    9386:	f363 0841 	bfi	r8, r3, #1, #1
    938a:	f363 0882 	bfi	r8, r3, #2, #1
    938e:	f363 08c5 	bfi	r8, r3, #3, #3
    9392:	f362 1888 	bfi	r8, r2, #6, #3
    9396:	2208      	movs	r2, #8
    9398:	f362 2852 	bfi	r8, r2, #9, #10
    939c:	f363 48de 	bfi	r8, r3, #19, #12
    93a0:	f363 78df 	bfi	r8, r3, #31, #1
    93a4:	aa0c      	add	r2, sp, #48	; 0x30
    93a6:	4641      	mov	r1, r8
    93a8:	4804      	ldr	r0, [pc, #16]	; (93bc <mbox_dispatcher+0x114>)
    93aa:	f7fa f95d 	bl	3668 <z_impl_z_log_msg_static_create>
    93ae:	e78d      	b.n	92cc <mbox_dispatcher+0x24>
}
    93b0:	b00e      	add	sp, #56	; 0x38
    93b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    93b6:	bf00      	nop
    93b8:	00015c3c 	.word	0x00015c3c
    93bc:	00013a9c 	.word	0x00013a9c
    93c0:	00015c58 	.word	0x00015c58

000093c4 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
    93c4:	b510      	push	{r4, lr}
    93c6:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
    93c8:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    93ca:	2284      	movs	r2, #132	; 0x84
    93cc:	2100      	movs	r1, #0
    93ce:	a801      	add	r0, sp, #4
    93d0:	f007 ffd3 	bl	1137a <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    93d4:	6863      	ldr	r3, [r4, #4]
    93d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    93da:	d206      	bcs.n	93ea <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    93dc:	6823      	ldr	r3, [r4, #0]
    93de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    93e2:	d227      	bcs.n	9434 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
    93e4:	2300      	movs	r3, #0
    93e6:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    93e8:	e04a      	b.n	9480 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    93ea:	4b36      	ldr	r3, [pc, #216]	; (94c4 <enable_dt_channels+0x100>)
    93ec:	9327      	str	r3, [sp, #156]	; 0x9c
    93ee:	2202      	movs	r2, #2
    93f0:	f88d 2000 	strb.w	r2, [sp]
    93f4:	2300      	movs	r3, #0
    93f6:	f88d 3001 	strb.w	r3, [sp, #1]
    93fa:	f88d 3002 	strb.w	r3, [sp, #2]
    93fe:	f88d 3003 	strb.w	r3, [sp, #3]
    9402:	9900      	ldr	r1, [sp, #0]
    9404:	9126      	str	r1, [sp, #152]	; 0x98
    9406:	4619      	mov	r1, r3
    9408:	f363 0100 	bfi	r1, r3, #0, #1
    940c:	f363 0141 	bfi	r1, r3, #1, #1
    9410:	f363 0182 	bfi	r1, r3, #2, #1
    9414:	f363 01c5 	bfi	r1, r3, #3, #3
    9418:	f362 1188 	bfi	r1, r2, #6, #3
    941c:	2208      	movs	r2, #8
    941e:	f362 2152 	bfi	r1, r2, #9, #10
    9422:	f363 41de 	bfi	r1, r3, #19, #12
    9426:	f363 71df 	bfi	r1, r3, #31, #1
    942a:	aa26      	add	r2, sp, #152	; 0x98
    942c:	4826      	ldr	r0, [pc, #152]	; (94c8 <enable_dt_channels+0x104>)
    942e:	f7fa f91b 	bl	3668 <z_impl_z_log_msg_static_create>
    9432:	e7d3      	b.n	93dc <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    9434:	4b25      	ldr	r3, [pc, #148]	; (94cc <enable_dt_channels+0x108>)
    9436:	932d      	str	r3, [sp, #180]	; 0xb4
    9438:	2202      	movs	r2, #2
    943a:	f88d 2000 	strb.w	r2, [sp]
    943e:	2300      	movs	r3, #0
    9440:	f88d 3001 	strb.w	r3, [sp, #1]
    9444:	f88d 3002 	strb.w	r3, [sp, #2]
    9448:	f88d 3003 	strb.w	r3, [sp, #3]
    944c:	9900      	ldr	r1, [sp, #0]
    944e:	912c      	str	r1, [sp, #176]	; 0xb0
    9450:	4619      	mov	r1, r3
    9452:	f363 0100 	bfi	r1, r3, #0, #1
    9456:	f363 0141 	bfi	r1, r3, #1, #1
    945a:	f363 0182 	bfi	r1, r3, #2, #1
    945e:	f363 01c5 	bfi	r1, r3, #3, #3
    9462:	f362 1188 	bfi	r1, r2, #6, #3
    9466:	2208      	movs	r2, #8
    9468:	f362 2152 	bfi	r1, r2, #9, #10
    946c:	f363 41de 	bfi	r1, r3, #19, #12
    9470:	f363 71df 	bfi	r1, r3, #31, #1
    9474:	aa2c      	add	r2, sp, #176	; 0xb0
    9476:	4814      	ldr	r0, [pc, #80]	; (94c8 <enable_dt_channels+0x104>)
    9478:	f7fa f8f6 	bl	3668 <z_impl_z_log_msg_static_create>
    947c:	e7b2      	b.n	93e4 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    947e:	3301      	adds	r3, #1
    9480:	2b0f      	cmp	r3, #15
    9482:	d81a      	bhi.n	94ba <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
    9484:	6862      	ldr	r2, [r4, #4]
    9486:	40da      	lsrs	r2, r3
    9488:	f012 0f01 	tst.w	r2, #1
    948c:	d006      	beq.n	949c <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
    948e:	2201      	movs	r2, #1
    9490:	409a      	lsls	r2, r3
    9492:	a92e      	add	r1, sp, #184	; 0xb8
    9494:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    9498:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
    949c:	6822      	ldr	r2, [r4, #0]
    949e:	40da      	lsrs	r2, r3
    94a0:	f012 0f01 	tst.w	r2, #1
    94a4:	d0eb      	beq.n	947e <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
    94a6:	2101      	movs	r1, #1
    94a8:	4099      	lsls	r1, r3
    94aa:	f103 0210 	add.w	r2, r3, #16
    94ae:	a82e      	add	r0, sp, #184	; 0xb8
    94b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    94b4:	f842 1cb4 	str.w	r1, [r2, #-180]
    94b8:	e7e1      	b.n	947e <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
    94ba:	a801      	add	r0, sp, #4
    94bc:	f000 fffa 	bl	a4b4 <nrfx_ipc_config_load>
}
    94c0:	b02e      	add	sp, #184	; 0xb8
    94c2:	bd10      	pop	{r4, pc}
    94c4:	00015c78 	.word	0x00015c78
    94c8:	00013a9c 	.word	0x00013a9c
    94cc:	00015ca4 	.word	0x00015ca4

000094d0 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
    94d0:	b510      	push	{r4, lr}
    94d2:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    94d4:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
    94d6:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    94da:	4907      	ldr	r1, [pc, #28]	; (94f8 <mbox_nrf_init+0x28>)
    94dc:	2000      	movs	r0, #0
    94de:	f000 ffbd 	bl	a45c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    94e2:	2200      	movs	r2, #0
    94e4:	2101      	movs	r1, #1
    94e6:	202a      	movs	r0, #42	; 0x2a
    94e8:	f7fb fc3e 	bl	4d68 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    94ec:	4620      	mov	r0, r4
    94ee:	f7ff ff69 	bl	93c4 <enable_dt_channels>

	return 0;
}
    94f2:	2000      	movs	r0, #0
    94f4:	bd10      	pop	{r4, pc}
    94f6:	bf00      	nop
    94f8:	000092a9 	.word	0x000092a9

000094fc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    94fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9500:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    9504:	f002 0203 	and.w	r2, r2, #3
    9508:	4b02      	ldr	r3, [pc, #8]	; (9514 <SystemCoreClockUpdate+0x18>)
    950a:	40d3      	lsrs	r3, r2
    950c:	4a02      	ldr	r2, [pc, #8]	; (9518 <SystemCoreClockUpdate+0x1c>)
    950e:	6013      	str	r3, [r2, #0]
#endif
}
    9510:	4770      	bx	lr
    9512:	bf00      	nop
    9514:	07a12000 	.word	0x07a12000
    9518:	20000124 	.word	0x20000124

0000951c <SystemInit>:

void SystemInit(void)
{
    951c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    951e:	f008 fdf5 	bl	1210c <nrf53_errata_97>
    9522:	b168      	cbz	r0, 9540 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    9524:	4b4e      	ldr	r3, [pc, #312]	; (9660 <SystemInit+0x144>)
    9526:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    952a:	b94b      	cbnz	r3, 9540 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    952c:	4b4c      	ldr	r3, [pc, #304]	; (9660 <SystemInit+0x144>)
    952e:	220d      	movs	r2, #13
    9530:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    9534:	2201      	movs	r2, #1
    9536:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    953a:	2200      	movs	r2, #0
    953c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    9540:	2200      	movs	r2, #0
    9542:	e00b      	b.n	955c <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    9544:	f102 0360 	add.w	r3, r2, #96	; 0x60
    9548:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    954c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    9550:	00db      	lsls	r3, r3, #3
    9552:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    9556:	685b      	ldr	r3, [r3, #4]
    9558:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    955a:	3201      	adds	r2, #1
    955c:	2a1f      	cmp	r2, #31
    955e:	d808      	bhi.n	9572 <SystemInit+0x56>
    9560:	f102 0360 	add.w	r3, r2, #96	; 0x60
    9564:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    9568:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    956c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9570:	d1e8      	bne.n	9544 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    9572:	f008 fda3 	bl	120bc <nrf53_errata_64>
    9576:	b130      	cbz	r0, 9586 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    9578:	4b39      	ldr	r3, [pc, #228]	; (9660 <SystemInit+0x144>)
    957a:	2229      	movs	r2, #41	; 0x29
    957c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    9580:	2203      	movs	r2, #3
    9582:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    9586:	f008 fd4d 	bl	12024 <nrf53_errata_42>
    958a:	b140      	cbz	r0, 959e <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    958c:	4b35      	ldr	r3, [pc, #212]	; (9664 <SystemInit+0x148>)
    958e:	4a36      	ldr	r2, [pc, #216]	; (9668 <SystemInit+0x14c>)
    9590:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    9594:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9598:	2201      	movs	r2, #1
    959a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    959e:	f008 fd55 	bl	1204c <nrf53_errata_46>
    95a2:	b118      	cbz	r0, 95ac <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    95a4:	4b31      	ldr	r3, [pc, #196]	; (966c <SystemInit+0x150>)
    95a6:	2200      	movs	r2, #0
    95a8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    95ac:	f008 fd66 	bl	1207c <nrf53_errata_49>
    95b0:	b168      	cbz	r0, 95ce <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    95b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    95b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    95ba:	f013 0f01 	tst.w	r3, #1
    95be:	d006      	beq.n	95ce <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    95c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    95c4:	2200      	movs	r2, #0
    95c6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    95ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    95ce:	f008 fd69 	bl	120a4 <nrf53_errata_55>
    95d2:	b160      	cbz	r0, 95ee <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    95d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    95d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    95dc:	f013 0f01 	tst.w	r3, #1
    95e0:	d005      	beq.n	95ee <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    95e2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    95e6:	f06f 0201 	mvn.w	r2, #1
    95ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    95ee:	f008 fd79 	bl	120e4 <nrf53_errata_69>
    95f2:	b118      	cbz	r0, 95fc <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    95f4:	4b1a      	ldr	r3, [pc, #104]	; (9660 <SystemInit+0x144>)
    95f6:	2265      	movs	r2, #101	; 0x65
    95f8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    95fc:	f008 fd9a 	bl	12134 <nrf53_errata_140>
    9600:	b120      	cbz	r0, 960c <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    9602:	4b1a      	ldr	r3, [pc, #104]	; (966c <SystemInit+0x150>)
    9604:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    9608:	2b00      	cmp	r3, #0
    960a:	db11      	blt.n	9630 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    960c:	4a18      	ldr	r2, [pc, #96]	; (9670 <SystemInit+0x154>)
    960e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    9612:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    9616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    961a:	4a16      	ldr	r2, [pc, #88]	; (9674 <SystemInit+0x158>)
    961c:	6811      	ldr	r1, [r2, #0]
    961e:	4b16      	ldr	r3, [pc, #88]	; (9678 <SystemInit+0x15c>)
    9620:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    9624:	69d2      	ldr	r2, [r2, #28]
    9626:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    962a:	f7ff ff67 	bl	94fc <SystemCoreClockUpdate>
}
    962e:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    9630:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9634:	2203      	movs	r2, #3
    9636:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    963a:	2201      	movs	r2, #1
    963c:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    963e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9642:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    9646:	2b00      	cmp	r3, #0
    9648:	d0f9      	beq.n	963e <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    964a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    964e:	2200      	movs	r2, #0
    9650:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    9654:	2201      	movs	r2, #1
    9656:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    9658:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    965c:	e7d6      	b.n	960c <SystemInit+0xf0>
    965e:	bf00      	nop
    9660:	50004000 	.word	0x50004000
    9664:	50039000 	.word	0x50039000
    9668:	beef0044 	.word	0xbeef0044
    966c:	50032000 	.word	0x50032000
    9670:	e000ed00 	.word	0xe000ed00
    9674:	00ff8000 	.word	0x00ff8000
    9678:	50006000 	.word	0x50006000

0000967c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    967c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    967e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    9680:	fab4 f384 	clz	r3, r4
    9684:	f1c3 031f 	rsb	r3, r3, #31
    9688:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    968c:	2b00      	cmp	r3, #0
    968e:	db12      	blt.n	96b6 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    9690:	2201      	movs	r2, #1
    9692:	fa02 f303 	lsl.w	r3, r2, r3
    9696:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    969a:	e8d0 2fef 	ldaex	r2, [r0]
    969e:	42a2      	cmp	r2, r4
    96a0:	d104      	bne.n	96ac <nrfx_flag32_alloc+0x30>
    96a2:	e8c0 3fee 	stlex	lr, r3, [r0]
    96a6:	f1be 0f00 	cmp.w	lr, #0
    96aa:	d1f6      	bne.n	969a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    96ac:	d1e7      	bne.n	967e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    96ae:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    96b2:	4802      	ldr	r0, [pc, #8]	; (96bc <nrfx_flag32_alloc+0x40>)
}
    96b4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    96b6:	4802      	ldr	r0, [pc, #8]	; (96c0 <nrfx_flag32_alloc+0x44>)
    96b8:	e7fc      	b.n	96b4 <nrfx_flag32_alloc+0x38>
    96ba:	bf00      	nop
    96bc:	0bad0000 	.word	0x0bad0000
    96c0:	0bad0002 	.word	0x0bad0002

000096c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    96c4:	6803      	ldr	r3, [r0, #0]
    96c6:	40cb      	lsrs	r3, r1
    96c8:	f013 0f01 	tst.w	r3, #1
    96cc:	d111      	bne.n	96f2 <nrfx_flag32_free+0x2e>
{
    96ce:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    96d0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    96d2:	2301      	movs	r3, #1
    96d4:	408b      	lsls	r3, r1
    96d6:	4313      	orrs	r3, r2
    96d8:	e8d0 cfef 	ldaex	ip, [r0]
    96dc:	4594      	cmp	ip, r2
    96de:	d104      	bne.n	96ea <nrfx_flag32_free+0x26>
    96e0:	e8c0 3fee 	stlex	lr, r3, [r0]
    96e4:	f1be 0f00 	cmp.w	lr, #0
    96e8:	d1f6      	bne.n	96d8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    96ea:	d1f1      	bne.n	96d0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    96ec:	4802      	ldr	r0, [pc, #8]	; (96f8 <nrfx_flag32_free+0x34>)
}
    96ee:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    96f2:	4802      	ldr	r0, [pc, #8]	; (96fc <nrfx_flag32_free+0x38>)
}
    96f4:	4770      	bx	lr
    96f6:	bf00      	nop
    96f8:	0bad0000 	.word	0x0bad0000
    96fc:	0bad0004 	.word	0x0bad0004

00009700 <nrf_clock_is_running>:
    switch (domain)
    9700:	2903      	cmp	r1, #3
    9702:	d82f      	bhi.n	9764 <nrf_clock_is_running+0x64>
    9704:	e8df f001 	tbb	[pc, r1]
    9708:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    970c:	b122      	cbz	r2, 9718 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    970e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    9712:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    9716:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9718:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    971c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9720:	d130      	bne.n	9784 <nrf_clock_is_running+0x84>
    return false;
    9722:	2000      	movs	r0, #0
    9724:	4770      	bx	lr
            if (p_clk_src != NULL)
    9726:	b122      	cbz	r2, 9732 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9728:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    972c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    9730:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9732:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    9736:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    973a:	d125      	bne.n	9788 <nrf_clock_is_running+0x88>
    return false;
    973c:	2000      	movs	r0, #0
    973e:	4770      	bx	lr
            if (p_clk_src != NULL)
    9740:	b122      	cbz	r2, 974c <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    9742:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    9746:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    974a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    974c:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    9750:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9754:	d11a      	bne.n	978c <nrf_clock_is_running+0x8c>
    return false;
    9756:	2000      	movs	r0, #0
    9758:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    975a:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    975e:	f3c0 4000 	ubfx	r0, r0, #16, #1
    9762:	4770      	bx	lr
{
    9764:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
    9766:	4c0a      	ldr	r4, [pc, #40]	; (9790 <nrf_clock_is_running+0x90>)
    9768:	f44f 734f 	mov.w	r3, #828	; 0x33c
    976c:	4622      	mov	r2, r4
    976e:	4909      	ldr	r1, [pc, #36]	; (9794 <nrf_clock_is_running+0x94>)
    9770:	4809      	ldr	r0, [pc, #36]	; (9798 <nrf_clock_is_running+0x98>)
    9772:	f006 ffe1 	bl	10738 <assert_print>
    9776:	f44f 714f 	mov.w	r1, #828	; 0x33c
    977a:	4620      	mov	r0, r4
    977c:	f006 ffd5 	bl	1072a <assert_post_action>
            return false;
    9780:	2000      	movs	r0, #0
}
    9782:	bd10      	pop	{r4, pc}
                return true;
    9784:	2001      	movs	r0, #1
    9786:	4770      	bx	lr
                return true;
    9788:	2001      	movs	r0, #1
    978a:	4770      	bx	lr
                return true;
    978c:	2001      	movs	r0, #1
}
    978e:	4770      	bx	lr
    9790:	0001501c 	.word	0x0001501c
    9794:	000156e0 	.word	0x000156e0
    9798:	00013d44 	.word	0x00013d44

0000979c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    979c:	b570      	push	{r4, r5, r6, lr}
    979e:	b082      	sub	sp, #8
    97a0:	4606      	mov	r6, r0
    switch (domain)
    97a2:	2803      	cmp	r0, #3
    97a4:	d840      	bhi.n	9828 <clock_stop+0x8c>
    97a6:	e8df f000 	tbb	[pc, r0]
    97aa:	1702      	.short	0x1702
    97ac:	3123      	.short	0x3123
    p_reg->INTENCLR = mask;
    97ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    97b2:	2202      	movs	r2, #2
    97b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    97b8:	2200      	movs	r2, #0
    97ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    97be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    97c2:	2201      	movs	r2, #1
    97c4:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    97c6:	2301      	movs	r3, #1
    97c8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    97cc:	429e      	cmp	r6, r3
    97ce:	d037      	beq.n	9840 <clock_stop+0xa4>
    97d0:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    97d2:	f242 7410 	movw	r4, #10000	; 0x2710
    97d6:	e03b      	b.n	9850 <clock_stop+0xb4>
    p_reg->INTENCLR = mask;
    97d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    97dc:	2201      	movs	r2, #1
    97de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    97e2:	2100      	movs	r1, #0
    97e4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    97e8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    97ec:	605a      	str	r2, [r3, #4]
}
    97ee:	e7ea      	b.n	97c6 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    97f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    97f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    97f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    97fc:	2200      	movs	r2, #0
    97fe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    9802:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9806:	2201      	movs	r2, #1
    9808:	625a      	str	r2, [r3, #36]	; 0x24
}
    980a:	e7dc      	b.n	97c6 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    980c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9810:	f44f 7280 	mov.w	r2, #256	; 0x100
    9814:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9818:	2200      	movs	r2, #0
    981a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    981e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9822:	2201      	movs	r2, #1
    9824:	61da      	str	r2, [r3, #28]
}
    9826:	e7ce      	b.n	97c6 <clock_stop+0x2a>
            NRFX_ASSERT(0);
    9828:	4c11      	ldr	r4, [pc, #68]	; (9870 <clock_stop+0xd4>)
    982a:	23d8      	movs	r3, #216	; 0xd8
    982c:	4622      	mov	r2, r4
    982e:	4911      	ldr	r1, [pc, #68]	; (9874 <clock_stop+0xd8>)
    9830:	4811      	ldr	r0, [pc, #68]	; (9878 <clock_stop+0xdc>)
    9832:	f006 ff81 	bl	10738 <assert_print>
    9836:	21d8      	movs	r1, #216	; 0xd8
    9838:	4620      	mov	r0, r4
    983a:	f006 ff76 	bl	1072a <assert_post_action>
            return;
    983e:	e014      	b.n	986a <clock_stop+0xce>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9840:	f10d 0507 	add.w	r5, sp, #7
    9844:	e7c5      	b.n	97d2 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9846:	2001      	movs	r0, #1
    9848:	f008 fc83 	bl	12152 <nrfx_busy_wait>
    984c:	3c01      	subs	r4, #1
    984e:	d00c      	beq.n	986a <clock_stop+0xce>
    9850:	462a      	mov	r2, r5
    9852:	4631      	mov	r1, r6
    9854:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9858:	f7ff ff52 	bl	9700 <nrf_clock_is_running>
    985c:	b128      	cbz	r0, 986a <clock_stop+0xce>
    985e:	2d00      	cmp	r5, #0
    9860:	d0f1      	beq.n	9846 <clock_stop+0xaa>
    9862:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9866:	2b01      	cmp	r3, #1
    9868:	d0ed      	beq.n	9846 <clock_stop+0xaa>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    986a:	b002      	add	sp, #8
    986c:	bd70      	pop	{r4, r5, r6, pc}
    986e:	bf00      	nop
    9870:	00015d00 	.word	0x00015d00
    9874:	000156e0 	.word	0x000156e0
    9878:	00013d44 	.word	0x00013d44

0000987c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    987c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    987e:	4604      	mov	r4, r0
    9880:	b140      	cbz	r0, 9894 <nrfx_clock_init+0x18>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9882:	4b0c      	ldr	r3, [pc, #48]	; (98b4 <nrfx_clock_init+0x38>)
    9884:	791b      	ldrb	r3, [r3, #4]
    9886:	b99b      	cbnz	r3, 98b0 <nrfx_clock_init+0x34>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    9888:	4b0a      	ldr	r3, [pc, #40]	; (98b4 <nrfx_clock_init+0x38>)
    988a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    988c:	2201      	movs	r2, #1
    988e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9890:	4809      	ldr	r0, [pc, #36]	; (98b8 <nrfx_clock_init+0x3c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9892:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    9894:	4d09      	ldr	r5, [pc, #36]	; (98bc <nrfx_clock_init+0x40>)
    9896:	f240 1315 	movw	r3, #277	; 0x115
    989a:	462a      	mov	r2, r5
    989c:	4908      	ldr	r1, [pc, #32]	; (98c0 <nrfx_clock_init+0x44>)
    989e:	4809      	ldr	r0, [pc, #36]	; (98c4 <nrfx_clock_init+0x48>)
    98a0:	f006 ff4a 	bl	10738 <assert_print>
    98a4:	f240 1115 	movw	r1, #277	; 0x115
    98a8:	4628      	mov	r0, r5
    98aa:	f006 ff3e 	bl	1072a <assert_post_action>
    98ae:	e7e8      	b.n	9882 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    98b0:	4805      	ldr	r0, [pc, #20]	; (98c8 <nrfx_clock_init+0x4c>)
    return err_code;
    98b2:	e7ee      	b.n	9892 <nrfx_clock_init+0x16>
    98b4:	200021f4 	.word	0x200021f4
    98b8:	0bad0000 	.word	0x0bad0000
    98bc:	00015d00 	.word	0x00015d00
    98c0:	00015d40 	.word	0x00015d40
    98c4:	00013d44 	.word	0x00013d44
    98c8:	0bad000c 	.word	0x0bad000c

000098cc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    98cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    98ce:	4b0f      	ldr	r3, [pc, #60]	; (990c <nrfx_clock_enable+0x40>)
    98d0:	791b      	ldrb	r3, [r3, #4]
    98d2:	b16b      	cbz	r3, 98f0 <nrfx_clock_enable+0x24>
    nrfx_power_clock_irq_init();
    98d4:	f008 fc43 	bl	1215e <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    98d8:	f008 fc3f 	bl	1215a <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    98dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    98e0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    98e4:	2201      	movs	r2, #1
    98e6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    98ea:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    98ee:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    98f0:	4c07      	ldr	r4, [pc, #28]	; (9910 <nrfx_clock_enable+0x44>)
    98f2:	f44f 7397 	mov.w	r3, #302	; 0x12e
    98f6:	4622      	mov	r2, r4
    98f8:	4906      	ldr	r1, [pc, #24]	; (9914 <nrfx_clock_enable+0x48>)
    98fa:	4807      	ldr	r0, [pc, #28]	; (9918 <nrfx_clock_enable+0x4c>)
    98fc:	f006 ff1c 	bl	10738 <assert_print>
    9900:	f44f 7197 	mov.w	r1, #302	; 0x12e
    9904:	4620      	mov	r0, r4
    9906:	f006 ff10 	bl	1072a <assert_post_action>
    990a:	e7e3      	b.n	98d4 <nrfx_clock_enable+0x8>
    990c:	200021f4 	.word	0x200021f4
    9910:	00015d00 	.word	0x00015d00
    9914:	00015d50 	.word	0x00015d50
    9918:	00013d44 	.word	0x00013d44

0000991c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    991c:	b530      	push	{r4, r5, lr}
    991e:	b083      	sub	sp, #12
    9920:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9922:	4b47      	ldr	r3, [pc, #284]	; (9a40 <nrfx_clock_start+0x124>)
    9924:	791b      	ldrb	r3, [r3, #4]
    9926:	b12b      	cbz	r3, 9934 <nrfx_clock_start+0x18>
    switch (domain)
    9928:	2c03      	cmp	r4, #3
    992a:	d87a      	bhi.n	9a22 <nrfx_clock_start+0x106>
    992c:	e8df f004 	tbb	[pc, r4]
    9930:	6b5d5010 	.word	0x6b5d5010
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9934:	4d43      	ldr	r5, [pc, #268]	; (9a44 <nrfx_clock_start+0x128>)
    9936:	f44f 73b4 	mov.w	r3, #360	; 0x168
    993a:	462a      	mov	r2, r5
    993c:	4942      	ldr	r1, [pc, #264]	; (9a48 <nrfx_clock_start+0x12c>)
    993e:	4843      	ldr	r0, [pc, #268]	; (9a4c <nrfx_clock_start+0x130>)
    9940:	f006 fefa 	bl	10738 <assert_print>
    9944:	f44f 71b4 	mov.w	r1, #360	; 0x168
    9948:	4628      	mov	r0, r5
    994a:	f006 feee 	bl	1072a <assert_post_action>
    994e:	e7eb      	b.n	9928 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9950:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    9954:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9958:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    995c:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9960:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9964:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9968:	d119      	bne.n	999e <nrfx_clock_start+0x82>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    996a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    996e:	f013 0f01 	tst.w	r3, #1
    9972:	d119      	bne.n	99a8 <nrfx_clock_start+0x8c>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
    9974:	f008 fbf1 	bl	1215a <clock_initial_lfclksrc_get>
    9978:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    997c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    9980:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9984:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9988:	2200      	movs	r2, #0
    998a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    998e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    9992:	2202      	movs	r2, #2
    9994:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9998:	2201      	movs	r2, #1
    999a:	609a      	str	r2, [r3, #8]
}
    999c:	e023      	b.n	99e6 <nrfx_clock_start+0xca>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    999e:	f10d 0007 	add.w	r0, sp, #7
    99a2:	f008 fbe6 	bl	12172 <clock_lfclksrc_tweak>
    99a6:	e7e9      	b.n	997c <nrfx_clock_start+0x60>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    99a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99ac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    99b0:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    99b4:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    99b8:	f10d 0007 	add.w	r0, sp, #7
    99bc:	f008 fbd9 	bl	12172 <clock_lfclksrc_tweak>
    99c0:	2800      	cmp	r0, #0
    99c2:	d0db      	beq.n	997c <nrfx_clock_start+0x60>
    p_reg->INTENSET = mask;
    99c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99c8:	2202      	movs	r2, #2
    99ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    99ce:	e00a      	b.n	99e6 <nrfx_clock_start+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99d4:	2200      	movs	r2, #0
    99d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    99da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    99de:	2201      	movs	r2, #1
    99e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    99e4:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    99e6:	b003      	add	sp, #12
    99e8:	bd30      	pop	{r4, r5, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    99ee:	2200      	movs	r2, #0
    99f0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    99f4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    99f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    99fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a00:	2201      	movs	r2, #1
    9a02:	621a      	str	r2, [r3, #32]
}
    9a04:	e7ef      	b.n	99e6 <nrfx_clock_start+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a06:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a0a:	2200      	movs	r2, #0
    9a0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9a10:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    9a14:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a1c:	2201      	movs	r2, #1
    9a1e:	619a      	str	r2, [r3, #24]
}
    9a20:	e7e1      	b.n	99e6 <nrfx_clock_start+0xca>
            NRFX_ASSERT(0);
    9a22:	4c08      	ldr	r4, [pc, #32]	; (9a44 <nrfx_clock_start+0x128>)
    9a24:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    9a28:	4622      	mov	r2, r4
    9a2a:	4909      	ldr	r1, [pc, #36]	; (9a50 <nrfx_clock_start+0x134>)
    9a2c:	4807      	ldr	r0, [pc, #28]	; (9a4c <nrfx_clock_start+0x130>)
    9a2e:	f006 fe83 	bl	10738 <assert_print>
    9a32:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    9a36:	4620      	mov	r0, r4
    9a38:	f006 fe77 	bl	1072a <assert_post_action>
}
    9a3c:	e7d3      	b.n	99e6 <nrfx_clock_start+0xca>
    9a3e:	bf00      	nop
    9a40:	200021f4 	.word	0x200021f4
    9a44:	00015d00 	.word	0x00015d00
    9a48:	00015d50 	.word	0x00015d50
    9a4c:	00013d44 	.word	0x00013d44
    9a50:	000156e0 	.word	0x000156e0

00009a54 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    9a54:	b538      	push	{r3, r4, r5, lr}
    9a56:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9a58:	4b0a      	ldr	r3, [pc, #40]	; (9a84 <nrfx_clock_stop+0x30>)
    9a5a:	791b      	ldrb	r3, [r3, #4]
    9a5c:	b11b      	cbz	r3, 9a66 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    9a5e:	4620      	mov	r0, r4
    9a60:	f7ff fe9c 	bl	979c <clock_stop>
}
    9a64:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9a66:	4d08      	ldr	r5, [pc, #32]	; (9a88 <nrfx_clock_stop+0x34>)
    9a68:	f240 13ad 	movw	r3, #429	; 0x1ad
    9a6c:	462a      	mov	r2, r5
    9a6e:	4907      	ldr	r1, [pc, #28]	; (9a8c <nrfx_clock_stop+0x38>)
    9a70:	4807      	ldr	r0, [pc, #28]	; (9a90 <nrfx_clock_stop+0x3c>)
    9a72:	f006 fe61 	bl	10738 <assert_print>
    9a76:	f240 11ad 	movw	r1, #429	; 0x1ad
    9a7a:	4628      	mov	r0, r5
    9a7c:	f006 fe55 	bl	1072a <assert_post_action>
    9a80:	e7ed      	b.n	9a5e <nrfx_clock_stop+0xa>
    9a82:	bf00      	nop
    9a84:	200021f4 	.word	0x200021f4
    9a88:	00015d00 	.word	0x00015d00
    9a8c:	00015d50 	.word	0x00015d50
    9a90:	00013d44 	.word	0x00013d44

00009a94 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9a94:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9a96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    9a9e:	b163      	cbz	r3, 9aba <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9aa0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9aa4:	2000      	movs	r0, #0
    9aa6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    9aaa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    9aae:	2201      	movs	r2, #1
    9ab0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9ab4:	4b28      	ldr	r3, [pc, #160]	; (9b58 <nrfx_power_clock_irq_handler+0xc4>)
    9ab6:	681b      	ldr	r3, [r3, #0]
    9ab8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9aba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9abe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9ac2:	b1bb      	cbz	r3, 9af4 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ac4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9ac8:	2200      	movs	r2, #0
    9aca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9ace:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9ad2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    9ad6:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9ada:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9ade:	2a01      	cmp	r2, #1
    9ae0:	d031      	beq.n	9b46 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    9ae2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9ae6:	2202      	movs	r2, #2
    9ae8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9aec:	4b1a      	ldr	r3, [pc, #104]	; (9b58 <nrfx_power_clock_irq_handler+0xc4>)
    9aee:	681b      	ldr	r3, [r3, #0]
    9af0:	2001      	movs	r0, #1
    9af2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9af4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9af8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    9afc:	b173      	cbz	r3, 9b1c <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9afe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b02:	2200      	movs	r2, #0
    9b04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9b08:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    9b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9b10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    9b14:	4b10      	ldr	r3, [pc, #64]	; (9b58 <nrfx_power_clock_irq_handler+0xc4>)
    9b16:	681b      	ldr	r3, [r3, #0]
    9b18:	2004      	movs	r0, #4
    9b1a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9b1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b20:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    9b24:	b173      	cbz	r3, 9b44 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b26:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b2a:	2200      	movs	r2, #0
    9b2c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    9b30:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    9b34:	f44f 7200 	mov.w	r2, #512	; 0x200
    9b38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    9b3c:	4b06      	ldr	r3, [pc, #24]	; (9b58 <nrfx_power_clock_irq_handler+0xc4>)
    9b3e:	681b      	ldr	r3, [r3, #0]
    9b40:	2005      	movs	r0, #5
    9b42:	4798      	blx	r3
    }
#endif
}
    9b44:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    9b46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b4a:	2202      	movs	r2, #2
    9b4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b50:	2201      	movs	r2, #1
    9b52:	609a      	str	r2, [r3, #8]
}
    9b54:	e7ce      	b.n	9af4 <nrfx_power_clock_irq_handler+0x60>
    9b56:	bf00      	nop
    9b58:	200021f4 	.word	0x200021f4

00009b5c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    9b5c:	b508      	push	{r3, lr}
    9b5e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    9b60:	4801      	ldr	r0, [pc, #4]	; (9b68 <nrfx_dppi_channel_alloc+0xc>)
    9b62:	f7ff fd8b 	bl	967c <nrfx_flag32_alloc>
}
    9b66:	bd08      	pop	{r3, pc}
    9b68:	20000128 	.word	0x20000128

00009b6c <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    9b6c:	b508      	push	{r3, lr}
    9b6e:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    9b70:	2301      	movs	r3, #1
    9b72:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
    9b74:	4a03      	ldr	r2, [pc, #12]	; (9b84 <nrfx_dppi_channel_free+0x18>)
    9b76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    9b7a:	4803      	ldr	r0, [pc, #12]	; (9b88 <nrfx_dppi_channel_free+0x1c>)
    9b7c:	f7ff fda2 	bl	96c4 <nrfx_flag32_free>
}
    9b80:	bd08      	pop	{r3, pc}
    9b82:	bf00      	nop
    9b84:	50017000 	.word	0x50017000
    9b88:	20000128 	.word	0x20000128

00009b8c <nrf_gpio_latches_read_and_clear>:
{
    9b8c:	b500      	push	{lr}
    9b8e:	b083      	sub	sp, #12
    9b90:	4684      	mov	ip, r0
    9b92:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    9b94:	4b0c      	ldr	r3, [pc, #48]	; (9bc8 <nrf_gpio_latches_read_and_clear+0x3c>)
    9b96:	e893 0003 	ldmia.w	r3, {r0, r1}
    9b9a:	ab02      	add	r3, sp, #8
    9b9c:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    9ba0:	4663      	mov	r3, ip
    9ba2:	e009      	b.n	9bb8 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    9ba4:	a902      	add	r1, sp, #8
    9ba6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    9baa:	f851 1c08 	ldr.w	r1, [r1, #-8]
    9bae:	6a08      	ldr	r0, [r1, #32]
    9bb0:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    9bb4:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    9bb6:	3301      	adds	r3, #1
    9bb8:	eb0c 000e 	add.w	r0, ip, lr
    9bbc:	4298      	cmp	r0, r3
    9bbe:	d8f1      	bhi.n	9ba4 <nrf_gpio_latches_read_and_clear+0x18>
}
    9bc0:	b003      	add	sp, #12
    9bc2:	f85d fb04 	ldr.w	pc, [sp], #4
    9bc6:	bf00      	nop
    9bc8:	00013b74 	.word	0x00013b74

00009bcc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    9bcc:	3008      	adds	r0, #8
    9bce:	4b03      	ldr	r3, [pc, #12]	; (9bdc <pin_in_use+0x10>)
    9bd0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9bd4:	f000 0001 	and.w	r0, r0, #1
    9bd8:	4770      	bx	lr
    9bda:	bf00      	nop
    9bdc:	2000012c 	.word	0x2000012c

00009be0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    9be0:	3008      	adds	r0, #8
    9be2:	4b03      	ldr	r3, [pc, #12]	; (9bf0 <pin_in_use_by_te+0x10>)
    9be4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9be8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9bec:	4770      	bx	lr
    9bee:	bf00      	nop
    9bf0:	2000012c 	.word	0x2000012c

00009bf4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    9bf4:	3008      	adds	r0, #8
    9bf6:	4b04      	ldr	r3, [pc, #16]	; (9c08 <pin_has_trigger+0x14>)
    9bf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9bfc:	f010 001c 	ands.w	r0, r0, #28
    9c00:	bf18      	it	ne
    9c02:	2001      	movne	r0, #1
    9c04:	4770      	bx	lr
    9c06:	bf00      	nop
    9c08:	2000012c 	.word	0x2000012c

00009c0c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9c0c:	3008      	adds	r0, #8
    9c0e:	4b03      	ldr	r3, [pc, #12]	; (9c1c <pin_is_output+0x10>)
    9c10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9c14:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9c18:	4770      	bx	lr
    9c1a:	bf00      	nop
    9c1c:	2000012c 	.word	0x2000012c

00009c20 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9c20:	3008      	adds	r0, #8
    9c22:	4b02      	ldr	r3, [pc, #8]	; (9c2c <pin_te_get+0xc>)
    9c24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9c28:	0b40      	lsrs	r0, r0, #13
    9c2a:	4770      	bx	lr
    9c2c:	2000012c 	.word	0x2000012c

00009c30 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9c30:	2200      	movs	r2, #0
    9c32:	e004      	b.n	9c3e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    9c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c38:	4283      	cmp	r3, r0
    9c3a:	d00f      	beq.n	9c5c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9c3c:	3201      	adds	r2, #1
    9c3e:	2a2f      	cmp	r2, #47	; 0x2f
    9c40:	d80a      	bhi.n	9c58 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    9c42:	f102 0308 	add.w	r3, r2, #8
    9c46:	4906      	ldr	r1, [pc, #24]	; (9c60 <handler_in_use+0x30>)
    9c48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    9c4c:	f413 7f80 	tst.w	r3, #256	; 0x100
    9c50:	d0f0      	beq.n	9c34 <handler_in_use+0x4>
    9c52:	f3c3 2343 	ubfx	r3, r3, #9, #4
    9c56:	e7ef      	b.n	9c38 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    9c58:	2000      	movs	r0, #0
    9c5a:	4770      	bx	lr
            return true;
    9c5c:	2001      	movs	r0, #1
}
    9c5e:	4770      	bx	lr
    9c60:	2000012c 	.word	0x2000012c

00009c64 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9c64:	2300      	movs	r3, #0
    9c66:	b113      	cbz	r3, 9c6e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    9c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9c6c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9c6e:	4a07      	ldr	r2, [pc, #28]	; (9c8c <find_handler+0x28>)
    9c70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    9c74:	4282      	cmp	r2, r0
    9c76:	d001      	beq.n	9c7c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9c78:	3301      	adds	r3, #1
    9c7a:	e7f4      	b.n	9c66 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9c7c:	4a03      	ldr	r2, [pc, #12]	; (9c8c <find_handler+0x28>)
    9c7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9c82:	6852      	ldr	r2, [r2, #4]
    9c84:	428a      	cmp	r2, r1
    9c86:	d1f7      	bne.n	9c78 <find_handler+0x14>
            return i;
    9c88:	4618      	mov	r0, r3
    9c8a:	4770      	bx	lr
    9c8c:	2000012c 	.word	0x2000012c

00009c90 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9c90:	3008      	adds	r0, #8
    9c92:	4b06      	ldr	r3, [pc, #24]	; (9cac <channel_handler_get+0x1c>)
    9c94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    9c98:	f410 7f80 	tst.w	r0, #256	; 0x100
    9c9c:	d004      	beq.n	9ca8 <channel_handler_get+0x18>
    9c9e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    9ca2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9ca6:	4770      	bx	lr
        return NULL;
    9ca8:	2000      	movs	r0, #0
}
    9caa:	4770      	bx	lr
    9cac:	2000012c 	.word	0x2000012c

00009cb0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    9cb0:	b570      	push	{r4, r5, r6, lr}
    9cb2:	4604      	mov	r4, r0
    9cb4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    9cb6:	f7ff ffeb 	bl	9c90 <channel_handler_get>

    if (handler)
    9cba:	b120      	cbz	r0, 9cc6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    9cbc:	6806      	ldr	r6, [r0, #0]
    9cbe:	6842      	ldr	r2, [r0, #4]
    9cc0:	4629      	mov	r1, r5
    9cc2:	4620      	mov	r0, r4
    9cc4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    9cc6:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <call_handler+0x28>)
    9cc8:	689b      	ldr	r3, [r3, #8]
    9cca:	b123      	cbz	r3, 9cd6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9ccc:	4a02      	ldr	r2, [pc, #8]	; (9cd8 <call_handler+0x28>)
    9cce:	68d2      	ldr	r2, [r2, #12]
    9cd0:	4629      	mov	r1, r5
    9cd2:	4620      	mov	r0, r4
    9cd4:	4798      	blx	r3
    }
}
    9cd6:	bd70      	pop	{r4, r5, r6, pc}
    9cd8:	2000012c 	.word	0x2000012c

00009cdc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9cdc:	f100 0208 	add.w	r2, r0, #8
    9ce0:	4b16      	ldr	r3, [pc, #88]	; (9d3c <release_handler+0x60>)
    9ce2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    9ce6:	f413 7f80 	tst.w	r3, #256	; 0x100
    9cea:	d026      	beq.n	9d3a <release_handler+0x5e>
{
    9cec:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9cee:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    9cf2:	4610      	mov	r0, r2
    9cf4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    9cf8:	4a10      	ldr	r2, [pc, #64]	; (9d3c <release_handler+0x60>)
    9cfa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    9cfe:	4620      	mov	r0, r4
    9d00:	f7ff ff96 	bl	9c30 <handler_in_use>
    9d04:	b100      	cbz	r0, 9d08 <release_handler+0x2c>
}
    9d06:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    9d08:	480c      	ldr	r0, [pc, #48]	; (9d3c <release_handler+0x60>)
    9d0a:	2300      	movs	r3, #0
    9d0c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    9d10:	4621      	mov	r1, r4
    9d12:	3074      	adds	r0, #116	; 0x74
    9d14:	f7ff fcd6 	bl	96c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    9d18:	4b09      	ldr	r3, [pc, #36]	; (9d40 <release_handler+0x64>)
    9d1a:	4298      	cmp	r0, r3
    9d1c:	d0f3      	beq.n	9d06 <release_handler+0x2a>
    9d1e:	4c09      	ldr	r4, [pc, #36]	; (9d44 <release_handler+0x68>)
    9d20:	f44f 7399 	mov.w	r3, #306	; 0x132
    9d24:	4622      	mov	r2, r4
    9d26:	4908      	ldr	r1, [pc, #32]	; (9d48 <release_handler+0x6c>)
    9d28:	4808      	ldr	r0, [pc, #32]	; (9d4c <release_handler+0x70>)
    9d2a:	f006 fd05 	bl	10738 <assert_print>
    9d2e:	f44f 7199 	mov.w	r1, #306	; 0x132
    9d32:	4620      	mov	r0, r4
    9d34:	f006 fcf9 	bl	1072a <assert_post_action>
    9d38:	e7e5      	b.n	9d06 <release_handler+0x2a>
    9d3a:	4770      	bx	lr
    9d3c:	2000012c 	.word	0x2000012c
    9d40:	0bad0000 	.word	0x0bad0000
    9d44:	00015d70 	.word	0x00015d70
    9d48:	000142d8 	.word	0x000142d8
    9d4c:	00013d44 	.word	0x00013d44

00009d50 <pin_handler_trigger_uninit>:
{
    9d50:	b510      	push	{r4, lr}
    9d52:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    9d54:	f7ff ff44 	bl	9be0 <pin_in_use_by_te>
    9d58:	b150      	cbz	r0, 9d70 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    9d5a:	4620      	mov	r0, r4
    9d5c:	f7ff ff60 	bl	9c20 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9d60:	4b08      	ldr	r3, [pc, #32]	; (9d84 <pin_handler_trigger_uninit+0x34>)
    9d62:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    9d66:	2200      	movs	r2, #0
    9d68:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    9d6c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    9d70:	4620      	mov	r0, r4
    9d72:	f7ff ffb3 	bl	9cdc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    9d76:	3408      	adds	r4, #8
    9d78:	4b03      	ldr	r3, [pc, #12]	; (9d88 <pin_handler_trigger_uninit+0x38>)
    9d7a:	2200      	movs	r2, #0
    9d7c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    9d80:	bd10      	pop	{r4, pc}
    9d82:	bf00      	nop
    9d84:	5000d000 	.word	0x5000d000
    9d88:	2000012c 	.word	0x2000012c

00009d8c <nrf_gpio_pin_port_decode>:
{
    9d8c:	b538      	push	{r3, r4, r5, lr}
    9d8e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d90:	6800      	ldr	r0, [r0, #0]
    9d92:	f008 fa3b 	bl	1220c <nrf_gpio_pin_present_check>
    9d96:	b1b0      	cbz	r0, 9dc6 <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    9d98:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    9d9a:	f003 021f 	and.w	r2, r3, #31
    9d9e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9da0:	095b      	lsrs	r3, r3, #5
    9da2:	d01e      	beq.n	9de2 <nrf_gpio_pin_port_decode+0x56>
    9da4:	2b01      	cmp	r3, #1
    9da6:	d01e      	beq.n	9de6 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    9da8:	4c10      	ldr	r4, [pc, #64]	; (9dec <nrf_gpio_pin_port_decode+0x60>)
    9daa:	f44f 7313 	mov.w	r3, #588	; 0x24c
    9dae:	4622      	mov	r2, r4
    9db0:	490f      	ldr	r1, [pc, #60]	; (9df0 <nrf_gpio_pin_port_decode+0x64>)
    9db2:	4810      	ldr	r0, [pc, #64]	; (9df4 <nrf_gpio_pin_port_decode+0x68>)
    9db4:	f006 fcc0 	bl	10738 <assert_print>
    9db8:	f44f 7113 	mov.w	r1, #588	; 0x24c
    9dbc:	4620      	mov	r0, r4
    9dbe:	f006 fcb4 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    9dc2:	480d      	ldr	r0, [pc, #52]	; (9df8 <nrf_gpio_pin_port_decode+0x6c>)
    9dc4:	e010      	b.n	9de8 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9dc6:	4d09      	ldr	r5, [pc, #36]	; (9dec <nrf_gpio_pin_port_decode+0x60>)
    9dc8:	f240 2347 	movw	r3, #583	; 0x247
    9dcc:	462a      	mov	r2, r5
    9dce:	490b      	ldr	r1, [pc, #44]	; (9dfc <nrf_gpio_pin_port_decode+0x70>)
    9dd0:	4808      	ldr	r0, [pc, #32]	; (9df4 <nrf_gpio_pin_port_decode+0x68>)
    9dd2:	f006 fcb1 	bl	10738 <assert_print>
    9dd6:	f240 2147 	movw	r1, #583	; 0x247
    9dda:	4628      	mov	r0, r5
    9ddc:	f006 fca5 	bl	1072a <assert_post_action>
    9de0:	e7da      	b.n	9d98 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    9de2:	4805      	ldr	r0, [pc, #20]	; (9df8 <nrf_gpio_pin_port_decode+0x6c>)
    9de4:	e000      	b.n	9de8 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9de6:	4806      	ldr	r0, [pc, #24]	; (9e00 <nrf_gpio_pin_port_decode+0x74>)
}
    9de8:	bd38      	pop	{r3, r4, r5, pc}
    9dea:	bf00      	nop
    9dec:	000141c0 	.word	0x000141c0
    9df0:	000156e0 	.word	0x000156e0
    9df4:	00013d44 	.word	0x00013d44
    9df8:	50842500 	.word	0x50842500
    9dfc:	000141f4 	.word	0x000141f4
    9e00:	50842800 	.word	0x50842800

00009e04 <get_initial_sense>:
{
    9e04:	b508      	push	{r3, lr}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9e06:	f100 0208 	add.w	r2, r0, #8
    9e0a:	4b0a      	ldr	r3, [pc, #40]	; (9e34 <get_initial_sense+0x30>)
    9e0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    9e10:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9e14:	2b04      	cmp	r3, #4
    9e16:	d008      	beq.n	9e2a <get_initial_sense+0x26>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9e18:	2b05      	cmp	r3, #5
    9e1a:	d101      	bne.n	9e20 <get_initial_sense+0x1c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    9e1c:	2002      	movs	r0, #2
    9e1e:	e005      	b.n	9e2c <get_initial_sense+0x28>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9e20:	f008 fab4 	bl	1238c <nrf_gpio_pin_read>
    9e24:	b118      	cbz	r0, 9e2e <get_initial_sense+0x2a>
    9e26:	2003      	movs	r0, #3
    9e28:	e000      	b.n	9e2c <get_initial_sense+0x28>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9e2a:	2003      	movs	r0, #3
}
    9e2c:	bd08      	pop	{r3, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9e2e:	2002      	movs	r0, #2
    9e30:	e7fc      	b.n	9e2c <get_initial_sense+0x28>
    9e32:	bf00      	nop
    9e34:	2000012c 	.word	0x2000012c

00009e38 <nrf_gpiote_in_event_get>:
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_CLR[index]);
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    9e38:	b538      	push	{r3, r4, r5, lr}
    9e3a:	4604      	mov	r4, r0
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9e3c:	2807      	cmp	r0, #7
    9e3e:	d803      	bhi.n	9e48 <nrf_gpiote_in_event_get+0x10>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9e40:	00a0      	lsls	r0, r4, #2
}
    9e42:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9e46:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9e48:	4d06      	ldr	r5, [pc, #24]	; (9e64 <nrf_gpiote_in_event_get+0x2c>)
    9e4a:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9e4e:	462a      	mov	r2, r5
    9e50:	4905      	ldr	r1, [pc, #20]	; (9e68 <nrf_gpiote_in_event_get+0x30>)
    9e52:	4806      	ldr	r0, [pc, #24]	; (9e6c <nrf_gpiote_in_event_get+0x34>)
    9e54:	f006 fc70 	bl	10738 <assert_print>
    9e58:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9e5c:	4628      	mov	r0, r5
    9e5e:	f006 fc64 	bl	1072a <assert_post_action>
    9e62:	e7ed      	b.n	9e40 <nrf_gpiote_in_event_get+0x8>
    9e64:	00015db0 	.word	0x00015db0
    9e68:	00015de8 	.word	0x00015de8
    9e6c:	00013d44 	.word	0x00013d44

00009e70 <pin_handler_set>:
{
    9e70:	b570      	push	{r4, r5, r6, lr}
    9e72:	b082      	sub	sp, #8
    9e74:	4605      	mov	r5, r0
    9e76:	460e      	mov	r6, r1
    9e78:	4614      	mov	r4, r2
    release_handler(pin);
    9e7a:	f7ff ff2f 	bl	9cdc <release_handler>
    if (!handler)
    9e7e:	b326      	cbz	r6, 9eca <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    9e80:	4621      	mov	r1, r4
    9e82:	4630      	mov	r0, r6
    9e84:	f7ff feee 	bl	9c64 <find_handler>
    if (handler_id < 0)
    9e88:	1e03      	subs	r3, r0, #0
    9e8a:	db13      	blt.n	9eb4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    9e8c:	4910      	ldr	r1, [pc, #64]	; (9ed0 <pin_handler_set+0x60>)
    9e8e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    9e92:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    9e96:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9e98:	f105 0008 	add.w	r0, r5, #8
    9e9c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    9ea0:	025b      	lsls	r3, r3, #9
    9ea2:	b29b      	uxth	r3, r3
    9ea4:	4313      	orrs	r3, r2
    9ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9eaa:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    9eae:	4809      	ldr	r0, [pc, #36]	; (9ed4 <pin_handler_set+0x64>)
}
    9eb0:	b002      	add	sp, #8
    9eb2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    9eb4:	f10d 0107 	add.w	r1, sp, #7
    9eb8:	4807      	ldr	r0, [pc, #28]	; (9ed8 <pin_handler_set+0x68>)
    9eba:	f7ff fbdf 	bl	967c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    9ebe:	4b05      	ldr	r3, [pc, #20]	; (9ed4 <pin_handler_set+0x64>)
    9ec0:	4298      	cmp	r0, r3
    9ec2:	d1f5      	bne.n	9eb0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    9ec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ec8:	e7e0      	b.n	9e8c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    9eca:	4802      	ldr	r0, [pc, #8]	; (9ed4 <pin_handler_set+0x64>)
    9ecc:	e7f0      	b.n	9eb0 <pin_handler_set+0x40>
    9ece:	bf00      	nop
    9ed0:	2000012c 	.word	0x2000012c
    9ed4:	0bad0000 	.word	0x0bad0000
    9ed8:	200001a0 	.word	0x200001a0

00009edc <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    9edc:	b570      	push	{r4, r5, r6, lr}
    9ede:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    9ee0:	466a      	mov	r2, sp
    9ee2:	2102      	movs	r1, #2
    9ee4:	2000      	movs	r0, #0
    9ee6:	f7ff fe51 	bl	9b8c <nrf_gpio_latches_read_and_clear>
    9eea:	e037      	b.n	9f5c <port_event_handle+0x80>
    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
            {
                uint32_t pin = NRF_CTZ(latch[i]);
    9eec:	fa94 f4a4 	rbit	r4, r4
    9ef0:	fab4 f484 	clz	r4, r4

                /* Convert to absolute value. */
                pin += 32 * i;
    9ef4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9ef8:	f104 0208 	add.w	r2, r4, #8
    9efc:	4b19      	ldr	r3, [pc, #100]	; (9f64 <port_event_handle+0x88>)
    9efe:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    9f02:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9f06:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    9f08:	f004 0007 	and.w	r0, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    9f0c:	f81d 2001 	ldrb.w	r2, [sp, r1]
    9f10:	2301      	movs	r3, #1
    9f12:	4083      	lsls	r3, r0
    9f14:	43db      	mvns	r3, r3
    9f16:	b25b      	sxtb	r3, r3
    9f18:	4013      	ands	r3, r2
    9f1a:	f80d 3001 	strb.w	r3, [sp, r1]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);
    9f1e:	4620      	mov	r0, r4
    9f20:	f008 fa42 	bl	123a8 <nrf_gpio_pin_sense_get>
    9f24:	4602      	mov	r2, r0

                next_sense_cond_call_handler(pin, trigger, sense);
    9f26:	4631      	mov	r1, r6
    9f28:	4620      	mov	r0, r4
    9f2a:	f008 fa4c 	bl	123c6 <next_sense_cond_call_handler>
                /* Try to clear LATCH bit corresponding to currently processed pin.
                 * This may not succeed if the pin's state changed during the interrupt processing
                 * and now it matches the new sense configuration. In such case,
                 * the pin will be processed again in another iteration of the outer loop. */
                nrf_gpio_pin_latch_clear(pin);
    9f2e:	4620      	mov	r0, r4
    9f30:	f008 fa7c 	bl	1242c <nrf_gpio_pin_latch_clear>
            while (latch[i])
    9f34:	ab02      	add	r3, sp, #8
    9f36:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9f3a:	f853 4c08 	ldr.w	r4, [r3, #-8]
    9f3e:	2c00      	cmp	r4, #0
    9f40:	d1d4      	bne.n	9eec <port_event_handle+0x10>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9f42:	3501      	adds	r5, #1
    9f44:	2d01      	cmp	r5, #1
    9f46:	d9f5      	bls.n	9f34 <port_event_handle+0x58>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9f48:	4b07      	ldr	r3, [pc, #28]	; (9f68 <port_event_handle+0x8c>)
    9f4a:	2200      	movs	r2, #0
    9f4c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9f50:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    9f54:	4668      	mov	r0, sp
    9f56:	f008 f988 	bl	1226a <latch_pending_read_and_check>
    9f5a:	b108      	cbz	r0, 9f60 <port_event_handle+0x84>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9f5c:	2500      	movs	r5, #0
    9f5e:	e7f1      	b.n	9f44 <port_event_handle+0x68>
}
    9f60:	b002      	add	sp, #8
    9f62:	bd70      	pop	{r4, r5, r6, pc}
    9f64:	2000012c 	.word	0x2000012c
    9f68:	5000d000 	.word	0x5000d000

00009f6c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    9f6c:	b538      	push	{r3, r4, r5, lr}
    9f6e:	4604      	mov	r4, r0
    while (mask)
    9f70:	e018      	b.n	9fa4 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    9f72:	fa94 f3a4 	rbit	r3, r4
    9f76:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    9f7a:	2201      	movs	r2, #1
    9f7c:	409a      	lsls	r2, r3
    9f7e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9f82:	4a0a      	ldr	r2, [pc, #40]	; (9fac <gpiote_evt_handle+0x40>)
    9f84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    9f88:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    9f8c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9f90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    9f94:	f3c0 4001 	ubfx	r0, r0, #16, #2
    9f98:	f008 f960 	bl	1225c <gpiote_polarity_to_trigger>
    9f9c:	4601      	mov	r1, r0
    9f9e:	4628      	mov	r0, r5
    9fa0:	f7ff fe86 	bl	9cb0 <call_handler>
    while (mask)
    9fa4:	2c00      	cmp	r4, #0
    9fa6:	d1e4      	bne.n	9f72 <gpiote_evt_handle+0x6>
    }
}
    9fa8:	bd38      	pop	{r3, r4, r5, pc}
    9faa:	bf00      	nop
    9fac:	5000d000 	.word	0x5000d000

00009fb0 <nrfx_gpiote_input_configure>:
{
    9fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fb4:	b084      	sub	sp, #16
    9fb6:	4604      	mov	r4, r0
    9fb8:	4615      	mov	r5, r2
    9fba:	461e      	mov	r6, r3
    if (p_input_config)
    9fbc:	b309      	cbz	r1, a002 <nrfx_gpiote_input_configure+0x52>
    9fbe:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    9fc0:	f008 f936 	bl	12230 <pin_is_task_output>
    9fc4:	2800      	cmp	r0, #0
    9fc6:	d13f      	bne.n	a048 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    9fc8:	2300      	movs	r3, #0
    9fca:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    9fce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    9fd2:	9301      	str	r3, [sp, #4]
    9fd4:	9300      	str	r3, [sp, #0]
    9fd6:	463b      	mov	r3, r7
    9fd8:	f10d 020f 	add.w	r2, sp, #15
    9fdc:	f10d 010e 	add.w	r1, sp, #14
    9fe0:	4620      	mov	r0, r4
    9fe2:	f008 f968 	bl	122b6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    9fe6:	4a39      	ldr	r2, [pc, #228]	; (a0cc <nrfx_gpiote_input_configure+0x11c>)
    9fe8:	f104 0108 	add.w	r1, r4, #8
    9fec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9ff0:	f023 0302 	bic.w	r3, r3, #2
    9ff4:	b29b      	uxth	r3, r3
    9ff6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9ffa:	f043 0301 	orr.w	r3, r3, #1
    9ffe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    a002:	b1bd      	cbz	r5, a034 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    a004:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    a006:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    a00a:	4620      	mov	r0, r4
    a00c:	f7ff fdfe 	bl	9c0c <pin_is_output>
    a010:	b1e0      	cbz	r0, a04c <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    a012:	f1b8 0f00 	cmp.w	r8, #0
    a016:	d153      	bne.n	a0c0 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    a018:	4a2c      	ldr	r2, [pc, #176]	; (a0cc <nrfx_gpiote_input_configure+0x11c>)
    a01a:	f104 0108 	add.w	r1, r4, #8
    a01e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    a022:	f023 031c 	bic.w	r3, r3, #28
    a026:	b29b      	uxth	r3, r3
    a028:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    a02c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    a030:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    a034:	2e00      	cmp	r6, #0
    a036:	d047      	beq.n	a0c8 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    a038:	6872      	ldr	r2, [r6, #4]
    a03a:	6831      	ldr	r1, [r6, #0]
    a03c:	4620      	mov	r0, r4
    a03e:	f7ff ff17 	bl	9e70 <pin_handler_set>
}
    a042:	b004      	add	sp, #16
    a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    a048:	4821      	ldr	r0, [pc, #132]	; (a0d0 <nrfx_gpiote_input_configure+0x120>)
    a04a:	e7fa      	b.n	a042 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    a04c:	4a1f      	ldr	r2, [pc, #124]	; (a0cc <nrfx_gpiote_input_configure+0x11c>)
    a04e:	f104 0108 	add.w	r1, r4, #8
    a052:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    a056:	f023 0320 	bic.w	r3, r3, #32
    a05a:	04db      	lsls	r3, r3, #19
    a05c:	0cdb      	lsrs	r3, r3, #19
    a05e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    a062:	f1b8 0f00 	cmp.w	r8, #0
    a066:	d0d7      	beq.n	a018 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    a068:	2f03      	cmp	r7, #3
    a06a:	d82b      	bhi.n	a0c4 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    a06c:	686b      	ldr	r3, [r5, #4]
    a06e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    a070:	b947      	cbnz	r7, a084 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    a072:	4b18      	ldr	r3, [pc, #96]	; (a0d4 <nrfx_gpiote_input_configure+0x124>)
    a074:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    a078:	2200      	movs	r2, #0
    a07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    a07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
    a082:	e7c9      	b.n	a018 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    a084:	4638      	mov	r0, r7
    a086:	f008 f8ea 	bl	1225e <gpiote_trigger_to_polarity>
    a08a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    a08c:	4811      	ldr	r0, [pc, #68]	; (a0d4 <nrfx_gpiote_input_configure+0x124>)
    a08e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    a092:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    a096:	f022 0203 	bic.w	r2, r2, #3
    a09a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    a09e:	4622      	mov	r2, r4
    a0a0:	4629      	mov	r1, r5
    a0a2:	f008 f87b 	bl	1219c <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    a0a6:	4a09      	ldr	r2, [pc, #36]	; (a0cc <nrfx_gpiote_input_configure+0x11c>)
    a0a8:	f104 0108 	add.w	r1, r4, #8
    a0ac:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    a0b0:	036d      	lsls	r5, r5, #13
    a0b2:	b2ad      	uxth	r5, r5
    a0b4:	432b      	orrs	r3, r5
    a0b6:	f043 0320 	orr.w	r3, r3, #32
    a0ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    a0be:	e7ab      	b.n	a018 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    a0c0:	4803      	ldr	r0, [pc, #12]	; (a0d0 <nrfx_gpiote_input_configure+0x120>)
    a0c2:	e7be      	b.n	a042 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    a0c4:	4802      	ldr	r0, [pc, #8]	; (a0d0 <nrfx_gpiote_input_configure+0x120>)
    a0c6:	e7bc      	b.n	a042 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    a0c8:	4803      	ldr	r0, [pc, #12]	; (a0d8 <nrfx_gpiote_input_configure+0x128>)
    a0ca:	e7ba      	b.n	a042 <nrfx_gpiote_input_configure+0x92>
    a0cc:	2000012c 	.word	0x2000012c
    a0d0:	0bad0004 	.word	0x0bad0004
    a0d4:	5000d000 	.word	0x5000d000
    a0d8:	0bad0000 	.word	0x0bad0000

0000a0dc <nrfx_gpiote_output_configure>:
{
    a0dc:	b570      	push	{r4, r5, r6, lr}
    a0de:	b084      	sub	sp, #16
    a0e0:	4604      	mov	r4, r0
    a0e2:	4615      	mov	r5, r2
    if (p_config)
    a0e4:	b329      	cbz	r1, a132 <nrfx_gpiote_output_configure+0x56>
    a0e6:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    a0e8:	f008 f8b1 	bl	1224e <pin_is_input>
    a0ec:	b120      	cbz	r0, a0f8 <nrfx_gpiote_output_configure+0x1c>
    a0ee:	4620      	mov	r0, r4
    a0f0:	f7ff fd76 	bl	9be0 <pin_in_use_by_te>
    a0f4:	2800      	cmp	r0, #0
    a0f6:	d13a      	bne.n	a16e <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    a0f8:	4620      	mov	r0, r4
    a0fa:	f7ff fd7b 	bl	9bf4 <pin_has_trigger>
    a0fe:	b110      	cbz	r0, a106 <nrfx_gpiote_output_configure+0x2a>
    a100:	7873      	ldrb	r3, [r6, #1]
    a102:	2b01      	cmp	r3, #1
    a104:	d033      	beq.n	a16e <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    a106:	2301      	movs	r3, #1
    a108:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    a10c:	2300      	movs	r3, #0
    a10e:	9301      	str	r3, [sp, #4]
    a110:	9600      	str	r6, [sp, #0]
    a112:	1cb3      	adds	r3, r6, #2
    a114:	1c72      	adds	r2, r6, #1
    a116:	f10d 010f 	add.w	r1, sp, #15
    a11a:	4620      	mov	r0, r4
    a11c:	f008 f8cb 	bl	122b6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    a120:	4a20      	ldr	r2, [pc, #128]	; (a1a4 <nrfx_gpiote_output_configure+0xc8>)
    a122:	f104 0108 	add.w	r1, r4, #8
    a126:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    a12a:	f043 0303 	orr.w	r3, r3, #3
    a12e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    a132:	b395      	cbz	r5, a19a <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    a134:	4620      	mov	r0, r4
    a136:	f008 f88a 	bl	1224e <pin_is_input>
    a13a:	bb80      	cbnz	r0, a19e <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    a13c:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    a13e:	4b1a      	ldr	r3, [pc, #104]	; (a1a8 <nrfx_gpiote_output_configure+0xcc>)
    a140:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    a144:	2100      	movs	r1, #0
    a146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    a14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    a14e:	4a15      	ldr	r2, [pc, #84]	; (a1a4 <nrfx_gpiote_output_configure+0xc8>)
    a150:	f104 0108 	add.w	r1, r4, #8
    a154:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    a158:	f023 0320 	bic.w	r3, r3, #32
    a15c:	04db      	lsls	r3, r3, #19
    a15e:	0cdb      	lsrs	r3, r3, #19
    a160:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    a164:	786b      	ldrb	r3, [r5, #1]
    a166:	b923      	cbnz	r3, a172 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    a168:	4810      	ldr	r0, [pc, #64]	; (a1ac <nrfx_gpiote_output_configure+0xd0>)
}
    a16a:	b004      	add	sp, #16
    a16c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    a16e:	4810      	ldr	r0, [pc, #64]	; (a1b0 <nrfx_gpiote_output_configure+0xd4>)
    a170:	e7fb      	b.n	a16a <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    a172:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    a174:	9200      	str	r2, [sp, #0]
    a176:	4622      	mov	r2, r4
    a178:	4631      	mov	r1, r6
    a17a:	480b      	ldr	r0, [pc, #44]	; (a1a8 <nrfx_gpiote_output_configure+0xcc>)
    a17c:	f008 f827 	bl	121ce <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    a180:	4a08      	ldr	r2, [pc, #32]	; (a1a4 <nrfx_gpiote_output_configure+0xc8>)
    a182:	3408      	adds	r4, #8
    a184:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    a188:	0376      	lsls	r6, r6, #13
    a18a:	b2b6      	uxth	r6, r6
    a18c:	4333      	orrs	r3, r6
    a18e:	f043 0320 	orr.w	r3, r3, #32
    a192:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    a196:	4805      	ldr	r0, [pc, #20]	; (a1ac <nrfx_gpiote_output_configure+0xd0>)
    a198:	e7e7      	b.n	a16a <nrfx_gpiote_output_configure+0x8e>
    a19a:	4804      	ldr	r0, [pc, #16]	; (a1ac <nrfx_gpiote_output_configure+0xd0>)
    a19c:	e7e5      	b.n	a16a <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    a19e:	4804      	ldr	r0, [pc, #16]	; (a1b0 <nrfx_gpiote_output_configure+0xd4>)
    a1a0:	e7e3      	b.n	a16a <nrfx_gpiote_output_configure+0x8e>
    a1a2:	bf00      	nop
    a1a4:	2000012c 	.word	0x2000012c
    a1a8:	5000d000 	.word	0x5000d000
    a1ac:	0bad0000 	.word	0x0bad0000
    a1b0:	0bad0004 	.word	0x0bad0004

0000a1b4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    a1b4:	4b01      	ldr	r3, [pc, #4]	; (a1bc <nrfx_gpiote_global_callback_set+0x8>)
    a1b6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    a1b8:	60d9      	str	r1, [r3, #12]
}
    a1ba:	4770      	bx	lr
    a1bc:	2000012c 	.word	0x2000012c

0000a1c0 <nrfx_gpiote_channel_get>:
{
    a1c0:	b570      	push	{r4, r5, r6, lr}
    a1c2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    a1c4:	460d      	mov	r5, r1
    a1c6:	b159      	cbz	r1, a1e0 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    a1c8:	4620      	mov	r0, r4
    a1ca:	f7ff fd09 	bl	9be0 <pin_in_use_by_te>
    a1ce:	b1a8      	cbz	r0, a1fc <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    a1d0:	3408      	adds	r4, #8
    a1d2:	4b0b      	ldr	r3, [pc, #44]	; (a200 <nrfx_gpiote_channel_get+0x40>)
    a1d4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    a1d8:	0b5b      	lsrs	r3, r3, #13
    a1da:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    a1dc:	4809      	ldr	r0, [pc, #36]	; (a204 <nrfx_gpiote_channel_get+0x44>)
}
    a1de:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    a1e0:	4e09      	ldr	r6, [pc, #36]	; (a208 <nrfx_gpiote_channel_get+0x48>)
    a1e2:	f240 2335 	movw	r3, #565	; 0x235
    a1e6:	4632      	mov	r2, r6
    a1e8:	4908      	ldr	r1, [pc, #32]	; (a20c <nrfx_gpiote_channel_get+0x4c>)
    a1ea:	4809      	ldr	r0, [pc, #36]	; (a210 <nrfx_gpiote_channel_get+0x50>)
    a1ec:	f006 faa4 	bl	10738 <assert_print>
    a1f0:	f240 2135 	movw	r1, #565	; 0x235
    a1f4:	4630      	mov	r0, r6
    a1f6:	f006 fa98 	bl	1072a <assert_post_action>
    a1fa:	e7e5      	b.n	a1c8 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    a1fc:	4805      	ldr	r0, [pc, #20]	; (a214 <nrfx_gpiote_channel_get+0x54>)
    a1fe:	e7ee      	b.n	a1de <nrfx_gpiote_channel_get+0x1e>
    a200:	2000012c 	.word	0x2000012c
    a204:	0bad0000 	.word	0x0bad0000
    a208:	00015d70 	.word	0x00015d70
    a20c:	00015df4 	.word	0x00015df4
    a210:	00013d44 	.word	0x00013d44
    a214:	0bad0004 	.word	0x0bad0004

0000a218 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    a218:	4b0f      	ldr	r3, [pc, #60]	; (a258 <nrfx_gpiote_init+0x40>)
    a21a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    a21e:	b10b      	cbz	r3, a224 <nrfx_gpiote_init+0xc>
        return err_code;
    a220:	480e      	ldr	r0, [pc, #56]	; (a25c <nrfx_gpiote_init+0x44>)
}
    a222:	4770      	bx	lr
{
    a224:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    a226:	4c0e      	ldr	r4, [pc, #56]	; (a260 <nrfx_gpiote_init+0x48>)
    a228:	2260      	movs	r2, #96	; 0x60
    a22a:	2100      	movs	r1, #0
    a22c:	4620      	mov	r0, r4
    a22e:	f007 f8a4 	bl	1137a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    a232:	200d      	movs	r0, #13
    a234:	f006 ff7b 	bl	1112e <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a238:	4b0a      	ldr	r3, [pc, #40]	; (a264 <nrfx_gpiote_init+0x4c>)
    a23a:	2200      	movs	r2, #0
    a23c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    a240:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    a244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a248:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    a24c:	2301      	movs	r3, #1
    a24e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    a252:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    a254:	4804      	ldr	r0, [pc, #16]	; (a268 <nrfx_gpiote_init+0x50>)
}
    a256:	bd10      	pop	{r4, pc}
    a258:	2000012c 	.word	0x2000012c
    a25c:	0bad0005 	.word	0x0bad0005
    a260:	2000013c 	.word	0x2000013c
    a264:	5000d000 	.word	0x5000d000
    a268:	0bad0000 	.word	0x0bad0000

0000a26c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    a26c:	4b03      	ldr	r3, [pc, #12]	; (a27c <nrfx_gpiote_is_init+0x10>)
    a26e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    a272:	3800      	subs	r0, #0
    a274:	bf18      	it	ne
    a276:	2001      	movne	r0, #1
    a278:	4770      	bx	lr
    a27a:	bf00      	nop
    a27c:	2000012c 	.word	0x2000012c

0000a280 <nrfx_gpiote_channel_free>:
{
    a280:	b508      	push	{r3, lr}
    a282:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    a284:	4801      	ldr	r0, [pc, #4]	; (a28c <nrfx_gpiote_channel_free+0xc>)
    a286:	f7ff fa1d 	bl	96c4 <nrfx_flag32_free>
}
    a28a:	bd08      	pop	{r3, pc}
    a28c:	2000019c 	.word	0x2000019c

0000a290 <nrfx_gpiote_channel_alloc>:
{
    a290:	b508      	push	{r3, lr}
    a292:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    a294:	4801      	ldr	r0, [pc, #4]	; (a29c <nrfx_gpiote_channel_alloc+0xc>)
    a296:	f7ff f9f1 	bl	967c <nrfx_flag32_alloc>
}
    a29a:	bd08      	pop	{r3, pc}
    a29c:	2000019c 	.word	0x2000019c

0000a2a0 <nrfx_gpiote_trigger_enable>:
{
    a2a0:	b570      	push	{r4, r5, r6, lr}
    a2a2:	4604      	mov	r4, r0
    a2a4:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    a2a6:	f7ff fca5 	bl	9bf4 <pin_has_trigger>
    a2aa:	b180      	cbz	r0, a2ce <nrfx_gpiote_trigger_enable+0x2e>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a2ac:	4620      	mov	r0, r4
    a2ae:	f7ff fc97 	bl	9be0 <pin_in_use_by_te>
    a2b2:	b118      	cbz	r0, a2bc <nrfx_gpiote_trigger_enable+0x1c>
    a2b4:	4620      	mov	r0, r4
    a2b6:	f007 ffca 	bl	1224e <pin_is_input>
    a2ba:	b9b0      	cbnz	r0, a2ea <nrfx_gpiote_trigger_enable+0x4a>
        NRFX_ASSERT(int_enable);
    a2bc:	b395      	cbz	r5, a324 <nrfx_gpiote_trigger_enable+0x84>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    a2be:	4620      	mov	r0, r4
    a2c0:	f7ff fda0 	bl	9e04 <get_initial_sense>
    a2c4:	4601      	mov	r1, r0
    a2c6:	4620      	mov	r0, r4
    a2c8:	f008 f850 	bl	1236c <nrf_gpio_cfg_sense_set>
}
    a2cc:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(pin_has_trigger(pin));
    a2ce:	4e1c      	ldr	r6, [pc, #112]	; (a340 <nrfx_gpiote_trigger_enable+0xa0>)
    a2d0:	f240 33df 	movw	r3, #991	; 0x3df
    a2d4:	4632      	mov	r2, r6
    a2d6:	491b      	ldr	r1, [pc, #108]	; (a344 <nrfx_gpiote_trigger_enable+0xa4>)
    a2d8:	481b      	ldr	r0, [pc, #108]	; (a348 <nrfx_gpiote_trigger_enable+0xa8>)
    a2da:	f006 fa2d 	bl	10738 <assert_print>
    a2de:	f240 31df 	movw	r1, #991	; 0x3df
    a2e2:	4630      	mov	r0, r6
    a2e4:	f006 fa21 	bl	1072a <assert_post_action>
    a2e8:	e7e0      	b.n	a2ac <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    a2ea:	4620      	mov	r0, r4
    a2ec:	f7ff fc98 	bl	9c20 <pin_te_get>
    a2f0:	4604      	mov	r4, r0
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    a2f2:	f7ff fda1 	bl	9e38 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    a2f6:	f100 43a0 	add.w	r3, r0, #1342177280	; 0x50000000
    a2fa:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a2fe:	2200      	movs	r2, #0
    a300:	601a      	str	r2, [r3, #0]
    a302:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    a304:	4a11      	ldr	r2, [pc, #68]	; (a34c <nrfx_gpiote_trigger_enable+0xac>)
    a306:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    a30a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    a30e:	f043 0301 	orr.w	r3, r3, #1
    a312:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    a316:	2d00      	cmp	r5, #0
    a318:	d0d8      	beq.n	a2cc <nrfx_gpiote_trigger_enable+0x2c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    a31a:	2301      	movs	r3, #1
    a31c:	40a3      	lsls	r3, r4
    p_reg->INTENSET = mask;
    a31e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    a322:	e7d3      	b.n	a2cc <nrfx_gpiote_trigger_enable+0x2c>
        NRFX_ASSERT(int_enable);
    a324:	4d06      	ldr	r5, [pc, #24]	; (a340 <nrfx_gpiote_trigger_enable+0xa0>)
    a326:	f240 33ee 	movw	r3, #1006	; 0x3ee
    a32a:	462a      	mov	r2, r5
    a32c:	4908      	ldr	r1, [pc, #32]	; (a350 <nrfx_gpiote_trigger_enable+0xb0>)
    a32e:	4806      	ldr	r0, [pc, #24]	; (a348 <nrfx_gpiote_trigger_enable+0xa8>)
    a330:	f006 fa02 	bl	10738 <assert_print>
    a334:	f240 31ee 	movw	r1, #1006	; 0x3ee
    a338:	4628      	mov	r0, r5
    a33a:	f006 f9f6 	bl	1072a <assert_post_action>
    a33e:	e7be      	b.n	a2be <nrfx_gpiote_trigger_enable+0x1e>
    a340:	00015d70 	.word	0x00015d70
    a344:	00015e00 	.word	0x00015e00
    a348:	00013d44 	.word	0x00013d44
    a34c:	5000d000 	.word	0x5000d000
    a350:	00015e18 	.word	0x00015e18

0000a354 <nrfx_gpiote_trigger_disable>:
{
    a354:	b510      	push	{r4, lr}
    a356:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    a358:	f7ff fc42 	bl	9be0 <pin_in_use_by_te>
    a35c:	b1a0      	cbz	r0, a388 <nrfx_gpiote_trigger_disable+0x34>
    a35e:	4620      	mov	r0, r4
    a360:	f007 ff75 	bl	1224e <pin_is_input>
    a364:	b180      	cbz	r0, a388 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    a366:	4620      	mov	r0, r4
    a368:	f7ff fc5a 	bl	9c20 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    a36c:	2201      	movs	r2, #1
    a36e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    a370:	4b08      	ldr	r3, [pc, #32]	; (a394 <nrfx_gpiote_trigger_disable+0x40>)
    a372:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    a376:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    a37a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    a37e:	f022 0203 	bic.w	r2, r2, #3
    a382:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    a386:	e003      	b.n	a390 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    a388:	2100      	movs	r1, #0
    a38a:	4620      	mov	r0, r4
    a38c:	f007 ffee 	bl	1236c <nrf_gpio_cfg_sense_set>
}
    a390:	bd10      	pop	{r4, pc}
    a392:	bf00      	nop
    a394:	5000d000 	.word	0x5000d000

0000a398 <nrfx_gpiote_pin_uninit>:
{
    a398:	b510      	push	{r4, lr}
    a39a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    a39c:	f7ff fc16 	bl	9bcc <pin_in_use>
    a3a0:	b908      	cbnz	r0, a3a6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    a3a2:	4806      	ldr	r0, [pc, #24]	; (a3bc <nrfx_gpiote_pin_uninit+0x24>)
}
    a3a4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    a3a6:	4620      	mov	r0, r4
    a3a8:	f7ff ffd4 	bl	a354 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    a3ac:	4620      	mov	r0, r4
    a3ae:	f7ff fccf 	bl	9d50 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    a3b2:	4620      	mov	r0, r4
    a3b4:	f007 ff6c 	bl	12290 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    a3b8:	4801      	ldr	r0, [pc, #4]	; (a3c0 <nrfx_gpiote_pin_uninit+0x28>)
    a3ba:	e7f3      	b.n	a3a4 <nrfx_gpiote_pin_uninit+0xc>
    a3bc:	0bad0004 	.word	0x0bad0004
    a3c0:	0bad0000 	.word	0x0bad0000

0000a3c4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    a3c4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    a3c6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    a3c8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a3cc:	2100      	movs	r1, #0
    uint32_t status = 0;
    a3ce:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a3d0:	e003      	b.n	a3da <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    a3d2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    a3d4:	3304      	adds	r3, #4
    a3d6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a3d8:	3101      	adds	r1, #1
    a3da:	2907      	cmp	r1, #7
    a3dc:	d814      	bhi.n	a408 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a3de:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    a3e2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    a3e6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    a3e8:	2a00      	cmp	r2, #0
    a3ea:	d0f2      	beq.n	a3d2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    a3ec:	4a0c      	ldr	r2, [pc, #48]	; (a420 <nrfx_gpiote_irq_handler+0x5c>)
    a3ee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    a3f2:	4210      	tst	r0, r2
    a3f4:	d0ed      	beq.n	a3d2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    a3f6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    a3fa:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a3fe:	2500      	movs	r5, #0
    a400:	6015      	str	r5, [r2, #0]
    a402:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    a404:	4304      	orrs	r4, r0
    a406:	e7e4      	b.n	a3d2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a408:	4b05      	ldr	r3, [pc, #20]	; (a420 <nrfx_gpiote_irq_handler+0x5c>)
    a40a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    a40e:	b91b      	cbnz	r3, a418 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    a410:	4620      	mov	r0, r4
    a412:	f7ff fdab 	bl	9f6c <gpiote_evt_handle>
}
    a416:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    a418:	f7ff fd60 	bl	9edc <port_event_handle>
    a41c:	e7f8      	b.n	a410 <nrfx_gpiote_irq_handler+0x4c>
    a41e:	bf00      	nop
    a420:	5000d000 	.word	0x5000d000

0000a424 <nrf_ipc_receive_event_get>:
{
    a424:	b538      	push	{r3, r4, r5, lr}
    a426:	4604      	mov	r4, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
    a428:	280f      	cmp	r0, #15
    a42a:	d803      	bhi.n	a434 <nrf_ipc_receive_event_get+0x10>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a42c:	00a0      	lsls	r0, r4, #2
}
    a42e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    a432:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(index < IPC_CH_NUM);
    a434:	4d06      	ldr	r5, [pc, #24]	; (a450 <nrf_ipc_receive_event_get+0x2c>)
    a436:	f240 13e7 	movw	r3, #487	; 0x1e7
    a43a:	462a      	mov	r2, r5
    a43c:	4905      	ldr	r1, [pc, #20]	; (a454 <nrf_ipc_receive_event_get+0x30>)
    a43e:	4806      	ldr	r0, [pc, #24]	; (a458 <nrf_ipc_receive_event_get+0x34>)
    a440:	f006 f97a 	bl	10738 <assert_print>
    a444:	f240 11e7 	movw	r1, #487	; 0x1e7
    a448:	4628      	mov	r0, r5
    a44a:	f006 f96e 	bl	1072a <assert_post_action>
    a44e:	e7ed      	b.n	a42c <nrf_ipc_receive_event_get+0x8>
    a450:	00014220 	.word	0x00014220
    a454:	00014254 	.word	0x00014254
    a458:	00013d44 	.word	0x00013d44

0000a45c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	4614      	mov	r4, r2
    NRFX_ASSERT(handler);
    a460:	460d      	mov	r5, r1
    a462:	b121      	cbz	r1, a46e <nrfx_ipc_init+0x12>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    a464:	4b0d      	ldr	r3, [pc, #52]	; (a49c <nrfx_ipc_init+0x40>)
    a466:	791b      	ldrb	r3, [r3, #4]
    a468:	b16b      	cbz	r3, a486 <nrfx_ipc_init+0x2a>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    a46a:	480d      	ldr	r0, [pc, #52]	; (a4a0 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
    a46c:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(handler);
    a46e:	4e0d      	ldr	r6, [pc, #52]	; (a4a4 <nrfx_ipc_init+0x48>)
    a470:	2334      	movs	r3, #52	; 0x34
    a472:	4632      	mov	r2, r6
    a474:	490c      	ldr	r1, [pc, #48]	; (a4a8 <nrfx_ipc_init+0x4c>)
    a476:	480d      	ldr	r0, [pc, #52]	; (a4ac <nrfx_ipc_init+0x50>)
    a478:	f006 f95e 	bl	10738 <assert_print>
    a47c:	2134      	movs	r1, #52	; 0x34
    a47e:	4630      	mov	r0, r6
    a480:	f006 f953 	bl	1072a <assert_post_action>
    a484:	e7ee      	b.n	a464 <nrfx_ipc_init+0x8>
    NRFX_IRQ_ENABLE(IPC_IRQn);
    a486:	202a      	movs	r0, #42	; 0x2a
    a488:	f006 fe51 	bl	1112e <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    a48c:	4b03      	ldr	r3, [pc, #12]	; (a49c <nrfx_ipc_init+0x40>)
    a48e:	2201      	movs	r2, #1
    a490:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
    a492:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
    a494:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
    a496:	4806      	ldr	r0, [pc, #24]	; (a4b0 <nrfx_ipc_init+0x54>)
    a498:	e7e8      	b.n	a46c <nrfx_ipc_init+0x10>
    a49a:	bf00      	nop
    a49c:	200021fc 	.word	0x200021fc
    a4a0:	0bad000c 	.word	0x0bad000c
    a4a4:	00015e24 	.word	0x00015e24
    a4a8:	000151cc 	.word	0x000151cc
    a4ac:	00013d44 	.word	0x00013d44
    a4b0:	0bad0000 	.word	0x0bad0000

0000a4b4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    a4b4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    a4b6:	4604      	mov	r4, r0
    a4b8:	b128      	cbz	r0, a4c6 <nrfx_ipc_config_load+0x12>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a4ba:	4b1f      	ldr	r3, [pc, #124]	; (a538 <nrfx_ipc_config_load+0x84>)
    a4bc:	791b      	ldrb	r3, [r3, #4]
    a4be:	2b01      	cmp	r3, #1
    a4c0:	d10d      	bne.n	a4de <nrfx_ipc_config_load+0x2a>
{
    a4c2:	2300      	movs	r3, #0
    a4c4:	e020      	b.n	a508 <nrfx_ipc_config_load+0x54>
    NRFX_ASSERT(p_config);
    a4c6:	4d1d      	ldr	r5, [pc, #116]	; (a53c <nrfx_ipc_config_load+0x88>)
    a4c8:	2346      	movs	r3, #70	; 0x46
    a4ca:	462a      	mov	r2, r5
    a4cc:	491c      	ldr	r1, [pc, #112]	; (a540 <nrfx_ipc_config_load+0x8c>)
    a4ce:	481d      	ldr	r0, [pc, #116]	; (a544 <nrfx_ipc_config_load+0x90>)
    a4d0:	f006 f932 	bl	10738 <assert_print>
    a4d4:	2146      	movs	r1, #70	; 0x46
    a4d6:	4628      	mov	r0, r5
    a4d8:	f006 f927 	bl	1072a <assert_post_action>
    a4dc:	e7ed      	b.n	a4ba <nrfx_ipc_config_load+0x6>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a4de:	4d17      	ldr	r5, [pc, #92]	; (a53c <nrfx_ipc_config_load+0x88>)
    a4e0:	2347      	movs	r3, #71	; 0x47
    a4e2:	462a      	mov	r2, r5
    a4e4:	4918      	ldr	r1, [pc, #96]	; (a548 <nrfx_ipc_config_load+0x94>)
    a4e6:	4817      	ldr	r0, [pc, #92]	; (a544 <nrfx_ipc_config_load+0x90>)
    a4e8:	f006 f926 	bl	10738 <assert_print>
    a4ec:	2147      	movs	r1, #71	; 0x47
    a4ee:	4628      	mov	r0, r5
    a4f0:	f006 f91b 	bl	1072a <assert_post_action>
    a4f4:	e7e5      	b.n	a4c2 <nrfx_ipc_config_load+0xe>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    a4f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
    a4fa:	b2da      	uxtb	r2, r3
    a4fc:	f502 72a2 	add.w	r2, r2, #324	; 0x144
    a500:	4912      	ldr	r1, [pc, #72]	; (a54c <nrfx_ipc_config_load+0x98>)
    a502:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    a506:	3301      	adds	r3, #1
    a508:	2b0f      	cmp	r3, #15
    a50a:	d9f4      	bls.n	a4f6 <nrfx_ipc_config_load+0x42>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    a50c:	2300      	movs	r3, #0
    a50e:	e00a      	b.n	a526 <nrfx_ipc_config_load+0x72>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    a510:	f103 0210 	add.w	r2, r3, #16
    a514:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
    a518:	b2da      	uxtb	r2, r3
    a51a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
    a51e:	490b      	ldr	r1, [pc, #44]	; (a54c <nrfx_ipc_config_load+0x98>)
    a520:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    a524:	3301      	adds	r3, #1
    a526:	2b0f      	cmp	r3, #15
    a528:	d9f2      	bls.n	a510 <nrfx_ipc_config_load+0x5c>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    a52a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
    a52e:	4b07      	ldr	r3, [pc, #28]	; (a54c <nrfx_ipc_config_load+0x98>)
    a530:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a534:	bd38      	pop	{r3, r4, r5, pc}
    a536:	bf00      	nop
    a538:	200021fc 	.word	0x200021fc
    a53c:	00015e24 	.word	0x00015e24
    a540:	00015e60 	.word	0x00015e60
    a544:	00013d44 	.word	0x00013d44
    a548:	00015e6c 	.word	0x00015e6c
    a54c:	5002a000 	.word	0x5002a000

0000a550 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    a550:	b538      	push	{r3, r4, r5, lr}
    a552:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a554:	4b0b      	ldr	r3, [pc, #44]	; (a584 <nrfx_ipc_receive_event_enable+0x34>)
    a556:	791b      	ldrb	r3, [r3, #4]
    a558:	2b01      	cmp	r3, #1
    a55a:	d106      	bne.n	a56a <nrfx_ipc_receive_event_enable+0x1a>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    a55c:	2301      	movs	r3, #1
    a55e:	fa03 f404 	lsl.w	r4, r3, r4
    a562:	4b09      	ldr	r3, [pc, #36]	; (a588 <nrfx_ipc_receive_event_enable+0x38>)
    a564:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
    a568:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a56a:	4d08      	ldr	r5, [pc, #32]	; (a58c <nrfx_ipc_receive_event_enable+0x3c>)
    a56c:	236c      	movs	r3, #108	; 0x6c
    a56e:	462a      	mov	r2, r5
    a570:	4907      	ldr	r1, [pc, #28]	; (a590 <nrfx_ipc_receive_event_enable+0x40>)
    a572:	4808      	ldr	r0, [pc, #32]	; (a594 <nrfx_ipc_receive_event_enable+0x44>)
    a574:	f006 f8e0 	bl	10738 <assert_print>
    a578:	216c      	movs	r1, #108	; 0x6c
    a57a:	4628      	mov	r0, r5
    a57c:	f006 f8d5 	bl	1072a <assert_post_action>
    a580:	e7ec      	b.n	a55c <nrfx_ipc_receive_event_enable+0xc>
    a582:	bf00      	nop
    a584:	200021fc 	.word	0x200021fc
    a588:	5002a000 	.word	0x5002a000
    a58c:	00015e24 	.word	0x00015e24
    a590:	00015e6c 	.word	0x00015e6c
    a594:	00013d44 	.word	0x00013d44

0000a598 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    a598:	b538      	push	{r3, r4, r5, lr}
    a59a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a59c:	4b0b      	ldr	r3, [pc, #44]	; (a5cc <nrfx_ipc_receive_event_disable+0x34>)
    a59e:	791b      	ldrb	r3, [r3, #4]
    a5a0:	2b01      	cmp	r3, #1
    a5a2:	d106      	bne.n	a5b2 <nrfx_ipc_receive_event_disable+0x1a>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    a5a4:	2301      	movs	r3, #1
    a5a6:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
    a5aa:	4b09      	ldr	r3, [pc, #36]	; (a5d0 <nrfx_ipc_receive_event_disable+0x38>)
    a5ac:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
    a5b0:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    a5b2:	4d08      	ldr	r5, [pc, #32]	; (a5d4 <nrfx_ipc_receive_event_disable+0x3c>)
    a5b4:	2372      	movs	r3, #114	; 0x72
    a5b6:	462a      	mov	r2, r5
    a5b8:	4907      	ldr	r1, [pc, #28]	; (a5d8 <nrfx_ipc_receive_event_disable+0x40>)
    a5ba:	4808      	ldr	r0, [pc, #32]	; (a5dc <nrfx_ipc_receive_event_disable+0x44>)
    a5bc:	f006 f8bc 	bl	10738 <assert_print>
    a5c0:	2172      	movs	r1, #114	; 0x72
    a5c2:	4628      	mov	r0, r5
    a5c4:	f006 f8b1 	bl	1072a <assert_post_action>
    a5c8:	e7ec      	b.n	a5a4 <nrfx_ipc_receive_event_disable+0xc>
    a5ca:	bf00      	nop
    a5cc:	200021fc 	.word	0x200021fc
    a5d0:	5002a000 	.word	0x5002a000
    a5d4:	00015e24 	.word	0x00015e24
    a5d8:	00015e6c 	.word	0x00015e6c
    a5dc:	00013d44 	.word	0x00013d44

0000a5e0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    a5e0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->INTPEND;
    a5e2:	4b0e      	ldr	r3, [pc, #56]	; (a61c <nrfx_ipc_irq_handler+0x3c>)
    a5e4:	f8d3 530c 	ldr.w	r5, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
    a5e8:	462c      	mov	r4, r5
    while (bitmask)
    a5ea:	e00f      	b.n	a60c <nrfx_ipc_irq_handler+0x2c>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
    a5ec:	fa94 f0a4 	rbit	r0, r4
    a5f0:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    a5f4:	2301      	movs	r3, #1
    a5f6:	4083      	lsls	r3, r0
    a5f8:	ea24 0403 	bic.w	r4, r4, r3
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    a5fc:	f7ff ff12 	bl	a424 <nrf_ipc_receive_event_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a600:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    a604:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    a608:	2300      	movs	r3, #0
    a60a:	6003      	str	r3, [r0, #0]
    while (bitmask)
    a60c:	2c00      	cmp	r4, #0
    a60e:	d1ed      	bne.n	a5ec <nrfx_ipc_irq_handler+0xc>
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    a610:	4b03      	ldr	r3, [pc, #12]	; (a620 <nrfx_ipc_irq_handler+0x40>)
    a612:	681a      	ldr	r2, [r3, #0]
    a614:	6899      	ldr	r1, [r3, #8]
    a616:	4628      	mov	r0, r5
    a618:	4790      	blx	r2
}
    a61a:	bd38      	pop	{r3, r4, r5, pc}
    a61c:	5002a000 	.word	0x5002a000
    a620:	200021fc 	.word	0x200021fc

0000a624 <nrf_gpio_pin_port_decode>:
{
    a624:	b538      	push	{r3, r4, r5, lr}
    a626:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a628:	6800      	ldr	r0, [r0, #0]
    a62a:	f007 ff21 	bl	12470 <nrf_gpio_pin_present_check>
    a62e:	b1b0      	cbz	r0, a65e <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    a630:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    a632:	f003 021f 	and.w	r2, r3, #31
    a636:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a638:	095b      	lsrs	r3, r3, #5
    a63a:	d01e      	beq.n	a67a <nrf_gpio_pin_port_decode+0x56>
    a63c:	2b01      	cmp	r3, #1
    a63e:	d01e      	beq.n	a67e <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    a640:	4c10      	ldr	r4, [pc, #64]	; (a684 <nrf_gpio_pin_port_decode+0x60>)
    a642:	f44f 7313 	mov.w	r3, #588	; 0x24c
    a646:	4622      	mov	r2, r4
    a648:	490f      	ldr	r1, [pc, #60]	; (a688 <nrf_gpio_pin_port_decode+0x64>)
    a64a:	4810      	ldr	r0, [pc, #64]	; (a68c <nrf_gpio_pin_port_decode+0x68>)
    a64c:	f006 f874 	bl	10738 <assert_print>
    a650:	f44f 7113 	mov.w	r1, #588	; 0x24c
    a654:	4620      	mov	r0, r4
    a656:	f006 f868 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    a65a:	480d      	ldr	r0, [pc, #52]	; (a690 <nrf_gpio_pin_port_decode+0x6c>)
    a65c:	e010      	b.n	a680 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    a65e:	4d09      	ldr	r5, [pc, #36]	; (a684 <nrf_gpio_pin_port_decode+0x60>)
    a660:	f240 2347 	movw	r3, #583	; 0x247
    a664:	462a      	mov	r2, r5
    a666:	490b      	ldr	r1, [pc, #44]	; (a694 <nrf_gpio_pin_port_decode+0x70>)
    a668:	4808      	ldr	r0, [pc, #32]	; (a68c <nrf_gpio_pin_port_decode+0x68>)
    a66a:	f006 f865 	bl	10738 <assert_print>
    a66e:	f240 2147 	movw	r1, #583	; 0x247
    a672:	4628      	mov	r0, r5
    a674:	f006 f859 	bl	1072a <assert_post_action>
    a678:	e7da      	b.n	a630 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    a67a:	4805      	ldr	r0, [pc, #20]	; (a690 <nrf_gpio_pin_port_decode+0x6c>)
    a67c:	e000      	b.n	a680 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a67e:	4806      	ldr	r0, [pc, #24]	; (a698 <nrf_gpio_pin_port_decode+0x74>)
}
    a680:	bd38      	pop	{r3, r4, r5, pc}
    a682:	bf00      	nop
    a684:	000141c0 	.word	0x000141c0
    a688:	000156e0 	.word	0x000156e0
    a68c:	00013d44 	.word	0x00013d44
    a690:	50842500 	.word	0x50842500
    a694:	000141f4 	.word	0x000141f4
    a698:	50842800 	.word	0x50842800

0000a69c <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    a69c:	b570      	push	{r4, r5, r6, lr}
    a69e:	4604      	mov	r4, r0
    a6a0:	460e      	mov	r6, r1
    a6a2:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    a6a4:	6813      	ldr	r3, [r2, #0]
    a6a6:	b123      	cbz	r3, a6b2 <spim_xfer+0x16>
    a6a8:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
    a6ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    a6b0:	d106      	bne.n	a6c0 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    a6b2:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    a6b4:	b141      	cbz	r1, a6c8 <spim_xfer+0x2c>
    a6b6:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    a6ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    a6be:	d003      	beq.n	a6c8 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
    a6c0:	2300      	movs	r3, #0
    a6c2:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    a6c4:	4818      	ldr	r0, [pc, #96]	; (a728 <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a6c6:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    a6c8:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a6ca:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a6ce:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    a6d2:	6891      	ldr	r1, [r2, #8]
    a6d4:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a6d6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a6da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6de:	2300      	movs	r3, #0
    a6e0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    a6e4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
    a6e8:	4629      	mov	r1, r5
    a6ea:	4620      	mov	r0, r4
    a6ec:	f007 fedb 	bl	124a6 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    a6f0:	f015 0208 	ands.w	r2, r5, #8
    a6f4:	d101      	bne.n	a6fa <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6f6:	2301      	movs	r3, #1
    a6f8:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
    a6fa:	6833      	ldr	r3, [r6, #0]
    a6fc:	b14b      	cbz	r3, a712 <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    a6fe:	f015 0f04 	tst.w	r5, #4
    a702:	bf0c      	ite	eq
    a704:	2101      	moveq	r1, #1
    a706:	2100      	movne	r1, #0
    a708:	4620      	mov	r0, r4
    a70a:	f007 fec3 	bl	12494 <spim_int_enable>
    return err_code;
    a70e:	4807      	ldr	r0, [pc, #28]	; (a72c <spim_xfer+0x90>)
    a710:	e7d9      	b.n	a6c6 <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    a712:	b91a      	cbnz	r2, a71c <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a714:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    a718:	2b00      	cmp	r3, #0
    a71a:	d0fb      	beq.n	a714 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
    a71c:	2100      	movs	r1, #0
    a71e:	4630      	mov	r0, r6
    a720:	f007 fef8 	bl	12514 <set_ss_pin_state>
    return err_code;
    a724:	4801      	ldr	r0, [pc, #4]	; (a72c <spim_xfer+0x90>)
    a726:	e7ce      	b.n	a6c6 <spim_xfer+0x2a>
    a728:	0bad000a 	.word	0x0bad000a
    a72c:	0bad0000 	.word	0x0bad0000

0000a730 <irq_handler>:
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    return nrf_spim_event_address_get(p_spim, NRF_SPIM_EVENT_END);
}

static void irq_handler(NRF_SPIM_Type * p_spim, spim_control_block_t * p_cb)
{
    a730:	b538      	push	{r3, r4, r5, lr}
    a732:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    a736:	b153      	cbz	r3, a74e <irq_handler+0x1e>
    a738:	460c      	mov	r4, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a73a:	2300      	movs	r3, #0
    a73c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    a740:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
        {
            anomaly_198_disable();
        }
#endif
        nrf_spim_event_clear(p_spim, NRF_SPIM_EVENT_END);
        NRFX_ASSERT(p_cb->handler);
    a744:	680b      	ldr	r3, [r1, #0]
    a746:	b11b      	cbz	r3, a750 <irq_handler+0x20>
        NRFX_LOG_DEBUG("Event: NRF_SPIM_EVENT_END.");
        finish_transfer(p_cb);
    a748:	4620      	mov	r0, r4
    a74a:	f007 fef3 	bl	12534 <finish_transfer>
    }
}
    a74e:	bd38      	pop	{r3, r4, r5, pc}
        NRFX_ASSERT(p_cb->handler);
    a750:	4d06      	ldr	r5, [pc, #24]	; (a76c <irq_handler+0x3c>)
    a752:	f240 333b 	movw	r3, #827	; 0x33b
    a756:	462a      	mov	r2, r5
    a758:	4905      	ldr	r1, [pc, #20]	; (a770 <irq_handler+0x40>)
    a75a:	4806      	ldr	r0, [pc, #24]	; (a774 <irq_handler+0x44>)
    a75c:	f005 ffec 	bl	10738 <assert_print>
    a760:	f240 313b 	movw	r1, #827	; 0x33b
    a764:	4628      	mov	r0, r5
    a766:	f005 ffe0 	bl	1072a <assert_post_action>
    a76a:	e7ed      	b.n	a748 <irq_handler+0x18>
    a76c:	00015e9c 	.word	0x00015e9c
    a770:	00015ed8 	.word	0x00015ed8
    a774:	00013d44 	.word	0x00013d44

0000a778 <nrfx_spim_init>:
{
    a778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a77c:	4604      	mov	r4, r0
    a77e:	4616      	mov	r6, r2
    a780:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
    a782:	4688      	mov	r8, r1
    a784:	b1d9      	cbz	r1, a7be <nrfx_spim_init+0x46>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a786:	7927      	ldrb	r7, [r4, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    a788:	6825      	ldr	r5, [r4, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a78a:	493e      	ldr	r1, [pc, #248]	; (a884 <nrfx_spim_init+0x10c>)
    a78c:	eb01 1147 	add.w	r1, r1, r7, lsl #5
    a790:	7f0b      	ldrb	r3, [r1, #28]
    a792:	2b00      	cmp	r3, #0
    a794:	d16a      	bne.n	a86c <nrfx_spim_init+0xf4>
    if (
    a796:	2f00      	cmp	r7, #0
    a798:	d16b      	bne.n	a872 <nrfx_spim_init+0xfa>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    a79a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a79e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
    a7a2:	d068      	beq.n	a876 <nrfx_spim_init+0xfe>
    a7a4:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    a7a8:	d067      	beq.n	a87a <nrfx_spim_init+0x102>
        ((p_config->use_hw_ss) &&
    a7aa:	f898 3011 	ldrb.w	r3, [r8, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    a7ae:	2b00      	cmp	r3, #0
    a7b0:	d165      	bne.n	a87e <nrfx_spim_init+0x106>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
    a7b2:	f898 300f 	ldrb.w	r3, [r8, #15]
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
    a7b6:	2bff      	cmp	r3, #255	; 0xff
    a7b8:	d00f      	beq.n	a7da <nrfx_spim_init+0x62>
        return err_code;
    a7ba:	4833      	ldr	r0, [pc, #204]	; (a888 <nrfx_spim_init+0x110>)
    a7bc:	e057      	b.n	a86e <nrfx_spim_init+0xf6>
    NRFX_ASSERT(p_config);
    a7be:	4f33      	ldr	r7, [pc, #204]	; (a88c <nrfx_spim_init+0x114>)
    a7c0:	f44f 73bf 	mov.w	r3, #382	; 0x17e
    a7c4:	463a      	mov	r2, r7
    a7c6:	4932      	ldr	r1, [pc, #200]	; (a890 <nrfx_spim_init+0x118>)
    a7c8:	4832      	ldr	r0, [pc, #200]	; (a894 <nrfx_spim_init+0x11c>)
    a7ca:	f005 ffb5 	bl	10738 <assert_print>
    a7ce:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    a7d2:	4638      	mov	r0, r7
    a7d4:	f005 ffa9 	bl	1072a <assert_post_action>
    a7d8:	e7d5      	b.n	a786 <nrfx_spim_init+0xe>
    p_cb->handler = handler;
    a7da:	f8df b0a8 	ldr.w	fp, [pc, #168]	; a884 <nrfx_spim_init+0x10c>
    a7de:	ea4f 1a47 	mov.w	sl, r7, lsl #5
    a7e2:	460a      	mov	r2, r1
    a7e4:	f84b 600a 	str.w	r6, [fp, sl]
    p_cb->p_context = p_context;
    a7e8:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    a7ec:	f898 0013 	ldrb.w	r0, [r8, #19]
    a7f0:	7f89      	ldrb	r1, [r1, #30]
    a7f2:	f360 0100 	bfi	r1, r0, #0, #1
    a7f6:	7791      	strb	r1, [r2, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    a7f8:	f898 0004 	ldrb.w	r0, [r8, #4]
    a7fc:	b2c9      	uxtb	r1, r1
    a7fe:	f360 0141 	bfi	r1, r0, #1, #1
    a802:	7791      	strb	r1, [r2, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
    a804:	f898 0011 	ldrb.w	r0, [r8, #17]
    a808:	b2c9      	uxtb	r1, r1
    a80a:	f360 0182 	bfi	r1, r0, #2, #1
    a80e:	7791      	strb	r1, [r2, #30]
    p_cb->ss_pin = p_config->ss_pin;
    a810:	f898 3003 	ldrb.w	r3, [r8, #3]
    a814:	77d3      	strb	r3, [r2, #31]
    configure_pins(p_instance, p_config);
    a816:	4641      	mov	r1, r8
    a818:	4620      	mov	r0, r4
    a81a:	f007 feba 	bl	12592 <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    a81e:	f898 3010 	ldrb.w	r3, [r8, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
    a822:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    a826:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
    a82a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    a82e:	f898 200d 	ldrb.w	r2, [r8, #13]
    a832:	f898 100c 	ldrb.w	r1, [r8, #12]
    a836:	4628      	mov	r0, r5
    a838:	f007 fe05 	bl	12446 <nrf_spim_configure>
    nrf_spim_orc_set(p_spim, p_config->orc);
    a83c:	f898 3006 	ldrb.w	r3, [r8, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    a840:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    a844:	2307      	movs	r3, #7
    a846:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (p_cb->handler)
    a84a:	f85b 300a 	ldr.w	r3, [fp, sl]
    a84e:	b123      	cbz	r3, a85a <nrfx_spim_init+0xe2>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    a850:	6820      	ldr	r0, [r4, #0]
    a852:	f340 3007 	sbfx	r0, r0, #12, #8
    a856:	f006 fc6a 	bl	1112e <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    a85a:	4b0a      	ldr	r3, [pc, #40]	; (a884 <nrfx_spim_init+0x10c>)
    a85c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    a860:	2200      	movs	r2, #0
    a862:	775a      	strb	r2, [r3, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a864:	2201      	movs	r2, #1
    a866:	771a      	strb	r2, [r3, #28]
    return err_code;
    a868:	480b      	ldr	r0, [pc, #44]	; (a898 <nrfx_spim_init+0x120>)
    a86a:	e000      	b.n	a86e <nrfx_spim_init+0xf6>
        return err_code;
    a86c:	480b      	ldr	r0, [pc, #44]	; (a89c <nrfx_spim_init+0x124>)
}
    a86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
    a872:	4805      	ldr	r0, [pc, #20]	; (a888 <nrfx_spim_init+0x110>)
    a874:	e7fb      	b.n	a86e <nrfx_spim_init+0xf6>
    a876:	4804      	ldr	r0, [pc, #16]	; (a888 <nrfx_spim_init+0x110>)
    a878:	e7f9      	b.n	a86e <nrfx_spim_init+0xf6>
    a87a:	4803      	ldr	r0, [pc, #12]	; (a888 <nrfx_spim_init+0x110>)
    a87c:	e7f7      	b.n	a86e <nrfx_spim_init+0xf6>
    a87e:	4802      	ldr	r0, [pc, #8]	; (a888 <nrfx_spim_init+0x110>)
    a880:	e7f5      	b.n	a86e <nrfx_spim_init+0xf6>
    a882:	bf00      	nop
    a884:	20002208 	.word	0x20002208
    a888:	0bad0003 	.word	0x0bad0003
    a88c:	00015e9c 	.word	0x00015e9c
    a890:	00015e60 	.word	0x00015e60
    a894:	00013d44 	.word	0x00013d44
    a898:	0bad0000 	.word	0x0bad0000
    a89c:	0bad0005 	.word	0x0bad0005

0000a8a0 <nrfx_spim_uninit>:
{
    a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8a2:	4605      	mov	r5, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a8a4:	7904      	ldrb	r4, [r0, #4]
    a8a6:	4e27      	ldr	r6, [pc, #156]	; (a944 <nrfx_spim_uninit+0xa4>)
    a8a8:	eb06 1644 	add.w	r6, r6, r4, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a8ac:	7f33      	ldrb	r3, [r6, #28]
    a8ae:	b303      	cbz	r3, a8f2 <nrfx_spim_uninit+0x52>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    a8b0:	682d      	ldr	r5, [r5, #0]
    if (p_cb->handler)
    a8b2:	0163      	lsls	r3, r4, #5
    a8b4:	4a23      	ldr	r2, [pc, #140]	; (a944 <nrfx_spim_uninit+0xa4>)
    a8b6:	58d3      	ldr	r3, [r2, r3]
    a8b8:	b15b      	cbz	r3, a8d2 <nrfx_spim_uninit+0x32>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    a8ba:	f345 3007 	sbfx	r0, r5, #12, #8
    a8be:	f006 fc3b 	bl	11138 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a8c2:	4b21      	ldr	r3, [pc, #132]	; (a948 <nrfx_spim_uninit+0xa8>)
    a8c4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
    a8c8:	4b1e      	ldr	r3, [pc, #120]	; (a944 <nrfx_spim_uninit+0xa4>)
    a8ca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    a8ce:	7f5b      	ldrb	r3, [r3, #29]
    a8d0:	b9eb      	cbnz	r3, a90e <nrfx_spim_uninit+0x6e>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    a8d2:	2300      	movs	r3, #0
    a8d4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
    a8d8:	4b1a      	ldr	r3, [pc, #104]	; (a944 <nrfx_spim_uninit+0xa4>)
    a8da:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    a8de:	7f9b      	ldrb	r3, [r3, #30]
    a8e0:	f013 0f01 	tst.w	r3, #1
    a8e4:	d018      	beq.n	a918 <nrfx_spim_uninit+0x78>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    a8e6:	4b17      	ldr	r3, [pc, #92]	; (a944 <nrfx_spim_uninit+0xa4>)
    a8e8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    a8ec:	2200      	movs	r2, #0
    a8ee:	771a      	strb	r2, [r3, #28]
}
    a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a8f2:	4f16      	ldr	r7, [pc, #88]	; (a94c <nrfx_spim_uninit+0xac>)
    a8f4:	f240 230f 	movw	r3, #527	; 0x20f
    a8f8:	463a      	mov	r2, r7
    a8fa:	4915      	ldr	r1, [pc, #84]	; (a950 <nrfx_spim_uninit+0xb0>)
    a8fc:	4815      	ldr	r0, [pc, #84]	; (a954 <nrfx_spim_uninit+0xb4>)
    a8fe:	f005 ff1b 	bl	10738 <assert_print>
    a902:	f240 210f 	movw	r1, #527	; 0x20f
    a906:	4638      	mov	r0, r7
    a908:	f005 ff0f 	bl	1072a <assert_post_action>
    a90c:	e7d0      	b.n	a8b0 <nrfx_spim_uninit+0x10>
            spim_abort(p_spim, p_cb);
    a90e:	4631      	mov	r1, r6
    a910:	4628      	mov	r0, r5
    a912:	f007 fec6 	bl	126a2 <spim_abort>
    a916:	e7dc      	b.n	a8d2 <nrfx_spim_uninit+0x32>
    return p_reg->PSEL.SCK;
    a918:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    a91c:	f007 feb9 	bl	12692 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    a920:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    a924:	f007 feb5 	bl	12692 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    a928:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    a92c:	f007 feb1 	bl	12692 <spim_pin_uninit>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    a930:	4b04      	ldr	r3, [pc, #16]	; (a944 <nrfx_spim_uninit+0xa4>)
    a932:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    a936:	7fd8      	ldrb	r0, [r3, #31]
    a938:	28ff      	cmp	r0, #255	; 0xff
    a93a:	d0d4      	beq.n	a8e6 <nrfx_spim_uninit+0x46>
            nrf_gpio_cfg_default(p_cb->ss_pin);
    a93c:	f007 fe96 	bl	1266c <nrf_gpio_cfg_default>
    a940:	e7d1      	b.n	a8e6 <nrfx_spim_uninit+0x46>
    a942:	bf00      	nop
    a944:	20002208 	.word	0x20002208
    a948:	00080152 	.word	0x00080152
    a94c:	00015e9c 	.word	0x00015e9c
    a950:	00015ee8 	.word	0x00015ee8
    a954:	00013d44 	.word	0x00013d44

0000a958 <nrfx_spim_xfer>:
{
    a958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a95c:	4605      	mov	r5, r0
    a95e:	460c      	mov	r4, r1
    a960:	4690      	mov	r8, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a962:	7906      	ldrb	r6, [r0, #4]
    a964:	4f4e      	ldr	r7, [pc, #312]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a966:	eb07 1746 	add.w	r7, r7, r6, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    a96a:	7f3b      	ldrb	r3, [r7, #28]
    a96c:	2b00      	cmp	r3, #0
    a96e:	d053      	beq.n	aa18 <nrfx_spim_xfer+0xc0>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    a970:	6823      	ldr	r3, [r4, #0]
    a972:	2b00      	cmp	r3, #0
    a974:	d05f      	beq.n	aa36 <nrfx_spim_xfer+0xde>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    a976:	68a3      	ldr	r3, [r4, #8]
    a978:	2b00      	cmp	r3, #0
    a97a:	d06e      	beq.n	aa5a <nrfx_spim_xfer+0x102>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    a97c:	792b      	ldrb	r3, [r5, #4]
    a97e:	b93b      	cbnz	r3, a990 <nrfx_spim_xfer+0x38>
    a980:	68e3      	ldr	r3, [r4, #12]
    a982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a986:	d203      	bcs.n	a990 <nrfx_spim_xfer+0x38>
    a988:	6863      	ldr	r3, [r4, #4]
    a98a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a98e:	d30d      	bcc.n	a9ac <nrfx_spim_xfer+0x54>
    a990:	f8df 9110 	ldr.w	r9, [pc, #272]	; aaa4 <nrfx_spim_xfer+0x14c>
    a994:	f240 23e1 	movw	r3, #737	; 0x2e1
    a998:	464a      	mov	r2, r9
    a99a:	4943      	ldr	r1, [pc, #268]	; (aaa8 <nrfx_spim_xfer+0x150>)
    a99c:	4843      	ldr	r0, [pc, #268]	; (aaac <nrfx_spim_xfer+0x154>)
    a99e:	f005 fecb 	bl	10738 <assert_print>
    a9a2:	f240 21e1 	movw	r1, #737	; 0x2e1
    a9a6:	4648      	mov	r0, r9
    a9a8:	f005 febf 	bl	1072a <assert_post_action>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
    a9ac:	f018 0f08 	tst.w	r8, #8
    a9b0:	d00c      	beq.n	a9cc <nrfx_spim_xfer+0x74>
    a9b2:	4b3b      	ldr	r3, [pc, #236]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a9b4:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    a9b8:	7f9b      	ldrb	r3, [r3, #30]
    a9ba:	f013 0f04 	tst.w	r3, #4
    a9be:	d105      	bne.n	a9cc <nrfx_spim_xfer+0x74>
    a9c0:	4b37      	ldr	r3, [pc, #220]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a9c2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    a9c6:	7fdb      	ldrb	r3, [r3, #31]
    a9c8:	2bff      	cmp	r3, #255	; 0xff
    a9ca:	d158      	bne.n	aa7e <nrfx_spim_xfer+0x126>
    if (p_cb->transfer_in_progress)
    a9cc:	4b34      	ldr	r3, [pc, #208]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a9ce:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    a9d2:	7f5b      	ldrb	r3, [r3, #29]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d161      	bne.n	aa9c <nrfx_spim_xfer+0x144>
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    a9d8:	0173      	lsls	r3, r6, #5
    a9da:	4a31      	ldr	r2, [pc, #196]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a9dc:	58d3      	ldr	r3, [r2, r3]
    a9de:	b133      	cbz	r3, a9ee <nrfx_spim_xfer+0x96>
    a9e0:	f018 0f14 	tst.w	r8, #20
    a9e4:	d103      	bne.n	a9ee <nrfx_spim_xfer+0x96>
            p_cb->transfer_in_progress = true;
    a9e6:	eb02 1346 	add.w	r3, r2, r6, lsl #5
    a9ea:	2201      	movs	r2, #1
    a9ec:	775a      	strb	r2, [r3, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
    a9ee:	492c      	ldr	r1, [pc, #176]	; (aaa0 <nrfx_spim_xfer+0x148>)
    a9f0:	eb01 1c46 	add.w	ip, r1, r6, lsl #5
    a9f4:	f10c 0c0c 	add.w	ip, ip, #12
    a9f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a9fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    set_ss_pin_state(p_cb, true);
    aa00:	2101      	movs	r1, #1
    aa02:	4638      	mov	r0, r7
    aa04:	f007 fd86 	bl	12514 <set_ss_pin_state>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    aa08:	4643      	mov	r3, r8
    aa0a:	4622      	mov	r2, r4
    aa0c:	4639      	mov	r1, r7
    aa0e:	6828      	ldr	r0, [r5, #0]
    aa10:	f7ff fe44 	bl	a69c <spim_xfer>
}
    aa14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    aa18:	f8df 9088 	ldr.w	r9, [pc, #136]	; aaa4 <nrfx_spim_xfer+0x14c>
    aa1c:	f240 23de 	movw	r3, #734	; 0x2de
    aa20:	464a      	mov	r2, r9
    aa22:	4923      	ldr	r1, [pc, #140]	; (aab0 <nrfx_spim_xfer+0x158>)
    aa24:	4821      	ldr	r0, [pc, #132]	; (aaac <nrfx_spim_xfer+0x154>)
    aa26:	f005 fe87 	bl	10738 <assert_print>
    aa2a:	f240 21de 	movw	r1, #734	; 0x2de
    aa2e:	4648      	mov	r0, r9
    aa30:	f005 fe7b 	bl	1072a <assert_post_action>
    aa34:	e79c      	b.n	a970 <nrfx_spim_xfer+0x18>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    aa36:	6863      	ldr	r3, [r4, #4]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d09c      	beq.n	a976 <nrfx_spim_xfer+0x1e>
    aa3c:	f8df 9064 	ldr.w	r9, [pc, #100]	; aaa4 <nrfx_spim_xfer+0x14c>
    aa40:	f240 23df 	movw	r3, #735	; 0x2df
    aa44:	464a      	mov	r2, r9
    aa46:	491b      	ldr	r1, [pc, #108]	; (aab4 <nrfx_spim_xfer+0x15c>)
    aa48:	4818      	ldr	r0, [pc, #96]	; (aaac <nrfx_spim_xfer+0x154>)
    aa4a:	f005 fe75 	bl	10738 <assert_print>
    aa4e:	f240 21df 	movw	r1, #735	; 0x2df
    aa52:	4648      	mov	r0, r9
    aa54:	f005 fe69 	bl	1072a <assert_post_action>
    aa58:	e78d      	b.n	a976 <nrfx_spim_xfer+0x1e>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    aa5a:	68e3      	ldr	r3, [r4, #12]
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d08d      	beq.n	a97c <nrfx_spim_xfer+0x24>
    aa60:	f8df 9040 	ldr.w	r9, [pc, #64]	; aaa4 <nrfx_spim_xfer+0x14c>
    aa64:	f44f 7338 	mov.w	r3, #736	; 0x2e0
    aa68:	464a      	mov	r2, r9
    aa6a:	4913      	ldr	r1, [pc, #76]	; (aab8 <nrfx_spim_xfer+0x160>)
    aa6c:	480f      	ldr	r0, [pc, #60]	; (aaac <nrfx_spim_xfer+0x154>)
    aa6e:	f005 fe63 	bl	10738 <assert_print>
    aa72:	f44f 7138 	mov.w	r1, #736	; 0x2e0
    aa76:	4648      	mov	r0, r9
    aa78:	f005 fe57 	bl	1072a <assert_post_action>
    aa7c:	e77e      	b.n	a97c <nrfx_spim_xfer+0x24>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
    aa7e:	f8df 9024 	ldr.w	r9, [pc, #36]	; aaa4 <nrfx_spim_xfer+0x14c>
    aa82:	f44f 7339 	mov.w	r3, #740	; 0x2e4
    aa86:	464a      	mov	r2, r9
    aa88:	490c      	ldr	r1, [pc, #48]	; (aabc <nrfx_spim_xfer+0x164>)
    aa8a:	4808      	ldr	r0, [pc, #32]	; (aaac <nrfx_spim_xfer+0x154>)
    aa8c:	f005 fe54 	bl	10738 <assert_print>
    aa90:	f44f 7139 	mov.w	r1, #740	; 0x2e4
    aa94:	4648      	mov	r0, r9
    aa96:	f005 fe48 	bl	1072a <assert_post_action>
    aa9a:	e797      	b.n	a9cc <nrfx_spim_xfer+0x74>
        return err_code;
    aa9c:	4808      	ldr	r0, [pc, #32]	; (aac0 <nrfx_spim_xfer+0x168>)
    aa9e:	e7b9      	b.n	aa14 <nrfx_spim_xfer+0xbc>
    aaa0:	20002208 	.word	0x20002208
    aaa4:	00015e9c 	.word	0x00015e9c
    aaa8:	00015fa4 	.word	0x00015fa4
    aaac:	00013d44 	.word	0x00013d44
    aab0:	00015ee8 	.word	0x00015ee8
    aab4:	00015f14 	.word	0x00015f14
    aab8:	00015f5c 	.word	0x00015f5c
    aabc:	00016048 	.word	0x00016048
    aac0:	0bad000b 	.word	0x0bad000b

0000aac4 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    aac4:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
    aac6:	4902      	ldr	r1, [pc, #8]	; (aad0 <nrfx_spim_3_irq_handler+0xc>)
    aac8:	4802      	ldr	r0, [pc, #8]	; (aad4 <nrfx_spim_3_irq_handler+0x10>)
    aaca:	f7ff fe31 	bl	a730 <irq_handler>
}
    aace:	bd08      	pop	{r3, pc}
    aad0:	20002208 	.word	0x20002208
    aad4:	5000c000 	.word	0x5000c000

0000aad8 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    aad8:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    aada:	f010 0f01 	tst.w	r0, #1
    aade:	d108      	bne.n	aaf2 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    aae0:	4806      	ldr	r0, [pc, #24]	; (aafc <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    aae2:	f013 0f02 	tst.w	r3, #2
    aae6:	d000      	beq.n	aaea <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    aae8:	4805      	ldr	r0, [pc, #20]	; (ab00 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    aaea:	f013 0f04 	tst.w	r3, #4
    aaee:	d102      	bne.n	aaf6 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    aaf0:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    aaf2:	4804      	ldr	r0, [pc, #16]	; (ab04 <twi_process_error+0x2c>)
    aaf4:	e7f5      	b.n	aae2 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    aaf6:	4804      	ldr	r0, [pc, #16]	; (ab08 <twi_process_error+0x30>)
    return ret;
    aaf8:	e7fa      	b.n	aaf0 <twi_process_error+0x18>
    aafa:	bf00      	nop
    aafc:	0bad0001 	.word	0x0bad0001
    ab00:	0bae0001 	.word	0x0bae0001
    ab04:	0bae0000 	.word	0x0bae0000
    ab08:	0bae0002 	.word	0x0bae0002

0000ab0c <nrf_gpio_pin_port_decode>:
{
    ab0c:	b538      	push	{r3, r4, r5, lr}
    ab0e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ab10:	6800      	ldr	r0, [r0, #0]
    ab12:	f007 fdd7 	bl	126c4 <nrf_gpio_pin_present_check>
    ab16:	b1b0      	cbz	r0, ab46 <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    ab18:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ab1a:	f003 021f 	and.w	r2, r3, #31
    ab1e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ab20:	095b      	lsrs	r3, r3, #5
    ab22:	d01e      	beq.n	ab62 <nrf_gpio_pin_port_decode+0x56>
    ab24:	2b01      	cmp	r3, #1
    ab26:	d01e      	beq.n	ab66 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    ab28:	4c10      	ldr	r4, [pc, #64]	; (ab6c <nrf_gpio_pin_port_decode+0x60>)
    ab2a:	f44f 7313 	mov.w	r3, #588	; 0x24c
    ab2e:	4622      	mov	r2, r4
    ab30:	490f      	ldr	r1, [pc, #60]	; (ab70 <nrf_gpio_pin_port_decode+0x64>)
    ab32:	4810      	ldr	r0, [pc, #64]	; (ab74 <nrf_gpio_pin_port_decode+0x68>)
    ab34:	f005 fe00 	bl	10738 <assert_print>
    ab38:	f44f 7113 	mov.w	r1, #588	; 0x24c
    ab3c:	4620      	mov	r0, r4
    ab3e:	f005 fdf4 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    ab42:	480d      	ldr	r0, [pc, #52]	; (ab78 <nrf_gpio_pin_port_decode+0x6c>)
    ab44:	e010      	b.n	ab68 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ab46:	4d09      	ldr	r5, [pc, #36]	; (ab6c <nrf_gpio_pin_port_decode+0x60>)
    ab48:	f240 2347 	movw	r3, #583	; 0x247
    ab4c:	462a      	mov	r2, r5
    ab4e:	490b      	ldr	r1, [pc, #44]	; (ab7c <nrf_gpio_pin_port_decode+0x70>)
    ab50:	4808      	ldr	r0, [pc, #32]	; (ab74 <nrf_gpio_pin_port_decode+0x68>)
    ab52:	f005 fdf1 	bl	10738 <assert_print>
    ab56:	f240 2147 	movw	r1, #583	; 0x247
    ab5a:	4628      	mov	r0, r5
    ab5c:	f005 fde5 	bl	1072a <assert_post_action>
    ab60:	e7da      	b.n	ab18 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    ab62:	4805      	ldr	r0, [pc, #20]	; (ab78 <nrf_gpio_pin_port_decode+0x6c>)
    ab64:	e000      	b.n	ab68 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ab66:	4806      	ldr	r0, [pc, #24]	; (ab80 <nrf_gpio_pin_port_decode+0x74>)
}
    ab68:	bd38      	pop	{r3, r4, r5, pc}
    ab6a:	bf00      	nop
    ab6c:	000141c0 	.word	0x000141c0
    ab70:	000156e0 	.word	0x000156e0
    ab74:	00013d44 	.word	0x00013d44
    ab78:	50842500 	.word	0x50842500
    ab7c:	000141f4 	.word	0x000141f4
    ab80:	50842800 	.word	0x50842800

0000ab84 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    ab84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab88:	4605      	mov	r5, r0
    ab8a:	460c      	mov	r4, r1
    ab8c:	4616      	mov	r6, r2
    ab8e:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    ab90:	2300      	movs	r3, #0
    ab92:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    ab96:	6853      	ldr	r3, [r2, #4]
    ab98:	b133      	cbz	r3, aba8 <twim_xfer+0x24>
    ab9a:	68d3      	ldr	r3, [r2, #12]
    ab9c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    aba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    aba4:	f040 8167 	bne.w	ae76 <twim_xfer+0x2f2>
    p_reg->INTENCLR = mask;
    aba8:	4bb7      	ldr	r3, [pc, #732]	; (ae88 <twim_xfer+0x304>)
    abaa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    abae:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    abb2:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    abb6:	2b00      	cmp	r3, #0
    abb8:	d136      	bne.n	ac28 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    abba:	f017 0f14 	tst.w	r7, #20
    abbe:	bf0c      	ite	eq
    abc0:	2301      	moveq	r3, #1
    abc2:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    abc4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    abc8:	f105 0c0c 	add.w	ip, r5, #12
    abcc:	46b6      	mov	lr, r6
    abce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    abd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    abd6:	f8de 3000 	ldr.w	r3, [lr]
    abda:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    abde:	f3c7 1300 	ubfx	r3, r7, #4, #1
    abe2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    abe6:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    abe8:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    abea:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abee:	2300      	movs	r3, #0
    abf0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    abf4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    abf8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    abfc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    ac00:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    ac04:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    ac08:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ac0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    ac10:	4639      	mov	r1, r7
    ac12:	4620      	mov	r0, r4
    ac14:	f007 fda9 	bl	1276a <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    ac18:	7833      	ldrb	r3, [r6, #0]
    ac1a:	2b03      	cmp	r3, #3
    ac1c:	f200 80de 	bhi.w	addc <twim_xfer+0x258>
    ac20:	e8df f003 	tbb	[pc, r3]
    ac24:	086dca8b 	.word	0x086dca8b
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    ac28:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    ac2a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    ac2e:	f8df 925c 	ldr.w	r9, [pc, #604]	; ae8c <twim_xfer+0x308>
    ac32:	e0b7      	b.n	ada4 <twim_xfer+0x220>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    ac34:	f017 0f10 	tst.w	r7, #16
    ac38:	d134      	bne.n	aca4 <twim_xfer+0x120>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    ac3a:	f017 0f08 	tst.w	r7, #8
    ac3e:	d140      	bne.n	acc2 <twim_xfer+0x13e>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    ac40:	f017 0f04 	tst.w	r7, #4
    ac44:	d14c      	bne.n	ace0 <twim_xfer+0x15c>
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    ac46:	6933      	ldr	r3, [r6, #16]
    ac48:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    ac4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ac50:	f040 8114 	bne.w	ae7c <twim_xfer+0x2f8>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    ac54:	f44f 7380 	mov.w	r3, #256	; 0x100
    ac58:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    ac5c:	68f2      	ldr	r2, [r6, #12]
    ac5e:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ac60:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ac64:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac68:	2300      	movs	r3, #0
    ac6a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    ac6e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac72:	2301      	movs	r3, #1
    ac74:	6223      	str	r3, [r4, #32]
    ac76:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ac78:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    ac7c:	2b00      	cmp	r3, #0
    ac7e:	d0fb      	beq.n	ac78 <twim_xfer+0xf4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac80:	2300      	movs	r3, #0
    ac82:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    ac86:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    ac8a:	6932      	ldr	r2, [r6, #16]
    ac8c:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ac8e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ac92:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    ac96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    ac9a:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    ac9c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    ac9e:	f8df 91f0 	ldr.w	r9, [pc, #496]	; ae90 <twim_xfer+0x30c>
        break;
    aca2:	e05f      	b.n	ad64 <twim_xfer+0x1e0>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    aca4:	f8df 91ec 	ldr.w	r9, [pc, #492]	; ae94 <twim_xfer+0x310>
    aca8:	f240 13dd 	movw	r3, #477	; 0x1dd
    acac:	464a      	mov	r2, r9
    acae:	497a      	ldr	r1, [pc, #488]	; (ae98 <twim_xfer+0x314>)
    acb0:	487a      	ldr	r0, [pc, #488]	; (ae9c <twim_xfer+0x318>)
    acb2:	f005 fd41 	bl	10738 <assert_print>
    acb6:	f240 11dd 	movw	r1, #477	; 0x1dd
    acba:	4648      	mov	r0, r9
    acbc:	f005 fd35 	bl	1072a <assert_post_action>
    acc0:	e7bb      	b.n	ac3a <twim_xfer+0xb6>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    acc2:	f8df 91d0 	ldr.w	r9, [pc, #464]	; ae94 <twim_xfer+0x310>
    acc6:	f44f 73ef 	mov.w	r3, #478	; 0x1de
    acca:	464a      	mov	r2, r9
    accc:	4974      	ldr	r1, [pc, #464]	; (aea0 <twim_xfer+0x31c>)
    acce:	4873      	ldr	r0, [pc, #460]	; (ae9c <twim_xfer+0x318>)
    acd0:	f005 fd32 	bl	10738 <assert_print>
    acd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    acd8:	4648      	mov	r0, r9
    acda:	f005 fd26 	bl	1072a <assert_post_action>
    acde:	e7af      	b.n	ac40 <twim_xfer+0xbc>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    ace0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; ae94 <twim_xfer+0x310>
    ace4:	f240 13df 	movw	r3, #479	; 0x1df
    ace8:	464a      	mov	r2, r9
    acea:	496e      	ldr	r1, [pc, #440]	; (aea4 <twim_xfer+0x320>)
    acec:	486b      	ldr	r0, [pc, #428]	; (ae9c <twim_xfer+0x318>)
    acee:	f005 fd23 	bl	10738 <assert_print>
    acf2:	f240 11df 	movw	r1, #479	; 0x1df
    acf6:	4648      	mov	r0, r9
    acf8:	f005 fd17 	bl	1072a <assert_post_action>
    acfc:	e7a3      	b.n	ac46 <twim_xfer+0xc2>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    acfe:	68f2      	ldr	r2, [r6, #12]
    ad00:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ad02:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ad06:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    ad0a:	6933      	ldr	r3, [r6, #16]
    ad0c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    ad10:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    ad14:	f040 80b5 	bne.w	ae82 <twim_xfer+0x2fe>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    ad18:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ad1a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ad1e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    ad22:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    ad26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    ad2a:	2302      	movs	r3, #2
    ad2c:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ad2e:	2301      	movs	r3, #1
    ad30:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    ad32:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    ad34:	f8df 9158 	ldr.w	r9, [pc, #344]	; ae90 <twim_xfer+0x30c>
}
    ad38:	e014      	b.n	ad64 <twim_xfer+0x1e0>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    ad3a:	68f2      	ldr	r2, [r6, #12]
    ad3c:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ad3e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ad42:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    ad46:	f017 0f20 	tst.w	r7, #32
    ad4a:	d02e      	beq.n	adaa <twim_xfer+0x226>
    p_reg->SHORTS = mask;
    ad4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ad50:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    ad54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    ad58:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ad5a:	2301      	movs	r3, #1
    ad5c:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    ad5e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    ad60:	f8df 912c 	ldr.w	r9, [pc, #300]	; ae90 <twim_xfer+0x30c>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    ad64:	f017 0f08 	tst.w	r7, #8
    ad68:	d107      	bne.n	ad7a <twim_xfer+0x1f6>
    ad6a:	7832      	ldrb	r2, [r6, #0]
    ad6c:	2a03      	cmp	r2, #3
    ad6e:	d004      	beq.n	ad7a <twim_xfer+0x1f6>
    ad70:	2201      	movs	r2, #1
    ad72:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    ad74:	6873      	ldr	r3, [r6, #4]
    ad76:	b903      	cbnz	r3, ad7a <twim_xfer+0x1f6>
    ad78:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    ad7a:	682b      	ldr	r3, [r5, #0]
    ad7c:	b393      	cbz	r3, ade4 <twim_xfer+0x260>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    ad7e:	f017 0f04 	tst.w	r7, #4
    ad82:	d001      	beq.n	ad88 <twim_xfer+0x204>
        {
            p_cb->int_mask = 0;
    ad84:	2300      	movs	r3, #0
    ad86:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    ad88:	f017 0f40 	tst.w	r7, #64	; 0x40
    ad8c:	d103      	bne.n	ad96 <twim_xfer+0x212>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    ad8e:	68ab      	ldr	r3, [r5, #8]
    ad90:	f043 0302 	orr.w	r3, r3, #2
    ad94:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    ad96:	68ab      	ldr	r3, [r5, #8]
    ad98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ad9c:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    ad9e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    ada0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    ada4:	4648      	mov	r0, r9
    ada6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    adaa:	f44f 7300 	mov.w	r3, #512	; 0x200
    adae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    adb2:	2302      	movs	r3, #2
    adb4:	60ab      	str	r3, [r5, #8]
    adb6:	e7d0      	b.n	ad5a <twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    adb8:	68f2      	ldr	r2, [r6, #12]
    adba:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    adbc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    adc0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    adc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    adc8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    adcc:	2302      	movs	r3, #2
    adce:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    add0:	2301      	movs	r3, #1
    add2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    add4:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    add6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; ae90 <twim_xfer+0x30c>
}
    adda:	e7c3      	b.n	ad64 <twim_xfer+0x1e0>
    switch (p_xfer_desc->type)
    addc:	2308      	movs	r3, #8
    adde:	f8df 90c8 	ldr.w	r9, [pc, #200]	; aea8 <twim_xfer+0x324>
    ade2:	e7bf      	b.n	ad64 <twim_xfer+0x1e0>
        bool transmission_finished = false;
    ade4:	4643      	mov	r3, r8
    ade6:	e000      	b.n	adea <twim_xfer+0x266>
        } while (!transmission_finished);
    ade8:	bb6b      	cbnz	r3, ae46 <twim_xfer+0x2c2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    adea:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    adee:	b102      	cbz	r2, adf2 <twim_xfer+0x26e>
                transmission_finished = true;
    adf0:	2301      	movs	r3, #1
    adf2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    adf6:	b12a      	cbz	r2, ae04 <twim_xfer+0x280>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adf8:	2300      	movs	r3, #0
    adfa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    adfe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    ae02:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ae04:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    ae08:	2a00      	cmp	r2, #0
    ae0a:	d0ed      	beq.n	ade8 <twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae0c:	2200      	movs	r2, #0
    ae0e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    ae12:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ae16:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    ae1a:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    ae1e:	b112      	cbz	r2, ae26 <twim_xfer+0x2a2>
    ae20:	f411 7f00 	tst.w	r1, #512	; 0x200
    ae24:	d103      	bne.n	ae2e <twim_xfer+0x2aa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae26:	2301      	movs	r3, #1
    ae28:	6223      	str	r3, [r4, #32]
    ae2a:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    ae2c:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    ae2e:	2a00      	cmp	r2, #0
    ae30:	d0da      	beq.n	ade8 <twim_xfer+0x264>
    ae32:	f411 7f80 	tst.w	r1, #256	; 0x100
    ae36:	d0d7      	beq.n	ade8 <twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae38:	2300      	movs	r3, #0
    ae3a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ae3e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    ae42:	4643      	mov	r3, r8
    ae44:	e7d0      	b.n	ade8 <twim_xfer+0x264>
    uint32_t error_source = p_reg->ERRORSRC;
    ae46:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    ae4a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    ae4e:	2300      	movs	r3, #0
    ae50:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    ae54:	b118      	cbz	r0, ae5e <twim_xfer+0x2da>
            err_code = twi_process_error(errorsrc);
    ae56:	f7ff fe3f 	bl	aad8 <twi_process_error>
    ae5a:	4681      	mov	r9, r0
    ae5c:	e7a2      	b.n	ada4 <twim_xfer+0x220>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    ae5e:	f017 0f40 	tst.w	r7, #64	; 0x40
    ae62:	d19f      	bne.n	ada4 <twim_xfer+0x220>
                !xfer_completeness_check(p_twim, p_cb))
    ae64:	4629      	mov	r1, r5
    ae66:	4620      	mov	r0, r4
    ae68:	f007 fc3e 	bl	126e8 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d199      	bne.n	ada4 <twim_xfer+0x220>
                err_code = NRFX_ERROR_INTERNAL;
    ae70:	f8df 9038 	ldr.w	r9, [pc, #56]	; aeac <twim_xfer+0x328>
    ae74:	e796      	b.n	ada4 <twim_xfer+0x220>
        return err_code;
    ae76:	f8df 9038 	ldr.w	r9, [pc, #56]	; aeb0 <twim_xfer+0x32c>
    ae7a:	e793      	b.n	ada4 <twim_xfer+0x220>
            return err_code;
    ae7c:	f8df 9030 	ldr.w	r9, [pc, #48]	; aeb0 <twim_xfer+0x32c>
    ae80:	e790      	b.n	ada4 <twim_xfer+0x220>
            return err_code;
    ae82:	f8df 902c 	ldr.w	r9, [pc, #44]	; aeb0 <twim_xfer+0x32c>
    ae86:	e78d      	b.n	ada4 <twim_xfer+0x220>
    ae88:	019c0202 	.word	0x019c0202
    ae8c:	0bad000b 	.word	0x0bad000b
    ae90:	0bad0000 	.word	0x0bad0000
    ae94:	0001608c 	.word	0x0001608c
    ae98:	000160c8 	.word	0x000160c8
    ae9c:	00013d44 	.word	0x00013d44
    aea0:	000160e0 	.word	0x000160e0
    aea4:	000160f8 	.word	0x000160f8
    aea8:	0bad0004 	.word	0x0bad0004
    aeac:	0bad0001 	.word	0x0bad0001
    aeb0:	0bad000a 	.word	0x0bad000a

0000aeb4 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    aeb4:	b570      	push	{r4, r5, r6, lr}
    aeb6:	b086      	sub	sp, #24
    aeb8:	4604      	mov	r4, r0
    aeba:	460d      	mov	r5, r1
            return;
        }
    }
#endif

    NRFX_ASSERT(p_cb->handler);
    aebc:	680b      	ldr	r3, [r1, #0]
    aebe:	2b00      	cmp	r3, #0
    aec0:	d06c      	beq.n	af9c <twim_irq_handler+0xe8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aec2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    aec6:	b143      	cbz	r3, aeda <twim_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aec8:	2300      	movs	r3, #0
    aeca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    aece:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aed2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    aed6:	2b00      	cmp	r3, #0
    aed8:	d06e      	beq.n	afb8 <twim_irq_handler+0x104>
    aeda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    aede:	2b00      	cmp	r3, #0
    aee0:	f000 808a 	beq.w	aff8 <twim_irq_handler+0x144>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aee4:	2300      	movs	r3, #0
    aee6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    aeea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    aeee:	6a2b      	ldr	r3, [r5, #32]
    aef0:	f013 0f40 	tst.w	r3, #64	; 0x40
    aef4:	d103      	bne.n	aefe <twim_irq_handler+0x4a>
    aef6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    aefa:	2b00      	cmp	r3, #0
    aefc:	d073      	beq.n	afe6 <twim_irq_handler+0x132>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    aefe:	6a2b      	ldr	r3, [r5, #32]
    af00:	f013 0f04 	tst.w	r3, #4
    af04:	d12e      	bne.n	af64 <twim_irq_handler+0xb0>
        {
            event.xfer_desc = p_cb->xfer_desc;
    af06:	f10d 0c04 	add.w	ip, sp, #4
    af0a:	f105 0e0c 	add.w	lr, r5, #12
    af0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    af12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    af16:	f8de 3000 	ldr.w	r3, [lr]
    af1a:	f8cc 3000 	str.w	r3, [ip]
    af1e:	2300      	movs	r3, #0
    af20:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    af24:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    af28:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    af2c:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    af30:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    af34:	b113      	cbz	r3, af3c <twim_irq_handler+0x88>
    af36:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    af3a:	b19b      	cbz	r3, af64 <twim_irq_handler+0xb0>
    p_reg->SHORTS = mask;
    af3c:	2300      	movs	r3, #0
    af3e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    af42:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    af44:	4b57      	ldr	r3, [pc, #348]	; (b0a4 <twim_irq_handler+0x1f0>)
    af46:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    af4a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    af4e:	2b00      	cmp	r3, #0
    af50:	db08      	blt.n	af64 <twim_irq_handler+0xb0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    af52:	f003 011f 	and.w	r1, r3, #31
    af56:	095b      	lsrs	r3, r3, #5
    af58:	2201      	movs	r2, #1
    af5a:	408a      	lsls	r2, r1
    af5c:	3360      	adds	r3, #96	; 0x60
    af5e:	4952      	ldr	r1, [pc, #328]	; (b0a8 <twim_irq_handler+0x1f4>)
    af60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    af64:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    af68:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    af6c:	f013 0f02 	tst.w	r3, #2
    af70:	d07f      	beq.n	b072 <twim_irq_handler+0x1be>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    af72:	2301      	movs	r3, #1
    af74:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    af78:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    af7c:	b90b      	cbnz	r3, af82 <twim_irq_handler+0xce>
    {
        p_cb->busy = false;
    af7e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    af82:	6a2b      	ldr	r3, [r5, #32]
    af84:	f013 0f04 	tst.w	r3, #4
    af88:	d002      	beq.n	af90 <twim_irq_handler+0xdc>
    af8a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    af8e:	b11b      	cbz	r3, af98 <twim_irq_handler+0xe4>
    {
        p_cb->handler(&event, p_cb->p_context);
    af90:	682b      	ldr	r3, [r5, #0]
    af92:	6869      	ldr	r1, [r5, #4]
    af94:	4668      	mov	r0, sp
    af96:	4798      	blx	r3
    }
}
    af98:	b006      	add	sp, #24
    af9a:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->handler);
    af9c:	4e43      	ldr	r6, [pc, #268]	; (b0ac <twim_irq_handler+0x1f8>)
    af9e:	f44f 7337 	mov.w	r3, #732	; 0x2dc
    afa2:	4632      	mov	r2, r6
    afa4:	4942      	ldr	r1, [pc, #264]	; (b0b0 <twim_irq_handler+0x1fc>)
    afa6:	4843      	ldr	r0, [pc, #268]	; (b0b4 <twim_irq_handler+0x200>)
    afa8:	f005 fbc6 	bl	10738 <assert_print>
    afac:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    afb0:	4630      	mov	r0, r6
    afb2:	f005 fbba 	bl	1072a <assert_post_action>
    afb6:	e784      	b.n	aec2 <twim_irq_handler+0xe>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    afb8:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    afba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    afbe:	2302      	movs	r3, #2
    afc0:	60ab      	str	r3, [r5, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    afc2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    afc4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afc8:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    afcc:	b123      	cbz	r3, afd8 <twim_irq_handler+0x124>
    return p_reg->SHORTS;
    afce:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    afd2:	f413 7f00 	tst.w	r3, #512	; 0x200
    afd6:	d102      	bne.n	afde <twim_irq_handler+0x12a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    afd8:	2301      	movs	r3, #1
    afda:	6223      	str	r3, [r4, #32]
    afdc:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    afde:	2301      	movs	r3, #1
    afe0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    afe4:	e7d8      	b.n	af98 <twim_irq_handler+0xe4>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    afe6:	4629      	mov	r1, r5
    afe8:	4620      	mov	r0, r4
    afea:	f007 fb7d 	bl	126e8 <xfer_completeness_check>
    afee:	f080 0001 	eor.w	r0, r0, #1
    aff2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    aff6:	e782      	b.n	aefe <twim_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aff8:	2300      	movs	r3, #0
    affa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    affe:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    b002:	7b2b      	ldrb	r3, [r5, #12]
    b004:	bb1b      	cbnz	r3, b04e <twim_irq_handler+0x19a>
            event.xfer_desc = p_cb->xfer_desc;
    b006:	f10d 0c04 	add.w	ip, sp, #4
    b00a:	f105 0e0c 	add.w	lr, r5, #12
    b00e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b016:	f8de 3000 	ldr.w	r3, [lr]
    b01a:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
    b01e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    b022:	2b00      	cmp	r3, #0
    b024:	d19e      	bne.n	af64 <twim_irq_handler+0xb0>
    p_reg->SHORTS = mask;
    b026:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    b02a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    b02c:	4b1d      	ldr	r3, [pc, #116]	; (b0a4 <twim_irq_handler+0x1f0>)
    b02e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    b032:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    b036:	2b00      	cmp	r3, #0
    b038:	db94      	blt.n	af64 <twim_irq_handler+0xb0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b03a:	f003 011f 	and.w	r1, r3, #31
    b03e:	095b      	lsrs	r3, r3, #5
    b040:	2201      	movs	r2, #1
    b042:	408a      	lsls	r2, r1
    b044:	3360      	adds	r3, #96	; 0x60
    b046:	4918      	ldr	r1, [pc, #96]	; (b0a8 <twim_irq_handler+0x1f4>)
    b048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b04c:	e78a      	b.n	af64 <twim_irq_handler+0xb0>
    p_reg->SHORTS = mask;
    b04e:	f44f 7300 	mov.w	r3, #512	; 0x200
    b052:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    b056:	f240 2302 	movw	r3, #514	; 0x202
    b05a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    b05c:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    b060:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    b064:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    b066:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b06a:	2301      	movs	r3, #1
    b06c:	60a3      	str	r3, [r4, #8]
    b06e:	6223      	str	r3, [r4, #32]
            return;
    b070:	e792      	b.n	af98 <twim_irq_handler+0xe4>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    b072:	f013 0f04 	tst.w	r3, #4
    b076:	d003      	beq.n	b080 <twim_irq_handler+0x1cc>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    b078:	2302      	movs	r3, #2
    b07a:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    b07e:	e77b      	b.n	af78 <twim_irq_handler+0xc4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    b080:	f013 0f01 	tst.w	r3, #1
    b084:	d003      	beq.n	b08e <twim_irq_handler+0x1da>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    b086:	2303      	movs	r3, #3
    b088:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    b08c:	e774      	b.n	af78 <twim_irq_handler+0xc4>
    else if (p_cb->error)
    b08e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    b092:	b11b      	cbz	r3, b09c <twim_irq_handler+0x1e8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    b094:	2304      	movs	r3, #4
    b096:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    b09a:	e76d      	b.n	af78 <twim_irq_handler+0xc4>
        event.type = NRFX_TWIM_EVT_DONE;
    b09c:	2300      	movs	r3, #0
    b09e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    b0a2:	e769      	b.n	af78 <twim_irq_handler+0xc4>
    b0a4:	019c0202 	.word	0x019c0202
    b0a8:	e000e100 	.word	0xe000e100
    b0ac:	0001608c 	.word	0x0001608c
    b0b0:	00015ed8 	.word	0x00015ed8
    b0b4:	00013d44 	.word	0x00013d44

0000b0b8 <nrfx_twim_init>:
{
    b0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b0bc:	4604      	mov	r4, r0
    b0be:	4616      	mov	r6, r2
    b0c0:	461d      	mov	r5, r3
    NRFX_ASSERT(p_config);
    b0c2:	4688      	mov	r8, r1
    b0c4:	b161      	cbz	r1, b0e0 <nrfx_twim_init+0x28>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b0c6:	7927      	ldrb	r7, [r4, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    b0c8:	f8d4 9000 	ldr.w	r9, [r4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b0cc:	4925      	ldr	r1, [pc, #148]	; (b164 <nrfx_twim_init+0xac>)
    b0ce:	2334      	movs	r3, #52	; 0x34
    b0d0:	fb03 1107 	mla	r1, r3, r7, r1
    b0d4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    b0d8:	b183      	cbz	r3, b0fc <nrfx_twim_init+0x44>
        return err_code;
    b0da:	4823      	ldr	r0, [pc, #140]	; (b168 <nrfx_twim_init+0xb0>)
}
    b0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
    b0e0:	4f22      	ldr	r7, [pc, #136]	; (b16c <nrfx_twim_init+0xb4>)
    b0e2:	f240 1315 	movw	r3, #277	; 0x115
    b0e6:	463a      	mov	r2, r7
    b0e8:	4921      	ldr	r1, [pc, #132]	; (b170 <nrfx_twim_init+0xb8>)
    b0ea:	4822      	ldr	r0, [pc, #136]	; (b174 <nrfx_twim_init+0xbc>)
    b0ec:	f005 fb24 	bl	10738 <assert_print>
    b0f0:	f240 1115 	movw	r1, #277	; 0x115
    b0f4:	4638      	mov	r0, r7
    b0f6:	f005 fb18 	bl	1072a <assert_post_action>
    b0fa:	e7e4      	b.n	b0c6 <nrfx_twim_init+0xe>
    p_cb->handler         = event_handler;
    b0fc:	4919      	ldr	r1, [pc, #100]	; (b164 <nrfx_twim_init+0xac>)
    b0fe:	2234      	movs	r2, #52	; 0x34
    b100:	fb07 f202 	mul.w	r2, r7, r2
    b104:	188b      	adds	r3, r1, r2
    b106:	508e      	str	r6, [r1, r2]
    p_cb->p_context       = p_context;
    b108:	605d      	str	r5, [r3, #4]
    p_cb->int_mask        = 0;
    b10a:	2200      	movs	r2, #0
    b10c:	609a      	str	r2, [r3, #8]
    p_cb->repeated        = false;
    b10e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
    b112:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    b116:	f898 200d 	ldrb.w	r2, [r8, #13]
    b11a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    b11e:	f898 200e 	ldrb.w	r2, [r8, #14]
    b122:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
    b126:	4641      	mov	r1, r8
    b128:	4648      	mov	r0, r9
    b12a:	f007 fb54 	bl	127d6 <twim_pins_configure>
    b12e:	b1b8      	cbz	r0, b160 <nrfx_twim_init+0xa8>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    b130:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->FREQUENCY = frequency;
    b134:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    if (p_cb->handler)
    b138:	2334      	movs	r3, #52	; 0x34
    b13a:	fb07 f303 	mul.w	r3, r7, r3
    b13e:	4a09      	ldr	r2, [pc, #36]	; (b164 <nrfx_twim_init+0xac>)
    b140:	58d3      	ldr	r3, [r2, r3]
    b142:	b123      	cbz	r3, b14e <nrfx_twim_init+0x96>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    b144:	6820      	ldr	r0, [r4, #0]
    b146:	f340 3007 	sbfx	r0, r0, #12, #8
    b14a:	f005 fff0 	bl	1112e <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b14e:	4b05      	ldr	r3, [pc, #20]	; (b164 <nrfx_twim_init+0xac>)
    b150:	2234      	movs	r2, #52	; 0x34
    b152:	fb02 3307 	mla	r3, r2, r7, r3
    b156:	2201      	movs	r2, #1
    b158:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    return err_code;
    b15c:	4806      	ldr	r0, [pc, #24]	; (b178 <nrfx_twim_init+0xc0>)
    b15e:	e7bd      	b.n	b0dc <nrfx_twim_init+0x24>
        return NRFX_ERROR_INVALID_PARAM;
    b160:	4806      	ldr	r0, [pc, #24]	; (b17c <nrfx_twim_init+0xc4>)
    b162:	e7bb      	b.n	b0dc <nrfx_twim_init+0x24>
    b164:	20002228 	.word	0x20002228
    b168:	0bad0005 	.word	0x0bad0005
    b16c:	0001608c 	.word	0x0001608c
    b170:	00015e60 	.word	0x00015e60
    b174:	00013d44 	.word	0x00013d44
    b178:	0bad0000 	.word	0x0bad0000
    b17c:	0bad0004 	.word	0x0bad0004

0000b180 <nrfx_twim_enable>:
{
    b180:	b570      	push	{r4, r5, r6, lr}
    b182:	4604      	mov	r4, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b184:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    b186:	4b11      	ldr	r3, [pc, #68]	; (b1cc <nrfx_twim_enable+0x4c>)
    b188:	2234      	movs	r2, #52	; 0x34
    b18a:	fb02 3305 	mla	r3, r2, r5, r3
    b18e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    b192:	2b01      	cmp	r3, #1
    b194:	d10b      	bne.n	b1ae <nrfx_twim_enable+0x2e>
    nrf_twim_enable(p_instance->p_twim);
    b196:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b198:	2206      	movs	r2, #6
    b19a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    b19e:	4b0b      	ldr	r3, [pc, #44]	; (b1cc <nrfx_twim_enable+0x4c>)
    b1a0:	2234      	movs	r2, #52	; 0x34
    b1a2:	fb02 3305 	mla	r3, r2, r5, r3
    b1a6:	2202      	movs	r2, #2
    b1a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    b1ac:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    b1ae:	4e08      	ldr	r6, [pc, #32]	; (b1d0 <nrfx_twim_enable+0x50>)
    b1b0:	f240 1379 	movw	r3, #377	; 0x179
    b1b4:	4632      	mov	r2, r6
    b1b6:	4907      	ldr	r1, [pc, #28]	; (b1d4 <nrfx_twim_enable+0x54>)
    b1b8:	4807      	ldr	r0, [pc, #28]	; (b1d8 <nrfx_twim_enable+0x58>)
    b1ba:	f005 fabd 	bl	10738 <assert_print>
    b1be:	f240 1179 	movw	r1, #377	; 0x179
    b1c2:	4630      	mov	r0, r6
    b1c4:	f005 fab1 	bl	1072a <assert_post_action>
    b1c8:	e7e5      	b.n	b196 <nrfx_twim_enable+0x16>
    b1ca:	bf00      	nop
    b1cc:	20002228 	.word	0x20002228
    b1d0:	0001608c 	.word	0x0001608c
    b1d4:	00016110 	.word	0x00016110
    b1d8:	00013d44 	.word	0x00013d44

0000b1dc <nrfx_twim_disable>:
{
    b1dc:	b570      	push	{r4, r5, r6, lr}
    b1de:	4604      	mov	r4, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b1e0:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b1e2:	4b16      	ldr	r3, [pc, #88]	; (b23c <nrfx_twim_disable+0x60>)
    b1e4:	2234      	movs	r2, #52	; 0x34
    b1e6:	fb02 3305 	mla	r3, r2, r5, r3
    b1ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    b1ee:	b1bb      	cbz	r3, b220 <nrfx_twim_disable+0x44>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    b1f0:	6822      	ldr	r2, [r4, #0]
    p_cb->int_mask = 0;
    b1f2:	4b12      	ldr	r3, [pc, #72]	; (b23c <nrfx_twim_disable+0x60>)
    b1f4:	2134      	movs	r1, #52	; 0x34
    b1f6:	fb01 3305 	mla	r3, r1, r5, r3
    b1fa:	2100      	movs	r1, #0
    b1fc:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
    b1fe:	4810      	ldr	r0, [pc, #64]	; (b240 <nrfx_twim_disable+0x64>)
    b200:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    b204:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    b208:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    b20c:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b210:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b214:	2201      	movs	r2, #1
    b216:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    b21a:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    b21e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b220:	4e08      	ldr	r6, [pc, #32]	; (b244 <nrfx_twim_disable+0x68>)
    b222:	f44f 73c2 	mov.w	r3, #388	; 0x184
    b226:	4632      	mov	r2, r6
    b228:	4907      	ldr	r1, [pc, #28]	; (b248 <nrfx_twim_disable+0x6c>)
    b22a:	4808      	ldr	r0, [pc, #32]	; (b24c <nrfx_twim_disable+0x70>)
    b22c:	f005 fa84 	bl	10738 <assert_print>
    b230:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b234:	4630      	mov	r0, r6
    b236:	f005 fa78 	bl	1072a <assert_post_action>
    b23a:	e7d9      	b.n	b1f0 <nrfx_twim_disable+0x14>
    b23c:	20002228 	.word	0x20002228
    b240:	019c0202 	.word	0x019c0202
    b244:	0001608c 	.word	0x0001608c
    b248:	00015ee8 	.word	0x00015ee8
    b24c:	00013d44 	.word	0x00013d44

0000b250 <nrfx_twim_xfer>:
{
    b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b254:	4604      	mov	r4, r0
    b256:	460d      	mov	r5, r1
    b258:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    b25a:	7903      	ldrb	r3, [r0, #4]
    b25c:	b93b      	cbnz	r3, b26e <nrfx_twim_xfer+0x1e>
    b25e:	684b      	ldr	r3, [r1, #4]
    b260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b264:	d203      	bcs.n	b26e <nrfx_twim_xfer+0x1e>
    b266:	688b      	ldr	r3, [r1, #8]
    b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b26c:	d30c      	bcc.n	b288 <nrfx_twim_xfer+0x38>
    b26e:	4e23      	ldr	r6, [pc, #140]	; (b2fc <nrfx_twim_xfer+0xac>)
    b270:	f240 2399 	movw	r3, #665	; 0x299
    b274:	4632      	mov	r2, r6
    b276:	4922      	ldr	r1, [pc, #136]	; (b300 <nrfx_twim_xfer+0xb0>)
    b278:	4822      	ldr	r0, [pc, #136]	; (b304 <nrfx_twim_xfer+0xb4>)
    b27a:	f005 fa5d 	bl	10738 <assert_print>
    b27e:	f240 2199 	movw	r1, #665	; 0x299
    b282:	4630      	mov	r0, r6
    b284:	f005 fa51 	bl	1072a <assert_post_action>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b288:	7926      	ldrb	r6, [r4, #4]
    b28a:	2134      	movs	r1, #52	; 0x34
    b28c:	fb06 f101 	mul.w	r1, r6, r1
    b290:	4b1d      	ldr	r3, [pc, #116]	; (b308 <nrfx_twim_xfer+0xb8>)
    b292:	eb01 0803 	add.w	r8, r1, r3
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    b296:	585b      	ldr	r3, [r3, r1]
    b298:	b16b      	cbz	r3, b2b6 <nrfx_twim_xfer+0x66>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    b29a:	2334      	movs	r3, #52	; 0x34
    b29c:	fb03 f606 	mul.w	r6, r3, r6
    b2a0:	4b19      	ldr	r3, [pc, #100]	; (b308 <nrfx_twim_xfer+0xb8>)
    b2a2:	599b      	ldr	r3, [r3, r6]
    b2a4:	b1cb      	cbz	r3, b2da <nrfx_twim_xfer+0x8a>
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    b2a6:	463b      	mov	r3, r7
    b2a8:	462a      	mov	r2, r5
    b2aa:	6821      	ldr	r1, [r4, #0]
    b2ac:	4640      	mov	r0, r8
    b2ae:	f7ff fc69 	bl	ab84 <twim_xfer>
}
    b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    b2b6:	782b      	ldrb	r3, [r5, #0]
    b2b8:	2b02      	cmp	r3, #2
    b2ba:	d1ee      	bne.n	b29a <nrfx_twim_xfer+0x4a>
    b2bc:	f8df 903c 	ldr.w	r9, [pc, #60]	; b2fc <nrfx_twim_xfer+0xac>
    b2c0:	f240 23a1 	movw	r3, #673	; 0x2a1
    b2c4:	464a      	mov	r2, r9
    b2c6:	4911      	ldr	r1, [pc, #68]	; (b30c <nrfx_twim_xfer+0xbc>)
    b2c8:	480e      	ldr	r0, [pc, #56]	; (b304 <nrfx_twim_xfer+0xb4>)
    b2ca:	f005 fa35 	bl	10738 <assert_print>
    b2ce:	f240 21a1 	movw	r1, #673	; 0x2a1
    b2d2:	4648      	mov	r0, r9
    b2d4:	f005 fa29 	bl	1072a <assert_post_action>
    b2d8:	e7df      	b.n	b29a <nrfx_twim_xfer+0x4a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    b2da:	782b      	ldrb	r3, [r5, #0]
    b2dc:	2b03      	cmp	r3, #3
    b2de:	d1e2      	bne.n	b2a6 <nrfx_twim_xfer+0x56>
    b2e0:	4e06      	ldr	r6, [pc, #24]	; (b2fc <nrfx_twim_xfer+0xac>)
    b2e2:	f240 23a2 	movw	r3, #674	; 0x2a2
    b2e6:	4632      	mov	r2, r6
    b2e8:	4909      	ldr	r1, [pc, #36]	; (b310 <nrfx_twim_xfer+0xc0>)
    b2ea:	4806      	ldr	r0, [pc, #24]	; (b304 <nrfx_twim_xfer+0xb4>)
    b2ec:	f005 fa24 	bl	10738 <assert_print>
    b2f0:	f240 21a2 	movw	r1, #674	; 0x2a2
    b2f4:	4630      	mov	r0, r6
    b2f6:	f005 fa18 	bl	1072a <assert_post_action>
    b2fa:	e7d4      	b.n	b2a6 <nrfx_twim_xfer+0x56>
    b2fc:	0001608c 	.word	0x0001608c
    b300:	0001613c 	.word	0x0001613c
    b304:	00013d44 	.word	0x00013d44
    b308:	20002228 	.word	0x20002228
    b30c:	000161e8 	.word	0x000161e8
    b310:	00016238 	.word	0x00016238

0000b314 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    b314:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    b316:	4902      	ldr	r1, [pc, #8]	; (b320 <nrfx_twim_1_irq_handler+0xc>)
    b318:	4802      	ldr	r0, [pc, #8]	; (b324 <nrfx_twim_1_irq_handler+0x10>)
    b31a:	f7ff fdcb 	bl	aeb4 <twim_irq_handler>
}
    b31e:	bd08      	pop	{r3, pc}
    b320:	20002228 	.word	0x20002228
    b324:	50009000 	.word	0x50009000

0000b328 <nrf_gpio_pin_port_decode>:
{
    b328:	b538      	push	{r3, r4, r5, lr}
    b32a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b32c:	6800      	ldr	r0, [r0, #0]
    b32e:	f007 fa90 	bl	12852 <nrf_gpio_pin_present_check>
    b332:	b1b0      	cbz	r0, b362 <nrf_gpio_pin_port_decode+0x3a>
    uint32_t pin_number = *p_pin;
    b334:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    b336:	f003 021f 	and.w	r2, r3, #31
    b33a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b33c:	095b      	lsrs	r3, r3, #5
    b33e:	d01e      	beq.n	b37e <nrf_gpio_pin_port_decode+0x56>
    b340:	2b01      	cmp	r3, #1
    b342:	d01e      	beq.n	b382 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    b344:	4c10      	ldr	r4, [pc, #64]	; (b388 <nrf_gpio_pin_port_decode+0x60>)
    b346:	f44f 7313 	mov.w	r3, #588	; 0x24c
    b34a:	4622      	mov	r2, r4
    b34c:	490f      	ldr	r1, [pc, #60]	; (b38c <nrf_gpio_pin_port_decode+0x64>)
    b34e:	4810      	ldr	r0, [pc, #64]	; (b390 <nrf_gpio_pin_port_decode+0x68>)
    b350:	f005 f9f2 	bl	10738 <assert_print>
    b354:	f44f 7113 	mov.w	r1, #588	; 0x24c
    b358:	4620      	mov	r0, r4
    b35a:	f005 f9e6 	bl	1072a <assert_post_action>
        case 0: return NRF_P0;
    b35e:	480d      	ldr	r0, [pc, #52]	; (b394 <nrf_gpio_pin_port_decode+0x6c>)
    b360:	e010      	b.n	b384 <nrf_gpio_pin_port_decode+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b362:	4d09      	ldr	r5, [pc, #36]	; (b388 <nrf_gpio_pin_port_decode+0x60>)
    b364:	f240 2347 	movw	r3, #583	; 0x247
    b368:	462a      	mov	r2, r5
    b36a:	490b      	ldr	r1, [pc, #44]	; (b398 <nrf_gpio_pin_port_decode+0x70>)
    b36c:	4808      	ldr	r0, [pc, #32]	; (b390 <nrf_gpio_pin_port_decode+0x68>)
    b36e:	f005 f9e3 	bl	10738 <assert_print>
    b372:	f240 2147 	movw	r1, #583	; 0x247
    b376:	4628      	mov	r0, r5
    b378:	f005 f9d7 	bl	1072a <assert_post_action>
    b37c:	e7da      	b.n	b334 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    b37e:	4805      	ldr	r0, [pc, #20]	; (b394 <nrf_gpio_pin_port_decode+0x6c>)
    b380:	e000      	b.n	b384 <nrf_gpio_pin_port_decode+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b382:	4806      	ldr	r0, [pc, #24]	; (b39c <nrf_gpio_pin_port_decode+0x74>)
}
    b384:	bd38      	pop	{r3, r4, r5, pc}
    b386:	bf00      	nop
    b388:	000141c0 	.word	0x000141c0
    b38c:	000156e0 	.word	0x000156e0
    b390:	00013d44 	.word	0x00013d44
    b394:	50842500 	.word	0x50842500
    b398:	000141f4 	.word	0x000141f4
    b39c:	50842800 	.word	0x50842800

0000b3a0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    b3a0:	b570      	push	{r4, r5, r6, lr}
    b3a2:	b082      	sub	sp, #8
    b3a4:	4605      	mov	r5, r0
    b3a6:	460e      	mov	r6, r1
    nrf_gpio_pin_set(scl_pin);
    b3a8:	f007 fa72 	bl	12890 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    b3ac:	4630      	mov	r0, r6
    b3ae:	f007 fa6f 	bl	12890 <nrf_gpio_pin_set>

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    b3b2:	9501      	str	r5, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b3b4:	a801      	add	r0, sp, #4
    b3b6:	f7ff ffb7 	bl	b328 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b3ba:	9a01      	ldr	r2, [sp, #4]
    b3bc:	3280      	adds	r2, #128	; 0x80
    b3be:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    b3c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b3c6:	f240 640d 	movw	r4, #1549	; 0x60d
    b3ca:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
    b3cc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    b3d0:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b3d2:	a801      	add	r0, sp, #4
    b3d4:	f7ff ffa8 	bl	b328 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b3d8:	9a01      	ldr	r2, [sp, #4]
    b3da:	3280      	adds	r2, #128	; 0x80
    b3dc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    b3e0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b3e4:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
    b3e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    NRFX_DELAY_US(4);
    b3ea:	2004      	movs	r0, #4
    b3ec:	f006 feb1 	bl	12152 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    b3f0:	2400      	movs	r4, #0
    b3f2:	2c08      	cmp	r4, #8
    b3f4:	d812      	bhi.n	b41c <nrfx_twi_twim_bus_recover+0x7c>
    {
        if (nrf_gpio_pin_read(sda_pin))
    b3f6:	4630      	mov	r0, r6
    b3f8:	f007 fa57 	bl	128aa <nrf_gpio_pin_read>
    b3fc:	b970      	cbnz	r0, b41c <nrfx_twi_twim_bus_recover+0x7c>
            break;
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
    b3fe:	4628      	mov	r0, r5
    b400:	f007 fa39 	bl	12876 <nrf_gpio_pin_clear>
            NRFX_DELAY_US(4);
    b404:	2004      	movs	r0, #4
    b406:	f006 fea4 	bl	12152 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    b40a:	4628      	mov	r0, r5
    b40c:	f007 fa40 	bl	12890 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    b410:	2004      	movs	r0, #4
    b412:	f006 fe9e 	bl	12152 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    b416:	3401      	adds	r4, #1
    b418:	b2e4      	uxtb	r4, r4
    b41a:	e7ea      	b.n	b3f2 <nrfx_twi_twim_bus_recover+0x52>
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    b41c:	4630      	mov	r0, r6
    b41e:	f007 fa2a 	bl	12876 <nrf_gpio_pin_clear>
    NRFX_DELAY_US(4);
    b422:	2004      	movs	r0, #4
    b424:	f006 fe95 	bl	12152 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    b428:	4630      	mov	r0, r6
    b42a:	f007 fa31 	bl	12890 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    b42e:	2004      	movs	r0, #4
    b430:	f006 fe8f 	bl	12152 <nrfx_busy_wait>

    if (nrf_gpio_pin_read(sda_pin))
    b434:	4630      	mov	r0, r6
    b436:	f007 fa38 	bl	128aa <nrf_gpio_pin_read>
    b43a:	b110      	cbz	r0, b442 <nrfx_twi_twim_bus_recover+0xa2>
    {
        return NRFX_SUCCESS;
    b43c:	4802      	ldr	r0, [pc, #8]	; (b448 <nrfx_twi_twim_bus_recover+0xa8>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    b43e:	b002      	add	sp, #8
    b440:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INTERNAL;
    b442:	4802      	ldr	r0, [pc, #8]	; (b44c <nrfx_twi_twim_bus_recover+0xac>)
    b444:	e7fb      	b.n	b43e <nrfx_twi_twim_bus_recover+0x9e>
    b446:	bf00      	nop
    b448:	0bad0000 	.word	0x0bad0000
    b44c:	0bad0001 	.word	0x0bad0001

0000b450 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b452:	460d      	mov	r5, r1
    b454:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    b456:	4b0c      	ldr	r3, [pc, #48]	; (b488 <metal_generic_dev_open+0x38>)
    b458:	699c      	ldr	r4, [r3, #24]
    b45a:	e000      	b.n	b45e <metal_generic_dev_open+0xe>
    b45c:	6824      	ldr	r4, [r4, #0]
    b45e:	4b0b      	ldr	r3, [pc, #44]	; (b48c <metal_generic_dev_open+0x3c>)
    b460:	429c      	cmp	r4, r3
    b462:	d00d      	beq.n	b480 <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
    b464:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    b468:	4629      	mov	r1, r5
    b46a:	f854 0c44 	ldr.w	r0, [r4, #-68]
    b46e:	f005 ff37 	bl	112e0 <strcmp>
    b472:	2800      	cmp	r0, #0
    b474:	d1f2      	bne.n	b45c <metal_generic_dev_open+0xc>
			*device = dev;
    b476:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
    b478:	4630      	mov	r0, r6
    b47a:	f007 fb45 	bl	12b08 <metal_generic_dev_sys_open>
    b47e:	e001      	b.n	b484 <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
    b480:	f06f 0012 	mvn.w	r0, #18
}
    b484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b486:	bf00      	nop
    b488:	2000225c 	.word	0x2000225c
    b48c:	20002274 	.word	0x20002274

0000b490 <metal_bus_find>:
{
    b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b492:	4605      	mov	r5, r0
    b494:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    b496:	4b0c      	ldr	r3, [pc, #48]	; (b4c8 <metal_bus_find+0x38>)
    b498:	689c      	ldr	r4, [r3, #8]
    b49a:	e000      	b.n	b49e <metal_bus_find+0xe>
    b49c:	6824      	ldr	r4, [r4, #0]
    b49e:	4b0b      	ldr	r3, [pc, #44]	; (b4cc <metal_bus_find+0x3c>)
    b4a0:	429c      	cmp	r4, r3
    b4a2:	d00d      	beq.n	b4c0 <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
    b4a4:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    b4a8:	4629      	mov	r1, r5
    b4aa:	f854 0c24 	ldr.w	r0, [r4, #-36]
    b4ae:	f005 ff17 	bl	112e0 <strcmp>
    b4b2:	4603      	mov	r3, r0
    b4b4:	2800      	cmp	r0, #0
    b4b6:	d1f1      	bne.n	b49c <metal_bus_find+0xc>
    b4b8:	2f00      	cmp	r7, #0
    b4ba:	d0ef      	beq.n	b49c <metal_bus_find+0xc>
			*result = bus;
    b4bc:	603e      	str	r6, [r7, #0]
			return 0;
    b4be:	e001      	b.n	b4c4 <metal_bus_find+0x34>
	return -ENOENT;
    b4c0:	f06f 0301 	mvn.w	r3, #1
}
    b4c4:	4618      	mov	r0, r3
    b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4c8:	2000225c 	.word	0x2000225c
    b4cc:	20002264 	.word	0x20002264

0000b4d0 <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
    b4d0:	b380      	cbz	r0, b534 <metal_bus_register+0x64>
{
    b4d2:	b510      	push	{r4, lr}
    b4d4:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
    b4d6:	6800      	ldr	r0, [r0, #0]
    b4d8:	b310      	cbz	r0, b520 <metal_bus_register+0x50>
    b4da:	f005 feee 	bl	112ba <strlen>
    b4de:	b1f8      	cbz	r0, b520 <metal_bus_register+0x50>
	if (metal_bus_find(bus->name, NULL) == 0)
    b4e0:	2100      	movs	r1, #0
    b4e2:	6820      	ldr	r0, [r4, #0]
    b4e4:	f7ff ffd4 	bl	b490 <metal_bus_find>
    b4e8:	b1e8      	cbz	r0, b526 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    b4ea:	f104 031c 	add.w	r3, r4, #28
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
    b4ee:	6223      	str	r3, [r4, #32]
	list->next = list;
    b4f0:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    b4f2:	f104 0224 	add.w	r2, r4, #36	; 0x24
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    b4f6:	4b11      	ldr	r3, [pc, #68]	; (b53c <metal_bus_register+0x6c>)
    b4f8:	68d9      	ldr	r1, [r3, #12]
    b4fa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    b4fc:	f103 0008 	add.w	r0, r3, #8
    b500:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
    b502:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
    b504:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    b506:	781b      	ldrb	r3, [r3, #0]
    b508:	2b06      	cmp	r3, #6
    b50a:	d90f      	bls.n	b52c <metal_bus_register+0x5c>
    b50c:	f1a0 0308 	sub.w	r3, r0, #8
    b510:	685b      	ldr	r3, [r3, #4]
    b512:	b16b      	cbz	r3, b530 <metal_bus_register+0x60>
    b514:	6822      	ldr	r2, [r4, #0]
    b516:	490a      	ldr	r1, [pc, #40]	; (b540 <metal_bus_register+0x70>)
    b518:	2007      	movs	r0, #7
    b51a:	4798      	blx	r3
	return 0;
    b51c:	2000      	movs	r0, #0
    b51e:	e006      	b.n	b52e <metal_bus_register+0x5e>
		return -EINVAL;
    b520:	f06f 0015 	mvn.w	r0, #21
    b524:	e003      	b.n	b52e <metal_bus_register+0x5e>
		return -EEXIST;
    b526:	f06f 0010 	mvn.w	r0, #16
    b52a:	e000      	b.n	b52e <metal_bus_register+0x5e>
	return 0;
    b52c:	2000      	movs	r0, #0
}
    b52e:	bd10      	pop	{r4, pc}
	return 0;
    b530:	2000      	movs	r0, #0
    b532:	e7fc      	b.n	b52e <metal_bus_register+0x5e>
		return -EINVAL;
    b534:	f06f 0015 	mvn.w	r0, #21
}
    b538:	4770      	bx	lr
    b53a:	bf00      	nop
    b53c:	2000225c 	.word	0x2000225c
    b540:	00016288 	.word	0x00016288

0000b544 <metal_register_generic_device>:
{
    b544:	b510      	push	{r4, lr}
    b546:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    b548:	6800      	ldr	r0, [r0, #0]
    b54a:	b198      	cbz	r0, b574 <metal_register_generic_device+0x30>
    b54c:	f005 feb5 	bl	112ba <strlen>
    b550:	b180      	cbz	r0, b574 <metal_register_generic_device+0x30>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
    b552:	68a3      	ldr	r3, [r4, #8]
	if (!device->name || !strlen(device->name) ||
    b554:	2b01      	cmp	r3, #1
    b556:	d80d      	bhi.n	b574 <metal_register_generic_device+0x30>
	device->bus = &metal_generic_bus;
    b558:	4b08      	ldr	r3, [pc, #32]	; (b57c <metal_register_generic_device+0x38>)
    b55a:	6063      	str	r3, [r4, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
    b55c:	f104 0144 	add.w	r1, r4, #68	; 0x44
	new_node->prev = node->prev;
    b560:	4b07      	ldr	r3, [pc, #28]	; (b580 <metal_register_generic_device+0x3c>)
    b562:	69da      	ldr	r2, [r3, #28]
    b564:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next = node;
    b566:	f103 0018 	add.w	r0, r3, #24
    b56a:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->next->prev = new_node;
    b56c:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
    b56e:	6011      	str	r1, [r2, #0]
	return 0;
    b570:	2000      	movs	r0, #0
}
    b572:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b574:	f06f 0015 	mvn.w	r0, #21
    b578:	e7fb      	b.n	b572 <metal_register_generic_device+0x2e>
    b57a:	bf00      	nop
    b57c:	200001a8 	.word	0x200001a8
    b580:	2000225c 	.word	0x2000225c

0000b584 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    b584:	b538      	push	{r3, r4, r5, lr}
    b586:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    b588:	4c0c      	ldr	r4, [pc, #48]	; (b5bc <metal_init+0x38>)
    b58a:	2220      	movs	r2, #32
    b58c:	2100      	movs	r1, #0
    b58e:	4620      	mov	r0, r4
    b590:	f005 fef3 	bl	1137a <memset>

	_metal.common.log_handler   = params->log_handler;
    b594:	682b      	ldr	r3, [r5, #0]
    b596:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    b598:	792a      	ldrb	r2, [r5, #4]
    b59a:	4623      	mov	r3, r4
    b59c:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
    b5a0:	60e3      	str	r3, [r4, #12]
	list->next = list;
    b5a2:	60a3      	str	r3, [r4, #8]
	list->prev = list;
    b5a4:	f104 0310 	add.w	r3, r4, #16
    b5a8:	6163      	str	r3, [r4, #20]
	list->next = list;
    b5aa:	6123      	str	r3, [r4, #16]
	list->prev = list;
    b5ac:	f104 0318 	add.w	r3, r4, #24
    b5b0:	61e3      	str	r3, [r4, #28]
	list->next = list;
    b5b2:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    b5b4:	4628      	mov	r0, r5
    b5b6:	f000 f803 	bl	b5c0 <metal_sys_init>
	if (error)
		return error;

	return error;
}
    b5ba:	bd38      	pop	{r3, r4, r5, pc}
    b5bc:	2000225c 	.word	0x2000225c

0000b5c0 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    b5c0:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    b5c2:	4802      	ldr	r0, [pc, #8]	; (b5cc <metal_sys_init+0xc>)
    b5c4:	f7ff ff84 	bl	b4d0 <metal_bus_register>
	return 0;
}
    b5c8:	2000      	movs	r0, #0
    b5ca:	bd08      	pop	{r3, pc}
    b5cc:	200001a8 	.word	0x200001a8

0000b5d0 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    b5d0:	b40e      	push	{r1, r2, r3}
    b5d2:	b500      	push	{lr}
    b5d4:	b082      	sub	sp, #8
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    b5d6:	1e43      	subs	r3, r0, #1
    b5d8:	b2db      	uxtb	r3, r3
    b5da:	2b06      	cmp	r3, #6
    b5dc:	d900      	bls.n	b5e0 <metal_zephyr_log_handler+0x10>
		level = METAL_LOG_EMERGENCY;
    b5de:	2000      	movs	r0, #0
	printk("%s", level_strs[level]);
    b5e0:	4b07      	ldr	r3, [pc, #28]	; (b600 <metal_zephyr_log_handler+0x30>)
    b5e2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    b5e6:	4807      	ldr	r0, [pc, #28]	; (b604 <metal_zephyr_log_handler+0x34>)
    b5e8:	f004 fbf9 	bl	fdde <printk>

	va_start(args, format);
    b5ec:	a904      	add	r1, sp, #16
    b5ee:	9101      	str	r1, [sp, #4]
	vprintk(format, args);
    b5f0:	9803      	ldr	r0, [sp, #12]
    b5f2:	f004 fbf0 	bl	fdd6 <vprintk>
	va_end(args);
}
    b5f6:	b002      	add	sp, #8
    b5f8:	f85d eb04 	ldr.w	lr, [sp], #4
    b5fc:	b003      	add	sp, #12
    b5fe:	4770      	bx	lr
    b600:	0001633c 	.word	0x0001633c
    b604:	00014494 	.word	0x00014494

0000b608 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b60c:	b087      	sub	sp, #28
    b60e:	9204      	str	r2, [sp, #16]
    b610:	9305      	str	r3, [sp, #20]
    b612:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
    b616:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
    b618:	4293      	cmp	r3, r2
    b61a:	d341      	bcc.n	b6a0 <virtio_create_virtqueues+0x98>
    b61c:	4605      	mov	r5, r0
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    b61e:	2400      	movs	r4, #0
    b620:	e01d      	b.n	b65e <virtio_create_virtqueues+0x56>
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
    b622:	6899      	ldr	r1, [r3, #8]
    b624:	8998      	ldrh	r0, [r3, #12]
    b626:	f007 fa71 	bl	12b0c <vring_size>
    b62a:	4603      	mov	r3, r0
    b62c:	2200      	movs	r2, #0
    b62e:	4639      	mov	r1, r7
    b630:	4650      	mov	r0, sl
    b632:	f007 fa25 	bl	12a80 <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
    b636:	6a2b      	ldr	r3, [r5, #32]
    b638:	6a1b      	ldr	r3, [r3, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    b63a:	f856 2009 	ldr.w	r2, [r6, r9]
    b63e:	9202      	str	r2, [sp, #8]
    b640:	9301      	str	r3, [sp, #4]
    b642:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    b646:	9300      	str	r3, [sp, #0]
    b648:	4643      	mov	r3, r8
    b64a:	9a05      	ldr	r2, [sp, #20]
    b64c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    b650:	b2a1      	uxth	r1, r4
    b652:	4628      	mov	r0, r5
    b654:	f007 fb55 	bl	12d02 <virtqueue_create>
				       vring_info->vq);
		if (ret)
    b658:	4603      	mov	r3, r0
    b65a:	b9e8      	cbnz	r0, b698 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
    b65c:	3401      	adds	r4, #1
    b65e:	9b04      	ldr	r3, [sp, #16]
    b660:	429c      	cmp	r4, r3
    b662:	d218      	bcs.n	b696 <virtio_create_virtqueues+0x8e>
		vring_info = &vdev->vrings_info[i];
    b664:	6aee      	ldr	r6, [r5, #44]	; 0x2c
    b666:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    b66a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    b66e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
		vring_alloc = &vring_info->info;
    b672:	f103 0804 	add.w	r8, r3, #4
		if (vdev->role == VIRTIO_DEV_DRIVER) {
    b676:	69aa      	ldr	r2, [r5, #24]
    b678:	2a00      	cmp	r2, #0
    b67a:	d1dc      	bne.n	b636 <virtio_create_virtqueues+0x2e>
			struct metal_io_region *io = vring_info->io;
    b67c:	f8d3 a014 	ldr.w	sl, [r3, #20]
			offset = metal_io_virt_to_offset(io,
    b680:	685f      	ldr	r7, [r3, #4]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    b682:	f8da 2000 	ldr.w	r2, [sl]
    b686:	1abf      	subs	r7, r7, r2

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    b688:	f8da 2008 	ldr.w	r2, [sl, #8]
    b68c:	4297      	cmp	r7, r2
    b68e:	d3c8      	bcc.n	b622 <virtio_create_virtqueues+0x1a>
    b690:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b694:	e7c5      	b.n	b622 <virtio_create_virtqueues+0x1a>
			return ret;
	}
	return 0;
    b696:	2300      	movs	r3, #0
}
    b698:	4618      	mov	r0, r3
    b69a:	b007      	add	sp, #28
    b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
    b6a0:	4b00      	ldr	r3, [pc, #0]	; (b6a4 <virtio_create_virtqueues+0x9c>)
    b6a2:	e7f9      	b.n	b698 <virtio_create_virtqueues+0x90>
    b6a4:	fffff440 	.word	0xfffff440

0000b6a8 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
    b6a8:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
    b6ac:	d40a      	bmi.n	b6c4 <rpmsg_is_address_set+0x1c>
    b6ae:	428a      	cmp	r2, r1
    b6b0:	da0a      	bge.n	b6c8 <rpmsg_is_address_set+0x20>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    b6b2:	0953      	lsrs	r3, r2, #5
    b6b4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    b6b8:	f002 021f 	and.w	r2, r2, #31
    b6bc:	40d0      	lsrs	r0, r2
    b6be:	f000 0001 	and.w	r0, r0, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
    b6c2:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
    b6c4:	4801      	ldr	r0, [pc, #4]	; (b6cc <rpmsg_is_address_set+0x24>)
    b6c6:	4770      	bx	lr
    b6c8:	4800      	ldr	r0, [pc, #0]	; (b6cc <rpmsg_is_address_set+0x24>)
}
    b6ca:	4770      	bx	lr
    b6cc:	fffff82d 	.word	0xfffff82d

0000b6d0 <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
    b6d0:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
    b6d4:	d40f      	bmi.n	b6f6 <rpmsg_set_address+0x26>
    b6d6:	428a      	cmp	r2, r1
    b6d8:	da0f      	bge.n	b6fa <rpmsg_set_address+0x2a>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    b6da:	ea4f 1c52 	mov.w	ip, r2, lsr #5
    b6de:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    b6e2:	f002 021f 	and.w	r2, r2, #31
    b6e6:	2101      	movs	r1, #1
    b6e8:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    b6ec:	4313      	orrs	r3, r2
    b6ee:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
    b6f2:	2000      	movs	r0, #0
    b6f4:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
    b6f6:	4802      	ldr	r0, [pc, #8]	; (b700 <rpmsg_set_address+0x30>)
    b6f8:	4770      	bx	lr
    b6fa:	4801      	ldr	r0, [pc, #4]	; (b700 <rpmsg_set_address+0x30>)
	}
}
    b6fc:	4770      	bx	lr
    b6fe:	bf00      	nop
    b700:	fffff82d 	.word	0xfffff82d

0000b704 <rpmsg_send_offchannel_raw>:
			      uint32_t dst, const void *data, int len,
			      int wait)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    b704:	b1a0      	cbz	r0, b730 <rpmsg_send_offchannel_raw+0x2c>
{
    b706:	b510      	push	{r4, lr}
    b708:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    b70a:	6a00      	ldr	r0, [r0, #32]
    b70c:	b190      	cbz	r0, b734 <rpmsg_send_offchannel_raw+0x30>
    b70e:	b19b      	cbz	r3, b738 <rpmsg_send_offchannel_raw+0x34>
    b710:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    b714:	d012      	beq.n	b73c <rpmsg_send_offchannel_raw+0x38>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    b716:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    b718:	b194      	cbz	r4, b740 <rpmsg_send_offchannel_raw+0x3c>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    b71a:	f8dd c014 	ldr.w	ip, [sp, #20]
    b71e:	f8cd c004 	str.w	ip, [sp, #4]
    b722:	f8dd c010 	ldr.w	ip, [sp, #16]
    b726:	f8cd c000 	str.w	ip, [sp]
    b72a:	47a0      	blx	r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
    b72c:	b002      	add	sp, #8
    b72e:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
    b730:	4804      	ldr	r0, [pc, #16]	; (b744 <rpmsg_send_offchannel_raw+0x40>)
}
    b732:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
    b734:	4803      	ldr	r0, [pc, #12]	; (b744 <rpmsg_send_offchannel_raw+0x40>)
    b736:	e7f9      	b.n	b72c <rpmsg_send_offchannel_raw+0x28>
    b738:	4802      	ldr	r0, [pc, #8]	; (b744 <rpmsg_send_offchannel_raw+0x40>)
    b73a:	e7f7      	b.n	b72c <rpmsg_send_offchannel_raw+0x28>
    b73c:	4801      	ldr	r0, [pc, #4]	; (b744 <rpmsg_send_offchannel_raw+0x40>)
    b73e:	e7f5      	b.n	b72c <rpmsg_send_offchannel_raw+0x28>
	return RPMSG_ERR_PARAM;
    b740:	4800      	ldr	r0, [pc, #0]	; (b744 <rpmsg_send_offchannel_raw+0x40>)
    b742:	e7f3      	b.n	b72c <rpmsg_send_offchannel_raw+0x28>
    b744:	fffff82d 	.word	0xfffff82d

0000b748 <rpmsg_send_offchannel_nocopy>:
int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    b748:	b180      	cbz	r0, b76c <rpmsg_send_offchannel_nocopy+0x24>
{
    b74a:	b510      	push	{r4, lr}
    b74c:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    b74e:	6a00      	ldr	r0, [r0, #32]
    b750:	b170      	cbz	r0, b770 <rpmsg_send_offchannel_nocopy+0x28>
    b752:	b17b      	cbz	r3, b774 <rpmsg_send_offchannel_nocopy+0x2c>
    b754:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    b758:	d00e      	beq.n	b778 <rpmsg_send_offchannel_nocopy+0x30>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
    b75a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    b75c:	b174      	cbz	r4, b77c <rpmsg_send_offchannel_nocopy+0x34>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
    b75e:	f8dd c010 	ldr.w	ip, [sp, #16]
    b762:	f8cd c000 	str.w	ip, [sp]
    b766:	47a0      	blx	r4
							data, len);

	return RPMSG_ERR_PARAM;
}
    b768:	b002      	add	sp, #8
    b76a:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
    b76c:	4804      	ldr	r0, [pc, #16]	; (b780 <rpmsg_send_offchannel_nocopy+0x38>)
}
    b76e:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
    b770:	4803      	ldr	r0, [pc, #12]	; (b780 <rpmsg_send_offchannel_nocopy+0x38>)
    b772:	e7f9      	b.n	b768 <rpmsg_send_offchannel_nocopy+0x20>
    b774:	4802      	ldr	r0, [pc, #8]	; (b780 <rpmsg_send_offchannel_nocopy+0x38>)
    b776:	e7f7      	b.n	b768 <rpmsg_send_offchannel_nocopy+0x20>
    b778:	4801      	ldr	r0, [pc, #4]	; (b780 <rpmsg_send_offchannel_nocopy+0x38>)
    b77a:	e7f5      	b.n	b768 <rpmsg_send_offchannel_nocopy+0x20>
	return RPMSG_ERR_PARAM;
    b77c:	4800      	ldr	r0, [pc, #0]	; (b780 <rpmsg_send_offchannel_nocopy+0x38>)
    b77e:	e7f3      	b.n	b768 <rpmsg_send_offchannel_nocopy+0x20>
    b780:	fffff82d 	.word	0xfffff82d

0000b784 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
    b784:	b570      	push	{r4, r5, r6, lr}
    b786:	4605      	mov	r5, r0
    b788:	460c      	mov	r4, r1
    b78a:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    b78c:	4611      	mov	r1, r2
    b78e:	b1a2      	cbz	r2, b7ba <rpmsg_register_endpoint+0x36>
    b790:	2220      	movs	r2, #32
    b792:	4620      	mov	r0, r4
    b794:	f005 fd77 	bl	11286 <strncpy>
	ept->addr = src;
    b798:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
    b79a:	9b04      	ldr	r3, [sp, #16]
    b79c:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
    b79e:	9b05      	ldr	r3, [sp, #20]
    b7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    b7a2:	9b06      	ldr	r3, [sp, #24]
    b7a4:	6323      	str	r3, [r4, #48]	; 0x30
	ept->rdev = rdev;
    b7a6:	6225      	str	r5, [r4, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
    b7a8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->prev = node->prev;
    b7ac:	686a      	ldr	r2, [r5, #4]
    b7ae:	63a2      	str	r2, [r4, #56]	; 0x38
	new_node->next = node;
    b7b0:	6365      	str	r5, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
    b7b2:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
    b7b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b7b6:	6013      	str	r3, [r2, #0]
}
    b7b8:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    b7ba:	4901      	ldr	r1, [pc, #4]	; (b7c0 <rpmsg_register_endpoint+0x3c>)
    b7bc:	e7e8      	b.n	b790 <rpmsg_register_endpoint+0xc>
    b7be:	bf00      	nop
    b7c0:	00014f84 	.word	0x00014f84

0000b7c4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    b7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7c8:	b084      	sub	sp, #16
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d05b      	beq.n	b886 <rpmsg_create_ept+0xc2>
    b7ce:	460f      	mov	r7, r1
    b7d0:	4691      	mov	r9, r2
    b7d2:	461c      	mov	r4, r3
    b7d4:	4680      	mov	r8, r0
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    b7d6:	f101 0658 	add.w	r6, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    b7da:	4630      	mov	r0, r6
    b7dc:	f007 fb61 	bl	12ea2 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
    b7e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    b7e4:	d012      	beq.n	b80c <rpmsg_create_ept+0x48>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
    b7e6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    b7ea:	d320      	bcc.n	b82e <rpmsg_create_ept+0x6a>
		status = rpmsg_is_address_set(rdev->bitmap,
    b7ec:	f107 0a48 	add.w	sl, r7, #72	; 0x48
    b7f0:	4622      	mov	r2, r4
    b7f2:	2180      	movs	r1, #128	; 0x80
    b7f4:	4650      	mov	r0, sl
    b7f6:	f7ff ff57 	bl	b6a8 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    b7fa:	4605      	mov	r5, r0
    b7fc:	b188      	cbz	r0, b822 <rpmsg_create_ept+0x5e>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
    b7fe:	2800      	cmp	r0, #0
    b800:	dd00      	ble.n	b804 <rpmsg_create_ept+0x40>
			status = RPMSG_ERR_ADDR;
    b802:	4d22      	ldr	r5, [pc, #136]	; (b88c <rpmsg_create_ept+0xc8>)
	z_impl_k_sem_give(sem);
    b804:	4630      	mov	r0, r6
    b806:	f001 fb73 	bl	cef0 <z_impl_k_sem_give>
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
    b80a:	e02c      	b.n	b866 <rpmsg_create_ept+0xa2>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
    b80c:	2180      	movs	r1, #128	; 0x80
    b80e:	f107 0048 	add.w	r0, r7, #72	; 0x48
    b812:	f007 fb18 	bl	12e46 <rpmsg_get_address>
    b816:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
    b818:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b81c:	d031      	beq.n	b882 <rpmsg_create_ept+0xbe>
	int status = RPMSG_SUCCESS;
    b81e:	2500      	movs	r5, #0
    b820:	e006      	b.n	b830 <rpmsg_create_ept+0x6c>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
    b822:	4622      	mov	r2, r4
    b824:	2180      	movs	r1, #128	; 0x80
    b826:	4650      	mov	r0, sl
    b828:	f7ff ff52 	bl	b6d0 <rpmsg_set_address>
    b82c:	e000      	b.n	b830 <rpmsg_create_ept+0x6c>
	int status = RPMSG_SUCCESS;
    b82e:	2500      	movs	r5, #0
	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
    b830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b832:	9302      	str	r3, [sp, #8]
    b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b836:	9301      	str	r3, [sp, #4]
    b838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b83a:	9300      	str	r3, [sp, #0]
    b83c:	4623      	mov	r3, r4
    b83e:	464a      	mov	r2, r9
    b840:	4641      	mov	r1, r8
    b842:	4638      	mov	r0, r7
    b844:	f7ff ff9e 	bl	b784 <rpmsg_register_endpoint>
    b848:	4630      	mov	r0, r6
    b84a:	f001 fb51 	bl	cef0 <z_impl_k_sem_give>
	if (ept->name[0] && rdev->support_ns &&
    b84e:	f898 3000 	ldrb.w	r3, [r8]
    b852:	b13b      	cbz	r3, b864 <rpmsg_create_ept+0xa0>
    b854:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
    b858:	b123      	cbz	r3, b864 <rpmsg_create_ept+0xa0>
	    ept->dest_addr == RPMSG_ADDR_ANY)
    b85a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
    b85e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b862:	d004      	beq.n	b86e <rpmsg_create_ept+0xaa>
	if (status)
    b864:	b94d      	cbnz	r5, b87a <rpmsg_create_ept+0xb6>
}
    b866:	4628      	mov	r0, r5
    b868:	b004      	add	sp, #16
    b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    b86e:	2100      	movs	r1, #0
    b870:	4640      	mov	r0, r8
    b872:	f007 fb3f 	bl	12ef4 <rpmsg_send_ns_message>
    b876:	4605      	mov	r5, r0
    b878:	e7f4      	b.n	b864 <rpmsg_create_ept+0xa0>
		rpmsg_unregister_endpoint(ept);
    b87a:	4640      	mov	r0, r8
    b87c:	f007 fb19 	bl	12eb2 <rpmsg_unregister_endpoint>
    b880:	e7f1      	b.n	b866 <rpmsg_create_ept+0xa2>
			status = RPMSG_ERR_ADDR;
    b882:	4d02      	ldr	r5, [pc, #8]	; (b88c <rpmsg_create_ept+0xc8>)
    b884:	e7be      	b.n	b804 <rpmsg_create_ept+0x40>
		return RPMSG_ERR_PARAM;
    b886:	4d02      	ldr	r5, [pc, #8]	; (b890 <rpmsg_create_ept+0xcc>)
    b888:	e7ed      	b.n	b866 <rpmsg_create_ept+0xa2>
    b88a:	bf00      	nop
    b88c:	fffff829 	.word	0xfffff829
    b890:	fffff82d 	.word	0xfffff82d

0000b894 <_rpmsg_virtio_get_buffer_size>:
	return rvdev->vdev->role;
    b894:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    b898:	699b      	ldr	r3, [r3, #24]
{
	unsigned int role = rpmsg_virtio_get_role(rvdev);
	int length = 0;

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    b89a:	b92b      	cbnz	r3, b8a8 <_rpmsg_virtio_get_buffer_size+0x14>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
    b89c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    b8a0:	3810      	subs	r0, #16
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/

	if (length <= 0) {
    b8a2:	2800      	cmp	r0, #0
    b8a4:	dd02      	ble.n	b8ac <_rpmsg_virtio_get_buffer_size+0x18>
		length = RPMSG_ERR_NO_BUFF;
	}

	return length;
}
    b8a6:	4770      	bx	lr
		length = RPMSG_ERR_NO_BUFF;
    b8a8:	4801      	ldr	r0, [pc, #4]	; (b8b0 <_rpmsg_virtio_get_buffer_size+0x1c>)
    b8aa:	4770      	bx	lr
    b8ac:	4800      	ldr	r0, [pc, #0]	; (b8b0 <_rpmsg_virtio_get_buffer_size+0x1c>)
	return length;
    b8ae:	e7fa      	b.n	b8a6 <_rpmsg_virtio_get_buffer_size+0x12>
    b8b0:	fffff82e 	.word	0xfffff82e

0000b8b4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
    b8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8b8:	b084      	sub	sp, #16
	struct virtio_device *vdev = vq->vq_dev;
    b8ba:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    b8bc:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
    b8be:	f107 0658 	add.w	r6, r7, #88	; 0x58
    b8c2:	4630      	mov	r0, r6
    b8c4:	f007 fb9f 	bl	13006 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    b8c8:	f10d 020a 	add.w	r2, sp, #10
    b8cc:	a903      	add	r1, sp, #12
    b8ce:	4638      	mov	r0, r7
    b8d0:	f007 fc13 	bl	130fa <rpmsg_virtio_get_rx_buffer>
    b8d4:	4604      	mov	r4, r0
    b8d6:	4630      	mov	r0, r6
    b8d8:	f001 fb0a 	bl	cef0 <z_impl_k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
    b8dc:	e01c      	b.n	b918 <rpmsg_virtio_rx_callback+0x64>
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    b8de:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
    b8e2:	89a2      	ldrh	r2, [r4, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    b8e4:	4621      	mov	r1, r4
    b8e6:	f851 3b10 	ldr.w	r3, [r1], #16
    b8ea:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    b8ec:	9000      	str	r0, [sp, #0]
    b8ee:	4628      	mov	r0, r5
    b8f0:	47c0      	blx	r8

			RPMSG_ASSERT(status >= 0,
    b8f2:	2800      	cmp	r0, #0
    b8f4:	db2b      	blt.n	b94e <rpmsg_virtio_rx_callback+0x9a>
	__metal_mutex_acquire(mutex);
    b8f6:	4630      	mov	r0, r6
    b8f8:	f007 fb85 	bl	13006 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
    b8fc:	68a3      	ldr	r3, [r4, #8]
    b8fe:	2b00      	cmp	r3, #0
    b900:	da33      	bge.n	b96a <rpmsg_virtio_rx_callback+0xb6>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    b902:	f10d 020a 	add.w	r2, sp, #10
    b906:	a903      	add	r1, sp, #12
    b908:	4638      	mov	r0, r7
    b90a:	f007 fbf6 	bl	130fa <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
    b90e:	4604      	mov	r4, r0
    b910:	b398      	cbz	r0, b97a <rpmsg_virtio_rx_callback+0xc6>
    b912:	4630      	mov	r0, r6
    b914:	f001 faec 	bl	cef0 <z_impl_k_sem_give>
	while (rp_hdr) {
    b918:	b3a4      	cbz	r4, b984 <rpmsg_virtio_rx_callback+0xd0>
		rp_hdr->reserved = idx;
    b91a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    b91e:	60a3      	str	r3, [r4, #8]
    b920:	4630      	mov	r0, r6
    b922:	f007 fb70 	bl	13006 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
    b926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b92a:	6862      	ldr	r2, [r4, #4]
    b92c:	2100      	movs	r1, #0
    b92e:	4638      	mov	r0, r7
    b930:	f007 fb1b 	bl	12f6a <rpmsg_get_endpoint>
    b934:	4605      	mov	r5, r0
    b936:	4630      	mov	r0, r6
    b938:	f001 fada 	bl	cef0 <z_impl_k_sem_give>
		if (ept) {
    b93c:	2d00      	cmp	r5, #0
    b93e:	d0da      	beq.n	b8f6 <rpmsg_virtio_rx_callback+0x42>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
    b940:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b946:	d1ca      	bne.n	b8de <rpmsg_virtio_rx_callback+0x2a>
				ept->dest_addr = rp_hdr->src;
    b948:	6823      	ldr	r3, [r4, #0]
    b94a:	62ab      	str	r3, [r5, #40]	; 0x28
    b94c:	e7c7      	b.n	b8de <rpmsg_virtio_rx_callback+0x2a>
			RPMSG_ASSERT(status >= 0,
    b94e:	4d0f      	ldr	r5, [pc, #60]	; (b98c <rpmsg_virtio_rx_callback+0xd8>)
    b950:	f44f 7302 	mov.w	r3, #520	; 0x208
    b954:	462a      	mov	r2, r5
    b956:	490e      	ldr	r1, [pc, #56]	; (b990 <rpmsg_virtio_rx_callback+0xdc>)
    b958:	480e      	ldr	r0, [pc, #56]	; (b994 <rpmsg_virtio_rx_callback+0xe0>)
    b95a:	f004 feed 	bl	10738 <assert_print>
    b95e:	f44f 7102 	mov.w	r1, #520	; 0x208
    b962:	4628      	mov	r0, r5
    b964:	f004 fee1 	bl	1072a <assert_post_action>
    b968:	e7c5      	b.n	b8f6 <rpmsg_virtio_rx_callback+0x42>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
    b96a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    b96e:	9a03      	ldr	r2, [sp, #12]
    b970:	4621      	mov	r1, r4
    b972:	4638      	mov	r0, r7
    b974:	f007 fb4f 	bl	13016 <rpmsg_virtio_return_buffer>
    b978:	e7c3      	b.n	b902 <rpmsg_virtio_rx_callback+0x4e>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
    b97a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    b97e:	f007 fa3d 	bl	12dfc <virtqueue_kick>
    b982:	e7c6      	b.n	b912 <rpmsg_virtio_rx_callback+0x5e>
		}
		metal_mutex_release(&rdev->lock);
	}
}
    b984:	b004      	add	sp, #16
    b986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98a:	bf00      	nop
    b98c:	0001635c 	.word	0x0001635c
    b990:	000163a0 	.word	0x000163a0
    b994:	00013d44 	.word	0x00013d44

0000b998 <rpmsg_virtio_send_offchannel_nocopy>:
{
    b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b99c:	b084      	sub	sp, #16
    b99e:	4604      	mov	r4, r0
    b9a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
    b9a2:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
    b9a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
    b9aa:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
    b9ac:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
    b9ae:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
    b9b0:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
    b9b4:	2300      	movs	r3, #0
    b9b6:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
    b9b8:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
    b9bc:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    b9c0:	6801      	ldr	r1, [r0, #0]
    b9c2:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    b9c4:	6883      	ldr	r3, [r0, #8]
    b9c6:	4299      	cmp	r1, r3
    b9c8:	d221      	bcs.n	ba0e <rpmsg_virtio_send_offchannel_nocopy+0x76>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
    b9ca:	2310      	movs	r3, #16
    b9cc:	466a      	mov	r2, sp
    b9ce:	f007 f816 	bl	129fe <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    b9d2:	2810      	cmp	r0, #16
    b9d4:	d11e      	bne.n	ba14 <rpmsg_virtio_send_offchannel_nocopy+0x7c>
	metal_mutex_acquire(&rdev->lock);
    b9d6:	f104 0858 	add.w	r8, r4, #88	; 0x58
    b9da:	4640      	mov	r0, r8
    b9dc:	f007 fb13 	bl	13006 <__metal_mutex_acquire>
    b9e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    b9e4:	699b      	ldr	r3, [r3, #24]
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
    b9e6:	bb23      	cbnz	r3, ba32 <rpmsg_virtio_send_offchannel_nocopy+0x9a>
		buff_len = rvdev->config.h2r_buf_size;
    b9e8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
    b9ec:	462b      	mov	r3, r5
    b9ee:	4639      	mov	r1, r7
    b9f0:	4620      	mov	r0, r4
    b9f2:	f007 fb24 	bl	1303e <rpmsg_virtio_enqueue_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    b9f6:	bb18      	cbnz	r0, ba40 <rpmsg_virtio_send_offchannel_nocopy+0xa8>
	virtqueue_kick(rvdev->svq);
    b9f8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    b9fc:	f007 f9fe 	bl	12dfc <virtqueue_kick>
    ba00:	4640      	mov	r0, r8
    ba02:	f001 fa75 	bl	cef0 <z_impl_k_sem_give>
}
    ba06:	4630      	mov	r0, r6
    ba08:	b004      	add	sp, #16
    ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ba12:	e7da      	b.n	b9ca <rpmsg_virtio_send_offchannel_nocopy+0x32>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
    ba14:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba5c <rpmsg_virtio_send_offchannel_nocopy+0xc4>
    ba18:	f240 138b 	movw	r3, #395	; 0x18b
    ba1c:	4642      	mov	r2, r8
    ba1e:	4910      	ldr	r1, [pc, #64]	; (ba60 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
    ba20:	4810      	ldr	r0, [pc, #64]	; (ba64 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
    ba22:	f004 fe89 	bl	10738 <assert_print>
    ba26:	f240 118b 	movw	r1, #395	; 0x18b
    ba2a:	4640      	mov	r0, r8
    ba2c:	f004 fe7d 	bl	1072a <assert_post_action>
    ba30:	e7d1      	b.n	b9d6 <rpmsg_virtio_send_offchannel_nocopy+0x3e>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
    ba32:	4629      	mov	r1, r5
    ba34:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ba38:	f007 f9c1 	bl	12dbe <virtqueue_get_buffer_length>
    ba3c:	4602      	mov	r2, r0
    ba3e:	e7d5      	b.n	b9ec <rpmsg_virtio_send_offchannel_nocopy+0x54>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
    ba40:	4d06      	ldr	r5, [pc, #24]	; (ba5c <rpmsg_virtio_send_offchannel_nocopy+0xc4>)
    ba42:	f44f 73cc 	mov.w	r3, #408	; 0x198
    ba46:	462a      	mov	r2, r5
    ba48:	4907      	ldr	r1, [pc, #28]	; (ba68 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
    ba4a:	4806      	ldr	r0, [pc, #24]	; (ba64 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
    ba4c:	f004 fe74 	bl	10738 <assert_print>
    ba50:	f44f 71cc 	mov.w	r1, #408	; 0x198
    ba54:	4628      	mov	r0, r5
    ba56:	f004 fe68 	bl	1072a <assert_post_action>
    ba5a:	e7cd      	b.n	b9f8 <rpmsg_virtio_send_offchannel_nocopy+0x60>
    ba5c:	0001635c 	.word	0x0001635c
    ba60:	000163ac 	.word	0x000163ac
    ba64:	00013d44 	.word	0x00013d44
    ba68:	000163c8 	.word	0x000163c8

0000ba6c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
    ba6c:	b508      	push	{r3, lr}
    ba6e:	0c41      	lsrs	r1, r0, #17
    ba70:	03c0      	lsls	r0, r0, #15
    ba72:	4b06      	ldr	r3, [pc, #24]	; (ba8c <__metal_sleep_usec+0x20>)
    ba74:	18c0      	adds	r0, r0, r3
    ba76:	4a06      	ldr	r2, [pc, #24]	; (ba90 <__metal_sleep_usec+0x24>)
    ba78:	f04f 0300 	mov.w	r3, #0
    ba7c:	f141 0100 	adc.w	r1, r1, #0
    ba80:	f7f4 fb68 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    ba84:	f002 ffc2 	bl	ea0c <z_impl_k_sleep>
	k_sleep(K_USEC(usec));
	return 0;
}
    ba88:	2000      	movs	r0, #0
    ba8a:	bd08      	pop	{r3, pc}
    ba8c:	000f423f 	.word	0x000f423f
    ba90:	000f4240 	.word	0x000f4240

0000ba94 <rpmsg_virtio_send_offchannel_raw>:
{
    ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba98:	b084      	sub	sp, #16
    ba9a:	4605      	mov	r5, r0
    ba9c:	460e      	mov	r6, r1
    ba9e:	4690      	mov	r8, r2
    baa0:	4699      	mov	r9, r3
    baa2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
    baa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    baa6:	a903      	add	r1, sp, #12
    baa8:	f007 fb7e 	bl	131a8 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
    baac:	b368      	cbz	r0, bb0a <rpmsg_virtio_send_offchannel_raw+0x76>
    baae:	4682      	mov	sl, r0
	if (len > (int)buff_len)
    bab0:	9c03      	ldr	r4, [sp, #12]
    bab2:	42bc      	cmp	r4, r7
    bab4:	db00      	blt.n	bab8 <rpmsg_virtio_send_offchannel_raw+0x24>
    bab6:	463c      	mov	r4, r7
	io = rvdev->shbuf_io;
    bab8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    babc:	6801      	ldr	r1, [r0, #0]
    babe:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    bac2:	6883      	ldr	r3, [r0, #8]
    bac4:	4299      	cmp	r1, r3
    bac6:	d20f      	bcs.n	bae8 <rpmsg_virtio_send_offchannel_raw+0x54>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    bac8:	4623      	mov	r3, r4
    baca:	464a      	mov	r2, r9
    bacc:	f006 ff97 	bl	129fe <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
    bad0:	4284      	cmp	r4, r0
    bad2:	d10c      	bne.n	baee <rpmsg_virtio_send_offchannel_raw+0x5a>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
    bad4:	9400      	str	r4, [sp, #0]
    bad6:	4653      	mov	r3, sl
    bad8:	4642      	mov	r2, r8
    bada:	4631      	mov	r1, r6
    badc:	4628      	mov	r0, r5
    bade:	f7ff ff5b 	bl	b998 <rpmsg_virtio_send_offchannel_nocopy>
}
    bae2:	b004      	add	sp, #16
    bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    baec:	e7ec      	b.n	bac8 <rpmsg_virtio_send_offchannel_raw+0x34>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
    baee:	4f08      	ldr	r7, [pc, #32]	; (bb10 <rpmsg_virtio_send_offchannel_raw+0x7c>)
    baf0:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    baf4:	463a      	mov	r2, r7
    baf6:	4907      	ldr	r1, [pc, #28]	; (bb14 <rpmsg_virtio_send_offchannel_raw+0x80>)
    baf8:	4807      	ldr	r0, [pc, #28]	; (bb18 <rpmsg_virtio_send_offchannel_raw+0x84>)
    bafa:	f004 fe1d 	bl	10738 <assert_print>
    bafe:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bb02:	4638      	mov	r0, r7
    bb04:	f004 fe11 	bl	1072a <assert_post_action>
    bb08:	e7e4      	b.n	bad4 <rpmsg_virtio_send_offchannel_raw+0x40>
		return RPMSG_ERR_NO_BUFF;
    bb0a:	4804      	ldr	r0, [pc, #16]	; (bb1c <rpmsg_virtio_send_offchannel_raw+0x88>)
    bb0c:	e7e9      	b.n	bae2 <rpmsg_virtio_send_offchannel_raw+0x4e>
    bb0e:	bf00      	nop
    bb10:	0001635c 	.word	0x0001635c
    bb14:	000163d4 	.word	0x000163d4
    bb18:	00013d44 	.word	0x00013d44
    bb1c:	fffff82e 	.word	0xfffff82e

0000bb20 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
    bb20:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
    bb22:	b170      	cbz	r0, bb42 <rpmsg_virtio_get_buffer_size+0x22>
    bb24:	4604      	mov	r4, r0
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
    bb26:	f100 0558 	add.w	r5, r0, #88	; 0x58
    bb2a:	4628      	mov	r0, r5
    bb2c:	f007 fa6b 	bl	13006 <__metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
    bb30:	4620      	mov	r0, r4
    bb32:	f7ff feaf 	bl	b894 <_rpmsg_virtio_get_buffer_size>
    bb36:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    bb38:	4628      	mov	r0, r5
    bb3a:	f001 f9d9 	bl	cef0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);
	return size;
}
    bb3e:	4620      	mov	r0, r4
    bb40:	bd38      	pop	{r3, r4, r5, pc}
		return RPMSG_ERR_PARAM;
    bb42:	4c01      	ldr	r4, [pc, #4]	; (bb48 <rpmsg_virtio_get_buffer_size+0x28>)
    bb44:	e7fb      	b.n	bb3e <rpmsg_virtio_get_buffer_size+0x1e>
    bb46:	bf00      	nop
    bb48:	fffff82d 	.word	0xfffff82d

0000bb4c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
    bb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb50:	b08a      	sub	sp, #40	; 0x28
    bb52:	4604      	mov	r4, r0
    bb54:	460e      	mov	r6, r1
    bb56:	4690      	mov	r8, r2
    bb58:	461d      	mov	r5, r3
    bb5a:	9f12      	ldr	r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    bb5c:	2284      	movs	r2, #132	; 0x84
    bb5e:	2100      	movs	r1, #0
    bb60:	f005 fc0b 	bl	1137a <memset>
	metal_mutex_init(&rdev->lock);
    bb64:	f104 0058 	add.w	r0, r4, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
    bb68:	2201      	movs	r2, #1
    bb6a:	4611      	mov	r1, r2
    bb6c:	f007 fc49 	bl	13402 <z_impl_k_sem_init>
	rvdev->vdev = vdev;
    bb70:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	rdev->ns_bind_cb = ns_bind_cb;
    bb74:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
	vdev->priv = rvdev;
    bb78:	6274      	str	r4, [r6, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    bb7a:	4b5d      	ldr	r3, [pc, #372]	; (bcf0 <rpmsg_init_vdev_with_config+0x1a4>)
    bb7c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
    bb7e:	4b5d      	ldr	r3, [pc, #372]	; (bcf4 <rpmsg_init_vdev_with_config+0x1a8>)
    bb80:	6723      	str	r3, [r4, #112]	; 0x70
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
    bb82:	4b5d      	ldr	r3, [pc, #372]	; (bcf8 <rpmsg_init_vdev_with_config+0x1ac>)
    bb84:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
    bb86:	4b5d      	ldr	r3, [pc, #372]	; (bcfc <rpmsg_init_vdev_with_config+0x1b0>)
    bb88:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
    bb8a:	4b5d      	ldr	r3, [pc, #372]	; (bd00 <rpmsg_init_vdev_with_config+0x1b4>)
    bb8c:	67e3      	str	r3, [r4, #124]	; 0x7c
    bb8e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    bb92:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    bb96:	f1b8 0f00 	cmp.w	r8, #0
    bb9a:	d109      	bne.n	bbb0 <rpmsg_init_vdev_with_config+0x64>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
    bb9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bb9e:	2a00      	cmp	r2, #0
    bba0:	f000 809c 	beq.w	bcdc <rpmsg_init_vdev_with_config+0x190>
			return RPMSG_ERR_PARAM;
		}
		rvdev->config = *config;
    bba4:	f104 0284 	add.w	r2, r4, #132	; 0x84
    bba8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bbaa:	c903      	ldmia	r1, {r0, r1}
    bbac:	e882 0003 	stmia.w	r2, {r0, r1}
	return rvdev->vdev->func->get_features(rvdev->vdev);
    bbb0:	6a1a      	ldr	r2, [r3, #32]
    bbb2:	6892      	ldr	r2, [r2, #8]
    bbb4:	4618      	mov	r0, r3
    bbb6:	4790      	blx	r2
	if (role == RPMSG_REMOTE) {
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    bbb8:	6130      	str	r0, [r6, #16]
    bbba:	2300      	movs	r3, #0
    bbbc:	6173      	str	r3, [r6, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    bbbe:	f000 0001 	and.w	r0, r0, #1
    bbc2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    bbc6:	f1b8 0f00 	cmp.w	r8, #0
    bbca:	d118      	bne.n	bbfe <rpmsg_init_vdev_with_config+0xb2>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
    bbcc:	2f00      	cmp	r7, #0
    bbce:	f000 8088 	beq.w	bce2 <rpmsg_init_vdev_with_config+0x196>
			return RPMSG_ERR_PARAM;
		if (!shpool->size)
    bbd2:	68bb      	ldr	r3, [r7, #8]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	f000 8087 	beq.w	bce8 <rpmsg_init_vdev_with_config+0x19c>
			return RPMSG_ERR_NO_BUFF;
		rvdev->shpool = shpool;
    bbda:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c

		vq_names[0] = "rx_vq";
    bbde:	4b49      	ldr	r3, [pc, #292]	; (bd04 <rpmsg_init_vdev_with_config+0x1b8>)
    bbe0:	9308      	str	r3, [sp, #32]
		vq_names[1] = "tx_vq";
    bbe2:	4b49      	ldr	r3, [pc, #292]	; (bd08 <rpmsg_init_vdev_with_config+0x1bc>)
    bbe4:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
    bbe6:	4b49      	ldr	r3, [pc, #292]	; (bd0c <rpmsg_init_vdev_with_config+0x1c0>)
    bbe8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
    bbea:	4b49      	ldr	r3, [pc, #292]	; (bd10 <rpmsg_init_vdev_with_config+0x1c4>)
    bbec:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    bbee:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    bbf0:	681b      	ldr	r3, [r3, #0]
    bbf2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		rvdev->svq  = vdev->vrings_info[1].vq;
    bbf6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    bbf8:	699b      	ldr	r3, [r3, #24]
    bbfa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	rvdev->shbuf_io = shm_io;
    bbfe:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    bc02:	ab06      	add	r3, sp, #24
    bc04:	9300      	str	r3, [sp, #0]
    bc06:	ab08      	add	r3, sp, #32
    bc08:	2202      	movs	r2, #2
    bc0a:	2100      	movs	r1, #0
    bc0c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bc10:	f7ff fcfa 	bl	b608 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    bc14:	4682      	mov	sl, r0
    bc16:	b118      	cbz	r0, bc20 <rpmsg_init_vdev_with_config+0xd4>
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
    bc18:	4650      	mov	r0, sl
    bc1a:	b00a      	add	sp, #40	; 0x28
    bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	virtqueue_disable_cb(rvdev->svq);
    bc20:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    bc24:	f007 f8d0 	bl	12dc8 <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
    bc28:	2300      	movs	r3, #0
    bc2a:	2b01      	cmp	r3, #1
    bc2c:	d807      	bhi.n	bc3e <rpmsg_init_vdev_with_config+0xf2>
		vq = vdev->vrings_info[i].vq;
    bc2e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    bc30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    bc34:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
		vq->shm_io = shm_io;
    bc38:	6295      	str	r5, [r2, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
    bc3a:	3301      	adds	r3, #1
    bc3c:	e7f5      	b.n	bc2a <rpmsg_init_vdev_with_config+0xde>
	if (role == RPMSG_HOST) {
    bc3e:	f1b8 0f00 	cmp.w	r8, #0
    bc42:	d12f      	bne.n	bca4 <rpmsg_init_vdev_with_config+0x158>
		vqbuf.len = rvdev->config.r2h_buf_size;
    bc44:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    bc48:	9305      	str	r3, [sp, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    bc4a:	46c1      	mov	r9, r8
    bc4c:	e012      	b.n	bc74 <rpmsg_init_vdev_with_config+0x128>
			metal_io_block_set(shm_io,
    bc4e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    bc52:	2200      	movs	r2, #0
    bc54:	4628      	mov	r0, r5
    bc56:	f006 ff13 	bl	12a80 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    bc5a:	9600      	str	r6, [sp, #0]
    bc5c:	2301      	movs	r3, #1
    bc5e:	2200      	movs	r2, #0
    bc60:	a904      	add	r1, sp, #16
    bc62:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    bc66:	f007 f85f 	bl	12d28 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    bc6a:	4682      	mov	sl, r0
    bc6c:	2800      	cmp	r0, #0
    bc6e:	d1d3      	bne.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    bc70:	f109 0901 	add.w	r9, r9, #1
    bc74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    bc78:	895b      	ldrh	r3, [r3, #10]
    bc7a:	454b      	cmp	r3, r9
    bc7c:	d912      	bls.n	bca4 <rpmsg_init_vdev_with_config+0x158>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    bc7e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    bc82:	4638      	mov	r0, r7
    bc84:	f007 fa60 	bl	13148 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    bc88:	4606      	mov	r6, r0
    bc8a:	b140      	cbz	r0, bc9e <rpmsg_init_vdev_with_config+0x152>
			vqbuf.buf = buffer;
    bc8c:	9004      	str	r0, [sp, #16]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    bc8e:	6829      	ldr	r1, [r5, #0]
    bc90:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    bc92:	68ab      	ldr	r3, [r5, #8]
    bc94:	4299      	cmp	r1, r3
    bc96:	d3da      	bcc.n	bc4e <rpmsg_init_vdev_with_config+0x102>
    bc98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bc9c:	e7d7      	b.n	bc4e <rpmsg_init_vdev_with_config+0x102>
				return RPMSG_ERR_NO_BUFF;
    bc9e:	f8df a074 	ldr.w	sl, [pc, #116]	; bd14 <rpmsg_init_vdev_with_config+0x1c8>
    bca2:	e7b9      	b.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
	list->prev = list;
    bca4:	6064      	str	r4, [r4, #4]
	list->next = list;
    bca6:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
    bca8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    bcac:	b94b      	cbnz	r3, bcc2 <rpmsg_init_vdev_with_config+0x176>
	if (role == RPMSG_HOST)
    bcae:	f1b8 0f00 	cmp.w	r8, #0
    bcb2:	d1b1      	bne.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    bcb4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bcb8:	6a03      	ldr	r3, [r0, #32]
    bcba:	685b      	ldr	r3, [r3, #4]
    bcbc:	2104      	movs	r1, #4
    bcbe:	4798      	blx	r3
}
    bcc0:	e7aa      	b.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
    bcc2:	2300      	movs	r3, #0
    bcc4:	9302      	str	r3, [sp, #8]
    bcc6:	4b14      	ldr	r3, [pc, #80]	; (bd18 <rpmsg_init_vdev_with_config+0x1cc>)
    bcc8:	9301      	str	r3, [sp, #4]
    bcca:	2335      	movs	r3, #53	; 0x35
    bccc:	9300      	str	r3, [sp, #0]
    bcce:	4a13      	ldr	r2, [pc, #76]	; (bd1c <rpmsg_init_vdev_with_config+0x1d0>)
    bcd0:	f104 0108 	add.w	r1, r4, #8
    bcd4:	4620      	mov	r0, r4
    bcd6:	f7ff fd55 	bl	b784 <rpmsg_register_endpoint>
    bcda:	e7e8      	b.n	bcae <rpmsg_init_vdev_with_config+0x162>
			return RPMSG_ERR_PARAM;
    bcdc:	f8df a040 	ldr.w	sl, [pc, #64]	; bd20 <rpmsg_init_vdev_with_config+0x1d4>
    bce0:	e79a      	b.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
			return RPMSG_ERR_PARAM;
    bce2:	f8df a03c 	ldr.w	sl, [pc, #60]	; bd20 <rpmsg_init_vdev_with_config+0x1d4>
    bce6:	e797      	b.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
			return RPMSG_ERR_NO_BUFF;
    bce8:	f8df a028 	ldr.w	sl, [pc, #40]	; bd14 <rpmsg_init_vdev_with_config+0x1c8>
    bcec:	e794      	b.n	bc18 <rpmsg_init_vdev_with_config+0xcc>
    bcee:	bf00      	nop
    bcf0:	0000ba95 	.word	0x0000ba95
    bcf4:	00012ff7 	.word	0x00012ff7
    bcf8:	00013113 	.word	0x00013113
    bcfc:	000131a9 	.word	0x000131a9
    bd00:	0000b999 	.word	0x0000b999
    bd04:	000163e4 	.word	0x000163e4
    bd08:	000163ec 	.word	0x000163ec
    bd0c:	0000b8b5 	.word	0x0000b8b5
    bd10:	00013005 	.word	0x00013005
    bd14:	fffff82e 	.word	0xfffff82e
    bd18:	00013067 	.word	0x00013067
    bd1c:	000163f4 	.word	0x000163f4
    bd20:	fffff82d 	.word	0xfffff82d

0000bd24 <rpmsg_init_vdev>:
{
    bd24:	b510      	push	{r4, lr}
    bd26:	b084      	sub	sp, #16
    bd28:	4684      	mov	ip, r0
    bd2a:	468e      	mov	lr, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
    bd2c:	4906      	ldr	r1, [pc, #24]	; (bd48 <rpmsg_init_vdev+0x24>)
    bd2e:	ac02      	add	r4, sp, #8
    bd30:	c903      	ldmia	r1, {r0, r1}
    bd32:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
    bd36:	9401      	str	r4, [sp, #4]
    bd38:	9906      	ldr	r1, [sp, #24]
    bd3a:	9100      	str	r1, [sp, #0]
    bd3c:	4671      	mov	r1, lr
    bd3e:	4660      	mov	r0, ip
    bd40:	f7ff ff04 	bl	bb4c <rpmsg_init_vdev_with_config>
}
    bd44:	b004      	add	sp, #16
    bd46:	bd10      	pop	{r4, pc}
    bd48:	00013b7c 	.word	0x00013b7c

0000bd4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    bd4c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    bd4e:	4c11      	ldr	r4, [pc, #68]	; (bd94 <_DoInit+0x48>)
    bd50:	2303      	movs	r3, #3
    bd52:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    bd54:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    bd56:	4a10      	ldr	r2, [pc, #64]	; (bd98 <_DoInit+0x4c>)
    bd58:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    bd5a:	4b10      	ldr	r3, [pc, #64]	; (bd9c <_DoInit+0x50>)
    bd5c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    bd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bd62:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    bd64:	2300      	movs	r3, #0
    bd66:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    bd68:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    bd6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    bd6c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    bd6e:	4a0c      	ldr	r2, [pc, #48]	; (bda0 <_DoInit+0x54>)
    bd70:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    bd72:	2210      	movs	r2, #16
    bd74:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    bd76:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    bd78:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    bd7a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    bd7c:	4909      	ldr	r1, [pc, #36]	; (bda4 <_DoInit+0x58>)
    bd7e:	1de0      	adds	r0, r4, #7
    bd80:	f005 fa77 	bl	11272 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    bd84:	4908      	ldr	r1, [pc, #32]	; (bda8 <_DoInit+0x5c>)
    bd86:	4620      	mov	r0, r4
    bd88:	f005 fa73 	bl	11272 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    bd8c:	2320      	movs	r3, #32
    bd8e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    bd90:	bd10      	pop	{r4, pc}
    bd92:	bf00      	nop
    bd94:	2000268c 	.word	0x2000268c
    bd98:	000163f8 	.word	0x000163f8
    bd9c:	2000228c 	.word	0x2000228c
    bda0:	2000227c 	.word	0x2000227c
    bda4:	00016404 	.word	0x00016404
    bda8:	00016408 	.word	0x00016408

0000bdac <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdb0:	4604      	mov	r4, r0
    bdb2:	460e      	mov	r6, r1
    bdb4:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    bdb6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    bdba:	4a2d      	ldr	r2, [pc, #180]	; (be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    bdbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bdc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    bdc2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    bdc4:	42bb      	cmp	r3, r7
    bdc6:	d84c      	bhi.n	be62 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    bdc8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    bdcc:	4a28      	ldr	r2, [pc, #160]	; (be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    bdce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    bdd2:	f8d2 8020 	ldr.w	r8, [r2, #32]
    bdd6:	eba8 0907 	sub.w	r9, r8, r7
    bdda:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    bdde:	4295      	cmp	r5, r2
    bde0:	d904      	bls.n	bdec <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    bde2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    bde4:	429d      	cmp	r5, r3
    bde6:	d916      	bls.n	be16 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    bde8:	2000      	movs	r0, #0
    bdea:	e03f      	b.n	be6c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    bdec:	f8df 8080 	ldr.w	r8, [pc, #128]	; be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    bdf0:	1c63      	adds	r3, r4, #1
    bdf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bdf6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    bdfa:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    bdfc:	462a      	mov	r2, r5
    bdfe:	4631      	mov	r1, r6
    be00:	4438      	add	r0, r7
    be02:	f005 fa8b 	bl	1131c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    be06:	442f      	add	r7, r5
    be08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    be0c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    be10:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    be12:	2001      	movs	r0, #1
    be14:	e02a      	b.n	be6c <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    be16:	1c43      	adds	r3, r0, #1
    be18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    be1c:	4a14      	ldr	r2, [pc, #80]	; (be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    be1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    be22:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    be24:	464a      	mov	r2, r9
    be26:	4631      	mov	r1, r6
    be28:	4438      	add	r0, r7
    be2a:	f005 fa77 	bl	1131c <memcpy>
      NumBytes -= Rem;
    be2e:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
    be32:	eb18 0505 	adds.w	r5, r8, r5
    be36:	d107      	bne.n	be48 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
    be38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    be3c:	4b0c      	ldr	r3, [pc, #48]	; (be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    be3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    be42:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
    be44:	2001      	movs	r0, #1
    be46:	e011      	b.n	be6c <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    be48:	1c63      	adds	r3, r4, #1
    be4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    be4e:	4a08      	ldr	r2, [pc, #32]	; (be70 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    be50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    be54:	462a      	mov	r2, r5
    be56:	eb06 0109 	add.w	r1, r6, r9
    be5a:	6858      	ldr	r0, [r3, #4]
    be5c:	f005 fa5e 	bl	1131c <memcpy>
    be60:	e7ea      	b.n	be38 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
    be62:	1bdb      	subs	r3, r3, r7
    be64:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    be66:	42ab      	cmp	r3, r5
    be68:	d2c0      	bcs.n	bdec <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    be6a:	2000      	movs	r0, #0
}
    be6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    be70:	2000268c 	.word	0x2000268c

0000be74 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be76:	460f      	mov	r7, r1
    be78:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    be7a:	1c45      	adds	r5, r0, #1
    be7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    be80:	4b16      	ldr	r3, [pc, #88]	; (bedc <SEGGER_RTT_WriteNoLock+0x68>)
    be82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    be86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    be8a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    be8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    be90:	2c01      	cmp	r4, #1
    be92:	d011      	beq.n	beb8 <SEGGER_RTT_WriteNoLock+0x44>
    be94:	2c02      	cmp	r4, #2
    be96:	d01c      	beq.n	bed2 <SEGGER_RTT_WriteNoLock+0x5e>
    be98:	b114      	cbz	r4, bea0 <SEGGER_RTT_WriteNoLock+0x2c>
    be9a:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    be9c:	4620      	mov	r0, r4
    be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    bea0:	4628      	mov	r0, r5
    bea2:	f007 f9be 	bl	13222 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    bea6:	4286      	cmp	r6, r0
    bea8:	d8f8      	bhi.n	be9c <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    beaa:	4632      	mov	r2, r6
    beac:	4639      	mov	r1, r7
    beae:	4628      	mov	r0, r5
    beb0:	f007 f9c3 	bl	1323a <_WriteNoCheck>
      Status = NumBytes;
    beb4:	4634      	mov	r4, r6
    beb6:	e7f1      	b.n	be9c <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    beb8:	4628      	mov	r0, r5
    beba:	f007 f9b2 	bl	13222 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    bebe:	4634      	mov	r4, r6
    bec0:	4286      	cmp	r6, r0
    bec2:	bf28      	it	cs
    bec4:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    bec6:	4622      	mov	r2, r4
    bec8:	4639      	mov	r1, r7
    beca:	4628      	mov	r0, r5
    becc:	f007 f9b5 	bl	1323a <_WriteNoCheck>
    break;
    bed0:	e7e4      	b.n	be9c <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    bed2:	4628      	mov	r0, r5
    bed4:	f007 f9d3 	bl	1327e <_WriteBlocking>
    bed8:	4604      	mov	r4, r0
    break;
    beda:	e7df      	b.n	be9c <SEGGER_RTT_WriteNoLock+0x28>
    bedc:	2000268c 	.word	0x2000268c

0000bee0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    bee0:	4b06      	ldr	r3, [pc, #24]	; (befc <SEGGER_RTT_HasDataUp+0x1c>)
    bee2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    bee6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    beea:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    beec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    bef0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    bef4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    bef6:	1a80      	subs	r0, r0, r2
    bef8:	4770      	bx	lr
    befa:	bf00      	nop
    befc:	2000268c 	.word	0x2000268c

0000bf00 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
    bf00:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    bf02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf0a:	4802      	ldr	r0, [pc, #8]	; (bf14 <zephyr_rtt_mutex_lock+0x14>)
    bf0c:	f000 fe3a 	bl	cb84 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
    bf10:	bd08      	pop	{r3, pc}
    bf12:	bf00      	nop
    bf14:	200002b8 	.word	0x200002b8

0000bf18 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
    bf18:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    bf1a:	4802      	ldr	r0, [pc, #8]	; (bf24 <zephyr_rtt_mutex_unlock+0xc>)
    bf1c:	f000 ff46 	bl	cdac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
    bf20:	bd08      	pop	{r3, pc}
    bf22:	bf00      	nop
    bf24:	200002b8 	.word	0x200002b8

0000bf28 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    bf28:	4b03      	ldr	r3, [pc, #12]	; (bf38 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    bf2a:	e000      	b.n	bf2e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    bf2c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    bf2e:	4a03      	ldr	r2, [pc, #12]	; (bf3c <z_device_state_init+0x14>)
    bf30:	4293      	cmp	r3, r2
    bf32:	d3fb      	bcc.n	bf2c <z_device_state_init+0x4>
	}
}
    bf34:	4770      	bx	lr
    bf36:	bf00      	nop
    bf38:	00013704 	.word	0x00013704
    bf3c:	000137f4 	.word	0x000137f4

0000bf40 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    bf40:	b570      	push	{r4, r5, r6, lr}
    bf42:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    bf44:	4b11      	ldr	r3, [pc, #68]	; (bf8c <z_sys_init_run_level+0x4c>)
    bf46:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    bf4a:	e009      	b.n	bf60 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    bf4c:	4240      	negs	r0, r0
    bf4e:	e017      	b.n	bf80 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    bf50:	68eb      	ldr	r3, [r5, #12]
    bf52:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    bf54:	68ea      	ldr	r2, [r5, #12]
    bf56:	7853      	ldrb	r3, [r2, #1]
    bf58:	f043 0301 	orr.w	r3, r3, #1
    bf5c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    bf5e:	3408      	adds	r4, #8
    bf60:	1c73      	adds	r3, r6, #1
    bf62:	4a0a      	ldr	r2, [pc, #40]	; (bf8c <z_sys_init_run_level+0x4c>)
    bf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf68:	42a3      	cmp	r3, r4
    bf6a:	d90d      	bls.n	bf88 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    bf6c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    bf6e:	6823      	ldr	r3, [r4, #0]
    bf70:	4628      	mov	r0, r5
    bf72:	4798      	blx	r3
		if (dev != NULL) {
    bf74:	2d00      	cmp	r5, #0
    bf76:	d0f2      	beq.n	bf5e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    bf78:	2800      	cmp	r0, #0
    bf7a:	d0eb      	beq.n	bf54 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    bf7c:	2800      	cmp	r0, #0
    bf7e:	dbe5      	blt.n	bf4c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    bf80:	28ff      	cmp	r0, #255	; 0xff
    bf82:	dde5      	ble.n	bf50 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    bf84:	20ff      	movs	r0, #255	; 0xff
    bf86:	e7e3      	b.n	bf50 <z_sys_init_run_level+0x10>
		}
	}
}
    bf88:	bd70      	pop	{r4, r5, r6, pc}
    bf8a:	bf00      	nop
    bf8c:	00016410 	.word	0x00016410

0000bf90 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    bf90:	2804      	cmp	r0, #4
    bf92:	d80c      	bhi.n	bfae <reason_to_str+0x1e>
    bf94:	e8df f000 	tbb	[pc, r0]
    bf98:	07050d03 	.word	0x07050d03
    bf9c:	09          	.byte	0x09
    bf9d:	00          	.byte	0x00
    bf9e:	4806      	ldr	r0, [pc, #24]	; (bfb8 <reason_to_str+0x28>)
    bfa0:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    bfa2:	4806      	ldr	r0, [pc, #24]	; (bfbc <reason_to_str+0x2c>)
    bfa4:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    bfa6:	4806      	ldr	r0, [pc, #24]	; (bfc0 <reason_to_str+0x30>)
    bfa8:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    bfaa:	4806      	ldr	r0, [pc, #24]	; (bfc4 <reason_to_str+0x34>)
    bfac:	4770      	bx	lr
	default:
		return "Unknown error";
    bfae:	4806      	ldr	r0, [pc, #24]	; (bfc8 <reason_to_str+0x38>)
    bfb0:	4770      	bx	lr
		return "Unhandled interrupt";
    bfb2:	4806      	ldr	r0, [pc, #24]	; (bfcc <reason_to_str+0x3c>)
	}
}
    bfb4:	4770      	bx	lr
    bfb6:	bf00      	nop
    bfb8:	00016428 	.word	0x00016428
    bfbc:	0001644c 	.word	0x0001644c
    bfc0:	0001645c 	.word	0x0001645c
    bfc4:	00016468 	.word	0x00016468
    bfc8:	00016478 	.word	0x00016478
    bfcc:	00016438 	.word	0x00016438

0000bfd0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    bfd0:	b130      	cbz	r0, bfe0 <thread_name_get+0x10>
{
    bfd2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    bfd4:	f007 f9e1 	bl	1339a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    bfd8:	b120      	cbz	r0, bfe4 <thread_name_get+0x14>
    bfda:	7803      	ldrb	r3, [r0, #0]
    bfdc:	b123      	cbz	r3, bfe8 <thread_name_get+0x18>
}
    bfde:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    bfe0:	4802      	ldr	r0, [pc, #8]	; (bfec <thread_name_get+0x1c>)
}
    bfe2:	4770      	bx	lr
		thread_name = "unknown";
    bfe4:	4801      	ldr	r0, [pc, #4]	; (bfec <thread_name_get+0x1c>)
    bfe6:	e7fa      	b.n	bfde <thread_name_get+0xe>
    bfe8:	4800      	ldr	r0, [pc, #0]	; (bfec <thread_name_get+0x1c>)
	return thread_name;
    bfea:	e7f8      	b.n	bfde <thread_name_get+0xe>
    bfec:	00016488 	.word	0x00016488

0000bff0 <k_sys_fatal_error_handler>:
{
    bff0:	b510      	push	{r4, lr}
    bff2:	b088      	sub	sp, #32
    bff4:	4604      	mov	r4, r0
	z_impl_log_panic();
    bff6:	f7f7 f9b5 	bl	3364 <z_impl_log_panic>
	LOG_ERR("Halting system");
    bffa:	4b14      	ldr	r3, [pc, #80]	; (c04c <k_sys_fatal_error_handler+0x5c>)
    bffc:	9307      	str	r3, [sp, #28]
    bffe:	2302      	movs	r3, #2
    c000:	f88d 3004 	strb.w	r3, [sp, #4]
    c004:	2300      	movs	r3, #0
    c006:	f88d 3005 	strb.w	r3, [sp, #5]
    c00a:	f88d 3006 	strb.w	r3, [sp, #6]
    c00e:	f88d 3007 	strb.w	r3, [sp, #7]
    c012:	9a01      	ldr	r2, [sp, #4]
    c014:	9206      	str	r2, [sp, #24]
    c016:	4619      	mov	r1, r3
    c018:	f363 0100 	bfi	r1, r3, #0, #1
    c01c:	f363 0141 	bfi	r1, r3, #1, #1
    c020:	f363 0182 	bfi	r1, r3, #2, #1
    c024:	f363 01c5 	bfi	r1, r3, #3, #3
    c028:	2201      	movs	r2, #1
    c02a:	f362 1188 	bfi	r1, r2, #6, #3
    c02e:	2208      	movs	r2, #8
    c030:	f362 2152 	bfi	r1, r2, #9, #10
    c034:	f363 41de 	bfi	r1, r3, #19, #12
    c038:	f363 71df 	bfi	r1, r3, #31, #1
    c03c:	aa06      	add	r2, sp, #24
    c03e:	4804      	ldr	r0, [pc, #16]	; (c050 <k_sys_fatal_error_handler+0x60>)
    c040:	f7f7 fb12 	bl	3668 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
    c044:	4620      	mov	r0, r4
    c046:	f007 f95f 	bl	13308 <arch_system_halt>
    c04a:	bf00      	nop
    c04c:	00016490 	.word	0x00016490
    c050:	00013aac 	.word	0x00013aac

0000c054 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c058:	b089      	sub	sp, #36	; 0x24
    c05a:	af00      	add	r7, sp, #0
    c05c:	4604      	mov	r4, r0
    c05e:	460d      	mov	r5, r1
	__asm__ volatile(
    c060:	f04f 0320 	mov.w	r3, #32
    c064:	f3ef 8811 	mrs	r8, BASEPRI
    c068:	f383 8812 	msr	BASEPRI_MAX, r3
    c06c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    c070:	f002 fd16 	bl	eaa0 <z_impl_z_current_get>
    c074:	4606      	mov	r6, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    c076:	4620      	mov	r0, r4
    c078:	f7ff ff8a 	bl	bf90 <reason_to_str>
    c07c:	46e9      	mov	r9, sp
    c07e:	2303      	movs	r3, #3
    c080:	713b      	strb	r3, [r7, #4]
    c082:	b08a      	sub	sp, #40	; 0x28
    c084:	466b      	mov	r3, sp
    c086:	f113 0210 	adds.w	r2, r3, #16
    c08a:	f000 80b1 	beq.w	c1f0 <z_fatal_error+0x19c>
    c08e:	f04f 0c15 	mov.w	ip, #21
    c092:	2a00      	cmp	r2, #0
    c094:	f000 80af 	beq.w	c1f6 <z_fatal_error+0x1a2>
    c098:	4661      	mov	r1, ip
    c09a:	f1bc 0f04 	cmp.w	ip, #4
    c09e:	dd03      	ble.n	c0a8 <z_fatal_error+0x54>
    c0a0:	f8df e1f8 	ldr.w	lr, [pc, #504]	; c29c <z_fatal_error+0x248>
    c0a4:	f8c3 e014 	str.w	lr, [r3, #20]
    c0a8:	2908      	cmp	r1, #8
    c0aa:	dd00      	ble.n	c0ae <z_fatal_error+0x5a>
    c0ac:	619c      	str	r4, [r3, #24]
    c0ae:	f04f 0e03 	mov.w	lr, #3
    c0b2:	f887 e000 	strb.w	lr, [r7]
    c0b6:	290c      	cmp	r1, #12
    c0b8:	dd00      	ble.n	c0bc <z_fatal_error+0x68>
    c0ba:	61d8      	str	r0, [r3, #28]
    c0bc:	2910      	cmp	r1, #16
    c0be:	dd01      	ble.n	c0c4 <z_fatal_error+0x70>
    c0c0:	2100      	movs	r1, #0
    c0c2:	6219      	str	r1, [r3, #32]
    c0c4:	f103 0124 	add.w	r1, r3, #36	; 0x24
    c0c8:	2000      	movs	r0, #0
    c0ca:	2800      	cmp	r0, #0
    c0cc:	f000 8096 	beq.w	c1fc <z_fatal_error+0x1a8>
    c0d0:	f1bc 0f14 	cmp.w	ip, #20
    c0d4:	f340 809b 	ble.w	c20e <z_fatal_error+0x1ba>
    c0d8:	f04f 0c15 	mov.w	ip, #21
    c0dc:	b142      	cbz	r2, c0f0 <z_fatal_error+0x9c>
    c0de:	2105      	movs	r1, #5
    c0e0:	7139      	strb	r1, [r7, #4]
    c0e2:	2100      	movs	r1, #0
    c0e4:	7179      	strb	r1, [r7, #5]
    c0e6:	71b9      	strb	r1, [r7, #6]
    c0e8:	2101      	movs	r1, #1
    c0ea:	71f9      	strb	r1, [r7, #7]
    c0ec:	6878      	ldr	r0, [r7, #4]
    c0ee:	6118      	str	r0, [r3, #16]
    c0f0:	2100      	movs	r1, #0
    c0f2:	f36f 0100 	bfc	r1, #0, #1
    c0f6:	f36f 0141 	bfc	r1, #1, #1
    c0fa:	f36f 0182 	bfc	r1, #2, #1
    c0fe:	f36f 01c5 	bfc	r1, #3, #3
    c102:	2301      	movs	r3, #1
    c104:	f363 1188 	bfi	r1, r3, #6, #3
    c108:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    c10c:	f36c 2152 	bfi	r1, ip, #9, #10
    c110:	f36f 41de 	bfc	r1, #19, #12
    c114:	f36f 71df 	bfc	r1, #31, #1
    c118:	2300      	movs	r3, #0
    c11a:	4861      	ldr	r0, [pc, #388]	; (c2a0 <z_fatal_error+0x24c>)
    c11c:	f7f7 faa4 	bl	3668 <z_impl_z_log_msg_static_create>
    c120:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    c122:	b125      	cbz	r5, c12e <z_fatal_error+0xda>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    c124:	69eb      	ldr	r3, [r5, #28]
    c126:	f3c3 0308 	ubfx	r3, r3, #0, #9
    c12a:	2b00      	cmp	r3, #0
    c12c:	d172      	bne.n	c214 <z_fatal_error+0x1c0>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    c12e:	4630      	mov	r0, r6
    c130:	f7ff ff4e 	bl	bfd0 <thread_name_get>
    c134:	46e9      	mov	r9, sp
    c136:	2303      	movs	r3, #3
    c138:	713b      	strb	r3, [r7, #4]
    c13a:	b08a      	sub	sp, #40	; 0x28
    c13c:	466b      	mov	r3, sp
    c13e:	f113 0210 	adds.w	r2, r3, #16
    c142:	f000 808a 	beq.w	c25a <z_fatal_error+0x206>
    c146:	f04f 0c11 	mov.w	ip, #17
    c14a:	2a00      	cmp	r2, #0
    c14c:	f000 8088 	beq.w	c260 <z_fatal_error+0x20c>
    c150:	4661      	mov	r1, ip
    c152:	f1bc 0f04 	cmp.w	ip, #4
    c156:	dd03      	ble.n	c160 <z_fatal_error+0x10c>
    c158:	f8df e148 	ldr.w	lr, [pc, #328]	; c2a4 <z_fatal_error+0x250>
    c15c:	f8c3 e014 	str.w	lr, [r3, #20]
    c160:	2908      	cmp	r1, #8
    c162:	dd00      	ble.n	c166 <z_fatal_error+0x112>
    c164:	619e      	str	r6, [r3, #24]
    c166:	f04f 0e03 	mov.w	lr, #3
    c16a:	f887 e000 	strb.w	lr, [r7]
    c16e:	290c      	cmp	r1, #12
    c170:	dd00      	ble.n	c174 <z_fatal_error+0x120>
    c172:	61d8      	str	r0, [r3, #28]
    c174:	f103 0120 	add.w	r1, r3, #32
    c178:	2000      	movs	r0, #0
    c17a:	2800      	cmp	r0, #0
    c17c:	d073      	beq.n	c266 <z_fatal_error+0x212>
    c17e:	f1bc 0f10 	cmp.w	ip, #16
    c182:	dd79      	ble.n	c278 <z_fatal_error+0x224>
    c184:	f04f 0c11 	mov.w	ip, #17
    c188:	b142      	cbz	r2, c19c <z_fatal_error+0x148>
    c18a:	2104      	movs	r1, #4
    c18c:	7139      	strb	r1, [r7, #4]
    c18e:	2100      	movs	r1, #0
    c190:	7179      	strb	r1, [r7, #5]
    c192:	71b9      	strb	r1, [r7, #6]
    c194:	2101      	movs	r1, #1
    c196:	71f9      	strb	r1, [r7, #7]
    c198:	6878      	ldr	r0, [r7, #4]
    c19a:	6118      	str	r0, [r3, #16]
    c19c:	2100      	movs	r1, #0
    c19e:	f36f 0100 	bfc	r1, #0, #1
    c1a2:	f36f 0141 	bfc	r1, #1, #1
    c1a6:	f36f 0182 	bfc	r1, #2, #1
    c1aa:	f36f 01c5 	bfc	r1, #3, #3
    c1ae:	2301      	movs	r3, #1
    c1b0:	f363 1188 	bfi	r1, r3, #6, #3
    c1b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    c1b8:	f36c 2152 	bfi	r1, ip, #9, #10
    c1bc:	f36f 41de 	bfc	r1, #19, #12
    c1c0:	f36f 71df 	bfc	r1, #31, #1
    c1c4:	2300      	movs	r3, #0
    c1c6:	4836      	ldr	r0, [pc, #216]	; (c2a0 <z_fatal_error+0x24c>)
    c1c8:	f7f7 fa4e 	bl	3668 <z_impl_z_log_msg_static_create>
    c1cc:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    c1ce:	4629      	mov	r1, r5
    c1d0:	4620      	mov	r0, r4
    c1d2:	f7ff ff0d 	bl	bff0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    c1d6:	2c04      	cmp	r4, #4
    c1d8:	d051      	beq.n	c27e <z_fatal_error+0x22a>
	__asm__ volatile(
    c1da:	f388 8811 	msr	BASEPRI, r8
    c1de:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    c1e2:	4630      	mov	r0, r6
    c1e4:	f7f9 fe92 	bl	5f0c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    c1e8:	3724      	adds	r7, #36	; 0x24
    c1ea:	46bd      	mov	sp, r7
    c1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    c1f0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c1f4:	e74d      	b.n	c092 <z_fatal_error+0x3e>
    c1f6:	2103      	movs	r1, #3
    c1f8:	7039      	strb	r1, [r7, #0]
    c1fa:	e769      	b.n	c0d0 <z_fatal_error+0x7c>
    c1fc:	f100 0e20 	add.w	lr, r0, #32
    c200:	44be      	add	lr, r7
    c202:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    c206:	f801 eb01 	strb.w	lr, [r1], #1
    c20a:	3001      	adds	r0, #1
    c20c:	e75d      	b.n	c0ca <z_fatal_error+0x76>
    c20e:	f06f 0c1b 	mvn.w	ip, #27
    c212:	e763      	b.n	c0dc <z_fatal_error+0x88>
		LOG_ERR("Fault during interrupt handling\n");
    c214:	4b24      	ldr	r3, [pc, #144]	; (c2a8 <z_fatal_error+0x254>)
    c216:	61fb      	str	r3, [r7, #28]
    c218:	2302      	movs	r3, #2
    c21a:	713b      	strb	r3, [r7, #4]
    c21c:	2300      	movs	r3, #0
    c21e:	717b      	strb	r3, [r7, #5]
    c220:	71bb      	strb	r3, [r7, #6]
    c222:	71fb      	strb	r3, [r7, #7]
    c224:	687a      	ldr	r2, [r7, #4]
    c226:	61ba      	str	r2, [r7, #24]
    c228:	4619      	mov	r1, r3
    c22a:	f363 0100 	bfi	r1, r3, #0, #1
    c22e:	f363 0141 	bfi	r1, r3, #1, #1
    c232:	f363 0182 	bfi	r1, r3, #2, #1
    c236:	f363 01c5 	bfi	r1, r3, #3, #3
    c23a:	2201      	movs	r2, #1
    c23c:	f362 1188 	bfi	r1, r2, #6, #3
    c240:	2208      	movs	r2, #8
    c242:	f362 2152 	bfi	r1, r2, #9, #10
    c246:	f363 41de 	bfi	r1, r3, #19, #12
    c24a:	f363 71df 	bfi	r1, r3, #31, #1
    c24e:	f107 0218 	add.w	r2, r7, #24
    c252:	4813      	ldr	r0, [pc, #76]	; (c2a0 <z_fatal_error+0x24c>)
    c254:	f7f7 fa08 	bl	3668 <z_impl_z_log_msg_static_create>
    c258:	e769      	b.n	c12e <z_fatal_error+0xda>
	LOG_ERR("Current thread: %p (%s)", thread,
    c25a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c25e:	e774      	b.n	c14a <z_fatal_error+0xf6>
    c260:	2103      	movs	r1, #3
    c262:	7039      	strb	r1, [r7, #0]
    c264:	e78b      	b.n	c17e <z_fatal_error+0x12a>
    c266:	f100 0e20 	add.w	lr, r0, #32
    c26a:	44be      	add	lr, r7
    c26c:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    c270:	f801 eb01 	strb.w	lr, [r1], #1
    c274:	3001      	adds	r0, #1
    c276:	e780      	b.n	c17a <z_fatal_error+0x126>
    c278:	f06f 0c1b 	mvn.w	ip, #27
    c27c:	e784      	b.n	c188 <z_fatal_error+0x134>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    c27e:	4c0b      	ldr	r4, [pc, #44]	; (c2ac <z_fatal_error+0x258>)
    c280:	2393      	movs	r3, #147	; 0x93
    c282:	4622      	mov	r2, r4
    c284:	490a      	ldr	r1, [pc, #40]	; (c2b0 <z_fatal_error+0x25c>)
    c286:	480b      	ldr	r0, [pc, #44]	; (c2b4 <z_fatal_error+0x260>)
    c288:	f004 fa56 	bl	10738 <assert_print>
    c28c:	480a      	ldr	r0, [pc, #40]	; (c2b8 <z_fatal_error+0x264>)
    c28e:	f004 fa53 	bl	10738 <assert_print>
    c292:	2193      	movs	r1, #147	; 0x93
    c294:	4620      	mov	r0, r4
    c296:	f004 fa48 	bl	1072a <assert_post_action>
    c29a:	e79e      	b.n	c1da <z_fatal_error+0x186>
    c29c:	000164a0 	.word	0x000164a0
    c2a0:	00013aac 	.word	0x00013aac
    c2a4:	000164ec 	.word	0x000164ec
    c2a8:	000164c8 	.word	0x000164c8
    c2ac:	00016504 	.word	0x00016504
    c2b0:	00016528 	.word	0x00016528
    c2b4:	00013d44 	.word	0x00013d44
    c2b8:	00016548 	.word	0x00016548

0000c2bc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    c2bc:	b510      	push	{r4, lr}
    c2be:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    c2c0:	23b0      	movs	r3, #176	; 0xb0
    c2c2:	4c11      	ldr	r4, [pc, #68]	; (c308 <init_idle_thread+0x4c>)
    c2c4:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    c2c8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    c2cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c2d0:	4b0e      	ldr	r3, [pc, #56]	; (c30c <init_idle_thread+0x50>)
    c2d2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    c2d6:	4a0e      	ldr	r2, [pc, #56]	; (c310 <init_idle_thread+0x54>)
    c2d8:	9205      	str	r2, [sp, #20]
    c2da:	2201      	movs	r2, #1
    c2dc:	9204      	str	r2, [sp, #16]
    c2de:	220f      	movs	r2, #15
    c2e0:	9203      	str	r2, [sp, #12]
    c2e2:	2200      	movs	r2, #0
    c2e4:	9202      	str	r2, [sp, #8]
    c2e6:	9201      	str	r2, [sp, #4]
    c2e8:	9300      	str	r3, [sp, #0]
    c2ea:	4b0a      	ldr	r3, [pc, #40]	; (c314 <init_idle_thread+0x58>)
    c2ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
    c2f0:	4909      	ldr	r1, [pc, #36]	; (c318 <init_idle_thread+0x5c>)
    c2f2:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    c2f6:	4620      	mov	r0, r4
    c2f8:	f000 fa86 	bl	c808 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c2fc:	7b63      	ldrb	r3, [r4, #13]
    c2fe:	f023 0304 	bic.w	r3, r3, #4
    c302:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    c304:	b006      	add	sp, #24
    c306:	bd10      	pop	{r4, pc}
    c308:	20001798 	.word	0x20001798
    c30c:	20002734 	.word	0x20002734
    c310:	00016580 	.word	0x00016580
    c314:	0000cb1d 	.word	0x0000cb1d
    c318:	20004578 	.word	0x20004578

0000c31c <bg_thread_main>:
{
    c31c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    c31e:	4b0a      	ldr	r3, [pc, #40]	; (c348 <bg_thread_main+0x2c>)
    c320:	2201      	movs	r2, #1
    c322:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    c324:	2002      	movs	r0, #2
    c326:	f7ff fe0b 	bl	bf40 <z_sys_init_run_level>
	boot_banner();
    c32a:	f003 fa53 	bl	f7d4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    c32e:	2003      	movs	r0, #3
    c330:	f7ff fe06 	bl	bf40 <z_sys_init_run_level>
	z_init_static_threads();
    c334:	f000 fb78 	bl	ca28 <z_init_static_threads>
	main();
    c338:	f7f4 f88a 	bl	450 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    c33c:	4a03      	ldr	r2, [pc, #12]	; (c34c <bg_thread_main+0x30>)
    c33e:	7b13      	ldrb	r3, [r2, #12]
    c340:	f023 0301 	bic.w	r3, r3, #1
    c344:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    c346:	bd08      	pop	{r3, pc}
    c348:	20002974 	.word	0x20002974
    c34c:	20001848 	.word	0x20001848

0000c350 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    c350:	b508      	push	{r3, lr}
    c352:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    c354:	4a01      	ldr	r2, [pc, #4]	; (c35c <switch_to_main_thread+0xc>)
    c356:	4802      	ldr	r0, [pc, #8]	; (c360 <switch_to_main_thread+0x10>)
    c358:	f7f8 fdc8 	bl	4eec <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    c35c:	0000c31d 	.word	0x0000c31d
    c360:	20001848 	.word	0x20001848

0000c364 <z_bss_zero>:
{
    c364:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    c366:	4803      	ldr	r0, [pc, #12]	; (c374 <z_bss_zero+0x10>)
    c368:	4a03      	ldr	r2, [pc, #12]	; (c378 <z_bss_zero+0x14>)
    c36a:	1a12      	subs	r2, r2, r0
    c36c:	2100      	movs	r1, #0
    c36e:	f006 ffd4 	bl	1331a <z_early_memset>
}
    c372:	bd08      	pop	{r3, pc}
    c374:	20000300 	.word	0x20000300
    c378:	20002978 	.word	0x20002978

0000c37c <z_init_cpu>:
{
    c37c:	b510      	push	{r4, lr}
    c37e:	4604      	mov	r4, r0
	init_idle_thread(id);
    c380:	f7ff ff9c 	bl	c2bc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    c384:	23b0      	movs	r3, #176	; 0xb0
    c386:	490a      	ldr	r1, [pc, #40]	; (c3b0 <z_init_cpu+0x34>)
    c388:	fb03 1104 	mla	r1, r3, r4, r1
    c38c:	4a09      	ldr	r2, [pc, #36]	; (c3b4 <z_init_cpu+0x38>)
    c38e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c392:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c396:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    c398:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    c39a:	4b07      	ldr	r3, [pc, #28]	; (c3b8 <z_init_cpu+0x3c>)
    c39c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    c3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    c3a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c3a8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    c3ac:	6053      	str	r3, [r2, #4]
}
    c3ae:	bd10      	pop	{r4, pc}
    c3b0:	20001798 	.word	0x20001798
    c3b4:	20002734 	.word	0x20002734
    c3b8:	20003d78 	.word	0x20003d78

0000c3bc <prepare_multithreading>:
{
    c3bc:	b570      	push	{r4, r5, r6, lr}
    c3be:	b086      	sub	sp, #24
	z_sched_init();
    c3c0:	f002 f9ae 	bl	e720 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    c3c4:	4d10      	ldr	r5, [pc, #64]	; (c408 <prepare_multithreading+0x4c>)
    c3c6:	4b11      	ldr	r3, [pc, #68]	; (c40c <prepare_multithreading+0x50>)
    c3c8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    c3ca:	4b11      	ldr	r3, [pc, #68]	; (c410 <prepare_multithreading+0x54>)
    c3cc:	9305      	str	r3, [sp, #20]
    c3ce:	2301      	movs	r3, #1
    c3d0:	9304      	str	r3, [sp, #16]
    c3d2:	2400      	movs	r4, #0
    c3d4:	9403      	str	r4, [sp, #12]
    c3d6:	9402      	str	r4, [sp, #8]
    c3d8:	9401      	str	r4, [sp, #4]
    c3da:	9400      	str	r4, [sp, #0]
    c3dc:	4b0d      	ldr	r3, [pc, #52]	; (c414 <prepare_multithreading+0x58>)
    c3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c3e2:	490d      	ldr	r1, [pc, #52]	; (c418 <prepare_multithreading+0x5c>)
    c3e4:	4628      	mov	r0, r5
    c3e6:	f000 fa0f 	bl	c808 <z_setup_new_thread>
    c3ea:	4606      	mov	r6, r0
    c3ec:	7b6b      	ldrb	r3, [r5, #13]
    c3ee:	f023 0304 	bic.w	r3, r3, #4
    c3f2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    c3f4:	4628      	mov	r0, r5
    c3f6:	f001 fce5 	bl	ddc4 <z_ready_thread>
	z_init_cpu(0);
    c3fa:	4620      	mov	r0, r4
    c3fc:	f7ff ffbe 	bl	c37c <z_init_cpu>
}
    c400:	4630      	mov	r0, r6
    c402:	b006      	add	sp, #24
    c404:	bd70      	pop	{r4, r5, r6, pc}
    c406:	bf00      	nop
    c408:	20001848 	.word	0x20001848
    c40c:	20002734 	.word	0x20002734
    c410:	00016588 	.word	0x00016588
    c414:	0000c31d 	.word	0x0000c31d
    c418:	200046b8 	.word	0x200046b8

0000c41c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    c41c:	b500      	push	{lr}
    c41e:	b0ad      	sub	sp, #180	; 0xb4
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    c420:	4b1f      	ldr	r3, [pc, #124]	; (c4a0 <z_cstart+0x84>)
	uint32_t msp =
    c422:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    c426:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    c42a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c42e:	4c1d      	ldr	r4, [pc, #116]	; (c4a4 <z_cstart+0x88>)
    c430:	23e0      	movs	r3, #224	; 0xe0
    c432:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    c436:	2500      	movs	r5, #0
    c438:	77e5      	strb	r5, [r4, #31]
    c43a:	7625      	strb	r5, [r4, #24]
    c43c:	7665      	strb	r5, [r4, #25]
    c43e:	76a5      	strb	r5, [r4, #26]
    c440:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    c444:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c446:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    c44a:	6263      	str	r3, [r4, #36]	; 0x24
    c44c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    c450:	f7f9 fcba 	bl	5dc8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    c454:	f7f8 fb02 	bl	4a5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    c458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c45c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    c45e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    c460:	f7f9 ffec 	bl	643c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    c464:	f7f9 fd6c 	bl	5f40 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    c468:	f7f6 ff22 	bl	32b0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    c46c:	2401      	movs	r4, #1
    c46e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    c472:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    c476:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    c478:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    c47a:	4668      	mov	r0, sp
    c47c:	f003 f9a4 	bl	f7c8 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    c480:	4b09      	ldr	r3, [pc, #36]	; (c4a8 <z_cstart+0x8c>)
    c482:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    c486:	f7ff fd4f 	bl	bf28 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    c48a:	4628      	mov	r0, r5
    c48c:	f7ff fd58 	bl	bf40 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    c490:	4620      	mov	r0, r4
    c492:	f7ff fd55 	bl	bf40 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    c496:	f7ff ff91 	bl	c3bc <prepare_multithreading>
    c49a:	f7ff ff59 	bl	c350 <switch_to_main_thread>
    c49e:	bf00      	nop
    c4a0:	20003d78 	.word	0x20003d78
    c4a4:	e000ed00 	.word	0xe000ed00
    c4a8:	20002734 	.word	0x20002734

0000c4ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    c4ac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    c4ae:	4c10      	ldr	r4, [pc, #64]	; (c4f0 <init_mem_slab_module+0x44>)
	int rc = 0;
    c4b0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    c4b2:	e008      	b.n	c4c6 <init_mem_slab_module+0x1a>
    c4b4:	4b0f      	ldr	r3, [pc, #60]	; (c4f4 <init_mem_slab_module+0x48>)
    c4b6:	429c      	cmp	r4, r3
    c4b8:	d217      	bcs.n	c4ea <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    c4ba:	4620      	mov	r0, r4
    c4bc:	f006 ff35 	bl	1332a <create_free_list>
		if (rc < 0) {
    c4c0:	1e05      	subs	r5, r0, #0
    c4c2:	db12      	blt.n	c4ea <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    c4c4:	3420      	adds	r4, #32
    c4c6:	4b0b      	ldr	r3, [pc, #44]	; (c4f4 <init_mem_slab_module+0x48>)
    c4c8:	429c      	cmp	r4, r3
    c4ca:	d9f3      	bls.n	c4b4 <init_mem_slab_module+0x8>
    c4cc:	4e0a      	ldr	r6, [pc, #40]	; (c4f8 <init_mem_slab_module+0x4c>)
    c4ce:	233d      	movs	r3, #61	; 0x3d
    c4d0:	4632      	mov	r2, r6
    c4d2:	490a      	ldr	r1, [pc, #40]	; (c4fc <init_mem_slab_module+0x50>)
    c4d4:	480a      	ldr	r0, [pc, #40]	; (c500 <init_mem_slab_module+0x54>)
    c4d6:	f004 f92f 	bl	10738 <assert_print>
    c4da:	480a      	ldr	r0, [pc, #40]	; (c504 <init_mem_slab_module+0x58>)
    c4dc:	f004 f92c 	bl	10738 <assert_print>
    c4e0:	213d      	movs	r1, #61	; 0x3d
    c4e2:	4630      	mov	r0, r6
    c4e4:	f004 f921 	bl	1072a <assert_post_action>
    c4e8:	e7e4      	b.n	c4b4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    c4ea:	4628      	mov	r0, r5
    c4ec:	bd70      	pop	{r4, r5, r6, pc}
    c4ee:	bf00      	nop
    c4f0:	20000264 	.word	0x20000264
    c4f4:	20000264 	.word	0x20000264
    c4f8:	00016594 	.word	0x00016594
    c4fc:	000165bc 	.word	0x000165bc
    c500:	00013d44 	.word	0x00013d44
    c504:	000165dc 	.word	0x000165dc

0000c508 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c50c:	b083      	sub	sp, #12
    c50e:	4604      	mov	r4, r0
    c510:	460e      	mov	r6, r1
    c512:	4690      	mov	r8, r2
    c514:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    c516:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    c51a:	f04f 0320 	mov.w	r3, #32
    c51e:	f3ef 8a11 	mrs	sl, BASEPRI
    c522:	f383 8812 	msr	BASEPRI_MAX, r3
    c526:	f3bf 8f6f 	isb	sy
    c52a:	46d1      	mov	r9, sl
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c52c:	4628      	mov	r0, r5
    c52e:	f000 f8e9 	bl	c704 <z_spin_lock_valid>
    c532:	b1b8      	cbz	r0, c564 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    c534:	4628      	mov	r0, r5
    c536:	f000 f905 	bl	c744 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    c53a:	69a1      	ldr	r1, [r4, #24]
    c53c:	b319      	cbz	r1, c586 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    c53e:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    c540:	680b      	ldr	r3, [r1, #0]
    c542:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    c544:	69e3      	ldr	r3, [r4, #28]
    c546:	3301      	adds	r3, #1
    c548:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    c54a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c54c:	4628      	mov	r0, r5
    c54e:	f000 f8e9 	bl	c724 <z_spin_unlock_valid>
    c552:	b380      	cbz	r0, c5b6 <k_mem_slab_alloc+0xae>
	__asm__ volatile(
    c554:	f389 8811 	msr	BASEPRI, r9
    c558:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    c55c:	4620      	mov	r0, r4
    c55e:	b003      	add	sp, #12
    c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c564:	f8df b070 	ldr.w	fp, [pc, #112]	; c5d8 <k_mem_slab_alloc+0xd0>
    c568:	238e      	movs	r3, #142	; 0x8e
    c56a:	465a      	mov	r2, fp
    c56c:	491b      	ldr	r1, [pc, #108]	; (c5dc <k_mem_slab_alloc+0xd4>)
    c56e:	481c      	ldr	r0, [pc, #112]	; (c5e0 <k_mem_slab_alloc+0xd8>)
    c570:	f004 f8e2 	bl	10738 <assert_print>
    c574:	4629      	mov	r1, r5
    c576:	481b      	ldr	r0, [pc, #108]	; (c5e4 <k_mem_slab_alloc+0xdc>)
    c578:	f004 f8de 	bl	10738 <assert_print>
    c57c:	218e      	movs	r1, #142	; 0x8e
    c57e:	4658      	mov	r0, fp
    c580:	f004 f8d3 	bl	1072a <assert_post_action>
    c584:	e7d6      	b.n	c534 <k_mem_slab_alloc+0x2c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    c586:	ea57 0308 	orrs.w	r3, r7, r8
    c58a:	d104      	bne.n	c596 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    c58c:	2300      	movs	r3, #0
    c58e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    c590:	f06f 040b 	mvn.w	r4, #11
    c594:	e7da      	b.n	c54c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    c596:	f8cd 8000 	str.w	r8, [sp]
    c59a:	9701      	str	r7, [sp, #4]
    c59c:	4622      	mov	r2, r4
    c59e:	4651      	mov	r1, sl
    c5a0:	4628      	mov	r0, r5
    c5a2:	f001 fdeb 	bl	e17c <z_pend_curr>
		if (result == 0) {
    c5a6:	4604      	mov	r4, r0
    c5a8:	2800      	cmp	r0, #0
    c5aa:	d1d7      	bne.n	c55c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    c5ac:	4b0e      	ldr	r3, [pc, #56]	; (c5e8 <k_mem_slab_alloc+0xe0>)
    c5ae:	689b      	ldr	r3, [r3, #8]
    c5b0:	695b      	ldr	r3, [r3, #20]
    c5b2:	6033      	str	r3, [r6, #0]
		return result;
    c5b4:	e7d2      	b.n	c55c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c5b6:	4e08      	ldr	r6, [pc, #32]	; (c5d8 <k_mem_slab_alloc+0xd0>)
    c5b8:	23b9      	movs	r3, #185	; 0xb9
    c5ba:	4632      	mov	r2, r6
    c5bc:	490b      	ldr	r1, [pc, #44]	; (c5ec <k_mem_slab_alloc+0xe4>)
    c5be:	4808      	ldr	r0, [pc, #32]	; (c5e0 <k_mem_slab_alloc+0xd8>)
    c5c0:	f004 f8ba 	bl	10738 <assert_print>
    c5c4:	4629      	mov	r1, r5
    c5c6:	480a      	ldr	r0, [pc, #40]	; (c5f0 <k_mem_slab_alloc+0xe8>)
    c5c8:	f004 f8b6 	bl	10738 <assert_print>
    c5cc:	21b9      	movs	r1, #185	; 0xb9
    c5ce:	4630      	mov	r0, r6
    c5d0:	f004 f8ab 	bl	1072a <assert_post_action>
    c5d4:	e7be      	b.n	c554 <k_mem_slab_alloc+0x4c>
    c5d6:	bf00      	nop
    c5d8:	00013f4c 	.word	0x00013f4c
    c5dc:	00013fac 	.word	0x00013fac
    c5e0:	00013d44 	.word	0x00013d44
    c5e4:	00013fc4 	.word	0x00013fc4
    c5e8:	20002734 	.word	0x20002734
    c5ec:	00013f7c 	.word	0x00013f7c
    c5f0:	00013f94 	.word	0x00013f94

0000c5f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    c5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5f8:	4604      	mov	r4, r0
    c5fa:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    c5fc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    c600:	f04f 0320 	mov.w	r3, #32
    c604:	f3ef 8711 	mrs	r7, BASEPRI
    c608:	f383 8812 	msr	BASEPRI_MAX, r3
    c60c:	f3bf 8f6f 	isb	sy
    c610:	46b8      	mov	r8, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c612:	4630      	mov	r0, r6
    c614:	f000 f876 	bl	c704 <z_spin_lock_valid>
    c618:	b1b0      	cbz	r0, c648 <k_mem_slab_free+0x54>
	z_spin_lock_set_owner(l);
    c61a:	4630      	mov	r0, r6
    c61c:	f000 f892 	bl	c744 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    c620:	69a3      	ldr	r3, [r4, #24]
    c622:	b313      	cbz	r3, c66a <k_mem_slab_free+0x76>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    c624:	682b      	ldr	r3, [r5, #0]
    c626:	69a2      	ldr	r2, [r4, #24]
    c628:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    c62a:	682b      	ldr	r3, [r5, #0]
    c62c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    c62e:	69e3      	ldr	r3, [r4, #28]
    c630:	3b01      	subs	r3, #1
    c632:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c634:	4630      	mov	r0, r6
    c636:	f000 f875 	bl	c724 <z_spin_unlock_valid>
    c63a:	b338      	cbz	r0, c68c <k_mem_slab_free+0x98>
	__asm__ volatile(
    c63c:	f388 8811 	msr	BASEPRI, r8
    c640:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    c644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c648:	f8df 9060 	ldr.w	r9, [pc, #96]	; c6ac <k_mem_slab_free+0xb8>
    c64c:	238e      	movs	r3, #142	; 0x8e
    c64e:	464a      	mov	r2, r9
    c650:	4917      	ldr	r1, [pc, #92]	; (c6b0 <k_mem_slab_free+0xbc>)
    c652:	4818      	ldr	r0, [pc, #96]	; (c6b4 <k_mem_slab_free+0xc0>)
    c654:	f004 f870 	bl	10738 <assert_print>
    c658:	4631      	mov	r1, r6
    c65a:	4817      	ldr	r0, [pc, #92]	; (c6b8 <k_mem_slab_free+0xc4>)
    c65c:	f004 f86c 	bl	10738 <assert_print>
    c660:	218e      	movs	r1, #142	; 0x8e
    c662:	4648      	mov	r0, r9
    c664:	f004 f861 	bl	1072a <assert_post_action>
    c668:	e7d7      	b.n	c61a <k_mem_slab_free+0x26>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    c66a:	4620      	mov	r0, r4
    c66c:	f001 fff8 	bl	e660 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    c670:	2800      	cmp	r0, #0
    c672:	d0d7      	beq.n	c624 <k_mem_slab_free+0x30>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    c674:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c676:	2100      	movs	r1, #0
    c678:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c67c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    c67e:	f001 fba1 	bl	ddc4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    c682:	4639      	mov	r1, r7
    c684:	4630      	mov	r0, r6
    c686:	f001 f94f 	bl	d928 <z_reschedule>
			return;
    c68a:	e7db      	b.n	c644 <k_mem_slab_free+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c68c:	4c07      	ldr	r4, [pc, #28]	; (c6ac <k_mem_slab_free+0xb8>)
    c68e:	23b9      	movs	r3, #185	; 0xb9
    c690:	4622      	mov	r2, r4
    c692:	490a      	ldr	r1, [pc, #40]	; (c6bc <k_mem_slab_free+0xc8>)
    c694:	4807      	ldr	r0, [pc, #28]	; (c6b4 <k_mem_slab_free+0xc0>)
    c696:	f004 f84f 	bl	10738 <assert_print>
    c69a:	4631      	mov	r1, r6
    c69c:	4808      	ldr	r0, [pc, #32]	; (c6c0 <k_mem_slab_free+0xcc>)
    c69e:	f004 f84b 	bl	10738 <assert_print>
    c6a2:	21b9      	movs	r1, #185	; 0xb9
    c6a4:	4620      	mov	r0, r4
    c6a6:	f004 f840 	bl	1072a <assert_post_action>
    c6aa:	e7c7      	b.n	c63c <k_mem_slab_free+0x48>
    c6ac:	00013f4c 	.word	0x00013f4c
    c6b0:	00013fac 	.word	0x00013fac
    c6b4:	00013d44 	.word	0x00013d44
    c6b8:	00013fc4 	.word	0x00013fc4
    c6bc:	00013f7c 	.word	0x00013f7c
    c6c0:	00013f94 	.word	0x00013f94

0000c6c4 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    c6c4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    c6c6:	4604      	mov	r4, r0
    c6c8:	b140      	cbz	r0, c6dc <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    c6ca:	221f      	movs	r2, #31
    c6cc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    c6d0:	f004 fdd9 	bl	11286 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    c6d4:	2000      	movs	r0, #0
    c6d6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    c6da:	bd10      	pop	{r4, pc}
		thread = _current;
    c6dc:	4b01      	ldr	r3, [pc, #4]	; (c6e4 <z_impl_k_thread_name_set+0x20>)
    c6de:	689c      	ldr	r4, [r3, #8]
    c6e0:	e7f3      	b.n	c6ca <z_impl_k_thread_name_set+0x6>
    c6e2:	bf00      	nop
    c6e4:	20002734 	.word	0x20002734

0000c6e8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    c6e8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c6ea:	ea53 0102 	orrs.w	r1, r3, r2
    c6ee:	d102      	bne.n	c6f6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    c6f0:	f006 fe55 	bl	1339e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    c6f4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c6f6:	4902      	ldr	r1, [pc, #8]	; (c700 <schedule_new_thread+0x18>)
    c6f8:	3018      	adds	r0, #24
    c6fa:	f002 fb93 	bl	ee24 <z_add_timeout>
    c6fe:	e7f9      	b.n	c6f4 <schedule_new_thread+0xc>
    c700:	0000df25 	.word	0x0000df25

0000c704 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    c704:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    c706:	b13b      	cbz	r3, c718 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    c708:	f003 0303 	and.w	r3, r3, #3
    c70c:	4a04      	ldr	r2, [pc, #16]	; (c720 <z_spin_lock_valid+0x1c>)
    c70e:	7d12      	ldrb	r2, [r2, #20]
    c710:	4293      	cmp	r3, r2
    c712:	d003      	beq.n	c71c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    c714:	2001      	movs	r0, #1
    c716:	4770      	bx	lr
    c718:	2001      	movs	r0, #1
    c71a:	4770      	bx	lr
			return false;
    c71c:	2000      	movs	r0, #0
}
    c71e:	4770      	bx	lr
    c720:	20002734 	.word	0x20002734

0000c724 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    c724:	6801      	ldr	r1, [r0, #0]
    c726:	4a06      	ldr	r2, [pc, #24]	; (c740 <z_spin_unlock_valid+0x1c>)
    c728:	7d13      	ldrb	r3, [r2, #20]
    c72a:	6892      	ldr	r2, [r2, #8]
    c72c:	4313      	orrs	r3, r2
    c72e:	4299      	cmp	r1, r3
    c730:	d103      	bne.n	c73a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    c732:	2300      	movs	r3, #0
    c734:	6003      	str	r3, [r0, #0]
	return true;
    c736:	2001      	movs	r0, #1
    c738:	4770      	bx	lr
		return false;
    c73a:	2000      	movs	r0, #0
}
    c73c:	4770      	bx	lr
    c73e:	bf00      	nop
    c740:	20002734 	.word	0x20002734

0000c744 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    c744:	4a02      	ldr	r2, [pc, #8]	; (c750 <z_spin_lock_set_owner+0xc>)
    c746:	7d13      	ldrb	r3, [r2, #20]
    c748:	6892      	ldr	r2, [r2, #8]
    c74a:	4313      	orrs	r3, r2
    c74c:	6003      	str	r3, [r0, #0]
}
    c74e:	4770      	bx	lr
    c750:	20002734 	.word	0x20002734

0000c754 <z_thread_monitor_exit>:
{
    c754:	b570      	push	{r4, r5, r6, lr}
    c756:	4604      	mov	r4, r0
	__asm__ volatile(
    c758:	f04f 0320 	mov.w	r3, #32
    c75c:	f3ef 8511 	mrs	r5, BASEPRI
    c760:	f383 8812 	msr	BASEPRI_MAX, r3
    c764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c768:	481f      	ldr	r0, [pc, #124]	; (c7e8 <z_thread_monitor_exit+0x94>)
    c76a:	f7ff ffcb 	bl	c704 <z_spin_lock_valid>
    c76e:	b150      	cbz	r0, c786 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    c770:	481d      	ldr	r0, [pc, #116]	; (c7e8 <z_thread_monitor_exit+0x94>)
    c772:	f7ff ffe7 	bl	c744 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    c776:	4b1d      	ldr	r3, [pc, #116]	; (c7ec <z_thread_monitor_exit+0x98>)
    c778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c77a:	42a3      	cmp	r3, r4
    c77c:	d114      	bne.n	c7a8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    c77e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c780:	4b1a      	ldr	r3, [pc, #104]	; (c7ec <z_thread_monitor_exit+0x98>)
    c782:	629a      	str	r2, [r3, #40]	; 0x28
    c784:	e017      	b.n	c7b6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c786:	4e1a      	ldr	r6, [pc, #104]	; (c7f0 <z_thread_monitor_exit+0x9c>)
    c788:	238e      	movs	r3, #142	; 0x8e
    c78a:	4632      	mov	r2, r6
    c78c:	4919      	ldr	r1, [pc, #100]	; (c7f4 <z_thread_monitor_exit+0xa0>)
    c78e:	481a      	ldr	r0, [pc, #104]	; (c7f8 <z_thread_monitor_exit+0xa4>)
    c790:	f003 ffd2 	bl	10738 <assert_print>
    c794:	4914      	ldr	r1, [pc, #80]	; (c7e8 <z_thread_monitor_exit+0x94>)
    c796:	4819      	ldr	r0, [pc, #100]	; (c7fc <z_thread_monitor_exit+0xa8>)
    c798:	f003 ffce 	bl	10738 <assert_print>
    c79c:	218e      	movs	r1, #142	; 0x8e
    c79e:	4630      	mov	r0, r6
    c7a0:	f003 ffc3 	bl	1072a <assert_post_action>
    c7a4:	e7e4      	b.n	c770 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    c7a6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    c7a8:	b113      	cbz	r3, c7b0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    c7aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    c7ac:	42a2      	cmp	r2, r4
    c7ae:	d1fa      	bne.n	c7a6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    c7b0:	b10b      	cbz	r3, c7b6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    c7b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    c7b4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c7b6:	480c      	ldr	r0, [pc, #48]	; (c7e8 <z_thread_monitor_exit+0x94>)
    c7b8:	f7ff ffb4 	bl	c724 <z_spin_unlock_valid>
    c7bc:	b120      	cbz	r0, c7c8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    c7be:	f385 8811 	msr	BASEPRI, r5
    c7c2:	f3bf 8f6f 	isb	sy
}
    c7c6:	bd70      	pop	{r4, r5, r6, pc}
    c7c8:	4c09      	ldr	r4, [pc, #36]	; (c7f0 <z_thread_monitor_exit+0x9c>)
    c7ca:	23b9      	movs	r3, #185	; 0xb9
    c7cc:	4622      	mov	r2, r4
    c7ce:	490c      	ldr	r1, [pc, #48]	; (c800 <z_thread_monitor_exit+0xac>)
    c7d0:	4809      	ldr	r0, [pc, #36]	; (c7f8 <z_thread_monitor_exit+0xa4>)
    c7d2:	f003 ffb1 	bl	10738 <assert_print>
    c7d6:	4904      	ldr	r1, [pc, #16]	; (c7e8 <z_thread_monitor_exit+0x94>)
    c7d8:	480a      	ldr	r0, [pc, #40]	; (c804 <z_thread_monitor_exit+0xb0>)
    c7da:	f003 ffad 	bl	10738 <assert_print>
    c7de:	21b9      	movs	r1, #185	; 0xb9
    c7e0:	4620      	mov	r0, r4
    c7e2:	f003 ffa2 	bl	1072a <assert_post_action>
    c7e6:	e7ea      	b.n	c7be <z_thread_monitor_exit+0x6a>
    c7e8:	20002760 	.word	0x20002760
    c7ec:	20002734 	.word	0x20002734
    c7f0:	00013f4c 	.word	0x00013f4c
    c7f4:	00013fac 	.word	0x00013fac
    c7f8:	00013d44 	.word	0x00013d44
    c7fc:	00013fc4 	.word	0x00013fc4
    c800:	00013f7c 	.word	0x00013f7c
    c804:	00013f94 	.word	0x00013f94

0000c808 <z_setup_new_thread>:
{
    c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c80c:	b085      	sub	sp, #20
    c80e:	4604      	mov	r4, r0
    c810:	460e      	mov	r6, r1
    c812:	4690      	mov	r8, r2
    c814:	461d      	mov	r5, r3
    c816:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    c81a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    c81e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    c820:	2f0f      	cmp	r7, #15
    c822:	d05e      	beq.n	c8e2 <z_setup_new_thread+0xda>
    c824:	f107 0310 	add.w	r3, r7, #16
    c828:	2b1e      	cmp	r3, #30
    c82a:	d85e      	bhi.n	c8ea <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    c82c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    c830:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    c832:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    c834:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c836:	2204      	movs	r2, #4
    c838:	4639      	mov	r1, r7
    c83a:	4620      	mov	r0, r4
    c83c:	f006 fdb3 	bl	133a6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    c840:	4642      	mov	r2, r8
    c842:	4631      	mov	r1, r6
    c844:	4620      	mov	r0, r4
    c846:	f006 fd96 	bl	13376 <setup_thread_stack>
    c84a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c84e:	9302      	str	r3, [sp, #8]
    c850:	f8cd a004 	str.w	sl, [sp, #4]
    c854:	f8cd b000 	str.w	fp, [sp]
    c858:	462b      	mov	r3, r5
    c85a:	4602      	mov	r2, r0
    c85c:	4631      	mov	r1, r6
    c85e:	4620      	mov	r0, r4
    c860:	f7f8 fb22 	bl	4ea8 <arch_new_thread>
	new_thread->init_data = NULL;
    c864:	2300      	movs	r3, #0
    c866:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    c868:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    c86a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    c86e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    c872:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c874:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    c876:	f04f 0320 	mov.w	r3, #32
    c87a:	f3ef 8511 	mrs	r5, BASEPRI
    c87e:	f383 8812 	msr	BASEPRI_MAX, r3
    c882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c886:	4837      	ldr	r0, [pc, #220]	; (c964 <z_setup_new_thread+0x15c>)
    c888:	f7ff ff3c 	bl	c704 <z_spin_lock_valid>
    c88c:	2800      	cmp	r0, #0
    c88e:	d042      	beq.n	c916 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    c890:	4e34      	ldr	r6, [pc, #208]	; (c964 <z_setup_new_thread+0x15c>)
    c892:	4630      	mov	r0, r6
    c894:	f7ff ff56 	bl	c744 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    c898:	4b33      	ldr	r3, [pc, #204]	; (c968 <z_setup_new_thread+0x160>)
    c89a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c89c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    c89e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c8a0:	4630      	mov	r0, r6
    c8a2:	f7ff ff3f 	bl	c724 <z_spin_unlock_valid>
    c8a6:	2800      	cmp	r0, #0
    c8a8:	d045      	beq.n	c936 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    c8aa:	f385 8811 	msr	BASEPRI, r5
    c8ae:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    c8b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d04e      	beq.n	c956 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    c8b8:	221f      	movs	r2, #31
    c8ba:	4619      	mov	r1, r3
    c8bc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    c8c0:	f004 fce1 	bl	11286 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    c8c4:	2300      	movs	r3, #0
    c8c6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    c8ca:	4b27      	ldr	r3, [pc, #156]	; (c968 <z_setup_new_thread+0x160>)
    c8cc:	689b      	ldr	r3, [r3, #8]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d045      	beq.n	c95e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    c8d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    c8d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    c8da:	4638      	mov	r0, r7
    c8dc:	b005      	add	sp, #20
    c8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    c8e2:	4b22      	ldr	r3, [pc, #136]	; (c96c <z_setup_new_thread+0x164>)
    c8e4:	429d      	cmp	r5, r3
    c8e6:	d19d      	bne.n	c824 <z_setup_new_thread+0x1c>
    c8e8:	e7a0      	b.n	c82c <z_setup_new_thread+0x24>
    c8ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; c970 <z_setup_new_thread+0x168>
    c8ee:	f44f 7306 	mov.w	r3, #536	; 0x218
    c8f2:	464a      	mov	r2, r9
    c8f4:	491f      	ldr	r1, [pc, #124]	; (c974 <z_setup_new_thread+0x16c>)
    c8f6:	4820      	ldr	r0, [pc, #128]	; (c978 <z_setup_new_thread+0x170>)
    c8f8:	f003 ff1e 	bl	10738 <assert_print>
    c8fc:	f06f 030f 	mvn.w	r3, #15
    c900:	220e      	movs	r2, #14
    c902:	4639      	mov	r1, r7
    c904:	481d      	ldr	r0, [pc, #116]	; (c97c <z_setup_new_thread+0x174>)
    c906:	f003 ff17 	bl	10738 <assert_print>
    c90a:	f44f 7106 	mov.w	r1, #536	; 0x218
    c90e:	4648      	mov	r0, r9
    c910:	f003 ff0b 	bl	1072a <assert_post_action>
    c914:	e78a      	b.n	c82c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c916:	4e1a      	ldr	r6, [pc, #104]	; (c980 <z_setup_new_thread+0x178>)
    c918:	238e      	movs	r3, #142	; 0x8e
    c91a:	4632      	mov	r2, r6
    c91c:	4919      	ldr	r1, [pc, #100]	; (c984 <z_setup_new_thread+0x17c>)
    c91e:	4816      	ldr	r0, [pc, #88]	; (c978 <z_setup_new_thread+0x170>)
    c920:	f003 ff0a 	bl	10738 <assert_print>
    c924:	490f      	ldr	r1, [pc, #60]	; (c964 <z_setup_new_thread+0x15c>)
    c926:	4818      	ldr	r0, [pc, #96]	; (c988 <z_setup_new_thread+0x180>)
    c928:	f003 ff06 	bl	10738 <assert_print>
    c92c:	218e      	movs	r1, #142	; 0x8e
    c92e:	4630      	mov	r0, r6
    c930:	f003 fefb 	bl	1072a <assert_post_action>
    c934:	e7ac      	b.n	c890 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c936:	4e12      	ldr	r6, [pc, #72]	; (c980 <z_setup_new_thread+0x178>)
    c938:	23b9      	movs	r3, #185	; 0xb9
    c93a:	4632      	mov	r2, r6
    c93c:	4913      	ldr	r1, [pc, #76]	; (c98c <z_setup_new_thread+0x184>)
    c93e:	480e      	ldr	r0, [pc, #56]	; (c978 <z_setup_new_thread+0x170>)
    c940:	f003 fefa 	bl	10738 <assert_print>
    c944:	4907      	ldr	r1, [pc, #28]	; (c964 <z_setup_new_thread+0x15c>)
    c946:	4812      	ldr	r0, [pc, #72]	; (c990 <z_setup_new_thread+0x188>)
    c948:	f003 fef6 	bl	10738 <assert_print>
    c94c:	21b9      	movs	r1, #185	; 0xb9
    c94e:	4630      	mov	r0, r6
    c950:	f003 feeb 	bl	1072a <assert_post_action>
    c954:	e7a9      	b.n	c8aa <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    c956:	2300      	movs	r3, #0
    c958:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    c95c:	e7b5      	b.n	c8ca <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    c95e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    c962:	e7ba      	b.n	c8da <z_setup_new_thread+0xd2>
    c964:	20002760 	.word	0x20002760
    c968:	20002734 	.word	0x20002734
    c96c:	0000cb1d 	.word	0x0000cb1d
    c970:	000165fc 	.word	0x000165fc
    c974:	00016654 	.word	0x00016654
    c978:	00013d44 	.word	0x00013d44
    c97c:	000166d4 	.word	0x000166d4
    c980:	00013f4c 	.word	0x00013f4c
    c984:	00013fac 	.word	0x00013fac
    c988:	00013fc4 	.word	0x00013fc4
    c98c:	00013f7c 	.word	0x00013f7c
    c990:	00013f94 	.word	0x00013f94

0000c994 <z_impl_k_thread_create>:
{
    c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c998:	b086      	sub	sp, #24
    c99a:	4604      	mov	r4, r0
    c99c:	460d      	mov	r5, r1
    c99e:	4616      	mov	r6, r2
    c9a0:	461f      	mov	r7, r3
    c9a2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    c9a6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c9aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    c9ae:	b9db      	cbnz	r3, c9e8 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c9b0:	2300      	movs	r3, #0
    c9b2:	9305      	str	r3, [sp, #20]
    c9b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c9b6:	9304      	str	r3, [sp, #16]
    c9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9ba:	9303      	str	r3, [sp, #12]
    c9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c9be:	9302      	str	r3, [sp, #8]
    c9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9c2:	9301      	str	r3, [sp, #4]
    c9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9c6:	9300      	str	r3, [sp, #0]
    c9c8:	463b      	mov	r3, r7
    c9ca:	4632      	mov	r2, r6
    c9cc:	4629      	mov	r1, r5
    c9ce:	4620      	mov	r0, r4
    c9d0:	f7ff ff1a 	bl	c808 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    c9d4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    c9d8:	bf08      	it	eq
    c9da:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    c9de:	d115      	bne.n	ca0c <z_impl_k_thread_create+0x78>
}
    c9e0:	4620      	mov	r0, r4
    c9e2:	b006      	add	sp, #24
    c9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    c9e8:	f8df a02c 	ldr.w	sl, [pc, #44]	; ca18 <z_impl_k_thread_create+0x84>
    c9ec:	f240 2387 	movw	r3, #647	; 0x287
    c9f0:	4652      	mov	r2, sl
    c9f2:	490a      	ldr	r1, [pc, #40]	; (ca1c <z_impl_k_thread_create+0x88>)
    c9f4:	480a      	ldr	r0, [pc, #40]	; (ca20 <z_impl_k_thread_create+0x8c>)
    c9f6:	f003 fe9f 	bl	10738 <assert_print>
    c9fa:	480a      	ldr	r0, [pc, #40]	; (ca24 <z_impl_k_thread_create+0x90>)
    c9fc:	f003 fe9c 	bl	10738 <assert_print>
    ca00:	f240 2187 	movw	r1, #647	; 0x287
    ca04:	4650      	mov	r0, sl
    ca06:	f003 fe90 	bl	1072a <assert_post_action>
    ca0a:	e7d1      	b.n	c9b0 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    ca0c:	464a      	mov	r2, r9
    ca0e:	4643      	mov	r3, r8
    ca10:	4620      	mov	r0, r4
    ca12:	f7ff fe69 	bl	c6e8 <schedule_new_thread>
    ca16:	e7e3      	b.n	c9e0 <z_impl_k_thread_create+0x4c>
    ca18:	000165fc 	.word	0x000165fc
    ca1c:	00016708 	.word	0x00016708
    ca20:	00013d44 	.word	0x00013d44
    ca24:	0001671c 	.word	0x0001671c

0000ca28 <z_init_static_threads>:
{
    ca28:	b530      	push	{r4, r5, lr}
    ca2a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    ca2c:	4c35      	ldr	r4, [pc, #212]	; (cb04 <z_init_static_threads+0xdc>)
    ca2e:	e017      	b.n	ca60 <z_init_static_threads+0x38>
    ca30:	4b35      	ldr	r3, [pc, #212]	; (cb08 <z_init_static_threads+0xe0>)
    ca32:	429c      	cmp	r4, r3
    ca34:	d228      	bcs.n	ca88 <z_init_static_threads+0x60>
		z_setup_new_thread(
    ca36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ca38:	9305      	str	r3, [sp, #20]
    ca3a:	6a23      	ldr	r3, [r4, #32]
    ca3c:	9304      	str	r3, [sp, #16]
    ca3e:	69e3      	ldr	r3, [r4, #28]
    ca40:	9303      	str	r3, [sp, #12]
    ca42:	69a3      	ldr	r3, [r4, #24]
    ca44:	9302      	str	r3, [sp, #8]
    ca46:	6963      	ldr	r3, [r4, #20]
    ca48:	9301      	str	r3, [sp, #4]
    ca4a:	6923      	ldr	r3, [r4, #16]
    ca4c:	9300      	str	r3, [sp, #0]
    ca4e:	68e3      	ldr	r3, [r4, #12]
    ca50:	68a2      	ldr	r2, [r4, #8]
    ca52:	6861      	ldr	r1, [r4, #4]
    ca54:	6820      	ldr	r0, [r4, #0]
    ca56:	f7ff fed7 	bl	c808 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ca5a:	6823      	ldr	r3, [r4, #0]
    ca5c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    ca5e:	3430      	adds	r4, #48	; 0x30
    ca60:	4b29      	ldr	r3, [pc, #164]	; (cb08 <z_init_static_threads+0xe0>)
    ca62:	429c      	cmp	r4, r3
    ca64:	d9e4      	bls.n	ca30 <z_init_static_threads+0x8>
    ca66:	4d29      	ldr	r5, [pc, #164]	; (cb0c <z_init_static_threads+0xe4>)
    ca68:	f240 23ee 	movw	r3, #750	; 0x2ee
    ca6c:	462a      	mov	r2, r5
    ca6e:	4928      	ldr	r1, [pc, #160]	; (cb10 <z_init_static_threads+0xe8>)
    ca70:	4828      	ldr	r0, [pc, #160]	; (cb14 <z_init_static_threads+0xec>)
    ca72:	f003 fe61 	bl	10738 <assert_print>
    ca76:	4828      	ldr	r0, [pc, #160]	; (cb18 <z_init_static_threads+0xf0>)
    ca78:	f003 fe5e 	bl	10738 <assert_print>
    ca7c:	f240 21ee 	movw	r1, #750	; 0x2ee
    ca80:	4628      	mov	r0, r5
    ca82:	f003 fe52 	bl	1072a <assert_post_action>
    ca86:	e7d3      	b.n	ca30 <z_init_static_threads+0x8>
	k_sched_lock();
    ca88:	f000 ff96 	bl	d9b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    ca8c:	4c1d      	ldr	r4, [pc, #116]	; (cb04 <z_init_static_threads+0xdc>)
    ca8e:	e000      	b.n	ca92 <z_init_static_threads+0x6a>
    ca90:	3430      	adds	r4, #48	; 0x30
    ca92:	4b1d      	ldr	r3, [pc, #116]	; (cb08 <z_init_static_threads+0xe0>)
    ca94:	429c      	cmp	r4, r3
    ca96:	d81f      	bhi.n	cad8 <z_init_static_threads+0xb0>
    ca98:	4b1b      	ldr	r3, [pc, #108]	; (cb08 <z_init_static_threads+0xe0>)
    ca9a:	429c      	cmp	r4, r3
    ca9c:	d22d      	bcs.n	cafa <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    ca9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    caa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    caa4:	d0f4      	beq.n	ca90 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    caa6:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    caa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    caac:	17c1      	asrs	r1, r0, #31
    caae:	03c9      	lsls	r1, r1, #15
    cab0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    cab4:	03c0      	lsls	r0, r0, #15
    cab6:	f240 33e7 	movw	r3, #999	; 0x3e7
    caba:	18c0      	adds	r0, r0, r3
    cabc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cac0:	f04f 0300 	mov.w	r3, #0
    cac4:	f141 0100 	adc.w	r1, r1, #0
    cac8:	f7f3 fb44 	bl	154 <__aeabi_uldivmod>
    cacc:	4602      	mov	r2, r0
    cace:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    cad0:	4628      	mov	r0, r5
    cad2:	f7ff fe09 	bl	c6e8 <schedule_new_thread>
    cad6:	e7db      	b.n	ca90 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    cad8:	4d0c      	ldr	r5, [pc, #48]	; (cb0c <z_init_static_threads+0xe4>)
    cada:	f240 330d 	movw	r3, #781	; 0x30d
    cade:	462a      	mov	r2, r5
    cae0:	490b      	ldr	r1, [pc, #44]	; (cb10 <z_init_static_threads+0xe8>)
    cae2:	480c      	ldr	r0, [pc, #48]	; (cb14 <z_init_static_threads+0xec>)
    cae4:	f003 fe28 	bl	10738 <assert_print>
    cae8:	480b      	ldr	r0, [pc, #44]	; (cb18 <z_init_static_threads+0xf0>)
    caea:	f003 fe25 	bl	10738 <assert_print>
    caee:	f240 310d 	movw	r1, #781	; 0x30d
    caf2:	4628      	mov	r0, r5
    caf4:	f003 fe19 	bl	1072a <assert_post_action>
    caf8:	e7ce      	b.n	ca98 <z_init_static_threads+0x70>
	k_sched_unlock();
    cafa:	f001 fc97 	bl	e42c <k_sched_unlock>
}
    cafe:	b007      	add	sp, #28
    cb00:	bd30      	pop	{r4, r5, pc}
    cb02:	bf00      	nop
    cb04:	20000264 	.word	0x20000264
    cb08:	20000264 	.word	0x20000264
    cb0c:	000165fc 	.word	0x000165fc
    cb10:	00016744 	.word	0x00016744
    cb14:	00013d44 	.word	0x00013d44
    cb18:	000165dc 	.word	0x000165dc

0000cb1c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    cb1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    cb1e:	4b14      	ldr	r3, [pc, #80]	; (cb70 <idle+0x54>)
    cb20:	689b      	ldr	r3, [r3, #8]
    cb22:	f993 300e 	ldrsb.w	r3, [r3, #14]
    cb26:	2b00      	cmp	r3, #0
    cb28:	da0d      	bge.n	cb46 <idle+0x2a>
    cb2a:	4c12      	ldr	r4, [pc, #72]	; (cb74 <idle+0x58>)
    cb2c:	2327      	movs	r3, #39	; 0x27
    cb2e:	4622      	mov	r2, r4
    cb30:	4911      	ldr	r1, [pc, #68]	; (cb78 <idle+0x5c>)
    cb32:	4812      	ldr	r0, [pc, #72]	; (cb7c <idle+0x60>)
    cb34:	f003 fe00 	bl	10738 <assert_print>
    cb38:	2127      	movs	r1, #39	; 0x27
    cb3a:	4620      	mov	r0, r4
    cb3c:	f003 fdf5 	bl	1072a <assert_post_action>
    cb40:	e001      	b.n	cb46 <idle+0x2a>
	arch_cpu_idle();
    cb42:	f7f7 ff91 	bl	4a68 <arch_cpu_idle>
	__asm__ volatile(
    cb46:	f04f 0220 	mov.w	r2, #32
    cb4a:	f3ef 8311 	mrs	r3, BASEPRI
    cb4e:	f382 8812 	msr	BASEPRI_MAX, r2
    cb52:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    cb56:	f002 fa9d 	bl	f094 <z_get_next_timeout_expiry>
    cb5a:	4b05      	ldr	r3, [pc, #20]	; (cb70 <idle+0x54>)
    cb5c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    cb5e:	4b08      	ldr	r3, [pc, #32]	; (cb80 <idle+0x64>)
    cb60:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    cb62:	2b00      	cmp	r3, #0
    cb64:	d0ed      	beq.n	cb42 <idle+0x26>
    cb66:	f7f7 fd7f 	bl	4668 <pm_system_suspend>
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d1eb      	bne.n	cb46 <idle+0x2a>
    cb6e:	e7e8      	b.n	cb42 <idle+0x26>
    cb70:	20002734 	.word	0x20002734
    cb74:	00016774 	.word	0x00016774
    cb78:	00016798 	.word	0x00016798
    cb7c:	00013d44 	.word	0x00013d44
    cb80:	20002974 	.word	0x20002974

0000cb84 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    cb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb88:	b083      	sub	sp, #12
    cb8a:	4604      	mov	r4, r0
    cb8c:	4617      	mov	r7, r2
    cb8e:	461e      	mov	r6, r3
    cb90:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    cb94:	2900      	cmp	r1, #0
    cb96:	d12c      	bne.n	cbf2 <z_impl_k_mutex_lock+0x6e>
    cb98:	f04f 0320 	mov.w	r3, #32
    cb9c:	f3ef 8511 	mrs	r5, BASEPRI
    cba0:	f383 8812 	msr	BASEPRI_MAX, r3
    cba4:	f3bf 8f6f 	isb	sy
    cba8:	46a8      	mov	r8, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbaa:	4875      	ldr	r0, [pc, #468]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cbac:	f7ff fdaa 	bl	c704 <z_spin_lock_valid>
    cbb0:	2800      	cmp	r0, #0
    cbb2:	d02d      	beq.n	cc10 <z_impl_k_mutex_lock+0x8c>
	z_spin_lock_set_owner(l);
    cbb4:	4872      	ldr	r0, [pc, #456]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cbb6:	f7ff fdc5 	bl	c744 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    cbba:	68e1      	ldr	r1, [r4, #12]
    cbbc:	2900      	cmp	r1, #0
    cbbe:	d138      	bne.n	cc32 <z_impl_k_mutex_lock+0xae>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    cbc0:	2900      	cmp	r1, #0
    cbc2:	d17c      	bne.n	ccbe <z_impl_k_mutex_lock+0x13a>
    cbc4:	4b6f      	ldr	r3, [pc, #444]	; (cd84 <z_impl_k_mutex_lock+0x200>)
    cbc6:	689b      	ldr	r3, [r3, #8]
    cbc8:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    cbcc:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    cbce:	3101      	adds	r1, #1
    cbd0:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    cbd2:	4b6c      	ldr	r3, [pc, #432]	; (cd84 <z_impl_k_mutex_lock+0x200>)
    cbd4:	689b      	ldr	r3, [r3, #8]
    cbd6:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cbd8:	4869      	ldr	r0, [pc, #420]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cbda:	f7ff fda3 	bl	c724 <z_spin_unlock_valid>
    cbde:	2800      	cmp	r0, #0
    cbe0:	d06f      	beq.n	ccc2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    cbe2:	f388 8811 	msr	BASEPRI, r8
    cbe6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    cbea:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    cbec:	b003      	add	sp, #12
    cbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    cbf2:	4d65      	ldr	r5, [pc, #404]	; (cd88 <z_impl_k_mutex_lock+0x204>)
    cbf4:	2365      	movs	r3, #101	; 0x65
    cbf6:	462a      	mov	r2, r5
    cbf8:	4964      	ldr	r1, [pc, #400]	; (cd8c <z_impl_k_mutex_lock+0x208>)
    cbfa:	4865      	ldr	r0, [pc, #404]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cbfc:	f003 fd9c 	bl	10738 <assert_print>
    cc00:	4864      	ldr	r0, [pc, #400]	; (cd94 <z_impl_k_mutex_lock+0x210>)
    cc02:	f003 fd99 	bl	10738 <assert_print>
    cc06:	2165      	movs	r1, #101	; 0x65
    cc08:	4628      	mov	r0, r5
    cc0a:	f003 fd8e 	bl	1072a <assert_post_action>
    cc0e:	e7c3      	b.n	cb98 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc10:	f8df 9184 	ldr.w	r9, [pc, #388]	; cd98 <z_impl_k_mutex_lock+0x214>
    cc14:	238e      	movs	r3, #142	; 0x8e
    cc16:	464a      	mov	r2, r9
    cc18:	4960      	ldr	r1, [pc, #384]	; (cd9c <z_impl_k_mutex_lock+0x218>)
    cc1a:	485d      	ldr	r0, [pc, #372]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cc1c:	f003 fd8c 	bl	10738 <assert_print>
    cc20:	4957      	ldr	r1, [pc, #348]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cc22:	485f      	ldr	r0, [pc, #380]	; (cda0 <z_impl_k_mutex_lock+0x21c>)
    cc24:	f003 fd88 	bl	10738 <assert_print>
    cc28:	218e      	movs	r1, #142	; 0x8e
    cc2a:	4648      	mov	r0, r9
    cc2c:	f003 fd7d 	bl	1072a <assert_post_action>
    cc30:	e7c0      	b.n	cbb4 <z_impl_k_mutex_lock+0x30>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    cc32:	68a2      	ldr	r2, [r4, #8]
    cc34:	4b53      	ldr	r3, [pc, #332]	; (cd84 <z_impl_k_mutex_lock+0x200>)
    cc36:	689b      	ldr	r3, [r3, #8]
    cc38:	429a      	cmp	r2, r3
    cc3a:	d0c1      	beq.n	cbc0 <z_impl_k_mutex_lock+0x3c>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    cc3c:	ea56 0107 	orrs.w	r1, r6, r7
    cc40:	d04f      	beq.n	cce2 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    cc42:	f992 800e 	ldrsb.w	r8, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    cc46:	4641      	mov	r1, r8
    cc48:	f993 000e 	ldrsb.w	r0, [r3, #14]
    cc4c:	f006 fbbc 	bl	133c8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    cc50:	4580      	cmp	r8, r0
    cc52:	dc61      	bgt.n	cd18 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    cc54:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    cc58:	9700      	str	r7, [sp, #0]
    cc5a:	9601      	str	r6, [sp, #4]
    cc5c:	4622      	mov	r2, r4
    cc5e:	4629      	mov	r1, r5
    cc60:	4847      	ldr	r0, [pc, #284]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cc62:	f001 fa8b 	bl	e17c <z_pend_curr>
	if (got_mutex == 0) {
    cc66:	2800      	cmp	r0, #0
    cc68:	d0c0      	beq.n	cbec <z_impl_k_mutex_lock+0x68>
	__asm__ volatile(
    cc6a:	f04f 0320 	mov.w	r3, #32
    cc6e:	f3ef 8511 	mrs	r5, BASEPRI
    cc72:	f383 8812 	msr	BASEPRI_MAX, r3
    cc76:	f3bf 8f6f 	isb	sy
    cc7a:	462e      	mov	r6, r5
    cc7c:	4840      	ldr	r0, [pc, #256]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cc7e:	f7ff fd41 	bl	c704 <z_spin_lock_valid>
    cc82:	2800      	cmp	r0, #0
    cc84:	d04e      	beq.n	cd24 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    cc86:	483e      	ldr	r0, [pc, #248]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cc88:	f7ff fd5c 	bl	c744 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    cc8c:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc8e:	429c      	cmp	r4, r3
    cc90:	d058      	beq.n	cd44 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    cc92:	2b00      	cmp	r3, #0
    cc94:	d056      	beq.n	cd44 <z_impl_k_mutex_lock+0x1c0>
    cc96:	6921      	ldr	r1, [r4, #16]
    cc98:	f993 000e 	ldrsb.w	r0, [r3, #14]
    cc9c:	f006 fb94 	bl	133c8 <new_prio_for_inheritance>
    cca0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    cca2:	4620      	mov	r0, r4
    cca4:	f006 fb9b 	bl	133de <adjust_owner_prio>
    cca8:	b910      	cbnz	r0, ccb0 <z_impl_k_mutex_lock+0x12c>
    ccaa:	f1b8 0f00 	cmp.w	r8, #0
    ccae:	d04b      	beq.n	cd48 <z_impl_k_mutex_lock+0x1c4>
		z_reschedule(&lock, key);
    ccb0:	4629      	mov	r1, r5
    ccb2:	4833      	ldr	r0, [pc, #204]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    ccb4:	f000 fe38 	bl	d928 <z_reschedule>
	return -EAGAIN;
    ccb8:	f06f 000a 	mvn.w	r0, #10
    ccbc:	e796      	b.n	cbec <z_impl_k_mutex_lock+0x68>
					_current->base.prio :
    ccbe:	6923      	ldr	r3, [r4, #16]
    ccc0:	e784      	b.n	cbcc <z_impl_k_mutex_lock+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ccc2:	4c35      	ldr	r4, [pc, #212]	; (cd98 <z_impl_k_mutex_lock+0x214>)
    ccc4:	23b9      	movs	r3, #185	; 0xb9
    ccc6:	4622      	mov	r2, r4
    ccc8:	4936      	ldr	r1, [pc, #216]	; (cda4 <z_impl_k_mutex_lock+0x220>)
    ccca:	4831      	ldr	r0, [pc, #196]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cccc:	f003 fd34 	bl	10738 <assert_print>
    ccd0:	492b      	ldr	r1, [pc, #172]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    ccd2:	4835      	ldr	r0, [pc, #212]	; (cda8 <z_impl_k_mutex_lock+0x224>)
    ccd4:	f003 fd30 	bl	10738 <assert_print>
    ccd8:	21b9      	movs	r1, #185	; 0xb9
    ccda:	4620      	mov	r0, r4
    ccdc:	f003 fd25 	bl	1072a <assert_post_action>
    cce0:	e77f      	b.n	cbe2 <z_impl_k_mutex_lock+0x5e>
    cce2:	4827      	ldr	r0, [pc, #156]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cce4:	f7ff fd1e 	bl	c724 <z_spin_unlock_valid>
    cce8:	b130      	cbz	r0, ccf8 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    ccea:	f388 8811 	msr	BASEPRI, r8
    ccee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    ccf2:	f06f 000f 	mvn.w	r0, #15
    ccf6:	e779      	b.n	cbec <z_impl_k_mutex_lock+0x68>
    ccf8:	4c27      	ldr	r4, [pc, #156]	; (cd98 <z_impl_k_mutex_lock+0x214>)
    ccfa:	23b9      	movs	r3, #185	; 0xb9
    ccfc:	4622      	mov	r2, r4
    ccfe:	4929      	ldr	r1, [pc, #164]	; (cda4 <z_impl_k_mutex_lock+0x220>)
    cd00:	4823      	ldr	r0, [pc, #140]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cd02:	f003 fd19 	bl	10738 <assert_print>
    cd06:	491e      	ldr	r1, [pc, #120]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cd08:	4827      	ldr	r0, [pc, #156]	; (cda8 <z_impl_k_mutex_lock+0x224>)
    cd0a:	f003 fd15 	bl	10738 <assert_print>
    cd0e:	21b9      	movs	r1, #185	; 0xb9
    cd10:	4620      	mov	r0, r4
    cd12:	f003 fd0a 	bl	1072a <assert_post_action>
    cd16:	e7e8      	b.n	ccea <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    cd18:	4601      	mov	r1, r0
    cd1a:	4620      	mov	r0, r4
    cd1c:	f006 fb5f 	bl	133de <adjust_owner_prio>
    cd20:	4680      	mov	r8, r0
    cd22:	e799      	b.n	cc58 <z_impl_k_mutex_lock+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd24:	4f1c      	ldr	r7, [pc, #112]	; (cd98 <z_impl_k_mutex_lock+0x214>)
    cd26:	238e      	movs	r3, #142	; 0x8e
    cd28:	463a      	mov	r2, r7
    cd2a:	491c      	ldr	r1, [pc, #112]	; (cd9c <z_impl_k_mutex_lock+0x218>)
    cd2c:	4818      	ldr	r0, [pc, #96]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cd2e:	f003 fd03 	bl	10738 <assert_print>
    cd32:	4913      	ldr	r1, [pc, #76]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cd34:	481a      	ldr	r0, [pc, #104]	; (cda0 <z_impl_k_mutex_lock+0x21c>)
    cd36:	f003 fcff 	bl	10738 <assert_print>
    cd3a:	218e      	movs	r1, #142	; 0x8e
    cd3c:	4638      	mov	r0, r7
    cd3e:	f003 fcf4 	bl	1072a <assert_post_action>
    cd42:	e7a0      	b.n	cc86 <z_impl_k_mutex_lock+0x102>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    cd44:	6921      	ldr	r1, [r4, #16]
    cd46:	e7ac      	b.n	cca2 <z_impl_k_mutex_lock+0x11e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd48:	480d      	ldr	r0, [pc, #52]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cd4a:	f7ff fceb 	bl	c724 <z_spin_unlock_valid>
    cd4e:	b130      	cbz	r0, cd5e <z_impl_k_mutex_lock+0x1da>
    cd50:	f386 8811 	msr	BASEPRI, r6
    cd54:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    cd58:	f06f 000a 	mvn.w	r0, #10
    cd5c:	e746      	b.n	cbec <z_impl_k_mutex_lock+0x68>
    cd5e:	4c0e      	ldr	r4, [pc, #56]	; (cd98 <z_impl_k_mutex_lock+0x214>)
    cd60:	23b9      	movs	r3, #185	; 0xb9
    cd62:	4622      	mov	r2, r4
    cd64:	490f      	ldr	r1, [pc, #60]	; (cda4 <z_impl_k_mutex_lock+0x220>)
    cd66:	480a      	ldr	r0, [pc, #40]	; (cd90 <z_impl_k_mutex_lock+0x20c>)
    cd68:	f003 fce6 	bl	10738 <assert_print>
    cd6c:	4904      	ldr	r1, [pc, #16]	; (cd80 <z_impl_k_mutex_lock+0x1fc>)
    cd6e:	480e      	ldr	r0, [pc, #56]	; (cda8 <z_impl_k_mutex_lock+0x224>)
    cd70:	f003 fce2 	bl	10738 <assert_print>
    cd74:	21b9      	movs	r1, #185	; 0xb9
    cd76:	4620      	mov	r0, r4
    cd78:	f003 fcd7 	bl	1072a <assert_post_action>
    cd7c:	e7e8      	b.n	cd50 <z_impl_k_mutex_lock+0x1cc>
    cd7e:	bf00      	nop
    cd80:	20002764 	.word	0x20002764
    cd84:	20002734 	.word	0x20002734
    cd88:	000167c0 	.word	0x000167c0
    cd8c:	00016708 	.word	0x00016708
    cd90:	00013d44 	.word	0x00013d44
    cd94:	000167e4 	.word	0x000167e4
    cd98:	00013f4c 	.word	0x00013f4c
    cd9c:	00013fac 	.word	0x00013fac
    cda0:	00013fc4 	.word	0x00013fc4
    cda4:	00013f7c 	.word	0x00013f7c
    cda8:	00013f94 	.word	0x00013f94

0000cdac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdae:	4604      	mov	r4, r0
    cdb0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    cdb4:	b97b      	cbnz	r3, cdd6 <z_impl_k_mutex_unlock+0x2a>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    cdb6:	68a3      	ldr	r3, [r4, #8]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d07a      	beq.n	ceb2 <z_impl_k_mutex_unlock+0x106>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    cdbc:	4a40      	ldr	r2, [pc, #256]	; (cec0 <z_impl_k_mutex_unlock+0x114>)
    cdbe:	6892      	ldr	r2, [r2, #8]
    cdc0:	4293      	cmp	r3, r2
    cdc2:	d179      	bne.n	ceb8 <z_impl_k_mutex_unlock+0x10c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    cdc4:	68e3      	ldr	r3, [r4, #12]
    cdc6:	b1ab      	cbz	r3, cdf4 <z_impl_k_mutex_unlock+0x48>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    cdc8:	68e3      	ldr	r3, [r4, #12]
    cdca:	2b01      	cmp	r3, #1
    cdcc:	d91e      	bls.n	ce0c <z_impl_k_mutex_unlock+0x60>
		mutex->lock_count--;
    cdce:	3b01      	subs	r3, #1
    cdd0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    cdd2:	2000      	movs	r0, #0
}
    cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    cdd6:	4d3b      	ldr	r5, [pc, #236]	; (cec4 <z_impl_k_mutex_unlock+0x118>)
    cdd8:	23c7      	movs	r3, #199	; 0xc7
    cdda:	462a      	mov	r2, r5
    cddc:	493a      	ldr	r1, [pc, #232]	; (cec8 <z_impl_k_mutex_unlock+0x11c>)
    cdde:	483b      	ldr	r0, [pc, #236]	; (cecc <z_impl_k_mutex_unlock+0x120>)
    cde0:	f003 fcaa 	bl	10738 <assert_print>
    cde4:	483a      	ldr	r0, [pc, #232]	; (ced0 <z_impl_k_mutex_unlock+0x124>)
    cde6:	f003 fca7 	bl	10738 <assert_print>
    cdea:	21c7      	movs	r1, #199	; 0xc7
    cdec:	4628      	mov	r0, r5
    cdee:	f003 fc9c 	bl	1072a <assert_post_action>
    cdf2:	e7e0      	b.n	cdb6 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    cdf4:	4d33      	ldr	r5, [pc, #204]	; (cec4 <z_impl_k_mutex_unlock+0x118>)
    cdf6:	23df      	movs	r3, #223	; 0xdf
    cdf8:	462a      	mov	r2, r5
    cdfa:	4936      	ldr	r1, [pc, #216]	; (ced4 <z_impl_k_mutex_unlock+0x128>)
    cdfc:	4833      	ldr	r0, [pc, #204]	; (cecc <z_impl_k_mutex_unlock+0x120>)
    cdfe:	f003 fc9b 	bl	10738 <assert_print>
    ce02:	21df      	movs	r1, #223	; 0xdf
    ce04:	4628      	mov	r0, r5
    ce06:	f003 fc90 	bl	1072a <assert_post_action>
    ce0a:	e7dd      	b.n	cdc8 <z_impl_k_mutex_unlock+0x1c>
	__asm__ volatile(
    ce0c:	f04f 0320 	mov.w	r3, #32
    ce10:	f3ef 8511 	mrs	r5, BASEPRI
    ce14:	f383 8812 	msr	BASEPRI_MAX, r3
    ce18:	f3bf 8f6f 	isb	sy
    ce1c:	462e      	mov	r6, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce1e:	482e      	ldr	r0, [pc, #184]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    ce20:	f7ff fc70 	bl	c704 <z_spin_lock_valid>
    ce24:	b1c8      	cbz	r0, ce5a <z_impl_k_mutex_unlock+0xae>
	z_spin_lock_set_owner(l);
    ce26:	482c      	ldr	r0, [pc, #176]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    ce28:	f7ff fc8c 	bl	c744 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ce2c:	6921      	ldr	r1, [r4, #16]
    ce2e:	4620      	mov	r0, r4
    ce30:	f006 fad5 	bl	133de <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ce34:	4620      	mov	r0, r4
    ce36:	f001 fc13 	bl	e660 <z_unpend_first_thread>
	mutex->owner = new_owner;
    ce3a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ce3c:	b1e8      	cbz	r0, ce7a <z_impl_k_mutex_unlock+0xce>
		mutex->owner_orig_prio = new_owner->base.prio;
    ce3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ce42:	6123      	str	r3, [r4, #16]
    ce44:	2400      	movs	r4, #0
    ce46:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    ce4a:	f000 ffbb 	bl	ddc4 <z_ready_thread>
		z_reschedule(&lock, key);
    ce4e:	4629      	mov	r1, r5
    ce50:	4821      	ldr	r0, [pc, #132]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    ce52:	f000 fd69 	bl	d928 <z_reschedule>
	return 0;
    ce56:	4620      	mov	r0, r4
    ce58:	e7bc      	b.n	cdd4 <z_impl_k_mutex_unlock+0x28>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce5a:	4f20      	ldr	r7, [pc, #128]	; (cedc <z_impl_k_mutex_unlock+0x130>)
    ce5c:	238e      	movs	r3, #142	; 0x8e
    ce5e:	463a      	mov	r2, r7
    ce60:	491f      	ldr	r1, [pc, #124]	; (cee0 <z_impl_k_mutex_unlock+0x134>)
    ce62:	481a      	ldr	r0, [pc, #104]	; (cecc <z_impl_k_mutex_unlock+0x120>)
    ce64:	f003 fc68 	bl	10738 <assert_print>
    ce68:	491b      	ldr	r1, [pc, #108]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    ce6a:	481e      	ldr	r0, [pc, #120]	; (cee4 <z_impl_k_mutex_unlock+0x138>)
    ce6c:	f003 fc64 	bl	10738 <assert_print>
    ce70:	218e      	movs	r1, #142	; 0x8e
    ce72:	4638      	mov	r0, r7
    ce74:	f003 fc59 	bl	1072a <assert_post_action>
    ce78:	e7d5      	b.n	ce26 <z_impl_k_mutex_unlock+0x7a>
		mutex->lock_count = 0U;
    ce7a:	2300      	movs	r3, #0
    ce7c:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce7e:	4816      	ldr	r0, [pc, #88]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    ce80:	f7ff fc50 	bl	c724 <z_spin_unlock_valid>
    ce84:	b128      	cbz	r0, ce92 <z_impl_k_mutex_unlock+0xe6>
	__asm__ volatile(
    ce86:	f386 8811 	msr	BASEPRI, r6
    ce8a:	f3bf 8f6f 	isb	sy
	return 0;
    ce8e:	2000      	movs	r0, #0
    ce90:	e7a0      	b.n	cdd4 <z_impl_k_mutex_unlock+0x28>
    ce92:	4c12      	ldr	r4, [pc, #72]	; (cedc <z_impl_k_mutex_unlock+0x130>)
    ce94:	23b9      	movs	r3, #185	; 0xb9
    ce96:	4622      	mov	r2, r4
    ce98:	4913      	ldr	r1, [pc, #76]	; (cee8 <z_impl_k_mutex_unlock+0x13c>)
    ce9a:	480c      	ldr	r0, [pc, #48]	; (cecc <z_impl_k_mutex_unlock+0x120>)
    ce9c:	f003 fc4c 	bl	10738 <assert_print>
    cea0:	490d      	ldr	r1, [pc, #52]	; (ced8 <z_impl_k_mutex_unlock+0x12c>)
    cea2:	4812      	ldr	r0, [pc, #72]	; (ceec <z_impl_k_mutex_unlock+0x140>)
    cea4:	f003 fc48 	bl	10738 <assert_print>
    cea8:	21b9      	movs	r1, #185	; 0xb9
    ceaa:	4620      	mov	r0, r4
    ceac:	f003 fc3d 	bl	1072a <assert_post_action>
    ceb0:	e7e9      	b.n	ce86 <z_impl_k_mutex_unlock+0xda>
		return -EINVAL;
    ceb2:	f06f 0015 	mvn.w	r0, #21
    ceb6:	e78d      	b.n	cdd4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    ceb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cebc:	e78a      	b.n	cdd4 <z_impl_k_mutex_unlock+0x28>
    cebe:	bf00      	nop
    cec0:	20002734 	.word	0x20002734
    cec4:	000167c0 	.word	0x000167c0
    cec8:	00016708 	.word	0x00016708
    cecc:	00013d44 	.word	0x00013d44
    ced0:	000167e4 	.word	0x000167e4
    ced4:	0001680c 	.word	0x0001680c
    ced8:	20002764 	.word	0x20002764
    cedc:	00013f4c 	.word	0x00013f4c
    cee0:	00013fac 	.word	0x00013fac
    cee4:	00013fc4 	.word	0x00013fc4
    cee8:	00013f7c 	.word	0x00013f7c
    ceec:	00013f94 	.word	0x00013f94

0000cef0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    cef0:	b570      	push	{r4, r5, r6, lr}
    cef2:	4604      	mov	r4, r0
	__asm__ volatile(
    cef4:	f04f 0320 	mov.w	r3, #32
    cef8:	f3ef 8511 	mrs	r5, BASEPRI
    cefc:	f383 8812 	msr	BASEPRI_MAX, r3
    cf00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf04:	4817      	ldr	r0, [pc, #92]	; (cf64 <z_impl_k_sem_give+0x74>)
    cf06:	f7ff fbfd 	bl	c704 <z_spin_lock_valid>
    cf0a:	b180      	cbz	r0, cf2e <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    cf0c:	4815      	ldr	r0, [pc, #84]	; (cf64 <z_impl_k_sem_give+0x74>)
    cf0e:	f7ff fc19 	bl	c744 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    cf12:	4620      	mov	r0, r4
    cf14:	f001 fba4 	bl	e660 <z_unpend_first_thread>

	if (thread != NULL) {
    cf18:	b1c8      	cbz	r0, cf4e <z_impl_k_sem_give+0x5e>
    cf1a:	2200      	movs	r2, #0
    cf1c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    cf20:	f000 ff50 	bl	ddc4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    cf24:	4629      	mov	r1, r5
    cf26:	480f      	ldr	r0, [pc, #60]	; (cf64 <z_impl_k_sem_give+0x74>)
    cf28:	f000 fcfe 	bl	d928 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    cf2c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf2e:	4e0e      	ldr	r6, [pc, #56]	; (cf68 <z_impl_k_sem_give+0x78>)
    cf30:	238e      	movs	r3, #142	; 0x8e
    cf32:	4632      	mov	r2, r6
    cf34:	490d      	ldr	r1, [pc, #52]	; (cf6c <z_impl_k_sem_give+0x7c>)
    cf36:	480e      	ldr	r0, [pc, #56]	; (cf70 <z_impl_k_sem_give+0x80>)
    cf38:	f003 fbfe 	bl	10738 <assert_print>
    cf3c:	4909      	ldr	r1, [pc, #36]	; (cf64 <z_impl_k_sem_give+0x74>)
    cf3e:	480d      	ldr	r0, [pc, #52]	; (cf74 <z_impl_k_sem_give+0x84>)
    cf40:	f003 fbfa 	bl	10738 <assert_print>
    cf44:	218e      	movs	r1, #142	; 0x8e
    cf46:	4630      	mov	r0, r6
    cf48:	f003 fbef 	bl	1072a <assert_post_action>
    cf4c:	e7de      	b.n	cf0c <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    cf4e:	68a3      	ldr	r3, [r4, #8]
    cf50:	68e2      	ldr	r2, [r4, #12]
    cf52:	4293      	cmp	r3, r2
    cf54:	d003      	beq.n	cf5e <z_impl_k_sem_give+0x6e>
    cf56:	2201      	movs	r2, #1
    cf58:	4413      	add	r3, r2
    cf5a:	60a3      	str	r3, [r4, #8]
}
    cf5c:	e7e2      	b.n	cf24 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    cf5e:	2200      	movs	r2, #0
    cf60:	e7fa      	b.n	cf58 <z_impl_k_sem_give+0x68>
    cf62:	bf00      	nop
    cf64:	20002768 	.word	0x20002768
    cf68:	00013f4c 	.word	0x00013f4c
    cf6c:	00013fac 	.word	0x00013fac
    cf70:	00013d44 	.word	0x00013d44
    cf74:	00013fc4 	.word	0x00013fc4

0000cf78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    cf78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf7c:	b083      	sub	sp, #12
    cf7e:	4604      	mov	r4, r0
    cf80:	4617      	mov	r7, r2
    cf82:	461e      	mov	r6, r3
    cf84:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    cf88:	b111      	cbz	r1, cf90 <z_impl_k_sem_take+0x18>
    cf8a:	ea56 0302 	orrs.w	r3, r6, r2
    cf8e:	d120      	bne.n	cfd2 <z_impl_k_sem_take+0x5a>
    cf90:	f04f 0320 	mov.w	r3, #32
    cf94:	f3ef 8511 	mrs	r5, BASEPRI
    cf98:	f383 8812 	msr	BASEPRI_MAX, r3
    cf9c:	f3bf 8f6f 	isb	sy
    cfa0:	46a8      	mov	r8, r5
    cfa2:	4837      	ldr	r0, [pc, #220]	; (d080 <z_impl_k_sem_take+0x108>)
    cfa4:	f7ff fbae 	bl	c704 <z_spin_lock_valid>
    cfa8:	b310      	cbz	r0, cff0 <z_impl_k_sem_take+0x78>
	z_spin_lock_set_owner(l);
    cfaa:	4835      	ldr	r0, [pc, #212]	; (d080 <z_impl_k_sem_take+0x108>)
    cfac:	f7ff fbca 	bl	c744 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    cfb0:	68a1      	ldr	r1, [r4, #8]
    cfb2:	2900      	cmp	r1, #0
    cfb4:	d03d      	beq.n	d032 <z_impl_k_sem_take+0xba>
		sem->count--;
    cfb6:	3901      	subs	r1, #1
    cfb8:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfba:	4831      	ldr	r0, [pc, #196]	; (d080 <z_impl_k_sem_take+0x108>)
    cfbc:	f7ff fbb2 	bl	c724 <z_spin_unlock_valid>
    cfc0:	b338      	cbz	r0, d012 <z_impl_k_sem_take+0x9a>
	__asm__ volatile(
    cfc2:	f388 8811 	msr	BASEPRI, r8
    cfc6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    cfca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    cfcc:	b003      	add	sp, #12
    cfce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    cfd2:	4d2c      	ldr	r5, [pc, #176]	; (d084 <z_impl_k_sem_take+0x10c>)
    cfd4:	2379      	movs	r3, #121	; 0x79
    cfd6:	462a      	mov	r2, r5
    cfd8:	492b      	ldr	r1, [pc, #172]	; (d088 <z_impl_k_sem_take+0x110>)
    cfda:	482c      	ldr	r0, [pc, #176]	; (d08c <z_impl_k_sem_take+0x114>)
    cfdc:	f003 fbac 	bl	10738 <assert_print>
    cfe0:	482b      	ldr	r0, [pc, #172]	; (d090 <z_impl_k_sem_take+0x118>)
    cfe2:	f003 fba9 	bl	10738 <assert_print>
    cfe6:	2179      	movs	r1, #121	; 0x79
    cfe8:	4628      	mov	r0, r5
    cfea:	f003 fb9e 	bl	1072a <assert_post_action>
    cfee:	e7cf      	b.n	cf90 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cff0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d094 <z_impl_k_sem_take+0x11c>
    cff4:	238e      	movs	r3, #142	; 0x8e
    cff6:	464a      	mov	r2, r9
    cff8:	4927      	ldr	r1, [pc, #156]	; (d098 <z_impl_k_sem_take+0x120>)
    cffa:	4824      	ldr	r0, [pc, #144]	; (d08c <z_impl_k_sem_take+0x114>)
    cffc:	f003 fb9c 	bl	10738 <assert_print>
    d000:	491f      	ldr	r1, [pc, #124]	; (d080 <z_impl_k_sem_take+0x108>)
    d002:	4826      	ldr	r0, [pc, #152]	; (d09c <z_impl_k_sem_take+0x124>)
    d004:	f003 fb98 	bl	10738 <assert_print>
    d008:	218e      	movs	r1, #142	; 0x8e
    d00a:	4648      	mov	r0, r9
    d00c:	f003 fb8d 	bl	1072a <assert_post_action>
    d010:	e7cb      	b.n	cfaa <z_impl_k_sem_take+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d012:	4c20      	ldr	r4, [pc, #128]	; (d094 <z_impl_k_sem_take+0x11c>)
    d014:	23b9      	movs	r3, #185	; 0xb9
    d016:	4622      	mov	r2, r4
    d018:	4921      	ldr	r1, [pc, #132]	; (d0a0 <z_impl_k_sem_take+0x128>)
    d01a:	481c      	ldr	r0, [pc, #112]	; (d08c <z_impl_k_sem_take+0x114>)
    d01c:	f003 fb8c 	bl	10738 <assert_print>
    d020:	4917      	ldr	r1, [pc, #92]	; (d080 <z_impl_k_sem_take+0x108>)
    d022:	4820      	ldr	r0, [pc, #128]	; (d0a4 <z_impl_k_sem_take+0x12c>)
    d024:	f003 fb88 	bl	10738 <assert_print>
    d028:	21b9      	movs	r1, #185	; 0xb9
    d02a:	4620      	mov	r0, r4
    d02c:	f003 fb7d 	bl	1072a <assert_post_action>
    d030:	e7c7      	b.n	cfc2 <z_impl_k_sem_take+0x4a>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d032:	ea56 0307 	orrs.w	r3, r6, r7
    d036:	d007      	beq.n	d048 <z_impl_k_sem_take+0xd0>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    d038:	9700      	str	r7, [sp, #0]
    d03a:	9601      	str	r6, [sp, #4]
    d03c:	4622      	mov	r2, r4
    d03e:	4629      	mov	r1, r5
    d040:	480f      	ldr	r0, [pc, #60]	; (d080 <z_impl_k_sem_take+0x108>)
    d042:	f001 f89b 	bl	e17c <z_pend_curr>
	return ret;
    d046:	e7c1      	b.n	cfcc <z_impl_k_sem_take+0x54>
    d048:	480d      	ldr	r0, [pc, #52]	; (d080 <z_impl_k_sem_take+0x108>)
    d04a:	f7ff fb6b 	bl	c724 <z_spin_unlock_valid>
    d04e:	b130      	cbz	r0, d05e <z_impl_k_sem_take+0xe6>
    d050:	f388 8811 	msr	BASEPRI, r8
    d054:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    d058:	f06f 000f 	mvn.w	r0, #15
    d05c:	e7b6      	b.n	cfcc <z_impl_k_sem_take+0x54>
    d05e:	4c0d      	ldr	r4, [pc, #52]	; (d094 <z_impl_k_sem_take+0x11c>)
    d060:	23b9      	movs	r3, #185	; 0xb9
    d062:	4622      	mov	r2, r4
    d064:	490e      	ldr	r1, [pc, #56]	; (d0a0 <z_impl_k_sem_take+0x128>)
    d066:	4809      	ldr	r0, [pc, #36]	; (d08c <z_impl_k_sem_take+0x114>)
    d068:	f003 fb66 	bl	10738 <assert_print>
    d06c:	4904      	ldr	r1, [pc, #16]	; (d080 <z_impl_k_sem_take+0x108>)
    d06e:	480d      	ldr	r0, [pc, #52]	; (d0a4 <z_impl_k_sem_take+0x12c>)
    d070:	f003 fb62 	bl	10738 <assert_print>
    d074:	21b9      	movs	r1, #185	; 0xb9
    d076:	4620      	mov	r0, r4
    d078:	f003 fb57 	bl	1072a <assert_post_action>
    d07c:	e7e8      	b.n	d050 <z_impl_k_sem_take+0xd8>
    d07e:	bf00      	nop
    d080:	20002768 	.word	0x20002768
    d084:	00016824 	.word	0x00016824
    d088:	00016844 	.word	0x00016844
    d08c:	00013d44 	.word	0x00013d44
    d090:	00016894 	.word	0x00016894
    d094:	00013f4c 	.word	0x00013f4c
    d098:	00013fac 	.word	0x00013fac
    d09c:	00013fc4 	.word	0x00013fc4
    d0a0:	00013f7c 	.word	0x00013f7c
    d0a4:	00013f94 	.word	0x00013f94

0000d0a8 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    d0a8:	b370      	cbz	r0, d108 <queue_submit_locked+0x60>
{
    d0aa:	b538      	push	{r3, r4, r5, lr}
    d0ac:	460d      	mov	r5, r1
    d0ae:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    d0b0:	4b1b      	ldr	r3, [pc, #108]	; (d120 <queue_submit_locked+0x78>)
    d0b2:	689b      	ldr	r3, [r3, #8]
    d0b4:	4283      	cmp	r3, r0
    d0b6:	d01b      	beq.n	d0f0 <queue_submit_locked+0x48>
    d0b8:	2300      	movs	r3, #0
    d0ba:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    d0bc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    d0c0:	f3c3 0180 	ubfx	r1, r3, #2, #1
    d0c4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    d0c8:	f013 0f01 	tst.w	r3, #1
    d0cc:	d01f      	beq.n	d10e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    d0ce:	b101      	cbz	r1, d0d2 <queue_submit_locked+0x2a>
    d0d0:	b302      	cbz	r2, d114 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    d0d2:	b100      	cbz	r0, d0d6 <queue_submit_locked+0x2e>
    d0d4:	b309      	cbz	r1, d11a <queue_submit_locked+0x72>
	parent->next = child;
    d0d6:	2300      	movs	r3, #0
    d0d8:	602b      	str	r3, [r5, #0]
	return list->tail;
    d0da:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    d0de:	b173      	cbz	r3, d0fe <queue_submit_locked+0x56>
	parent->next = child;
    d0e0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    d0e2:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    d0e6:	4620      	mov	r0, r4
    d0e8:	f006 f9ad 	bl	13446 <notify_queue_locked>
		ret = 1;
    d0ec:	2001      	movs	r0, #1
	}

	return ret;
}
    d0ee:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    d0f0:	f006 f94d 	bl	1338e <k_is_in_isr>
    d0f4:	b908      	cbnz	r0, d0fa <queue_submit_locked+0x52>
    d0f6:	2301      	movs	r3, #1
    d0f8:	e7df      	b.n	d0ba <queue_submit_locked+0x12>
    d0fa:	2300      	movs	r3, #0
    d0fc:	e7dd      	b.n	d0ba <queue_submit_locked+0x12>
    d0fe:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	list->head = node;
    d102:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
}
    d106:	e7ee      	b.n	d0e6 <queue_submit_locked+0x3e>
		return -EINVAL;
    d108:	f06f 0015 	mvn.w	r0, #21
}
    d10c:	4770      	bx	lr
		ret = -ENODEV;
    d10e:	f06f 0012 	mvn.w	r0, #18
    d112:	e7ec      	b.n	d0ee <queue_submit_locked+0x46>
		ret = -EBUSY;
    d114:	f06f 000f 	mvn.w	r0, #15
    d118:	e7e9      	b.n	d0ee <queue_submit_locked+0x46>
		ret = -EBUSY;
    d11a:	f06f 000f 	mvn.w	r0, #15
    d11e:	e7e6      	b.n	d0ee <queue_submit_locked+0x46>
    d120:	20002734 	.word	0x20002734

0000d124 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    d124:	b570      	push	{r4, r5, r6, lr}
    d126:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    d128:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d12a:	f013 0f02 	tst.w	r3, #2
    d12e:	d132      	bne.n	d196 <submit_to_queue_locked+0x72>
    d130:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    d132:	f013 0f04 	tst.w	r3, #4
    d136:	d133      	bne.n	d1a0 <submit_to_queue_locked+0x7c>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    d138:	680b      	ldr	r3, [r1, #0]
    d13a:	b1bb      	cbz	r3, d16c <submit_to_queue_locked+0x48>
	return (*flagp & BIT(bit)) != 0U;
    d13c:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    d13e:	f013 0f01 	tst.w	r3, #1
    d142:	d024      	beq.n	d18e <submit_to_queue_locked+0x6a>
			__ASSERT_NO_MSG(work->queue != NULL);
    d144:	68a3      	ldr	r3, [r4, #8]
    d146:	b1a3      	cbz	r3, d172 <submit_to_queue_locked+0x4e>
			*queuep = work->queue;
    d148:	68a3      	ldr	r3, [r4, #8]
    d14a:	602b      	str	r3, [r5, #0]
			ret = 2;
    d14c:	2602      	movs	r6, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    d14e:	4621      	mov	r1, r4
    d150:	6828      	ldr	r0, [r5, #0]
    d152:	f7ff ffa9 	bl	d0a8 <queue_submit_locked>

		if (rc < 0) {
    d156:	2800      	cmp	r0, #0
    d158:	db1f      	blt.n	d19a <submit_to_queue_locked+0x76>
	*flagp |= BIT(bit);
    d15a:	68e3      	ldr	r3, [r4, #12]
    d15c:	f043 0304 	orr.w	r3, r3, #4
    d160:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    d162:	682b      	ldr	r3, [r5, #0]
    d164:	60a3      	str	r3, [r4, #8]
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    d166:	b1a6      	cbz	r6, d192 <submit_to_queue_locked+0x6e>
    d168:	4630      	mov	r0, r6
		*queuep = NULL;
	}

	return ret;
    d16a:	e018      	b.n	d19e <submit_to_queue_locked+0x7a>
			*queuep = work->queue;
    d16c:	6883      	ldr	r3, [r0, #8]
    d16e:	600b      	str	r3, [r1, #0]
    d170:	e7e4      	b.n	d13c <submit_to_queue_locked+0x18>
			__ASSERT_NO_MSG(work->queue != NULL);
    d172:	4e0c      	ldr	r6, [pc, #48]	; (d1a4 <submit_to_queue_locked+0x80>)
    d174:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    d178:	4632      	mov	r2, r6
    d17a:	490b      	ldr	r1, [pc, #44]	; (d1a8 <submit_to_queue_locked+0x84>)
    d17c:	480b      	ldr	r0, [pc, #44]	; (d1ac <submit_to_queue_locked+0x88>)
    d17e:	f003 fadb 	bl	10738 <assert_print>
    d182:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    d186:	4630      	mov	r0, r6
    d188:	f003 facf 	bl	1072a <assert_post_action>
    d18c:	e7dc      	b.n	d148 <submit_to_queue_locked+0x24>
		ret = 1;
    d18e:	2601      	movs	r6, #1
    d190:	e7dd      	b.n	d14e <submit_to_queue_locked+0x2a>
    d192:	4630      	mov	r0, r6
    d194:	e001      	b.n	d19a <submit_to_queue_locked+0x76>
		ret = -EBUSY;
    d196:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    d19a:	2300      	movs	r3, #0
    d19c:	602b      	str	r3, [r5, #0]
}
    d19e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    d1a0:	2000      	movs	r0, #0
    d1a2:	e7fa      	b.n	d19a <submit_to_queue_locked+0x76>
    d1a4:	00016898 	.word	0x00016898
    d1a8:	000168bc 	.word	0x000168bc
    d1ac:	00013d44 	.word	0x00013d44

0000d1b0 <finalize_cancel_locked>:
{
    d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1b2:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    d1b4:	68c3      	ldr	r3, [r0, #12]
    d1b6:	f023 0302 	bic.w	r3, r3, #2
    d1ba:	60c3      	str	r3, [r0, #12]
	return list->head;
    d1bc:	4b13      	ldr	r3, [pc, #76]	; (d20c <finalize_cancel_locked+0x5c>)
    d1be:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    d1c0:	b185      	cbz	r5, d1e4 <finalize_cancel_locked+0x34>
	return node->next;
    d1c2:	682c      	ldr	r4, [r5, #0]
    d1c4:	b104      	cbz	r4, d1c8 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d1c6:	b10d      	cbz	r5, d1cc <finalize_cancel_locked+0x1c>
    d1c8:	2700      	movs	r7, #0
    d1ca:	e010      	b.n	d1ee <finalize_cancel_locked+0x3e>
    d1cc:	462c      	mov	r4, r5
    d1ce:	e7fb      	b.n	d1c8 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    d1d0:	462a      	mov	r2, r5
    d1d2:	4639      	mov	r1, r7
    d1d4:	480d      	ldr	r0, [pc, #52]	; (d20c <finalize_cancel_locked+0x5c>)
    d1d6:	f006 f923 	bl	13420 <sys_slist_remove>
			k_sem_give(&wc->sem);
    d1da:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    d1de:	f7ff fe87 	bl	cef0 <z_impl_k_sem_give>
}
    d1e2:	e009      	b.n	d1f8 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    d1e4:	462c      	mov	r4, r5
    d1e6:	e7ef      	b.n	d1c8 <finalize_cancel_locked+0x18>
    d1e8:	4623      	mov	r3, r4
    d1ea:	4625      	mov	r5, r4
    d1ec:	461c      	mov	r4, r3
    d1ee:	b165      	cbz	r5, d20a <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    d1f0:	686b      	ldr	r3, [r5, #4]
    d1f2:	42b3      	cmp	r3, r6
    d1f4:	d0ec      	beq.n	d1d0 <finalize_cancel_locked+0x20>
			prev = &wc->node;
    d1f6:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    d1f8:	2c00      	cmp	r4, #0
    d1fa:	d0f5      	beq.n	d1e8 <finalize_cancel_locked+0x38>
	return node->next;
    d1fc:	6823      	ldr	r3, [r4, #0]
    d1fe:	2b00      	cmp	r3, #0
    d200:	d0f3      	beq.n	d1ea <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d202:	2c00      	cmp	r4, #0
    d204:	d1f1      	bne.n	d1ea <finalize_cancel_locked+0x3a>
    d206:	4623      	mov	r3, r4
    d208:	e7ef      	b.n	d1ea <finalize_cancel_locked+0x3a>
}
    d20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d20c:	2000276c 	.word	0x2000276c

0000d210 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d214:	b084      	sub	sp, #16
    d216:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    d218:	e026      	b.n	d268 <work_queue_main+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d21a:	4c6e      	ldr	r4, [pc, #440]	; (d3d4 <work_queue_main+0x1c4>)
    d21c:	238e      	movs	r3, #142	; 0x8e
    d21e:	4622      	mov	r2, r4
    d220:	496d      	ldr	r1, [pc, #436]	; (d3d8 <work_queue_main+0x1c8>)
    d222:	486e      	ldr	r0, [pc, #440]	; (d3dc <work_queue_main+0x1cc>)
    d224:	f003 fa88 	bl	10738 <assert_print>
    d228:	496d      	ldr	r1, [pc, #436]	; (d3e0 <work_queue_main+0x1d0>)
    d22a:	486e      	ldr	r0, [pc, #440]	; (d3e4 <work_queue_main+0x1d4>)
    d22c:	f003 fa84 	bl	10738 <assert_print>
    d230:	218e      	movs	r1, #142	; 0x8e
    d232:	4620      	mov	r0, r4
    d234:	f003 fa79 	bl	1072a <assert_post_action>
    d238:	e024      	b.n	d284 <work_queue_main+0x74>
	return (*flagp & BIT(bit)) != 0U;
    d23a:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    d23e:	f023 0204 	bic.w	r2, r3, #4
    d242:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    d246:	f013 0f04 	tst.w	r3, #4
    d24a:	d176      	bne.n	d33a <work_queue_main+0x12a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    d24c:	2300      	movs	r3, #0
    d24e:	9302      	str	r3, [sp, #8]
    d250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d258:	e9cd 2300 	strd	r2, r3, [sp]
    d25c:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    d260:	4639      	mov	r1, r7
    d262:	485f      	ldr	r0, [pc, #380]	; (d3e0 <work_queue_main+0x1d0>)
    d264:	f001 fd68 	bl	ed38 <z_sched_wait>
	__asm__ volatile(
    d268:	f04f 0320 	mov.w	r3, #32
    d26c:	f3ef 8711 	mrs	r7, BASEPRI
    d270:	f383 8812 	msr	BASEPRI_MAX, r3
    d274:	f3bf 8f6f 	isb	sy
    d278:	463e      	mov	r6, r7
    d27a:	4859      	ldr	r0, [pc, #356]	; (d3e0 <work_queue_main+0x1d0>)
    d27c:	f7ff fa42 	bl	c704 <z_spin_lock_valid>
    d280:	2800      	cmp	r0, #0
    d282:	d0ca      	beq.n	d21a <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
    d284:	4856      	ldr	r0, [pc, #344]	; (d3e0 <work_queue_main+0x1d0>)
    d286:	f7ff fa5d 	bl	c744 <z_spin_lock_set_owner>
	return list->head;
    d28a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    d28e:	2c00      	cmp	r4, #0
    d290:	d0d3      	beq.n	d23a <work_queue_main+0x2a>
	return node->next;
    d292:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    d294:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    d298:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d29c:	4294      	cmp	r4, r2
    d29e:	d049      	beq.n	d334 <work_queue_main+0x124>
	*flagp |= BIT(bit);
    d2a0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    d2a4:	f043 0302 	orr.w	r3, r3, #2
    d2a8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    d2ac:	68e3      	ldr	r3, [r4, #12]
    d2ae:	f043 0201 	orr.w	r2, r3, #1
    d2b2:	60e2      	str	r2, [r4, #12]
	*flagp &= ~BIT(bit);
    d2b4:	f023 0304 	bic.w	r3, r3, #4
    d2b8:	f043 0301 	orr.w	r3, r3, #1
    d2bc:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    d2be:	6867      	ldr	r7, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d2c0:	4847      	ldr	r0, [pc, #284]	; (d3e0 <work_queue_main+0x1d0>)
    d2c2:	f7ff fa2f 	bl	c724 <z_spin_unlock_valid>
    d2c6:	2800      	cmp	r0, #0
    d2c8:	d041      	beq.n	d34e <work_queue_main+0x13e>
	__asm__ volatile(
    d2ca:	f386 8811 	msr	BASEPRI, r6
    d2ce:	f3bf 8f6f 	isb	sy
			continue;
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    d2d2:	2f00      	cmp	r7, #0
    d2d4:	d04c      	beq.n	d370 <work_queue_main+0x160>
		handler(work);
    d2d6:	4620      	mov	r0, r4
    d2d8:	47b8      	blx	r7
	__asm__ volatile(
    d2da:	f04f 0320 	mov.w	r3, #32
    d2de:	f3ef 8611 	mrs	r6, BASEPRI
    d2e2:	f383 8812 	msr	BASEPRI_MAX, r3
    d2e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d2ea:	483d      	ldr	r0, [pc, #244]	; (d3e0 <work_queue_main+0x1d0>)
    d2ec:	f7ff fa0a 	bl	c704 <z_spin_lock_valid>
    d2f0:	2800      	cmp	r0, #0
    d2f2:	d04b      	beq.n	d38c <work_queue_main+0x17c>
	z_spin_lock_set_owner(l);
    d2f4:	483a      	ldr	r0, [pc, #232]	; (d3e0 <work_queue_main+0x1d0>)
    d2f6:	f7ff fa25 	bl	c744 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    d2fa:	68e3      	ldr	r3, [r4, #12]
    d2fc:	f023 0301 	bic.w	r3, r3, #1
    d300:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    d302:	f013 0f02 	tst.w	r3, #2
    d306:	d151      	bne.n	d3ac <work_queue_main+0x19c>
	*flagp &= ~BIT(bit);
    d308:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    d30c:	f023 0302 	bic.w	r3, r3, #2
    d310:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    d314:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d318:	4831      	ldr	r0, [pc, #196]	; (d3e0 <work_queue_main+0x1d0>)
    d31a:	f7ff fa03 	bl	c724 <z_spin_unlock_valid>
    d31e:	2800      	cmp	r0, #0
    d320:	d048      	beq.n	d3b4 <work_queue_main+0x1a4>
	__asm__ volatile(
    d322:	f386 8811 	msr	BASEPRI, r6
    d326:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    d32a:	2c00      	cmp	r4, #0
    d32c:	d19c      	bne.n	d268 <work_queue_main+0x58>
	z_impl_k_yield();
    d32e:	f001 fa03 	bl	e738 <z_impl_k_yield>
}
    d332:	e799      	b.n	d268 <work_queue_main+0x58>
	list->tail = node;
    d334:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (node != NULL) {
    d338:	e7b2      	b.n	d2a0 <work_queue_main+0x90>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    d33a:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    d33e:	2200      	movs	r2, #0
    d340:	2101      	movs	r1, #1
    d342:	4620      	mov	r0, r4
    d344:	f001 fc8c 	bl	ec60 <z_sched_wake>
    d348:	2800      	cmp	r0, #0
    d34a:	d1f8      	bne.n	d33e <work_queue_main+0x12e>
    d34c:	e77e      	b.n	d24c <work_queue_main+0x3c>
    d34e:	f8df 8084 	ldr.w	r8, [pc, #132]	; d3d4 <work_queue_main+0x1c4>
    d352:	23b9      	movs	r3, #185	; 0xb9
    d354:	4642      	mov	r2, r8
    d356:	4924      	ldr	r1, [pc, #144]	; (d3e8 <work_queue_main+0x1d8>)
    d358:	4820      	ldr	r0, [pc, #128]	; (d3dc <work_queue_main+0x1cc>)
    d35a:	f003 f9ed 	bl	10738 <assert_print>
    d35e:	4920      	ldr	r1, [pc, #128]	; (d3e0 <work_queue_main+0x1d0>)
    d360:	4822      	ldr	r0, [pc, #136]	; (d3ec <work_queue_main+0x1dc>)
    d362:	f003 f9e9 	bl	10738 <assert_print>
    d366:	21b9      	movs	r1, #185	; 0xb9
    d368:	4640      	mov	r0, r8
    d36a:	f003 f9de 	bl	1072a <assert_post_action>
    d36e:	e7ac      	b.n	d2ca <work_queue_main+0xba>
		__ASSERT_NO_MSG(handler != NULL);
    d370:	4e1f      	ldr	r6, [pc, #124]	; (d3f0 <work_queue_main+0x1e0>)
    d372:	f240 239b 	movw	r3, #667	; 0x29b
    d376:	4632      	mov	r2, r6
    d378:	491e      	ldr	r1, [pc, #120]	; (d3f4 <work_queue_main+0x1e4>)
    d37a:	4818      	ldr	r0, [pc, #96]	; (d3dc <work_queue_main+0x1cc>)
    d37c:	f003 f9dc 	bl	10738 <assert_print>
    d380:	f240 219b 	movw	r1, #667	; 0x29b
    d384:	4630      	mov	r0, r6
    d386:	f003 f9d0 	bl	1072a <assert_post_action>
    d38a:	e7a4      	b.n	d2d6 <work_queue_main+0xc6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d38c:	4f11      	ldr	r7, [pc, #68]	; (d3d4 <work_queue_main+0x1c4>)
    d38e:	238e      	movs	r3, #142	; 0x8e
    d390:	463a      	mov	r2, r7
    d392:	4911      	ldr	r1, [pc, #68]	; (d3d8 <work_queue_main+0x1c8>)
    d394:	4811      	ldr	r0, [pc, #68]	; (d3dc <work_queue_main+0x1cc>)
    d396:	f003 f9cf 	bl	10738 <assert_print>
    d39a:	4911      	ldr	r1, [pc, #68]	; (d3e0 <work_queue_main+0x1d0>)
    d39c:	4811      	ldr	r0, [pc, #68]	; (d3e4 <work_queue_main+0x1d4>)
    d39e:	f003 f9cb 	bl	10738 <assert_print>
    d3a2:	218e      	movs	r1, #142	; 0x8e
    d3a4:	4638      	mov	r0, r7
    d3a6:	f003 f9c0 	bl	1072a <assert_post_action>
    d3aa:	e7a3      	b.n	d2f4 <work_queue_main+0xe4>
			finalize_cancel_locked(work);
    d3ac:	4620      	mov	r0, r4
    d3ae:	f7ff feff 	bl	d1b0 <finalize_cancel_locked>
    d3b2:	e7a9      	b.n	d308 <work_queue_main+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d3b4:	4f07      	ldr	r7, [pc, #28]	; (d3d4 <work_queue_main+0x1c4>)
    d3b6:	23b9      	movs	r3, #185	; 0xb9
    d3b8:	463a      	mov	r2, r7
    d3ba:	490b      	ldr	r1, [pc, #44]	; (d3e8 <work_queue_main+0x1d8>)
    d3bc:	4807      	ldr	r0, [pc, #28]	; (d3dc <work_queue_main+0x1cc>)
    d3be:	f003 f9bb 	bl	10738 <assert_print>
    d3c2:	4907      	ldr	r1, [pc, #28]	; (d3e0 <work_queue_main+0x1d0>)
    d3c4:	4809      	ldr	r0, [pc, #36]	; (d3ec <work_queue_main+0x1dc>)
    d3c6:	f003 f9b7 	bl	10738 <assert_print>
    d3ca:	21b9      	movs	r1, #185	; 0xb9
    d3cc:	4638      	mov	r0, r7
    d3ce:	f003 f9ac 	bl	1072a <assert_post_action>
    d3d2:	e7a6      	b.n	d322 <work_queue_main+0x112>
    d3d4:	00013f4c 	.word	0x00013f4c
    d3d8:	00013fac 	.word	0x00013fac
    d3dc:	00013d44 	.word	0x00013d44
    d3e0:	20002774 	.word	0x20002774
    d3e4:	00013fc4 	.word	0x00013fc4
    d3e8:	00013f7c 	.word	0x00013f7c
    d3ec:	00013f94 	.word	0x00013f94
    d3f0:	00016898 	.word	0x00016898
    d3f4:	000168d8 	.word	0x000168d8

0000d3f8 <k_work_init>:
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
    d3fc:	4604      	mov	r4, r0
    d3fe:	b138      	cbz	r0, d410 <k_work_init+0x18>
	__ASSERT_NO_MSG(handler != NULL);
    d400:	b195      	cbz	r5, d428 <k_work_init+0x30>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d402:	2300      	movs	r3, #0
    d404:	6023      	str	r3, [r4, #0]
    d406:	6063      	str	r3, [r4, #4]
    d408:	60a3      	str	r3, [r4, #8]
    d40a:	60e3      	str	r3, [r4, #12]
    d40c:	6065      	str	r5, [r4, #4]
}
    d40e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
    d410:	4e0b      	ldr	r6, [pc, #44]	; (d440 <k_work_init+0x48>)
    d412:	2389      	movs	r3, #137	; 0x89
    d414:	4632      	mov	r2, r6
    d416:	490b      	ldr	r1, [pc, #44]	; (d444 <k_work_init+0x4c>)
    d418:	480b      	ldr	r0, [pc, #44]	; (d448 <k_work_init+0x50>)
    d41a:	f003 f98d 	bl	10738 <assert_print>
    d41e:	2189      	movs	r1, #137	; 0x89
    d420:	4630      	mov	r0, r6
    d422:	f003 f982 	bl	1072a <assert_post_action>
    d426:	e7eb      	b.n	d400 <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
    d428:	4e05      	ldr	r6, [pc, #20]	; (d440 <k_work_init+0x48>)
    d42a:	238a      	movs	r3, #138	; 0x8a
    d42c:	4632      	mov	r2, r6
    d42e:	4907      	ldr	r1, [pc, #28]	; (d44c <k_work_init+0x54>)
    d430:	4805      	ldr	r0, [pc, #20]	; (d448 <k_work_init+0x50>)
    d432:	f003 f981 	bl	10738 <assert_print>
    d436:	218a      	movs	r1, #138	; 0x8a
    d438:	4630      	mov	r0, r6
    d43a:	f003 f976 	bl	1072a <assert_post_action>
    d43e:	e7e0      	b.n	d402 <k_work_init+0xa>
    d440:	00016898 	.word	0x00016898
    d444:	000168f0 	.word	0x000168f0
    d448:	00013d44 	.word	0x00013d44
    d44c:	000168d8 	.word	0x000168d8

0000d450 <z_work_submit_to_queue>:
{
    d450:	b570      	push	{r4, r5, r6, lr}
    d452:	b082      	sub	sp, #8
    d454:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    d456:	460c      	mov	r4, r1
    d458:	b1f9      	cbz	r1, d49a <z_work_submit_to_queue+0x4a>
	__asm__ volatile(
    d45a:	f04f 0320 	mov.w	r3, #32
    d45e:	f3ef 8511 	mrs	r5, BASEPRI
    d462:	f383 8812 	msr	BASEPRI_MAX, r3
    d466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d46a:	4823      	ldr	r0, [pc, #140]	; (d4f8 <z_work_submit_to_queue+0xa8>)
    d46c:	f7ff f94a 	bl	c704 <z_spin_lock_valid>
    d470:	b308      	cbz	r0, d4b6 <z_work_submit_to_queue+0x66>
	z_spin_lock_set_owner(l);
    d472:	4e21      	ldr	r6, [pc, #132]	; (d4f8 <z_work_submit_to_queue+0xa8>)
    d474:	4630      	mov	r0, r6
    d476:	f7ff f965 	bl	c744 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    d47a:	a901      	add	r1, sp, #4
    d47c:	4620      	mov	r0, r4
    d47e:	f7ff fe51 	bl	d124 <submit_to_queue_locked>
    d482:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d484:	4630      	mov	r0, r6
    d486:	f7ff f94d 	bl	c724 <z_spin_unlock_valid>
    d48a:	b320      	cbz	r0, d4d6 <z_work_submit_to_queue+0x86>
	__asm__ volatile(
    d48c:	f385 8811 	msr	BASEPRI, r5
    d490:	f3bf 8f6f 	isb	sy
}
    d494:	4620      	mov	r0, r4
    d496:	b002      	add	sp, #8
    d498:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
    d49a:	4d18      	ldr	r5, [pc, #96]	; (d4fc <z_work_submit_to_queue+0xac>)
    d49c:	f44f 73ba 	mov.w	r3, #372	; 0x174
    d4a0:	462a      	mov	r2, r5
    d4a2:	4917      	ldr	r1, [pc, #92]	; (d500 <z_work_submit_to_queue+0xb0>)
    d4a4:	4817      	ldr	r0, [pc, #92]	; (d504 <z_work_submit_to_queue+0xb4>)
    d4a6:	f003 f947 	bl	10738 <assert_print>
    d4aa:	f44f 71ba 	mov.w	r1, #372	; 0x174
    d4ae:	4628      	mov	r0, r5
    d4b0:	f003 f93b 	bl	1072a <assert_post_action>
    d4b4:	e7d1      	b.n	d45a <z_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d4b6:	4e14      	ldr	r6, [pc, #80]	; (d508 <z_work_submit_to_queue+0xb8>)
    d4b8:	238e      	movs	r3, #142	; 0x8e
    d4ba:	4632      	mov	r2, r6
    d4bc:	4913      	ldr	r1, [pc, #76]	; (d50c <z_work_submit_to_queue+0xbc>)
    d4be:	4811      	ldr	r0, [pc, #68]	; (d504 <z_work_submit_to_queue+0xb4>)
    d4c0:	f003 f93a 	bl	10738 <assert_print>
    d4c4:	490c      	ldr	r1, [pc, #48]	; (d4f8 <z_work_submit_to_queue+0xa8>)
    d4c6:	4812      	ldr	r0, [pc, #72]	; (d510 <z_work_submit_to_queue+0xc0>)
    d4c8:	f003 f936 	bl	10738 <assert_print>
    d4cc:	218e      	movs	r1, #142	; 0x8e
    d4ce:	4630      	mov	r0, r6
    d4d0:	f003 f92b 	bl	1072a <assert_post_action>
    d4d4:	e7cd      	b.n	d472 <z_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d4d6:	4e0c      	ldr	r6, [pc, #48]	; (d508 <z_work_submit_to_queue+0xb8>)
    d4d8:	23b9      	movs	r3, #185	; 0xb9
    d4da:	4632      	mov	r2, r6
    d4dc:	490d      	ldr	r1, [pc, #52]	; (d514 <z_work_submit_to_queue+0xc4>)
    d4de:	4809      	ldr	r0, [pc, #36]	; (d504 <z_work_submit_to_queue+0xb4>)
    d4e0:	f003 f92a 	bl	10738 <assert_print>
    d4e4:	4904      	ldr	r1, [pc, #16]	; (d4f8 <z_work_submit_to_queue+0xa8>)
    d4e6:	480c      	ldr	r0, [pc, #48]	; (d518 <z_work_submit_to_queue+0xc8>)
    d4e8:	f003 f926 	bl	10738 <assert_print>
    d4ec:	21b9      	movs	r1, #185	; 0xb9
    d4ee:	4630      	mov	r0, r6
    d4f0:	f003 f91b 	bl	1072a <assert_post_action>
    d4f4:	e7ca      	b.n	d48c <z_work_submit_to_queue+0x3c>
    d4f6:	bf00      	nop
    d4f8:	20002774 	.word	0x20002774
    d4fc:	00016898 	.word	0x00016898
    d500:	000168f0 	.word	0x000168f0
    d504:	00013d44 	.word	0x00013d44
    d508:	00013f4c 	.word	0x00013f4c
    d50c:	00013fac 	.word	0x00013fac
    d510:	00013fc4 	.word	0x00013fc4
    d514:	00013f7c 	.word	0x00013f7c
    d518:	00013f94 	.word	0x00013f94

0000d51c <k_work_queue_init>:
		}
	}
}

void k_work_queue_init(struct k_work_q *queue)
{
    d51c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(queue != NULL);
    d51e:	4604      	mov	r4, r0
    d520:	b128      	cbz	r0, d52e <k_work_queue_init+0x12>

	*queue = (struct k_work_q) {
    d522:	22d0      	movs	r2, #208	; 0xd0
    d524:	2100      	movs	r1, #0
    d526:	4620      	mov	r0, r4
    d528:	f003 ff27 	bl	1137a <memset>
		.flags = 0,
	};

	SYS_PORT_TRACING_OBJ_INIT(k_work_queue, queue);
}
    d52c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(queue != NULL);
    d52e:	4d07      	ldr	r5, [pc, #28]	; (d54c <k_work_queue_init+0x30>)
    d530:	f240 23b9 	movw	r3, #697	; 0x2b9
    d534:	462a      	mov	r2, r5
    d536:	4906      	ldr	r1, [pc, #24]	; (d550 <k_work_queue_init+0x34>)
    d538:	4806      	ldr	r0, [pc, #24]	; (d554 <k_work_queue_init+0x38>)
    d53a:	f003 f8fd 	bl	10738 <assert_print>
    d53e:	f240 21b9 	movw	r1, #697	; 0x2b9
    d542:	4628      	mov	r0, r5
    d544:	f003 f8f1 	bl	1072a <assert_post_action>
    d548:	e7eb      	b.n	d522 <k_work_queue_init+0x6>
    d54a:	bf00      	nop
    d54c:	00016898 	.word	0x00016898
    d550:	00016904 	.word	0x00016904
    d554:	00013d44 	.word	0x00013d44

0000d558 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    d558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d55c:	b089      	sub	sp, #36	; 0x24
    d55e:	460d      	mov	r5, r1
    d560:	4617      	mov	r7, r2
    d562:	4698      	mov	r8, r3
    d564:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
    d566:	4604      	mov	r4, r0
    d568:	2800      	cmp	r0, #0
    d56a:	d03e      	beq.n	d5ea <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
    d56c:	2d00      	cmp	r5, #0
    d56e:	d04b      	beq.n	d608 <k_work_queue_start+0xb0>
	return (*flagp & BIT(bit)) != 0U;
    d570:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    d574:	f013 0f01 	tst.w	r3, #1
    d578:	d155      	bne.n	d626 <k_work_queue_start+0xce>
	list->head = NULL;
    d57a:	2300      	movs	r3, #0
    d57c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	list->tail = NULL;
    d580:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    d584:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    d588:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    d58c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    d590:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    d594:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    d598:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    d59c:	2e00      	cmp	r6, #0
    d59e:	d051      	beq.n	d644 <k_work_queue_start+0xec>
    d5a0:	7933      	ldrb	r3, [r6, #4]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d150      	bne.n	d648 <k_work_queue_start+0xf0>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    d5a6:	2301      	movs	r3, #1
	*flagp = flags;
    d5a8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d5ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d5b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d5b8:	2200      	movs	r2, #0
    d5ba:	9204      	str	r2, [sp, #16]
    d5bc:	f8cd 800c 	str.w	r8, [sp, #12]
    d5c0:	9202      	str	r2, [sp, #8]
    d5c2:	9201      	str	r2, [sp, #4]
    d5c4:	9400      	str	r4, [sp, #0]
    d5c6:	4b22      	ldr	r3, [pc, #136]	; (d650 <k_work_queue_start+0xf8>)
    d5c8:	463a      	mov	r2, r7
    d5ca:	4629      	mov	r1, r5
    d5cc:	4620      	mov	r0, r4
    d5ce:	f7ff f9e1 	bl	c994 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    d5d2:	b126      	cbz	r6, d5de <k_work_queue_start+0x86>
    d5d4:	6831      	ldr	r1, [r6, #0]
    d5d6:	b111      	cbz	r1, d5de <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
    d5d8:	4620      	mov	r0, r4
    d5da:	f7ff f873 	bl	c6c4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    d5de:	4620      	mov	r0, r4
    d5e0:	f005 fedd 	bl	1339e <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    d5e4:	b009      	add	sp, #36	; 0x24
    d5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
    d5ea:	f8df 9068 	ldr.w	r9, [pc, #104]	; d654 <k_work_queue_start+0xfc>
    d5ee:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    d5f2:	464a      	mov	r2, r9
    d5f4:	4918      	ldr	r1, [pc, #96]	; (d658 <k_work_queue_start+0x100>)
    d5f6:	4819      	ldr	r0, [pc, #100]	; (d65c <k_work_queue_start+0x104>)
    d5f8:	f003 f89e 	bl	10738 <assert_print>
    d5fc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    d600:	4648      	mov	r0, r9
    d602:	f003 f892 	bl	1072a <assert_post_action>
    d606:	e7b1      	b.n	d56c <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
    d608:	f8df 9048 	ldr.w	r9, [pc, #72]	; d654 <k_work_queue_start+0xfc>
    d60c:	f240 23c9 	movw	r3, #713	; 0x2c9
    d610:	464a      	mov	r2, r9
    d612:	4913      	ldr	r1, [pc, #76]	; (d660 <k_work_queue_start+0x108>)
    d614:	4811      	ldr	r0, [pc, #68]	; (d65c <k_work_queue_start+0x104>)
    d616:	f003 f88f 	bl	10738 <assert_print>
    d61a:	f240 21c9 	movw	r1, #713	; 0x2c9
    d61e:	4648      	mov	r0, r9
    d620:	f003 f883 	bl	1072a <assert_post_action>
    d624:	e7a4      	b.n	d570 <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    d626:	f8df 902c 	ldr.w	r9, [pc, #44]	; d654 <k_work_queue_start+0xfc>
    d62a:	f240 23ca 	movw	r3, #714	; 0x2ca
    d62e:	464a      	mov	r2, r9
    d630:	490c      	ldr	r1, [pc, #48]	; (d664 <k_work_queue_start+0x10c>)
    d632:	480a      	ldr	r0, [pc, #40]	; (d65c <k_work_queue_start+0x104>)
    d634:	f003 f880 	bl	10738 <assert_print>
    d638:	f240 21ca 	movw	r1, #714	; 0x2ca
    d63c:	4648      	mov	r0, r9
    d63e:	f003 f874 	bl	1072a <assert_post_action>
    d642:	e79a      	b.n	d57a <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    d644:	2301      	movs	r3, #1
    d646:	e7af      	b.n	d5a8 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
    d648:	f240 1301 	movw	r3, #257	; 0x101
    d64c:	e7ac      	b.n	d5a8 <k_work_queue_start+0x50>
    d64e:	bf00      	nop
    d650:	0000d211 	.word	0x0000d211
    d654:	00016898 	.word	0x00016898
    d658:	0001691c 	.word	0x0001691c
    d65c:	00013d44 	.word	0x00013d44
    d660:	00016924 	.word	0x00016924
    d664:	0001692c 	.word	0x0001692c

0000d668 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d668:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    d66a:	2b7f      	cmp	r3, #127	; 0x7f
    d66c:	d80e      	bhi.n	d68c <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    d66e:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    d670:	f013 0f1f 	tst.w	r3, #31
    d674:	d10c      	bne.n	d690 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    d676:	f990 200e 	ldrsb.w	r2, [r0, #14]
    d67a:	4b08      	ldr	r3, [pc, #32]	; (d69c <sliceable+0x34>)
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	429a      	cmp	r2, r3
    d680:	db08      	blt.n	d694 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    d682:	4b07      	ldr	r3, [pc, #28]	; (d6a0 <sliceable+0x38>)
    d684:	4298      	cmp	r0, r3
    d686:	d007      	beq.n	d698 <sliceable+0x30>
    d688:	2001      	movs	r0, #1
    d68a:	4770      	bx	lr
    d68c:	2000      	movs	r0, #0
    d68e:	4770      	bx	lr
    d690:	2000      	movs	r0, #0
    d692:	4770      	bx	lr
    d694:	2000      	movs	r0, #0
    d696:	4770      	bx	lr
    d698:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    d69a:	4770      	bx	lr
    d69c:	2000277c 	.word	0x2000277c
    d6a0:	20001798 	.word	0x20001798

0000d6a4 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    d6a4:	b538      	push	{r3, r4, r5, lr}
    d6a6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    d6a8:	6883      	ldr	r3, [r0, #8]
    d6aa:	b10b      	cbz	r3, d6b0 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    d6ac:	68a0      	ldr	r0, [r4, #8]
    d6ae:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    d6b0:	4d06      	ldr	r5, [pc, #24]	; (d6cc <pended_on_thread+0x28>)
    d6b2:	f44f 7335 	mov.w	r3, #724	; 0x2d4
    d6b6:	462a      	mov	r2, r5
    d6b8:	4905      	ldr	r1, [pc, #20]	; (d6d0 <pended_on_thread+0x2c>)
    d6ba:	4806      	ldr	r0, [pc, #24]	; (d6d4 <pended_on_thread+0x30>)
    d6bc:	f003 f83c 	bl	10738 <assert_print>
    d6c0:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    d6c4:	4628      	mov	r0, r5
    d6c6:	f003 f830 	bl	1072a <assert_post_action>
    d6ca:	e7ef      	b.n	d6ac <pended_on_thread+0x8>
    d6cc:	00016960 	.word	0x00016960
    d6d0:	00016984 	.word	0x00016984
    d6d4:	00013d44 	.word	0x00013d44

0000d6d8 <z_sched_lock>:
{
    d6d8:	b510      	push	{r4, lr}
    d6da:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    d6de:	b953      	cbnz	r3, d6f6 <z_sched_lock+0x1e>
	__ASSERT(_current->base.sched_locked != 1U, "");
    d6e0:	4b14      	ldr	r3, [pc, #80]	; (d734 <z_sched_lock+0x5c>)
    d6e2:	689b      	ldr	r3, [r3, #8]
    d6e4:	7bdb      	ldrb	r3, [r3, #15]
    d6e6:	2b01      	cmp	r3, #1
    d6e8:	d014      	beq.n	d714 <z_sched_lock+0x3c>
	--_current->base.sched_locked;
    d6ea:	4b12      	ldr	r3, [pc, #72]	; (d734 <z_sched_lock+0x5c>)
    d6ec:	689a      	ldr	r2, [r3, #8]
    d6ee:	7bd3      	ldrb	r3, [r2, #15]
    d6f0:	3b01      	subs	r3, #1
    d6f2:	73d3      	strb	r3, [r2, #15]
}
    d6f4:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
    d6f6:	4c10      	ldr	r4, [pc, #64]	; (d738 <z_sched_lock+0x60>)
    d6f8:	23fd      	movs	r3, #253	; 0xfd
    d6fa:	4622      	mov	r2, r4
    d6fc:	490f      	ldr	r1, [pc, #60]	; (d73c <z_sched_lock+0x64>)
    d6fe:	4810      	ldr	r0, [pc, #64]	; (d740 <z_sched_lock+0x68>)
    d700:	f003 f81a 	bl	10738 <assert_print>
    d704:	480f      	ldr	r0, [pc, #60]	; (d744 <z_sched_lock+0x6c>)
    d706:	f003 f817 	bl	10738 <assert_print>
    d70a:	21fd      	movs	r1, #253	; 0xfd
    d70c:	4620      	mov	r0, r4
    d70e:	f003 f80c 	bl	1072a <assert_post_action>
    d712:	e7e5      	b.n	d6e0 <z_sched_lock+0x8>
	__ASSERT(_current->base.sched_locked != 1U, "");
    d714:	4c08      	ldr	r4, [pc, #32]	; (d738 <z_sched_lock+0x60>)
    d716:	23fe      	movs	r3, #254	; 0xfe
    d718:	4622      	mov	r2, r4
    d71a:	490b      	ldr	r1, [pc, #44]	; (d748 <z_sched_lock+0x70>)
    d71c:	4808      	ldr	r0, [pc, #32]	; (d740 <z_sched_lock+0x68>)
    d71e:	f003 f80b 	bl	10738 <assert_print>
    d722:	4808      	ldr	r0, [pc, #32]	; (d744 <z_sched_lock+0x6c>)
    d724:	f003 f808 	bl	10738 <assert_print>
    d728:	21fe      	movs	r1, #254	; 0xfe
    d72a:	4620      	mov	r0, r4
    d72c:	f002 fffd 	bl	1072a <assert_post_action>
    d730:	e7db      	b.n	d6ea <z_sched_lock+0x12>
    d732:	bf00      	nop
    d734:	20002734 	.word	0x20002734
    d738:	0001699c 	.word	0x0001699c
    d73c:	00016708 	.word	0x00016708
    d740:	00013d44 	.word	0x00013d44
    d744:	00016894 	.word	0x00016894
    d748:	000169c8 	.word	0x000169c8

0000d74c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d750:	bf08      	it	eq
    d752:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    d756:	d100      	bne.n	d75a <add_thread_timeout+0xe>
    d758:	4770      	bx	lr
{
    d75a:	b508      	push	{r3, lr}
    d75c:	4902      	ldr	r1, [pc, #8]	; (d768 <add_thread_timeout+0x1c>)
    d75e:	3018      	adds	r0, #24
    d760:	f001 fb60 	bl	ee24 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    d764:	bd08      	pop	{r3, pc}
    d766:	bf00      	nop
    d768:	0000df25 	.word	0x0000df25

0000d76c <z_reset_time_slice>:
{
    d76c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    d76e:	4b07      	ldr	r3, [pc, #28]	; (d78c <z_reset_time_slice+0x20>)
    d770:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    d772:	b904      	cbnz	r4, d776 <z_reset_time_slice+0xa>
}
    d774:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    d776:	f7fb facf 	bl	8d18 <sys_clock_elapsed>
    d77a:	4404      	add	r4, r0
    d77c:	4b04      	ldr	r3, [pc, #16]	; (d790 <z_reset_time_slice+0x24>)
    d77e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    d780:	2100      	movs	r1, #0
    d782:	4b02      	ldr	r3, [pc, #8]	; (d78c <z_reset_time_slice+0x20>)
    d784:	6818      	ldr	r0, [r3, #0]
    d786:	f001 fcd9 	bl	f13c <z_set_timeout_expiry>
}
    d78a:	e7f3      	b.n	d774 <z_reset_time_slice+0x8>
    d78c:	20002780 	.word	0x20002780
    d790:	20002734 	.word	0x20002734

0000d794 <k_sched_time_slice_set>:
{
    d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d798:	4604      	mov	r4, r0
    d79a:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    d79c:	2700      	movs	r7, #0
	__asm__ volatile(
    d79e:	f04f 0320 	mov.w	r3, #32
    d7a2:	f3ef 8611 	mrs	r6, BASEPRI
    d7a6:	f383 8812 	msr	BASEPRI_MAX, r3
    d7aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d7ae:	482b      	ldr	r0, [pc, #172]	; (d85c <k_sched_time_slice_set+0xc8>)
    d7b0:	f7fe ffa8 	bl	c704 <z_spin_lock_valid>
    d7b4:	b118      	cbz	r0, d7be <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    d7b6:	4829      	ldr	r0, [pc, #164]	; (d85c <k_sched_time_slice_set+0xc8>)
    d7b8:	f7fe ffc4 	bl	c744 <z_spin_lock_set_owner>
	return k;
    d7bc:	e024      	b.n	d808 <k_sched_time_slice_set+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d7be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d860 <k_sched_time_slice_set+0xcc>
    d7c2:	238e      	movs	r3, #142	; 0x8e
    d7c4:	4642      	mov	r2, r8
    d7c6:	4927      	ldr	r1, [pc, #156]	; (d864 <k_sched_time_slice_set+0xd0>)
    d7c8:	4827      	ldr	r0, [pc, #156]	; (d868 <k_sched_time_slice_set+0xd4>)
    d7ca:	f002 ffb5 	bl	10738 <assert_print>
    d7ce:	4923      	ldr	r1, [pc, #140]	; (d85c <k_sched_time_slice_set+0xc8>)
    d7d0:	4826      	ldr	r0, [pc, #152]	; (d86c <k_sched_time_slice_set+0xd8>)
    d7d2:	f002 ffb1 	bl	10738 <assert_print>
    d7d6:	218e      	movs	r1, #142	; 0x8e
    d7d8:	4640      	mov	r0, r8
    d7da:	f002 ffa6 	bl	1072a <assert_post_action>
    d7de:	e7ea      	b.n	d7b6 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    d7e0:	2802      	cmp	r0, #2
    d7e2:	bfb8      	it	lt
    d7e4:	2002      	movlt	r0, #2
    d7e6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    d7e8:	4b21      	ldr	r3, [pc, #132]	; (d870 <k_sched_time_slice_set+0xdc>)
    d7ea:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    d7ec:	4b21      	ldr	r3, [pc, #132]	; (d874 <k_sched_time_slice_set+0xe0>)
    d7ee:	6898      	ldr	r0, [r3, #8]
    d7f0:	f7ff ffbc 	bl	d76c <z_reset_time_slice>
	LOCKED(&sched_spinlock) {
    d7f4:	4637      	mov	r7, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d7f6:	4819      	ldr	r0, [pc, #100]	; (d85c <k_sched_time_slice_set+0xc8>)
    d7f8:	f7fe ff94 	bl	c724 <z_spin_unlock_valid>
    d7fc:	b1d0      	cbz	r0, d834 <k_sched_time_slice_set+0xa0>
	__asm__ volatile(
    d7fe:	f387 8811 	msr	BASEPRI, r7
    d802:	f3bf 8f6f 	isb	sy
    d806:	2701      	movs	r7, #1
    d808:	bb2f      	cbnz	r7, d856 <k_sched_time_slice_set+0xc2>
		_current_cpu->slice_ticks = 0;
    d80a:	4b1a      	ldr	r3, [pc, #104]	; (d874 <k_sched_time_slice_set+0xe0>)
    d80c:	2200      	movs	r2, #0
    d80e:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    d810:	0c61      	lsrs	r1, r4, #17
    d812:	03e0      	lsls	r0, r4, #15
    d814:	f240 33e7 	movw	r3, #999	; 0x3e7
    d818:	18c0      	adds	r0, r0, r3
    d81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d81e:	f04f 0300 	mov.w	r3, #0
    d822:	f141 0100 	adc.w	r1, r1, #0
    d826:	f7f2 fc95 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    d82a:	4b13      	ldr	r3, [pc, #76]	; (d878 <k_sched_time_slice_set+0xe4>)
    d82c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    d82e:	2c00      	cmp	r4, #0
    d830:	dcd6      	bgt.n	d7e0 <k_sched_time_slice_set+0x4c>
    d832:	e7d9      	b.n	d7e8 <k_sched_time_slice_set+0x54>
    d834:	f8df 8028 	ldr.w	r8, [pc, #40]	; d860 <k_sched_time_slice_set+0xcc>
    d838:	23b9      	movs	r3, #185	; 0xb9
    d83a:	4642      	mov	r2, r8
    d83c:	490f      	ldr	r1, [pc, #60]	; (d87c <k_sched_time_slice_set+0xe8>)
    d83e:	480a      	ldr	r0, [pc, #40]	; (d868 <k_sched_time_slice_set+0xd4>)
    d840:	f002 ff7a 	bl	10738 <assert_print>
    d844:	4905      	ldr	r1, [pc, #20]	; (d85c <k_sched_time_slice_set+0xc8>)
    d846:	480e      	ldr	r0, [pc, #56]	; (d880 <k_sched_time_slice_set+0xec>)
    d848:	f002 ff76 	bl	10738 <assert_print>
    d84c:	21b9      	movs	r1, #185	; 0xb9
    d84e:	4640      	mov	r0, r8
    d850:	f002 ff6b 	bl	1072a <assert_post_action>
    d854:	e7d3      	b.n	d7fe <k_sched_time_slice_set+0x6a>
}
    d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d85a:	bf00      	nop
    d85c:	20002784 	.word	0x20002784
    d860:	00013f4c 	.word	0x00013f4c
    d864:	00013fac 	.word	0x00013fac
    d868:	00013d44 	.word	0x00013d44
    d86c:	00013fc4 	.word	0x00013fc4
    d870:	2000277c 	.word	0x2000277c
    d874:	20002734 	.word	0x20002734
    d878:	20002780 	.word	0x20002780
    d87c:	00013f7c 	.word	0x00013f7c
    d880:	00013f94 	.word	0x00013f94

0000d884 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d886:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    d888:	2400      	movs	r4, #0
	__asm__ volatile(
    d88a:	f04f 0320 	mov.w	r3, #32
    d88e:	f3ef 8711 	mrs	r7, BASEPRI
    d892:	f383 8812 	msr	BASEPRI_MAX, r3
    d896:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d89a:	481c      	ldr	r0, [pc, #112]	; (d90c <z_unpend_thread_no_timeout+0x88>)
    d89c:	f7fe ff32 	bl	c704 <z_spin_lock_valid>
    d8a0:	b118      	cbz	r0, d8aa <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    d8a2:	481a      	ldr	r0, [pc, #104]	; (d90c <z_unpend_thread_no_timeout+0x88>)
    d8a4:	f7fe ff4e 	bl	c744 <z_spin_lock_set_owner>
	return k;
    d8a8:	e014      	b.n	d8d4 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d8aa:	4e19      	ldr	r6, [pc, #100]	; (d910 <z_unpend_thread_no_timeout+0x8c>)
    d8ac:	238e      	movs	r3, #142	; 0x8e
    d8ae:	4632      	mov	r2, r6
    d8b0:	4918      	ldr	r1, [pc, #96]	; (d914 <z_unpend_thread_no_timeout+0x90>)
    d8b2:	4819      	ldr	r0, [pc, #100]	; (d918 <z_unpend_thread_no_timeout+0x94>)
    d8b4:	f002 ff40 	bl	10738 <assert_print>
    d8b8:	4914      	ldr	r1, [pc, #80]	; (d90c <z_unpend_thread_no_timeout+0x88>)
    d8ba:	4818      	ldr	r0, [pc, #96]	; (d91c <z_unpend_thread_no_timeout+0x98>)
    d8bc:	f002 ff3c 	bl	10738 <assert_print>
    d8c0:	218e      	movs	r1, #142	; 0x8e
    d8c2:	4630      	mov	r0, r6
    d8c4:	f002 ff31 	bl	1072a <assert_post_action>
    d8c8:	e7eb      	b.n	d8a2 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    d8ca:	f384 8811 	msr	BASEPRI, r4
    d8ce:	f3bf 8f6f 	isb	sy
    d8d2:	2401      	movs	r4, #1
    d8d4:	b9c4      	cbnz	r4, d908 <z_unpend_thread_no_timeout+0x84>
		unpend_thread_no_timeout(thread);
    d8d6:	4628      	mov	r0, r5
    d8d8:	f005 fdfb 	bl	134d2 <unpend_thread_no_timeout>
	LOCKED(&sched_spinlock) {
    d8dc:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d8de:	480b      	ldr	r0, [pc, #44]	; (d90c <z_unpend_thread_no_timeout+0x88>)
    d8e0:	f7fe ff20 	bl	c724 <z_spin_unlock_valid>
    d8e4:	2800      	cmp	r0, #0
    d8e6:	d1f0      	bne.n	d8ca <z_unpend_thread_no_timeout+0x46>
    d8e8:	4e09      	ldr	r6, [pc, #36]	; (d910 <z_unpend_thread_no_timeout+0x8c>)
    d8ea:	23b9      	movs	r3, #185	; 0xb9
    d8ec:	4632      	mov	r2, r6
    d8ee:	490c      	ldr	r1, [pc, #48]	; (d920 <z_unpend_thread_no_timeout+0x9c>)
    d8f0:	4809      	ldr	r0, [pc, #36]	; (d918 <z_unpend_thread_no_timeout+0x94>)
    d8f2:	f002 ff21 	bl	10738 <assert_print>
    d8f6:	4905      	ldr	r1, [pc, #20]	; (d90c <z_unpend_thread_no_timeout+0x88>)
    d8f8:	480a      	ldr	r0, [pc, #40]	; (d924 <z_unpend_thread_no_timeout+0xa0>)
    d8fa:	f002 ff1d 	bl	10738 <assert_print>
    d8fe:	21b9      	movs	r1, #185	; 0xb9
    d900:	4630      	mov	r0, r6
    d902:	f002 ff12 	bl	1072a <assert_post_action>
    d906:	e7e0      	b.n	d8ca <z_unpend_thread_no_timeout+0x46>
	}
}
    d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d90a:	bf00      	nop
    d90c:	20002784 	.word	0x20002784
    d910:	00013f4c 	.word	0x00013f4c
    d914:	00013fac 	.word	0x00013fac
    d918:	00013d44 	.word	0x00013d44
    d91c:	00013fc4 	.word	0x00013fc4
    d920:	00013f7c 	.word	0x00013f7c
    d924:	00013f94 	.word	0x00013f94

0000d928 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    d928:	b570      	push	{r4, r5, r6, lr}
    d92a:	4605      	mov	r5, r0
	if (resched(key.key) && need_swap()) {
    d92c:	460e      	mov	r6, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d92e:	b9f9      	cbnz	r1, d970 <z_reschedule+0x48>
    d930:	460c      	mov	r4, r1
    d932:	f3ef 8305 	mrs	r3, IPSR
    d936:	b9db      	cbnz	r3, d970 <z_reschedule+0x48>
	new_thread = _kernel.ready_q.cache;
    d938:	4b1a      	ldr	r3, [pc, #104]	; (d9a4 <z_reschedule+0x7c>)
    d93a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    d93c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    d93e:	429a      	cmp	r2, r3
    d940:	d016      	beq.n	d970 <z_reschedule+0x48>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d942:	f7fe feef 	bl	c724 <z_spin_unlock_valid>
    d946:	b118      	cbz	r0, d950 <z_reschedule+0x28>
	ret = arch_swap(key);
    d948:	4620      	mov	r0, r4
    d94a:	f7f7 fa53 	bl	4df4 <arch_swap>
		z_swap(lock, key);
    d94e:	e017      	b.n	d980 <z_reschedule+0x58>
    d950:	4e15      	ldr	r6, [pc, #84]	; (d9a8 <z_reschedule+0x80>)
    d952:	23d0      	movs	r3, #208	; 0xd0
    d954:	4632      	mov	r2, r6
    d956:	4915      	ldr	r1, [pc, #84]	; (d9ac <z_reschedule+0x84>)
    d958:	4815      	ldr	r0, [pc, #84]	; (d9b0 <z_reschedule+0x88>)
    d95a:	f002 feed 	bl	10738 <assert_print>
    d95e:	4629      	mov	r1, r5
    d960:	4814      	ldr	r0, [pc, #80]	; (d9b4 <z_reschedule+0x8c>)
    d962:	f002 fee9 	bl	10738 <assert_print>
    d966:	21d0      	movs	r1, #208	; 0xd0
    d968:	4630      	mov	r0, r6
    d96a:	f002 fede 	bl	1072a <assert_post_action>
    d96e:	e7eb      	b.n	d948 <z_reschedule+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d970:	4628      	mov	r0, r5
    d972:	f7fe fed7 	bl	c724 <z_spin_unlock_valid>
    d976:	b120      	cbz	r0, d982 <z_reschedule+0x5a>
    d978:	f386 8811 	msr	BASEPRI, r6
    d97c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    d980:	bd70      	pop	{r4, r5, r6, pc}
    d982:	4c09      	ldr	r4, [pc, #36]	; (d9a8 <z_reschedule+0x80>)
    d984:	23b9      	movs	r3, #185	; 0xb9
    d986:	4622      	mov	r2, r4
    d988:	4908      	ldr	r1, [pc, #32]	; (d9ac <z_reschedule+0x84>)
    d98a:	4809      	ldr	r0, [pc, #36]	; (d9b0 <z_reschedule+0x88>)
    d98c:	f002 fed4 	bl	10738 <assert_print>
    d990:	4629      	mov	r1, r5
    d992:	4808      	ldr	r0, [pc, #32]	; (d9b4 <z_reschedule+0x8c>)
    d994:	f002 fed0 	bl	10738 <assert_print>
    d998:	21b9      	movs	r1, #185	; 0xb9
    d99a:	4620      	mov	r0, r4
    d99c:	f002 fec5 	bl	1072a <assert_post_action>
    d9a0:	e7ea      	b.n	d978 <z_reschedule+0x50>
    d9a2:	bf00      	nop
    d9a4:	20002734 	.word	0x20002734
    d9a8:	00013f4c 	.word	0x00013f4c
    d9ac:	00013f7c 	.word	0x00013f7c
    d9b0:	00013d44 	.word	0x00013d44
    d9b4:	00013f94 	.word	0x00013f94

0000d9b8 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
    d9b8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    d9ba:	2400      	movs	r4, #0
	__asm__ volatile(
    d9bc:	f04f 0320 	mov.w	r3, #32
    d9c0:	f3ef 8511 	mrs	r5, BASEPRI
    d9c4:	f383 8812 	msr	BASEPRI_MAX, r3
    d9c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9cc:	481b      	ldr	r0, [pc, #108]	; (da3c <k_sched_lock+0x84>)
    d9ce:	f7fe fe99 	bl	c704 <z_spin_lock_valid>
    d9d2:	b118      	cbz	r0, d9dc <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    d9d4:	4819      	ldr	r0, [pc, #100]	; (da3c <k_sched_lock+0x84>)
    d9d6:	f7fe feb5 	bl	c744 <z_spin_lock_set_owner>
	return k;
    d9da:	e014      	b.n	da06 <k_sched_lock+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9dc:	4e18      	ldr	r6, [pc, #96]	; (da40 <k_sched_lock+0x88>)
    d9de:	238e      	movs	r3, #142	; 0x8e
    d9e0:	4632      	mov	r2, r6
    d9e2:	4918      	ldr	r1, [pc, #96]	; (da44 <k_sched_lock+0x8c>)
    d9e4:	4818      	ldr	r0, [pc, #96]	; (da48 <k_sched_lock+0x90>)
    d9e6:	f002 fea7 	bl	10738 <assert_print>
    d9ea:	4914      	ldr	r1, [pc, #80]	; (da3c <k_sched_lock+0x84>)
    d9ec:	4817      	ldr	r0, [pc, #92]	; (da4c <k_sched_lock+0x94>)
    d9ee:	f002 fea3 	bl	10738 <assert_print>
    d9f2:	218e      	movs	r1, #142	; 0x8e
    d9f4:	4630      	mov	r0, r6
    d9f6:	f002 fe98 	bl	1072a <assert_post_action>
    d9fa:	e7eb      	b.n	d9d4 <k_sched_lock+0x1c>
	__asm__ volatile(
    d9fc:	f384 8811 	msr	BASEPRI, r4
    da00:	f3bf 8f6f 	isb	sy
    da04:	2401      	movs	r4, #1
    da06:	b9bc      	cbnz	r4, da38 <k_sched_lock+0x80>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
    da08:	f7ff fe66 	bl	d6d8 <z_sched_lock>
	LOCKED(&sched_spinlock) {
    da0c:	462c      	mov	r4, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da0e:	480b      	ldr	r0, [pc, #44]	; (da3c <k_sched_lock+0x84>)
    da10:	f7fe fe88 	bl	c724 <z_spin_unlock_valid>
    da14:	2800      	cmp	r0, #0
    da16:	d1f1      	bne.n	d9fc <k_sched_lock+0x44>
    da18:	4e09      	ldr	r6, [pc, #36]	; (da40 <k_sched_lock+0x88>)
    da1a:	23b9      	movs	r3, #185	; 0xb9
    da1c:	4632      	mov	r2, r6
    da1e:	490c      	ldr	r1, [pc, #48]	; (da50 <k_sched_lock+0x98>)
    da20:	4809      	ldr	r0, [pc, #36]	; (da48 <k_sched_lock+0x90>)
    da22:	f002 fe89 	bl	10738 <assert_print>
    da26:	4905      	ldr	r1, [pc, #20]	; (da3c <k_sched_lock+0x84>)
    da28:	480a      	ldr	r0, [pc, #40]	; (da54 <k_sched_lock+0x9c>)
    da2a:	f002 fe85 	bl	10738 <assert_print>
    da2e:	21b9      	movs	r1, #185	; 0xb9
    da30:	4630      	mov	r0, r6
    da32:	f002 fe7a 	bl	1072a <assert_post_action>
    da36:	e7e1      	b.n	d9fc <k_sched_lock+0x44>
	}
}
    da38:	bd70      	pop	{r4, r5, r6, pc}
    da3a:	bf00      	nop
    da3c:	20002784 	.word	0x20002784
    da40:	00013f4c 	.word	0x00013f4c
    da44:	00013fac 	.word	0x00013fac
    da48:	00013d44 	.word	0x00013d44
    da4c:	00013fc4 	.word	0x00013fc4
    da50:	00013f7c 	.word	0x00013f7c
    da54:	00013f94 	.word	0x00013f94

0000da58 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    da58:	b538      	push	{r3, r4, r5, lr}
    da5a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    da5c:	4b0c      	ldr	r3, [pc, #48]	; (da90 <z_priq_dumb_remove+0x38>)
    da5e:	4299      	cmp	r1, r3
    da60:	d007      	beq.n	da72 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    da62:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    da64:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    da66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    da68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    da6a:	2300      	movs	r3, #0
    da6c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    da6e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    da70:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    da72:	4d08      	ldr	r5, [pc, #32]	; (da94 <z_priq_dumb_remove+0x3c>)
    da74:	f240 4362 	movw	r3, #1122	; 0x462
    da78:	462a      	mov	r2, r5
    da7a:	4907      	ldr	r1, [pc, #28]	; (da98 <z_priq_dumb_remove+0x40>)
    da7c:	4807      	ldr	r0, [pc, #28]	; (da9c <z_priq_dumb_remove+0x44>)
    da7e:	f002 fe5b 	bl	10738 <assert_print>
    da82:	f240 4162 	movw	r1, #1122	; 0x462
    da86:	4628      	mov	r0, r5
    da88:	f002 fe4f 	bl	1072a <assert_post_action>
    da8c:	e7e9      	b.n	da62 <z_priq_dumb_remove+0xa>
    da8e:	bf00      	nop
    da90:	20001798 	.word	0x20001798
    da94:	00016960 	.word	0x00016960
    da98:	000169fc 	.word	0x000169fc
    da9c:	00013d44 	.word	0x00013d44

0000daa0 <update_cache>:
{
    daa0:	b538      	push	{r3, r4, r5, lr}
    daa2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    daa4:	4819      	ldr	r0, [pc, #100]	; (db0c <update_cache+0x6c>)
    daa6:	f005 fd22 	bl	134ee <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    daaa:	4605      	mov	r5, r0
    daac:	b188      	cbz	r0, dad2 <update_cache+0x32>
	if (preempt_ok != 0) {
    daae:	bb14      	cbnz	r4, daf6 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    dab0:	4b17      	ldr	r3, [pc, #92]	; (db10 <update_cache+0x70>)
    dab2:	689b      	ldr	r3, [r3, #8]
    dab4:	b183      	cbz	r3, dad8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    dab6:	4b16      	ldr	r3, [pc, #88]	; (db10 <update_cache+0x70>)
    dab8:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    daba:	7b5a      	ldrb	r2, [r3, #13]
    dabc:	f012 0f1f 	tst.w	r2, #31
    dac0:	d119      	bne.n	daf6 <update_cache+0x56>
	return node->next != NULL;
    dac2:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    dac4:	b9ba      	cbnz	r2, daf6 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    dac6:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    dac8:	2a7f      	cmp	r2, #127	; 0x7f
    daca:	d914      	bls.n	daf6 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    dacc:	4a10      	ldr	r2, [pc, #64]	; (db10 <update_cache+0x70>)
    dace:	61d3      	str	r3, [r2, #28]
    dad0:	e01a      	b.n	db08 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    dad2:	4b0f      	ldr	r3, [pc, #60]	; (db10 <update_cache+0x70>)
    dad4:	68dd      	ldr	r5, [r3, #12]
    dad6:	e7ea      	b.n	daae <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    dad8:	4c0e      	ldr	r4, [pc, #56]	; (db14 <update_cache+0x74>)
    dada:	2389      	movs	r3, #137	; 0x89
    dadc:	4622      	mov	r2, r4
    dade:	490e      	ldr	r1, [pc, #56]	; (db18 <update_cache+0x78>)
    dae0:	480e      	ldr	r0, [pc, #56]	; (db1c <update_cache+0x7c>)
    dae2:	f002 fe29 	bl	10738 <assert_print>
    dae6:	480e      	ldr	r0, [pc, #56]	; (db20 <update_cache+0x80>)
    dae8:	f002 fe26 	bl	10738 <assert_print>
    daec:	2189      	movs	r1, #137	; 0x89
    daee:	4620      	mov	r0, r4
    daf0:	f002 fe1b 	bl	1072a <assert_post_action>
    daf4:	e7df      	b.n	dab6 <update_cache+0x16>
		if (thread != _current) {
    daf6:	4b06      	ldr	r3, [pc, #24]	; (db10 <update_cache+0x70>)
    daf8:	689b      	ldr	r3, [r3, #8]
    dafa:	42ab      	cmp	r3, r5
    dafc:	d002      	beq.n	db04 <update_cache+0x64>
			z_reset_time_slice(thread);
    dafe:	4628      	mov	r0, r5
    db00:	f7ff fe34 	bl	d76c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    db04:	4b02      	ldr	r3, [pc, #8]	; (db10 <update_cache+0x70>)
    db06:	61dd      	str	r5, [r3, #28]
}
    db08:	bd38      	pop	{r3, r4, r5, pc}
    db0a:	bf00      	nop
    db0c:	20002754 	.word	0x20002754
    db10:	20002734 	.word	0x20002734
    db14:	00016960 	.word	0x00016960
    db18:	00016a20 	.word	0x00016a20
    db1c:	00013d44 	.word	0x00013d44
    db20:	00016894 	.word	0x00016894

0000db24 <move_thread_to_end_of_prio_q>:
{
    db24:	b538      	push	{r3, r4, r5, lr}
    db26:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    db28:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    db2a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    db2e:	2b00      	cmp	r3, #0
    db30:	db0d      	blt.n	db4e <move_thread_to_end_of_prio_q+0x2a>
	thread->base.thread_state |= _THREAD_QUEUED;
    db32:	7b6b      	ldrb	r3, [r5, #13]
    db34:	f063 037f 	orn	r3, r3, #127	; 0x7f
    db38:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    db3a:	4b22      	ldr	r3, [pc, #136]	; (dbc4 <move_thread_to_end_of_prio_q+0xa0>)
    db3c:	429d      	cmp	r5, r3
    db3e:	d00e      	beq.n	db5e <move_thread_to_end_of_prio_q+0x3a>
	return list->head == list;
    db40:	4b21      	ldr	r3, [pc, #132]	; (dbc8 <move_thread_to_end_of_prio_q+0xa4>)
    db42:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    db46:	429c      	cmp	r4, r3
    db48:	d11c      	bne.n	db84 <move_thread_to_end_of_prio_q+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    db4a:	2400      	movs	r4, #0
    db4c:	e01a      	b.n	db84 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    db4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    db52:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    db54:	4601      	mov	r1, r0
    db56:	481d      	ldr	r0, [pc, #116]	; (dbcc <move_thread_to_end_of_prio_q+0xa8>)
    db58:	f7ff ff7e 	bl	da58 <z_priq_dumb_remove>
}
    db5c:	e7e9      	b.n	db32 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    db5e:	4c1c      	ldr	r4, [pc, #112]	; (dbd0 <move_thread_to_end_of_prio_q+0xac>)
    db60:	23ba      	movs	r3, #186	; 0xba
    db62:	4622      	mov	r2, r4
    db64:	491b      	ldr	r1, [pc, #108]	; (dbd4 <move_thread_to_end_of_prio_q+0xb0>)
    db66:	481c      	ldr	r0, [pc, #112]	; (dbd8 <move_thread_to_end_of_prio_q+0xb4>)
    db68:	f002 fde6 	bl	10738 <assert_print>
    db6c:	21ba      	movs	r1, #186	; 0xba
    db6e:	4620      	mov	r0, r4
    db70:	f002 fddb 	bl	1072a <assert_post_action>
    db74:	e7e4      	b.n	db40 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    db76:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    db78:	606b      	str	r3, [r5, #4]
	node->next = successor;
    db7a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    db7c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    db7e:	6065      	str	r5, [r4, #4]
}
    db80:	e017      	b.n	dbb2 <move_thread_to_end_of_prio_q+0x8e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    db82:	2400      	movs	r4, #0
    db84:	b16c      	cbz	r4, dba2 <move_thread_to_end_of_prio_q+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    db86:	4621      	mov	r1, r4
    db88:	4628      	mov	r0, r5
    db8a:	f005 fc7e 	bl	1348a <z_sched_prio_cmp>
    db8e:	2800      	cmp	r0, #0
    db90:	dcf1      	bgt.n	db76 <move_thread_to_end_of_prio_q+0x52>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    db92:	2c00      	cmp	r4, #0
    db94:	d0f6      	beq.n	db84 <move_thread_to_end_of_prio_q+0x60>
	return (node == list->tail) ? NULL : node->next;
    db96:	4b0c      	ldr	r3, [pc, #48]	; (dbc8 <move_thread_to_end_of_prio_q+0xa4>)
    db98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    db9a:	429c      	cmp	r4, r3
    db9c:	d0f1      	beq.n	db82 <move_thread_to_end_of_prio_q+0x5e>
    db9e:	6824      	ldr	r4, [r4, #0]
    dba0:	e7f0      	b.n	db84 <move_thread_to_end_of_prio_q+0x60>
	sys_dnode_t *const tail = list->tail;
    dba2:	4b09      	ldr	r3, [pc, #36]	; (dbc8 <move_thread_to_end_of_prio_q+0xa4>)
    dba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    dba6:	f103 0120 	add.w	r1, r3, #32
    dbaa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    dbac:	606a      	str	r2, [r5, #4]
	tail->next = node;
    dbae:	6015      	str	r5, [r2, #0]
	list->tail = node;
    dbb0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    dbb2:	4b05      	ldr	r3, [pc, #20]	; (dbc8 <move_thread_to_end_of_prio_q+0xa4>)
    dbb4:	6898      	ldr	r0, [r3, #8]
    dbb6:	42a8      	cmp	r0, r5
    dbb8:	bf14      	ite	ne
    dbba:	2000      	movne	r0, #0
    dbbc:	2001      	moveq	r0, #1
    dbbe:	f7ff ff6f 	bl	daa0 <update_cache>
}
    dbc2:	bd38      	pop	{r3, r4, r5, pc}
    dbc4:	20001798 	.word	0x20001798
    dbc8:	20002734 	.word	0x20002734
    dbcc:	20002754 	.word	0x20002754
    dbd0:	00016960 	.word	0x00016960
    dbd4:	000169fc 	.word	0x000169fc
    dbd8:	00013d44 	.word	0x00013d44

0000dbdc <slice_expired_locked>:
{
    dbdc:	b538      	push	{r3, r4, r5, lr}
    dbde:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    dbe0:	4b07      	ldr	r3, [pc, #28]	; (dc00 <slice_expired_locked+0x24>)
    dbe2:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    dbe4:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    dbe6:	f013 0f1f 	tst.w	r3, #31
    dbea:	d004      	beq.n	dbf6 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    dbec:	4628      	mov	r0, r5
    dbee:	f7ff fdbd 	bl	d76c <z_reset_time_slice>
}
    dbf2:	4620      	mov	r0, r4
    dbf4:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    dbf6:	4628      	mov	r0, r5
    dbf8:	f7ff ff94 	bl	db24 <move_thread_to_end_of_prio_q>
    dbfc:	e7f6      	b.n	dbec <slice_expired_locked+0x10>
    dbfe:	bf00      	nop
    dc00:	20002734 	.word	0x20002734

0000dc04 <z_time_slice>:
{
    dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc06:	4605      	mov	r5, r0
	__asm__ volatile(
    dc08:	f04f 0320 	mov.w	r3, #32
    dc0c:	f3ef 8611 	mrs	r6, BASEPRI
    dc10:	f383 8812 	msr	BASEPRI_MAX, r3
    dc14:	f3bf 8f6f 	isb	sy
    dc18:	4637      	mov	r7, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc1a:	4836      	ldr	r0, [pc, #216]	; (dcf4 <z_time_slice+0xf0>)
    dc1c:	f7fe fd72 	bl	c704 <z_spin_lock_valid>
    dc20:	b1e0      	cbz	r0, dc5c <z_time_slice+0x58>
	z_spin_lock_set_owner(l);
    dc22:	4834      	ldr	r0, [pc, #208]	; (dcf4 <z_time_slice+0xf0>)
    dc24:	f7fe fd8e 	bl	c744 <z_spin_lock_set_owner>
	return k;
    dc28:	4634      	mov	r4, r6
	if (pending_current == _current) {
    dc2a:	4b33      	ldr	r3, [pc, #204]	; (dcf8 <z_time_slice+0xf4>)
    dc2c:	6898      	ldr	r0, [r3, #8]
    dc2e:	4b33      	ldr	r3, [pc, #204]	; (dcfc <z_time_slice+0xf8>)
    dc30:	681b      	ldr	r3, [r3, #0]
    dc32:	4298      	cmp	r0, r3
    dc34:	d022      	beq.n	dc7c <z_time_slice+0x78>
	pending_current = NULL;
    dc36:	4b31      	ldr	r3, [pc, #196]	; (dcfc <z_time_slice+0xf8>)
    dc38:	2200      	movs	r2, #0
    dc3a:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    dc3c:	4b30      	ldr	r3, [pc, #192]	; (dd00 <z_time_slice+0xfc>)
    dc3e:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    dc40:	2b00      	cmp	r3, #0
    dc42:	d03b      	beq.n	dcbc <z_time_slice+0xb8>
    dc44:	f7ff fd10 	bl	d668 <sliceable>
    dc48:	2800      	cmp	r0, #0
    dc4a:	d037      	beq.n	dcbc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    dc4c:	4b2a      	ldr	r3, [pc, #168]	; (dcf8 <z_time_slice+0xf4>)
    dc4e:	691b      	ldr	r3, [r3, #16]
    dc50:	42ab      	cmp	r3, r5
    dc52:	dd2e      	ble.n	dcb2 <z_time_slice+0xae>
			_current_cpu->slice_ticks -= ticks;
    dc54:	1b5b      	subs	r3, r3, r5
    dc56:	4a28      	ldr	r2, [pc, #160]	; (dcf8 <z_time_slice+0xf4>)
    dc58:	6113      	str	r3, [r2, #16]
    dc5a:	e032      	b.n	dcc2 <z_time_slice+0xbe>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc5c:	4c29      	ldr	r4, [pc, #164]	; (dd04 <z_time_slice+0x100>)
    dc5e:	238e      	movs	r3, #142	; 0x8e
    dc60:	4622      	mov	r2, r4
    dc62:	4929      	ldr	r1, [pc, #164]	; (dd08 <z_time_slice+0x104>)
    dc64:	4829      	ldr	r0, [pc, #164]	; (dd0c <z_time_slice+0x108>)
    dc66:	f002 fd67 	bl	10738 <assert_print>
    dc6a:	4922      	ldr	r1, [pc, #136]	; (dcf4 <z_time_slice+0xf0>)
    dc6c:	4828      	ldr	r0, [pc, #160]	; (dd10 <z_time_slice+0x10c>)
    dc6e:	f002 fd63 	bl	10738 <assert_print>
    dc72:	218e      	movs	r1, #142	; 0x8e
    dc74:	4620      	mov	r0, r4
    dc76:	f002 fd58 	bl	1072a <assert_post_action>
    dc7a:	e7d2      	b.n	dc22 <z_time_slice+0x1e>
		z_reset_time_slice(_current);
    dc7c:	f7ff fd76 	bl	d76c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc80:	481c      	ldr	r0, [pc, #112]	; (dcf4 <z_time_slice+0xf0>)
    dc82:	f7fe fd4f 	bl	c724 <z_spin_unlock_valid>
    dc86:	b120      	cbz	r0, dc92 <z_time_slice+0x8e>
	__asm__ volatile(
    dc88:	f387 8811 	msr	BASEPRI, r7
    dc8c:	f3bf 8f6f 	isb	sy
		return;
    dc90:	e01f      	b.n	dcd2 <z_time_slice+0xce>
    dc92:	4c1c      	ldr	r4, [pc, #112]	; (dd04 <z_time_slice+0x100>)
    dc94:	23b9      	movs	r3, #185	; 0xb9
    dc96:	4622      	mov	r2, r4
    dc98:	491e      	ldr	r1, [pc, #120]	; (dd14 <z_time_slice+0x110>)
    dc9a:	481c      	ldr	r0, [pc, #112]	; (dd0c <z_time_slice+0x108>)
    dc9c:	f002 fd4c 	bl	10738 <assert_print>
    dca0:	4914      	ldr	r1, [pc, #80]	; (dcf4 <z_time_slice+0xf0>)
    dca2:	481d      	ldr	r0, [pc, #116]	; (dd18 <z_time_slice+0x114>)
    dca4:	f002 fd48 	bl	10738 <assert_print>
    dca8:	21b9      	movs	r1, #185	; 0xb9
    dcaa:	4620      	mov	r0, r4
    dcac:	f002 fd3d 	bl	1072a <assert_post_action>
    dcb0:	e7ea      	b.n	dc88 <z_time_slice+0x84>
			key = slice_expired_locked(key);
    dcb2:	4630      	mov	r0, r6
    dcb4:	f7ff ff92 	bl	dbdc <slice_expired_locked>
    dcb8:	4604      	mov	r4, r0
    dcba:	e002      	b.n	dcc2 <z_time_slice+0xbe>
		_current_cpu->slice_ticks = 0;
    dcbc:	4b0e      	ldr	r3, [pc, #56]	; (dcf8 <z_time_slice+0xf4>)
    dcbe:	2200      	movs	r2, #0
    dcc0:	611a      	str	r2, [r3, #16]
    dcc2:	480c      	ldr	r0, [pc, #48]	; (dcf4 <z_time_slice+0xf0>)
    dcc4:	f7fe fd2e 	bl	c724 <z_spin_unlock_valid>
    dcc8:	b120      	cbz	r0, dcd4 <z_time_slice+0xd0>
    dcca:	f384 8811 	msr	BASEPRI, r4
    dcce:	f3bf 8f6f 	isb	sy
}
    dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dcd4:	4d0b      	ldr	r5, [pc, #44]	; (dd04 <z_time_slice+0x100>)
    dcd6:	23b9      	movs	r3, #185	; 0xb9
    dcd8:	462a      	mov	r2, r5
    dcda:	490e      	ldr	r1, [pc, #56]	; (dd14 <z_time_slice+0x110>)
    dcdc:	480b      	ldr	r0, [pc, #44]	; (dd0c <z_time_slice+0x108>)
    dcde:	f002 fd2b 	bl	10738 <assert_print>
    dce2:	4904      	ldr	r1, [pc, #16]	; (dcf4 <z_time_slice+0xf0>)
    dce4:	480c      	ldr	r0, [pc, #48]	; (dd18 <z_time_slice+0x114>)
    dce6:	f002 fd27 	bl	10738 <assert_print>
    dcea:	21b9      	movs	r1, #185	; 0xb9
    dcec:	4628      	mov	r0, r5
    dcee:	f002 fd1c 	bl	1072a <assert_post_action>
    dcf2:	e7ea      	b.n	dcca <z_time_slice+0xc6>
    dcf4:	20002784 	.word	0x20002784
    dcf8:	20002734 	.word	0x20002734
    dcfc:	20002778 	.word	0x20002778
    dd00:	20002780 	.word	0x20002780
    dd04:	00013f4c 	.word	0x00013f4c
    dd08:	00013fac 	.word	0x00013fac
    dd0c:	00013d44 	.word	0x00013d44
    dd10:	00013fc4 	.word	0x00013fc4
    dd14:	00013f7c 	.word	0x00013f7c
    dd18:	00013f94 	.word	0x00013f94

0000dd1c <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    dd1c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    dd1e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    dd22:	2b00      	cmp	r3, #0
    dd24:	db42      	blt.n	ddac <ready_thread+0x90>
{
    dd26:	b570      	push	{r4, r5, r6, lr}
    dd28:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    dd2a:	f012 0f1f 	tst.w	r2, #31
    dd2e:	d101      	bne.n	dd34 <ready_thread+0x18>
	return node->next != NULL;
    dd30:	6986      	ldr	r6, [r0, #24]
    dd32:	b106      	cbz	r6, dd36 <ready_thread+0x1a>
}
    dd34:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    dd36:	f062 027f 	orn	r2, r2, #127	; 0x7f
    dd3a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    dd3c:	4b1c      	ldr	r3, [pc, #112]	; (ddb0 <ready_thread+0x94>)
    dd3e:	4298      	cmp	r0, r3
    dd40:	d006      	beq.n	dd50 <ready_thread+0x34>
	return list->head == list;
    dd42:	4b1c      	ldr	r3, [pc, #112]	; (ddb4 <ready_thread+0x98>)
    dd44:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd48:	429d      	cmp	r5, r3
    dd4a:	d114      	bne.n	dd76 <ready_thread+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd4c:	4635      	mov	r5, r6
    dd4e:	e012      	b.n	dd76 <ready_thread+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    dd50:	4d19      	ldr	r5, [pc, #100]	; (ddb8 <ready_thread+0x9c>)
    dd52:	23ba      	movs	r3, #186	; 0xba
    dd54:	462a      	mov	r2, r5
    dd56:	4919      	ldr	r1, [pc, #100]	; (ddbc <ready_thread+0xa0>)
    dd58:	4819      	ldr	r0, [pc, #100]	; (ddc0 <ready_thread+0xa4>)
    dd5a:	f002 fced 	bl	10738 <assert_print>
    dd5e:	21ba      	movs	r1, #186	; 0xba
    dd60:	4628      	mov	r0, r5
    dd62:	f002 fce2 	bl	1072a <assert_post_action>
    dd66:	e7ec      	b.n	dd42 <ready_thread+0x26>
	sys_dnode_t *const prev = successor->prev;
    dd68:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    dd6a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    dd6c:	6025      	str	r5, [r4, #0]
	prev->next = node;
    dd6e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    dd70:	606c      	str	r4, [r5, #4]
}
    dd72:	e017      	b.n	dda4 <ready_thread+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd74:	4635      	mov	r5, r6
    dd76:	b16d      	cbz	r5, dd94 <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dd78:	4629      	mov	r1, r5
    dd7a:	4620      	mov	r0, r4
    dd7c:	f005 fb85 	bl	1348a <z_sched_prio_cmp>
    dd80:	2800      	cmp	r0, #0
    dd82:	dcf1      	bgt.n	dd68 <ready_thread+0x4c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dd84:	2d00      	cmp	r5, #0
    dd86:	d0f6      	beq.n	dd76 <ready_thread+0x5a>
	return (node == list->tail) ? NULL : node->next;
    dd88:	4b0a      	ldr	r3, [pc, #40]	; (ddb4 <ready_thread+0x98>)
    dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dd8c:	429d      	cmp	r5, r3
    dd8e:	d0f1      	beq.n	dd74 <ready_thread+0x58>
    dd90:	682d      	ldr	r5, [r5, #0]
    dd92:	e7f0      	b.n	dd76 <ready_thread+0x5a>
	sys_dnode_t *const tail = list->tail;
    dd94:	4b07      	ldr	r3, [pc, #28]	; (ddb4 <ready_thread+0x98>)
    dd96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    dd98:	f103 0120 	add.w	r1, r3, #32
    dd9c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    dd9e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    dda0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    dda2:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    dda4:	2000      	movs	r0, #0
    dda6:	f7ff fe7b 	bl	daa0 <update_cache>
}
    ddaa:	e7c3      	b.n	dd34 <ready_thread+0x18>
    ddac:	4770      	bx	lr
    ddae:	bf00      	nop
    ddb0:	20001798 	.word	0x20001798
    ddb4:	20002734 	.word	0x20002734
    ddb8:	00016960 	.word	0x00016960
    ddbc:	000169fc 	.word	0x000169fc
    ddc0:	00013d44 	.word	0x00013d44

0000ddc4 <z_ready_thread>:
{
    ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddc6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    ddc8:	2400      	movs	r4, #0
	__asm__ volatile(
    ddca:	f04f 0320 	mov.w	r3, #32
    ddce:	f3ef 8711 	mrs	r7, BASEPRI
    ddd2:	f383 8812 	msr	BASEPRI_MAX, r3
    ddd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ddda:	481f      	ldr	r0, [pc, #124]	; (de58 <z_ready_thread+0x94>)
    dddc:	f7fe fc92 	bl	c704 <z_spin_lock_valid>
    dde0:	b118      	cbz	r0, ddea <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    dde2:	481d      	ldr	r0, [pc, #116]	; (de58 <z_ready_thread+0x94>)
    dde4:	f7fe fcae 	bl	c744 <z_spin_lock_set_owner>
	return k;
    dde8:	e018      	b.n	de1c <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ddea:	4e1c      	ldr	r6, [pc, #112]	; (de5c <z_ready_thread+0x98>)
    ddec:	238e      	movs	r3, #142	; 0x8e
    ddee:	4632      	mov	r2, r6
    ddf0:	491b      	ldr	r1, [pc, #108]	; (de60 <z_ready_thread+0x9c>)
    ddf2:	481c      	ldr	r0, [pc, #112]	; (de64 <z_ready_thread+0xa0>)
    ddf4:	f002 fca0 	bl	10738 <assert_print>
    ddf8:	4917      	ldr	r1, [pc, #92]	; (de58 <z_ready_thread+0x94>)
    ddfa:	481b      	ldr	r0, [pc, #108]	; (de68 <z_ready_thread+0xa4>)
    ddfc:	f002 fc9c 	bl	10738 <assert_print>
    de00:	218e      	movs	r1, #142	; 0x8e
    de02:	4630      	mov	r0, r6
    de04:	f002 fc91 	bl	1072a <assert_post_action>
    de08:	e7eb      	b.n	dde2 <z_ready_thread+0x1e>
			ready_thread(thread);
    de0a:	4628      	mov	r0, r5
    de0c:	f7ff ff86 	bl	dd1c <ready_thread>
    de10:	e00a      	b.n	de28 <z_ready_thread+0x64>
	__asm__ volatile(
    de12:	f384 8811 	msr	BASEPRI, r4
    de16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    de1a:	2401      	movs	r4, #1
    de1c:	b9d4      	cbnz	r4, de54 <z_ready_thread+0x90>
		if (!thread_active_elsewhere(thread)) {
    de1e:	4628      	mov	r0, r5
    de20:	f005 fb31 	bl	13486 <thread_active_elsewhere>
    de24:	2800      	cmp	r0, #0
    de26:	d0f0      	beq.n	de0a <z_ready_thread+0x46>
	LOCKED(&sched_spinlock) {
    de28:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de2a:	480b      	ldr	r0, [pc, #44]	; (de58 <z_ready_thread+0x94>)
    de2c:	f7fe fc7a 	bl	c724 <z_spin_unlock_valid>
    de30:	2800      	cmp	r0, #0
    de32:	d1ee      	bne.n	de12 <z_ready_thread+0x4e>
    de34:	4e09      	ldr	r6, [pc, #36]	; (de5c <z_ready_thread+0x98>)
    de36:	23b9      	movs	r3, #185	; 0xb9
    de38:	4632      	mov	r2, r6
    de3a:	490c      	ldr	r1, [pc, #48]	; (de6c <z_ready_thread+0xa8>)
    de3c:	4809      	ldr	r0, [pc, #36]	; (de64 <z_ready_thread+0xa0>)
    de3e:	f002 fc7b 	bl	10738 <assert_print>
    de42:	4905      	ldr	r1, [pc, #20]	; (de58 <z_ready_thread+0x94>)
    de44:	480a      	ldr	r0, [pc, #40]	; (de70 <z_ready_thread+0xac>)
    de46:	f002 fc77 	bl	10738 <assert_print>
    de4a:	21b9      	movs	r1, #185	; 0xb9
    de4c:	4630      	mov	r0, r6
    de4e:	f002 fc6c 	bl	1072a <assert_post_action>
    de52:	e7de      	b.n	de12 <z_ready_thread+0x4e>
}
    de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de56:	bf00      	nop
    de58:	20002784 	.word	0x20002784
    de5c:	00013f4c 	.word	0x00013f4c
    de60:	00013fac 	.word	0x00013fac
    de64:	00013d44 	.word	0x00013d44
    de68:	00013fc4 	.word	0x00013fc4
    de6c:	00013f7c 	.word	0x00013f7c
    de70:	00013f94 	.word	0x00013f94

0000de74 <z_sched_start>:
{
    de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de76:	4604      	mov	r4, r0
	__asm__ volatile(
    de78:	f04f 0320 	mov.w	r3, #32
    de7c:	f3ef 8511 	mrs	r5, BASEPRI
    de80:	f383 8812 	msr	BASEPRI_MAX, r3
    de84:	f3bf 8f6f 	isb	sy
    de88:	462e      	mov	r6, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    de8a:	481f      	ldr	r0, [pc, #124]	; (df08 <z_sched_start+0x94>)
    de8c:	f7fe fc3a 	bl	c704 <z_spin_lock_valid>
    de90:	b188      	cbz	r0, deb6 <z_sched_start+0x42>
	z_spin_lock_set_owner(l);
    de92:	481d      	ldr	r0, [pc, #116]	; (df08 <z_sched_start+0x94>)
    de94:	f7fe fc56 	bl	c744 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    de98:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    de9a:	f013 0f04 	tst.w	r3, #4
    de9e:	d01a      	beq.n	ded6 <z_sched_start+0x62>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    dea0:	f023 0304 	bic.w	r3, r3, #4
    dea4:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    dea6:	4620      	mov	r0, r4
    dea8:	f7ff ff38 	bl	dd1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    deac:	4629      	mov	r1, r5
    deae:	4816      	ldr	r0, [pc, #88]	; (df08 <z_sched_start+0x94>)
    deb0:	f7ff fd3a 	bl	d928 <z_reschedule>
}
    deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    deb6:	4f15      	ldr	r7, [pc, #84]	; (df0c <z_sched_start+0x98>)
    deb8:	238e      	movs	r3, #142	; 0x8e
    deba:	463a      	mov	r2, r7
    debc:	4914      	ldr	r1, [pc, #80]	; (df10 <z_sched_start+0x9c>)
    debe:	4815      	ldr	r0, [pc, #84]	; (df14 <z_sched_start+0xa0>)
    dec0:	f002 fc3a 	bl	10738 <assert_print>
    dec4:	4910      	ldr	r1, [pc, #64]	; (df08 <z_sched_start+0x94>)
    dec6:	4814      	ldr	r0, [pc, #80]	; (df18 <z_sched_start+0xa4>)
    dec8:	f002 fc36 	bl	10738 <assert_print>
    decc:	218e      	movs	r1, #142	; 0x8e
    dece:	4638      	mov	r0, r7
    ded0:	f002 fc2b 	bl	1072a <assert_post_action>
    ded4:	e7dd      	b.n	de92 <z_sched_start+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ded6:	480c      	ldr	r0, [pc, #48]	; (df08 <z_sched_start+0x94>)
    ded8:	f7fe fc24 	bl	c724 <z_spin_unlock_valid>
    dedc:	b120      	cbz	r0, dee8 <z_sched_start+0x74>
	__asm__ volatile(
    dede:	f386 8811 	msr	BASEPRI, r6
    dee2:	f3bf 8f6f 	isb	sy
		return;
    dee6:	e7e5      	b.n	deb4 <z_sched_start+0x40>
    dee8:	4c08      	ldr	r4, [pc, #32]	; (df0c <z_sched_start+0x98>)
    deea:	23b9      	movs	r3, #185	; 0xb9
    deec:	4622      	mov	r2, r4
    deee:	490b      	ldr	r1, [pc, #44]	; (df1c <z_sched_start+0xa8>)
    def0:	4808      	ldr	r0, [pc, #32]	; (df14 <z_sched_start+0xa0>)
    def2:	f002 fc21 	bl	10738 <assert_print>
    def6:	4904      	ldr	r1, [pc, #16]	; (df08 <z_sched_start+0x94>)
    def8:	4809      	ldr	r0, [pc, #36]	; (df20 <z_sched_start+0xac>)
    defa:	f002 fc1d 	bl	10738 <assert_print>
    defe:	21b9      	movs	r1, #185	; 0xb9
    df00:	4620      	mov	r0, r4
    df02:	f002 fc12 	bl	1072a <assert_post_action>
    df06:	e7ea      	b.n	dede <z_sched_start+0x6a>
    df08:	20002784 	.word	0x20002784
    df0c:	00013f4c 	.word	0x00013f4c
    df10:	00013fac 	.word	0x00013fac
    df14:	00013d44 	.word	0x00013d44
    df18:	00013fc4 	.word	0x00013fc4
    df1c:	00013f7c 	.word	0x00013f7c
    df20:	00013f94 	.word	0x00013f94

0000df24 <z_thread_timeout>:
{
    df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df28:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    df2a:	f1a0 0718 	sub.w	r7, r0, #24
	LOCKED(&sched_spinlock) {
    df2e:	2500      	movs	r5, #0
	__asm__ volatile(
    df30:	f04f 0320 	mov.w	r3, #32
    df34:	f3ef 8611 	mrs	r6, BASEPRI
    df38:	f383 8812 	msr	BASEPRI_MAX, r3
    df3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df40:	4828      	ldr	r0, [pc, #160]	; (dfe4 <z_thread_timeout+0xc0>)
    df42:	f7fe fbdf 	bl	c704 <z_spin_lock_valid>
    df46:	b118      	cbz	r0, df50 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    df48:	4826      	ldr	r0, [pc, #152]	; (dfe4 <z_thread_timeout+0xc0>)
    df4a:	f7fe fbfb 	bl	c744 <z_spin_lock_set_owner>
	return k;
    df4e:	e027      	b.n	dfa0 <z_thread_timeout+0x7c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df50:	f8df 8094 	ldr.w	r8, [pc, #148]	; dfe8 <z_thread_timeout+0xc4>
    df54:	238e      	movs	r3, #142	; 0x8e
    df56:	4642      	mov	r2, r8
    df58:	4924      	ldr	r1, [pc, #144]	; (dfec <z_thread_timeout+0xc8>)
    df5a:	4825      	ldr	r0, [pc, #148]	; (dff0 <z_thread_timeout+0xcc>)
    df5c:	f002 fbec 	bl	10738 <assert_print>
    df60:	4920      	ldr	r1, [pc, #128]	; (dfe4 <z_thread_timeout+0xc0>)
    df62:	4824      	ldr	r0, [pc, #144]	; (dff4 <z_thread_timeout+0xd0>)
    df64:	f002 fbe8 	bl	10738 <assert_print>
    df68:	218e      	movs	r1, #142	; 0x8e
    df6a:	4640      	mov	r0, r8
    df6c:	f002 fbdd 	bl	1072a <assert_post_action>
    df70:	e7ea      	b.n	df48 <z_thread_timeout+0x24>
    df72:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    df76:	f023 0204 	bic.w	r2, r3, #4
    df7a:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    df7e:	f023 0314 	bic.w	r3, r3, #20
    df82:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    df86:	4638      	mov	r0, r7
    df88:	f7ff fec8 	bl	dd1c <ready_thread>
	LOCKED(&sched_spinlock) {
    df8c:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df8e:	4815      	ldr	r0, [pc, #84]	; (dfe4 <z_thread_timeout+0xc0>)
    df90:	f7fe fbc8 	bl	c724 <z_spin_unlock_valid>
    df94:	b190      	cbz	r0, dfbc <z_thread_timeout+0x98>
	__asm__ volatile(
    df96:	f385 8811 	msr	BASEPRI, r5
    df9a:	f3bf 8f6f 	isb	sy
    df9e:	2501      	movs	r5, #1
    dfa0:	b9ed      	cbnz	r5, dfde <z_thread_timeout+0xba>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    dfa2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    dfa6:	f013 0f28 	tst.w	r3, #40	; 0x28
    dfaa:	d1ef      	bne.n	df8c <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    dfac:	f854 3c10 	ldr.w	r3, [r4, #-16]
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d0de      	beq.n	df72 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    dfb4:	4638      	mov	r0, r7
    dfb6:	f005 fa8c 	bl	134d2 <unpend_thread_no_timeout>
    dfba:	e7da      	b.n	df72 <z_thread_timeout+0x4e>
    dfbc:	f8df 8028 	ldr.w	r8, [pc, #40]	; dfe8 <z_thread_timeout+0xc4>
    dfc0:	23b9      	movs	r3, #185	; 0xb9
    dfc2:	4642      	mov	r2, r8
    dfc4:	490c      	ldr	r1, [pc, #48]	; (dff8 <z_thread_timeout+0xd4>)
    dfc6:	480a      	ldr	r0, [pc, #40]	; (dff0 <z_thread_timeout+0xcc>)
    dfc8:	f002 fbb6 	bl	10738 <assert_print>
    dfcc:	4905      	ldr	r1, [pc, #20]	; (dfe4 <z_thread_timeout+0xc0>)
    dfce:	480b      	ldr	r0, [pc, #44]	; (dffc <z_thread_timeout+0xd8>)
    dfd0:	f002 fbb2 	bl	10738 <assert_print>
    dfd4:	21b9      	movs	r1, #185	; 0xb9
    dfd6:	4640      	mov	r0, r8
    dfd8:	f002 fba7 	bl	1072a <assert_post_action>
    dfdc:	e7db      	b.n	df96 <z_thread_timeout+0x72>
}
    dfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfe2:	bf00      	nop
    dfe4:	20002784 	.word	0x20002784
    dfe8:	00013f4c 	.word	0x00013f4c
    dfec:	00013fac 	.word	0x00013fac
    dff0:	00013d44 	.word	0x00013d44
    dff4:	00013fc4 	.word	0x00013fc4
    dff8:	00013f7c 	.word	0x00013f7c
    dffc:	00013f94 	.word	0x00013f94

0000e000 <unready_thread>:
{
    e000:	b510      	push	{r4, lr}
    e002:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    e004:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    e006:	f990 300d 	ldrsb.w	r3, [r0, #13]
    e00a:	2b00      	cmp	r3, #0
    e00c:	db08      	blt.n	e020 <unready_thread+0x20>
	update_cache(thread == _current);
    e00e:	4b08      	ldr	r3, [pc, #32]	; (e030 <unready_thread+0x30>)
    e010:	6898      	ldr	r0, [r3, #8]
    e012:	42a0      	cmp	r0, r4
    e014:	bf14      	ite	ne
    e016:	2000      	movne	r0, #0
    e018:	2001      	moveq	r0, #1
    e01a:	f7ff fd41 	bl	daa0 <update_cache>
}
    e01e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e024:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    e026:	4601      	mov	r1, r0
    e028:	4802      	ldr	r0, [pc, #8]	; (e034 <unready_thread+0x34>)
    e02a:	f7ff fd15 	bl	da58 <z_priq_dumb_remove>
}
    e02e:	e7ee      	b.n	e00e <unready_thread+0xe>
    e030:	20002734 	.word	0x20002734
    e034:	20002754 	.word	0x20002754

0000e038 <add_to_waitq_locked>:
{
    e038:	b570      	push	{r4, r5, r6, lr}
    e03a:	4605      	mov	r5, r0
    e03c:	460e      	mov	r6, r1
	unready_thread(thread);
    e03e:	f7ff ffdf 	bl	e000 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e042:	7b6b      	ldrb	r3, [r5, #13]
    e044:	f043 0302 	orr.w	r3, r3, #2
    e048:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    e04a:	2e00      	cmp	r6, #0
    e04c:	d02e      	beq.n	e0ac <add_to_waitq_locked+0x74>
		thread->base.pended_on = wait_q;
    e04e:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e050:	4b17      	ldr	r3, [pc, #92]	; (e0b0 <add_to_waitq_locked+0x78>)
    e052:	429d      	cmp	r5, r3
    e054:	d004      	beq.n	e060 <add_to_waitq_locked+0x28>
	return list->head == list;
    e056:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e058:	42a6      	cmp	r6, r4
    e05a:	d114      	bne.n	e086 <add_to_waitq_locked+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e05c:	2400      	movs	r4, #0
    e05e:	e012      	b.n	e086 <add_to_waitq_locked+0x4e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e060:	4c14      	ldr	r4, [pc, #80]	; (e0b4 <add_to_waitq_locked+0x7c>)
    e062:	23ba      	movs	r3, #186	; 0xba
    e064:	4622      	mov	r2, r4
    e066:	4914      	ldr	r1, [pc, #80]	; (e0b8 <add_to_waitq_locked+0x80>)
    e068:	4814      	ldr	r0, [pc, #80]	; (e0bc <add_to_waitq_locked+0x84>)
    e06a:	f002 fb65 	bl	10738 <assert_print>
    e06e:	21ba      	movs	r1, #186	; 0xba
    e070:	4620      	mov	r0, r4
    e072:	f002 fb5a 	bl	1072a <assert_post_action>
    e076:	e7ee      	b.n	e056 <add_to_waitq_locked+0x1e>
	sys_dnode_t *const prev = successor->prev;
    e078:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e07a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e07c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e07e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e080:	6065      	str	r5, [r4, #4]
}
    e082:	e013      	b.n	e0ac <add_to_waitq_locked+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e084:	2400      	movs	r4, #0
    e086:	b164      	cbz	r4, e0a2 <add_to_waitq_locked+0x6a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e088:	4621      	mov	r1, r4
    e08a:	4628      	mov	r0, r5
    e08c:	f005 f9fd 	bl	1348a <z_sched_prio_cmp>
    e090:	2800      	cmp	r0, #0
    e092:	dcf1      	bgt.n	e078 <add_to_waitq_locked+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e094:	2c00      	cmp	r4, #0
    e096:	d0f6      	beq.n	e086 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e098:	6873      	ldr	r3, [r6, #4]
    e09a:	429c      	cmp	r4, r3
    e09c:	d0f2      	beq.n	e084 <add_to_waitq_locked+0x4c>
    e09e:	6824      	ldr	r4, [r4, #0]
    e0a0:	e7f1      	b.n	e086 <add_to_waitq_locked+0x4e>
	sys_dnode_t *const tail = list->tail;
    e0a2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    e0a4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    e0a6:	606b      	str	r3, [r5, #4]
	tail->next = node;
    e0a8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e0aa:	6075      	str	r5, [r6, #4]
}
    e0ac:	bd70      	pop	{r4, r5, r6, pc}
    e0ae:	bf00      	nop
    e0b0:	20001798 	.word	0x20001798
    e0b4:	00016960 	.word	0x00016960
    e0b8:	000169fc 	.word	0x000169fc
    e0bc:	00013d44 	.word	0x00013d44

0000e0c0 <pend>:
{
    e0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0c4:	4605      	mov	r5, r0
    e0c6:	460e      	mov	r6, r1
    e0c8:	4691      	mov	r9, r2
    e0ca:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    e0cc:	2400      	movs	r4, #0
	__asm__ volatile(
    e0ce:	f04f 0320 	mov.w	r3, #32
    e0d2:	f3ef 8711 	mrs	r7, BASEPRI
    e0d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e0da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e0de:	4820      	ldr	r0, [pc, #128]	; (e160 <pend+0xa0>)
    e0e0:	f7fe fb10 	bl	c704 <z_spin_lock_valid>
    e0e4:	b118      	cbz	r0, e0ee <pend+0x2e>
	z_spin_lock_set_owner(l);
    e0e6:	481e      	ldr	r0, [pc, #120]	; (e160 <pend+0xa0>)
    e0e8:	f7fe fb2c 	bl	c744 <z_spin_lock_set_owner>
	return k;
    e0ec:	e015      	b.n	e11a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e0ee:	f8df a074 	ldr.w	sl, [pc, #116]	; e164 <pend+0xa4>
    e0f2:	238e      	movs	r3, #142	; 0x8e
    e0f4:	4652      	mov	r2, sl
    e0f6:	491c      	ldr	r1, [pc, #112]	; (e168 <pend+0xa8>)
    e0f8:	481c      	ldr	r0, [pc, #112]	; (e16c <pend+0xac>)
    e0fa:	f002 fb1d 	bl	10738 <assert_print>
    e0fe:	4918      	ldr	r1, [pc, #96]	; (e160 <pend+0xa0>)
    e100:	481b      	ldr	r0, [pc, #108]	; (e170 <pend+0xb0>)
    e102:	f002 fb19 	bl	10738 <assert_print>
    e106:	218e      	movs	r1, #142	; 0x8e
    e108:	4650      	mov	r0, sl
    e10a:	f002 fb0e 	bl	1072a <assert_post_action>
    e10e:	e7ea      	b.n	e0e6 <pend+0x26>
	__asm__ volatile(
    e110:	f384 8811 	msr	BASEPRI, r4
    e114:	f3bf 8f6f 	isb	sy
    e118:	2401      	movs	r4, #1
    e11a:	b9d4      	cbnz	r4, e152 <pend+0x92>
		add_to_waitq_locked(thread, wait_q);
    e11c:	4631      	mov	r1, r6
    e11e:	4628      	mov	r0, r5
    e120:	f7ff ff8a 	bl	e038 <add_to_waitq_locked>
	LOCKED(&sched_spinlock) {
    e124:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e126:	480e      	ldr	r0, [pc, #56]	; (e160 <pend+0xa0>)
    e128:	f7fe fafc 	bl	c724 <z_spin_unlock_valid>
    e12c:	2800      	cmp	r0, #0
    e12e:	d1ef      	bne.n	e110 <pend+0x50>
    e130:	f8df a030 	ldr.w	sl, [pc, #48]	; e164 <pend+0xa4>
    e134:	23b9      	movs	r3, #185	; 0xb9
    e136:	4652      	mov	r2, sl
    e138:	490e      	ldr	r1, [pc, #56]	; (e174 <pend+0xb4>)
    e13a:	480c      	ldr	r0, [pc, #48]	; (e16c <pend+0xac>)
    e13c:	f002 fafc 	bl	10738 <assert_print>
    e140:	4907      	ldr	r1, [pc, #28]	; (e160 <pend+0xa0>)
    e142:	480d      	ldr	r0, [pc, #52]	; (e178 <pend+0xb8>)
    e144:	f002 faf8 	bl	10738 <assert_print>
    e148:	21b9      	movs	r1, #185	; 0xb9
    e14a:	4650      	mov	r0, sl
    e14c:	f002 faed 	bl	1072a <assert_post_action>
    e150:	e7de      	b.n	e110 <pend+0x50>
	add_thread_timeout(thread, timeout);
    e152:	464a      	mov	r2, r9
    e154:	4643      	mov	r3, r8
    e156:	4628      	mov	r0, r5
    e158:	f7ff faf8 	bl	d74c <add_thread_timeout>
}
    e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e160:	20002784 	.word	0x20002784
    e164:	00013f4c 	.word	0x00013f4c
    e168:	00013fac 	.word	0x00013fac
    e16c:	00013d44 	.word	0x00013d44
    e170:	00013fc4 	.word	0x00013fc4
    e174:	00013f7c 	.word	0x00013f7c
    e178:	00013f94 	.word	0x00013f94

0000e17c <z_pend_curr>:
{
    e17c:	b570      	push	{r4, r5, r6, lr}
    e17e:	4604      	mov	r4, r0
    e180:	460d      	mov	r5, r1
    e182:	4611      	mov	r1, r2
	pending_current = _current;
    e184:	4b0f      	ldr	r3, [pc, #60]	; (e1c4 <z_pend_curr+0x48>)
    e186:	6898      	ldr	r0, [r3, #8]
    e188:	4b0f      	ldr	r3, [pc, #60]	; (e1c8 <z_pend_curr+0x4c>)
    e18a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    e18c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e190:	f7ff ff96 	bl	e0c0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e194:	4620      	mov	r0, r4
    e196:	f7fe fac5 	bl	c724 <z_spin_unlock_valid>
    e19a:	b118      	cbz	r0, e1a4 <z_pend_curr+0x28>
    e19c:	4628      	mov	r0, r5
    e19e:	f7f6 fe29 	bl	4df4 <arch_swap>
}
    e1a2:	bd70      	pop	{r4, r5, r6, pc}
    e1a4:	4e09      	ldr	r6, [pc, #36]	; (e1cc <z_pend_curr+0x50>)
    e1a6:	23d0      	movs	r3, #208	; 0xd0
    e1a8:	4632      	mov	r2, r6
    e1aa:	4909      	ldr	r1, [pc, #36]	; (e1d0 <z_pend_curr+0x54>)
    e1ac:	4809      	ldr	r0, [pc, #36]	; (e1d4 <z_pend_curr+0x58>)
    e1ae:	f002 fac3 	bl	10738 <assert_print>
    e1b2:	4621      	mov	r1, r4
    e1b4:	4808      	ldr	r0, [pc, #32]	; (e1d8 <z_pend_curr+0x5c>)
    e1b6:	f002 fabf 	bl	10738 <assert_print>
    e1ba:	21d0      	movs	r1, #208	; 0xd0
    e1bc:	4630      	mov	r0, r6
    e1be:	f002 fab4 	bl	1072a <assert_post_action>
    e1c2:	e7eb      	b.n	e19c <z_pend_curr+0x20>
    e1c4:	20002734 	.word	0x20002734
    e1c8:	20002778 	.word	0x20002778
    e1cc:	00013f4c 	.word	0x00013f4c
    e1d0:	00013f7c 	.word	0x00013f7c
    e1d4:	00013d44 	.word	0x00013d44
    e1d8:	00013f94 	.word	0x00013f94

0000e1dc <z_set_prio>:
{
    e1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e1e0:	4605      	mov	r5, r0
    e1e2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    e1e4:	2400      	movs	r4, #0
	__asm__ volatile(
    e1e6:	f04f 0320 	mov.w	r3, #32
    e1ea:	f3ef 8711 	mrs	r7, BASEPRI
    e1ee:	f383 8812 	msr	BASEPRI_MAX, r3
    e1f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e1f6:	4846      	ldr	r0, [pc, #280]	; (e310 <z_set_prio+0x134>)
    e1f8:	f7fe fa84 	bl	c704 <z_spin_lock_valid>
    e1fc:	b128      	cbz	r0, e20a <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
    e1fe:	4844      	ldr	r0, [pc, #272]	; (e310 <z_set_prio+0x134>)
    e200:	f7fe faa0 	bl	c744 <z_spin_lock_set_owner>
	bool need_sched = 0;
    e204:	f04f 0800 	mov.w	r8, #0
	return k;
    e208:	e04d      	b.n	e2a6 <z_set_prio+0xca>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e20a:	f8df 8108 	ldr.w	r8, [pc, #264]	; e314 <z_set_prio+0x138>
    e20e:	238e      	movs	r3, #142	; 0x8e
    e210:	4642      	mov	r2, r8
    e212:	4941      	ldr	r1, [pc, #260]	; (e318 <z_set_prio+0x13c>)
    e214:	4841      	ldr	r0, [pc, #260]	; (e31c <z_set_prio+0x140>)
    e216:	f002 fa8f 	bl	10738 <assert_print>
    e21a:	493d      	ldr	r1, [pc, #244]	; (e310 <z_set_prio+0x134>)
    e21c:	4840      	ldr	r0, [pc, #256]	; (e320 <z_set_prio+0x144>)
    e21e:	f002 fa8b 	bl	10738 <assert_print>
    e222:	218e      	movs	r1, #142	; 0x8e
    e224:	4640      	mov	r0, r8
    e226:	f002 fa80 	bl	1072a <assert_post_action>
    e22a:	e7e8      	b.n	e1fe <z_set_prio+0x22>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e22c:	4c3d      	ldr	r4, [pc, #244]	; (e324 <z_set_prio+0x148>)
    e22e:	23ba      	movs	r3, #186	; 0xba
    e230:	4622      	mov	r2, r4
    e232:	493d      	ldr	r1, [pc, #244]	; (e328 <z_set_prio+0x14c>)
    e234:	4839      	ldr	r0, [pc, #228]	; (e31c <z_set_prio+0x140>)
    e236:	f002 fa7f 	bl	10738 <assert_print>
    e23a:	21ba      	movs	r1, #186	; 0xba
    e23c:	4620      	mov	r0, r4
    e23e:	f002 fa74 	bl	1072a <assert_post_action>
    e242:	e049      	b.n	e2d8 <z_set_prio+0xfc>
	sys_dnode_t *const prev = successor->prev;
    e244:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e246:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e248:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e24a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e24c:	6065      	str	r5, [r4, #4]
}
    e24e:	e017      	b.n	e280 <z_set_prio+0xa4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e250:	4644      	mov	r4, r8
    e252:	b16c      	cbz	r4, e270 <z_set_prio+0x94>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e254:	4621      	mov	r1, r4
    e256:	4628      	mov	r0, r5
    e258:	f005 f917 	bl	1348a <z_sched_prio_cmp>
    e25c:	2800      	cmp	r0, #0
    e25e:	dcf1      	bgt.n	e244 <z_set_prio+0x68>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e260:	2c00      	cmp	r4, #0
    e262:	d0f6      	beq.n	e252 <z_set_prio+0x76>
	return (node == list->tail) ? NULL : node->next;
    e264:	4b31      	ldr	r3, [pc, #196]	; (e32c <z_set_prio+0x150>)
    e266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e268:	429c      	cmp	r4, r3
    e26a:	d0f1      	beq.n	e250 <z_set_prio+0x74>
    e26c:	6824      	ldr	r4, [r4, #0]
    e26e:	e7f0      	b.n	e252 <z_set_prio+0x76>
	sys_dnode_t *const tail = list->tail;
    e270:	4b2e      	ldr	r3, [pc, #184]	; (e32c <z_set_prio+0x150>)
    e272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e274:	f103 0120 	add.w	r1, r3, #32
    e278:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    e27a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    e27c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e27e:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    e280:	2001      	movs	r0, #1
    e282:	f7ff fc0d 	bl	daa0 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e286:	f04f 0801 	mov.w	r8, #1
    e28a:	e002      	b.n	e292 <z_set_prio+0xb6>
			thread->base.prio = prio;
    e28c:	73ae      	strb	r6, [r5, #14]
    e28e:	f04f 0800 	mov.w	r8, #0
	LOCKED(&sched_spinlock) {
    e292:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e294:	481e      	ldr	r0, [pc, #120]	; (e310 <z_set_prio+0x134>)
    e296:	f7fe fa45 	bl	c724 <z_spin_unlock_valid>
    e29a:	b320      	cbz	r0, e2e6 <z_set_prio+0x10a>
	__asm__ volatile(
    e29c:	f384 8811 	msr	BASEPRI, r4
    e2a0:	f3bf 8f6f 	isb	sy
    e2a4:	2401      	movs	r4, #1
    e2a6:	bb7c      	cbnz	r4, e308 <z_set_prio+0x12c>
	uint8_t state = thread->base.thread_state;
    e2a8:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e2aa:	f013 0f1f 	tst.w	r3, #31
    e2ae:	d1ed      	bne.n	e28c <z_set_prio+0xb0>
	return node->next != NULL;
    e2b0:	f8d5 8018 	ldr.w	r8, [r5, #24]
    e2b4:	f1b8 0f00 	cmp.w	r8, #0
    e2b8:	d1e8      	bne.n	e28c <z_set_prio+0xb0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e2be:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    e2c0:	4629      	mov	r1, r5
    e2c2:	481b      	ldr	r0, [pc, #108]	; (e330 <z_set_prio+0x154>)
    e2c4:	f7ff fbc8 	bl	da58 <z_priq_dumb_remove>
				thread->base.prio = prio;
    e2c8:	73ae      	strb	r6, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    e2ca:	7b6b      	ldrb	r3, [r5, #13]
    e2cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e2d0:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e2d2:	4b18      	ldr	r3, [pc, #96]	; (e334 <z_set_prio+0x158>)
    e2d4:	429d      	cmp	r5, r3
    e2d6:	d0a9      	beq.n	e22c <z_set_prio+0x50>
	return list->head == list;
    e2d8:	4b14      	ldr	r3, [pc, #80]	; (e32c <z_set_prio+0x150>)
    e2da:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e2de:	429c      	cmp	r4, r3
    e2e0:	d1b7      	bne.n	e252 <z_set_prio+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e2e2:	4644      	mov	r4, r8
    e2e4:	e7b5      	b.n	e252 <z_set_prio+0x76>
    e2e6:	f8df 902c 	ldr.w	r9, [pc, #44]	; e314 <z_set_prio+0x138>
    e2ea:	23b9      	movs	r3, #185	; 0xb9
    e2ec:	464a      	mov	r2, r9
    e2ee:	4912      	ldr	r1, [pc, #72]	; (e338 <z_set_prio+0x15c>)
    e2f0:	480a      	ldr	r0, [pc, #40]	; (e31c <z_set_prio+0x140>)
    e2f2:	f002 fa21 	bl	10738 <assert_print>
    e2f6:	4906      	ldr	r1, [pc, #24]	; (e310 <z_set_prio+0x134>)
    e2f8:	4810      	ldr	r0, [pc, #64]	; (e33c <z_set_prio+0x160>)
    e2fa:	f002 fa1d 	bl	10738 <assert_print>
    e2fe:	21b9      	movs	r1, #185	; 0xb9
    e300:	4648      	mov	r0, r9
    e302:	f002 fa12 	bl	1072a <assert_post_action>
    e306:	e7c9      	b.n	e29c <z_set_prio+0xc0>
}
    e308:	4640      	mov	r0, r8
    e30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e30e:	bf00      	nop
    e310:	20002784 	.word	0x20002784
    e314:	00013f4c 	.word	0x00013f4c
    e318:	00013fac 	.word	0x00013fac
    e31c:	00013d44 	.word	0x00013d44
    e320:	00013fc4 	.word	0x00013fc4
    e324:	00016960 	.word	0x00016960
    e328:	000169fc 	.word	0x000169fc
    e32c:	20002734 	.word	0x20002734
    e330:	20002754 	.word	0x20002754
    e334:	20001798 	.word	0x20001798
    e338:	00013f7c 	.word	0x00013f7c
    e33c:	00013f94 	.word	0x00013f94

0000e340 <z_impl_k_thread_suspend>:
{
    e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e342:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e344:	3018      	adds	r0, #24
    e346:	f000 fe49 	bl	efdc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    e34a:	2500      	movs	r5, #0
	__asm__ volatile(
    e34c:	f04f 0320 	mov.w	r3, #32
    e350:	f3ef 8611 	mrs	r6, BASEPRI
    e354:	f383 8812 	msr	BASEPRI_MAX, r3
    e358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e35c:	482a      	ldr	r0, [pc, #168]	; (e408 <z_impl_k_thread_suspend+0xc8>)
    e35e:	f7fe f9d1 	bl	c704 <z_spin_lock_valid>
    e362:	b118      	cbz	r0, e36c <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    e364:	4828      	ldr	r0, [pc, #160]	; (e408 <z_impl_k_thread_suspend+0xc8>)
    e366:	f7fe f9ed 	bl	c744 <z_spin_lock_set_owner>
	return k;
    e36a:	e01c      	b.n	e3a6 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e36c:	4f27      	ldr	r7, [pc, #156]	; (e40c <z_impl_k_thread_suspend+0xcc>)
    e36e:	238e      	movs	r3, #142	; 0x8e
    e370:	463a      	mov	r2, r7
    e372:	4927      	ldr	r1, [pc, #156]	; (e410 <z_impl_k_thread_suspend+0xd0>)
    e374:	4827      	ldr	r0, [pc, #156]	; (e414 <z_impl_k_thread_suspend+0xd4>)
    e376:	f002 f9df 	bl	10738 <assert_print>
    e37a:	4923      	ldr	r1, [pc, #140]	; (e408 <z_impl_k_thread_suspend+0xc8>)
    e37c:	4826      	ldr	r0, [pc, #152]	; (e418 <z_impl_k_thread_suspend+0xd8>)
    e37e:	f002 f9db 	bl	10738 <assert_print>
    e382:	218e      	movs	r1, #142	; 0x8e
    e384:	4638      	mov	r0, r7
    e386:	f002 f9d0 	bl	1072a <assert_post_action>
    e38a:	e7eb      	b.n	e364 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e38c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e390:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    e392:	4621      	mov	r1, r4
    e394:	4821      	ldr	r0, [pc, #132]	; (e41c <z_impl_k_thread_suspend+0xdc>)
    e396:	f7ff fb5f 	bl	da58 <z_priq_dumb_remove>
}
    e39a:	e00a      	b.n	e3b2 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    e39c:	f385 8811 	msr	BASEPRI, r5
    e3a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e3a4:	2501      	movs	r5, #1
    e3a6:	bb35      	cbnz	r5, e3f6 <z_impl_k_thread_suspend+0xb6>
	return (thread->base.thread_state & state) != 0U;
    e3a8:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    e3aa:	f994 300d 	ldrsb.w	r3, [r4, #13]
    e3ae:	2b00      	cmp	r3, #0
    e3b0:	dbec      	blt.n	e38c <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e3b2:	7b63      	ldrb	r3, [r4, #13]
    e3b4:	f043 0310 	orr.w	r3, r3, #16
    e3b8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    e3ba:	4b19      	ldr	r3, [pc, #100]	; (e420 <z_impl_k_thread_suspend+0xe0>)
    e3bc:	6898      	ldr	r0, [r3, #8]
    e3be:	42a0      	cmp	r0, r4
    e3c0:	bf14      	ite	ne
    e3c2:	2000      	movne	r0, #0
    e3c4:	2001      	moveq	r0, #1
    e3c6:	f7ff fb6b 	bl	daa0 <update_cache>
	LOCKED(&sched_spinlock) {
    e3ca:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e3cc:	480e      	ldr	r0, [pc, #56]	; (e408 <z_impl_k_thread_suspend+0xc8>)
    e3ce:	f7fe f9a9 	bl	c724 <z_spin_unlock_valid>
    e3d2:	2800      	cmp	r0, #0
    e3d4:	d1e2      	bne.n	e39c <z_impl_k_thread_suspend+0x5c>
    e3d6:	4f0d      	ldr	r7, [pc, #52]	; (e40c <z_impl_k_thread_suspend+0xcc>)
    e3d8:	23b9      	movs	r3, #185	; 0xb9
    e3da:	463a      	mov	r2, r7
    e3dc:	4911      	ldr	r1, [pc, #68]	; (e424 <z_impl_k_thread_suspend+0xe4>)
    e3de:	480d      	ldr	r0, [pc, #52]	; (e414 <z_impl_k_thread_suspend+0xd4>)
    e3e0:	f002 f9aa 	bl	10738 <assert_print>
    e3e4:	4908      	ldr	r1, [pc, #32]	; (e408 <z_impl_k_thread_suspend+0xc8>)
    e3e6:	4810      	ldr	r0, [pc, #64]	; (e428 <z_impl_k_thread_suspend+0xe8>)
    e3e8:	f002 f9a6 	bl	10738 <assert_print>
    e3ec:	21b9      	movs	r1, #185	; 0xb9
    e3ee:	4638      	mov	r0, r7
    e3f0:	f002 f99b 	bl	1072a <assert_post_action>
    e3f4:	e7d2      	b.n	e39c <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    e3f6:	4b0a      	ldr	r3, [pc, #40]	; (e420 <z_impl_k_thread_suspend+0xe0>)
    e3f8:	689b      	ldr	r3, [r3, #8]
    e3fa:	42a3      	cmp	r3, r4
    e3fc:	d000      	beq.n	e400 <z_impl_k_thread_suspend+0xc0>
}
    e3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule_unlocked();
    e400:	f005 f85b 	bl	134ba <z_reschedule_unlocked>
}
    e404:	e7fb      	b.n	e3fe <z_impl_k_thread_suspend+0xbe>
    e406:	bf00      	nop
    e408:	20002784 	.word	0x20002784
    e40c:	00013f4c 	.word	0x00013f4c
    e410:	00013fac 	.word	0x00013fac
    e414:	00013d44 	.word	0x00013d44
    e418:	00013fc4 	.word	0x00013fc4
    e41c:	20002754 	.word	0x20002754
    e420:	20002734 	.word	0x20002734
    e424:	00013f7c 	.word	0x00013f7c
    e428:	00013f94 	.word	0x00013f94

0000e42c <k_sched_unlock>:
{
    e42c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    e42e:	2400      	movs	r4, #0
	__asm__ volatile(
    e430:	f04f 0320 	mov.w	r3, #32
    e434:	f3ef 8511 	mrs	r5, BASEPRI
    e438:	f383 8812 	msr	BASEPRI_MAX, r3
    e43c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e440:	4834      	ldr	r0, [pc, #208]	; (e514 <k_sched_unlock+0xe8>)
    e442:	f7fe f95f 	bl	c704 <z_spin_lock_valid>
    e446:	b118      	cbz	r0, e450 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    e448:	4832      	ldr	r0, [pc, #200]	; (e514 <k_sched_unlock+0xe8>)
    e44a:	f7fe f97b 	bl	c744 <z_spin_lock_set_owner>
	return k;
    e44e:	e036      	b.n	e4be <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e450:	4e31      	ldr	r6, [pc, #196]	; (e518 <k_sched_unlock+0xec>)
    e452:	238e      	movs	r3, #142	; 0x8e
    e454:	4632      	mov	r2, r6
    e456:	4931      	ldr	r1, [pc, #196]	; (e51c <k_sched_unlock+0xf0>)
    e458:	4831      	ldr	r0, [pc, #196]	; (e520 <k_sched_unlock+0xf4>)
    e45a:	f002 f96d 	bl	10738 <assert_print>
    e45e:	492d      	ldr	r1, [pc, #180]	; (e514 <k_sched_unlock+0xe8>)
    e460:	4830      	ldr	r0, [pc, #192]	; (e524 <k_sched_unlock+0xf8>)
    e462:	f002 f969 	bl	10738 <assert_print>
    e466:	218e      	movs	r1, #142	; 0x8e
    e468:	4630      	mov	r0, r6
    e46a:	f002 f95e 	bl	1072a <assert_post_action>
    e46e:	e7eb      	b.n	e448 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    e470:	4c2d      	ldr	r4, [pc, #180]	; (e528 <k_sched_unlock+0xfc>)
    e472:	f240 33d6 	movw	r3, #982	; 0x3d6
    e476:	4622      	mov	r2, r4
    e478:	492c      	ldr	r1, [pc, #176]	; (e52c <k_sched_unlock+0x100>)
    e47a:	4829      	ldr	r0, [pc, #164]	; (e520 <k_sched_unlock+0xf4>)
    e47c:	f002 f95c 	bl	10738 <assert_print>
    e480:	482b      	ldr	r0, [pc, #172]	; (e530 <k_sched_unlock+0x104>)
    e482:	f002 f959 	bl	10738 <assert_print>
    e486:	f240 31d6 	movw	r1, #982	; 0x3d6
    e48a:	4620      	mov	r0, r4
    e48c:	f002 f94d 	bl	1072a <assert_post_action>
    e490:	e01b      	b.n	e4ca <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    e492:	4c25      	ldr	r4, [pc, #148]	; (e528 <k_sched_unlock+0xfc>)
    e494:	f240 33d7 	movw	r3, #983	; 0x3d7
    e498:	4622      	mov	r2, r4
    e49a:	4926      	ldr	r1, [pc, #152]	; (e534 <k_sched_unlock+0x108>)
    e49c:	4820      	ldr	r0, [pc, #128]	; (e520 <k_sched_unlock+0xf4>)
    e49e:	f002 f94b 	bl	10738 <assert_print>
    e4a2:	4823      	ldr	r0, [pc, #140]	; (e530 <k_sched_unlock+0x104>)
    e4a4:	f002 f948 	bl	10738 <assert_print>
    e4a8:	f240 31d7 	movw	r1, #983	; 0x3d7
    e4ac:	4620      	mov	r0, r4
    e4ae:	f002 f93c 	bl	1072a <assert_post_action>
    e4b2:	e00e      	b.n	e4d2 <k_sched_unlock+0xa6>
	__asm__ volatile(
    e4b4:	f384 8811 	msr	BASEPRI, r4
    e4b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e4bc:	2401      	movs	r4, #1
    e4be:	bb34      	cbnz	r4, e50e <k_sched_unlock+0xe2>
		__ASSERT(_current->base.sched_locked != 0U, "");
    e4c0:	4b1d      	ldr	r3, [pc, #116]	; (e538 <k_sched_unlock+0x10c>)
    e4c2:	689b      	ldr	r3, [r3, #8]
    e4c4:	7bdb      	ldrb	r3, [r3, #15]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d0d2      	beq.n	e470 <k_sched_unlock+0x44>
    e4ca:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	d1df      	bne.n	e492 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    e4d2:	4b19      	ldr	r3, [pc, #100]	; (e538 <k_sched_unlock+0x10c>)
    e4d4:	689a      	ldr	r2, [r3, #8]
    e4d6:	7bd3      	ldrb	r3, [r2, #15]
    e4d8:	3301      	adds	r3, #1
    e4da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    e4dc:	2000      	movs	r0, #0
    e4de:	f7ff fadf 	bl	daa0 <update_cache>
	LOCKED(&sched_spinlock) {
    e4e2:	462c      	mov	r4, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e4e4:	480b      	ldr	r0, [pc, #44]	; (e514 <k_sched_unlock+0xe8>)
    e4e6:	f7fe f91d 	bl	c724 <z_spin_unlock_valid>
    e4ea:	2800      	cmp	r0, #0
    e4ec:	d1e2      	bne.n	e4b4 <k_sched_unlock+0x88>
    e4ee:	4e0a      	ldr	r6, [pc, #40]	; (e518 <k_sched_unlock+0xec>)
    e4f0:	23b9      	movs	r3, #185	; 0xb9
    e4f2:	4632      	mov	r2, r6
    e4f4:	4911      	ldr	r1, [pc, #68]	; (e53c <k_sched_unlock+0x110>)
    e4f6:	480a      	ldr	r0, [pc, #40]	; (e520 <k_sched_unlock+0xf4>)
    e4f8:	f002 f91e 	bl	10738 <assert_print>
    e4fc:	4905      	ldr	r1, [pc, #20]	; (e514 <k_sched_unlock+0xe8>)
    e4fe:	4810      	ldr	r0, [pc, #64]	; (e540 <k_sched_unlock+0x114>)
    e500:	f002 f91a 	bl	10738 <assert_print>
    e504:	21b9      	movs	r1, #185	; 0xb9
    e506:	4630      	mov	r0, r6
    e508:	f002 f90f 	bl	1072a <assert_post_action>
    e50c:	e7d2      	b.n	e4b4 <k_sched_unlock+0x88>
	z_reschedule_unlocked();
    e50e:	f004 ffd4 	bl	134ba <z_reschedule_unlocked>
}
    e512:	bd70      	pop	{r4, r5, r6, pc}
    e514:	20002784 	.word	0x20002784
    e518:	00013f4c 	.word	0x00013f4c
    e51c:	00013fac 	.word	0x00013fac
    e520:	00013d44 	.word	0x00013d44
    e524:	00013fc4 	.word	0x00013fc4
    e528:	00016960 	.word	0x00016960
    e52c:	00016a48 	.word	0x00016a48
    e530:	00016894 	.word	0x00016894
    e534:	00016708 	.word	0x00016708
    e538:	20002734 	.word	0x20002734
    e53c:	00013f7c 	.word	0x00013f7c
    e540:	00013f94 	.word	0x00013f94

0000e544 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    e544:	7b43      	ldrb	r3, [r0, #13]
    e546:	f013 0f08 	tst.w	r3, #8
    e54a:	d12a      	bne.n	e5a2 <end_thread+0x5e>
{
    e54c:	b510      	push	{r4, lr}
    e54e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    e550:	f043 0208 	orr.w	r2, r3, #8
    e554:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e556:	f023 0220 	bic.w	r2, r3, #32
    e55a:	f042 0208 	orr.w	r2, r2, #8
    e55e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    e560:	f012 0f80 	tst.w	r2, #128	; 0x80
    e564:	d113      	bne.n	e58e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    e566:	68a3      	ldr	r3, [r4, #8]
    e568:	b113      	cbz	r3, e570 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    e56a:	4620      	mov	r0, r4
    e56c:	f004 ffb1 	bl	134d2 <unpend_thread_no_timeout>
    e570:	f104 0018 	add.w	r0, r4, #24
    e574:	f000 fd32 	bl	efdc <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    e578:	f104 0058 	add.w	r0, r4, #88	; 0x58
    e57c:	f004 ffbe 	bl	134fc <unpend_all>
		update_cache(1);
    e580:	2001      	movs	r0, #1
    e582:	f7ff fa8d 	bl	daa0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    e586:	4620      	mov	r0, r4
    e588:	f7fe f8e4 	bl	c754 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    e58c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e58e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    e592:	f043 0308 	orr.w	r3, r3, #8
    e596:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    e598:	4601      	mov	r1, r0
    e59a:	4802      	ldr	r0, [pc, #8]	; (e5a4 <end_thread+0x60>)
    e59c:	f7ff fa5c 	bl	da58 <z_priq_dumb_remove>
}
    e5a0:	e7e1      	b.n	e566 <end_thread+0x22>
    e5a2:	4770      	bx	lr
    e5a4:	20002754 	.word	0x20002754

0000e5a8 <z_unpend1_no_timeout>:
{
    e5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5ac:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e5ae:	2400      	movs	r4, #0
	__asm__ volatile(
    e5b0:	f04f 0320 	mov.w	r3, #32
    e5b4:	f3ef 8711 	mrs	r7, BASEPRI
    e5b8:	f383 8812 	msr	BASEPRI_MAX, r3
    e5bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e5c0:	4820      	ldr	r0, [pc, #128]	; (e644 <z_unpend1_no_timeout+0x9c>)
    e5c2:	f7fe f89f 	bl	c704 <z_spin_lock_valid>
    e5c6:	b120      	cbz	r0, e5d2 <z_unpend1_no_timeout+0x2a>
	z_spin_lock_set_owner(l);
    e5c8:	481e      	ldr	r0, [pc, #120]	; (e644 <z_unpend1_no_timeout+0x9c>)
    e5ca:	f7fe f8bb 	bl	c744 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    e5ce:	2500      	movs	r5, #0
	return k;
    e5d0:	e019      	b.n	e606 <z_unpend1_no_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e5d2:	4d1d      	ldr	r5, [pc, #116]	; (e648 <z_unpend1_no_timeout+0xa0>)
    e5d4:	238e      	movs	r3, #142	; 0x8e
    e5d6:	462a      	mov	r2, r5
    e5d8:	491c      	ldr	r1, [pc, #112]	; (e64c <z_unpend1_no_timeout+0xa4>)
    e5da:	481d      	ldr	r0, [pc, #116]	; (e650 <z_unpend1_no_timeout+0xa8>)
    e5dc:	f002 f8ac 	bl	10738 <assert_print>
    e5e0:	4918      	ldr	r1, [pc, #96]	; (e644 <z_unpend1_no_timeout+0x9c>)
    e5e2:	481c      	ldr	r0, [pc, #112]	; (e654 <z_unpend1_no_timeout+0xac>)
    e5e4:	f002 f8a8 	bl	10738 <assert_print>
    e5e8:	218e      	movs	r1, #142	; 0x8e
    e5ea:	4628      	mov	r0, r5
    e5ec:	f002 f89d 	bl	1072a <assert_post_action>
    e5f0:	e7ea      	b.n	e5c8 <z_unpend1_no_timeout+0x20>
	LOCKED(&sched_spinlock) {
    e5f2:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e5f4:	4813      	ldr	r0, [pc, #76]	; (e644 <z_unpend1_no_timeout+0x9c>)
    e5f6:	f7fe f895 	bl	c724 <z_spin_unlock_valid>
    e5fa:	b170      	cbz	r0, e61a <z_unpend1_no_timeout+0x72>
	__asm__ volatile(
    e5fc:	f384 8811 	msr	BASEPRI, r4
    e600:	f3bf 8f6f 	isb	sy
    e604:	2401      	movs	r4, #1
    e606:	b9cc      	cbnz	r4, e63c <z_unpend1_no_timeout+0x94>
		thread = _priq_wait_best(&wait_q->waitq);
    e608:	4630      	mov	r0, r6
    e60a:	f004 ff70 	bl	134ee <z_priq_dumb_best>
		if (thread != NULL) {
    e60e:	4605      	mov	r5, r0
    e610:	2800      	cmp	r0, #0
    e612:	d0ee      	beq.n	e5f2 <z_unpend1_no_timeout+0x4a>
			unpend_thread_no_timeout(thread);
    e614:	f004 ff5d 	bl	134d2 <unpend_thread_no_timeout>
    e618:	e7eb      	b.n	e5f2 <z_unpend1_no_timeout+0x4a>
    e61a:	f8df 802c 	ldr.w	r8, [pc, #44]	; e648 <z_unpend1_no_timeout+0xa0>
    e61e:	23b9      	movs	r3, #185	; 0xb9
    e620:	4642      	mov	r2, r8
    e622:	490d      	ldr	r1, [pc, #52]	; (e658 <z_unpend1_no_timeout+0xb0>)
    e624:	480a      	ldr	r0, [pc, #40]	; (e650 <z_unpend1_no_timeout+0xa8>)
    e626:	f002 f887 	bl	10738 <assert_print>
    e62a:	4906      	ldr	r1, [pc, #24]	; (e644 <z_unpend1_no_timeout+0x9c>)
    e62c:	480b      	ldr	r0, [pc, #44]	; (e65c <z_unpend1_no_timeout+0xb4>)
    e62e:	f002 f883 	bl	10738 <assert_print>
    e632:	21b9      	movs	r1, #185	; 0xb9
    e634:	4640      	mov	r0, r8
    e636:	f002 f878 	bl	1072a <assert_post_action>
    e63a:	e7df      	b.n	e5fc <z_unpend1_no_timeout+0x54>
}
    e63c:	4628      	mov	r0, r5
    e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e642:	bf00      	nop
    e644:	20002784 	.word	0x20002784
    e648:	00013f4c 	.word	0x00013f4c
    e64c:	00013fac 	.word	0x00013fac
    e650:	00013d44 	.word	0x00013d44
    e654:	00013fc4 	.word	0x00013fc4
    e658:	00013f7c 	.word	0x00013f7c
    e65c:	00013f94 	.word	0x00013f94

0000e660 <z_unpend_first_thread>:
{
    e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e664:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e666:	2500      	movs	r5, #0
	__asm__ volatile(
    e668:	f04f 0320 	mov.w	r3, #32
    e66c:	f3ef 8711 	mrs	r7, BASEPRI
    e670:	f383 8812 	msr	BASEPRI_MAX, r3
    e674:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e678:	4822      	ldr	r0, [pc, #136]	; (e704 <z_unpend_first_thread+0xa4>)
    e67a:	f7fe f843 	bl	c704 <z_spin_lock_valid>
    e67e:	b120      	cbz	r0, e68a <z_unpend_first_thread+0x2a>
	z_spin_lock_set_owner(l);
    e680:	4820      	ldr	r0, [pc, #128]	; (e704 <z_unpend_first_thread+0xa4>)
    e682:	f7fe f85f 	bl	c744 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    e686:	2400      	movs	r4, #0
	return k;
    e688:	e019      	b.n	e6be <z_unpend_first_thread+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e68a:	4c1f      	ldr	r4, [pc, #124]	; (e708 <z_unpend_first_thread+0xa8>)
    e68c:	238e      	movs	r3, #142	; 0x8e
    e68e:	4622      	mov	r2, r4
    e690:	491e      	ldr	r1, [pc, #120]	; (e70c <z_unpend_first_thread+0xac>)
    e692:	481f      	ldr	r0, [pc, #124]	; (e710 <z_unpend_first_thread+0xb0>)
    e694:	f002 f850 	bl	10738 <assert_print>
    e698:	491a      	ldr	r1, [pc, #104]	; (e704 <z_unpend_first_thread+0xa4>)
    e69a:	481e      	ldr	r0, [pc, #120]	; (e714 <z_unpend_first_thread+0xb4>)
    e69c:	f002 f84c 	bl	10738 <assert_print>
    e6a0:	218e      	movs	r1, #142	; 0x8e
    e6a2:	4620      	mov	r0, r4
    e6a4:	f002 f841 	bl	1072a <assert_post_action>
    e6a8:	e7ea      	b.n	e680 <z_unpend_first_thread+0x20>
	LOCKED(&sched_spinlock) {
    e6aa:	463d      	mov	r5, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6ac:	4815      	ldr	r0, [pc, #84]	; (e704 <z_unpend_first_thread+0xa4>)
    e6ae:	f7fe f839 	bl	c724 <z_spin_unlock_valid>
    e6b2:	b190      	cbz	r0, e6da <z_unpend_first_thread+0x7a>
	__asm__ volatile(
    e6b4:	f385 8811 	msr	BASEPRI, r5
    e6b8:	f3bf 8f6f 	isb	sy
    e6bc:	2501      	movs	r5, #1
    e6be:	b9ed      	cbnz	r5, e6fc <z_unpend_first_thread+0x9c>
		thread = _priq_wait_best(&wait_q->waitq);
    e6c0:	4630      	mov	r0, r6
    e6c2:	f004 ff14 	bl	134ee <z_priq_dumb_best>
		if (thread != NULL) {
    e6c6:	4604      	mov	r4, r0
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d0ee      	beq.n	e6aa <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    e6cc:	f004 ff01 	bl	134d2 <unpend_thread_no_timeout>
    e6d0:	f104 0018 	add.w	r0, r4, #24
    e6d4:	f000 fc82 	bl	efdc <z_abort_timeout>
    e6d8:	e7e7      	b.n	e6aa <z_unpend_first_thread+0x4a>
    e6da:	f8df 802c 	ldr.w	r8, [pc, #44]	; e708 <z_unpend_first_thread+0xa8>
    e6de:	23b9      	movs	r3, #185	; 0xb9
    e6e0:	4642      	mov	r2, r8
    e6e2:	490d      	ldr	r1, [pc, #52]	; (e718 <z_unpend_first_thread+0xb8>)
    e6e4:	480a      	ldr	r0, [pc, #40]	; (e710 <z_unpend_first_thread+0xb0>)
    e6e6:	f002 f827 	bl	10738 <assert_print>
    e6ea:	4906      	ldr	r1, [pc, #24]	; (e704 <z_unpend_first_thread+0xa4>)
    e6ec:	480b      	ldr	r0, [pc, #44]	; (e71c <z_unpend_first_thread+0xbc>)
    e6ee:	f002 f823 	bl	10738 <assert_print>
    e6f2:	21b9      	movs	r1, #185	; 0xb9
    e6f4:	4640      	mov	r0, r8
    e6f6:	f002 f818 	bl	1072a <assert_post_action>
    e6fa:	e7db      	b.n	e6b4 <z_unpend_first_thread+0x54>
}
    e6fc:	4620      	mov	r0, r4
    e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e702:	bf00      	nop
    e704:	20002784 	.word	0x20002784
    e708:	00013f4c 	.word	0x00013f4c
    e70c:	00013fac 	.word	0x00013fac
    e710:	00013d44 	.word	0x00013d44
    e714:	00013fc4 	.word	0x00013fc4
    e718:	00013f7c 	.word	0x00013f7c
    e71c:	00013f94 	.word	0x00013f94

0000e720 <z_sched_init>:
{
    e720:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    e722:	4804      	ldr	r0, [pc, #16]	; (e734 <z_sched_init+0x14>)
    e724:	f004 feff 	bl	13526 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e728:	2100      	movs	r1, #0
    e72a:	4608      	mov	r0, r1
    e72c:	f7ff f832 	bl	d794 <k_sched_time_slice_set>
}
    e730:	bd08      	pop	{r3, pc}
    e732:	bf00      	nop
    e734:	20002750 	.word	0x20002750

0000e738 <z_impl_k_yield>:
{
    e738:	b570      	push	{r4, r5, r6, lr}
    e73a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    e73e:	bb3b      	cbnz	r3, e790 <z_impl_k_yield+0x58>
	__asm__ volatile(
    e740:	f04f 0320 	mov.w	r3, #32
    e744:	f3ef 8611 	mrs	r6, BASEPRI
    e748:	f383 8812 	msr	BASEPRI_MAX, r3
    e74c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e750:	4842      	ldr	r0, [pc, #264]	; (e85c <z_impl_k_yield+0x124>)
    e752:	f7fd ffd7 	bl	c704 <z_spin_lock_valid>
    e756:	b360      	cbz	r0, e7b2 <z_impl_k_yield+0x7a>
	z_spin_lock_set_owner(l);
    e758:	4840      	ldr	r0, [pc, #256]	; (e85c <z_impl_k_yield+0x124>)
    e75a:	f7fd fff3 	bl	c744 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    e75e:	4c40      	ldr	r4, [pc, #256]	; (e860 <z_impl_k_yield+0x128>)
    e760:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e762:	7b4b      	ldrb	r3, [r1, #13]
    e764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e768:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    e76a:	f104 0020 	add.w	r0, r4, #32
    e76e:	f7ff f973 	bl	da58 <z_priq_dumb_remove>
	queue_thread(_current);
    e772:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    e774:	7b6b      	ldrb	r3, [r5, #13]
    e776:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e77a:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e77c:	4b39      	ldr	r3, [pc, #228]	; (e864 <z_impl_k_yield+0x12c>)
    e77e:	429d      	cmp	r5, r3
    e780:	d027      	beq.n	e7d2 <z_impl_k_yield+0x9a>
	return list->head == list;
    e782:	4b37      	ldr	r3, [pc, #220]	; (e860 <z_impl_k_yield+0x128>)
    e784:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e788:	429c      	cmp	r4, r3
    e78a:	d135      	bne.n	e7f8 <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e78c:	2400      	movs	r4, #0
    e78e:	e033      	b.n	e7f8 <z_impl_k_yield+0xc0>
	__ASSERT(!arch_is_in_isr(), "");
    e790:	4c35      	ldr	r4, [pc, #212]	; (e868 <z_impl_k_yield+0x130>)
    e792:	f240 535d 	movw	r3, #1373	; 0x55d
    e796:	4622      	mov	r2, r4
    e798:	4934      	ldr	r1, [pc, #208]	; (e86c <z_impl_k_yield+0x134>)
    e79a:	4835      	ldr	r0, [pc, #212]	; (e870 <z_impl_k_yield+0x138>)
    e79c:	f001 ffcc 	bl	10738 <assert_print>
    e7a0:	4834      	ldr	r0, [pc, #208]	; (e874 <z_impl_k_yield+0x13c>)
    e7a2:	f001 ffc9 	bl	10738 <assert_print>
    e7a6:	f240 515d 	movw	r1, #1373	; 0x55d
    e7aa:	4620      	mov	r0, r4
    e7ac:	f001 ffbd 	bl	1072a <assert_post_action>
    e7b0:	e7c6      	b.n	e740 <z_impl_k_yield+0x8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e7b2:	4c31      	ldr	r4, [pc, #196]	; (e878 <z_impl_k_yield+0x140>)
    e7b4:	238e      	movs	r3, #142	; 0x8e
    e7b6:	4622      	mov	r2, r4
    e7b8:	4930      	ldr	r1, [pc, #192]	; (e87c <z_impl_k_yield+0x144>)
    e7ba:	482d      	ldr	r0, [pc, #180]	; (e870 <z_impl_k_yield+0x138>)
    e7bc:	f001 ffbc 	bl	10738 <assert_print>
    e7c0:	4926      	ldr	r1, [pc, #152]	; (e85c <z_impl_k_yield+0x124>)
    e7c2:	482f      	ldr	r0, [pc, #188]	; (e880 <z_impl_k_yield+0x148>)
    e7c4:	f001 ffb8 	bl	10738 <assert_print>
    e7c8:	218e      	movs	r1, #142	; 0x8e
    e7ca:	4620      	mov	r0, r4
    e7cc:	f001 ffad 	bl	1072a <assert_post_action>
    e7d0:	e7c2      	b.n	e758 <z_impl_k_yield+0x20>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e7d2:	4c25      	ldr	r4, [pc, #148]	; (e868 <z_impl_k_yield+0x130>)
    e7d4:	23ba      	movs	r3, #186	; 0xba
    e7d6:	4622      	mov	r2, r4
    e7d8:	492a      	ldr	r1, [pc, #168]	; (e884 <z_impl_k_yield+0x14c>)
    e7da:	4825      	ldr	r0, [pc, #148]	; (e870 <z_impl_k_yield+0x138>)
    e7dc:	f001 ffac 	bl	10738 <assert_print>
    e7e0:	21ba      	movs	r1, #186	; 0xba
    e7e2:	4620      	mov	r0, r4
    e7e4:	f001 ffa1 	bl	1072a <assert_post_action>
    e7e8:	e7cb      	b.n	e782 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    e7ea:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e7ec:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e7ee:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e7f0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e7f2:	6065      	str	r5, [r4, #4]
}
    e7f4:	e017      	b.n	e826 <z_impl_k_yield+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e7f6:	2400      	movs	r4, #0
    e7f8:	b16c      	cbz	r4, e816 <z_impl_k_yield+0xde>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e7fa:	4621      	mov	r1, r4
    e7fc:	4628      	mov	r0, r5
    e7fe:	f004 fe44 	bl	1348a <z_sched_prio_cmp>
    e802:	2800      	cmp	r0, #0
    e804:	dcf1      	bgt.n	e7ea <z_impl_k_yield+0xb2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e806:	2c00      	cmp	r4, #0
    e808:	d0f6      	beq.n	e7f8 <z_impl_k_yield+0xc0>
	return (node == list->tail) ? NULL : node->next;
    e80a:	4b15      	ldr	r3, [pc, #84]	; (e860 <z_impl_k_yield+0x128>)
    e80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e80e:	429c      	cmp	r4, r3
    e810:	d0f1      	beq.n	e7f6 <z_impl_k_yield+0xbe>
    e812:	6824      	ldr	r4, [r4, #0]
    e814:	e7f0      	b.n	e7f8 <z_impl_k_yield+0xc0>
	sys_dnode_t *const tail = list->tail;
    e816:	4b12      	ldr	r3, [pc, #72]	; (e860 <z_impl_k_yield+0x128>)
    e818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e81a:	f103 0120 	add.w	r1, r3, #32
    e81e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    e820:	606a      	str	r2, [r5, #4]
	tail->next = node;
    e822:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e824:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    e826:	2001      	movs	r0, #1
    e828:	f7ff f93a 	bl	daa0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e82c:	480b      	ldr	r0, [pc, #44]	; (e85c <z_impl_k_yield+0x124>)
    e82e:	f7fd ff79 	bl	c724 <z_spin_unlock_valid>
    e832:	b118      	cbz	r0, e83c <z_impl_k_yield+0x104>
    e834:	4630      	mov	r0, r6
    e836:	f7f6 fadd 	bl	4df4 <arch_swap>
}
    e83a:	bd70      	pop	{r4, r5, r6, pc}
    e83c:	4c0e      	ldr	r4, [pc, #56]	; (e878 <z_impl_k_yield+0x140>)
    e83e:	23d0      	movs	r3, #208	; 0xd0
    e840:	4622      	mov	r2, r4
    e842:	4911      	ldr	r1, [pc, #68]	; (e888 <z_impl_k_yield+0x150>)
    e844:	480a      	ldr	r0, [pc, #40]	; (e870 <z_impl_k_yield+0x138>)
    e846:	f001 ff77 	bl	10738 <assert_print>
    e84a:	4904      	ldr	r1, [pc, #16]	; (e85c <z_impl_k_yield+0x124>)
    e84c:	480f      	ldr	r0, [pc, #60]	; (e88c <z_impl_k_yield+0x154>)
    e84e:	f001 ff73 	bl	10738 <assert_print>
    e852:	21d0      	movs	r1, #208	; 0xd0
    e854:	4620      	mov	r0, r4
    e856:	f001 ff68 	bl	1072a <assert_post_action>
    e85a:	e7eb      	b.n	e834 <z_impl_k_yield+0xfc>
    e85c:	20002784 	.word	0x20002784
    e860:	20002734 	.word	0x20002734
    e864:	20001798 	.word	0x20001798
    e868:	00016960 	.word	0x00016960
    e86c:	00016708 	.word	0x00016708
    e870:	00013d44 	.word	0x00013d44
    e874:	00016894 	.word	0x00016894
    e878:	00013f4c 	.word	0x00013f4c
    e87c:	00013fac 	.word	0x00013fac
    e880:	00013fc4 	.word	0x00013fc4
    e884:	000169fc 	.word	0x000169fc
    e888:	00013f7c 	.word	0x00013f7c
    e88c:	00013f94 	.word	0x00013f94

0000e890 <z_tick_sleep>:
{
    e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e894:	4604      	mov	r4, r0
    e896:	460e      	mov	r6, r1
    e898:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    e89c:	2b00      	cmp	r3, #0
    e89e:	d14e      	bne.n	e93e <z_tick_sleep+0xae>
	if (ticks == 0) {
    e8a0:	ea54 0306 	orrs.w	r3, r4, r6
    e8a4:	d05c      	beq.n	e960 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    e8a6:	f06f 0301 	mvn.w	r3, #1
    e8aa:	1b1b      	subs	r3, r3, r4
    e8ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e8b0:	eb62 0206 	sbc.w	r2, r2, r6
    e8b4:	2b01      	cmp	r3, #1
    e8b6:	f172 0200 	sbcs.w	r2, r2, #0
    e8ba:	db55      	blt.n	e968 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    e8bc:	f06f 0501 	mvn.w	r5, #1
    e8c0:	1b2d      	subs	r5, r5, r4
    e8c2:	f04f 0320 	mov.w	r3, #32
    e8c6:	f3ef 8911 	mrs	r9, BASEPRI
    e8ca:	f383 8812 	msr	BASEPRI_MAX, r3
    e8ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e8d2:	4840      	ldr	r0, [pc, #256]	; (e9d4 <z_tick_sleep+0x144>)
    e8d4:	f7fd ff16 	bl	c704 <z_spin_lock_valid>
    e8d8:	2800      	cmp	r0, #0
    e8da:	d049      	beq.n	e970 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    e8dc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e9d4 <z_tick_sleep+0x144>
    e8e0:	4640      	mov	r0, r8
    e8e2:	f7fd ff2f 	bl	c744 <z_spin_lock_set_owner>
	pending_current = _current;
    e8e6:	4f3c      	ldr	r7, [pc, #240]	; (e9d8 <z_tick_sleep+0x148>)
    e8e8:	68b8      	ldr	r0, [r7, #8]
    e8ea:	4b3c      	ldr	r3, [pc, #240]	; (e9dc <z_tick_sleep+0x14c>)
    e8ec:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    e8ee:	f7ff fb87 	bl	e000 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    e8f2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e8f4:	4622      	mov	r2, r4
    e8f6:	4633      	mov	r3, r6
    e8f8:	4939      	ldr	r1, [pc, #228]	; (e9e0 <z_tick_sleep+0x150>)
    e8fa:	3018      	adds	r0, #24
    e8fc:	f000 fa92 	bl	ee24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    e900:	68ba      	ldr	r2, [r7, #8]
    e902:	7b53      	ldrb	r3, [r2, #13]
    e904:	f043 0310 	orr.w	r3, r3, #16
    e908:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e90a:	4640      	mov	r0, r8
    e90c:	f7fd ff0a 	bl	c724 <z_spin_unlock_valid>
    e910:	2800      	cmp	r0, #0
    e912:	d03d      	beq.n	e990 <z_tick_sleep+0x100>
    e914:	4648      	mov	r0, r9
    e916:	f7f6 fa6d 	bl	4df4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    e91a:	4b2f      	ldr	r3, [pc, #188]	; (e9d8 <z_tick_sleep+0x148>)
    e91c:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    e91e:	7b5b      	ldrb	r3, [r3, #13]
    e920:	f013 0f10 	tst.w	r3, #16
    e924:	d144      	bne.n	e9b0 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    e926:	f004 fe19 	bl	1355c <sys_clock_tick_get_32>
    e92a:	1a28      	subs	r0, r5, r0
    e92c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    e930:	2801      	cmp	r0, #1
    e932:	f173 0300 	sbcs.w	r3, r3, #0
    e936:	da00      	bge.n	e93a <z_tick_sleep+0xaa>
	return 0;
    e938:	2000      	movs	r0, #0
}
    e93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    e93e:	4d29      	ldr	r5, [pc, #164]	; (e9e4 <z_tick_sleep+0x154>)
    e940:	f240 5379 	movw	r3, #1401	; 0x579
    e944:	462a      	mov	r2, r5
    e946:	4928      	ldr	r1, [pc, #160]	; (e9e8 <z_tick_sleep+0x158>)
    e948:	4828      	ldr	r0, [pc, #160]	; (e9ec <z_tick_sleep+0x15c>)
    e94a:	f001 fef5 	bl	10738 <assert_print>
    e94e:	4828      	ldr	r0, [pc, #160]	; (e9f0 <z_tick_sleep+0x160>)
    e950:	f001 fef2 	bl	10738 <assert_print>
    e954:	f240 5179 	movw	r1, #1401	; 0x579
    e958:	4628      	mov	r0, r5
    e95a:	f001 fee6 	bl	1072a <assert_post_action>
    e95e:	e79f      	b.n	e8a0 <z_tick_sleep+0x10>
	z_impl_k_yield();
    e960:	f7ff feea 	bl	e738 <z_impl_k_yield>
		return 0;
    e964:	2000      	movs	r0, #0
    e966:	e7e8      	b.n	e93a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    e968:	f004 fdf8 	bl	1355c <sys_clock_tick_get_32>
    e96c:	1905      	adds	r5, r0, r4
    e96e:	e7a8      	b.n	e8c2 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e970:	4f20      	ldr	r7, [pc, #128]	; (e9f4 <z_tick_sleep+0x164>)
    e972:	238e      	movs	r3, #142	; 0x8e
    e974:	463a      	mov	r2, r7
    e976:	4920      	ldr	r1, [pc, #128]	; (e9f8 <z_tick_sleep+0x168>)
    e978:	481c      	ldr	r0, [pc, #112]	; (e9ec <z_tick_sleep+0x15c>)
    e97a:	f001 fedd 	bl	10738 <assert_print>
    e97e:	4915      	ldr	r1, [pc, #84]	; (e9d4 <z_tick_sleep+0x144>)
    e980:	481e      	ldr	r0, [pc, #120]	; (e9fc <z_tick_sleep+0x16c>)
    e982:	f001 fed9 	bl	10738 <assert_print>
    e986:	218e      	movs	r1, #142	; 0x8e
    e988:	4638      	mov	r0, r7
    e98a:	f001 fece 	bl	1072a <assert_post_action>
    e98e:	e7a5      	b.n	e8dc <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e990:	4c18      	ldr	r4, [pc, #96]	; (e9f4 <z_tick_sleep+0x164>)
    e992:	23d0      	movs	r3, #208	; 0xd0
    e994:	4622      	mov	r2, r4
    e996:	491a      	ldr	r1, [pc, #104]	; (ea00 <z_tick_sleep+0x170>)
    e998:	4814      	ldr	r0, [pc, #80]	; (e9ec <z_tick_sleep+0x15c>)
    e99a:	f001 fecd 	bl	10738 <assert_print>
    e99e:	4641      	mov	r1, r8
    e9a0:	4818      	ldr	r0, [pc, #96]	; (ea04 <z_tick_sleep+0x174>)
    e9a2:	f001 fec9 	bl	10738 <assert_print>
    e9a6:	21d0      	movs	r1, #208	; 0xd0
    e9a8:	4620      	mov	r0, r4
    e9aa:	f001 febe 	bl	1072a <assert_post_action>
    e9ae:	e7b1      	b.n	e914 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    e9b0:	4c0c      	ldr	r4, [pc, #48]	; (e9e4 <z_tick_sleep+0x154>)
    e9b2:	f240 539a 	movw	r3, #1434	; 0x59a
    e9b6:	4622      	mov	r2, r4
    e9b8:	4913      	ldr	r1, [pc, #76]	; (ea08 <z_tick_sleep+0x178>)
    e9ba:	480c      	ldr	r0, [pc, #48]	; (e9ec <z_tick_sleep+0x15c>)
    e9bc:	f001 febc 	bl	10738 <assert_print>
    e9c0:	480b      	ldr	r0, [pc, #44]	; (e9f0 <z_tick_sleep+0x160>)
    e9c2:	f001 feb9 	bl	10738 <assert_print>
    e9c6:	f240 519a 	movw	r1, #1434	; 0x59a
    e9ca:	4620      	mov	r0, r4
    e9cc:	f001 fead 	bl	1072a <assert_post_action>
    e9d0:	e7a9      	b.n	e926 <z_tick_sleep+0x96>
    e9d2:	bf00      	nop
    e9d4:	20002784 	.word	0x20002784
    e9d8:	20002734 	.word	0x20002734
    e9dc:	20002778 	.word	0x20002778
    e9e0:	0000df25 	.word	0x0000df25
    e9e4:	00016960 	.word	0x00016960
    e9e8:	00016708 	.word	0x00016708
    e9ec:	00013d44 	.word	0x00013d44
    e9f0:	00016894 	.word	0x00016894
    e9f4:	00013f4c 	.word	0x00013f4c
    e9f8:	00013fac 	.word	0x00013fac
    e9fc:	00013fc4 	.word	0x00013fc4
    ea00:	00013f7c 	.word	0x00013f7c
    ea04:	00013f94 	.word	0x00013f94
    ea08:	00016a7c 	.word	0x00016a7c

0000ea0c <z_impl_k_sleep>:
{
    ea0c:	b570      	push	{r4, r5, r6, lr}
    ea0e:	4605      	mov	r5, r0
    ea10:	460c      	mov	r4, r1
    ea12:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ea16:	bb03      	cbnz	r3, ea5a <z_impl_k_sleep+0x4e>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ea18:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    ea1c:	bf08      	it	eq
    ea1e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    ea22:	d02b      	beq.n	ea7c <z_impl_k_sleep+0x70>
	ticks = z_tick_sleep(ticks);
    ea24:	4628      	mov	r0, r5
    ea26:	4621      	mov	r1, r4
    ea28:	f7ff ff32 	bl	e890 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    ea2c:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    ea2e:	0151      	lsls	r1, r2, #5
    ea30:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    ea34:	0143      	lsls	r3, r0, #5
    ea36:	1a1b      	subs	r3, r3, r0
    ea38:	eb61 0102 	sbc.w	r1, r1, r2
    ea3c:	0089      	lsls	r1, r1, #2
    ea3e:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    ea42:	009b      	lsls	r3, r3, #2
    ea44:	181b      	adds	r3, r3, r0
    ea46:	eb42 0201 	adc.w	r2, r2, r1
    ea4a:	00d2      	lsls	r2, r2, #3
    ea4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    ea50:	f3c3 3310 	ubfx	r3, r3, #12, #17
    ea54:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    ea58:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ea5a:	4e0c      	ldr	r6, [pc, #48]	; (ea8c <z_impl_k_sleep+0x80>)
    ea5c:	f240 53a9 	movw	r3, #1449	; 0x5a9
    ea60:	4632      	mov	r2, r6
    ea62:	490b      	ldr	r1, [pc, #44]	; (ea90 <z_impl_k_sleep+0x84>)
    ea64:	480b      	ldr	r0, [pc, #44]	; (ea94 <z_impl_k_sleep+0x88>)
    ea66:	f001 fe67 	bl	10738 <assert_print>
    ea6a:	480b      	ldr	r0, [pc, #44]	; (ea98 <z_impl_k_sleep+0x8c>)
    ea6c:	f001 fe64 	bl	10738 <assert_print>
    ea70:	f240 51a9 	movw	r1, #1449	; 0x5a9
    ea74:	4630      	mov	r0, r6
    ea76:	f001 fe58 	bl	1072a <assert_post_action>
    ea7a:	e7cd      	b.n	ea18 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    ea7c:	4b07      	ldr	r3, [pc, #28]	; (ea9c <z_impl_k_sleep+0x90>)
    ea7e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    ea80:	f7ff fc5e 	bl	e340 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    ea84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ea88:	e7e6      	b.n	ea58 <z_impl_k_sleep+0x4c>
    ea8a:	bf00      	nop
    ea8c:	00016960 	.word	0x00016960
    ea90:	00016708 	.word	0x00016708
    ea94:	00013d44 	.word	0x00013d44
    ea98:	00016894 	.word	0x00016894
    ea9c:	20002734 	.word	0x20002734

0000eaa0 <z_impl_z_current_get>:
}
    eaa0:	4b01      	ldr	r3, [pc, #4]	; (eaa8 <z_impl_z_current_get+0x8>)
    eaa2:	6898      	ldr	r0, [r3, #8]
    eaa4:	4770      	bx	lr
    eaa6:	bf00      	nop
    eaa8:	20002734 	.word	0x20002734

0000eaac <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaae:	4604      	mov	r4, r0
    eab0:	f04f 0320 	mov.w	r3, #32
    eab4:	f3ef 8511 	mrs	r5, BASEPRI
    eab8:	f383 8812 	msr	BASEPRI_MAX, r3
    eabc:	f3bf 8f6f 	isb	sy
    eac0:	462e      	mov	r6, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eac2:	485b      	ldr	r0, [pc, #364]	; (ec30 <z_thread_abort+0x184>)
    eac4:	f7fd fe1e 	bl	c704 <z_spin_lock_valid>
    eac8:	b1e0      	cbz	r0, eb04 <z_thread_abort+0x58>
	z_spin_lock_set_owner(l);
    eaca:	4859      	ldr	r0, [pc, #356]	; (ec30 <z_thread_abort+0x184>)
    eacc:	f7fd fe3a 	bl	c744 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    ead0:	7b23      	ldrb	r3, [r4, #12]
    ead2:	f013 0f01 	tst.w	r3, #1
    ead6:	d125      	bne.n	eb24 <z_thread_abort+0x78>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ead8:	7b63      	ldrb	r3, [r4, #13]
    eada:	f013 0f08 	tst.w	r3, #8
    eade:	d151      	bne.n	eb84 <z_thread_abort+0xd8>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    eae0:	4620      	mov	r0, r4
    eae2:	f7ff fd2f 	bl	e544 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    eae6:	4b53      	ldr	r3, [pc, #332]	; (ec34 <z_thread_abort+0x188>)
    eae8:	689b      	ldr	r3, [r3, #8]
    eaea:	42a3      	cmp	r3, r4
    eaec:	d063      	beq.n	ebb6 <z_thread_abort+0x10a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eaee:	4850      	ldr	r0, [pc, #320]	; (ec30 <z_thread_abort+0x184>)
    eaf0:	f7fd fe18 	bl	c724 <z_spin_unlock_valid>
    eaf4:	2800      	cmp	r0, #0
    eaf6:	f000 808a 	beq.w	ec0e <z_thread_abort+0x162>
	__asm__ volatile(
    eafa:	f386 8811 	msr	BASEPRI, r6
    eafe:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    eb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eb04:	4f4c      	ldr	r7, [pc, #304]	; (ec38 <z_thread_abort+0x18c>)
    eb06:	238e      	movs	r3, #142	; 0x8e
    eb08:	463a      	mov	r2, r7
    eb0a:	494c      	ldr	r1, [pc, #304]	; (ec3c <z_thread_abort+0x190>)
    eb0c:	484c      	ldr	r0, [pc, #304]	; (ec40 <z_thread_abort+0x194>)
    eb0e:	f001 fe13 	bl	10738 <assert_print>
    eb12:	4947      	ldr	r1, [pc, #284]	; (ec30 <z_thread_abort+0x184>)
    eb14:	484b      	ldr	r0, [pc, #300]	; (ec44 <z_thread_abort+0x198>)
    eb16:	f001 fe0f 	bl	10738 <assert_print>
    eb1a:	218e      	movs	r1, #142	; 0x8e
    eb1c:	4638      	mov	r0, r7
    eb1e:	f001 fe04 	bl	1072a <assert_post_action>
    eb22:	e7d2      	b.n	eaca <z_thread_abort+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eb24:	4842      	ldr	r0, [pc, #264]	; (ec30 <z_thread_abort+0x184>)
    eb26:	f7fd fdfd 	bl	c724 <z_spin_unlock_valid>
    eb2a:	b1d8      	cbz	r0, eb64 <z_thread_abort+0xb8>
    eb2c:	f386 8811 	msr	BASEPRI, r6
    eb30:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
    eb34:	4d44      	ldr	r5, [pc, #272]	; (ec48 <z_thread_abort+0x19c>)
    eb36:	f240 63b5 	movw	r3, #1717	; 0x6b5
    eb3a:	462a      	mov	r2, r5
    eb3c:	4943      	ldr	r1, [pc, #268]	; (ec4c <z_thread_abort+0x1a0>)
    eb3e:	4840      	ldr	r0, [pc, #256]	; (ec40 <z_thread_abort+0x194>)
    eb40:	f001 fdfa 	bl	10738 <assert_print>
    eb44:	4621      	mov	r1, r4
    eb46:	4842      	ldr	r0, [pc, #264]	; (ec50 <z_thread_abort+0x1a4>)
    eb48:	f001 fdf6 	bl	10738 <assert_print>
    eb4c:	f240 61b5 	movw	r1, #1717	; 0x6b5
    eb50:	4628      	mov	r0, r5
    eb52:	f001 fdea 	bl	1072a <assert_post_action>
		k_panic();
    eb56:	4040      	eors	r0, r0
    eb58:	f380 8811 	msr	BASEPRI, r0
    eb5c:	f04f 0004 	mov.w	r0, #4
    eb60:	df02      	svc	2
		return;
    eb62:	e7ce      	b.n	eb02 <z_thread_abort+0x56>
    eb64:	4d34      	ldr	r5, [pc, #208]	; (ec38 <z_thread_abort+0x18c>)
    eb66:	23b9      	movs	r3, #185	; 0xb9
    eb68:	462a      	mov	r2, r5
    eb6a:	493a      	ldr	r1, [pc, #232]	; (ec54 <z_thread_abort+0x1a8>)
    eb6c:	4834      	ldr	r0, [pc, #208]	; (ec40 <z_thread_abort+0x194>)
    eb6e:	f001 fde3 	bl	10738 <assert_print>
    eb72:	492f      	ldr	r1, [pc, #188]	; (ec30 <z_thread_abort+0x184>)
    eb74:	4838      	ldr	r0, [pc, #224]	; (ec58 <z_thread_abort+0x1ac>)
    eb76:	f001 fddf 	bl	10738 <assert_print>
    eb7a:	21b9      	movs	r1, #185	; 0xb9
    eb7c:	4628      	mov	r0, r5
    eb7e:	f001 fdd4 	bl	1072a <assert_post_action>
    eb82:	e7d3      	b.n	eb2c <z_thread_abort+0x80>
    eb84:	482a      	ldr	r0, [pc, #168]	; (ec30 <z_thread_abort+0x184>)
    eb86:	f7fd fdcd 	bl	c724 <z_spin_unlock_valid>
    eb8a:	b120      	cbz	r0, eb96 <z_thread_abort+0xea>
    eb8c:	f386 8811 	msr	BASEPRI, r6
    eb90:	f3bf 8f6f 	isb	sy
		return;
    eb94:	e7b5      	b.n	eb02 <z_thread_abort+0x56>
    eb96:	4c28      	ldr	r4, [pc, #160]	; (ec38 <z_thread_abort+0x18c>)
    eb98:	23b9      	movs	r3, #185	; 0xb9
    eb9a:	4622      	mov	r2, r4
    eb9c:	492d      	ldr	r1, [pc, #180]	; (ec54 <z_thread_abort+0x1a8>)
    eb9e:	4828      	ldr	r0, [pc, #160]	; (ec40 <z_thread_abort+0x194>)
    eba0:	f001 fdca 	bl	10738 <assert_print>
    eba4:	4922      	ldr	r1, [pc, #136]	; (ec30 <z_thread_abort+0x184>)
    eba6:	482c      	ldr	r0, [pc, #176]	; (ec58 <z_thread_abort+0x1ac>)
    eba8:	f001 fdc6 	bl	10738 <assert_print>
    ebac:	21b9      	movs	r1, #185	; 0xb9
    ebae:	4620      	mov	r0, r4
    ebb0:	f001 fdbb 	bl	1072a <assert_post_action>
    ebb4:	e7ea      	b.n	eb8c <z_thread_abort+0xe0>
    ebb6:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d197      	bne.n	eaee <z_thread_abort+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ebbe:	481c      	ldr	r0, [pc, #112]	; (ec30 <z_thread_abort+0x184>)
    ebc0:	f7fd fdb0 	bl	c724 <z_spin_unlock_valid>
    ebc4:	b198      	cbz	r0, ebee <z_thread_abort+0x142>
    ebc6:	4628      	mov	r0, r5
    ebc8:	f7f6 f914 	bl	4df4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    ebcc:	4c1e      	ldr	r4, [pc, #120]	; (ec48 <z_thread_abort+0x19c>)
    ebce:	f240 63e4 	movw	r3, #1764	; 0x6e4
    ebd2:	4622      	mov	r2, r4
    ebd4:	491d      	ldr	r1, [pc, #116]	; (ec4c <z_thread_abort+0x1a0>)
    ebd6:	481a      	ldr	r0, [pc, #104]	; (ec40 <z_thread_abort+0x194>)
    ebd8:	f001 fdae 	bl	10738 <assert_print>
    ebdc:	481f      	ldr	r0, [pc, #124]	; (ec5c <z_thread_abort+0x1b0>)
    ebde:	f001 fdab 	bl	10738 <assert_print>
    ebe2:	f240 61e4 	movw	r1, #1764	; 0x6e4
    ebe6:	4620      	mov	r0, r4
    ebe8:	f001 fd9f 	bl	1072a <assert_post_action>
    ebec:	e77f      	b.n	eaee <z_thread_abort+0x42>
    ebee:	4c12      	ldr	r4, [pc, #72]	; (ec38 <z_thread_abort+0x18c>)
    ebf0:	23d0      	movs	r3, #208	; 0xd0
    ebf2:	4622      	mov	r2, r4
    ebf4:	4917      	ldr	r1, [pc, #92]	; (ec54 <z_thread_abort+0x1a8>)
    ebf6:	4812      	ldr	r0, [pc, #72]	; (ec40 <z_thread_abort+0x194>)
    ebf8:	f001 fd9e 	bl	10738 <assert_print>
    ebfc:	490c      	ldr	r1, [pc, #48]	; (ec30 <z_thread_abort+0x184>)
    ebfe:	4816      	ldr	r0, [pc, #88]	; (ec58 <z_thread_abort+0x1ac>)
    ec00:	f001 fd9a 	bl	10738 <assert_print>
    ec04:	21d0      	movs	r1, #208	; 0xd0
    ec06:	4620      	mov	r0, r4
    ec08:	f001 fd8f 	bl	1072a <assert_post_action>
    ec0c:	e7db      	b.n	ebc6 <z_thread_abort+0x11a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ec0e:	4c0a      	ldr	r4, [pc, #40]	; (ec38 <z_thread_abort+0x18c>)
    ec10:	23b9      	movs	r3, #185	; 0xb9
    ec12:	4622      	mov	r2, r4
    ec14:	490f      	ldr	r1, [pc, #60]	; (ec54 <z_thread_abort+0x1a8>)
    ec16:	480a      	ldr	r0, [pc, #40]	; (ec40 <z_thread_abort+0x194>)
    ec18:	f001 fd8e 	bl	10738 <assert_print>
    ec1c:	4904      	ldr	r1, [pc, #16]	; (ec30 <z_thread_abort+0x184>)
    ec1e:	480e      	ldr	r0, [pc, #56]	; (ec58 <z_thread_abort+0x1ac>)
    ec20:	f001 fd8a 	bl	10738 <assert_print>
    ec24:	21b9      	movs	r1, #185	; 0xb9
    ec26:	4620      	mov	r0, r4
    ec28:	f001 fd7f 	bl	1072a <assert_post_action>
    ec2c:	e765      	b.n	eafa <z_thread_abort+0x4e>
    ec2e:	bf00      	nop
    ec30:	20002784 	.word	0x20002784
    ec34:	20002734 	.word	0x20002734
    ec38:	00013f4c 	.word	0x00013f4c
    ec3c:	00013fac 	.word	0x00013fac
    ec40:	00013d44 	.word	0x00013d44
    ec44:	00013fc4 	.word	0x00013fc4
    ec48:	00016960 	.word	0x00016960
    ec4c:	000156e0 	.word	0x000156e0
    ec50:	00016abc 	.word	0x00016abc
    ec54:	00013f7c 	.word	0x00013f7c
    ec58:	00013f94 	.word	0x00013f94
    ec5c:	00016adc 	.word	0x00016adc

0000ec60 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    ec60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec64:	4605      	mov	r5, r0
    ec66:	460f      	mov	r7, r1
    ec68:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
    ec6a:	2400      	movs	r4, #0
	__asm__ volatile(
    ec6c:	f04f 0320 	mov.w	r3, #32
    ec70:	f3ef 8611 	mrs	r6, BASEPRI
    ec74:	f383 8812 	msr	BASEPRI_MAX, r3
    ec78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec7c:	4827      	ldr	r0, [pc, #156]	; (ed1c <z_sched_wake+0xbc>)
    ec7e:	f7fd fd41 	bl	c704 <z_spin_lock_valid>
    ec82:	b128      	cbz	r0, ec90 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
    ec84:	4825      	ldr	r0, [pc, #148]	; (ed1c <z_sched_wake+0xbc>)
    ec86:	f7fd fd5d 	bl	c744 <z_spin_lock_set_owner>
	bool ret = false;
    ec8a:	f04f 0900 	mov.w	r9, #0
	return k;
    ec8e:	e01a      	b.n	ecc6 <z_sched_wake+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec90:	f8df 908c 	ldr.w	r9, [pc, #140]	; ed20 <z_sched_wake+0xc0>
    ec94:	238e      	movs	r3, #142	; 0x8e
    ec96:	464a      	mov	r2, r9
    ec98:	4922      	ldr	r1, [pc, #136]	; (ed24 <z_sched_wake+0xc4>)
    ec9a:	4823      	ldr	r0, [pc, #140]	; (ed28 <z_sched_wake+0xc8>)
    ec9c:	f001 fd4c 	bl	10738 <assert_print>
    eca0:	491e      	ldr	r1, [pc, #120]	; (ed1c <z_sched_wake+0xbc>)
    eca2:	4822      	ldr	r0, [pc, #136]	; (ed2c <z_sched_wake+0xcc>)
    eca4:	f001 fd48 	bl	10738 <assert_print>
    eca8:	218e      	movs	r1, #142	; 0x8e
    ecaa:	4648      	mov	r0, r9
    ecac:	f001 fd3d 	bl	1072a <assert_post_action>
    ecb0:	e7e8      	b.n	ec84 <z_sched_wake+0x24>
	LOCKED(&sched_spinlock) {
    ecb2:	4634      	mov	r4, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ecb4:	4819      	ldr	r0, [pc, #100]	; (ed1c <z_sched_wake+0xbc>)
    ecb6:	f7fd fd35 	bl	c724 <z_spin_unlock_valid>
    ecba:	b1d8      	cbz	r0, ecf4 <z_sched_wake+0x94>
	__asm__ volatile(
    ecbc:	f384 8811 	msr	BASEPRI, r4
    ecc0:	f3bf 8f6f 	isb	sy
    ecc4:	2401      	movs	r4, #1
    ecc6:	bb34      	cbnz	r4, ed16 <z_sched_wake+0xb6>
		thread = _priq_wait_best(&wait_q->waitq);
    ecc8:	4628      	mov	r0, r5
    ecca:	f004 fc10 	bl	134ee <z_priq_dumb_best>

		if (thread != NULL) {
    ecce:	4604      	mov	r4, r0
    ecd0:	2800      	cmp	r0, #0
    ecd2:	d0ee      	beq.n	ecb2 <z_sched_wake+0x52>
    ecd4:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
    ecd8:	f8c0 8014 	str.w	r8, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    ecdc:	f004 fbf9 	bl	134d2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    ece0:	f104 0018 	add.w	r0, r4, #24
    ece4:	f000 f97a 	bl	efdc <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    ece8:	4620      	mov	r0, r4
    ecea:	f7ff f817 	bl	dd1c <ready_thread>
			ret = true;
    ecee:	f04f 0901 	mov.w	r9, #1
    ecf2:	e7de      	b.n	ecb2 <z_sched_wake+0x52>
    ecf4:	f8df a028 	ldr.w	sl, [pc, #40]	; ed20 <z_sched_wake+0xc0>
    ecf8:	23b9      	movs	r3, #185	; 0xb9
    ecfa:	4652      	mov	r2, sl
    ecfc:	490c      	ldr	r1, [pc, #48]	; (ed30 <z_sched_wake+0xd0>)
    ecfe:	480a      	ldr	r0, [pc, #40]	; (ed28 <z_sched_wake+0xc8>)
    ed00:	f001 fd1a 	bl	10738 <assert_print>
    ed04:	4905      	ldr	r1, [pc, #20]	; (ed1c <z_sched_wake+0xbc>)
    ed06:	480b      	ldr	r0, [pc, #44]	; (ed34 <z_sched_wake+0xd4>)
    ed08:	f001 fd16 	bl	10738 <assert_print>
    ed0c:	21b9      	movs	r1, #185	; 0xb9
    ed0e:	4650      	mov	r0, sl
    ed10:	f001 fd0b 	bl	1072a <assert_post_action>
    ed14:	e7d2      	b.n	ecbc <z_sched_wake+0x5c>
		}
	}

	return ret;
}
    ed16:	4648      	mov	r0, r9
    ed18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed1c:	20002784 	.word	0x20002784
    ed20:	00013f4c 	.word	0x00013f4c
    ed24:	00013fac 	.word	0x00013fac
    ed28:	00013d44 	.word	0x00013d44
    ed2c:	00013fc4 	.word	0x00013fc4
    ed30:	00013f7c 	.word	0x00013f7c
    ed34:	00013f94 	.word	0x00013f94

0000ed38 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    ed38:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    ed3c:	b083      	sub	sp, #12
    ed3e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    ed40:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    ed44:	e9cd bc00 	strd	fp, ip, [sp]
    ed48:	f7ff fa18 	bl	e17c <z_pend_curr>

	if (data != NULL) {
    ed4c:	b11c      	cbz	r4, ed56 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    ed4e:	4b03      	ldr	r3, [pc, #12]	; (ed5c <z_sched_wait+0x24>)
    ed50:	689b      	ldr	r3, [r3, #8]
    ed52:	695b      	ldr	r3, [r3, #20]
    ed54:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    ed56:	b003      	add	sp, #12
    ed58:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    ed5c:	20002734 	.word	0x20002734

0000ed60 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    ed60:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    ed62:	4806      	ldr	r0, [pc, #24]	; (ed7c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    ed64:	4a06      	ldr	r2, [pc, #24]	; (ed80 <z_data_copy+0x20>)
    ed66:	1a12      	subs	r2, r2, r0
    ed68:	4906      	ldr	r1, [pc, #24]	; (ed84 <z_data_copy+0x24>)
    ed6a:	f004 fada 	bl	13322 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    ed6e:	4a06      	ldr	r2, [pc, #24]	; (ed88 <z_data_copy+0x28>)
    ed70:	4906      	ldr	r1, [pc, #24]	; (ed8c <z_data_copy+0x2c>)
    ed72:	4807      	ldr	r0, [pc, #28]	; (ed90 <z_data_copy+0x30>)
    ed74:	f004 fad5 	bl	13322 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ed78:	bd08      	pop	{r3, pc}
    ed7a:	bf00      	nop
    ed7c:	20000000 	.word	0x20000000
    ed80:	20000300 	.word	0x20000300
    ed84:	00016d88 	.word	0x00016d88
    ed88:	00000000 	.word	0x00000000
    ed8c:	00016d88 	.word	0x00016d88
    ed90:	20000000 	.word	0x20000000

0000ed94 <first>:
	return list->head == list;
    ed94:	4b03      	ldr	r3, [pc, #12]	; (eda4 <first+0x10>)
    ed96:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ed98:	4298      	cmp	r0, r3
    ed9a:	d000      	beq.n	ed9e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    ed9c:	4770      	bx	lr
    ed9e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    eda0:	e7fc      	b.n	ed9c <first+0x8>
    eda2:	bf00      	nop
    eda4:	200001d4 	.word	0x200001d4

0000eda8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eda8:	b130      	cbz	r0, edb8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    edaa:	4a04      	ldr	r2, [pc, #16]	; (edbc <next+0x14>)
    edac:	6852      	ldr	r2, [r2, #4]
    edae:	4290      	cmp	r0, r2
    edb0:	d001      	beq.n	edb6 <next+0xe>
    edb2:	6800      	ldr	r0, [r0, #0]
    edb4:	4770      	bx	lr
    edb6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    edb8:	4770      	bx	lr
    edba:	bf00      	nop
    edbc:	200001d4 	.word	0x200001d4

0000edc0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    edc0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    edc2:	4b04      	ldr	r3, [pc, #16]	; (edd4 <elapsed+0x14>)
    edc4:	681b      	ldr	r3, [r3, #0]
    edc6:	b10b      	cbz	r3, edcc <elapsed+0xc>
    edc8:	2000      	movs	r0, #0
}
    edca:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    edcc:	f7f9 ffa4 	bl	8d18 <sys_clock_elapsed>
    edd0:	e7fb      	b.n	edca <elapsed+0xa>
    edd2:	bf00      	nop
    edd4:	20002788 	.word	0x20002788

0000edd8 <next_timeout>:

static int32_t next_timeout(void)
{
    edd8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    edda:	f7ff ffdb 	bl	ed94 <first>
    edde:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ede0:	f7ff ffee 	bl	edc0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    ede4:	b17c      	cbz	r4, ee06 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    ede6:	6923      	ldr	r3, [r4, #16]
    ede8:	6962      	ldr	r2, [r4, #20]
    edea:	1a1b      	subs	r3, r3, r0
    edec:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    edf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    edf4:	f172 0100 	sbcs.w	r1, r2, #0
    edf8:	da08      	bge.n	ee0c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    edfa:	2a00      	cmp	r2, #0
    edfc:	db01      	blt.n	ee02 <next_timeout+0x2a>
    edfe:	4618      	mov	r0, r3
    ee00:	e006      	b.n	ee10 <next_timeout+0x38>
    ee02:	2300      	movs	r3, #0
    ee04:	e7fb      	b.n	edfe <next_timeout+0x26>
		ret = MAX_WAIT;
    ee06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ee0a:	e001      	b.n	ee10 <next_timeout+0x38>
    ee0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ee10:	4b03      	ldr	r3, [pc, #12]	; (ee20 <next_timeout+0x48>)
    ee12:	691b      	ldr	r3, [r3, #16]
    ee14:	b113      	cbz	r3, ee1c <next_timeout+0x44>
    ee16:	4283      	cmp	r3, r0
    ee18:	da00      	bge.n	ee1c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    ee1a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    ee1c:	bd10      	pop	{r4, pc}
    ee1e:	bf00      	nop
    ee20:	20002734 	.word	0x20002734

0000ee24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ee24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ee28:	bf08      	it	eq
    ee2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ee2e:	f000 80ba 	beq.w	efa6 <z_add_timeout+0x182>
{
    ee32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee36:	4604      	mov	r4, r0
    ee38:	460f      	mov	r7, r1
    ee3a:	4616      	mov	r6, r2
    ee3c:	461d      	mov	r5, r3
	return node->next != NULL;
    ee3e:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    ee40:	b173      	cbz	r3, ee60 <z_add_timeout+0x3c>
    ee42:	f8df 8164 	ldr.w	r8, [pc, #356]	; efa8 <z_add_timeout+0x184>
    ee46:	2363      	movs	r3, #99	; 0x63
    ee48:	4642      	mov	r2, r8
    ee4a:	4958      	ldr	r1, [pc, #352]	; (efac <z_add_timeout+0x188>)
    ee4c:	4858      	ldr	r0, [pc, #352]	; (efb0 <z_add_timeout+0x18c>)
    ee4e:	f001 fc73 	bl	10738 <assert_print>
    ee52:	4858      	ldr	r0, [pc, #352]	; (efb4 <z_add_timeout+0x190>)
    ee54:	f001 fc70 	bl	10738 <assert_print>
    ee58:	2163      	movs	r1, #99	; 0x63
    ee5a:	4640      	mov	r0, r8
    ee5c:	f001 fc65 	bl	1072a <assert_post_action>
	to->fn = fn;
    ee60:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    ee62:	2700      	movs	r7, #0
	__asm__ volatile(
    ee64:	f04f 0320 	mov.w	r3, #32
    ee68:	f3ef 8a11 	mrs	sl, BASEPRI
    ee6c:	f383 8812 	msr	BASEPRI_MAX, r3
    ee70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ee74:	4850      	ldr	r0, [pc, #320]	; (efb8 <z_add_timeout+0x194>)
    ee76:	f7fd fc45 	bl	c704 <z_spin_lock_valid>
    ee7a:	b118      	cbz	r0, ee84 <z_add_timeout+0x60>
	z_spin_lock_set_owner(l);
    ee7c:	484e      	ldr	r0, [pc, #312]	; (efb8 <z_add_timeout+0x194>)
    ee7e:	f7fd fc61 	bl	c744 <z_spin_lock_set_owner>
	return k;
    ee82:	e03d      	b.n	ef00 <z_add_timeout+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ee84:	f8df 9134 	ldr.w	r9, [pc, #308]	; efbc <z_add_timeout+0x198>
    ee88:	238e      	movs	r3, #142	; 0x8e
    ee8a:	464a      	mov	r2, r9
    ee8c:	494c      	ldr	r1, [pc, #304]	; (efc0 <z_add_timeout+0x19c>)
    ee8e:	4848      	ldr	r0, [pc, #288]	; (efb0 <z_add_timeout+0x18c>)
    ee90:	f001 fc52 	bl	10738 <assert_print>
    ee94:	4948      	ldr	r1, [pc, #288]	; (efb8 <z_add_timeout+0x194>)
    ee96:	484b      	ldr	r0, [pc, #300]	; (efc4 <z_add_timeout+0x1a0>)
    ee98:	f001 fc4e 	bl	10738 <assert_print>
    ee9c:	218e      	movs	r1, #142	; 0x8e
    ee9e:	4648      	mov	r0, r9
    eea0:	f001 fc43 	bl	1072a <assert_post_action>
    eea4:	e7ea      	b.n	ee7c <z_add_timeout+0x58>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    eea6:	f116 0801 	adds.w	r8, r6, #1
    eeaa:	f145 0900 	adc.w	r9, r5, #0
    eeae:	f7ff ff87 	bl	edc0 <elapsed>
    eeb2:	eb18 0300 	adds.w	r3, r8, r0
    eeb6:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    eeba:	6123      	str	r3, [r4, #16]
    eebc:	6160      	str	r0, [r4, #20]
    eebe:	e03f      	b.n	ef40 <z_add_timeout+0x11c>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    eec0:	1a52      	subs	r2, r2, r1
    eec2:	eb67 0303 	sbc.w	r3, r7, r3
    eec6:	6102      	str	r2, [r0, #16]
    eec8:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    eeca:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    eecc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    eece:	6020      	str	r0, [r4, #0]
	prev->next = node;
    eed0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    eed2:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    eed4:	e005      	b.n	eee2 <z_add_timeout+0xbe>
	sys_dnode_t *const tail = list->tail;
    eed6:	4b3c      	ldr	r3, [pc, #240]	; (efc8 <z_add_timeout+0x1a4>)
    eed8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    eeda:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    eedc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    eede:	6014      	str	r4, [r2, #0]
	list->tail = node;
    eee0:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    eee2:	f7ff ff57 	bl	ed94 <first>
    eee6:	4284      	cmp	r4, r0
    eee8:	d03e      	beq.n	ef68 <z_add_timeout+0x144>
	LOCKED(&timeout_lock) {
    eeea:	46d0      	mov	r8, sl
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eeec:	4832      	ldr	r0, [pc, #200]	; (efb8 <z_add_timeout+0x194>)
    eeee:	f7fd fc19 	bl	c724 <z_spin_unlock_valid>
    eef2:	2800      	cmp	r0, #0
    eef4:	d045      	beq.n	ef82 <z_add_timeout+0x15e>
	__asm__ volatile(
    eef6:	f388 8811 	msr	BASEPRI, r8
    eefa:	f3bf 8f6f 	isb	sy
    eefe:	2701      	movs	r7, #1
    ef00:	2f00      	cmp	r7, #0
    ef02:	d14e      	bne.n	efa2 <z_add_timeout+0x17e>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ef04:	f06f 0101 	mvn.w	r1, #1
    ef08:	1b89      	subs	r1, r1, r6
    ef0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ef0e:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ef12:	2a00      	cmp	r2, #0
    ef14:	dbc7      	blt.n	eea6 <z_add_timeout+0x82>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ef16:	4a2d      	ldr	r2, [pc, #180]	; (efcc <z_add_timeout+0x1a8>)
    ef18:	6811      	ldr	r1, [r2, #0]
    ef1a:	6852      	ldr	r2, [r2, #4]
    ef1c:	1873      	adds	r3, r6, r1
    ef1e:	eb42 0205 	adc.w	r2, r2, r5
    ef22:	f06f 0101 	mvn.w	r1, #1
    ef26:	1ac9      	subs	r1, r1, r3
    ef28:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    ef2c:	4608      	mov	r0, r1
    ef2e:	461a      	mov	r2, r3
    ef30:	2901      	cmp	r1, #1
    ef32:	f173 0300 	sbcs.w	r3, r3, #0
    ef36:	da01      	bge.n	ef3c <z_add_timeout+0x118>
    ef38:	2001      	movs	r0, #1
    ef3a:	2200      	movs	r2, #0
    ef3c:	6120      	str	r0, [r4, #16]
    ef3e:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ef40:	f7ff ff28 	bl	ed94 <first>
    ef44:	2800      	cmp	r0, #0
    ef46:	d0c6      	beq.n	eed6 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    ef48:	6902      	ldr	r2, [r0, #16]
    ef4a:	6947      	ldr	r7, [r0, #20]
    ef4c:	6921      	ldr	r1, [r4, #16]
    ef4e:	6963      	ldr	r3, [r4, #20]
    ef50:	4291      	cmp	r1, r2
    ef52:	eb73 0e07 	sbcs.w	lr, r3, r7
    ef56:	dbb3      	blt.n	eec0 <z_add_timeout+0x9c>
			to->dticks -= t->dticks;
    ef58:	1a89      	subs	r1, r1, r2
    ef5a:	eb63 0307 	sbc.w	r3, r3, r7
    ef5e:	6121      	str	r1, [r4, #16]
    ef60:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ef62:	f7ff ff21 	bl	eda8 <next>
    ef66:	e7ed      	b.n	ef44 <z_add_timeout+0x120>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ef68:	f7ff ff36 	bl	edd8 <next_timeout>

			if (next_time == 0 ||
    ef6c:	4603      	mov	r3, r0
    ef6e:	b118      	cbz	r0, ef78 <z_add_timeout+0x154>
			    _current_cpu->slice_ticks != next_time) {
    ef70:	4a17      	ldr	r2, [pc, #92]	; (efd0 <z_add_timeout+0x1ac>)
    ef72:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    ef74:	4282      	cmp	r2, r0
    ef76:	d0b8      	beq.n	eeea <z_add_timeout+0xc6>
				sys_clock_set_timeout(next_time, false);
    ef78:	2100      	movs	r1, #0
    ef7a:	4618      	mov	r0, r3
    ef7c:	f7f9 fe9a 	bl	8cb4 <sys_clock_set_timeout>
    ef80:	e7b3      	b.n	eeea <z_add_timeout+0xc6>
    ef82:	4f0e      	ldr	r7, [pc, #56]	; (efbc <z_add_timeout+0x198>)
    ef84:	23b9      	movs	r3, #185	; 0xb9
    ef86:	463a      	mov	r2, r7
    ef88:	4912      	ldr	r1, [pc, #72]	; (efd4 <z_add_timeout+0x1b0>)
    ef8a:	4809      	ldr	r0, [pc, #36]	; (efb0 <z_add_timeout+0x18c>)
    ef8c:	f001 fbd4 	bl	10738 <assert_print>
    ef90:	4909      	ldr	r1, [pc, #36]	; (efb8 <z_add_timeout+0x194>)
    ef92:	4811      	ldr	r0, [pc, #68]	; (efd8 <z_add_timeout+0x1b4>)
    ef94:	f001 fbd0 	bl	10738 <assert_print>
    ef98:	21b9      	movs	r1, #185	; 0xb9
    ef9a:	4638      	mov	r0, r7
    ef9c:	f001 fbc5 	bl	1072a <assert_post_action>
    efa0:	e7a9      	b.n	eef6 <z_add_timeout+0xd2>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    efa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    efa6:	4770      	bx	lr
    efa8:	00016b00 	.word	0x00016b00
    efac:	00016b24 	.word	0x00016b24
    efb0:	00013d44 	.word	0x00013d44
    efb4:	00016894 	.word	0x00016894
    efb8:	2000278c 	.word	0x2000278c
    efbc:	00013f4c 	.word	0x00013f4c
    efc0:	00013fac 	.word	0x00013fac
    efc4:	00013fc4 	.word	0x00013fc4
    efc8:	200001d4 	.word	0x200001d4
    efcc:	200018f8 	.word	0x200018f8
    efd0:	20002734 	.word	0x20002734
    efd4:	00013f7c 	.word	0x00013f7c
    efd8:	00013f94 	.word	0x00013f94

0000efdc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    efdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efe0:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    efe2:	2400      	movs	r4, #0
	__asm__ volatile(
    efe4:	f04f 0320 	mov.w	r3, #32
    efe8:	f3ef 8711 	mrs	r7, BASEPRI
    efec:	f383 8812 	msr	BASEPRI_MAX, r3
    eff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eff4:	4820      	ldr	r0, [pc, #128]	; (f078 <z_abort_timeout+0x9c>)
    eff6:	f7fd fb85 	bl	c704 <z_spin_lock_valid>
    effa:	b128      	cbz	r0, f008 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    effc:	481e      	ldr	r0, [pc, #120]	; (f078 <z_abort_timeout+0x9c>)
    effe:	f7fd fba1 	bl	c744 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    f002:	f06f 0815 	mvn.w	r8, #21
	return k;
    f006:	e019      	b.n	f03c <z_abort_timeout+0x60>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f008:	4e1c      	ldr	r6, [pc, #112]	; (f07c <z_abort_timeout+0xa0>)
    f00a:	238e      	movs	r3, #142	; 0x8e
    f00c:	4632      	mov	r2, r6
    f00e:	491c      	ldr	r1, [pc, #112]	; (f080 <z_abort_timeout+0xa4>)
    f010:	481c      	ldr	r0, [pc, #112]	; (f084 <z_abort_timeout+0xa8>)
    f012:	f001 fb91 	bl	10738 <assert_print>
    f016:	4918      	ldr	r1, [pc, #96]	; (f078 <z_abort_timeout+0x9c>)
    f018:	481b      	ldr	r0, [pc, #108]	; (f088 <z_abort_timeout+0xac>)
    f01a:	f001 fb8d 	bl	10738 <assert_print>
    f01e:	218e      	movs	r1, #142	; 0x8e
    f020:	4630      	mov	r0, r6
    f022:	f001 fb82 	bl	1072a <assert_post_action>
    f026:	e7e9      	b.n	effc <z_abort_timeout+0x20>
	LOCKED(&timeout_lock) {
    f028:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f02a:	4813      	ldr	r0, [pc, #76]	; (f078 <z_abort_timeout+0x9c>)
    f02c:	f7fd fb7a 	bl	c724 <z_spin_unlock_valid>
    f030:	b170      	cbz	r0, f050 <z_abort_timeout+0x74>
	__asm__ volatile(
    f032:	f384 8811 	msr	BASEPRI, r4
    f036:	f3bf 8f6f 	isb	sy
    f03a:	2401      	movs	r4, #1
    f03c:	4626      	mov	r6, r4
    f03e:	b9bc      	cbnz	r4, f070 <z_abort_timeout+0x94>
	return node->next != NULL;
    f040:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    f042:	2b00      	cmp	r3, #0
    f044:	d0f0      	beq.n	f028 <z_abort_timeout+0x4c>
			remove_timeout(to);
    f046:	4628      	mov	r0, r5
    f048:	f004 fa71 	bl	1352e <remove_timeout>
			ret = 0;
    f04c:	46b0      	mov	r8, r6
    f04e:	e7eb      	b.n	f028 <z_abort_timeout+0x4c>
    f050:	4e0a      	ldr	r6, [pc, #40]	; (f07c <z_abort_timeout+0xa0>)
    f052:	23b9      	movs	r3, #185	; 0xb9
    f054:	4632      	mov	r2, r6
    f056:	490d      	ldr	r1, [pc, #52]	; (f08c <z_abort_timeout+0xb0>)
    f058:	480a      	ldr	r0, [pc, #40]	; (f084 <z_abort_timeout+0xa8>)
    f05a:	f001 fb6d 	bl	10738 <assert_print>
    f05e:	4906      	ldr	r1, [pc, #24]	; (f078 <z_abort_timeout+0x9c>)
    f060:	480b      	ldr	r0, [pc, #44]	; (f090 <z_abort_timeout+0xb4>)
    f062:	f001 fb69 	bl	10738 <assert_print>
    f066:	21b9      	movs	r1, #185	; 0xb9
    f068:	4630      	mov	r0, r6
    f06a:	f001 fb5e 	bl	1072a <assert_post_action>
    f06e:	e7e0      	b.n	f032 <z_abort_timeout+0x56>
		}
	}

	return ret;
}
    f070:	4640      	mov	r0, r8
    f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f076:	bf00      	nop
    f078:	2000278c 	.word	0x2000278c
    f07c:	00013f4c 	.word	0x00013f4c
    f080:	00013fac 	.word	0x00013fac
    f084:	00013d44 	.word	0x00013d44
    f088:	00013fc4 	.word	0x00013fc4
    f08c:	00013f7c 	.word	0x00013f7c
    f090:	00013f94 	.word	0x00013f94

0000f094 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    f096:	2500      	movs	r5, #0
	__asm__ volatile(
    f098:	f04f 0320 	mov.w	r3, #32
    f09c:	f3ef 8611 	mrs	r6, BASEPRI
    f0a0:	f383 8812 	msr	BASEPRI_MAX, r3
    f0a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f0a8:	481d      	ldr	r0, [pc, #116]	; (f120 <z_get_next_timeout_expiry+0x8c>)
    f0aa:	f7fd fb2b 	bl	c704 <z_spin_lock_valid>
    f0ae:	b128      	cbz	r0, f0bc <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    f0b0:	481b      	ldr	r0, [pc, #108]	; (f120 <z_get_next_timeout_expiry+0x8c>)
    f0b2:	f7fd fb47 	bl	c744 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    f0b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    f0ba:	e014      	b.n	f0e6 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f0bc:	4c19      	ldr	r4, [pc, #100]	; (f124 <z_get_next_timeout_expiry+0x90>)
    f0be:	238e      	movs	r3, #142	; 0x8e
    f0c0:	4622      	mov	r2, r4
    f0c2:	4919      	ldr	r1, [pc, #100]	; (f128 <z_get_next_timeout_expiry+0x94>)
    f0c4:	4819      	ldr	r0, [pc, #100]	; (f12c <z_get_next_timeout_expiry+0x98>)
    f0c6:	f001 fb37 	bl	10738 <assert_print>
    f0ca:	4915      	ldr	r1, [pc, #84]	; (f120 <z_get_next_timeout_expiry+0x8c>)
    f0cc:	4818      	ldr	r0, [pc, #96]	; (f130 <z_get_next_timeout_expiry+0x9c>)
    f0ce:	f001 fb33 	bl	10738 <assert_print>
    f0d2:	218e      	movs	r1, #142	; 0x8e
    f0d4:	4620      	mov	r0, r4
    f0d6:	f001 fb28 	bl	1072a <assert_post_action>
    f0da:	e7e9      	b.n	f0b0 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    f0dc:	f385 8811 	msr	BASEPRI, r5
    f0e0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f0e4:	2501      	movs	r5, #1
    f0e6:	b9c5      	cbnz	r5, f11a <z_get_next_timeout_expiry+0x86>
		ret = next_timeout();
    f0e8:	f7ff fe76 	bl	edd8 <next_timeout>
    f0ec:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    f0ee:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f0f0:	480b      	ldr	r0, [pc, #44]	; (f120 <z_get_next_timeout_expiry+0x8c>)
    f0f2:	f7fd fb17 	bl	c724 <z_spin_unlock_valid>
    f0f6:	2800      	cmp	r0, #0
    f0f8:	d1f0      	bne.n	f0dc <z_get_next_timeout_expiry+0x48>
    f0fa:	4f0a      	ldr	r7, [pc, #40]	; (f124 <z_get_next_timeout_expiry+0x90>)
    f0fc:	23b9      	movs	r3, #185	; 0xb9
    f0fe:	463a      	mov	r2, r7
    f100:	490c      	ldr	r1, [pc, #48]	; (f134 <z_get_next_timeout_expiry+0xa0>)
    f102:	480a      	ldr	r0, [pc, #40]	; (f12c <z_get_next_timeout_expiry+0x98>)
    f104:	f001 fb18 	bl	10738 <assert_print>
    f108:	4905      	ldr	r1, [pc, #20]	; (f120 <z_get_next_timeout_expiry+0x8c>)
    f10a:	480b      	ldr	r0, [pc, #44]	; (f138 <z_get_next_timeout_expiry+0xa4>)
    f10c:	f001 fb14 	bl	10738 <assert_print>
    f110:	21b9      	movs	r1, #185	; 0xb9
    f112:	4638      	mov	r0, r7
    f114:	f001 fb09 	bl	1072a <assert_post_action>
    f118:	e7e0      	b.n	f0dc <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    f11a:	4620      	mov	r0, r4
    f11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f11e:	bf00      	nop
    f120:	2000278c 	.word	0x2000278c
    f124:	00013f4c 	.word	0x00013f4c
    f128:	00013fac 	.word	0x00013fac
    f12c:	00013d44 	.word	0x00013d44
    f130:	00013fc4 	.word	0x00013fc4
    f134:	00013f7c 	.word	0x00013f7c
    f138:	00013f94 	.word	0x00013f94

0000f13c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f140:	4606      	mov	r6, r0
    f142:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    f144:	2500      	movs	r5, #0
	__asm__ volatile(
    f146:	f04f 0320 	mov.w	r3, #32
    f14a:	f3ef 8711 	mrs	r7, BASEPRI
    f14e:	f383 8812 	msr	BASEPRI_MAX, r3
    f152:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f156:	4826      	ldr	r0, [pc, #152]	; (f1f0 <z_set_timeout_expiry+0xb4>)
    f158:	f7fd fad4 	bl	c704 <z_spin_lock_valid>
    f15c:	b118      	cbz	r0, f166 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    f15e:	4824      	ldr	r0, [pc, #144]	; (f1f0 <z_set_timeout_expiry+0xb4>)
    f160:	f7fd faf0 	bl	c744 <z_spin_lock_set_owner>
	return k;
    f164:	e01f      	b.n	f1a6 <z_set_timeout_expiry+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f166:	4c23      	ldr	r4, [pc, #140]	; (f1f4 <z_set_timeout_expiry+0xb8>)
    f168:	238e      	movs	r3, #142	; 0x8e
    f16a:	4622      	mov	r2, r4
    f16c:	4922      	ldr	r1, [pc, #136]	; (f1f8 <z_set_timeout_expiry+0xbc>)
    f16e:	4823      	ldr	r0, [pc, #140]	; (f1fc <z_set_timeout_expiry+0xc0>)
    f170:	f001 fae2 	bl	10738 <assert_print>
    f174:	491e      	ldr	r1, [pc, #120]	; (f1f0 <z_set_timeout_expiry+0xb4>)
    f176:	4822      	ldr	r0, [pc, #136]	; (f200 <z_set_timeout_expiry+0xc4>)
    f178:	f001 fade 	bl	10738 <assert_print>
    f17c:	218e      	movs	r1, #142	; 0x8e
    f17e:	4620      	mov	r0, r4
    f180:	f001 fad3 	bl	1072a <assert_post_action>
    f184:	e7eb      	b.n	f15e <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    f186:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    f188:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    f18c:	2801      	cmp	r0, #1
    f18e:	dd00      	ble.n	f192 <z_set_timeout_expiry+0x56>
    f190:	b9a4      	cbnz	r4, f1bc <z_set_timeout_expiry+0x80>
	LOCKED(&timeout_lock) {
    f192:	463c      	mov	r4, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f194:	4816      	ldr	r0, [pc, #88]	; (f1f0 <z_set_timeout_expiry+0xb4>)
    f196:	f7fd fac5 	bl	c724 <z_spin_unlock_valid>
    f19a:	b1b0      	cbz	r0, f1ca <z_set_timeout_expiry+0x8e>
	__asm__ volatile(
    f19c:	f384 8811 	msr	BASEPRI, r4
    f1a0:	f3bf 8f6f 	isb	sy
    f1a4:	2501      	movs	r5, #1
    f1a6:	462c      	mov	r4, r5
    f1a8:	b9fd      	cbnz	r5, f1ea <z_set_timeout_expiry+0xae>
		int next_to = next_timeout();
    f1aa:	f7ff fe15 	bl	edd8 <next_timeout>
			      || (ticks <= next_to);
    f1ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f1b2:	d0e8      	beq.n	f186 <z_set_timeout_expiry+0x4a>
    f1b4:	42b0      	cmp	r0, r6
    f1b6:	dbe7      	blt.n	f188 <z_set_timeout_expiry+0x4c>
    f1b8:	2401      	movs	r4, #1
    f1ba:	e7e5      	b.n	f188 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    f1bc:	4641      	mov	r1, r8
    f1be:	42b0      	cmp	r0, r6
    f1c0:	bfa8      	it	ge
    f1c2:	4630      	movge	r0, r6
    f1c4:	f7f9 fd76 	bl	8cb4 <sys_clock_set_timeout>
    f1c8:	e7e3      	b.n	f192 <z_set_timeout_expiry+0x56>
    f1ca:	4d0a      	ldr	r5, [pc, #40]	; (f1f4 <z_set_timeout_expiry+0xb8>)
    f1cc:	23b9      	movs	r3, #185	; 0xb9
    f1ce:	462a      	mov	r2, r5
    f1d0:	490c      	ldr	r1, [pc, #48]	; (f204 <z_set_timeout_expiry+0xc8>)
    f1d2:	480a      	ldr	r0, [pc, #40]	; (f1fc <z_set_timeout_expiry+0xc0>)
    f1d4:	f001 fab0 	bl	10738 <assert_print>
    f1d8:	4905      	ldr	r1, [pc, #20]	; (f1f0 <z_set_timeout_expiry+0xb4>)
    f1da:	480b      	ldr	r0, [pc, #44]	; (f208 <z_set_timeout_expiry+0xcc>)
    f1dc:	f001 faac 	bl	10738 <assert_print>
    f1e0:	21b9      	movs	r1, #185	; 0xb9
    f1e2:	4628      	mov	r0, r5
    f1e4:	f001 faa1 	bl	1072a <assert_post_action>
    f1e8:	e7d8      	b.n	f19c <z_set_timeout_expiry+0x60>
		}
	}
}
    f1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1ee:	bf00      	nop
    f1f0:	2000278c 	.word	0x2000278c
    f1f4:	00013f4c 	.word	0x00013f4c
    f1f8:	00013fac 	.word	0x00013fac
    f1fc:	00013d44 	.word	0x00013d44
    f200:	00013fc4 	.word	0x00013fc4
    f204:	00013f7c 	.word	0x00013f7c
    f208:	00013f94 	.word	0x00013f94

0000f20c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    f20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f20e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f210:	f7fe fcf8 	bl	dc04 <z_time_slice>
	__asm__ volatile(
    f214:	f04f 0320 	mov.w	r3, #32
    f218:	f3ef 8511 	mrs	r5, BASEPRI
    f21c:	f383 8812 	msr	BASEPRI_MAX, r3
    f220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f224:	4854      	ldr	r0, [pc, #336]	; (f378 <sys_clock_announce+0x16c>)
    f226:	f7fd fa6d 	bl	c704 <z_spin_lock_valid>
    f22a:	b128      	cbz	r0, f238 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    f22c:	4852      	ldr	r0, [pc, #328]	; (f378 <sys_clock_announce+0x16c>)
    f22e:	f7fd fa89 	bl	c744 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    f232:	4b52      	ldr	r3, [pc, #328]	; (f37c <sys_clock_announce+0x170>)
    f234:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f236:	e026      	b.n	f286 <sys_clock_announce+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f238:	4e51      	ldr	r6, [pc, #324]	; (f380 <sys_clock_announce+0x174>)
    f23a:	238e      	movs	r3, #142	; 0x8e
    f23c:	4632      	mov	r2, r6
    f23e:	4951      	ldr	r1, [pc, #324]	; (f384 <sys_clock_announce+0x178>)
    f240:	4851      	ldr	r0, [pc, #324]	; (f388 <sys_clock_announce+0x17c>)
    f242:	f001 fa79 	bl	10738 <assert_print>
    f246:	494c      	ldr	r1, [pc, #304]	; (f378 <sys_clock_announce+0x16c>)
    f248:	4850      	ldr	r0, [pc, #320]	; (f38c <sys_clock_announce+0x180>)
    f24a:	f001 fa75 	bl	10738 <assert_print>
    f24e:	218e      	movs	r1, #142	; 0x8e
    f250:	4630      	mov	r0, r6
    f252:	f001 fa6a 	bl	1072a <assert_post_action>
    f256:	e7e9      	b.n	f22c <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f258:	4f49      	ldr	r7, [pc, #292]	; (f380 <sys_clock_announce+0x174>)
    f25a:	23b9      	movs	r3, #185	; 0xb9
    f25c:	463a      	mov	r2, r7
    f25e:	494c      	ldr	r1, [pc, #304]	; (f390 <sys_clock_announce+0x184>)
    f260:	4849      	ldr	r0, [pc, #292]	; (f388 <sys_clock_announce+0x17c>)
    f262:	f001 fa69 	bl	10738 <assert_print>
    f266:	4944      	ldr	r1, [pc, #272]	; (f378 <sys_clock_announce+0x16c>)
    f268:	484a      	ldr	r0, [pc, #296]	; (f394 <sys_clock_announce+0x188>)
    f26a:	f001 fa65 	bl	10738 <assert_print>
    f26e:	21b9      	movs	r1, #185	; 0xb9
    f270:	4638      	mov	r0, r7
    f272:	f001 fa5a 	bl	1072a <assert_post_action>
    f276:	e027      	b.n	f2c8 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    f278:	483f      	ldr	r0, [pc, #252]	; (f378 <sys_clock_announce+0x16c>)
    f27a:	f7fd fa63 	bl	c744 <z_spin_lock_set_owner>
		remove_timeout(t);

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    f27e:	4a3f      	ldr	r2, [pc, #252]	; (f37c <sys_clock_announce+0x170>)
    f280:	6813      	ldr	r3, [r2, #0]
    f282:	1b9b      	subs	r3, r3, r6
    f284:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    f286:	f7ff fd85 	bl	ed94 <first>
    f28a:	4604      	mov	r4, r0
    f28c:	2800      	cmp	r0, #0
    f28e:	d03f      	beq.n	f310 <sys_clock_announce+0x104>
    f290:	6906      	ldr	r6, [r0, #16]
    f292:	6941      	ldr	r1, [r0, #20]
    f294:	4b39      	ldr	r3, [pc, #228]	; (f37c <sys_clock_announce+0x170>)
    f296:	681a      	ldr	r2, [r3, #0]
    f298:	17d3      	asrs	r3, r2, #31
    f29a:	42b2      	cmp	r2, r6
    f29c:	418b      	sbcs	r3, r1
    f29e:	db37      	blt.n	f310 <sys_clock_announce+0x104>
		curr_tick += dt;
    f2a0:	4a3d      	ldr	r2, [pc, #244]	; (f398 <sys_clock_announce+0x18c>)
    f2a2:	6813      	ldr	r3, [r2, #0]
    f2a4:	6851      	ldr	r1, [r2, #4]
    f2a6:	199b      	adds	r3, r3, r6
    f2a8:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    f2ac:	6013      	str	r3, [r2, #0]
    f2ae:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    f2b0:	2200      	movs	r2, #0
    f2b2:	2300      	movs	r3, #0
    f2b4:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    f2b8:	4620      	mov	r0, r4
    f2ba:	f004 f938 	bl	1352e <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f2be:	482e      	ldr	r0, [pc, #184]	; (f378 <sys_clock_announce+0x16c>)
    f2c0:	f7fd fa30 	bl	c724 <z_spin_unlock_valid>
    f2c4:	2800      	cmp	r0, #0
    f2c6:	d0c7      	beq.n	f258 <sys_clock_announce+0x4c>
	__asm__ volatile(
    f2c8:	f385 8811 	msr	BASEPRI, r5
    f2cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f2d0:	68a3      	ldr	r3, [r4, #8]
    f2d2:	4620      	mov	r0, r4
    f2d4:	4798      	blx	r3
	__asm__ volatile(
    f2d6:	f04f 0320 	mov.w	r3, #32
    f2da:	f3ef 8511 	mrs	r5, BASEPRI
    f2de:	f383 8812 	msr	BASEPRI_MAX, r3
    f2e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f2e6:	4824      	ldr	r0, [pc, #144]	; (f378 <sys_clock_announce+0x16c>)
    f2e8:	f7fd fa0c 	bl	c704 <z_spin_lock_valid>
    f2ec:	2800      	cmp	r0, #0
    f2ee:	d1c3      	bne.n	f278 <sys_clock_announce+0x6c>
    f2f0:	4c23      	ldr	r4, [pc, #140]	; (f380 <sys_clock_announce+0x174>)
    f2f2:	238e      	movs	r3, #142	; 0x8e
    f2f4:	4622      	mov	r2, r4
    f2f6:	4923      	ldr	r1, [pc, #140]	; (f384 <sys_clock_announce+0x178>)
    f2f8:	4823      	ldr	r0, [pc, #140]	; (f388 <sys_clock_announce+0x17c>)
    f2fa:	f001 fa1d 	bl	10738 <assert_print>
    f2fe:	491e      	ldr	r1, [pc, #120]	; (f378 <sys_clock_announce+0x16c>)
    f300:	4822      	ldr	r0, [pc, #136]	; (f38c <sys_clock_announce+0x180>)
    f302:	f001 fa19 	bl	10738 <assert_print>
    f306:	218e      	movs	r1, #142	; 0x8e
    f308:	4620      	mov	r0, r4
    f30a:	f001 fa0e 	bl	1072a <assert_post_action>
    f30e:	e7b3      	b.n	f278 <sys_clock_announce+0x6c>
	}

	if (first() != NULL) {
    f310:	b144      	cbz	r4, f324 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    f312:	6923      	ldr	r3, [r4, #16]
    f314:	6962      	ldr	r2, [r4, #20]
    f316:	4919      	ldr	r1, [pc, #100]	; (f37c <sys_clock_announce+0x170>)
    f318:	6809      	ldr	r1, [r1, #0]
    f31a:	1a5b      	subs	r3, r3, r1
    f31c:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    f320:	6123      	str	r3, [r4, #16]
    f322:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    f324:	4a1c      	ldr	r2, [pc, #112]	; (f398 <sys_clock_announce+0x18c>)
    f326:	4e15      	ldr	r6, [pc, #84]	; (f37c <sys_clock_announce+0x170>)
    f328:	6830      	ldr	r0, [r6, #0]
    f32a:	6813      	ldr	r3, [r2, #0]
    f32c:	6851      	ldr	r1, [r2, #4]
    f32e:	181b      	adds	r3, r3, r0
    f330:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    f334:	6013      	str	r3, [r2, #0]
    f336:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    f338:	2400      	movs	r4, #0
    f33a:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    f33c:	f7ff fd4c 	bl	edd8 <next_timeout>
    f340:	4621      	mov	r1, r4
    f342:	f7f9 fcb7 	bl	8cb4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f346:	480c      	ldr	r0, [pc, #48]	; (f378 <sys_clock_announce+0x16c>)
    f348:	f7fd f9ec 	bl	c724 <z_spin_unlock_valid>
    f34c:	b120      	cbz	r0, f358 <sys_clock_announce+0x14c>
	__asm__ volatile(
    f34e:	f385 8811 	msr	BASEPRI, r5
    f352:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f358:	4c09      	ldr	r4, [pc, #36]	; (f380 <sys_clock_announce+0x174>)
    f35a:	23b9      	movs	r3, #185	; 0xb9
    f35c:	4622      	mov	r2, r4
    f35e:	490c      	ldr	r1, [pc, #48]	; (f390 <sys_clock_announce+0x184>)
    f360:	4809      	ldr	r0, [pc, #36]	; (f388 <sys_clock_announce+0x17c>)
    f362:	f001 f9e9 	bl	10738 <assert_print>
    f366:	4904      	ldr	r1, [pc, #16]	; (f378 <sys_clock_announce+0x16c>)
    f368:	480a      	ldr	r0, [pc, #40]	; (f394 <sys_clock_announce+0x188>)
    f36a:	f001 f9e5 	bl	10738 <assert_print>
    f36e:	21b9      	movs	r1, #185	; 0xb9
    f370:	4620      	mov	r0, r4
    f372:	f001 f9da 	bl	1072a <assert_post_action>
    f376:	e7ea      	b.n	f34e <sys_clock_announce+0x142>
    f378:	2000278c 	.word	0x2000278c
    f37c:	20002788 	.word	0x20002788
    f380:	00013f4c 	.word	0x00013f4c
    f384:	00013fac 	.word	0x00013fac
    f388:	00013d44 	.word	0x00013d44
    f38c:	00013fc4 	.word	0x00013fc4
    f390:	00013f7c 	.word	0x00013f7c
    f394:	00013f94 	.word	0x00013f94
    f398:	200018f8 	.word	0x200018f8

0000f39c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    f3a0:	2700      	movs	r7, #0
	__asm__ volatile(
    f3a2:	f04f 0320 	mov.w	r3, #32
    f3a6:	f3ef 8611 	mrs	r6, BASEPRI
    f3aa:	f383 8812 	msr	BASEPRI_MAX, r3
    f3ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f3b2:	4821      	ldr	r0, [pc, #132]	; (f438 <sys_clock_tick_get+0x9c>)
    f3b4:	f7fd f9a6 	bl	c704 <z_spin_lock_valid>
    f3b8:	b128      	cbz	r0, f3c6 <sys_clock_tick_get+0x2a>
	z_spin_lock_set_owner(l);
    f3ba:	481f      	ldr	r0, [pc, #124]	; (f438 <sys_clock_tick_get+0x9c>)
    f3bc:	f7fd f9c2 	bl	c744 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    f3c0:	2500      	movs	r5, #0
    f3c2:	462c      	mov	r4, r5
	return k;
    f3c4:	e014      	b.n	f3f0 <sys_clock_tick_get+0x54>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f3c6:	4c1d      	ldr	r4, [pc, #116]	; (f43c <sys_clock_tick_get+0xa0>)
    f3c8:	238e      	movs	r3, #142	; 0x8e
    f3ca:	4622      	mov	r2, r4
    f3cc:	491c      	ldr	r1, [pc, #112]	; (f440 <sys_clock_tick_get+0xa4>)
    f3ce:	481d      	ldr	r0, [pc, #116]	; (f444 <sys_clock_tick_get+0xa8>)
    f3d0:	f001 f9b2 	bl	10738 <assert_print>
    f3d4:	4918      	ldr	r1, [pc, #96]	; (f438 <sys_clock_tick_get+0x9c>)
    f3d6:	481c      	ldr	r0, [pc, #112]	; (f448 <sys_clock_tick_get+0xac>)
    f3d8:	f001 f9ae 	bl	10738 <assert_print>
    f3dc:	218e      	movs	r1, #142	; 0x8e
    f3de:	4620      	mov	r0, r4
    f3e0:	f001 f9a3 	bl	1072a <assert_post_action>
    f3e4:	e7e9      	b.n	f3ba <sys_clock_tick_get+0x1e>
	__asm__ volatile(
    f3e6:	f387 8811 	msr	BASEPRI, r7
    f3ea:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f3ee:	2701      	movs	r7, #1
    f3f0:	b9f7      	cbnz	r7, f430 <sys_clock_tick_get+0x94>
		t = curr_tick + elapsed();
    f3f2:	f7ff fce5 	bl	edc0 <elapsed>
    f3f6:	4a15      	ldr	r2, [pc, #84]	; (f44c <sys_clock_tick_get+0xb0>)
    f3f8:	6815      	ldr	r5, [r2, #0]
    f3fa:	6854      	ldr	r4, [r2, #4]
    f3fc:	1945      	adds	r5, r0, r5
    f3fe:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
	LOCKED(&timeout_lock) {
    f402:	4637      	mov	r7, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f404:	480c      	ldr	r0, [pc, #48]	; (f438 <sys_clock_tick_get+0x9c>)
    f406:	f7fd f98d 	bl	c724 <z_spin_unlock_valid>
    f40a:	2800      	cmp	r0, #0
    f40c:	d1eb      	bne.n	f3e6 <sys_clock_tick_get+0x4a>
    f40e:	f8df 802c 	ldr.w	r8, [pc, #44]	; f43c <sys_clock_tick_get+0xa0>
    f412:	23b9      	movs	r3, #185	; 0xb9
    f414:	4642      	mov	r2, r8
    f416:	490e      	ldr	r1, [pc, #56]	; (f450 <sys_clock_tick_get+0xb4>)
    f418:	480a      	ldr	r0, [pc, #40]	; (f444 <sys_clock_tick_get+0xa8>)
    f41a:	f001 f98d 	bl	10738 <assert_print>
    f41e:	4906      	ldr	r1, [pc, #24]	; (f438 <sys_clock_tick_get+0x9c>)
    f420:	480c      	ldr	r0, [pc, #48]	; (f454 <sys_clock_tick_get+0xb8>)
    f422:	f001 f989 	bl	10738 <assert_print>
    f426:	21b9      	movs	r1, #185	; 0xb9
    f428:	4640      	mov	r0, r8
    f42a:	f001 f97e 	bl	1072a <assert_post_action>
    f42e:	e7da      	b.n	f3e6 <sys_clock_tick_get+0x4a>
	}
	return t;
}
    f430:	4628      	mov	r0, r5
    f432:	4621      	mov	r1, r4
    f434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f438:	2000278c 	.word	0x2000278c
    f43c:	00013f4c 	.word	0x00013f4c
    f440:	00013fac 	.word	0x00013fac
    f444:	00013d44 	.word	0x00013d44
    f448:	00013fc4 	.word	0x00013fc4
    f44c:	200018f8 	.word	0x200018f8
    f450:	00013f7c 	.word	0x00013f7c
    f454:	00013f94 	.word	0x00013f94

0000f458 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    f458:	b570      	push	{r4, r5, r6, lr}
    f45a:	4604      	mov	r4, r0
	__asm__ volatile(
    f45c:	f04f 0320 	mov.w	r3, #32
    f460:	f3ef 8611 	mrs	r6, BASEPRI
    f464:	f383 8812 	msr	BASEPRI_MAX, r3
    f468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f46c:	4868      	ldr	r0, [pc, #416]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f46e:	f7fd f949 	bl	c704 <z_spin_lock_valid>
    f472:	2800      	cmp	r0, #0
    f474:	d049      	beq.n	f50a <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    f476:	4866      	ldr	r0, [pc, #408]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f478:	f7fd f964 	bl	c744 <z_spin_lock_set_owner>
	return k;
    f47c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    f47e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f482:	ea52 0103 	orrs.w	r1, r2, r3
    f486:	d005      	beq.n	f494 <z_timer_expiration_handler+0x3c>
    f488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f48c:	bf08      	it	eq
    f48e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f492:	d14a      	bne.n	f52a <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    f494:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f496:	3301      	adds	r3, #1
    f498:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    f49a:	6a23      	ldr	r3, [r4, #32]
    f49c:	b1db      	cbz	r3, f4d6 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f49e:	485c      	ldr	r0, [pc, #368]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f4a0:	f7fd f940 	bl	c724 <z_spin_unlock_valid>
    f4a4:	2800      	cmp	r0, #0
    f4a6:	d069      	beq.n	f57c <z_timer_expiration_handler+0x124>
	__asm__ volatile(
    f4a8:	f386 8811 	msr	BASEPRI, r6
    f4ac:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    f4b0:	6a23      	ldr	r3, [r4, #32]
    f4b2:	4620      	mov	r0, r4
    f4b4:	4798      	blx	r3
	__asm__ volatile(
    f4b6:	f04f 0320 	mov.w	r3, #32
    f4ba:	f3ef 8511 	mrs	r5, BASEPRI
    f4be:	f383 8812 	msr	BASEPRI_MAX, r3
    f4c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f4c6:	4852      	ldr	r0, [pc, #328]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f4c8:	f7fd f91c 	bl	c704 <z_spin_lock_valid>
    f4cc:	2800      	cmp	r0, #0
    f4ce:	d065      	beq.n	f59c <z_timer_expiration_handler+0x144>
	z_spin_lock_set_owner(l);
    f4d0:	484f      	ldr	r0, [pc, #316]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f4d2:	f7fd f937 	bl	c744 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f4d6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    f4da:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f4dc:	42a3      	cmp	r3, r4
    f4de:	d06d      	beq.n	f5bc <z_timer_expiration_handler+0x164>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    f4e0:	2c00      	cmp	r4, #0
    f4e2:	d06b      	beq.n	f5bc <z_timer_expiration_handler+0x164>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    f4e4:	4620      	mov	r0, r4
    f4e6:	f7fe f9cd 	bl	d884 <z_unpend_thread_no_timeout>
    f4ea:	2300      	movs	r3, #0
    f4ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4f0:	4847      	ldr	r0, [pc, #284]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f4f2:	f7fd f917 	bl	c724 <z_spin_unlock_valid>
    f4f6:	2800      	cmp	r0, #0
    f4f8:	d079      	beq.n	f5ee <z_timer_expiration_handler+0x196>
	__asm__ volatile(
    f4fa:	f385 8811 	msr	BASEPRI, r5
    f4fe:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    f502:	4620      	mov	r0, r4
    f504:	f7fe fc5e 	bl	ddc4 <z_ready_thread>
}
    f508:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f50a:	4d42      	ldr	r5, [pc, #264]	; (f614 <z_timer_expiration_handler+0x1bc>)
    f50c:	238e      	movs	r3, #142	; 0x8e
    f50e:	462a      	mov	r2, r5
    f510:	4941      	ldr	r1, [pc, #260]	; (f618 <z_timer_expiration_handler+0x1c0>)
    f512:	4842      	ldr	r0, [pc, #264]	; (f61c <z_timer_expiration_handler+0x1c4>)
    f514:	f001 f910 	bl	10738 <assert_print>
    f518:	493d      	ldr	r1, [pc, #244]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f51a:	4841      	ldr	r0, [pc, #260]	; (f620 <z_timer_expiration_handler+0x1c8>)
    f51c:	f001 f90c 	bl	10738 <assert_print>
    f520:	218e      	movs	r1, #142	; 0x8e
    f522:	4628      	mov	r0, r5
    f524:	f001 f901 	bl	1072a <assert_post_action>
    f528:	e7a5      	b.n	f476 <z_timer_expiration_handler+0x1e>
	return z_impl_k_uptime_ticks();
    f52a:	f004 f81b 	bl	13564 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    f52e:	3001      	adds	r0, #1
    f530:	f141 0100 	adc.w	r1, r1, #0
    f534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f536:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f538:	18c0      	adds	r0, r0, r3
    f53a:	eb41 0102 	adc.w	r1, r1, r2
    f53e:	2801      	cmp	r0, #1
    f540:	f171 0100 	sbcs.w	r1, r1, #0
    f544:	da08      	bge.n	f558 <z_timer_expiration_handler+0x100>
    f546:	f06f 0201 	mvn.w	r2, #1
    f54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f54e:	4935      	ldr	r1, [pc, #212]	; (f624 <z_timer_expiration_handler+0x1cc>)
    f550:	4620      	mov	r0, r4
    f552:	f7ff fc67 	bl	ee24 <z_add_timeout>
    f556:	e79d      	b.n	f494 <z_timer_expiration_handler+0x3c>
    f558:	f004 f804 	bl	13564 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    f55c:	3001      	adds	r0, #1
    f55e:	f141 0300 	adc.w	r3, r1, #0
    f562:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f566:	1880      	adds	r0, r0, r2
    f568:	eb43 0301 	adc.w	r3, r3, r1
    f56c:	f06f 0201 	mvn.w	r2, #1
    f570:	1a12      	subs	r2, r2, r0
    f572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f576:	eb61 0303 	sbc.w	r3, r1, r3
    f57a:	e7e8      	b.n	f54e <z_timer_expiration_handler+0xf6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f57c:	4d25      	ldr	r5, [pc, #148]	; (f614 <z_timer_expiration_handler+0x1bc>)
    f57e:	23b9      	movs	r3, #185	; 0xb9
    f580:	462a      	mov	r2, r5
    f582:	4929      	ldr	r1, [pc, #164]	; (f628 <z_timer_expiration_handler+0x1d0>)
    f584:	4825      	ldr	r0, [pc, #148]	; (f61c <z_timer_expiration_handler+0x1c4>)
    f586:	f001 f8d7 	bl	10738 <assert_print>
    f58a:	4921      	ldr	r1, [pc, #132]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f58c:	4827      	ldr	r0, [pc, #156]	; (f62c <z_timer_expiration_handler+0x1d4>)
    f58e:	f001 f8d3 	bl	10738 <assert_print>
    f592:	21b9      	movs	r1, #185	; 0xb9
    f594:	4628      	mov	r0, r5
    f596:	f001 f8c8 	bl	1072a <assert_post_action>
    f59a:	e785      	b.n	f4a8 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f59c:	4e1d      	ldr	r6, [pc, #116]	; (f614 <z_timer_expiration_handler+0x1bc>)
    f59e:	238e      	movs	r3, #142	; 0x8e
    f5a0:	4632      	mov	r2, r6
    f5a2:	491d      	ldr	r1, [pc, #116]	; (f618 <z_timer_expiration_handler+0x1c0>)
    f5a4:	481d      	ldr	r0, [pc, #116]	; (f61c <z_timer_expiration_handler+0x1c4>)
    f5a6:	f001 f8c7 	bl	10738 <assert_print>
    f5aa:	4919      	ldr	r1, [pc, #100]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f5ac:	481c      	ldr	r0, [pc, #112]	; (f620 <z_timer_expiration_handler+0x1c8>)
    f5ae:	f001 f8c3 	bl	10738 <assert_print>
    f5b2:	218e      	movs	r1, #142	; 0x8e
    f5b4:	4630      	mov	r0, r6
    f5b6:	f001 f8b8 	bl	1072a <assert_post_action>
    f5ba:	e789      	b.n	f4d0 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f5bc:	4814      	ldr	r0, [pc, #80]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f5be:	f7fd f8b1 	bl	c724 <z_spin_unlock_valid>
    f5c2:	b120      	cbz	r0, f5ce <z_timer_expiration_handler+0x176>
    f5c4:	f385 8811 	msr	BASEPRI, r5
    f5c8:	f3bf 8f6f 	isb	sy
		return;
    f5cc:	e79c      	b.n	f508 <z_timer_expiration_handler+0xb0>
    f5ce:	4c11      	ldr	r4, [pc, #68]	; (f614 <z_timer_expiration_handler+0x1bc>)
    f5d0:	23b9      	movs	r3, #185	; 0xb9
    f5d2:	4622      	mov	r2, r4
    f5d4:	4914      	ldr	r1, [pc, #80]	; (f628 <z_timer_expiration_handler+0x1d0>)
    f5d6:	4811      	ldr	r0, [pc, #68]	; (f61c <z_timer_expiration_handler+0x1c4>)
    f5d8:	f001 f8ae 	bl	10738 <assert_print>
    f5dc:	490c      	ldr	r1, [pc, #48]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f5de:	4813      	ldr	r0, [pc, #76]	; (f62c <z_timer_expiration_handler+0x1d4>)
    f5e0:	f001 f8aa 	bl	10738 <assert_print>
    f5e4:	21b9      	movs	r1, #185	; 0xb9
    f5e6:	4620      	mov	r0, r4
    f5e8:	f001 f89f 	bl	1072a <assert_post_action>
    f5ec:	e7ea      	b.n	f5c4 <z_timer_expiration_handler+0x16c>
    f5ee:	4e09      	ldr	r6, [pc, #36]	; (f614 <z_timer_expiration_handler+0x1bc>)
    f5f0:	23b9      	movs	r3, #185	; 0xb9
    f5f2:	4632      	mov	r2, r6
    f5f4:	490c      	ldr	r1, [pc, #48]	; (f628 <z_timer_expiration_handler+0x1d0>)
    f5f6:	4809      	ldr	r0, [pc, #36]	; (f61c <z_timer_expiration_handler+0x1c4>)
    f5f8:	f001 f89e 	bl	10738 <assert_print>
    f5fc:	4904      	ldr	r1, [pc, #16]	; (f610 <z_timer_expiration_handler+0x1b8>)
    f5fe:	480b      	ldr	r0, [pc, #44]	; (f62c <z_timer_expiration_handler+0x1d4>)
    f600:	f001 f89a 	bl	10738 <assert_print>
    f604:	21b9      	movs	r1, #185	; 0xb9
    f606:	4630      	mov	r0, r6
    f608:	f001 f88f 	bl	1072a <assert_post_action>
    f60c:	e775      	b.n	f4fa <z_timer_expiration_handler+0xa2>
    f60e:	bf00      	nop
    f610:	20002790 	.word	0x20002790
    f614:	00013f4c 	.word	0x00013f4c
    f618:	00013fac 	.word	0x00013fac
    f61c:	00013d44 	.word	0x00013d44
    f620:	00013fc4 	.word	0x00013fc4
    f624:	0000f459 	.word	0x0000f459
    f628:	00013f7c 	.word	0x00013f7c
    f62c:	00013f94 	.word	0x00013f94

0000f630 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f634:	461e      	mov	r6, r3
    f636:	9f06      	ldr	r7, [sp, #24]
    f638:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    f63c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f640:	bf08      	it	eq
    f642:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f646:	d02f      	beq.n	f6a8 <z_impl_k_timer_start+0x78>
    f648:	4605      	mov	r5, r0
    f64a:	4614      	mov	r4, r2
    f64c:	4613      	mov	r3, r2
    f64e:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f650:	4640      	mov	r0, r8
    f652:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    f656:	bf08      	it	eq
    f658:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    f65c:	d00d      	beq.n	f67a <z_impl_k_timer_start+0x4a>
    f65e:	ea57 0c08 	orrs.w	ip, r7, r8
    f662:	d00a      	beq.n	f67a <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
    f664:	f06f 0c01 	mvn.w	ip, #1
    f668:	ebbc 0c07 	subs.w	ip, ip, r7
    f66c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    f670:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f674:	f1bc 0f00 	cmp.w	ip, #0
    f678:	db18      	blt.n	f6ac <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    f67a:	f06f 0201 	mvn.w	r2, #1
    f67e:	1ad2      	subs	r2, r2, r3
    f680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f684:	eb62 0201 	sbc.w	r2, r2, r1
    f688:	2a00      	cmp	r2, #0
    f68a:	db1a      	blt.n	f6c2 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    f68c:	4628      	mov	r0, r5
    f68e:	f7ff fca5 	bl	efdc <z_abort_timeout>
	timer->period = period;
    f692:	62af      	str	r7, [r5, #40]	; 0x28
    f694:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    f698:	2300      	movs	r3, #0
    f69a:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f69c:	4622      	mov	r2, r4
    f69e:	4633      	mov	r3, r6
    f6a0:	490e      	ldr	r1, [pc, #56]	; (f6dc <z_impl_k_timer_start+0xac>)
    f6a2:	4628      	mov	r0, r5
    f6a4:	f7ff fbbe 	bl	ee24 <z_add_timeout>
		     duration);
}
    f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    f6ac:	2f02      	cmp	r7, #2
    f6ae:	f170 0000 	sbcs.w	r0, r0, #0
    f6b2:	da02      	bge.n	f6ba <z_impl_k_timer_start+0x8a>
    f6b4:	2702      	movs	r7, #2
    f6b6:	f04f 0800 	mov.w	r8, #0
    f6ba:	3f01      	subs	r7, #1
    f6bc:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    f6c0:	e7db      	b.n	f67a <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    f6c2:	461c      	mov	r4, r3
    f6c4:	460e      	mov	r6, r1
    f6c6:	2b01      	cmp	r3, #1
    f6c8:	f171 0100 	sbcs.w	r1, r1, #0
    f6cc:	da01      	bge.n	f6d2 <z_impl_k_timer_start+0xa2>
    f6ce:	2401      	movs	r4, #1
    f6d0:	2600      	movs	r6, #0
    f6d2:	3c01      	subs	r4, #1
    f6d4:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    f6d8:	e7d8      	b.n	f68c <z_impl_k_timer_start+0x5c>
    f6da:	bf00      	nop
    f6dc:	0000f459 	.word	0x0000f459

0000f6e0 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    f6e0:	b570      	push	{r4, r5, r6, lr}
    f6e2:	b082      	sub	sp, #8
    f6e4:	4606      	mov	r6, r0
    f6e6:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    f6e8:	2300      	movs	r3, #0
    f6ea:	3204      	adds	r2, #4
    f6ec:	d222      	bcs.n	f734 <z_heap_aligned_alloc+0x54>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    f6ee:	bb1b      	cbnz	r3, f738 <z_heap_aligned_alloc+0x58>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    f6f0:	2000      	movs	r0, #0
    f6f2:	2100      	movs	r1, #0
    f6f4:	e9cd 0100 	strd	r0, r1, [sp]
    f6f8:	f044 0104 	orr.w	r1, r4, #4
    f6fc:	4630      	mov	r0, r6
    f6fe:	f000 f8a3 	bl	f848 <k_heap_aligned_alloc>
	if (mem == NULL) {
    f702:	4605      	mov	r5, r0
    f704:	b1c8      	cbz	r0, f73a <z_heap_aligned_alloc+0x5a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
    f706:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    f70a:	b1b4      	cbz	r4, f73a <z_heap_aligned_alloc+0x5a>
    f70c:	1e63      	subs	r3, r4, #1
    f70e:	421d      	tst	r5, r3
    f710:	d013      	beq.n	f73a <z_heap_aligned_alloc+0x5a>
    f712:	4e0b      	ldr	r6, [pc, #44]	; (f740 <z_heap_aligned_alloc+0x60>)
    f714:	2325      	movs	r3, #37	; 0x25
    f716:	4632      	mov	r2, r6
    f718:	490a      	ldr	r1, [pc, #40]	; (f744 <z_heap_aligned_alloc+0x64>)
    f71a:	480b      	ldr	r0, [pc, #44]	; (f748 <z_heap_aligned_alloc+0x68>)
    f71c:	f001 f80c 	bl	10738 <assert_print>
    f720:	4622      	mov	r2, r4
    f722:	4629      	mov	r1, r5
    f724:	4809      	ldr	r0, [pc, #36]	; (f74c <z_heap_aligned_alloc+0x6c>)
    f726:	f001 f807 	bl	10738 <assert_print>
    f72a:	2125      	movs	r1, #37	; 0x25
    f72c:	4630      	mov	r0, r6
    f72e:	f000 fffc 	bl	1072a <assert_post_action>
    f732:	e002      	b.n	f73a <z_heap_aligned_alloc+0x5a>
    f734:	2301      	movs	r3, #1
    f736:	e7da      	b.n	f6ee <z_heap_aligned_alloc+0xe>
		return NULL;
    f738:	2500      	movs	r5, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    f73a:	4628      	mov	r0, r5
    f73c:	b002      	add	sp, #8
    f73e:	bd70      	pop	{r4, r5, r6, pc}
    f740:	00016b44 	.word	0x00016b44
    f744:	00016b68 	.word	0x00016b68
    f748:	00013d44 	.word	0x00013d44
    f74c:	00016b9c 	.word	0x00016b9c

0000f750 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    f750:	b570      	push	{r4, r5, r6, lr}
    f752:	4604      	mov	r4, r0
    f754:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    f756:	2803      	cmp	r0, #3
    f758:	d902      	bls.n	f760 <k_aligned_alloc+0x10>
    f75a:	f010 0f03 	tst.w	r0, #3
    f75e:	d00d      	beq.n	f77c <k_aligned_alloc+0x2c>
    f760:	4e12      	ldr	r6, [pc, #72]	; (f7ac <k_aligned_alloc+0x5c>)
    f762:	2342      	movs	r3, #66	; 0x42
    f764:	4632      	mov	r2, r6
    f766:	4912      	ldr	r1, [pc, #72]	; (f7b0 <k_aligned_alloc+0x60>)
    f768:	4812      	ldr	r0, [pc, #72]	; (f7b4 <k_aligned_alloc+0x64>)
    f76a:	f000 ffe5 	bl	10738 <assert_print>
    f76e:	4812      	ldr	r0, [pc, #72]	; (f7b8 <k_aligned_alloc+0x68>)
    f770:	f000 ffe2 	bl	10738 <assert_print>
    f774:	2142      	movs	r1, #66	; 0x42
    f776:	4630      	mov	r0, r6
    f778:	f000 ffd7 	bl	1072a <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    f77c:	1e63      	subs	r3, r4, #1
    f77e:	4223      	tst	r3, r4
    f780:	d105      	bne.n	f78e <k_aligned_alloc+0x3e>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    f782:	462a      	mov	r2, r5
    f784:	4621      	mov	r1, r4
    f786:	480d      	ldr	r0, [pc, #52]	; (f7bc <k_aligned_alloc+0x6c>)
    f788:	f7ff ffaa 	bl	f6e0 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    f78c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((align & (align - 1)) == 0,
    f78e:	4e07      	ldr	r6, [pc, #28]	; (f7ac <k_aligned_alloc+0x5c>)
    f790:	2346      	movs	r3, #70	; 0x46
    f792:	4632      	mov	r2, r6
    f794:	490a      	ldr	r1, [pc, #40]	; (f7c0 <k_aligned_alloc+0x70>)
    f796:	4807      	ldr	r0, [pc, #28]	; (f7b4 <k_aligned_alloc+0x64>)
    f798:	f000 ffce 	bl	10738 <assert_print>
    f79c:	4809      	ldr	r0, [pc, #36]	; (f7c4 <k_aligned_alloc+0x74>)
    f79e:	f000 ffcb 	bl	10738 <assert_print>
    f7a2:	2146      	movs	r1, #70	; 0x46
    f7a4:	4630      	mov	r0, r6
    f7a6:	f000 ffc0 	bl	1072a <assert_post_action>
    f7aa:	e7ea      	b.n	f782 <k_aligned_alloc+0x32>
    f7ac:	00016b44 	.word	0x00016b44
    f7b0:	00016bc4 	.word	0x00016bc4
    f7b4:	00013d44 	.word	0x00013d44
    f7b8:	00016c04 	.word	0x00016c04
    f7bc:	20000264 	.word	0x20000264
    f7c0:	000140b0 	.word	0x000140b0
    f7c4:	000140cc 	.word	0x000140cc

0000f7c8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    f7c8:	4b01      	ldr	r3, [pc, #4]	; (f7d0 <k_thread_system_pool_assign+0x8>)
    f7ca:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    f7ce:	4770      	bx	lr
    f7d0:	20000264 	.word	0x20000264

0000f7d4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    f7d4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f7d6:	4a03      	ldr	r2, [pc, #12]	; (f7e4 <boot_banner+0x10>)
    f7d8:	4903      	ldr	r1, [pc, #12]	; (f7e8 <boot_banner+0x14>)
    f7da:	4804      	ldr	r0, [pc, #16]	; (f7ec <boot_banner+0x18>)
    f7dc:	f000 faff 	bl	fdde <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    f7e0:	bd08      	pop	{r3, pc}
    f7e2:	bf00      	nop
    f7e4:	00014f84 	.word	0x00014f84
    f7e8:	00016c34 	.word	0x00016c34
    f7ec:	00016c44 	.word	0x00016c44

0000f7f0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    f7f0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f7f2:	4c0f      	ldr	r4, [pc, #60]	; (f830 <statics_init+0x40>)
    f7f4:	e008      	b.n	f808 <statics_init+0x18>
    f7f6:	4b0f      	ldr	r3, [pc, #60]	; (f834 <statics_init+0x44>)
    f7f8:	429c      	cmp	r4, r3
    f7fa:	d217      	bcs.n	f82c <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f7fc:	68a2      	ldr	r2, [r4, #8]
    f7fe:	6861      	ldr	r1, [r4, #4]
    f800:	4620      	mov	r0, r4
    f802:	f003 ff17 	bl	13634 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f806:	3418      	adds	r4, #24
    f808:	4b0a      	ldr	r3, [pc, #40]	; (f834 <statics_init+0x44>)
    f80a:	429c      	cmp	r4, r3
    f80c:	d9f3      	bls.n	f7f6 <statics_init+0x6>
    f80e:	4d0a      	ldr	r5, [pc, #40]	; (f838 <statics_init+0x48>)
    f810:	2318      	movs	r3, #24
    f812:	462a      	mov	r2, r5
    f814:	4909      	ldr	r1, [pc, #36]	; (f83c <statics_init+0x4c>)
    f816:	480a      	ldr	r0, [pc, #40]	; (f840 <statics_init+0x50>)
    f818:	f000 ff8e 	bl	10738 <assert_print>
    f81c:	4809      	ldr	r0, [pc, #36]	; (f844 <statics_init+0x54>)
    f81e:	f000 ff8b 	bl	10738 <assert_print>
    f822:	2118      	movs	r1, #24
    f824:	4628      	mov	r0, r5
    f826:	f000 ff80 	bl	1072a <assert_post_action>
    f82a:	e7e4      	b.n	f7f6 <statics_init+0x6>
		}
	}
	return 0;
}
    f82c:	2000      	movs	r0, #0
    f82e:	bd38      	pop	{r3, r4, r5, pc}
    f830:	20000264 	.word	0x20000264
    f834:	2000027c 	.word	0x2000027c
    f838:	00016c6c 	.word	0x00016c6c
    f83c:	00016c90 	.word	0x00016c90
    f840:	00013d44 	.word	0x00013d44
    f844:	000165dc 	.word	0x000165dc

0000f848 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f84c:	b085      	sub	sp, #20
    f84e:	4680      	mov	r8, r0
    f850:	468b      	mov	fp, r1
    f852:	9203      	str	r2, [sp, #12]
    f854:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    f858:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f85a:	4648      	mov	r0, r9
    f85c:	4621      	mov	r1, r4
    f85e:	f003 fe8b 	bl	13578 <sys_clock_timeout_end_calc>
    f862:	4607      	mov	r7, r0
    f864:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f866:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
    f86a:	f04f 0320 	mov.w	r3, #32
    f86e:	f3ef 8511 	mrs	r5, BASEPRI
    f872:	f383 8812 	msr	BASEPRI_MAX, r3
    f876:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f87a:	4630      	mov	r0, r6
    f87c:	f7fc ff42 	bl	c704 <z_spin_lock_valid>
    f880:	b160      	cbz	r0, f89c <k_heap_aligned_alloc+0x54>
	z_spin_lock_set_owner(l);
    f882:	4630      	mov	r0, r6
    f884:	f7fc ff5e 	bl	c744 <z_spin_lock_set_owner>
    f888:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    f88c:	b113      	cbz	r3, f894 <k_heap_aligned_alloc+0x4c>
    f88e:	ea54 0409 	orrs.w	r4, r4, r9
    f892:	d112      	bne.n	f8ba <k_heap_aligned_alloc+0x72>

	bool blocked_alloc = false;
    f894:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
    f898:	464c      	mov	r4, r9

	while (ret == NULL) {
    f89a:	e034      	b.n	f906 <k_heap_aligned_alloc+0xbe>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f89c:	238e      	movs	r3, #142	; 0x8e
    f89e:	4a3b      	ldr	r2, [pc, #236]	; (f98c <k_heap_aligned_alloc+0x144>)
    f8a0:	493b      	ldr	r1, [pc, #236]	; (f990 <k_heap_aligned_alloc+0x148>)
    f8a2:	483c      	ldr	r0, [pc, #240]	; (f994 <k_heap_aligned_alloc+0x14c>)
    f8a4:	f000 ff48 	bl	10738 <assert_print>
    f8a8:	4631      	mov	r1, r6
    f8aa:	483b      	ldr	r0, [pc, #236]	; (f998 <k_heap_aligned_alloc+0x150>)
    f8ac:	f000 ff44 	bl	10738 <assert_print>
    f8b0:	218e      	movs	r1, #142	; 0x8e
    f8b2:	4836      	ldr	r0, [pc, #216]	; (f98c <k_heap_aligned_alloc+0x144>)
    f8b4:	f000 ff39 	bl	1072a <assert_post_action>
    f8b8:	e7e3      	b.n	f882 <k_heap_aligned_alloc+0x3a>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    f8ba:	4c38      	ldr	r4, [pc, #224]	; (f99c <k_heap_aligned_alloc+0x154>)
    f8bc:	2349      	movs	r3, #73	; 0x49
    f8be:	4622      	mov	r2, r4
    f8c0:	4937      	ldr	r1, [pc, #220]	; (f9a0 <k_heap_aligned_alloc+0x158>)
    f8c2:	4834      	ldr	r0, [pc, #208]	; (f994 <k_heap_aligned_alloc+0x14c>)
    f8c4:	f000 ff38 	bl	10738 <assert_print>
    f8c8:	4836      	ldr	r0, [pc, #216]	; (f9a4 <k_heap_aligned_alloc+0x15c>)
    f8ca:	f000 ff35 	bl	10738 <assert_print>
    f8ce:	2149      	movs	r1, #73	; 0x49
    f8d0:	4620      	mov	r0, r4
    f8d2:	f000 ff2a 	bl	1072a <assert_post_action>
    f8d6:	e7dd      	b.n	f894 <k_heap_aligned_alloc+0x4c>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f8d8:	9000      	str	r0, [sp, #0]
    f8da:	9101      	str	r1, [sp, #4]
    f8dc:	f108 020c 	add.w	r2, r8, #12
    f8e0:	4629      	mov	r1, r5
    f8e2:	4630      	mov	r0, r6
    f8e4:	f7fe fc4a 	bl	e17c <z_pend_curr>
    f8e8:	f04f 0320 	mov.w	r3, #32
    f8ec:	f3ef 8511 	mrs	r5, BASEPRI
    f8f0:	f383 8812 	msr	BASEPRI_MAX, r3
    f8f4:	f3bf 8f6f 	isb	sy
    f8f8:	4630      	mov	r0, r6
    f8fa:	f7fc ff03 	bl	c704 <z_spin_lock_valid>
    f8fe:	b1c8      	cbz	r0, f934 <k_heap_aligned_alloc+0xec>
	z_spin_lock_set_owner(l);
    f900:	4630      	mov	r0, r6
    f902:	f7fc ff1f 	bl	c744 <z_spin_lock_set_owner>
	while (ret == NULL) {
    f906:	bb24      	cbnz	r4, f952 <k_heap_aligned_alloc+0x10a>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f908:	9a03      	ldr	r2, [sp, #12]
    f90a:	4659      	mov	r1, fp
    f90c:	4640      	mov	r0, r8
    f90e:	f7f2 f87f 	bl	1a10 <sys_heap_aligned_alloc>
    f912:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    f914:	f7ff fd42 	bl	f39c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f918:	b9dc      	cbnz	r4, f952 <k_heap_aligned_alloc+0x10a>
		    (ret != NULL) || ((end - now) <= 0)) {
    f91a:	1a38      	subs	r0, r7, r0
    f91c:	eb6a 0101 	sbc.w	r1, sl, r1
    f920:	2801      	cmp	r0, #1
    f922:	f171 0300 	sbcs.w	r3, r1, #0
    f926:	db14      	blt.n	f952 <k_heap_aligned_alloc+0x10a>
		if (!blocked_alloc) {
    f928:	f1b9 0f00 	cmp.w	r9, #0
    f92c:	d1d4      	bne.n	f8d8 <k_heap_aligned_alloc+0x90>
			blocked_alloc = true;
    f92e:	f04f 0901 	mov.w	r9, #1
    f932:	e7d1      	b.n	f8d8 <k_heap_aligned_alloc+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f934:	238e      	movs	r3, #142	; 0x8e
    f936:	4a15      	ldr	r2, [pc, #84]	; (f98c <k_heap_aligned_alloc+0x144>)
    f938:	4915      	ldr	r1, [pc, #84]	; (f990 <k_heap_aligned_alloc+0x148>)
    f93a:	4816      	ldr	r0, [pc, #88]	; (f994 <k_heap_aligned_alloc+0x14c>)
    f93c:	f000 fefc 	bl	10738 <assert_print>
    f940:	4631      	mov	r1, r6
    f942:	4815      	ldr	r0, [pc, #84]	; (f998 <k_heap_aligned_alloc+0x150>)
    f944:	f000 fef8 	bl	10738 <assert_print>
    f948:	218e      	movs	r1, #142	; 0x8e
    f94a:	4810      	ldr	r0, [pc, #64]	; (f98c <k_heap_aligned_alloc+0x144>)
    f94c:	f000 feed 	bl	1072a <assert_post_action>
    f950:	e7d6      	b.n	f900 <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f952:	4630      	mov	r0, r6
    f954:	f7fc fee6 	bl	c724 <z_spin_unlock_valid>
    f958:	b138      	cbz	r0, f96a <k_heap_aligned_alloc+0x122>
	__asm__ volatile(
    f95a:	f385 8811 	msr	BASEPRI, r5
    f95e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f962:	4620      	mov	r0, r4
    f964:	b005      	add	sp, #20
    f966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f96a:	4f08      	ldr	r7, [pc, #32]	; (f98c <k_heap_aligned_alloc+0x144>)
    f96c:	23b9      	movs	r3, #185	; 0xb9
    f96e:	463a      	mov	r2, r7
    f970:	490d      	ldr	r1, [pc, #52]	; (f9a8 <k_heap_aligned_alloc+0x160>)
    f972:	4808      	ldr	r0, [pc, #32]	; (f994 <k_heap_aligned_alloc+0x14c>)
    f974:	f000 fee0 	bl	10738 <assert_print>
    f978:	4631      	mov	r1, r6
    f97a:	480c      	ldr	r0, [pc, #48]	; (f9ac <k_heap_aligned_alloc+0x164>)
    f97c:	f000 fedc 	bl	10738 <assert_print>
    f980:	21b9      	movs	r1, #185	; 0xb9
    f982:	4638      	mov	r0, r7
    f984:	f000 fed1 	bl	1072a <assert_post_action>
    f988:	e7e7      	b.n	f95a <k_heap_aligned_alloc+0x112>
    f98a:	bf00      	nop
    f98c:	00013f4c 	.word	0x00013f4c
    f990:	00013fac 	.word	0x00013fac
    f994:	00013d44 	.word	0x00013d44
    f998:	00013fc4 	.word	0x00013fc4
    f99c:	00016c6c 	.word	0x00016c6c
    f9a0:	00016ca8 	.word	0x00016ca8
    f9a4:	00016894 	.word	0x00016894
    f9a8:	00013f7c 	.word	0x00013f7c
    f9ac:	00013f94 	.word	0x00013f94

0000f9b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    f9b0:	b510      	push	{r4, lr}
    f9b2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    f9b4:	4b08      	ldr	r3, [pc, #32]	; (f9d8 <k_sys_work_q_init+0x28>)
    f9b6:	9302      	str	r3, [sp, #8]
    f9b8:	2400      	movs	r4, #0
    f9ba:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    f9be:	ab02      	add	r3, sp, #8
    f9c0:	9300      	str	r3, [sp, #0]
    f9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f9c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f9ca:	4904      	ldr	r1, [pc, #16]	; (f9dc <k_sys_work_q_init+0x2c>)
    f9cc:	4804      	ldr	r0, [pc, #16]	; (f9e0 <k_sys_work_q_init+0x30>)
    f9ce:	f7fd fdc3 	bl	d558 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    f9d2:	4620      	mov	r0, r4
    f9d4:	b004      	add	sp, #16
    f9d6:	bd10      	pop	{r4, pc}
    f9d8:	00016cf0 	.word	0x00016cf0
    f9dc:	20005ab8 	.word	0x20005ab8
    f9e0:	20001900 	.word	0x20001900

0000f9e4 <nrf_cc3xx_platform_init_no_rng>:
    f9e4:	b510      	push	{r4, lr}
    f9e6:	4c0a      	ldr	r4, [pc, #40]	; (fa10 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    f9e8:	6823      	ldr	r3, [r4, #0]
    f9ea:	b11b      	cbz	r3, f9f4 <nrf_cc3xx_platform_init_no_rng+0x10>
    f9ec:	2301      	movs	r3, #1
    f9ee:	2000      	movs	r0, #0
    f9f0:	6023      	str	r3, [r4, #0]
    f9f2:	bd10      	pop	{r4, pc}
    f9f4:	f000 f8dc 	bl	fbb0 <CC_LibInitNoRng>
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d0f7      	beq.n	f9ec <nrf_cc3xx_platform_init_no_rng+0x8>
    f9fc:	3801      	subs	r0, #1
    f9fe:	2807      	cmp	r0, #7
    fa00:	d803      	bhi.n	fa0a <nrf_cc3xx_platform_init_no_rng+0x26>
    fa02:	4b04      	ldr	r3, [pc, #16]	; (fa14 <nrf_cc3xx_platform_init_no_rng+0x30>)
    fa04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    fa08:	bd10      	pop	{r4, pc}
    fa0a:	4803      	ldr	r0, [pc, #12]	; (fa18 <nrf_cc3xx_platform_init_no_rng+0x34>)
    fa0c:	bd10      	pop	{r4, pc}
    fa0e:	bf00      	nop
    fa10:	20002794 	.word	0x20002794
    fa14:	00016cfc 	.word	0x00016cfc
    fa18:	ffff8ffe 	.word	0xffff8ffe

0000fa1c <nrf_cc3xx_platform_abort>:
    fa1c:	f3bf 8f4f 	dsb	sy
    fa20:	4905      	ldr	r1, [pc, #20]	; (fa38 <nrf_cc3xx_platform_abort+0x1c>)
    fa22:	4b06      	ldr	r3, [pc, #24]	; (fa3c <nrf_cc3xx_platform_abort+0x20>)
    fa24:	68ca      	ldr	r2, [r1, #12]
    fa26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fa2a:	4313      	orrs	r3, r2
    fa2c:	60cb      	str	r3, [r1, #12]
    fa2e:	f3bf 8f4f 	dsb	sy
    fa32:	bf00      	nop
    fa34:	e7fd      	b.n	fa32 <nrf_cc3xx_platform_abort+0x16>
    fa36:	bf00      	nop
    fa38:	e000ed00 	.word	0xe000ed00
    fa3c:	05fa0004 	.word	0x05fa0004

0000fa40 <CC_PalAbort>:
    fa40:	b430      	push	{r4, r5}
    fa42:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    fa46:	2500      	movs	r5, #0
    fa48:	4b0b      	ldr	r3, [pc, #44]	; (fa78 <CC_PalAbort+0x38>)
    fa4a:	4c0c      	ldr	r4, [pc, #48]	; (fa7c <CC_PalAbort+0x3c>)
    fa4c:	490c      	ldr	r1, [pc, #48]	; (fa80 <CC_PalAbort+0x40>)
    fa4e:	6849      	ldr	r1, [r1, #4]
    fa50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    fa54:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    fa58:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    fa5c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    fa60:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    fa64:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    fa68:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    fa6c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    fa70:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    fa74:	bc30      	pop	{r4, r5}
    fa76:	4708      	bx	r1
    fa78:	50845000 	.word	0x50845000
    fa7c:	50844000 	.word	0x50844000
    fa80:	200001dc 	.word	0x200001dc

0000fa84 <nrf_cc3xx_platform_set_abort>:
    fa84:	4b02      	ldr	r3, [pc, #8]	; (fa90 <nrf_cc3xx_platform_set_abort+0xc>)
    fa86:	e9d0 1200 	ldrd	r1, r2, [r0]
    fa8a:	e9c3 1200 	strd	r1, r2, [r3]
    fa8e:	4770      	bx	lr
    fa90:	200001dc 	.word	0x200001dc

0000fa94 <mutex_free>:
    fa94:	b510      	push	{r4, lr}
    fa96:	4604      	mov	r4, r0
    fa98:	b130      	cbz	r0, faa8 <mutex_free+0x14>
    fa9a:	6863      	ldr	r3, [r4, #4]
    fa9c:	06db      	lsls	r3, r3, #27
    fa9e:	d502      	bpl.n	faa6 <mutex_free+0x12>
    faa0:	2300      	movs	r3, #0
    faa2:	6023      	str	r3, [r4, #0]
    faa4:	6063      	str	r3, [r4, #4]
    faa6:	bd10      	pop	{r4, pc}
    faa8:	4b02      	ldr	r3, [pc, #8]	; (fab4 <mutex_free+0x20>)
    faaa:	4803      	ldr	r0, [pc, #12]	; (fab8 <mutex_free+0x24>)
    faac:	685b      	ldr	r3, [r3, #4]
    faae:	4798      	blx	r3
    fab0:	e7f3      	b.n	fa9a <mutex_free+0x6>
    fab2:	bf00      	nop
    fab4:	200001dc 	.word	0x200001dc
    fab8:	00016d1c 	.word	0x00016d1c

0000fabc <mutex_lock>:
    fabc:	b1b0      	cbz	r0, faec <mutex_lock+0x30>
    fabe:	6843      	ldr	r3, [r0, #4]
    fac0:	b193      	cbz	r3, fae8 <mutex_lock+0x2c>
    fac2:	06db      	lsls	r3, r3, #27
    fac4:	d50e      	bpl.n	fae4 <mutex_lock+0x28>
    fac6:	2301      	movs	r3, #1
    fac8:	e850 2f00 	ldrex	r2, [r0]
    facc:	4619      	mov	r1, r3
    face:	e840 1c00 	strex	ip, r1, [r0]
    fad2:	f09c 0f00 	teq	ip, #0
    fad6:	d1f7      	bne.n	fac8 <mutex_lock+0xc>
    fad8:	2a01      	cmp	r2, #1
    fada:	d0f5      	beq.n	fac8 <mutex_lock+0xc>
    fadc:	f3bf 8f5f 	dmb	sy
    fae0:	2000      	movs	r0, #0
    fae2:	4770      	bx	lr
    fae4:	4803      	ldr	r0, [pc, #12]	; (faf4 <mutex_lock+0x38>)
    fae6:	4770      	bx	lr
    fae8:	4803      	ldr	r0, [pc, #12]	; (faf8 <mutex_lock+0x3c>)
    faea:	4770      	bx	lr
    faec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    faf0:	4770      	bx	lr
    faf2:	bf00      	nop
    faf4:	ffff8fe9 	.word	0xffff8fe9
    faf8:	ffff8fea 	.word	0xffff8fea

0000fafc <mutex_unlock>:
    fafc:	4603      	mov	r3, r0
    fafe:	b168      	cbz	r0, fb1c <mutex_unlock+0x20>
    fb00:	6842      	ldr	r2, [r0, #4]
    fb02:	b13a      	cbz	r2, fb14 <mutex_unlock+0x18>
    fb04:	06d2      	lsls	r2, r2, #27
    fb06:	d507      	bpl.n	fb18 <mutex_unlock+0x1c>
    fb08:	f3bf 8f5f 	dmb	sy
    fb0c:	2200      	movs	r2, #0
    fb0e:	4610      	mov	r0, r2
    fb10:	601a      	str	r2, [r3, #0]
    fb12:	4770      	bx	lr
    fb14:	4803      	ldr	r0, [pc, #12]	; (fb24 <mutex_unlock+0x28>)
    fb16:	4770      	bx	lr
    fb18:	4803      	ldr	r0, [pc, #12]	; (fb28 <mutex_unlock+0x2c>)
    fb1a:	4770      	bx	lr
    fb1c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    fb20:	4770      	bx	lr
    fb22:	bf00      	nop
    fb24:	ffff8fea 	.word	0xffff8fea
    fb28:	ffff8fe9 	.word	0xffff8fe9

0000fb2c <mutex_init>:
    fb2c:	b510      	push	{r4, lr}
    fb2e:	4604      	mov	r4, r0
    fb30:	b120      	cbz	r0, fb3c <mutex_init+0x10>
    fb32:	2200      	movs	r2, #0
    fb34:	2311      	movs	r3, #17
    fb36:	6022      	str	r2, [r4, #0]
    fb38:	6063      	str	r3, [r4, #4]
    fb3a:	bd10      	pop	{r4, pc}
    fb3c:	4801      	ldr	r0, [pc, #4]	; (fb44 <mutex_init+0x18>)
    fb3e:	f7ff ff7f 	bl	fa40 <CC_PalAbort>
    fb42:	e7f6      	b.n	fb32 <mutex_init+0x6>
    fb44:	00016d44 	.word	0x00016d44

0000fb48 <nrf_cc3xx_platform_set_mutexes>:
    fb48:	b570      	push	{r4, r5, r6, lr}
    fb4a:	4c16      	ldr	r4, [pc, #88]	; (fba4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    fb4c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    fb50:	6806      	ldr	r6, [r0, #0]
    fb52:	f8c4 c004 	str.w	ip, [r4, #4]
    fb56:	f8d0 c008 	ldr.w	ip, [r0, #8]
    fb5a:	68c0      	ldr	r0, [r0, #12]
    fb5c:	f8c4 c008 	str.w	ip, [r4, #8]
    fb60:	60e0      	str	r0, [r4, #12]
    fb62:	6026      	str	r6, [r4, #0]
    fb64:	6808      	ldr	r0, [r1, #0]
    fb66:	4b10      	ldr	r3, [pc, #64]	; (fba8 <nrf_cc3xx_platform_set_mutexes+0x60>)
    fb68:	4d10      	ldr	r5, [pc, #64]	; (fbac <nrf_cc3xx_platform_set_mutexes+0x64>)
    fb6a:	6018      	str	r0, [r3, #0]
    fb6c:	6848      	ldr	r0, [r1, #4]
    fb6e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    fb72:	6058      	str	r0, [r3, #4]
    fb74:	6888      	ldr	r0, [r1, #8]
    fb76:	6098      	str	r0, [r3, #8]
    fb78:	68c8      	ldr	r0, [r1, #12]
    fb7a:	6909      	ldr	r1, [r1, #16]
    fb7c:	60d8      	str	r0, [r3, #12]
    fb7e:	6119      	str	r1, [r3, #16]
    fb80:	06d3      	lsls	r3, r2, #27
    fb82:	d50d      	bpl.n	fba0 <nrf_cc3xx_platform_set_mutexes+0x58>
    fb84:	2300      	movs	r3, #0
    fb86:	f505 708a 	add.w	r0, r5, #276	; 0x114
    fb8a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    fb8e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    fb92:	47b0      	blx	r6
    fb94:	6823      	ldr	r3, [r4, #0]
    fb96:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    fb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb9e:	4718      	bx	r3
    fba0:	bd70      	pop	{r4, r5, r6, pc}
    fba2:	bf00      	nop
    fba4:	200001ec 	.word	0x200001ec
    fba8:	200001fc 	.word	0x200001fc
    fbac:	200027ac 	.word	0x200027ac

0000fbb0 <CC_LibInitNoRng>:
    fbb0:	b508      	push	{r3, lr}
    fbb2:	f000 f811 	bl	fbd8 <CC_HalInit>
    fbb6:	b930      	cbnz	r0, fbc6 <CC_LibInitNoRng+0x16>
    fbb8:	f000 f810 	bl	fbdc <CC_PalInit>
    fbbc:	b938      	cbnz	r0, fbce <CC_LibInitNoRng+0x1e>
    fbbe:	4a05      	ldr	r2, [pc, #20]	; (fbd4 <CC_LibInitNoRng+0x24>)
    fbc0:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    fbc4:	bd08      	pop	{r3, pc}
    fbc6:	f000 f837 	bl	fc38 <CC_PalTerminate>
    fbca:	2003      	movs	r0, #3
    fbcc:	bd08      	pop	{r3, pc}
    fbce:	2004      	movs	r0, #4
    fbd0:	bd08      	pop	{r3, pc}
    fbd2:	bf00      	nop
    fbd4:	50845000 	.word	0x50845000

0000fbd8 <CC_HalInit>:
    fbd8:	2000      	movs	r0, #0
    fbda:	4770      	bx	lr

0000fbdc <CC_PalInit>:
    fbdc:	b510      	push	{r4, lr}
    fbde:	4811      	ldr	r0, [pc, #68]	; (fc24 <CC_PalInit+0x48>)
    fbe0:	f000 f848 	bl	fc74 <CC_PalMutexCreate>
    fbe4:	b100      	cbz	r0, fbe8 <CC_PalInit+0xc>
    fbe6:	bd10      	pop	{r4, pc}
    fbe8:	480f      	ldr	r0, [pc, #60]	; (fc28 <CC_PalInit+0x4c>)
    fbea:	f000 f843 	bl	fc74 <CC_PalMutexCreate>
    fbee:	2800      	cmp	r0, #0
    fbf0:	d1f9      	bne.n	fbe6 <CC_PalInit+0xa>
    fbf2:	4c0e      	ldr	r4, [pc, #56]	; (fc2c <CC_PalInit+0x50>)
    fbf4:	4620      	mov	r0, r4
    fbf6:	f000 f83d 	bl	fc74 <CC_PalMutexCreate>
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d1f3      	bne.n	fbe6 <CC_PalInit+0xa>
    fbfe:	4b0c      	ldr	r3, [pc, #48]	; (fc30 <CC_PalInit+0x54>)
    fc00:	480c      	ldr	r0, [pc, #48]	; (fc34 <CC_PalInit+0x58>)
    fc02:	601c      	str	r4, [r3, #0]
    fc04:	f000 f836 	bl	fc74 <CC_PalMutexCreate>
    fc08:	4601      	mov	r1, r0
    fc0a:	2800      	cmp	r0, #0
    fc0c:	d1eb      	bne.n	fbe6 <CC_PalInit+0xa>
    fc0e:	f000 f82d 	bl	fc6c <CC_PalDmaInit>
    fc12:	4604      	mov	r4, r0
    fc14:	b108      	cbz	r0, fc1a <CC_PalInit+0x3e>
    fc16:	4620      	mov	r0, r4
    fc18:	bd10      	pop	{r4, pc}
    fc1a:	f000 f83f 	bl	fc9c <CC_PalPowerSaveModeInit>
    fc1e:	4620      	mov	r0, r4
    fc20:	e7fa      	b.n	fc18 <CC_PalInit+0x3c>
    fc22:	bf00      	nop
    fc24:	20000234 	.word	0x20000234
    fc28:	20000228 	.word	0x20000228
    fc2c:	20000230 	.word	0x20000230
    fc30:	20000238 	.word	0x20000238
    fc34:	2000022c 	.word	0x2000022c

0000fc38 <CC_PalTerminate>:
    fc38:	b508      	push	{r3, lr}
    fc3a:	4808      	ldr	r0, [pc, #32]	; (fc5c <CC_PalTerminate+0x24>)
    fc3c:	f000 f824 	bl	fc88 <CC_PalMutexDestroy>
    fc40:	4807      	ldr	r0, [pc, #28]	; (fc60 <CC_PalTerminate+0x28>)
    fc42:	f000 f821 	bl	fc88 <CC_PalMutexDestroy>
    fc46:	4807      	ldr	r0, [pc, #28]	; (fc64 <CC_PalTerminate+0x2c>)
    fc48:	f000 f81e 	bl	fc88 <CC_PalMutexDestroy>
    fc4c:	4806      	ldr	r0, [pc, #24]	; (fc68 <CC_PalTerminate+0x30>)
    fc4e:	f000 f81b 	bl	fc88 <CC_PalMutexDestroy>
    fc52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fc56:	f000 b80b 	b.w	fc70 <CC_PalDmaTerminate>
    fc5a:	bf00      	nop
    fc5c:	20000234 	.word	0x20000234
    fc60:	20000228 	.word	0x20000228
    fc64:	20000230 	.word	0x20000230
    fc68:	2000022c 	.word	0x2000022c

0000fc6c <CC_PalDmaInit>:
    fc6c:	2000      	movs	r0, #0
    fc6e:	4770      	bx	lr

0000fc70 <CC_PalDmaTerminate>:
    fc70:	4770      	bx	lr
    fc72:	bf00      	nop

0000fc74 <CC_PalMutexCreate>:
    fc74:	b508      	push	{r3, lr}
    fc76:	4b03      	ldr	r3, [pc, #12]	; (fc84 <CC_PalMutexCreate+0x10>)
    fc78:	6802      	ldr	r2, [r0, #0]
    fc7a:	681b      	ldr	r3, [r3, #0]
    fc7c:	6810      	ldr	r0, [r2, #0]
    fc7e:	4798      	blx	r3
    fc80:	2000      	movs	r0, #0
    fc82:	bd08      	pop	{r3, pc}
    fc84:	200001ec 	.word	0x200001ec

0000fc88 <CC_PalMutexDestroy>:
    fc88:	b508      	push	{r3, lr}
    fc8a:	4b03      	ldr	r3, [pc, #12]	; (fc98 <CC_PalMutexDestroy+0x10>)
    fc8c:	6802      	ldr	r2, [r0, #0]
    fc8e:	685b      	ldr	r3, [r3, #4]
    fc90:	6810      	ldr	r0, [r2, #0]
    fc92:	4798      	blx	r3
    fc94:	2000      	movs	r0, #0
    fc96:	bd08      	pop	{r3, pc}
    fc98:	200001ec 	.word	0x200001ec

0000fc9c <CC_PalPowerSaveModeInit>:
    fc9c:	b570      	push	{r4, r5, r6, lr}
    fc9e:	4c09      	ldr	r4, [pc, #36]	; (fcc4 <CC_PalPowerSaveModeInit+0x28>)
    fca0:	4d09      	ldr	r5, [pc, #36]	; (fcc8 <CC_PalPowerSaveModeInit+0x2c>)
    fca2:	6920      	ldr	r0, [r4, #16]
    fca4:	68ab      	ldr	r3, [r5, #8]
    fca6:	4798      	blx	r3
    fca8:	b118      	cbz	r0, fcb2 <CC_PalPowerSaveModeInit+0x16>
    fcaa:	4b08      	ldr	r3, [pc, #32]	; (fccc <CC_PalPowerSaveModeInit+0x30>)
    fcac:	4808      	ldr	r0, [pc, #32]	; (fcd0 <CC_PalPowerSaveModeInit+0x34>)
    fcae:	685b      	ldr	r3, [r3, #4]
    fcb0:	4798      	blx	r3
    fcb2:	2100      	movs	r1, #0
    fcb4:	4a07      	ldr	r2, [pc, #28]	; (fcd4 <CC_PalPowerSaveModeInit+0x38>)
    fcb6:	68eb      	ldr	r3, [r5, #12]
    fcb8:	6011      	str	r1, [r2, #0]
    fcba:	6920      	ldr	r0, [r4, #16]
    fcbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fcc0:	4718      	bx	r3
    fcc2:	bf00      	nop
    fcc4:	200001fc 	.word	0x200001fc
    fcc8:	200001ec 	.word	0x200001ec
    fccc:	200001dc 	.word	0x200001dc
    fcd0:	00016d68 	.word	0x00016d68
    fcd4:	200027a8 	.word	0x200027a8

0000fcd8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fcd8:	4770      	bx	lr

0000fcda <cbprintf_via_va_list>:
{
    fcda:	b510      	push	{r4, lr}
    fcdc:	460c      	mov	r4, r1
    fcde:	4611      	mov	r1, r2
    fce0:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    fce2:	9b02      	ldr	r3, [sp, #8]
    fce4:	47a0      	blx	r4
}
    fce6:	bd10      	pop	{r4, pc}

0000fce8 <append_string>:
{
    fce8:	b570      	push	{r4, r5, r6, lr}
    fcea:	4614      	mov	r4, r2
	if (cb == NULL) {
    fcec:	b138      	cbz	r0, fcfe <append_string+0x16>
    fcee:	460d      	mov	r5, r1
    fcf0:	4619      	mov	r1, r3
    fcf2:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    fcf4:	b143      	cbz	r3, fd08 <append_string+0x20>
	return cb(str, strl, ctx);
    fcf6:	462a      	mov	r2, r5
    fcf8:	4620      	mov	r0, r4
    fcfa:	47b0      	blx	r6
}
    fcfc:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    fcfe:	4610      	mov	r0, r2
    fd00:	f001 fadb 	bl	112ba <strlen>
    fd04:	3001      	adds	r0, #1
    fd06:	e7f9      	b.n	fcfc <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    fd08:	4610      	mov	r0, r2
    fd0a:	f001 fad6 	bl	112ba <strlen>
    fd0e:	b283      	uxth	r3, r0
    fd10:	3301      	adds	r3, #1
    fd12:	b299      	uxth	r1, r3
    fd14:	e7ef      	b.n	fcf6 <append_string+0xe>

0000fd16 <cbpprintf_external>:
	if (buf == NULL) {
    fd16:	b353      	cbz	r3, fd6e <cbpprintf_external+0x58>
{
    fd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd1c:	b082      	sub	sp, #8
    fd1e:	4607      	mov	r7, r0
    fd20:	4688      	mov	r8, r1
    fd22:	4691      	mov	r9, r2
    fd24:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    fd26:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    fd28:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    fd2a:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    fd2c:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    fd2e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    fd32:	441c      	add	r4, r3
    fd34:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    fd36:	f04f 0a00 	mov.w	sl, #0
    fd3a:	e00a      	b.n	fd52 <cbpprintf_external+0x3c>
		s_idx = *(uint8_t *)s++;
    fd3c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    fd40:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    fd44:	4620      	mov	r0, r4
    fd46:	f001 fab8 	bl	112ba <strlen>
    fd4a:	3001      	adds	r0, #1
    fd4c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    fd4e:	f10a 0a01 	add.w	sl, sl, #1
    fd52:	45b2      	cmp	sl, r6
    fd54:	d3f2      	bcc.n	fd3c <cbpprintf_external+0x26>
	buf += sizeof(*hdr);
    fd56:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    fd5a:	9300      	str	r3, [sp, #0]
    fd5c:	686b      	ldr	r3, [r5, #4]
    fd5e:	464a      	mov	r2, r9
    fd60:	4641      	mov	r1, r8
    fd62:	4638      	mov	r0, r7
    fd64:	f7ff ffb9 	bl	fcda <cbprintf_via_va_list>
}
    fd68:	b002      	add	sp, #8
    fd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    fd6e:	f06f 0015 	mvn.w	r0, #21
}
    fd72:	4770      	bx	lr

0000fd74 <sys_notify_validate>:
	if (notify == NULL) {
    fd74:	4602      	mov	r2, r0
    fd76:	b158      	cbz	r0, fd90 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    fd78:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    fd7a:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    fd7e:	2b01      	cmp	r3, #1
    fd80:	d003      	beq.n	fd8a <sys_notify_validate+0x16>
    fd82:	2b03      	cmp	r3, #3
    fd84:	d107      	bne.n	fd96 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    fd86:	6803      	ldr	r3, [r0, #0]
    fd88:	b143      	cbz	r3, fd9c <sys_notify_validate+0x28>
		notify->result = 0;
    fd8a:	2000      	movs	r0, #0
    fd8c:	6090      	str	r0, [r2, #8]
    fd8e:	4770      	bx	lr
		return -EINVAL;
    fd90:	f06f 0015 	mvn.w	r0, #21
    fd94:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    fd96:	f06f 0015 	mvn.w	r0, #21
    fd9a:	4770      	bx	lr
			rv = -EINVAL;
    fd9c:	f06f 0015 	mvn.w	r0, #21
}
    fda0:	4770      	bx	lr

0000fda2 <arch_printk_char_out>:
}
    fda2:	2000      	movs	r0, #0
    fda4:	4770      	bx	lr

0000fda6 <str_out>:
{
    fda6:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    fda8:	680c      	ldr	r4, [r1, #0]
    fdaa:	b154      	cbz	r4, fdc2 <str_out+0x1c>
    fdac:	688a      	ldr	r2, [r1, #8]
    fdae:	684b      	ldr	r3, [r1, #4]
    fdb0:	429a      	cmp	r2, r3
    fdb2:	da06      	bge.n	fdc2 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    fdb4:	3b01      	subs	r3, #1
    fdb6:	429a      	cmp	r2, r3
    fdb8:	d008      	beq.n	fdcc <str_out+0x26>
		ctx->str[ctx->count++] = c;
    fdba:	1c53      	adds	r3, r2, #1
    fdbc:	608b      	str	r3, [r1, #8]
    fdbe:	54a0      	strb	r0, [r4, r2]
    fdc0:	e002      	b.n	fdc8 <str_out+0x22>
		ctx->count++;
    fdc2:	688b      	ldr	r3, [r1, #8]
    fdc4:	3301      	adds	r3, #1
    fdc6:	608b      	str	r3, [r1, #8]
}
    fdc8:	bc10      	pop	{r4}
    fdca:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    fdcc:	1c53      	adds	r3, r2, #1
    fdce:	608b      	str	r3, [r1, #8]
    fdd0:	2300      	movs	r3, #0
    fdd2:	54a3      	strb	r3, [r4, r2]
    fdd4:	e7f8      	b.n	fdc8 <str_out+0x22>

0000fdd6 <vprintk>:
{
    fdd6:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    fdd8:	f000 fe41 	bl	10a5e <z_log_vprintk>
}
    fddc:	bd08      	pop	{r3, pc}

0000fdde <printk>:
{
    fdde:	b40f      	push	{r0, r1, r2, r3}
    fde0:	b500      	push	{lr}
    fde2:	b083      	sub	sp, #12
    fde4:	a904      	add	r1, sp, #16
    fde6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    fdea:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    fdec:	f7ff fff3 	bl	fdd6 <vprintk>
}
    fdf0:	b003      	add	sp, #12
    fdf2:	f85d eb04 	ldr.w	lr, [sp], #4
    fdf6:	b004      	add	sp, #16
    fdf8:	4770      	bx	lr

0000fdfa <snprintk>:
{
    fdfa:	b40c      	push	{r2, r3}
    fdfc:	b500      	push	{lr}
    fdfe:	b083      	sub	sp, #12
    fe00:	ab04      	add	r3, sp, #16
    fe02:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    fe06:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    fe08:	f7f1 fa0c 	bl	1224 <vsnprintk>
}
    fe0c:	b003      	add	sp, #12
    fe0e:	f85d eb04 	ldr.w	lr, [sp], #4
    fe12:	b002      	add	sp, #8
    fe14:	4770      	bx	lr

0000fe16 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    fe16:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe1a:	8b83      	ldrh	r3, [r0, #28]
    fe1c:	f023 0307 	bic.w	r3, r3, #7
    fe20:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fe22:	8383      	strh	r3, [r0, #28]
}
    fe24:	4770      	bx	lr

0000fe26 <notify_monitors>:
{
    fe26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe2a:	4606      	mov	r6, r0
    fe2c:	460f      	mov	r7, r1
    fe2e:	4690      	mov	r8, r2
	return list->head;
    fe30:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fe32:	b121      	cbz	r1, fe3e <notify_monitors+0x18>
	return node->next;
    fe34:	680c      	ldr	r4, [r1, #0]
    fe36:	b13c      	cbz	r4, fe48 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fe38:	b931      	cbnz	r1, fe48 <notify_monitors+0x22>
    fe3a:	460c      	mov	r4, r1
    fe3c:	e004      	b.n	fe48 <notify_monitors+0x22>
    fe3e:	460c      	mov	r4, r1
    fe40:	e002      	b.n	fe48 <notify_monitors+0x22>
    fe42:	4623      	mov	r3, r4
    fe44:	4621      	mov	r1, r4
    fe46:	461c      	mov	r4, r3
    fe48:	b169      	cbz	r1, fe66 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    fe4a:	684d      	ldr	r5, [r1, #4]
    fe4c:	4643      	mov	r3, r8
    fe4e:	463a      	mov	r2, r7
    fe50:	4630      	mov	r0, r6
    fe52:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    fe54:	2c00      	cmp	r4, #0
    fe56:	d0f4      	beq.n	fe42 <notify_monitors+0x1c>
	return node->next;
    fe58:	6823      	ldr	r3, [r4, #0]
    fe5a:	2b00      	cmp	r3, #0
    fe5c:	d0f2      	beq.n	fe44 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fe5e:	2c00      	cmp	r4, #0
    fe60:	d1f0      	bne.n	fe44 <notify_monitors+0x1e>
    fe62:	4623      	mov	r3, r4
    fe64:	e7ee      	b.n	fe44 <notify_monitors+0x1e>
}
    fe66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fe6a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fe6a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    fe6c:	f013 0307 	ands.w	r3, r3, #7
    fe70:	d103      	bne.n	fe7a <process_recheck+0x10>
	return list->head;
    fe72:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    fe74:	b10a      	cbz	r2, fe7a <process_recheck+0x10>
		evt = EVT_START;
    fe76:	2003      	movs	r0, #3
    fe78:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    fe7a:	2b02      	cmp	r3, #2
    fe7c:	d003      	beq.n	fe86 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    fe7e:	2b01      	cmp	r3, #1
    fe80:	d006      	beq.n	fe90 <process_recheck+0x26>
	int evt = EVT_NOP;
    fe82:	2000      	movs	r0, #0
    fe84:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    fe86:	8bc2      	ldrh	r2, [r0, #30]
    fe88:	2a00      	cmp	r2, #0
    fe8a:	d1f8      	bne.n	fe7e <process_recheck+0x14>
		evt = EVT_STOP;
    fe8c:	2004      	movs	r0, #4
    fe8e:	4770      	bx	lr
    fe90:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    fe92:	b10b      	cbz	r3, fe98 <process_recheck+0x2e>
		evt = EVT_RESET;
    fe94:	2005      	movs	r0, #5
}
    fe96:	4770      	bx	lr
	int evt = EVT_NOP;
    fe98:	2000      	movs	r0, #0
    fe9a:	4770      	bx	lr

0000fe9c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    fe9c:	b150      	cbz	r0, feb4 <validate_args+0x18>
{
    fe9e:	b510      	push	{r4, lr}
    fea0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    fea2:	b151      	cbz	r1, feba <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    fea4:	1d08      	adds	r0, r1, #4
    fea6:	f7ff ff65 	bl	fd74 <sys_notify_validate>
	if ((rv == 0)
    feaa:	b910      	cbnz	r0, feb2 <validate_args+0x16>
	    && ((cli->notify.flags
    feac:	68a3      	ldr	r3, [r4, #8]
    feae:	2b03      	cmp	r3, #3
    feb0:	d806      	bhi.n	fec0 <validate_args+0x24>
}
    feb2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    feb4:	f06f 0015 	mvn.w	r0, #21
}
    feb8:	4770      	bx	lr
		return -EINVAL;
    feba:	f06f 0015 	mvn.w	r0, #21
    febe:	e7f8      	b.n	feb2 <validate_args+0x16>
		rv = -EINVAL;
    fec0:	f06f 0015 	mvn.w	r0, #21
    fec4:	e7f5      	b.n	feb2 <validate_args+0x16>

0000fec6 <notify_one>:
{
    fec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    feca:	4607      	mov	r7, r0
    fecc:	460c      	mov	r4, r1
    fece:	4616      	mov	r6, r2
    fed0:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    fed2:	4619      	mov	r1, r3
    fed4:	1d20      	adds	r0, r4, #4
    fed6:	f7f1 f97b 	bl	11d0 <sys_notify_finalize>
	if (cb) {
    feda:	b128      	cbz	r0, fee8 <notify_one+0x22>
    fedc:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    fede:	462b      	mov	r3, r5
    fee0:	4632      	mov	r2, r6
    fee2:	4621      	mov	r1, r4
    fee4:	4638      	mov	r0, r7
    fee6:	47c0      	blx	r8
}
    fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000feec <notify_all>:
{
    feec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fef0:	4680      	mov	r8, r0
    fef2:	460c      	mov	r4, r1
    fef4:	4617      	mov	r7, r2
    fef6:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    fef8:	e004      	b.n	ff04 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    fefa:	4633      	mov	r3, r6
    fefc:	463a      	mov	r2, r7
    fefe:	4640      	mov	r0, r8
    ff00:	f7ff ffe1 	bl	fec6 <notify_one>
    ff04:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    ff06:	b131      	cbz	r1, ff16 <notify_all+0x2a>
	return node->next;
    ff08:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    ff0a:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ff0c:	6863      	ldr	r3, [r4, #4]
    ff0e:	428b      	cmp	r3, r1
    ff10:	d1f3      	bne.n	fefa <notify_all+0xe>
	list->tail = node;
    ff12:	6065      	str	r5, [r4, #4]
}
    ff14:	e7f1      	b.n	fefa <notify_all+0xe>
}
    ff16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ff1a <onoff_manager_init>:
	if ((mgr == NULL)
    ff1a:	b170      	cbz	r0, ff3a <onoff_manager_init+0x20>
{
    ff1c:	b538      	push	{r3, r4, r5, lr}
    ff1e:	460c      	mov	r4, r1
    ff20:	4605      	mov	r5, r0
	    || (transitions == NULL)
    ff22:	b169      	cbz	r1, ff40 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ff24:	680b      	ldr	r3, [r1, #0]
    ff26:	b173      	cbz	r3, ff46 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    ff28:	684b      	ldr	r3, [r1, #4]
    ff2a:	b17b      	cbz	r3, ff4c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ff2c:	2220      	movs	r2, #32
    ff2e:	2100      	movs	r1, #0
    ff30:	f001 fa23 	bl	1137a <memset>
    ff34:	612c      	str	r4, [r5, #16]
	return 0;
    ff36:	2000      	movs	r0, #0
}
    ff38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ff3a:	f06f 0015 	mvn.w	r0, #21
}
    ff3e:	4770      	bx	lr
		return -EINVAL;
    ff40:	f06f 0015 	mvn.w	r0, #21
    ff44:	e7f8      	b.n	ff38 <onoff_manager_init+0x1e>
    ff46:	f06f 0015 	mvn.w	r0, #21
    ff4a:	e7f5      	b.n	ff38 <onoff_manager_init+0x1e>
    ff4c:	f06f 0015 	mvn.w	r0, #21
    ff50:	e7f2      	b.n	ff38 <onoff_manager_init+0x1e>

0000ff52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ff52:	b508      	push	{r3, lr}
    ff54:	4604      	mov	r4, r0
    ff56:	4608      	mov	r0, r1
    ff58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ff5a:	461a      	mov	r2, r3
    ff5c:	47a0      	blx	r4
	return z_impl_z_current_get();
    ff5e:	f7fe fd9f 	bl	eaa0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ff62:	f7f5 ffd3 	bl	5f0c <z_impl_k_thread_abort>

0000ff66 <set_chunk_used>:
	void *cmem = &buf[c];
    ff66:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    ff6a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    ff6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ff70:	d30a      	bcc.n	ff88 <set_chunk_used+0x22>
		if (used) {
    ff72:	b122      	cbz	r2, ff7e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    ff74:	684b      	ldr	r3, [r1, #4]
    ff76:	f043 0301 	orr.w	r3, r3, #1
    ff7a:	604b      	str	r3, [r1, #4]
    ff7c:	4770      	bx	lr
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ff7e:	684b      	ldr	r3, [r1, #4]
    ff80:	f023 0301 	bic.w	r3, r3, #1
    ff84:	604b      	str	r3, [r1, #4]
    ff86:	4770      	bx	lr
		if (used) {
    ff88:	b122      	cbz	r2, ff94 <set_chunk_used+0x2e>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ff8a:	884b      	ldrh	r3, [r1, #2]
    ff8c:	f043 0301 	orr.w	r3, r3, #1
    ff90:	804b      	strh	r3, [r1, #2]
    ff92:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ff94:	884b      	ldrh	r3, [r1, #2]
    ff96:	f023 0301 	bic.w	r3, r3, #1
    ff9a:	804b      	strh	r3, [r1, #2]
}
    ff9c:	4770      	bx	lr

0000ff9e <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ff9e:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(h->end_chunk);
    ffa0:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    ffa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ffa6:	d303      	bcc.n	ffb0 <chunk_mem+0x12>
    ffa8:	2308      	movs	r3, #8
    ffaa:	4419      	add	r1, r3
}
    ffac:	4408      	add	r0, r1
    ffae:	4770      	bx	lr
    ffb0:	2304      	movs	r3, #4
    ffb2:	e7fa      	b.n	ffaa <chunk_mem+0xc>

0000ffb4 <free_list_remove_bidx>:
{
    ffb4:	b410      	push	{r4}
	void *cmem = &buf[c];
    ffb6:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    ffba:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    ffbc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ffc0:	d319      	bcc.n	fff6 <free_list_remove_bidx+0x42>
		return ((uint32_t *)cmem)[f];
    ffc2:	f8dc 300c 	ldr.w	r3, [ip, #12]
	if (next_free_chunk(h, c) == c) {
    ffc6:	4299      	cmp	r1, r3
    ffc8:	d018      	beq.n	fffc <free_list_remove_bidx+0x48>
	if (big_heap(h)) {
    ffca:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ffce:	d321      	bcc.n	10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
		return ((uint32_t *)cmem)[f];
    ffd0:	f8dc 1008 	ldr.w	r1, [ip, #8]
		b->next = second;
    ffd4:	3204      	adds	r2, #4
    ffd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    ffda:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    ffde:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ffe2:	d31a      	bcc.n	1001a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a>
		((uint32_t *)cmem)[f] = val;
    ffe4:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    ffe6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    ffea:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    ffec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fff0:	d315      	bcc.n	1001e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1e>
		((uint32_t *)cmem)[f] = val;
    fff2:	6099      	str	r1, [r3, #8]
    fff4:	e00c      	b.n	10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>
		return ((uint16_t *)cmem)[f];
    fff6:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    fffa:	e7e4      	b.n	ffc6 <free_list_remove_bidx+0x12>
		h->avail_buckets &= ~BIT(bidx);
    fffc:	68c3      	ldr	r3, [r0, #12]
    fffe:	2101      	movs	r1, #1
   10000:	4091      	lsls	r1, r2
   10002:	ea23 0301 	bic.w	r3, r3, r1
   10006:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   10008:	3204      	adds	r2, #4
   1000a:	2300      	movs	r3, #0
   1000c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   10010:	bc10      	pop	{r4}
   10012:	4770      	bx	lr
   10014:	f8bc 1004 	ldrh.w	r1, [ip, #4]
   10018:	e7dc      	b.n	ffd4 <free_list_remove_bidx+0x20>
		((uint16_t *)cmem)[f] = val;
   1001a:	80d3      	strh	r3, [r2, #6]
   1001c:	e7e3      	b.n	ffe6 <free_list_remove_bidx+0x32>
   1001e:	8099      	strh	r1, [r3, #4]
   10020:	e7f6      	b.n	10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>

00010022 <free_list_add_bidx>:
	if (b->next == 0U) {
   10022:	1d13      	adds	r3, r2, #4
   10024:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   10028:	b9db      	cbnz	r3, 10062 <free_list_add_bidx+0x40>
		h->avail_buckets |= BIT(bidx);
   1002a:	68c3      	ldr	r3, [r0, #12]
   1002c:	f04f 0c01 	mov.w	ip, #1
   10030:	fa0c fc02 	lsl.w	ip, ip, r2
   10034:	ea43 030c 	orr.w	r3, r3, ip
   10038:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1003a:	3204      	adds	r2, #4
   1003c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   10040:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   10044:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   10046:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1004a:	d306      	bcc.n	1005a <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   1004c:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   1004e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   10050:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10054:	d303      	bcc.n	1005e <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   10056:	60d9      	str	r1, [r3, #12]
   10058:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   1005a:	8099      	strh	r1, [r3, #4]
   1005c:	e7f7      	b.n	1004e <free_list_add_bidx+0x2c>
   1005e:	80d9      	strh	r1, [r3, #6]
   10060:	4770      	bx	lr
{
   10062:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
   10064:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   10068:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1006a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1006e:	d31c      	bcc.n	100aa <free_list_add_bidx+0x88>
		return ((uint32_t *)cmem)[f];
   10070:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
   10074:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
   10078:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1007c:	d318      	bcc.n	100b0 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   1007e:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
   10082:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   10084:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   10088:	d315      	bcc.n	100b6 <free_list_add_bidx+0x94>
		((uint32_t *)cmem)[f] = val;
   1008a:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
   1008e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   10092:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   10094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10098:	d310      	bcc.n	100bc <free_list_add_bidx+0x9a>
		((uint32_t *)cmem)[f] = val;
   1009a:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1009c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1009e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   100a2:	d30d      	bcc.n	100c0 <free_list_add_bidx+0x9e>
		((uint32_t *)cmem)[f] = val;
   100a4:	f8cc 1008 	str.w	r1, [ip, #8]
}
   100a8:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
   100aa:	f8bc 2004 	ldrh.w	r2, [ip, #4]
   100ae:	e7e1      	b.n	10074 <free_list_add_bidx+0x52>
		((uint16_t *)cmem)[f] = val;
   100b0:	f8ae 2004 	strh.w	r2, [lr, #4]
   100b4:	e7e5      	b.n	10082 <free_list_add_bidx+0x60>
   100b6:	f8ae 3006 	strh.w	r3, [lr, #6]
   100ba:	e7e8      	b.n	1008e <free_list_add_bidx+0x6c>
   100bc:	80d1      	strh	r1, [r2, #6]
   100be:	e7ed      	b.n	1009c <free_list_add_bidx+0x7a>
   100c0:	f8ac 1004 	strh.w	r1, [ip, #4]
   100c4:	e7f0      	b.n	100a8 <free_list_add_bidx+0x86>

000100c6 <split_chunks>:
{
   100c6:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   100c8:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   100cc:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   100ce:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   100d2:	d329      	bcc.n	10128 <split_chunks+0x62>
		return ((uint32_t *)cmem)[f];
   100d4:	f8dc 5004 	ldr.w	r5, [ip, #4]
	chunksz_t lsz = rc - lc;
   100d8:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   100da:	1a89      	subs	r1, r1, r2
   100dc:	eb01 0155 	add.w	r1, r1, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   100e0:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
   100e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   100e6:	d322      	bcc.n	1012e <split_chunks+0x68>
		((uint32_t *)cmem)[f] = val;
   100e8:	f8cc 5004 	str.w	r5, [ip, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   100ec:	004c      	lsls	r4, r1, #1
	void *cmem = &buf[c];
   100ee:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
   100f2:	6885      	ldr	r5, [r0, #8]
   100f4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   100f8:	d31c      	bcc.n	10134 <split_chunks+0x6e>
		((uint32_t *)cmem)[f] = val;
   100fa:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
   100fe:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   10100:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   10104:	d319      	bcc.n	1013a <split_chunks+0x74>
		((uint32_t *)cmem)[f] = val;
   10106:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   1010a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1010c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10110:	d316      	bcc.n	10140 <split_chunks+0x7a>
		return ((uint32_t *)cmem)[f];
   10112:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
   10116:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1011a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1011e:	d312      	bcc.n	10146 <split_chunks+0x80>
		((uint32_t *)cmem)[f] = val;
   10120:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
}
   10124:	bc30      	pop	{r4, r5}
   10126:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   10128:	f8bc 5002 	ldrh.w	r5, [ip, #2]
   1012c:	e7d4      	b.n	100d8 <split_chunks+0x12>
		((uint16_t *)cmem)[f] = val;
   1012e:	f8ac 5002 	strh.w	r5, [ip, #2]
   10132:	e7db      	b.n	100ec <split_chunks+0x26>
   10134:	f8ac 4002 	strh.w	r4, [ip, #2]
   10138:	e7e1      	b.n	100fe <split_chunks+0x38>
   1013a:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   1013e:	e7e4      	b.n	1010a <split_chunks+0x44>
		return ((uint16_t *)cmem)[f];
   10140:	f8bc 4002 	ldrh.w	r4, [ip, #2]
   10144:	e7e7      	b.n	10116 <split_chunks+0x50>
		((uint16_t *)cmem)[f] = val;
   10146:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   1014a:	e7eb      	b.n	10124 <split_chunks+0x5e>

0001014c <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   1014c:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1014e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10152:	d304      	bcc.n	1015e <mem_to_chunkid+0x12>
   10154:	2308      	movs	r3, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10156:	1ac9      	subs	r1, r1, r3
   10158:	1a08      	subs	r0, r1, r0
}
   1015a:	08c0      	lsrs	r0, r0, #3
   1015c:	4770      	bx	lr
   1015e:	2304      	movs	r3, #4
   10160:	e7f9      	b.n	10156 <mem_to_chunkid+0xa>

00010162 <free_list_add>:
{
   10162:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   10164:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   10166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1016a:	d307      	bcc.n	1017c <free_list_add+0x1a>
	void *cmem = &buf[c];
   1016c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   10170:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   10172:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   10174:	2a01      	cmp	r2, #1
   10176:	d002      	beq.n	1017e <free_list_add+0x1c>
   10178:	2200      	movs	r2, #0
   1017a:	e000      	b.n	1017e <free_list_add+0x1c>
   1017c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1017e:	b9a2      	cbnz	r2, 101aa <free_list_add+0x48>
	void *cmem = &buf[c];
   10180:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   10184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10188:	d310      	bcc.n	101ac <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   1018a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1018c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1018e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10192:	d30d      	bcc.n	101b0 <free_list_add+0x4e>
   10194:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10196:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   10198:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1019c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1019e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   101a2:	f1c2 021f 	rsb	r2, r2, #31
   101a6:	f7ff ff3c 	bl	10022 <free_list_add_bidx>
}
   101aa:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   101ac:	8852      	ldrh	r2, [r2, #2]
   101ae:	e7ed      	b.n	1018c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   101b0:	2304      	movs	r3, #4
   101b2:	e7f0      	b.n	10196 <free_list_add+0x34>

000101b4 <alloc_chunk>:
{
   101b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   101b6:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   101b8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   101bc:	d310      	bcc.n	101e0 <alloc_chunk+0x2c>
   101be:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   101c0:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   101c2:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   101c6:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   101c8:	fab3 f383 	clz	r3, r3
   101cc:	f1c3 021f 	rsb	r2, r3, #31
	if (b->next) {
   101d0:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   101d4:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
   101d8:	b346      	cbz	r6, 1022c <alloc_chunk+0x78>
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   101da:	f04f 0c03 	mov.w	ip, #3
   101de:	e012      	b.n	10206 <alloc_chunk+0x52>
	return big_heap(h) ? 8 : 4;
   101e0:	2304      	movs	r3, #4
   101e2:	e7ed      	b.n	101c0 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   101e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
   101e8:	e017      	b.n	1021a <alloc_chunk+0x66>
				free_list_remove_bidx(h, c, bi);
   101ea:	4621      	mov	r1, r4
   101ec:	f7ff fee2 	bl	ffb4 <free_list_remove_bidx>
				return c;
   101f0:	e024      	b.n	1023c <alloc_chunk+0x88>
   101f2:	f8be 4006 	ldrh.w	r4, [lr, #6]
			b->next = next_free_chunk(h, c);
   101f6:	1d17      	adds	r7, r2, #4
   101f8:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
		} while (--i && b->next != first);
   101fc:	f1bc 0c01 	subs.w	ip, ip, #1
   10200:	d014      	beq.n	1022c <alloc_chunk+0x78>
   10202:	42a6      	cmp	r6, r4
   10204:	d012      	beq.n	1022c <alloc_chunk+0x78>
			chunkid_t c = b->next;
   10206:	1d14      	adds	r4, r2, #4
   10208:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1020c:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
	if (big_heap(h)) {
   10210:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10214:	d3e6      	bcc.n	101e4 <alloc_chunk+0x30>
		return ((uint32_t *)cmem)[f];
   10216:	f8de 7004 	ldr.w	r7, [lr, #4]
			if (chunk_size(h, c) >= sz) {
   1021a:	ebb1 0f57 	cmp.w	r1, r7, lsr #1
   1021e:	d9e4      	bls.n	101ea <alloc_chunk+0x36>
	if (big_heap(h)) {
   10220:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10224:	d3e5      	bcc.n	101f2 <alloc_chunk+0x3e>
		return ((uint32_t *)cmem)[f];
   10226:	f8de 400c 	ldr.w	r4, [lr, #12]
   1022a:	e7e4      	b.n	101f6 <alloc_chunk+0x42>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1022c:	68c4      	ldr	r4, [r0, #12]
   1022e:	f1c3 0220 	rsb	r2, r3, #32
   10232:	2301      	movs	r3, #1
   10234:	4093      	lsls	r3, r2
   10236:	425b      	negs	r3, r3
	if (bmask != 0U) {
   10238:	401c      	ands	r4, r3
   1023a:	d101      	bne.n	10240 <alloc_chunk+0x8c>
}
   1023c:	4620      	mov	r0, r4
   1023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   10240:	fa94 f2a4 	rbit	r2, r4
   10244:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   10248:	1d13      	adds	r3, r2, #4
   1024a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1024e:	4621      	mov	r1, r4
   10250:	f7ff feb0 	bl	ffb4 <free_list_remove_bidx>
		return c;
   10254:	e7f2      	b.n	1023c <alloc_chunk+0x88>

00010256 <sys_heap_alloc>:
{
   10256:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   10258:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1025a:	b3a1      	cbz	r1, 102c6 <sys_heap_alloc+0x70>
   1025c:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1025e:	68aa      	ldr	r2, [r5, #8]
   10260:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   10264:	d931      	bls.n	102ca <sys_heap_alloc+0x74>
	return big_heap(h) ? 8 : 4;
   10266:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1026a:	d31d      	bcc.n	102a8 <sys_heap_alloc+0x52>
   1026c:	2208      	movs	r2, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1026e:	189c      	adds	r4, r3, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10270:	3407      	adds	r4, #7
   10272:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   10274:	4621      	mov	r1, r4
   10276:	4628      	mov	r0, r5
   10278:	f7ff ff9c 	bl	101b4 <alloc_chunk>
	if (c == 0U) {
   1027c:	4606      	mov	r6, r0
   1027e:	b330      	cbz	r0, 102ce <sys_heap_alloc+0x78>
	void *cmem = &buf[c];
   10280:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   10284:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
   10286:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1028a:	d30f      	bcc.n	102ac <sys_heap_alloc+0x56>
		return ((uint32_t *)cmem)[f];
   1028c:	685b      	ldr	r3, [r3, #4]
	if (chunk_size(h, c) > chunk_sz) {
   1028e:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   10292:	d30d      	bcc.n	102b0 <sys_heap_alloc+0x5a>
	set_chunk_used(h, c, true);
   10294:	2201      	movs	r2, #1
   10296:	4631      	mov	r1, r6
   10298:	4628      	mov	r0, r5
   1029a:	f7ff fe64 	bl	ff66 <set_chunk_used>
	mem = chunk_mem(h, c);
   1029e:	4631      	mov	r1, r6
   102a0:	4628      	mov	r0, r5
   102a2:	f7ff fe7c 	bl	ff9e <chunk_mem>
}
   102a6:	bd70      	pop	{r4, r5, r6, pc}
	return big_heap(h) ? 8 : 4;
   102a8:	2204      	movs	r2, #4
   102aa:	e7e0      	b.n	1026e <sys_heap_alloc+0x18>
		return ((uint16_t *)cmem)[f];
   102ac:	885b      	ldrh	r3, [r3, #2]
   102ae:	e7ee      	b.n	1028e <sys_heap_alloc+0x38>
		split_chunks(h, c, c + chunk_sz);
   102b0:	4434      	add	r4, r6
   102b2:	4622      	mov	r2, r4
   102b4:	4631      	mov	r1, r6
   102b6:	4628      	mov	r0, r5
   102b8:	f7ff ff05 	bl	100c6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   102bc:	4621      	mov	r1, r4
   102be:	4628      	mov	r0, r5
   102c0:	f7ff ff4f 	bl	10162 <free_list_add>
   102c4:	e7e6      	b.n	10294 <sys_heap_alloc+0x3e>
		return NULL;
   102c6:	2000      	movs	r0, #0
   102c8:	e7ed      	b.n	102a6 <sys_heap_alloc+0x50>
   102ca:	2000      	movs	r0, #0
   102cc:	e7eb      	b.n	102a6 <sys_heap_alloc+0x50>
		return NULL;
   102ce:	2000      	movs	r0, #0
   102d0:	e7e9      	b.n	102a6 <sys_heap_alloc+0x50>

000102d2 <extract_decimal>:
{
   102d2:	4684      	mov	ip, r0
	const char *sp = *str;
   102d4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   102d6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   102d8:	e006      	b.n	102e8 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   102da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   102de:	3201      	adds	r2, #1
   102e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   102e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   102e8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   102ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   102ee:	2909      	cmp	r1, #9
   102f0:	d9f3      	bls.n	102da <extract_decimal+0x8>
	*str = sp;
   102f2:	f8cc 2000 	str.w	r2, [ip]
}
   102f6:	4770      	bx	lr

000102f8 <extract_width>:
{
   102f8:	b530      	push	{r4, r5, lr}
   102fa:	b083      	sub	sp, #12
   102fc:	4604      	mov	r4, r0
   102fe:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   10300:	7803      	ldrb	r3, [r0, #0]
   10302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10306:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   10308:	460d      	mov	r5, r1
   1030a:	780b      	ldrb	r3, [r1, #0]
   1030c:	2b2a      	cmp	r3, #42	; 0x2a
   1030e:	d018      	beq.n	10342 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   10310:	a801      	add	r0, sp, #4
   10312:	f7ff ffde 	bl	102d2 <extract_decimal>
	if (sp != wp) {
   10316:	9b01      	ldr	r3, [sp, #4]
   10318:	429d      	cmp	r5, r3
   1031a:	d00f      	beq.n	1033c <extract_width+0x44>
		conv->width_present = true;
   1031c:	7823      	ldrb	r3, [r4, #0]
   1031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10322:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   10324:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   10326:	b2db      	uxtb	r3, r3
   10328:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   1032c:	2800      	cmp	r0, #0
   1032e:	db10      	blt.n	10352 <extract_width+0x5a>
   10330:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10332:	4313      	orrs	r3, r2
   10334:	7822      	ldrb	r2, [r4, #0]
   10336:	f363 0241 	bfi	r2, r3, #1, #1
   1033a:	7022      	strb	r2, [r4, #0]
	return sp;
   1033c:	9801      	ldr	r0, [sp, #4]
}
   1033e:	b003      	add	sp, #12
   10340:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   10342:	7843      	ldrb	r3, [r0, #1]
   10344:	f043 0301 	orr.w	r3, r3, #1
   10348:	7043      	strb	r3, [r0, #1]
		return ++sp;
   1034a:	4608      	mov	r0, r1
   1034c:	3001      	adds	r0, #1
   1034e:	9001      	str	r0, [sp, #4]
   10350:	e7f5      	b.n	1033e <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   10352:	2201      	movs	r2, #1
   10354:	e7ed      	b.n	10332 <extract_width+0x3a>

00010356 <extract_prec>:
{
   10356:	b510      	push	{r4, lr}
   10358:	b082      	sub	sp, #8
   1035a:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   1035c:	780b      	ldrb	r3, [r1, #0]
   1035e:	2b2e      	cmp	r3, #46	; 0x2e
   10360:	bf14      	ite	ne
   10362:	2300      	movne	r3, #0
   10364:	2301      	moveq	r3, #1
   10366:	7842      	ldrb	r2, [r0, #1]
   10368:	f363 0241 	bfi	r2, r3, #1, #1
   1036c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   1036e:	b1c3      	cbz	r3, 103a2 <extract_prec+0x4c>
   10370:	4604      	mov	r4, r0
	++sp;
   10372:	9b01      	ldr	r3, [sp, #4]
   10374:	1c5a      	adds	r2, r3, #1
   10376:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   10378:	785b      	ldrb	r3, [r3, #1]
   1037a:	2b2a      	cmp	r3, #42	; 0x2a
   1037c:	d013      	beq.n	103a6 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   1037e:	a801      	add	r0, sp, #4
   10380:	f7ff ffa7 	bl	102d2 <extract_decimal>
	conv->prec_value = prec;
   10384:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   10386:	7823      	ldrb	r3, [r4, #0]
   10388:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   1038c:	2800      	cmp	r0, #0
   1038e:	db12      	blt.n	103b6 <extract_prec+0x60>
   10390:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10392:	4313      	orrs	r3, r2
   10394:	7822      	ldrb	r2, [r4, #0]
   10396:	f363 0241 	bfi	r2, r3, #1, #1
   1039a:	7022      	strb	r2, [r4, #0]
	return sp;
   1039c:	9801      	ldr	r0, [sp, #4]
}
   1039e:	b002      	add	sp, #8
   103a0:	bd10      	pop	{r4, pc}
		return sp;
   103a2:	4608      	mov	r0, r1
   103a4:	e7fb      	b.n	1039e <extract_prec+0x48>
		conv->prec_star = true;
   103a6:	7843      	ldrb	r3, [r0, #1]
   103a8:	f043 0304 	orr.w	r3, r3, #4
   103ac:	7043      	strb	r3, [r0, #1]
		return ++sp;
   103ae:	4610      	mov	r0, r2
   103b0:	3001      	adds	r0, #1
   103b2:	9001      	str	r0, [sp, #4]
   103b4:	e7f3      	b.n	1039e <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   103b6:	2201      	movs	r2, #1
   103b8:	e7eb      	b.n	10392 <extract_prec+0x3c>

000103ba <extract_length>:
{
   103ba:	4602      	mov	r2, r0
	switch (*sp) {
   103bc:	780b      	ldrb	r3, [r1, #0]
   103be:	3b4c      	subs	r3, #76	; 0x4c
   103c0:	2b2e      	cmp	r3, #46	; 0x2e
   103c2:	d85b      	bhi.n	1047c <extract_length+0xc2>
   103c4:	e8df f003 	tbb	[pc, r3]
   103c8:	5a5a5a4f 	.word	0x5a5a5a4f
   103cc:	5a5a5a5a 	.word	0x5a5a5a5a
   103d0:	5a5a5a5a 	.word	0x5a5a5a5a
   103d4:	5a5a5a5a 	.word	0x5a5a5a5a
   103d8:	5a5a5a5a 	.word	0x5a5a5a5a
   103dc:	5a5a5a5a 	.word	0x5a5a5a5a
   103e0:	5a5a5a5a 	.word	0x5a5a5a5a
   103e4:	5a3a5a18 	.word	0x5a3a5a18
   103e8:	5a5a5a29 	.word	0x5a5a5a29
   103ec:	5a5a5a5a 	.word	0x5a5a5a5a
   103f0:	5a5a5a48 	.word	0x5a5a5a48
   103f4:	5a5a      	.short	0x5a5a
   103f6:	41          	.byte	0x41
   103f7:	00          	.byte	0x00
		if (*++sp == 'h') {
   103f8:	1c48      	adds	r0, r1, #1
   103fa:	784b      	ldrb	r3, [r1, #1]
   103fc:	2b68      	cmp	r3, #104	; 0x68
   103fe:	d005      	beq.n	1040c <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   10400:	7853      	ldrb	r3, [r2, #1]
   10402:	2102      	movs	r1, #2
   10404:	f361 03c6 	bfi	r3, r1, #3, #4
   10408:	7053      	strb	r3, [r2, #1]
   1040a:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   1040c:	7853      	ldrb	r3, [r2, #1]
   1040e:	2001      	movs	r0, #1
   10410:	f360 03c6 	bfi	r3, r0, #3, #4
   10414:	7053      	strb	r3, [r2, #1]
			++sp;
   10416:	1c88      	adds	r0, r1, #2
   10418:	4770      	bx	lr
		if (*++sp == 'l') {
   1041a:	1c48      	adds	r0, r1, #1
   1041c:	784b      	ldrb	r3, [r1, #1]
   1041e:	2b6c      	cmp	r3, #108	; 0x6c
   10420:	d005      	beq.n	1042e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   10422:	7853      	ldrb	r3, [r2, #1]
   10424:	2103      	movs	r1, #3
   10426:	f361 03c6 	bfi	r3, r1, #3, #4
   1042a:	7053      	strb	r3, [r2, #1]
   1042c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   1042e:	7853      	ldrb	r3, [r2, #1]
   10430:	2004      	movs	r0, #4
   10432:	f360 03c6 	bfi	r3, r0, #3, #4
   10436:	7053      	strb	r3, [r2, #1]
			++sp;
   10438:	1c88      	adds	r0, r1, #2
   1043a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   1043c:	7853      	ldrb	r3, [r2, #1]
   1043e:	2005      	movs	r0, #5
   10440:	f360 03c6 	bfi	r3, r0, #3, #4
   10444:	7053      	strb	r3, [r2, #1]
		++sp;
   10446:	1c48      	adds	r0, r1, #1
		break;
   10448:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   1044a:	7853      	ldrb	r3, [r2, #1]
   1044c:	2006      	movs	r0, #6
   1044e:	f360 03c6 	bfi	r3, r0, #3, #4
   10452:	7053      	strb	r3, [r2, #1]
		++sp;
   10454:	1c48      	adds	r0, r1, #1
		break;
   10456:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   10458:	7853      	ldrb	r3, [r2, #1]
   1045a:	2007      	movs	r0, #7
   1045c:	f360 03c6 	bfi	r3, r0, #3, #4
   10460:	7053      	strb	r3, [r2, #1]
		++sp;
   10462:	1c48      	adds	r0, r1, #1
		break;
   10464:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   10466:	7853      	ldrb	r3, [r2, #1]
   10468:	2008      	movs	r0, #8
   1046a:	f360 03c6 	bfi	r3, r0, #3, #4
   1046e:	7053      	strb	r3, [r2, #1]
		++sp;
   10470:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   10472:	7813      	ldrb	r3, [r2, #0]
   10474:	f043 0302 	orr.w	r3, r3, #2
   10478:	7013      	strb	r3, [r2, #0]
		break;
   1047a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   1047c:	7853      	ldrb	r3, [r2, #1]
   1047e:	f36f 03c6 	bfc	r3, #3, #4
   10482:	7053      	strb	r3, [r2, #1]
		break;
   10484:	4608      	mov	r0, r1
}
   10486:	4770      	bx	lr

00010488 <extract_specifier>:
{
   10488:	b500      	push	{lr}
   1048a:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   1048c:	4608      	mov	r0, r1
   1048e:	f810 3b01 	ldrb.w	r3, [r0], #1
   10492:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   10494:	2b78      	cmp	r3, #120	; 0x78
   10496:	d817      	bhi.n	104c8 <extract_specifier+0x40>
   10498:	2b6e      	cmp	r3, #110	; 0x6e
   1049a:	d229      	bcs.n	104f0 <extract_specifier+0x68>
   1049c:	2b69      	cmp	r3, #105	; 0x69
   1049e:	d813      	bhi.n	104c8 <extract_specifier+0x40>
   104a0:	2b58      	cmp	r3, #88	; 0x58
   104a2:	d317      	bcc.n	104d4 <extract_specifier+0x4c>
   104a4:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   104a8:	fa5f fc8c 	uxtb.w	ip, ip
   104ac:	2101      	movs	r1, #1
   104ae:	fa01 f10c 	lsl.w	r1, r1, ip
   104b2:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   104b6:	d114      	bne.n	104e2 <extract_specifier+0x5a>
   104b8:	f640 0c01 	movw	ip, #2049	; 0x801
   104bc:	ea11 0f0c 	tst.w	r1, ip
   104c0:	d155      	bne.n	1056e <extract_specifier+0xe6>
   104c2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   104c6:	d13a      	bne.n	1053e <extract_specifier+0xb6>
		conv->invalid = true;
   104c8:	7813      	ldrb	r3, [r2, #0]
   104ca:	f043 0301 	orr.w	r3, r3, #1
   104ce:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   104d0:	2100      	movs	r1, #0
		break;
   104d2:	e042      	b.n	1055a <extract_specifier+0xd2>
	switch (conv->specifier) {
   104d4:	2b41      	cmp	r3, #65	; 0x41
   104d6:	d004      	beq.n	104e2 <extract_specifier+0x5a>
   104d8:	d3f6      	bcc.n	104c8 <extract_specifier+0x40>
   104da:	3b45      	subs	r3, #69	; 0x45
   104dc:	b2db      	uxtb	r3, r3
   104de:	2b02      	cmp	r3, #2
   104e0:	d8f2      	bhi.n	104c8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   104e2:	7893      	ldrb	r3, [r2, #2]
   104e4:	2104      	movs	r1, #4
   104e6:	f361 0302 	bfi	r3, r1, #0, #3
   104ea:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   104ec:	2101      	movs	r1, #1
			break;
   104ee:	e034      	b.n	1055a <extract_specifier+0xd2>
	switch (conv->specifier) {
   104f0:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   104f4:	b2c9      	uxtb	r1, r1
   104f6:	f04f 0c01 	mov.w	ip, #1
   104fa:	fa0c fc01 	lsl.w	ip, ip, r1
   104fe:	f240 4182 	movw	r1, #1154	; 0x482
   10502:	ea1c 0f01 	tst.w	ip, r1
   10506:	bf14      	ite	ne
   10508:	f04f 0e01 	movne.w	lr, #1
   1050c:	f04f 0e00 	moveq.w	lr, #0
   10510:	d12d      	bne.n	1056e <extract_specifier+0xe6>
   10512:	f01c 0f24 	tst.w	ip, #36	; 0x24
   10516:	bf14      	ite	ne
   10518:	2101      	movne	r1, #1
   1051a:	2100      	moveq	r1, #0
   1051c:	d139      	bne.n	10592 <extract_specifier+0x10a>
   1051e:	f01c 0c01 	ands.w	ip, ip, #1
   10522:	d0d1      	beq.n	104c8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   10524:	7893      	ldrb	r3, [r2, #2]
   10526:	f04f 0e03 	mov.w	lr, #3
   1052a:	f36e 0302 	bfi	r3, lr, #0, #3
   1052e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   10530:	7853      	ldrb	r3, [r2, #1]
   10532:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10536:	2b40      	cmp	r3, #64	; 0x40
   10538:	d10f      	bne.n	1055a <extract_specifier+0xd2>
			unsupported = true;
   1053a:	4661      	mov	r1, ip
   1053c:	e00d      	b.n	1055a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   1053e:	7891      	ldrb	r1, [r2, #2]
   10540:	f04f 0c01 	mov.w	ip, #1
   10544:	f36c 0102 	bfi	r1, ip, #0, #3
   10548:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1054a:	7851      	ldrb	r1, [r2, #1]
   1054c:	f001 0178 	and.w	r1, r1, #120	; 0x78
   10550:	2940      	cmp	r1, #64	; 0x40
   10552:	d013      	beq.n	1057c <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   10554:	2b63      	cmp	r3, #99	; 0x63
   10556:	d018      	beq.n	1058a <extract_specifier+0x102>
	bool unsupported = false;
   10558:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   1055a:	7813      	ldrb	r3, [r2, #0]
   1055c:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   10560:	ea41 010c 	orr.w	r1, r1, ip
   10564:	f361 0341 	bfi	r3, r1, #1, #1
   10568:	7013      	strb	r3, [r2, #0]
}
   1056a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   1056e:	7891      	ldrb	r1, [r2, #2]
   10570:	f04f 0c02 	mov.w	ip, #2
   10574:	f36c 0102 	bfi	r1, ip, #0, #3
   10578:	7091      	strb	r1, [r2, #2]
   1057a:	e7e6      	b.n	1054a <extract_specifier+0xc2>
			conv->invalid = true;
   1057c:	f892 c000 	ldrb.w	ip, [r2]
   10580:	f04c 0c01 	orr.w	ip, ip, #1
   10584:	f882 c000 	strb.w	ip, [r2]
   10588:	e7e4      	b.n	10554 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1058a:	3900      	subs	r1, #0
   1058c:	bf18      	it	ne
   1058e:	2101      	movne	r1, #1
   10590:	e7e3      	b.n	1055a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   10592:	7893      	ldrb	r3, [r2, #2]
   10594:	f04f 0c03 	mov.w	ip, #3
   10598:	f36c 0302 	bfi	r3, ip, #0, #3
   1059c:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1059e:	7853      	ldrb	r3, [r2, #1]
   105a0:	f013 0f78 	tst.w	r3, #120	; 0x78
   105a4:	d1d9      	bne.n	1055a <extract_specifier+0xd2>
	bool unsupported = false;
   105a6:	4671      	mov	r1, lr
   105a8:	e7d7      	b.n	1055a <extract_specifier+0xd2>

000105aa <extract_conversion>:
{
   105aa:	b510      	push	{r4, lr}
   105ac:	4604      	mov	r4, r0
   105ae:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   105b0:	2300      	movs	r3, #0
   105b2:	6023      	str	r3, [r4, #0]
   105b4:	6063      	str	r3, [r4, #4]
   105b6:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   105b8:	784b      	ldrb	r3, [r1, #1]
   105ba:	2b25      	cmp	r3, #37	; 0x25
   105bc:	d014      	beq.n	105e8 <extract_conversion+0x3e>
   105be:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   105c0:	4620      	mov	r0, r4
   105c2:	f7f1 fba3 	bl	1d0c <extract_flags>
   105c6:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   105c8:	4620      	mov	r0, r4
   105ca:	f7ff fe95 	bl	102f8 <extract_width>
   105ce:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   105d0:	4620      	mov	r0, r4
   105d2:	f7ff fec0 	bl	10356 <extract_prec>
   105d6:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   105d8:	4620      	mov	r0, r4
   105da:	f7ff feee 	bl	103ba <extract_length>
   105de:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   105e0:	4620      	mov	r0, r4
   105e2:	f7ff ff51 	bl	10488 <extract_specifier>
}
   105e6:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   105e8:	3002      	adds	r0, #2
   105ea:	70e3      	strb	r3, [r4, #3]
		return sp;
   105ec:	e7fb      	b.n	105e6 <extract_conversion+0x3c>

000105ee <conversion_radix>:
	switch (specifier) {
   105ee:	286f      	cmp	r0, #111	; 0x6f
   105f0:	d00c      	beq.n	1060c <conversion_radix+0x1e>
   105f2:	d905      	bls.n	10600 <conversion_radix+0x12>
   105f4:	2870      	cmp	r0, #112	; 0x70
   105f6:	d00b      	beq.n	10610 <conversion_radix+0x22>
   105f8:	2878      	cmp	r0, #120	; 0x78
   105fa:	d10b      	bne.n	10614 <conversion_radix+0x26>
		return 16;
   105fc:	2010      	movs	r0, #16
   105fe:	4770      	bx	lr
	switch (specifier) {
   10600:	2858      	cmp	r0, #88	; 0x58
   10602:	d001      	beq.n	10608 <conversion_radix+0x1a>
   10604:	200a      	movs	r0, #10
   10606:	4770      	bx	lr
		return 16;
   10608:	2010      	movs	r0, #16
   1060a:	4770      	bx	lr
		return 8;
   1060c:	2008      	movs	r0, #8
   1060e:	4770      	bx	lr
		return 16;
   10610:	2010      	movs	r0, #16
   10612:	4770      	bx	lr
	switch (specifier) {
   10614:	200a      	movs	r0, #10
}
   10616:	4770      	bx	lr

00010618 <encode_uint>:
{
   10618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1061c:	4605      	mov	r5, r0
   1061e:	460c      	mov	r4, r1
   10620:	4693      	mov	fp, r2
   10622:	4699      	mov	r9, r3
   10624:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   10626:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   10628:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   1062c:	f7ff ffdf 	bl	105ee <conversion_radix>
   10630:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   10632:	e015      	b.n	10660 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10634:	f1ba 0f19 	cmp.w	sl, #25
   10638:	d820      	bhi.n	1067c <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1063a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1063c:	3237      	adds	r2, #55	; 0x37
   1063e:	b2d2      	uxtb	r2, r2
   10640:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   10644:	4632      	mov	r2, r6
   10646:	4643      	mov	r3, r8
   10648:	4628      	mov	r0, r5
   1064a:	4621      	mov	r1, r4
   1064c:	f7ef fd82 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10650:	42b5      	cmp	r5, r6
   10652:	f174 0400 	sbcs.w	r4, r4, #0
   10656:	d315      	bcc.n	10684 <encode_uint+0x6c>
   10658:	454f      	cmp	r7, r9
   1065a:	d913      	bls.n	10684 <encode_uint+0x6c>
		value /= radix;
   1065c:	4605      	mov	r5, r0
   1065e:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10660:	f04f 0800 	mov.w	r8, #0
   10664:	4632      	mov	r2, r6
   10666:	4643      	mov	r3, r8
   10668:	4628      	mov	r0, r5
   1066a:	4621      	mov	r1, r4
   1066c:	f7ef fd72 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10670:	2a09      	cmp	r2, #9
   10672:	d8df      	bhi.n	10634 <encode_uint+0x1c>
   10674:	b2d2      	uxtb	r2, r2
   10676:	3230      	adds	r2, #48	; 0x30
   10678:	b2d2      	uxtb	r2, r2
   1067a:	e7e1      	b.n	10640 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1067c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1067e:	3257      	adds	r2, #87	; 0x57
   10680:	b2d2      	uxtb	r2, r2
   10682:	e7dd      	b.n	10640 <encode_uint+0x28>
	if (conv->flag_hash) {
   10684:	f89b 3000 	ldrb.w	r3, [fp]
   10688:	f013 0f20 	tst.w	r3, #32
   1068c:	d003      	beq.n	10696 <encode_uint+0x7e>
		if (radix == 8) {
   1068e:	2e08      	cmp	r6, #8
   10690:	d004      	beq.n	1069c <encode_uint+0x84>
		} else if (radix == 16) {
   10692:	2e10      	cmp	r6, #16
   10694:	d009      	beq.n	106aa <encode_uint+0x92>
}
   10696:	4638      	mov	r0, r7
   10698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1069c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   106a0:	f043 0308 	orr.w	r3, r3, #8
   106a4:	f88b 3002 	strb.w	r3, [fp, #2]
   106a8:	e7f5      	b.n	10696 <encode_uint+0x7e>
			conv->altform_0c = true;
   106aa:	f89b 3002 	ldrb.w	r3, [fp, #2]
   106ae:	f043 0310 	orr.w	r3, r3, #16
   106b2:	f88b 3002 	strb.w	r3, [fp, #2]
   106b6:	e7ee      	b.n	10696 <encode_uint+0x7e>

000106b8 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   106b8:	7843      	ldrb	r3, [r0, #1]
   106ba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   106be:	2b07      	cmp	r3, #7
   106c0:	d818      	bhi.n	106f4 <store_count+0x3c>
   106c2:	e8df f003 	tbb	[pc, r3]
   106c6:	0604      	.short	0x0604
   106c8:	100c0a08 	.word	0x100c0a08
   106cc:	1614      	.short	0x1614
		*(int *)dp = count;
   106ce:	600a      	str	r2, [r1, #0]
		break;
   106d0:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   106d2:	700a      	strb	r2, [r1, #0]
		break;
   106d4:	4770      	bx	lr
		*(short *)dp = (short)count;
   106d6:	800a      	strh	r2, [r1, #0]
		break;
   106d8:	4770      	bx	lr
		*(long *)dp = (long)count;
   106da:	600a      	str	r2, [r1, #0]
		break;
   106dc:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   106de:	17d3      	asrs	r3, r2, #31
   106e0:	600a      	str	r2, [r1, #0]
   106e2:	604b      	str	r3, [r1, #4]
		break;
   106e4:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   106e6:	17d3      	asrs	r3, r2, #31
   106e8:	600a      	str	r2, [r1, #0]
   106ea:	604b      	str	r3, [r1, #4]
		break;
   106ec:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   106ee:	600a      	str	r2, [r1, #0]
		break;
   106f0:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   106f2:	600a      	str	r2, [r1, #0]
}
   106f4:	4770      	bx	lr

000106f6 <outs>:
{
   106f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106fa:	4607      	mov	r7, r0
   106fc:	460e      	mov	r6, r1
   106fe:	4614      	mov	r4, r2
   10700:	4698      	mov	r8, r3
	size_t count = 0;
   10702:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   10704:	e006      	b.n	10714 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   10706:	4631      	mov	r1, r6
   10708:	f814 0b01 	ldrb.w	r0, [r4], #1
   1070c:	47b8      	blx	r7
		if (rc < 0) {
   1070e:	2800      	cmp	r0, #0
   10710:	db09      	blt.n	10726 <outs+0x30>
		++count;
   10712:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   10714:	4544      	cmp	r4, r8
   10716:	d3f6      	bcc.n	10706 <outs+0x10>
   10718:	f1b8 0f00 	cmp.w	r8, #0
   1071c:	d102      	bne.n	10724 <outs+0x2e>
   1071e:	7823      	ldrb	r3, [r4, #0]
   10720:	2b00      	cmp	r3, #0
   10722:	d1f0      	bne.n	10706 <outs+0x10>
	return (int)count;
   10724:	4628      	mov	r0, r5
}
   10726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001072a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1072a:	4040      	eors	r0, r0
   1072c:	f380 8811 	msr	BASEPRI, r0
   10730:	f04f 0004 	mov.w	r0, #4
   10734:	df02      	svc	2
}
   10736:	4770      	bx	lr

00010738 <assert_print>:

void assert_print(const char *fmt, ...)
{
   10738:	b40f      	push	{r0, r1, r2, r3}
   1073a:	b500      	push	{lr}
   1073c:	b083      	sub	sp, #12
   1073e:	a904      	add	r1, sp, #16
   10740:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   10744:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   10746:	f7ff fb46 	bl	fdd6 <vprintk>

	va_end(ap);
}
   1074a:	b003      	add	sp, #12
   1074c:	f85d eb04 	ldr.w	lr, [sp], #4
   10750:	b004      	add	sp, #16
   10752:	4770      	bx	lr

00010754 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   10754:	68c3      	ldr	r3, [r0, #12]
   10756:	6802      	ldr	r2, [r0, #0]
   10758:	4293      	cmp	r3, r2
   1075a:	d805      	bhi.n	10768 <free_space+0x14>
	} else if (!buffer->rd_idx) {
   1075c:	b14b      	cbz	r3, 10772 <free_space+0x1e>
	*res = buffer->size - buffer->tmp_wr_idx;
   1075e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10760:	1a9b      	subs	r3, r3, r2
   10762:	600b      	str	r3, [r1, #0]
	return true;
   10764:	2001      	movs	r0, #1
}
   10766:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   10768:	1a9b      	subs	r3, r3, r2
   1076a:	3b01      	subs	r3, #1
   1076c:	600b      	str	r3, [r1, #0]
		return false;
   1076e:	2000      	movs	r0, #0
   10770:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   10772:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10774:	1a9b      	subs	r3, r3, r2
   10776:	3b01      	subs	r3, #1
   10778:	600b      	str	r3, [r1, #0]
		return false;
   1077a:	2000      	movs	r0, #0
   1077c:	4770      	bx	lr

0001077e <get_usage>:
{
   1077e:	b510      	push	{r4, lr}
   10780:	b082      	sub	sp, #8
   10782:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   10784:	a901      	add	r1, sp, #4
   10786:	f7ff ffe5 	bl	10754 <free_space>
   1078a:	b120      	cbz	r0, 10796 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   1078c:	68e3      	ldr	r3, [r4, #12]
   1078e:	9a01      	ldr	r2, [sp, #4]
   10790:	4413      	add	r3, r2
   10792:	3b01      	subs	r3, #1
   10794:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   10796:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10798:	9b01      	ldr	r3, [sp, #4]
   1079a:	1ac0      	subs	r0, r0, r3
}
   1079c:	3801      	subs	r0, #1
   1079e:	b002      	add	sp, #8
   107a0:	bd10      	pop	{r4, pc}

000107a2 <max_utilization_update>:
{
   107a2:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   107a4:	6903      	ldr	r3, [r0, #16]
   107a6:	f013 0f04 	tst.w	r3, #4
   107aa:	d100      	bne.n	107ae <max_utilization_update+0xc>
}
   107ac:	bd38      	pop	{r3, r4, r5, pc}
   107ae:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   107b0:	6a85      	ldr	r5, [r0, #40]	; 0x28
   107b2:	f7ff ffe4 	bl	1077e <get_usage>
   107b6:	4285      	cmp	r5, r0
   107b8:	d902      	bls.n	107c0 <max_utilization_update+0x1e>
   107ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   107bc:	62a0      	str	r0, [r4, #40]	; 0x28
   107be:	e7f5      	b.n	107ac <max_utilization_update+0xa>
   107c0:	4620      	mov	r0, r4
   107c2:	f7ff ffdc 	bl	1077e <get_usage>
   107c6:	e7f9      	b.n	107bc <max_utilization_update+0x1a>

000107c8 <add_skip_item>:
{
   107c8:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   107ca:	2300      	movs	r3, #0
   107cc:	f36f 0300 	bfc	r3, #0, #1
   107d0:	f043 0302 	orr.w	r3, r3, #2
   107d4:	f361 039f 	bfi	r3, r1, #2, #30
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   107d8:	6a02      	ldr	r2, [r0, #32]
   107da:	6804      	ldr	r4, [r0, #0]
   107dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   107e0:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   107e2:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   107e4:	6902      	ldr	r2, [r0, #16]
   107e6:	f012 0201 	ands.w	r2, r2, #1
   107ea:	d104      	bne.n	107f6 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   107ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
   107ee:	42a3      	cmp	r3, r4
   107f0:	d304      	bcc.n	107fc <add_skip_item+0x34>
   107f2:	1b1b      	subs	r3, r3, r4
   107f4:	e002      	b.n	107fc <add_skip_item+0x34>
		return i & (buffer->size - 1);
   107f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   107f8:	3c01      	subs	r4, #1
   107fa:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   107fc:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   107fe:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   10800:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   10802:	b922      	cbnz	r2, 1080e <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   10804:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10806:	4299      	cmp	r1, r3
   10808:	d304      	bcc.n	10814 <add_skip_item+0x4c>
   1080a:	1ac9      	subs	r1, r1, r3
   1080c:	e002      	b.n	10814 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   1080e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10810:	3b01      	subs	r3, #1
   10812:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   10814:	6041      	str	r1, [r0, #4]
}
   10816:	bc10      	pop	{r4}
   10818:	4770      	bx	lr

0001081a <drop_item_locked>:
{
   1081a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1081e:	b083      	sub	sp, #12
   10820:	4604      	mov	r4, r0
   10822:	9101      	str	r1, [sp, #4]
   10824:	4615      	mov	r5, r2
   10826:	461e      	mov	r6, r3
	*user_packet = false;
   10828:	2300      	movs	r3, #0
   1082a:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1082c:	f8d0 8020 	ldr.w	r8, [r0, #32]
   10830:	f8d0 900c 	ldr.w	r9, [r0, #12]
   10834:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   10838:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   1083c:	f003 0303 	and.w	r3, r3, #3
   10840:	2b02      	cmp	r3, #2
   10842:	d012      	beq.n	1086a <drop_item_locked+0x50>
	return 0;
   10844:	f04f 0b00 	mov.w	fp, #0
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   10848:	69e3      	ldr	r3, [r4, #28]
   1084a:	4650      	mov	r0, sl
   1084c:	4798      	blx	r3
   1084e:	4607      	mov	r7, r0
	if (skip_wlen) {
   10850:	f1bb 0f00 	cmp.w	fp, #0
   10854:	d152      	bne.n	108fc <drop_item_locked+0xe2>
	} else if (allow_drop) {
   10856:	2d00      	cmp	r5, #0
   10858:	d05d      	beq.n	10916 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   1085a:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   1085e:	f013 0f02 	tst.w	r3, #2
   10862:	d10a      	bne.n	1087a <drop_item_locked+0x60>
			*user_packet = true;
   10864:	2301      	movs	r3, #1
   10866:	7033      	strb	r3, [r6, #0]
   10868:	e049      	b.n	108fe <drop_item_locked+0xe4>
		return item->skip.len;
   1086a:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1086e:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   10872:	d0e9      	beq.n	10848 <drop_item_locked+0x2e>
		return item->skip.len;
   10874:	465f      	mov	r7, fp
		allow_drop = true;
   10876:	2501      	movs	r5, #1
   10878:	e041      	b.n	108fe <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   1087a:	9901      	ldr	r1, [sp, #4]
   1087c:	3101      	adds	r1, #1
   1087e:	4620      	mov	r0, r4
   10880:	f7ff ffa2 	bl	107c8 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   10884:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   10886:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   10888:	6922      	ldr	r2, [r4, #16]
   1088a:	f012 0201 	ands.w	r2, r2, #1
   1088e:	d104      	bne.n	1089a <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   10890:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10892:	428b      	cmp	r3, r1
   10894:	d304      	bcc.n	108a0 <drop_item_locked+0x86>
   10896:	1a5b      	subs	r3, r3, r1
   10898:	e002      	b.n	108a0 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   1089a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1089c:	3901      	subs	r1, #1
   1089e:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   108a0:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   108a2:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   108a4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   108a6:	b922      	cbnz	r2, 108b2 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   108a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   108aa:	428b      	cmp	r3, r1
   108ac:	d304      	bcc.n	108b8 <drop_item_locked+0x9e>
   108ae:	1a5b      	subs	r3, r3, r1
   108b0:	e002      	b.n	108b8 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   108b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   108b4:	3901      	subs	r1, #1
   108b6:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   108b8:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   108ba:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   108bc:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   108be:	b922      	cbnz	r2, 108ca <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   108c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   108c2:	4293      	cmp	r3, r2
   108c4:	d304      	bcc.n	108d0 <drop_item_locked+0xb6>
   108c6:	1a9b      	subs	r3, r3, r2
   108c8:	e002      	b.n	108d0 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   108ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
   108cc:	3a01      	subs	r2, #1
   108ce:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   108d0:	6a21      	ldr	r1, [r4, #32]
   108d2:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   108d6:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   108da:	f002 0203 	and.w	r2, r2, #3
   108de:	2a02      	cmp	r2, #2
   108e0:	d006      	beq.n	108f0 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   108e2:	69e3      	ldr	r3, [r4, #28]
   108e4:	4650      	mov	r0, sl
   108e6:	4798      	blx	r3
   108e8:	4407      	add	r7, r0
				*user_packet = true;
   108ea:	2301      	movs	r3, #1
   108ec:	7033      	strb	r3, [r6, #0]
   108ee:	e006      	b.n	108fe <drop_item_locked+0xe4>
		return item->skip.len;
   108f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   108f4:	089b      	lsrs	r3, r3, #2
   108f6:	d0f4      	beq.n	108e2 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   108f8:	441f      	add	r7, r3
   108fa:	e000      	b.n	108fe <drop_item_locked+0xe4>
		allow_drop = true;
   108fc:	2501      	movs	r5, #1
	if (allow_drop) {
   108fe:	b195      	cbz	r5, 10926 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   10900:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   10902:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   10904:	6922      	ldr	r2, [r4, #16]
   10906:	f012 0f01 	tst.w	r2, #1
   1090a:	d107      	bne.n	1091c <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   1090c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1090e:	4293      	cmp	r3, r2
   10910:	d307      	bcc.n	10922 <drop_item_locked+0x108>
   10912:	1a9b      	subs	r3, r3, r2
   10914:	e005      	b.n	10922 <drop_item_locked+0x108>
		item = NULL;
   10916:	f04f 0a00 	mov.w	sl, #0
   1091a:	e7f0      	b.n	108fe <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   1091c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1091e:	3a01      	subs	r2, #1
   10920:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   10922:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   10924:	60a3      	str	r3, [r4, #8]
}
   10926:	4650      	mov	r0, sl
   10928:	b003      	add	sp, #12
   1092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001092e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   1092e:	6883      	ldr	r3, [r0, #8]
   10930:	6842      	ldr	r2, [r0, #4]
   10932:	4293      	cmp	r3, r2
   10934:	d905      	bls.n	10942 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   10936:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10938:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1093a:	3800      	subs	r0, #0
   1093c:	bf18      	it	ne
   1093e:	2001      	movne	r0, #1
   10940:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   10942:	1ad0      	subs	r0, r2, r3
		return false;
   10944:	e7f9      	b.n	1093a <mpsc_pbuf_is_pending+0xc>

00010946 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_INCLUDE_NET_CORE_IMAGE, 1);

GEN_ABS_SYM_END
   10946:	4770      	bx	lr

00010948 <nrf_gpio_pin_present_check>:
    switch (port)
   10948:	0943      	lsrs	r3, r0, #5
   1094a:	d00a      	beq.n	10962 <nrf_gpio_pin_present_check+0x1a>
   1094c:	2b01      	cmp	r3, #1
   1094e:	d10b      	bne.n	10968 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   10950:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   10954:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   10958:	fa23 f000 	lsr.w	r0, r3, r0
}
   1095c:	f000 0001 	and.w	r0, r0, #1
   10960:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   10962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10966:	e7f5      	b.n	10954 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   10968:	2300      	movs	r3, #0
   1096a:	e7f3      	b.n	10954 <nrf_gpio_pin_present_check+0xc>

0001096c <nrf_gpio_pin_control_select>:
{
   1096c:	b510      	push	{r4, lr}
   1096e:	b082      	sub	sp, #8
   10970:	9001      	str	r0, [sp, #4]
   10972:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10974:	a801      	add	r0, sp, #4
   10976:	f7f1 ffd9 	bl	292c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
   1097a:	9a01      	ldr	r2, [sp, #4]
   1097c:	3280      	adds	r2, #128	; 0x80
   1097e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   10982:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
   10986:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
   1098a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   1098e:	b002      	add	sp, #8
   10990:	bd10      	pop	{r4, pc}

00010992 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   10992:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
   10994:	f7f1 ffb4 	bl	2900 <nrfx_coredep_delay_us>
}
   10998:	bd08      	pop	{r3, pc}

0001099a <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1099a:	2301      	movs	r3, #1
   1099c:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   109a0:	f3bf 8f4f 	dsb	sy
        __WFE();
   109a4:	bf20      	wfe
    while (true)
   109a6:	e7fd      	b.n	109a4 <nrf_regulators_system_off+0xa>

000109a8 <pm_state_exit_post_ops>:
   109a8:	2300      	movs	r3, #0
   109aa:	f383 8811 	msr	BASEPRI, r3
   109ae:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   109b2:	4770      	bx	lr

000109b4 <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
   109b4:	b510      	push	{r4, lr}
   109b6:	4684      	mov	ip, r0
   109b8:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   109ba:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   109bc:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
   109be:	6854      	ldr	r4, [r2, #4]
   109c0:	b124      	cbz	r4, 109cc <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
   109c2:	460a      	mov	r2, r1
   109c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   109c8:	47a0      	blx	r4
}
   109ca:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   109cc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   109d0:	e7fb      	b.n	109ca <mbox_register_callback+0x16>

000109d2 <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
   109d2:	b510      	push	{r4, lr}
   109d4:	4603      	mov	r3, r0
   109d6:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   109d8:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   109da:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
   109dc:	690c      	ldr	r4, [r1, #16]
   109de:	b114      	cbz	r4, 109e6 <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
   109e0:	6859      	ldr	r1, [r3, #4]
   109e2:	47a0      	blx	r4
}
   109e4:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   109e6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   109ea:	e7fb      	b.n	109e4 <z_impl_mbox_set_enabled+0x12>

000109ec <rtc_cb>:
{
   109ec:	b510      	push	{r4, lr}
   109ee:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
   109f0:	2100      	movs	r1, #0
   109f2:	4620      	mov	r0, r4
   109f4:	f7f2 f902 	bl	2bfc <ppi_rtc_to_ipc>
		free_resources(channels);
   109f8:	4620      	mov	r0, r4
   109fa:	f7f2 f8d7 	bl	2bac <free_resources>
}
   109fe:	bd10      	pop	{r4, pc}

00010a00 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   10a00:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   10a02:	f013 0f04 	tst.w	r3, #4
   10a06:	d001      	beq.n	10a0c <log_msg_generic_get_wlen+0xc>
	return 0;
   10a08:	2000      	movs	r0, #0
}
   10a0a:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   10a0c:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   10a0e:	f3c3 2049 	ubfx	r0, r3, #9, #10
   10a12:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   10a16:	4418      	add	r0, r3
   10a18:	3017      	adds	r0, #23
   10a1a:	f020 0007 	bic.w	r0, r0, #7
   10a1e:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   10a20:	4770      	bx	lr

00010a22 <dummy_timestamp>:
}
   10a22:	2000      	movs	r0, #0
   10a24:	4770      	bx	lr

00010a26 <msg_filter_check>:
}
   10a26:	2001      	movs	r0, #1
   10a28:	4770      	bx	lr

00010a2a <default_get_timestamp>:
{
   10a2a:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   10a2c:	f001 fa56 	bl	11edc <sys_clock_cycle_get_32>
}
   10a30:	bd08      	pop	{r3, pc}

00010a32 <k_msleep>:
{
   10a32:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   10a34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10a38:	17c1      	asrs	r1, r0, #31
   10a3a:	03c9      	lsls	r1, r1, #15
   10a3c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10a40:	03c0      	lsls	r0, r0, #15
   10a42:	f240 33e7 	movw	r3, #999	; 0x3e7
   10a46:	18c0      	adds	r0, r0, r3
   10a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a4c:	f04f 0300 	mov.w	r3, #0
   10a50:	f141 0100 	adc.w	r1, r1, #0
   10a54:	f7ef fb7e 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   10a58:	f7fd ffd8 	bl	ea0c <z_impl_k_sleep>
}
   10a5c:	bd08      	pop	{r3, pc}

00010a5e <z_log_vprintk>:
{
   10a5e:	b500      	push	{lr}
   10a60:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   10a62:	9103      	str	r1, [sp, #12]
   10a64:	9002      	str	r0, [sp, #8]
   10a66:	2000      	movs	r0, #0
   10a68:	9001      	str	r0, [sp, #4]
   10a6a:	9000      	str	r0, [sp, #0]
   10a6c:	4603      	mov	r3, r0
   10a6e:	4602      	mov	r2, r0
   10a70:	4601      	mov	r1, r0
   10a72:	f7f2 fe57 	bl	3724 <z_impl_z_log_msg_runtime_vcreate>
}
   10a76:	b005      	add	sp, #20
   10a78:	f85d fb04 	ldr.w	pc, [sp], #4

00010a7c <notify_drop>:
{
   10a7c:	b508      	push	{r3, lr}
	z_log_dropped(true);
   10a7e:	2001      	movs	r0, #1
   10a80:	f7f2 fbbe 	bl	3200 <z_log_dropped>
}
   10a84:	bd08      	pop	{r3, pc}

00010a86 <z_log_get_tag>:
}
   10a86:	2000      	movs	r0, #0
   10a88:	4770      	bx	lr

00010a8a <z_cbprintf_cpy>:
{
   10a8a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   10a8c:	6853      	ldr	r3, [r2, #4]
   10a8e:	6896      	ldr	r6, [r2, #8]
   10a90:	1b9b      	subs	r3, r3, r6
   10a92:	428b      	cmp	r3, r1
   10a94:	d30c      	bcc.n	10ab0 <z_cbprintf_cpy+0x26>
   10a96:	460c      	mov	r4, r1
   10a98:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   10a9a:	6813      	ldr	r3, [r2, #0]
   10a9c:	460a      	mov	r2, r1
   10a9e:	4601      	mov	r1, r0
   10aa0:	1998      	adds	r0, r3, r6
   10aa2:	f000 fc3b 	bl	1131c <memcpy>
	desc->off += len;
   10aa6:	68ab      	ldr	r3, [r5, #8]
   10aa8:	4423      	add	r3, r4
   10aaa:	60ab      	str	r3, [r5, #8]
	return len;
   10aac:	4620      	mov	r0, r4
}
   10aae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   10ab0:	f06f 001b 	mvn.w	r0, #27
   10ab4:	e7fb      	b.n	10aae <z_cbprintf_cpy+0x24>

00010ab6 <z_log_msg_finalize>:
{
   10ab6:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   10ab8:	b190      	cbz	r0, 10ae0 <z_log_msg_finalize+0x2a>
   10aba:	460e      	mov	r6, r1
   10abc:	4614      	mov	r4, r2
   10abe:	4619      	mov	r1, r3
   10ac0:	4605      	mov	r5, r0
	if (data) {
   10ac2:	b13b      	cbz	r3, 10ad4 <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   10ac4:	3010      	adds	r0, #16
   10ac6:	f3c2 2349 	ubfx	r3, r2, #9, #10
		memcpy(d, data, desc.data_len);
   10aca:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   10ace:	4418      	add	r0, r3
   10ad0:	f000 fc24 	bl	1131c <memcpy>
	msg->hdr.desc = desc;
   10ad4:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   10ad6:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   10ad8:	4628      	mov	r0, r5
   10ada:	f7f2 fce9 	bl	34b0 <z_log_msg_commit>
}
   10ade:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   10ae0:	f7f2 fb8e 	bl	3200 <z_log_dropped>
		return;
   10ae4:	e7fb      	b.n	10ade <z_log_msg_finalize+0x28>

00010ae6 <buffer_write>:
{
   10ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ae8:	4607      	mov	r7, r0
   10aea:	460d      	mov	r5, r1
   10aec:	4614      	mov	r4, r2
   10aee:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   10af0:	4632      	mov	r2, r6
   10af2:	4621      	mov	r1, r4
   10af4:	4628      	mov	r0, r5
   10af6:	47b8      	blx	r7
		buf += processed;
   10af8:	4405      	add	r5, r0
	} while (len != 0);
   10afa:	1a24      	subs	r4, r4, r0
   10afc:	d1f8      	bne.n	10af0 <buffer_write+0xa>
}
   10afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010b00 <cbvprintf>:
{
   10b00:	b510      	push	{r4, lr}
   10b02:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10b04:	2400      	movs	r4, #0
   10b06:	9400      	str	r4, [sp, #0]
   10b08:	f7f1 f962 	bl	1dd0 <z_cbvprintf_impl>
}
   10b0c:	b002      	add	sp, #8
   10b0e:	bd10      	pop	{r4, pc}

00010b10 <color_prefix>:
{
   10b10:	b508      	push	{r3, lr}
   10b12:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   10b14:	2201      	movs	r2, #1
   10b16:	f7f2 fecb 	bl	38b0 <color_print>
}
   10b1a:	bd08      	pop	{r3, pc}

00010b1c <color_postfix>:
{
   10b1c:	b508      	push	{r3, lr}
   10b1e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   10b20:	2200      	movs	r2, #0
   10b22:	f7f2 fec5 	bl	38b0 <color_print>
}
   10b26:	bd08      	pop	{r3, pc}

00010b28 <postfix_print>:
{
   10b28:	b538      	push	{r3, r4, r5, lr}
   10b2a:	4605      	mov	r5, r0
   10b2c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   10b2e:	f001 0101 	and.w	r1, r1, #1
   10b32:	f7ff fff3 	bl	10b1c <color_postfix>
	newline_print(output, flags);
   10b36:	4621      	mov	r1, r4
   10b38:	4628      	mov	r0, r5
   10b3a:	f7f2 ff3f 	bl	39bc <newline_print>
}
   10b3e:	bd38      	pop	{r3, r4, r5, pc}

00010b40 <log_msg_hexdump>:
{
   10b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b44:	b083      	sub	sp, #12
   10b46:	4680      	mov	r8, r0
   10b48:	460e      	mov	r6, r1
   10b4a:	4615      	mov	r5, r2
   10b4c:	461f      	mov	r7, r3
   10b4e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   10b52:	462c      	mov	r4, r5
   10b54:	2d10      	cmp	r5, #16
   10b56:	bf28      	it	cs
   10b58:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   10b5a:	f8cd 9000 	str.w	r9, [sp]
   10b5e:	463b      	mov	r3, r7
   10b60:	4622      	mov	r2, r4
   10b62:	4631      	mov	r1, r6
   10b64:	4640      	mov	r0, r8
   10b66:	f7f2 ff3d 	bl	39e4 <hexdump_line_print>
		data += length;
   10b6a:	4426      	add	r6, r4
	} while (len);
   10b6c:	1b2d      	subs	r5, r5, r4
   10b6e:	d1f0      	bne.n	10b52 <log_msg_hexdump+0x12>
}
   10b70:	b003      	add	sp, #12
   10b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00010b76 <log_output_flush>:
{
   10b76:	b510      	push	{r4, lr}
   10b78:	4604      	mov	r4, r0
		     output->control_block->offset,
   10b7a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   10b7c:	6853      	ldr	r3, [r2, #4]
   10b7e:	6812      	ldr	r2, [r2, #0]
   10b80:	6881      	ldr	r1, [r0, #8]
   10b82:	6800      	ldr	r0, [r0, #0]
   10b84:	f7ff ffaf 	bl	10ae6 <buffer_write>
	output->control_block->offset = 0;
   10b88:	6863      	ldr	r3, [r4, #4]
   10b8a:	2200      	movs	r2, #0
   10b8c:	601a      	str	r2, [r3, #0]
}
   10b8e:	bd10      	pop	{r4, pc}

00010b90 <cr_out_func>:
{
   10b90:	b538      	push	{r3, r4, r5, lr}
   10b92:	4604      	mov	r4, r0
   10b94:	460d      	mov	r5, r1
	out_func(c, ctx);
   10b96:	f7f2 ff83 	bl	3aa0 <out_func>
	if (c == '\n') {
   10b9a:	2c0a      	cmp	r4, #10
   10b9c:	d001      	beq.n	10ba2 <cr_out_func+0x12>
}
   10b9e:	2000      	movs	r0, #0
   10ba0:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   10ba2:	4629      	mov	r1, r5
   10ba4:	200d      	movs	r0, #13
   10ba6:	f7f2 ff7b 	bl	3aa0 <out_func>
   10baa:	e7f8      	b.n	10b9e <cr_out_func+0xe>

00010bac <k_msleep>:
{
   10bac:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   10bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10bb2:	17c1      	asrs	r1, r0, #31
   10bb4:	03c9      	lsls	r1, r1, #15
   10bb6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10bba:	03c0      	lsls	r0, r0, #15
   10bbc:	f240 33e7 	movw	r3, #999	; 0x3e7
   10bc0:	18c0      	adds	r0, r0, r3
   10bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10bc6:	f04f 0300 	mov.w	r3, #0
   10bca:	f141 0100 	adc.w	r1, r1, #0
   10bce:	f7ef fac1 	bl	154 <__aeabi_uldivmod>
   10bd2:	f7fd ff1b 	bl	ea0c <z_impl_k_sleep>
}
   10bd6:	bd08      	pop	{r3, pc}

00010bd8 <z_impl_mbox_send>:
{
   10bd8:	b510      	push	{r4, lr}
   10bda:	4603      	mov	r3, r0
   10bdc:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   10bde:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   10be0:	6881      	ldr	r1, [r0, #8]
	if (api->send == NULL) {
   10be2:	680c      	ldr	r4, [r1, #0]
   10be4:	b114      	cbz	r4, 10bec <z_impl_mbox_send+0x14>
	return api->send(channel->dev, channel->id, msg);
   10be6:	6859      	ldr	r1, [r3, #4]
   10be8:	47a0      	blx	r4
}
   10bea:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   10bec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   10bf0:	e7fb      	b.n	10bea <z_impl_mbox_send+0x12>

00010bf2 <mbox_register_callback>:
{
   10bf2:	b510      	push	{r4, lr}
   10bf4:	4684      	mov	ip, r0
   10bf6:	4613      	mov	r3, r2
		(const struct mbox_driver_api *)channel->dev->api;
   10bf8:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   10bfa:	6882      	ldr	r2, [r0, #8]
	if (api->register_callback == NULL) {
   10bfc:	6854      	ldr	r4, [r2, #4]
   10bfe:	b124      	cbz	r4, 10c0a <mbox_register_callback+0x18>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10c00:	460a      	mov	r2, r1
   10c02:	f8dc 1004 	ldr.w	r1, [ip, #4]
   10c06:	47a0      	blx	r4
}
   10c08:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   10c0a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   10c0e:	e7fb      	b.n	10c08 <mbox_register_callback+0x16>

00010c10 <z_impl_mbox_set_enabled>:
{
   10c10:	b510      	push	{r4, lr}
   10c12:	4603      	mov	r3, r0
   10c14:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   10c16:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   10c18:	6881      	ldr	r1, [r0, #8]
	if (api->set_enabled == NULL) {
   10c1a:	690c      	ldr	r4, [r1, #16]
   10c1c:	b114      	cbz	r4, 10c24 <z_impl_mbox_set_enabled+0x14>
	return api->set_enabled(channel->dev, channel->id, enable);
   10c1e:	6859      	ldr	r1, [r3, #4]
   10c20:	47a0      	blx	r4
}
   10c22:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   10c24:	f06f 0057 	mvn.w	r0, #87	; 0x57
   10c28:	e7fb      	b.n	10c22 <z_impl_mbox_set_enabled+0x12>

00010c2a <shm_size>:
#define ROLE_HOST		VIRTIO_DEV_DRIVER
#define ROLE_REMOTE		VIRTIO_DEV_DEVICE

static inline size_t vq_ring_size(unsigned int num, unsigned int buf_size)
{
	return (buf_size * num);
   10c2a:	fb00 f101 	mul.w	r1, r0, r1
}

static inline size_t shm_size(unsigned int num, unsigned int buf_size)
{
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
   10c2e:	3102      	adds	r1, #2
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   10c30:	1cc3      	adds	r3, r0, #3
   10c32:	005b      	lsls	r3, r3, #1
   10c34:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   10c38:	3303      	adds	r3, #3
   10c3a:	f023 0303 	bic.w	r3, r3, #3
	size += sizeof(struct vring_used) +
   10c3e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   10c42:	3306      	adds	r3, #6
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   10c44:	005b      	lsls	r3, r3, #1
}
   10c46:	eb03 0041 	add.w	r0, r3, r1, lsl #1
   10c4a:	4770      	bx	lr

00010c4c <virtio_notify_cb>:
{
   10c4c:	b508      	push	{r3, lr}
	if (conf->mbox_tx.dev) {
   10c4e:	68cb      	ldr	r3, [r1, #12]
   10c50:	b123      	cbz	r3, 10c5c <virtio_notify_cb+0x10>
		mbox_send(&conf->mbox_tx, NULL);
   10c52:	f101 000c 	add.w	r0, r1, #12
	return z_impl_mbox_send(channel, msg);
   10c56:	2100      	movs	r1, #0
   10c58:	f7ff ffbe 	bl	10bd8 <z_impl_mbox_send>
}
   10c5c:	bd08      	pop	{r3, pc}

00010c5e <get_tx_buffer_size>:
	struct backend_data_t *data = instance->data;
   10c5e:	6903      	ldr	r3, [r0, #16]
}
   10c60:	f8d3 0378 	ldr.w	r0, [r3, #888]	; 0x378
   10c64:	4770      	bx	lr

00010c66 <drop_tx_buffer>:
}
   10c66:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10c6a:	4770      	bx	lr

00010c6c <release_rx_buffer>:
	if (!rpmsg_ept) {
   10c6c:	b131      	cbz	r1, 10c7c <release_rx_buffer+0x10>
{
   10c6e:	b508      	push	{r3, lr}
   10c70:	4608      	mov	r0, r1
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   10c72:	4611      	mov	r1, r2
   10c74:	f002 f962 	bl	12f3c <rpmsg_release_rx_buffer>
	return 0;
   10c78:	2000      	movs	r0, #0
}
   10c7a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   10c7c:	f06f 0001 	mvn.w	r0, #1
}
   10c80:	4770      	bx	lr

00010c82 <hold_rx_buffer>:
	if (!rpmsg_ept) {
   10c82:	b131      	cbz	r1, 10c92 <hold_rx_buffer+0x10>
{
   10c84:	b508      	push	{r3, lr}
   10c86:	4608      	mov	r0, r1
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   10c88:	4611      	mov	r1, r2
   10c8a:	f002 f94d 	bl	12f28 <rpmsg_hold_rx_buffer>
	return 0;
   10c8e:	2000      	movs	r0, #0
}
   10c90:	bd08      	pop	{r3, pc}
		return -ENOENT;
   10c92:	f06f 0001 	mvn.w	r0, #1
}
   10c96:	4770      	bx	lr

00010c98 <send_nocopy>:
{
   10c98:	b510      	push	{r4, lr}
   10c9a:	b082      	sub	sp, #8
   10c9c:	460c      	mov	r4, r1
	struct backend_data_t *data = instance->data;
   10c9e:	6901      	ldr	r1, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   10ca0:	f501 715d 	add.w	r1, r1, #884	; 0x374
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ca4:	e8d1 1faf 	lda	r1, [r1]
   10ca8:	2902      	cmp	r1, #2
   10caa:	d10a      	bne.n	10cc2 <send_nocopy+0x2a>
	if (len == 0) {
   10cac:	b163      	cbz	r3, 10cc8 <send_nocopy+0x30>
	if (!rpmsg_ept) {
   10cae:	b174      	cbz	r4, 10cce <send_nocopy+0x36>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   10cb0:	9300      	str	r3, [sp, #0]
   10cb2:	4613      	mov	r3, r2
   10cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10cb8:	4620      	mov	r0, r4
   10cba:	f7fa fd45 	bl	b748 <rpmsg_send_offchannel_nocopy>
}
   10cbe:	b002      	add	sp, #8
   10cc0:	bd10      	pop	{r4, pc}
		return -EBUSY;
   10cc2:	f06f 000f 	mvn.w	r0, #15
   10cc6:	e7fa      	b.n	10cbe <send_nocopy+0x26>
		return -EBADMSG;
   10cc8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10ccc:	e7f7      	b.n	10cbe <send_nocopy+0x26>
		return -ENOENT;
   10cce:	f06f 0001 	mvn.w	r0, #1
   10cd2:	e7f4      	b.n	10cbe <send_nocopy+0x26>

00010cd4 <get_tx_buffer>:
{
   10cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cd8:	4690      	mov	r8, r2
   10cda:	461e      	mov	r6, r3
   10cdc:	9a06      	ldr	r2, [sp, #24]
   10cde:	9b07      	ldr	r3, [sp, #28]
	struct backend_data_t *data = instance->data;
   10ce0:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   10ce2:	b3a1      	cbz	r1, 10d4e <get_tx_buffer+0x7a>
   10ce4:	460f      	mov	r7, r1
	if (!r_data || !size) {
   10ce6:	f1b8 0f00 	cmp.w	r8, #0
   10cea:	d033      	beq.n	10d54 <get_tx_buffer+0x80>
   10cec:	b3ae      	cbz	r6, 10d5a <get_tx_buffer+0x86>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   10cee:	4614      	mov	r4, r2
   10cf0:	461d      	mov	r5, r3
   10cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10cf6:	bf08      	it	eq
   10cf8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   10cfc:	d001      	beq.n	10d02 <get_tx_buffer+0x2e>
   10cfe:	4313      	orrs	r3, r2
   10d00:	d11e      	bne.n	10d40 <get_tx_buffer+0x6c>
	if ((*size) && (*size > data->tx_buffer_size)) {
   10d02:	6833      	ldr	r3, [r6, #0]
   10d04:	b11b      	cbz	r3, 10d0e <get_tx_buffer+0x3a>
   10d06:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
   10d0a:	4293      	cmp	r3, r2
   10d0c:	d81b      	bhi.n	10d46 <get_tx_buffer+0x72>
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   10d0e:	ea04 0205 	and.w	r2, r4, r5
   10d12:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   10d16:	bf14      	ite	ne
   10d18:	2200      	movne	r2, #0
   10d1a:	2201      	moveq	r2, #1
   10d1c:	4631      	mov	r1, r6
   10d1e:	4638      	mov	r0, r7
   10d20:	f002 f916 	bl	12f50 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   10d24:	4603      	mov	r3, r0
   10d26:	b928      	cbnz	r0, 10d34 <get_tx_buffer+0x60>
   10d28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   10d2c:	bf08      	it	eq
   10d2e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   10d32:	d0ec      	beq.n	10d0e <get_tx_buffer+0x3a>
	if (!payload) {
   10d34:	b1a3      	cbz	r3, 10d60 <get_tx_buffer+0x8c>
	(*r_data) = payload;
   10d36:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   10d3a:	2000      	movs	r0, #0
}
   10d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
   10d40:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10d44:	e7fa      	b.n	10d3c <get_tx_buffer+0x68>
		*size = data->tx_buffer_size;
   10d46:	6032      	str	r2, [r6, #0]
		return -ENOMEM;
   10d48:	f06f 000b 	mvn.w	r0, #11
   10d4c:	e7f6      	b.n	10d3c <get_tx_buffer+0x68>
		return -ENOENT;
   10d4e:	f06f 0001 	mvn.w	r0, #1
   10d52:	e7f3      	b.n	10d3c <get_tx_buffer+0x68>
		return -EINVAL;
   10d54:	f06f 0015 	mvn.w	r0, #21
   10d58:	e7f0      	b.n	10d3c <get_tx_buffer+0x68>
   10d5a:	f06f 0015 	mvn.w	r0, #21
   10d5e:	e7ed      	b.n	10d3c <get_tx_buffer+0x68>
		return -ENOBUFS;
   10d60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10d64:	e7ea      	b.n	10d3c <get_tx_buffer+0x68>

00010d66 <get_ept_slot_with_name>:
{
   10d66:	b570      	push	{r4, r5, r6, lr}
   10d68:	4605      	mov	r5, r0
   10d6a:	460e      	mov	r6, r1
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10d6c:	2400      	movs	r4, #0
   10d6e:	2c01      	cmp	r4, #1
   10d70:	d80f      	bhi.n	10d92 <get_ept_slot_with_name+0x2c>
		if (strcmp(name, rpmsg_ept->name) == 0) {
   10d72:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   10d76:	011b      	lsls	r3, r3, #4
   10d78:	3340      	adds	r3, #64	; 0x40
   10d7a:	18e9      	adds	r1, r5, r3
   10d7c:	4630      	mov	r0, r6
   10d7e:	f000 faaf 	bl	112e0 <strcmp>
   10d82:	b108      	cbz	r0, 10d88 <get_ept_slot_with_name+0x22>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10d84:	3401      	adds	r4, #1
   10d86:	e7f2      	b.n	10d6e <get_ept_slot_with_name+0x8>
			return &rpmsg_inst->endpoint[i];
   10d88:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   10d8c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   10d90:	e000      	b.n	10d94 <get_ept_slot_with_name+0x2e>
	return NULL;
   10d92:	2000      	movs	r0, #0
}
   10d94:	bd70      	pop	{r4, r5, r6, pc}

00010d96 <get_ept>:
{
   10d96:	b538      	push	{r3, r4, r5, lr}
   10d98:	4605      	mov	r5, r0
   10d9a:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   10d9c:	4611      	mov	r1, r2
   10d9e:	f7ff ffe2 	bl	10d66 <get_ept_slot_with_name>
	if (ept != NULL) {
   10da2:	b110      	cbz	r0, 10daa <get_ept+0x14>
		(*rpmsg_ept) = ept;
   10da4:	6020      	str	r0, [r4, #0]
		return true;
   10da6:	2001      	movs	r0, #1
}
   10da8:	bd38      	pop	{r3, r4, r5, pc}
	ept = get_available_ept_slot(rpmsg_inst);
   10daa:	4628      	mov	r0, r5
   10dac:	f7f3 f974 	bl	4098 <get_available_ept_slot>
	if (ept != NULL) {
   10db0:	b110      	cbz	r0, 10db8 <get_ept+0x22>
		(*rpmsg_ept) = ept;
   10db2:	6020      	str	r0, [r4, #0]
		return false;
   10db4:	2000      	movs	r0, #0
   10db6:	e7f7      	b.n	10da8 <get_ept+0x12>
	(*rpmsg_ept) = NULL;
   10db8:	2000      	movs	r0, #0
   10dba:	6020      	str	r0, [r4, #0]
	return false;
   10dbc:	e7f4      	b.n	10da8 <get_ept+0x12>

00010dbe <rpmsg_service_unbind>:
{
   10dbe:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   10dc0:	f002 f902 	bl	12fc8 <rpmsg_destroy_ept>
}
   10dc4:	bd08      	pop	{r3, pc}

00010dc6 <register_ept_on_host>:
{
   10dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dc8:	b083      	sub	sp, #12
   10dca:	4607      	mov	r7, r0
   10dcc:	460d      	mov	r5, r1
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10dce:	f500 76ca 	add.w	r6, r0, #404	; 0x194
	return z_impl_k_mutex_lock(mutex, timeout);
   10dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10dda:	4630      	mov	r0, r6
   10ddc:	f7fb fed2 	bl	cb84 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   10de0:	682a      	ldr	r2, [r5, #0]
   10de2:	a901      	add	r1, sp, #4
   10de4:	4638      	mov	r0, r7
   10de6:	f7ff ffd6 	bl	10d96 <get_ept>
	if (rpmsg_ept == NULL) {
   10dea:	9c01      	ldr	r4, [sp, #4]
   10dec:	b1b4      	cbz	r4, 10e1c <register_ept_on_host+0x56>
	rpmsg_ept->cb = &cfg->cb;
   10dee:	f105 0308 	add.w	r3, r5, #8
   10df2:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10df4:	696b      	ldr	r3, [r5, #20]
   10df6:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->bound = false;
   10df8:	2300      	movs	r3, #0
   10dfa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   10dfe:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   10e00:	b180      	cbz	r0, 10e24 <register_ept_on_host+0x5e>
	return z_impl_k_mutex_unlock(mutex);
   10e02:	4630      	mov	r0, r6
   10e04:	f7fb ffd2 	bl	cdac <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   10e08:	9901      	ldr	r1, [sp, #4]
   10e0a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   10e0c:	682a      	ldr	r2, [r5, #0]
   10e0e:	4638      	mov	r0, r7
   10e10:	f7f3 f94a 	bl	40a8 <advertise_ept>
	return rpmsg_ept;
   10e14:	9c01      	ldr	r4, [sp, #4]
}
   10e16:	4620      	mov	r0, r4
   10e18:	b003      	add	sp, #12
   10e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e1c:	4630      	mov	r0, r6
   10e1e:	f7fb ffc5 	bl	cdac <z_impl_k_mutex_unlock>
		return NULL;
   10e22:	e7f8      	b.n	10e16 <register_ept_on_host+0x50>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   10e24:	2220      	movs	r2, #32
   10e26:	6829      	ldr	r1, [r5, #0]
   10e28:	f104 0040 	add.w	r0, r4, #64	; 0x40
   10e2c:	f000 fa2b 	bl	11286 <strncpy>
   10e30:	4630      	mov	r0, r6
   10e32:	f7fb ffbb 	bl	cdac <z_impl_k_mutex_unlock>
   10e36:	e7ed      	b.n	10e14 <register_ept_on_host+0x4e>

00010e38 <ns_bind_cb>:
{
   10e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e3a:	b083      	sub	sp, #12
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   10e3c:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
	if (name == NULL || name[0] == '\0') {
   10e40:	b129      	cbz	r1, 10e4e <ns_bind_cb+0x16>
   10e42:	4616      	mov	r6, r2
   10e44:	f5a4 77c0 	sub.w	r7, r4, #384	; 0x180
   10e48:	460d      	mov	r5, r1
   10e4a:	780b      	ldrb	r3, [r1, #0]
   10e4c:	b90b      	cbnz	r3, 10e52 <ns_bind_cb+0x1a>
}
   10e4e:	b003      	add	sp, #12
   10e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10e52:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   10e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e5c:	4620      	mov	r0, r4
   10e5e:	f7fb fe91 	bl	cb84 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   10e62:	462a      	mov	r2, r5
   10e64:	a901      	add	r1, sp, #4
   10e66:	4638      	mov	r0, r7
   10e68:	f7ff ff95 	bl	10d96 <get_ept>
	if (rpmsg_ept == NULL) {
   10e6c:	9b01      	ldr	r3, [sp, #4]
   10e6e:	b153      	cbz	r3, 10e86 <ns_bind_cb+0x4e>
	if (ept_cached) {
   10e70:	b168      	cbz	r0, 10e8e <ns_bind_cb+0x56>
	return z_impl_k_mutex_unlock(mutex);
   10e72:	4620      	mov	r0, r4
   10e74:	f7fb ff9a 	bl	cdac <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   10e78:	4633      	mov	r3, r6
   10e7a:	462a      	mov	r2, r5
   10e7c:	9901      	ldr	r1, [sp, #4]
   10e7e:	4638      	mov	r0, r7
   10e80:	f7f3 f912 	bl	40a8 <advertise_ept>
   10e84:	e7e3      	b.n	10e4e <ns_bind_cb+0x16>
   10e86:	4620      	mov	r0, r4
   10e88:	f7fb ff90 	bl	cdac <z_impl_k_mutex_unlock>
		return;
   10e8c:	e7df      	b.n	10e4e <ns_bind_cb+0x16>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   10e8e:	2220      	movs	r2, #32
   10e90:	4629      	mov	r1, r5
   10e92:	f103 0040 	add.w	r0, r3, #64	; 0x40
   10e96:	f000 f9f6 	bl	11286 <strncpy>
		rpmsg_ept->dest = dest;
   10e9a:	9b01      	ldr	r3, [sp, #4]
   10e9c:	661e      	str	r6, [r3, #96]	; 0x60
   10e9e:	4620      	mov	r0, r4
   10ea0:	f7fb ff84 	bl	cdac <z_impl_k_mutex_unlock>
   10ea4:	e7d3      	b.n	10e4e <ns_bind_cb+0x16>

00010ea6 <register_ept_on_remote>:
{
   10ea6:	b570      	push	{r4, r5, r6, lr}
   10ea8:	4606      	mov	r6, r0
   10eaa:	460d      	mov	r5, r1
	rpmsg_ept = get_available_ept_slot(rpmsg_inst);
   10eac:	f7f3 f8f4 	bl	4098 <get_available_ept_slot>
	if (rpmsg_ept == NULL) {
   10eb0:	4604      	mov	r4, r0
   10eb2:	b198      	cbz	r0, 10edc <register_ept_on_remote+0x36>
	rpmsg_ept->cb = &cfg->cb;
   10eb4:	f105 0308 	add.w	r3, r5, #8
   10eb8:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10eba:	696b      	ldr	r3, [r5, #20]
   10ebc:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   10ebe:	2300      	movs	r3, #0
   10ec0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   10ec4:	63e0      	str	r0, [r4, #60]	; 0x3c
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   10ec6:	2220      	movs	r2, #32
   10ec8:	6829      	ldr	r1, [r5, #0]
   10eca:	3040      	adds	r0, #64	; 0x40
   10ecc:	f000 f9db 	bl	11286 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   10ed0:	4622      	mov	r2, r4
   10ed2:	2101      	movs	r1, #1
   10ed4:	4630      	mov	r0, r6
   10ed6:	f7f3 fa3b 	bl	4350 <ipc_rpmsg_register_ept>
	if (err != 0) {
   10eda:	b908      	cbnz	r0, 10ee0 <register_ept_on_remote+0x3a>
}
   10edc:	4620      	mov	r0, r4
   10ede:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   10ee0:	2400      	movs	r4, #0
   10ee2:	e7fb      	b.n	10edc <register_ept_on_remote+0x36>

00010ee4 <register_ept>:
	struct backend_data_t *data = instance->data;
   10ee4:	6900      	ldr	r0, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   10ee6:	f500 735d 	add.w	r3, r0, #884	; 0x374
   10eea:	e8d3 3faf 	lda	r3, [r3]
   10eee:	2b02      	cmp	r3, #2
   10ef0:	d112      	bne.n	10f18 <register_ept+0x34>
{
   10ef2:	b510      	push	{r4, lr}
   10ef4:	460c      	mov	r4, r1
   10ef6:	4611      	mov	r1, r2
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10ef8:	6813      	ldr	r3, [r2, #0]
   10efa:	b183      	cbz	r3, 10f1e <register_ept+0x3a>
   10efc:	781b      	ldrb	r3, [r3, #0]
   10efe:	b18b      	cbz	r3, 10f24 <register_ept+0x40>
	rpmsg_ept = (data->role == ROLE_HOST) ?
   10f00:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
			register_ept_on_host(rpmsg_inst, cfg) :
   10f04:	b92b      	cbnz	r3, 10f12 <register_ept+0x2e>
   10f06:	f7ff ff5e 	bl	10dc6 <register_ept_on_host>
	if (rpmsg_ept == NULL) {
   10f0a:	b170      	cbz	r0, 10f2a <register_ept+0x46>
	(*token) = rpmsg_ept;
   10f0c:	6020      	str	r0, [r4, #0]
	return 0;
   10f0e:	2000      	movs	r0, #0
}
   10f10:	bd10      	pop	{r4, pc}
			register_ept_on_remote(rpmsg_inst, cfg);
   10f12:	f7ff ffc8 	bl	10ea6 <register_ept_on_remote>
   10f16:	e7f8      	b.n	10f0a <register_ept+0x26>
		return -EBUSY;
   10f18:	f06f 000f 	mvn.w	r0, #15
}
   10f1c:	4770      	bx	lr
		return -EINVAL;
   10f1e:	f06f 0015 	mvn.w	r0, #21
   10f22:	e7f5      	b.n	10f10 <register_ept+0x2c>
   10f24:	f06f 0015 	mvn.w	r0, #21
   10f28:	e7f2      	b.n	10f10 <register_ept+0x2c>
		return -EINVAL;
   10f2a:	f06f 0015 	mvn.w	r0, #21
   10f2e:	e7ef      	b.n	10f10 <register_ept+0x2c>

00010f30 <rpmsg_send>:
{
   10f30:	b500      	push	{lr}
   10f32:	b083      	sub	sp, #12
   10f34:	460b      	mov	r3, r1
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   10f36:	2101      	movs	r1, #1
   10f38:	9101      	str	r1, [sp, #4]
   10f3a:	9200      	str	r2, [sp, #0]
   10f3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   10f3e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   10f40:	f7fa fbe0 	bl	b704 <rpmsg_send_offchannel_raw>
}
   10f44:	b003      	add	sp, #12
   10f46:	f85d fb04 	ldr.w	pc, [sp], #4

00010f4a <ept_cb>:
{
   10f4a:	b510      	push	{r4, lr}
   10f4c:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   10f4e:	b142      	cbz	r2, 10f62 <ept_cb+0x18>
   10f50:	4608      	mov	r0, r1
   10f52:	4611      	mov	r1, r2
	if (ept->cb->received) {
   10f54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   10f56:	6854      	ldr	r4, [r2, #4]
   10f58:	b10c      	cbz	r4, 10f5e <ept_cb+0x14>
		ept->cb->received(data, len, ept->priv);
   10f5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   10f5c:	47a0      	blx	r4
}
   10f5e:	2000      	movs	r0, #0
   10f60:	bd10      	pop	{r4, pc}
		if (!ept->bound) {
   10f62:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   10f66:	2a00      	cmp	r2, #0
   10f68:	d1f9      	bne.n	10f5e <ept_cb+0x14>
			ept->bound = true;
   10f6a:	2201      	movs	r2, #1
   10f6c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   10f70:	4618      	mov	r0, r3
   10f72:	f7f3 f8db 	bl	412c <bound_cb>
		return RPMSG_SUCCESS;
   10f76:	e7f2      	b.n	10f5e <ept_cb+0x14>

00010f78 <vr_shm_configure>:
{
   10f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f7c:	4605      	mov	r5, r0
   10f7e:	460c      	mov	r4, r1
	num_desc = optimal_num_desc(conf->shm_size, conf->buffer_size);
   10f80:	688a      	ldr	r2, [r1, #8]
   10f82:	6a8b      	ldr	r3, [r1, #40]	; 0x28
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   10f84:	3a04      	subs	r2, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10f86:	3326      	adds	r3, #38	; 0x26
   10f88:	005b      	lsls	r3, r3, #1

	num_desc = (unsigned int) (available / single_alloc);
   10f8a:	fbb2 f7f3 	udiv	r7, r2, r3
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   10f8e:	4293      	cmp	r3, r2
   10f90:	d833      	bhi.n	10ffa <vr_shm_configure+0x82>
		return 0;
	}

	return 32 - __builtin_clz(op);
   10f92:	fab7 f787 	clz	r7, r7
   10f96:	f1c7 0720 	rsb	r7, r7, #32

	return (1 << (find_msb_set(num_desc) - 1));
   10f9a:	3f01      	subs	r7, #1
   10f9c:	2601      	movs	r6, #1
	if (num_desc == 0) {
   10f9e:	40be      	lsls	r6, r7
   10fa0:	d02d      	beq.n	10ffe <vr_shm_configure+0x86>
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   10fa2:	6863      	ldr	r3, [r4, #4]
   10fa4:	f103 0804 	add.w	r8, r3, #4
   10fa8:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   10fac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10fae:	4630      	mov	r0, r6
   10fb0:	f7ff fe3b 	bl	10c2a <shm_size>
   10fb4:	3804      	subs	r0, #4
   10fb6:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   10fba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	return (buf_size * num);
   10fbc:	40ba      	lsls	r2, r7
   10fbe:	eb08 0242 	add.w	r2, r8, r2, lsl #1
   10fc2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
	size = num * sizeof(struct vring_desc);
   10fc6:	2310      	movs	r3, #16
   10fc8:	40bb      	lsls	r3, r7
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   10fca:	1cf1      	adds	r1, r6, #3
   10fcc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	size = (size + align - 1) & ~(align - 1);
   10fd0:	3303      	adds	r3, #3
   10fd2:	f023 0303 	bic.w	r3, r3, #3
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   10fd6:	2108      	movs	r1, #8
   10fd8:	40b9      	lsls	r1, r7
	size += sizeof(struct vring_used) +
   10fda:	440b      	add	r3, r1
   10fdc:	3306      	adds	r3, #6
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   10fde:	441a      	add	r2, r3
   10fe0:	3203      	adds	r2, #3
   10fe2:	f022 0203 	bic.w	r2, r2, #3
   10fe6:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	vr->status_reg_addr = conf->shm_addr;
   10fea:	6863      	ldr	r3, [r4, #4]
   10fec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	vr->vring_size = num_desc;
   10ff0:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
	return 0;
   10ff4:	2000      	movs	r0, #0
}
   10ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   10ffa:	2700      	movs	r7, #0
   10ffc:	e7cd      	b.n	10f9a <vr_shm_configure+0x22>
		return -ENOMEM;
   10ffe:	f06f 000b 	mvn.w	r0, #11
   11002:	e7f8      	b.n	10ff6 <vr_shm_configure+0x7e>

00011004 <mbox_callback>:
{
   11004:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   11006:	f502 7124 	add.w	r1, r2, #656	; 0x290
   1100a:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
   1100e:	f002 fa30 	bl	13472 <k_work_submit_to_queue>
}
   11012:	bd08      	pop	{r3, pc}

00011014 <mbox_callback_process>:
{
   11014:	b508      	push	{r3, lr}
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   11016:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
   1101a:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
   1101e:	3b00      	subs	r3, #0
   11020:	bf18      	it	ne
   11022:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   11024:	339e      	adds	r3, #158	; 0x9e
   11026:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1102a:	6840      	ldr	r0, [r0, #4]
   1102c:	f001 fef4 	bl	12e18 <virtqueue_notification>
}
   11030:	bd08      	pop	{r3, pc}

00011032 <backend_init>:
{
   11032:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
   11034:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   11036:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   11038:	681b      	ldr	r3, [r3, #0]
   1103a:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
	k_mutex_init(&data->rpmsg_inst.mtx);
   1103e:	f504 70ca 	add.w	r0, r4, #404	; 0x194
	return z_impl_k_mutex_init(mutex);
   11042:	f002 f9d7 	bl	133f4 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   11046:	f504 745d 	add.w	r4, r4, #884	; 0x374
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1104a:	2000      	movs	r0, #0
   1104c:	e8d4 3fef 	ldaex	r3, [r4]
   11050:	e8c4 0fe2 	stlex	r2, r0, [r4]
   11054:	2a00      	cmp	r2, #0
   11056:	d1f9      	bne.n	1104c <backend_init+0x1a>
}
   11058:	bd10      	pop	{r4, pc}

0001105a <rpmsg_service_unbind>:
{
   1105a:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   1105c:	f001 ffb4 	bl	12fc8 <rpmsg_destroy_ept>
}
   11060:	bd08      	pop	{r3, pc}

00011062 <virtio_notify>:
{
   11062:	b508      	push	{r3, lr}
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   11064:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   11066:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1106a:	b113      	cbz	r3, 11072 <virtio_notify+0x10>
		vr->notify_cb(vq, vr->priv);
   1106c:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   11070:	4798      	blx	r3
}
   11072:	bd08      	pop	{r3, pc}

00011074 <virtio_set_features>:
}
   11074:	4770      	bx	lr

00011076 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   11076:	6983      	ldr	r3, [r0, #24]
   11078:	b913      	cbnz	r3, 11080 <virtio_set_status+0xa>
	sys_write8(status, vr->status_reg_addr);
   1107a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1107e:	7019      	strb	r1, [r3, #0]
}
   11080:	4770      	bx	lr

00011082 <virtio_get_features>:
}
   11082:	2001      	movs	r0, #1
   11084:	4770      	bx	lr

00011086 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   11086:	6983      	ldr	r3, [r0, #24]
   11088:	2b01      	cmp	r3, #1
   1108a:	d001      	beq.n	11090 <virtio_get_status+0xa>
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1108c:	2004      	movs	r0, #4
}
   1108e:	4770      	bx	lr
		ret = sys_read8(vr->status_reg_addr);
   11090:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
   11094:	7818      	ldrb	r0, [r3, #0]
   11096:	b2c0      	uxtb	r0, r0
   11098:	4770      	bx	lr

0001109a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1109a:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1109c:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1109e:	3434      	adds	r4, #52	; 0x34
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
   110a0:	4620      	mov	r0, r4
   110a2:	f002 fac1 	bl	13628 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   110a6:	4605      	mov	r5, r0
   110a8:	b118      	cbz	r0, 110b2 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   110aa:	4622      	mov	r2, r4
   110ac:	2100      	movs	r1, #0
   110ae:	f000 f964 	bl	1137a <memset>
	}

	return vqs;
}
   110b2:	4628      	mov	r0, r5
   110b4:	bd38      	pop	{r3, r4, r5, pc}

000110b6 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   110b6:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   110b8:	f001 021f 	and.w	r2, r1, #31
   110bc:	2301      	movs	r3, #1
   110be:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   110c0:	0949      	lsrs	r1, r1, #5
   110c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   110c6:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   110c8:	e8d0 2fef 	ldaex	r2, [r0]
   110cc:	ea02 0c01 	and.w	ip, r2, r1
   110d0:	e8c0 cfee 	stlex	lr, ip, [r0]
   110d4:	f1be 0f00 	cmp.w	lr, #0
   110d8:	d1f6      	bne.n	110c8 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   110da:	4213      	tst	r3, r2
}
   110dc:	bf14      	ite	ne
   110de:	2001      	movne	r0, #1
   110e0:	2000      	moveq	r0, #0
   110e2:	f85d fb04 	ldr.w	pc, [sp], #4

000110e6 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   110e6:	f001 021f 	and.w	r2, r1, #31
   110ea:	2301      	movs	r3, #1
   110ec:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   110ee:	0949      	lsrs	r1, r1, #5
   110f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   110f4:	e8d0 2fef 	ldaex	r2, [r0]
   110f8:	431a      	orrs	r2, r3
   110fa:	e8c0 2fe1 	stlex	r1, r2, [r0]
   110fe:	2900      	cmp	r1, #0
   11100:	d1f8      	bne.n	110f4 <atomic_set_bit+0xe>
}
   11102:	4770      	bx	lr

00011104 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   11104:	2000      	movs	r0, #0
   11106:	4770      	bx	lr

00011108 <abort_function>:
	while(1);
   11108:	e7fe      	b.n	11108 <abort_function>

0001110a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1110a:	b538      	push	{r3, r4, r5, lr}
   1110c:	4604      	mov	r4, r0

	if (esf != NULL) {
   1110e:	460d      	mov	r5, r1
   11110:	b111      	cbz	r1, 11118 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   11112:	4608      	mov	r0, r1
   11114:	f7f3 fcc0 	bl	4a98 <esf_dump>
	}
	z_fatal_error(reason, esf);
   11118:	4629      	mov	r1, r5
   1111a:	4620      	mov	r0, r4
   1111c:	f7fa ff9a 	bl	c054 <z_fatal_error>
}
   11120:	bd38      	pop	{r3, r4, r5, pc}

00011122 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   11122:	b508      	push	{r3, lr}
   11124:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   11126:	6800      	ldr	r0, [r0, #0]
   11128:	f7ff ffef 	bl	1110a <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1112c:	bd08      	pop	{r3, pc}

0001112e <arch_irq_enable>:
{
   1112e:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   11130:	b240      	sxtb	r0, r0
   11132:	f7f3 fdd7 	bl	4ce4 <__NVIC_EnableIRQ>
}
   11136:	bd08      	pop	{r3, pc}

00011138 <arch_irq_disable>:
{
   11138:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   1113a:	b240      	sxtb	r0, r0
   1113c:	f7f3 fde0 	bl	4d00 <__NVIC_DisableIRQ>
}
   11140:	bd08      	pop	{r3, pc}

00011142 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   11142:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   11144:	2100      	movs	r1, #0
   11146:	2001      	movs	r0, #1
   11148:	f7ff ffdf 	bl	1110a <z_arm_fatal_error>
}
   1114c:	bd08      	pop	{r3, pc}

0001114e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1114e:	b508      	push	{r3, lr}
	handler();
   11150:	f7f3 fe30 	bl	4db4 <z_SysNmiOnReset>
	z_arm_int_exit();
   11154:	f7f3 ff00 	bl	4f58 <z_arm_exc_exit>
}
   11158:	bd08      	pop	{r3, pc}

0001115a <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   1115a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1115e:	f383 880b 	msr	PSPLIM, r3
}
   11162:	4770      	bx	lr

00011164 <memory_fault_recoverable>:
}
   11164:	2000      	movs	r0, #0
   11166:	4770      	bx	lr

00011168 <fault_handle>:
{
   11168:	b508      	push	{r3, lr}
	*recoverable = false;
   1116a:	2300      	movs	r3, #0
   1116c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1116e:	1ecb      	subs	r3, r1, #3
   11170:	2b09      	cmp	r3, #9
   11172:	d81a      	bhi.n	111aa <fault_handle+0x42>
   11174:	e8df f003 	tbb	[pc, r3]
   11178:	110d0905 	.word	0x110d0905
   1117c:	19191919 	.word	0x19191919
   11180:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   11182:	4611      	mov	r1, r2
   11184:	f7f4 fbde 	bl	5944 <hard_fault>
}
   11188:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1118a:	2100      	movs	r1, #0
   1118c:	f7f3 ff36 	bl	4ffc <mem_manage_fault>
		break;
   11190:	e7fa      	b.n	11188 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   11192:	2100      	movs	r1, #0
   11194:	f7f4 f8cc 	bl	5330 <bus_fault>
		break;
   11198:	e7f6      	b.n	11188 <fault_handle+0x20>
		reason = usage_fault(esf);
   1119a:	f7f4 fa5d 	bl	5658 <usage_fault>
		break;
   1119e:	e7f3      	b.n	11188 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   111a0:	4611      	mov	r1, r2
   111a2:	f7f4 fd1d 	bl	5be0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   111a6:	2000      	movs	r0, #0
		break;
   111a8:	e7ee      	b.n	11188 <fault_handle+0x20>
		reserved_exception(esf, fault);
   111aa:	f7f4 fd49 	bl	5c40 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   111ae:	2000      	movs	r0, #0
	return reason;
   111b0:	e7ea      	b.n	11188 <fault_handle+0x20>

000111b2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   111b2:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   111b6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   111ba:	d001      	beq.n	111c0 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   111bc:	b2c0      	uxtb	r0, r0
   111be:	4770      	bx	lr
	}

	return -EINVAL;
   111c0:	f06f 0015 	mvn.w	r0, #21
}
   111c4:	4770      	bx	lr

000111c6 <region_init>:
{
   111c6:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   111c8:	680b      	ldr	r3, [r1, #0]
   111ca:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   111ce:	7a0b      	ldrb	r3, [r1, #8]
   111d0:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   111d4:	68ca      	ldr	r2, [r1, #12]
   111d6:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   111da:	095b      	lsrs	r3, r3, #5
   111dc:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   111e0:	f042 0201 	orr.w	r2, r2, #1
   111e4:	ea4c 010e 	orr.w	r1, ip, lr
   111e8:	f7f4 fed4 	bl	5f94 <mpu_set_region>
}
   111ec:	bd08      	pop	{r3, pc}

000111ee <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   111ee:	6843      	ldr	r3, [r0, #4]
		&&
   111f0:	2b1f      	cmp	r3, #31
   111f2:	d908      	bls.n	11206 <mpu_partition_is_valid+0x18>
		&&
   111f4:	f013 0f1f 	tst.w	r3, #31
   111f8:	d107      	bne.n	1120a <mpu_partition_is_valid+0x1c>
		((part->start &
   111fa:	6803      	ldr	r3, [r0, #0]
		&&
   111fc:	f013 0f1f 	tst.w	r3, #31
   11200:	d005      	beq.n	1120e <mpu_partition_is_valid+0x20>
   11202:	2000      	movs	r0, #0
   11204:	4770      	bx	lr
   11206:	2000      	movs	r0, #0
   11208:	4770      	bx	lr
   1120a:	2000      	movs	r0, #0
   1120c:	4770      	bx	lr
   1120e:	2001      	movs	r0, #1
}
   11210:	4770      	bx	lr

00011212 <get_region_index>:
{
   11212:	b570      	push	{r4, r5, r6, lr}
   11214:	4604      	mov	r4, r0
   11216:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11218:	f7ff ffcb 	bl	111b2 <arm_cmse_mpu_region_get>
   1121c:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1121e:	4434      	add	r4, r6
   11220:	1e60      	subs	r0, r4, #1
   11222:	f7ff ffc6 	bl	111b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11226:	4285      	cmp	r5, r0
   11228:	d101      	bne.n	1122e <get_region_index+0x1c>
}
   1122a:	4628      	mov	r0, r5
   1122c:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   1122e:	f06f 0515 	mvn.w	r5, #21
   11232:	e7fa      	b.n	1122a <get_region_index+0x18>

00011234 <mpu_configure_region>:
{
   11234:	b510      	push	{r4, lr}
   11236:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   11238:	680b      	ldr	r3, [r1, #0]
   1123a:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   1123c:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1123e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   11242:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11246:	f36c 0204 	bfi	r2, ip, #0, #5
   1124a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   1124e:	8949      	ldrh	r1, [r1, #10]
   11250:	b2d2      	uxtb	r2, r2
   11252:	f361 1247 	bfi	r2, r1, #5, #3
   11256:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1125a:	f023 031f 	bic.w	r3, r3, #31
   1125e:	4423      	add	r3, r4
   11260:	3b01      	subs	r3, #1
   11262:	f023 031f 	bic.w	r3, r3, #31
   11266:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   11268:	4669      	mov	r1, sp
   1126a:	f7f4 feed 	bl	6048 <region_allocate_and_init>
}
   1126e:	b004      	add	sp, #16
   11270:	bd10      	pop	{r4, pc}

00011272 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   11272:	4602      	mov	r2, r0
   11274:	e002      	b.n	1127c <strcpy+0xa>
		*d = *s;
   11276:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   1127a:	3101      	adds	r1, #1
	while (*s != '\0') {
   1127c:	780b      	ldrb	r3, [r1, #0]
   1127e:	2b00      	cmp	r3, #0
   11280:	d1f9      	bne.n	11276 <strcpy+0x4>
	}

	*d = '\0';
   11282:	7013      	strb	r3, [r2, #0]

	return dest;
}
   11284:	4770      	bx	lr

00011286 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   11286:	4603      	mov	r3, r0
   11288:	b1a2      	cbz	r2, 112b4 <strncpy+0x2e>
{
   1128a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1128c:	780c      	ldrb	r4, [r1, #0]
   1128e:	b12c      	cbz	r4, 1129c <strncpy+0x16>
		*d = *s;
   11290:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   11294:	3101      	adds	r1, #1
		d++;
		n--;
   11296:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   11298:	2a00      	cmp	r2, #0
   1129a:	d1f7      	bne.n	1128c <strncpy+0x6>
	}

	while (n > 0) {
   1129c:	b122      	cbz	r2, 112a8 <strncpy+0x22>
		*d = '\0';
   1129e:	2100      	movs	r1, #0
   112a0:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   112a4:	3a01      	subs	r2, #1
   112a6:	e7f9      	b.n	1129c <strncpy+0x16>
	}

	return dest;
}
   112a8:	bc10      	pop	{r4}
   112aa:	4770      	bx	lr
		*d = '\0';
   112ac:	2100      	movs	r1, #0
   112ae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   112b2:	3a01      	subs	r2, #1
	while (n > 0) {
   112b4:	2a00      	cmp	r2, #0
   112b6:	d1f9      	bne.n	112ac <strncpy+0x26>
   112b8:	4770      	bx	lr

000112ba <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   112ba:	4603      	mov	r3, r0
	size_t n = 0;
   112bc:	2000      	movs	r0, #0

	while (*s != '\0') {
   112be:	e001      	b.n	112c4 <strlen+0xa>
		s++;
   112c0:	3301      	adds	r3, #1
		n++;
   112c2:	3001      	adds	r0, #1
	while (*s != '\0') {
   112c4:	781a      	ldrb	r2, [r3, #0]
   112c6:	2a00      	cmp	r2, #0
   112c8:	d1fa      	bne.n	112c0 <strlen+0x6>
	}

	return n;
}
   112ca:	4770      	bx	lr

000112cc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   112cc:	4603      	mov	r3, r0
	size_t n = 0;
   112ce:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   112d0:	e001      	b.n	112d6 <strnlen+0xa>
		s++;
   112d2:	3301      	adds	r3, #1
		n++;
   112d4:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   112d6:	781a      	ldrb	r2, [r3, #0]
   112d8:	b10a      	cbz	r2, 112de <strnlen+0x12>
   112da:	4288      	cmp	r0, r1
   112dc:	d3f9      	bcc.n	112d2 <strnlen+0x6>
	}

	return n;
}
   112de:	4770      	bx	lr

000112e0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   112e0:	e001      	b.n	112e6 <strcmp+0x6>
		s1++;
   112e2:	3001      	adds	r0, #1
		s2++;
   112e4:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   112e6:	7803      	ldrb	r3, [r0, #0]
   112e8:	780a      	ldrb	r2, [r1, #0]
   112ea:	4293      	cmp	r3, r2
   112ec:	d101      	bne.n	112f2 <strcmp+0x12>
   112ee:	2b00      	cmp	r3, #0
   112f0:	d1f7      	bne.n	112e2 <strcmp+0x2>
	}

	return *s1 - *s2;
}
   112f2:	1a98      	subs	r0, r3, r2
   112f4:	4770      	bx	lr

000112f6 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   112f6:	e002      	b.n	112fe <strncmp+0x8>
		s1++;
   112f8:	3001      	adds	r0, #1
		s2++;
   112fa:	3101      	adds	r1, #1
		n--;
   112fc:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   112fe:	b132      	cbz	r2, 1130e <strncmp+0x18>
   11300:	7803      	ldrb	r3, [r0, #0]
   11302:	f891 c000 	ldrb.w	ip, [r1]
   11306:	4563      	cmp	r3, ip
   11308:	d101      	bne.n	1130e <strncmp+0x18>
   1130a:	2b00      	cmp	r3, #0
   1130c:	d1f4      	bne.n	112f8 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1130e:	b11a      	cbz	r2, 11318 <strncmp+0x22>
   11310:	7800      	ldrb	r0, [r0, #0]
   11312:	780b      	ldrb	r3, [r1, #0]
   11314:	1ac0      	subs	r0, r0, r3
   11316:	4770      	bx	lr
   11318:	2000      	movs	r0, #0
}
   1131a:	4770      	bx	lr

0001131c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1131c:	ea80 0301 	eor.w	r3, r0, r1
   11320:	f013 0f03 	tst.w	r3, #3
   11324:	d001      	beq.n	1132a <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   11326:	4603      	mov	r3, r0
   11328:	e023      	b.n	11372 <memcpy+0x56>
   1132a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1132c:	f013 0f03 	tst.w	r3, #3
   11330:	d00f      	beq.n	11352 <memcpy+0x36>
			if (n == 0) {
   11332:	b30a      	cbz	r2, 11378 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   11334:	f811 cb01 	ldrb.w	ip, [r1], #1
   11338:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   1133c:	3a01      	subs	r2, #1
   1133e:	e7f5      	b.n	1132c <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   11340:	f811 cb01 	ldrb.w	ip, [r1], #1
   11344:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   11348:	3a01      	subs	r2, #1
	while (n > 0) {
   1134a:	2a00      	cmp	r2, #0
   1134c:	d1f8      	bne.n	11340 <memcpy+0x24>
	}

	return d;
}
   1134e:	bc10      	pop	{r4}
   11350:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   11352:	2a03      	cmp	r2, #3
   11354:	d90d      	bls.n	11372 <memcpy+0x56>
{
   11356:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   11358:	f851 4b04 	ldr.w	r4, [r1], #4
   1135c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   11360:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   11362:	2a03      	cmp	r2, #3
   11364:	d8f8      	bhi.n	11358 <memcpy+0x3c>
   11366:	e7f0      	b.n	1134a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   11368:	f811 cb01 	ldrb.w	ip, [r1], #1
   1136c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   11370:	3a01      	subs	r2, #1
	while (n > 0) {
   11372:	2a00      	cmp	r2, #0
   11374:	d1f8      	bne.n	11368 <memcpy+0x4c>
   11376:	4770      	bx	lr
}
   11378:	4770      	bx	lr

0001137a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1137a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1137e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   11380:	e002      	b.n	11388 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   11382:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   11386:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   11388:	f013 0f03 	tst.w	r3, #3
   1138c:	d002      	beq.n	11394 <memset+0x1a>
		if (n == 0) {
   1138e:	2a00      	cmp	r2, #0
   11390:	d1f7      	bne.n	11382 <memset+0x8>
   11392:	e00f      	b.n	113b4 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   11394:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   11396:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   1139a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1139e:	2a03      	cmp	r2, #3
   113a0:	d906      	bls.n	113b0 <memset+0x36>
		*(d_word++) = c_word;
   113a2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   113a6:	3a04      	subs	r2, #4
   113a8:	e7f9      	b.n	1139e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   113aa:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   113ae:	3a01      	subs	r2, #1
	while (n > 0) {
   113b0:	2a00      	cmp	r2, #0
   113b2:	d1fa      	bne.n	113aa <memset+0x30>
	}

	return buf;
}
   113b4:	4770      	bx	lr

000113b6 <_stdout_hook_default>:
}
   113b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113ba:	4770      	bx	lr

000113bc <setup>:

static int setup(const struct device *dev)
{
   113bc:	b508      	push	{r3, lr}
	}

#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
   113be:	f7f5 f89f 	bl	6500 <enable_cpunet>
	}

	return 0;
}
   113c2:	2000      	movs	r0, #0
   113c4:	bd08      	pop	{r3, pc}

000113c6 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   113c6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   113c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   113cc:	0089      	lsls	r1, r1, #2
   113ce:	3180      	adds	r1, #128	; 0x80
}
   113d0:	4408      	add	r0, r1
   113d2:	4770      	bx	lr

000113d4 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   113d4:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   113d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   113da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   113de:	4770      	bx	lr

000113e0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   113e0:	6900      	ldr	r0, [r0, #16]
}
   113e2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   113e6:	4770      	bx	lr

000113e8 <set_off_state>:
	__asm__ volatile(
   113e8:	f04f 0320 	mov.w	r3, #32
   113ec:	f3ef 8211 	mrs	r2, BASEPRI
   113f0:	f383 8812 	msr	BASEPRI_MAX, r3
   113f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   113f8:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   113fa:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   113fe:	d001      	beq.n	11404 <set_off_state+0x1c>
   11400:	428b      	cmp	r3, r1
   11402:	d107      	bne.n	11414 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11404:	2301      	movs	r3, #1
   11406:	6003      	str	r3, [r0, #0]
	int err = 0;
   11408:	2000      	movs	r0, #0
	__asm__ volatile(
   1140a:	f382 8811 	msr	BASEPRI, r2
   1140e:	f3bf 8f6f 	isb	sy
}
   11412:	4770      	bx	lr
		err = -EPERM;
   11414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11418:	e7f7      	b.n	1140a <set_off_state+0x22>

0001141a <set_starting_state>:
	__asm__ volatile(
   1141a:	f04f 0320 	mov.w	r3, #32
   1141e:	f3ef 8211 	mrs	r2, BASEPRI
   11422:	f383 8812 	msr	BASEPRI_MAX, r3
   11426:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1142a:	6803      	ldr	r3, [r0, #0]
   1142c:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11430:	f003 0307 	and.w	r3, r3, #7
   11434:	2b01      	cmp	r3, #1
   11436:	d008      	beq.n	1144a <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   11438:	458c      	cmp	ip, r1
   1143a:	d009      	beq.n	11450 <set_starting_state+0x36>
		err = -EPERM;
   1143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   11440:	f382 8811 	msr	BASEPRI, r2
   11444:	f3bf 8f6f 	isb	sy
}
   11448:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1144a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1144c:	2000      	movs	r0, #0
   1144e:	e7f7      	b.n	11440 <set_starting_state+0x26>
		err = -EALREADY;
   11450:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11454:	e7f4      	b.n	11440 <set_starting_state+0x26>

00011456 <set_on_state>:
	__asm__ volatile(
   11456:	f04f 0320 	mov.w	r3, #32
   1145a:	f3ef 8211 	mrs	r2, BASEPRI
   1145e:	f383 8812 	msr	BASEPRI_MAX, r3
   11462:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   11466:	6803      	ldr	r3, [r0, #0]
   11468:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1146c:	f043 0302 	orr.w	r3, r3, #2
   11470:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11472:	f382 8811 	msr	BASEPRI, r2
   11476:	f3bf 8f6f 	isb	sy
}
   1147a:	4770      	bx	lr

0001147c <clkstarted_handle>:
{
   1147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1147e:	4606      	mov	r6, r0
   11480:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   11482:	f7ff ffa0 	bl	113c6 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   11486:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   11488:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1148a:	2300      	movs	r3, #0
   1148c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   11490:	f7ff ffe1 	bl	11456 <set_on_state>
	if (callback) {
   11494:	b11d      	cbz	r5, 1149e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11496:	463a      	mov	r2, r7
   11498:	4621      	mov	r1, r4
   1149a:	4630      	mov	r0, r6
   1149c:	47a8      	blx	r5
}
   1149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000114a0 <async_start>:
{
   114a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114a4:	4606      	mov	r6, r0
   114a6:	4690      	mov	r8, r2
   114a8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   114aa:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   114ac:	4629      	mov	r1, r5
   114ae:	f7ff ff8a 	bl	113c6 <get_sub_data>
   114b2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   114b4:	9906      	ldr	r1, [sp, #24]
   114b6:	3008      	adds	r0, #8
   114b8:	f7ff ffaf 	bl	1141a <set_starting_state>
	if (err < 0) {
   114bc:	2800      	cmp	r0, #0
   114be:	db09      	blt.n	114d4 <async_start+0x34>
	subdata->cb = cb;
   114c0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   114c4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   114c6:	4629      	mov	r1, r5
   114c8:	4630      	mov	r0, r6
   114ca:	f7ff ff83 	bl	113d4 <get_sub_config>
   114ce:	6803      	ldr	r3, [r0, #0]
   114d0:	4798      	blx	r3
	return 0;
   114d2:	2000      	movs	r0, #0
}
   114d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000114d8 <api_start>:
{
   114d8:	b510      	push	{r4, lr}
   114da:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   114dc:	2480      	movs	r4, #128	; 0x80
   114de:	9400      	str	r4, [sp, #0]
   114e0:	f7ff ffde 	bl	114a0 <async_start>
}
   114e4:	b002      	add	sp, #8
   114e6:	bd10      	pop	{r4, pc}

000114e8 <onoff_started_callback>:
{
   114e8:	b510      	push	{r4, lr}
   114ea:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   114ec:	b2c9      	uxtb	r1, r1
   114ee:	f7ff ff77 	bl	113e0 <get_onoff_manager>
	notify(mgr, 0);
   114f2:	2100      	movs	r1, #0
   114f4:	47a0      	blx	r4
}
   114f6:	bd10      	pop	{r4, pc}

000114f8 <hfclk_start>:
{
   114f8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   114fa:	2001      	movs	r0, #1
   114fc:	f7f8 fa0e 	bl	991c <nrfx_clock_start>
}
   11500:	bd08      	pop	{r3, pc}

00011502 <hfclkaudio_start>:
{
   11502:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   11504:	2003      	movs	r0, #3
   11506:	f7f8 fa09 	bl	991c <nrfx_clock_start>
}
   1150a:	bd08      	pop	{r3, pc}

0001150c <hfclk192m_start>:
{
   1150c:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1150e:	2002      	movs	r0, #2
   11510:	f7f8 fa04 	bl	991c <nrfx_clock_start>
}
   11514:	bd08      	pop	{r3, pc}

00011516 <lfclk_start>:
{
   11516:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11518:	2000      	movs	r0, #0
   1151a:	f7f8 f9ff 	bl	991c <nrfx_clock_start>
}
   1151e:	bd08      	pop	{r3, pc}

00011520 <hfclk_stop>:
{
   11520:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11522:	2001      	movs	r0, #1
   11524:	f7f8 fa96 	bl	9a54 <nrfx_clock_stop>
}
   11528:	bd08      	pop	{r3, pc}

0001152a <hfclkaudio_stop>:
{
   1152a:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1152c:	2003      	movs	r0, #3
   1152e:	f7f8 fa91 	bl	9a54 <nrfx_clock_stop>
}
   11532:	bd08      	pop	{r3, pc}

00011534 <hfclk192m_stop>:
{
   11534:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   11536:	2002      	movs	r0, #2
   11538:	f7f8 fa8c 	bl	9a54 <nrfx_clock_stop>
}
   1153c:	bd08      	pop	{r3, pc}

0001153e <lfclk_stop>:
{
   1153e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11540:	2000      	movs	r0, #0
   11542:	f7f8 fa87 	bl	9a54 <nrfx_clock_stop>
}
   11546:	bd08      	pop	{r3, pc}

00011548 <api_stop>:
{
   11548:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1154a:	2280      	movs	r2, #128	; 0x80
   1154c:	f7f5 f8e0 	bl	6710 <stop>
}
   11550:	bd08      	pop	{r3, pc}

00011552 <k_msleep>:
{
   11552:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11554:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11558:	17c1      	asrs	r1, r0, #31
   1155a:	03c9      	lsls	r1, r1, #15
   1155c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11560:	03c0      	lsls	r0, r0, #15
   11562:	f240 33e7 	movw	r3, #999	; 0x3e7
   11566:	18c0      	adds	r0, r0, r3
   11568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1156c:	f04f 0300 	mov.w	r3, #0
   11570:	f141 0100 	adc.w	r1, r1, #0
   11574:	f7ee fdee 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11578:	f7fd fa48 	bl	ea0c <z_impl_k_sleep>
}
   1157c:	bd08      	pop	{r3, pc}

0001157e <blocking_start_callback>:
{
   1157e:	b508      	push	{r3, lr}
   11580:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11582:	f7fb fcb5 	bl	cef0 <z_impl_k_sem_give>
}
   11586:	bd08      	pop	{r3, pc}

00011588 <k_msleep>:
{
   11588:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1158a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1158e:	17c1      	asrs	r1, r0, #31
   11590:	03c9      	lsls	r1, r1, #15
   11592:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11596:	03c0      	lsls	r0, r0, #15
   11598:	f240 33e7 	movw	r3, #999	; 0x3e7
   1159c:	18c0      	adds	r0, r0, r3
   1159e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115a2:	f04f 0300 	mov.w	r3, #0
   115a6:	f141 0100 	adc.w	r1, r1, #0
   115aa:	f7ee fdd3 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   115ae:	f7fd fa2d 	bl	ea0c <z_impl_k_sleep>
}
   115b2:	bd08      	pop	{r3, pc}

000115b4 <wait>:
{
   115b4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   115b6:	f001 feea 	bl	1338e <k_is_in_isr>
   115ba:	b100      	cbz	r0, 115be <wait+0xa>
}
   115bc:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
   115be:	2002      	movs	r0, #2
   115c0:	f7ff ffe2 	bl	11588 <k_msleep>
}
   115c4:	e7fa      	b.n	115bc <wait+0x8>

000115c6 <nrf_gpio_pin_present_check>:
    switch (port)
   115c6:	0943      	lsrs	r3, r0, #5
   115c8:	d00a      	beq.n	115e0 <nrf_gpio_pin_present_check+0x1a>
   115ca:	2b01      	cmp	r3, #1
   115cc:	d10b      	bne.n	115e6 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   115ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   115d2:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   115d6:	fa23 f000 	lsr.w	r0, r3, r0
}
   115da:	f000 0001 	and.w	r0, r0, #1
   115de:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   115e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115e4:	e7f5      	b.n	115d2 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   115e6:	2300      	movs	r3, #0
   115e8:	e7f3      	b.n	115d2 <nrf_gpio_pin_present_check+0xc>

000115ea <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   115ea:	460b      	mov	r3, r1
   115ec:	b139      	cbz	r1, 115fe <sys_slist_remove+0x14>
	return node->next;
   115ee:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   115f0:	6019      	str	r1, [r3, #0]
	return list->tail;
   115f2:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   115f4:	428a      	cmp	r2, r1
   115f6:	d009      	beq.n	1160c <sys_slist_remove+0x22>
	parent->next = child;
   115f8:	2300      	movs	r3, #0
   115fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   115fc:	4770      	bx	lr
	return node->next;
   115fe:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   11600:	6003      	str	r3, [r0, #0]
	return list->tail;
   11602:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   11604:	428a      	cmp	r2, r1
   11606:	d1f7      	bne.n	115f8 <sys_slist_remove+0xe>
	list->tail = node;
   11608:	6043      	str	r3, [r0, #4]
}
   1160a:	e7f5      	b.n	115f8 <sys_slist_remove+0xe>
	list->tail = node;
   1160c:	6043      	str	r3, [r0, #4]
}
   1160e:	e7f3      	b.n	115f8 <sys_slist_remove+0xe>

00011610 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11610:	b508      	push	{r3, lr}
   11612:	460a      	mov	r2, r1
	return list->head;
   11614:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11616:	2100      	movs	r1, #0
   11618:	e001      	b.n	1161e <sys_slist_find_and_remove+0xe>
   1161a:	4619      	mov	r1, r3
   1161c:	681b      	ldr	r3, [r3, #0]
   1161e:	b12b      	cbz	r3, 1162c <sys_slist_find_and_remove+0x1c>
   11620:	4293      	cmp	r3, r2
   11622:	d1fa      	bne.n	1161a <sys_slist_find_and_remove+0xa>
   11624:	f7ff ffe1 	bl	115ea <sys_slist_remove>
   11628:	2001      	movs	r0, #1
   1162a:	e000      	b.n	1162e <sys_slist_find_and_remove+0x1e>
   1162c:	2000      	movs	r0, #0
   1162e:	bd08      	pop	{r3, pc}

00011630 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11630:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   11634:	0580      	lsls	r0, r0, #22
   11636:	0d80      	lsrs	r0, r0, #22
   11638:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1163c:	d033      	beq.n	116a6 <get_drive+0x76>
   1163e:	d816      	bhi.n	1166e <get_drive+0x3e>
   11640:	2806      	cmp	r0, #6
   11642:	d02c      	beq.n	1169e <get_drive+0x6e>
   11644:	d906      	bls.n	11654 <get_drive+0x24>
   11646:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1164a:	d10d      	bne.n	11668 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1164c:	2301      	movs	r3, #1
   1164e:	700b      	strb	r3, [r1, #0]
	return 0;
   11650:	2000      	movs	r0, #0
		break;
   11652:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11654:	b300      	cbz	r0, 11698 <get_drive+0x68>
   11656:	2802      	cmp	r0, #2
   11658:	d103      	bne.n	11662 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1165a:	2304      	movs	r3, #4
   1165c:	700b      	strb	r3, [r1, #0]
	return 0;
   1165e:	2000      	movs	r0, #0
		break;
   11660:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11662:	f06f 0015 	mvn.w	r0, #21
   11666:	4770      	bx	lr
   11668:	f06f 0015 	mvn.w	r0, #21
   1166c:	4770      	bx	lr
   1166e:	f240 2302 	movw	r3, #514	; 0x202
   11672:	4298      	cmp	r0, r3
   11674:	d01b      	beq.n	116ae <get_drive+0x7e>
   11676:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1167a:	d103      	bne.n	11684 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1167c:	2303      	movs	r3, #3
   1167e:	700b      	strb	r3, [r1, #0]
	return 0;
   11680:	2000      	movs	r0, #0
		break;
   11682:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11684:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   11688:	d103      	bne.n	11692 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1168a:	2302      	movs	r3, #2
   1168c:	700b      	strb	r3, [r1, #0]
	return 0;
   1168e:	2000      	movs	r0, #0
		break;
   11690:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11692:	f06f 0015 	mvn.w	r0, #21
   11696:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   11698:	2000      	movs	r0, #0
   1169a:	7008      	strb	r0, [r1, #0]
		break;
   1169c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1169e:	2306      	movs	r3, #6
   116a0:	700b      	strb	r3, [r1, #0]
	return 0;
   116a2:	2000      	movs	r0, #0
		break;
   116a4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   116a6:	2307      	movs	r3, #7
   116a8:	700b      	strb	r3, [r1, #0]
	return 0;
   116aa:	2000      	movs	r0, #0
		break;
   116ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   116ae:	2305      	movs	r3, #5
   116b0:	700b      	strb	r3, [r1, #0]
	return 0;
   116b2:	2000      	movs	r0, #0
}
   116b4:	4770      	bx	lr

000116b6 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   116b6:	f010 0f10 	tst.w	r0, #16
   116ba:	d104      	bne.n	116c6 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   116bc:	f010 0f20 	tst.w	r0, #32
   116c0:	d103      	bne.n	116ca <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   116c2:	2000      	movs	r0, #0
   116c4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   116c6:	2003      	movs	r0, #3
   116c8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   116ca:	2001      	movs	r0, #1
}
   116cc:	4770      	bx	lr

000116ce <gpio_nrfx_port_get_raw>:
	return port->config;
   116ce:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   116d0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   116d2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   116d4:	600b      	str	r3, [r1, #0]
}
   116d6:	2000      	movs	r0, #0
   116d8:	4770      	bx	lr

000116da <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   116da:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   116dc:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   116de:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   116e2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   116e6:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   116e8:	60d9      	str	r1, [r3, #12]
}
   116ea:	2000      	movs	r0, #0
   116ec:	4770      	bx	lr

000116ee <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   116ee:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   116f0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   116f2:	6099      	str	r1, [r3, #8]
}
   116f4:	2000      	movs	r0, #0
   116f6:	4770      	bx	lr

000116f8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   116f8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   116fa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   116fc:	60d9      	str	r1, [r3, #12]
}
   116fe:	2000      	movs	r0, #0
   11700:	4770      	bx	lr

00011702 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   11702:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11704:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11706:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   11708:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1170c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1170e:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   11710:	60d3      	str	r3, [r2, #12]
}
   11712:	2000      	movs	r0, #0
   11714:	4770      	bx	lr

00011716 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   11716:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1171a:	d007      	beq.n	1172c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1171c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   11720:	d00d      	beq.n	1173e <get_trigger+0x28>
   11722:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   11726:	d008      	beq.n	1173a <get_trigger+0x24>
   11728:	2001      	movs	r0, #1
}
   1172a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1172c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   11730:	d001      	beq.n	11736 <get_trigger+0x20>
   11732:	2005      	movs	r0, #5
   11734:	4770      	bx	lr
   11736:	2004      	movs	r0, #4
   11738:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1173a:	2002      	movs	r0, #2
   1173c:	4770      	bx	lr
   1173e:	2003      	movs	r0, #3
   11740:	4770      	bx	lr

00011742 <gpio_nrfx_manage_callback>:
{
   11742:	b508      	push	{r3, lr}
	return port->data;
   11744:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11746:	3004      	adds	r0, #4
   11748:	f7f5 f9ae 	bl	6aa8 <gpio_manage_callback>
}
   1174c:	bd08      	pop	{r3, pc}

0001174e <nrf_gpio_pin_dir_get>:
{
   1174e:	b500      	push	{lr}
   11750:	b083      	sub	sp, #12
   11752:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11754:	a801      	add	r0, sp, #4
   11756:	f7f5 f9f1 	bl	6b3c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1175a:	9b01      	ldr	r3, [sp, #4]
   1175c:	3380      	adds	r3, #128	; 0x80
   1175e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   11762:	f000 0001 	and.w	r0, r0, #1
   11766:	b003      	add	sp, #12
   11768:	f85d fb04 	ldr.w	pc, [sp], #4

0001176c <nrfx_gpio_handler>:
{
   1176c:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   1176e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   11772:	0940      	lsrs	r0, r0, #5
   11774:	f7f5 f98a 	bl	6a8c <get_dev>
	if (port == NULL) {
   11778:	b130      	cbz	r0, 11788 <nrfx_gpio_handler+0x1c>
   1177a:	4601      	mov	r1, r0
	return port->data;
   1177c:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1177e:	2201      	movs	r2, #1
   11780:	40a2      	lsls	r2, r4
   11782:	3004      	adds	r0, #4
   11784:	f7f5 fa16 	bl	6bb4 <gpio_fire_callbacks>
}
   11788:	bd10      	pop	{r4, pc}

0001178a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   1178a:	b510      	push	{r4, lr}
   1178c:	b082      	sub	sp, #8
   1178e:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   11790:	aa01      	add	r2, sp, #4
   11792:	f000 fba7 	bl	11ee4 <pinctrl_lookup_state>
	if (ret < 0) {
   11796:	2800      	cmp	r0, #0
   11798:	db05      	blt.n	117a6 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1179a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1179c:	6822      	ldr	r2, [r4, #0]
   1179e:	7919      	ldrb	r1, [r3, #4]
   117a0:	6818      	ldr	r0, [r3, #0]
   117a2:	f7f7 faff 	bl	8da4 <pinctrl_configure_pins>
}
   117a6:	b002      	add	sp, #8
   117a8:	bd10      	pop	{r4, pc}

000117aa <irq_connect1>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   117aa:	b508      	push	{r3, lr}
   117ac:	2200      	movs	r2, #0
   117ae:	2101      	movs	r1, #1
   117b0:	2009      	movs	r0, #9
   117b2:	f7f3 fad9 	bl	4d68 <z_arm_irq_priority_set>
   117b6:	bd08      	pop	{r3, pc}

000117b8 <spi_context_get_next_buf>:
{
   117b8:	b430      	push	{r4, r5}
	while (*count) {
   117ba:	e004      	b.n	117c6 <spi_context_get_next_buf+0xe>
		++(*current);
   117bc:	3408      	adds	r4, #8
   117be:	6004      	str	r4, [r0, #0]
		--(*count);
   117c0:	680c      	ldr	r4, [r1, #0]
   117c2:	3c01      	subs	r4, #1
   117c4:	600c      	str	r4, [r1, #0]
	while (*count) {
   117c6:	680c      	ldr	r4, [r1, #0]
   117c8:	b14c      	cbz	r4, 117de <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   117ca:	6804      	ldr	r4, [r0, #0]
   117cc:	6865      	ldr	r5, [r4, #4]
   117ce:	429d      	cmp	r5, r3
   117d0:	d3f4      	bcc.n	117bc <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   117d2:	fbb5 f5f3 	udiv	r5, r5, r3
   117d6:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   117d8:	6803      	ldr	r3, [r0, #0]
   117da:	6818      	ldr	r0, [r3, #0]
   117dc:	e001      	b.n	117e2 <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   117de:	2000      	movs	r0, #0
   117e0:	6010      	str	r0, [r2, #0]
}
   117e2:	bc30      	pop	{r4, r5}
   117e4:	4770      	bx	lr

000117e6 <spi_context_buffers_setup>:
{
   117e6:	b570      	push	{r4, r5, r6, lr}
   117e8:	4604      	mov	r4, r0
   117ea:	4615      	mov	r5, r2
   117ec:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   117ee:	460a      	mov	r2, r1
   117f0:	b309      	cbz	r1, 11836 <spi_context_buffers_setup+0x50>
   117f2:	680b      	ldr	r3, [r1, #0]
   117f4:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   117f6:	b303      	cbz	r3, 1183a <spi_context_buffers_setup+0x54>
   117f8:	6853      	ldr	r3, [r2, #4]
   117fa:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   117fc:	4633      	mov	r3, r6
   117fe:	f104 0248 	add.w	r2, r4, #72	; 0x48
   11802:	f104 0138 	add.w	r1, r4, #56	; 0x38
   11806:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1180a:	f7ff ffd5 	bl	117b8 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   1180e:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   11810:	b1ad      	cbz	r5, 1183e <spi_context_buffers_setup+0x58>
   11812:	682b      	ldr	r3, [r5, #0]
   11814:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   11816:	b1a3      	cbz	r3, 11842 <spi_context_buffers_setup+0x5c>
   11818:	686b      	ldr	r3, [r5, #4]
   1181a:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1181c:	4633      	mov	r3, r6
   1181e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   11822:	f104 0140 	add.w	r1, r4, #64	; 0x40
   11826:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1182a:	f7ff ffc5 	bl	117b8 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   1182e:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
   11830:	2300      	movs	r3, #0
   11832:	6323      	str	r3, [r4, #48]	; 0x30
}
   11834:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   11836:	460b      	mov	r3, r1
   11838:	e7dc      	b.n	117f4 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1183a:	2300      	movs	r3, #0
   1183c:	e7dd      	b.n	117fa <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1183e:	462b      	mov	r3, r5
   11840:	e7e8      	b.n	11814 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   11842:	2300      	movs	r3, #0
   11844:	e7e9      	b.n	1181a <spi_context_buffers_setup+0x34>

00011846 <_spi_context_cs_control>:
{
   11846:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   11848:	6803      	ldr	r3, [r0, #0]
   1184a:	b1a3      	cbz	r3, 11876 <_spi_context_cs_control+0x30>
   1184c:	4604      	mov	r4, r0
   1184e:	689d      	ldr	r5, [r3, #8]
   11850:	b18d      	cbz	r5, 11876 <_spi_context_cs_control+0x30>
   11852:	6828      	ldr	r0, [r5, #0]
   11854:	b178      	cbz	r0, 11876 <_spi_context_cs_control+0x30>
		if (on) {
   11856:	b979      	cbnz	r1, 11878 <_spi_context_cs_control+0x32>
			if (!force_off &&
   11858:	b91a      	cbnz	r2, 11862 <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   1185a:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   1185c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11860:	d109      	bne.n	11876 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   11862:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   11864:	f001 fe82 	bl	1356c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   11868:	6823      	ldr	r3, [r4, #0]
   1186a:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1186c:	2200      	movs	r2, #0
   1186e:	7919      	ldrb	r1, [r3, #4]
   11870:	6818      	ldr	r0, [r3, #0]
   11872:	f7f5 fee7 	bl	7644 <gpio_pin_set>
}
   11876:	bd38      	pop	{r3, r4, r5, pc}
   11878:	2201      	movs	r2, #1
   1187a:	7929      	ldrb	r1, [r5, #4]
   1187c:	f7f5 fee2 	bl	7644 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   11880:	6823      	ldr	r3, [r4, #0]
   11882:	689b      	ldr	r3, [r3, #8]
   11884:	6898      	ldr	r0, [r3, #8]
   11886:	f001 fe71 	bl	1356c <z_impl_k_busy_wait>
}
   1188a:	e7f4      	b.n	11876 <_spi_context_cs_control+0x30>

0001188c <gpio_pin_configure_dt>:
{
   1188c:	b508      	push	{r3, lr}
   1188e:	4603      	mov	r3, r0
   11890:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   11892:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   11894:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11896:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   11898:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1189c:	f7f5 ff08 	bl	76b0 <z_impl_gpio_pin_configure>
}
   118a0:	bd08      	pop	{r3, pc}

000118a2 <spi_context_unlock_unconditionally>:
{
   118a2:	b510      	push	{r4, lr}
   118a4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   118a6:	2201      	movs	r2, #1
   118a8:	2100      	movs	r1, #0
   118aa:	f7ff ffcc 	bl	11846 <_spi_context_cs_control>
	return sem->count;
   118ae:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   118b0:	b103      	cbz	r3, 118b4 <spi_context_unlock_unconditionally+0x12>
}
   118b2:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   118b4:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   118b6:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   118ba:	f7fb fb19 	bl	cef0 <z_impl_k_sem_give>
}
   118be:	e7f8      	b.n	118b2 <spi_context_unlock_unconditionally+0x10>

000118c0 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   118c0:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   118c2:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   118c4:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   118c6:	428b      	cmp	r3, r1
   118c8:	d106      	bne.n	118d8 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   118ca:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   118ce:	b933      	cbnz	r3, 118de <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   118d0:	f7ff ffe7 	bl	118a2 <spi_context_unlock_unconditionally>

	return 0;
   118d4:	2000      	movs	r0, #0
}
   118d6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   118d8:	f06f 0015 	mvn.w	r0, #21
   118dc:	e7fb      	b.n	118d6 <spi_nrfx_release+0x16>
		return -EBUSY;
   118de:	f06f 000f 	mvn.w	r0, #15
   118e2:	e7f8      	b.n	118d6 <spi_nrfx_release+0x16>

000118e4 <spi_context_release>:
{
   118e4:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   118e6:	6803      	ldr	r3, [r0, #0]
   118e8:	889b      	ldrh	r3, [r3, #4]
   118ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   118ee:	d000      	beq.n	118f2 <spi_context_release+0xe>
}
   118f0:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   118f2:	2300      	movs	r3, #0
   118f4:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   118f6:	3010      	adds	r0, #16
   118f8:	f7fb fafa 	bl	cef0 <z_impl_k_sem_give>
}
   118fc:	e7f8      	b.n	118f0 <spi_context_release+0xc>

000118fe <spi_context_lock>:
{
   118fe:	b538      	push	{r3, r4, r5, lr}
   11900:	4604      	mov	r4, r0
   11902:	461d      	mov	r5, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   11904:	889b      	ldrh	r3, [r3, #4]
   11906:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1190a:	d004      	beq.n	11916 <spi_context_lock+0x18>
   1190c:	6983      	ldr	r3, [r0, #24]
   1190e:	b913      	cbnz	r3, 11916 <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   11910:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   11912:	42ab      	cmp	r3, r5
   11914:	d008      	beq.n	11928 <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   11916:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   1191a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11922:	f7fb fb29 	bl	cf78 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   11926:	6065      	str	r5, [r4, #4]
}
   11928:	bd38      	pop	{r3, r4, r5, pc}

0001192a <transceive>:
{
   1192a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1192e:	4604      	mov	r4, r0
   11930:	460d      	mov	r5, r1
   11932:	4690      	mov	r8, r2
   11934:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   11936:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
   11938:	460b      	mov	r3, r1
   1193a:	9a07      	ldr	r2, [sp, #28]
   1193c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   11940:	4630      	mov	r0, r6
   11942:	f7ff ffdc 	bl	118fe <spi_context_lock>
	error = configure(dev, spi_cfg);
   11946:	4629      	mov	r1, r5
   11948:	4620      	mov	r0, r4
   1194a:	f7f5 ff93 	bl	7874 <configure>
	if (error == 0) {
   1194e:	4605      	mov	r5, r0
   11950:	b130      	cbz	r0, 11960 <transceive+0x36>
	spi_context_release(&dev_data->ctx, error);
   11952:	4629      	mov	r1, r5
   11954:	4630      	mov	r0, r6
   11956:	f7ff ffc5 	bl	118e4 <spi_context_release>
}
   1195a:	4628      	mov	r0, r5
   1195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   11960:	2501      	movs	r5, #1
   11962:	f886 505c 	strb.w	r5, [r6, #92]	; 0x5c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   11966:	462b      	mov	r3, r5
   11968:	463a      	mov	r2, r7
   1196a:	4641      	mov	r1, r8
   1196c:	4630      	mov	r0, r6
   1196e:	f7ff ff3a 	bl	117e6 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   11972:	2200      	movs	r2, #0
   11974:	4629      	mov	r1, r5
   11976:	4630      	mov	r0, r6
   11978:	f7ff ff65 	bl	11846 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1197c:	4620      	mov	r0, r4
   1197e:	f7f6 f993 	bl	7ca8 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   11982:	4630      	mov	r0, r6
   11984:	f7f6 f93a 	bl	7bfc <spi_context_wait_for_completion>
   11988:	4605      	mov	r5, r0
   1198a:	e7e2      	b.n	11952 <transceive+0x28>

0001198c <spi_nrfx_transceive>:
{
   1198c:	b510      	push	{r4, lr}
   1198e:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   11990:	2400      	movs	r4, #0
   11992:	9401      	str	r4, [sp, #4]
   11994:	9400      	str	r4, [sp, #0]
   11996:	f7ff ffc8 	bl	1192a <transceive>
}
   1199a:	b002      	add	sp, #8
   1199c:	bd10      	pop	{r4, pc}

0001199e <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   1199e:	b508      	push	{r3, lr}
   119a0:	2200      	movs	r2, #0
   119a2:	2101      	movs	r1, #1
   119a4:	200c      	movs	r0, #12
   119a6:	f7f3 f9df 	bl	4d68 <z_arm_irq_priority_set>
   119aa:	bd08      	pop	{r3, pc}

000119ac <pinctrl_apply_state>:
{
   119ac:	b510      	push	{r4, lr}
   119ae:	b082      	sub	sp, #8
   119b0:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   119b2:	aa01      	add	r2, sp, #4
   119b4:	f000 fa96 	bl	11ee4 <pinctrl_lookup_state>
	if (ret < 0) {
   119b8:	2800      	cmp	r0, #0
   119ba:	db05      	blt.n	119c8 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   119bc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   119be:	6822      	ldr	r2, [r4, #0]
   119c0:	7919      	ldrb	r1, [r3, #4]
   119c2:	6818      	ldr	r0, [r3, #0]
   119c4:	f7f7 f9ee 	bl	8da4 <pinctrl_configure_pins>
}
   119c8:	b002      	add	sp, #8
   119ca:	bd10      	pop	{r4, pc}

000119cc <spi_nrfx_init>:
{
   119cc:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   119ce:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   119d0:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   119d2:	2100      	movs	r1, #0
   119d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   119d6:	f7ff ffe9 	bl	119ac <pinctrl_apply_state>
	if (err < 0) {
   119da:	2800      	cmp	r0, #0
   119dc:	db0a      	blt.n	119f4 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   119de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   119e0:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   119e2:	4628      	mov	r0, r5
   119e4:	f7f6 fa52 	bl	7e8c <spi_context_cs_configure_all>
	if (err < 0) {
   119e8:	2800      	cmp	r0, #0
   119ea:	db03      	blt.n	119f4 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   119ec:	4628      	mov	r0, r5
   119ee:	f7ff ff58 	bl	118a2 <spi_context_unlock_unconditionally>
	return 0;
   119f2:	2000      	movs	r0, #0
}
   119f4:	bd38      	pop	{r3, r4, r5, pc}

000119f6 <disable_sync>:
{
   119f6:	b530      	push	{r4, r5, lr}
   119f8:	b085      	sub	sp, #20
	struct driver_data_sync *data = dev->data;
   119fa:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   119fc:	6845      	ldr	r5, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
   119fe:	a903      	add	r1, sp, #12
   11a00:	4620      	mov	r0, r4
   11a02:	f7ef ff75 	bl	18f0 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   11a06:	7d2a      	ldrb	r2, [r5, #20]
   11a08:	f012 0f01 	tst.w	r2, #1
   11a0c:	d10d      	bne.n	11a2a <disable_sync+0x34>
   11a0e:	4603      	mov	r3, r0
	} else if (rc == 1) {
   11a10:	2801      	cmp	r0, #1
   11a12:	d003      	beq.n	11a1c <disable_sync+0x26>
	} else if (rc == 0) {
   11a14:	b950      	cbnz	r0, 11a2c <disable_sync+0x36>
		rc = -EINVAL;
   11a16:	f06f 0315 	mvn.w	r3, #21
   11a1a:	e007      	b.n	11a2c <disable_sync+0x36>
	return gpio_pin_set(spec->port, spec->pin, value);
   11a1c:	2200      	movs	r2, #0
   11a1e:	7c29      	ldrb	r1, [r5, #16]
   11a20:	68e8      	ldr	r0, [r5, #12]
   11a22:	f7f6 fae3 	bl	7fec <gpio_pin_set>
   11a26:	4603      	mov	r3, r0
   11a28:	e000      	b.n	11a2c <disable_sync+0x36>
		rc = 0;
   11a2a:	2300      	movs	r3, #0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   11a2c:	2200      	movs	r2, #0
   11a2e:	9200      	str	r2, [sp, #0]
   11a30:	9903      	ldr	r1, [sp, #12]
   11a32:	4620      	mov	r0, r4
   11a34:	f7ef ff88 	bl	1948 <onoff_sync_finalize>
}
   11a38:	b005      	add	sp, #20
   11a3a:	bd30      	pop	{r4, r5, pc}

00011a3c <enable_sync>:
{
   11a3c:	b570      	push	{r4, r5, r6, lr}
   11a3e:	b084      	sub	sp, #16
   11a40:	460c      	mov	r4, r1
	struct driver_data_sync *data = dev->data;
   11a42:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   11a44:	6846      	ldr	r6, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
   11a46:	a903      	add	r1, sp, #12
   11a48:	4628      	mov	r0, r5
   11a4a:	f7ef ff51 	bl	18f0 <onoff_sync_lock>
	if ((rc == 0)
   11a4e:	4603      	mov	r3, r0
   11a50:	b918      	cbnz	r0, 11a5a <enable_sync+0x1e>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   11a52:	7d32      	ldrb	r2, [r6, #20]
   11a54:	f012 0f01 	tst.w	r2, #1
   11a58:	d008      	beq.n	11a6c <enable_sync+0x30>
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   11a5a:	2201      	movs	r2, #1
   11a5c:	9200      	str	r2, [sp, #0]
   11a5e:	4622      	mov	r2, r4
   11a60:	9903      	ldr	r1, [sp, #12]
   11a62:	4628      	mov	r0, r5
   11a64:	f7ef ff70 	bl	1948 <onoff_sync_finalize>
}
   11a68:	b004      	add	sp, #16
   11a6a:	bd70      	pop	{r4, r5, r6, pc}
   11a6c:	2201      	movs	r2, #1
   11a6e:	7c31      	ldrb	r1, [r6, #16]
   11a70:	68f0      	ldr	r0, [r6, #12]
   11a72:	f7f6 fabb 	bl	7fec <gpio_pin_set>
   11a76:	4603      	mov	r3, r0
   11a78:	e7ef      	b.n	11a5a <enable_sync+0x1e>

00011a7a <gpio_pin_configure_dt>:
{
   11a7a:	b508      	push	{r3, lr}
   11a7c:	4603      	mov	r3, r0
   11a7e:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   11a80:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   11a82:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11a84:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   11a86:	ea42 020c 	orr.w	r2, r2, ip
   11a8a:	f7f6 fae5 	bl	8058 <z_impl_gpio_pin_configure>
}
   11a8e:	bd08      	pop	{r3, pc}

00011a90 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   11a90:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11a92:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   11a94:	f04f 0120 	mov.w	r1, #32
   11a98:	f3ef 8311 	mrs	r3, BASEPRI
   11a9c:	f381 8812 	msr	BASEPRI_MAX, r1
   11aa0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11aa4:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   11aa8:	b131      	cbz	r1, 11ab8 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11aaa:	2100      	movs	r1, #0
   11aac:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   11ab0:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ab4:	2101      	movs	r1, #1
   11ab6:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   11ab8:	f383 8811 	msr	BASEPRI, r3
   11abc:	f3bf 8f6f 	isb	sy
}
   11ac0:	4770      	bx	lr

00011ac2 <uarte_nrfx_isr_int>:
{
   11ac2:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   11ac4:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   11ac6:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   11ac8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   11acc:	f413 7f80 	tst.w	r3, #256	; 0x100
   11ad0:	d002      	beq.n	11ad8 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ad2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   11ad6:	b9d3      	cbnz	r3, 11b0e <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11ad8:	686b      	ldr	r3, [r5, #4]
   11ada:	f013 0f10 	tst.w	r3, #16
   11ade:	d015      	beq.n	11b0c <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   11ae0:	f04f 0220 	mov.w	r2, #32
   11ae4:	f3ef 8311 	mrs	r3, BASEPRI
   11ae8:	f382 8812 	msr	BASEPRI_MAX, r2
   11aec:	f3bf 8f6f 	isb	sy
   11af0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   11af4:	b112      	cbz	r2, 11afc <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11af6:	2200      	movs	r2, #0
   11af8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   11afc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   11b00:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   11b04:	f383 8811 	msr	BASEPRI, r3
   11b08:	f3bf 8f6f 	isb	sy
}
   11b0c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   11b0e:	f7ff ffbf 	bl	11a90 <endtx_isr>
   11b12:	e7e1      	b.n	11ad8 <uarte_nrfx_isr_int+0x16>

00011b14 <uarte_nrfx_configure>:
{
   11b14:	b570      	push	{r4, r5, r6, lr}
   11b16:	b082      	sub	sp, #8
   11b18:	4605      	mov	r5, r0
   11b1a:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   11b1c:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   11b1e:	794b      	ldrb	r3, [r1, #5]
   11b20:	2b01      	cmp	r3, #1
   11b22:	d006      	beq.n	11b32 <uarte_nrfx_configure+0x1e>
   11b24:	2b03      	cmp	r3, #3
   11b26:	d011      	beq.n	11b4c <uarte_nrfx_configure+0x38>
   11b28:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   11b2c:	4610      	mov	r0, r2
   11b2e:	b002      	add	sp, #8
   11b30:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11b32:	2300      	movs	r3, #0
   11b34:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11b38:	79a3      	ldrb	r3, [r4, #6]
   11b3a:	2b03      	cmp	r3, #3
   11b3c:	d146      	bne.n	11bcc <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   11b3e:	79e3      	ldrb	r3, [r4, #7]
   11b40:	b143      	cbz	r3, 11b54 <uarte_nrfx_configure+0x40>
   11b42:	2b01      	cmp	r3, #1
   11b44:	d015      	beq.n	11b72 <uarte_nrfx_configure+0x5e>
   11b46:	f06f 0285 	mvn.w	r2, #133	; 0x85
   11b4a:	e7ef      	b.n	11b2c <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11b4c:	2310      	movs	r3, #16
   11b4e:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   11b52:	e7f1      	b.n	11b38 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   11b54:	2300      	movs	r3, #0
   11b56:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   11b5a:	2300      	movs	r3, #0
   11b5c:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   11b60:	7923      	ldrb	r3, [r4, #4]
   11b62:	2b01      	cmp	r3, #1
   11b64:	d02a      	beq.n	11bbc <uarte_nrfx_configure+0xa8>
   11b66:	2b02      	cmp	r3, #2
   11b68:	d024      	beq.n	11bb4 <uarte_nrfx_configure+0xa0>
   11b6a:	b133      	cbz	r3, 11b7a <uarte_nrfx_configure+0x66>
   11b6c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   11b70:	e7dc      	b.n	11b2c <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   11b72:	2301      	movs	r3, #1
   11b74:	f88d 3000 	strb.w	r3, [sp]
		break;
   11b78:	e7ef      	b.n	11b5a <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   11b7a:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11b7e:	6821      	ldr	r1, [r4, #0]
   11b80:	4628      	mov	r0, r5
   11b82:	f7f6 fc63 	bl	844c <baudrate_set>
   11b86:	4602      	mov	r2, r0
   11b88:	bb18      	cbnz	r0, 11bd2 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   11b8a:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   11b8c:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11b8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   11b92:	f89d 0002 	ldrb.w	r0, [sp, #2]
   11b96:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   11b98:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   11b9c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   11b9e:	f89d 0000 	ldrb.w	r0, [sp]
   11ba2:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11ba4:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   11ba8:	3604      	adds	r6, #4
   11baa:	e894 0003 	ldmia.w	r4, {r0, r1}
   11bae:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   11bb2:	e7bb      	b.n	11b2c <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11bb4:	230e      	movs	r3, #14
   11bb6:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   11bba:	e7e0      	b.n	11b7e <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11bbc:	230e      	movs	r3, #14
   11bbe:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   11bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
   11bc6:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   11bca:	e7d8      	b.n	11b7e <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   11bcc:	f06f 0285 	mvn.w	r2, #133	; 0x85
   11bd0:	e7ac      	b.n	11b2c <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   11bd2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   11bd6:	e7a9      	b.n	11b2c <uarte_nrfx_configure+0x18>

00011bd8 <uarte_nrfx_config_get>:
{
   11bd8:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   11bda:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   11bdc:	3304      	adds	r3, #4
   11bde:	e893 0003 	ldmia.w	r3, {r0, r1}
   11be2:	e882 0003 	stmia.w	r2, {r0, r1}
}
   11be6:	2000      	movs	r0, #0
   11be8:	4770      	bx	lr

00011bea <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   11bea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11bec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11bee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   11bf2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   11bf6:	4770      	bx	lr

00011bf8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   11bf8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11bfa:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   11bfc:	685b      	ldr	r3, [r3, #4]
   11bfe:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c02:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11c06:	b929      	cbnz	r1, 11c14 <is_tx_ready+0x1c>
   11c08:	b933      	cbnz	r3, 11c18 <is_tx_ready+0x20>
   11c0a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   11c0e:	b92b      	cbnz	r3, 11c1c <is_tx_ready+0x24>
   11c10:	2000      	movs	r0, #0
   11c12:	4770      	bx	lr
   11c14:	2001      	movs	r0, #1
   11c16:	4770      	bx	lr
   11c18:	2000      	movs	r0, #0
   11c1a:	4770      	bx	lr
   11c1c:	2001      	movs	r0, #1
}
   11c1e:	4770      	bx	lr

00011c20 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   11c20:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11c22:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11c24:	2208      	movs	r2, #8
   11c26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   11c2a:	4770      	bx	lr

00011c2c <tx_start>:
{
   11c2c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   11c2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11c30:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11c32:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11c36:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11c3a:	2200      	movs	r2, #0
   11c3c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   11c40:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   11c44:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   11c48:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11c4c:	685b      	ldr	r3, [r3, #4]
   11c4e:	f013 0f10 	tst.w	r3, #16
   11c52:	d102      	bne.n	11c5a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11c54:	2301      	movs	r3, #1
   11c56:	60a3      	str	r3, [r4, #8]
}
   11c58:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   11c5a:	2101      	movs	r1, #1
   11c5c:	f7ff ffe0 	bl	11c20 <uarte_enable>
    p_reg->INTENSET = mask;
   11c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   11c64:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   11c68:	e7f4      	b.n	11c54 <tx_start+0x28>

00011c6a <uarte_nrfx_poll_in>:
{
   11c6a:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   11c6c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   11c6e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11c70:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c72:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11c76:	b15a      	cbz	r2, 11c90 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   11c78:	6962      	ldr	r2, [r4, #20]
   11c7a:	7812      	ldrb	r2, [r2, #0]
   11c7c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11c7e:	2000      	movs	r0, #0
   11c80:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   11c84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11c88:	2201      	movs	r2, #1
   11c8a:	601a      	str	r2, [r3, #0]
}
   11c8c:	bc10      	pop	{r4}
   11c8e:	4770      	bx	lr
		return -1;
   11c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c94:	e7fa      	b.n	11c8c <uarte_nrfx_poll_in+0x22>

00011c96 <k_msleep>:
{
   11c96:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   11c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   11c9c:	17c1      	asrs	r1, r0, #31
   11c9e:	03c9      	lsls	r1, r1, #15
   11ca0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   11ca4:	03c0      	lsls	r0, r0, #15
   11ca6:	f240 33e7 	movw	r3, #999	; 0x3e7
   11caa:	18c0      	adds	r0, r0, r3
   11cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11cb0:	f04f 0300 	mov.w	r3, #0
   11cb4:	f141 0100 	adc.w	r1, r1, #0
   11cb8:	f7ee fa4c 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11cbc:	f7fc fea6 	bl	ea0c <z_impl_k_sleep>
}
   11cc0:	bd08      	pop	{r3, pc}

00011cc2 <wait_tx_ready>:
{
   11cc2:	b570      	push	{r4, r5, r6, lr}
   11cc4:	4606      	mov	r6, r0
   11cc6:	e013      	b.n	11cf0 <wait_tx_ready+0x2e>
		if (res) {
   11cc8:	b17d      	cbz	r5, 11cea <wait_tx_ready+0x28>
	__asm__ volatile(
   11cca:	f04f 0320 	mov.w	r3, #32
   11cce:	f3ef 8411 	mrs	r4, BASEPRI
   11cd2:	f383 8812 	msr	BASEPRI_MAX, r3
   11cd6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   11cda:	4630      	mov	r0, r6
   11cdc:	f7ff ff8c 	bl	11bf8 <is_tx_ready>
   11ce0:	b998      	cbnz	r0, 11d0a <wait_tx_ready+0x48>
	__asm__ volatile(
   11ce2:	f384 8811 	msr	BASEPRI, r4
   11ce6:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   11cea:	2001      	movs	r0, #1
   11cec:	f7ff ffd3 	bl	11c96 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   11cf0:	2464      	movs	r4, #100	; 0x64
   11cf2:	4630      	mov	r0, r6
   11cf4:	f7ff ff80 	bl	11bf8 <is_tx_ready>
   11cf8:	4605      	mov	r5, r0
   11cfa:	2800      	cmp	r0, #0
   11cfc:	d1e4      	bne.n	11cc8 <wait_tx_ready+0x6>
   11cfe:	2001      	movs	r0, #1
   11d00:	f000 fa27 	bl	12152 <nrfx_busy_wait>
   11d04:	3c01      	subs	r4, #1
   11d06:	d1f4      	bne.n	11cf2 <wait_tx_ready+0x30>
   11d08:	e7de      	b.n	11cc8 <wait_tx_ready+0x6>
}
   11d0a:	4620      	mov	r0, r4
   11d0c:	bd70      	pop	{r4, r5, r6, pc}

00011d0e <pinctrl_apply_state>:
{
   11d0e:	b510      	push	{r4, lr}
   11d10:	b082      	sub	sp, #8
   11d12:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   11d14:	aa01      	add	r2, sp, #4
   11d16:	f000 f8e5 	bl	11ee4 <pinctrl_lookup_state>
	if (ret < 0) {
   11d1a:	2800      	cmp	r0, #0
   11d1c:	db05      	blt.n	11d2a <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   11d1e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   11d20:	6822      	ldr	r2, [r4, #0]
   11d22:	7919      	ldrb	r1, [r3, #4]
   11d24:	6818      	ldr	r0, [r3, #0]
   11d26:	f7f7 f83d 	bl	8da4 <pinctrl_configure_pins>
}
   11d2a:	b002      	add	sp, #8
   11d2c:	bd10      	pop	{r4, pc}

00011d2e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   11d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d32:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   11d34:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   11d36:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   11d38:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11d3c:	2100      	movs	r1, #0
   11d3e:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   11d42:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   11d46:	68f8      	ldr	r0, [r7, #12]
   11d48:	f7ff ffe1 	bl	11d0e <pinctrl_apply_state>
	if (err < 0) {
   11d4c:	1e05      	subs	r5, r0, #0
   11d4e:	db35      	blt.n	11dbc <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   11d50:	f108 0104 	add.w	r1, r8, #4
   11d54:	4620      	mov	r0, r4
   11d56:	f7ff fedd 	bl	11b14 <uarte_nrfx_configure>
	if (err) {
   11d5a:	4605      	mov	r5, r0
   11d5c:	bb70      	cbnz	r0, 11dbc <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   11d5e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   11d60:	f013 0f02 	tst.w	r3, #2
   11d64:	d12d      	bne.n	11dc2 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11d66:	2308      	movs	r3, #8
   11d68:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   11d6c:	7a3b      	ldrb	r3, [r7, #8]
   11d6e:	b95b      	cbnz	r3, 11d88 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d70:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   11d74:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   11d78:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11d7c:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11d80:	2301      	movs	r3, #1
   11d82:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d86:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   11d88:	687b      	ldr	r3, [r7, #4]
   11d8a:	f013 0f02 	tst.w	r3, #2
   11d8e:	d103      	bne.n	11d98 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   11d90:	f44f 7380 	mov.w	r3, #256	; 0x100
   11d94:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11d98:	687b      	ldr	r3, [r7, #4]
   11d9a:	f013 0f10 	tst.w	r3, #16
   11d9e:	d003      	beq.n	11da8 <uarte_instance_init+0x7a>
   11da0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   11da4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   11da8:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11dac:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11db0:	2300      	movs	r3, #0
   11db2:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11db6:	2301      	movs	r3, #1
   11db8:	60b3      	str	r3, [r6, #8]
   11dba:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   11dbc:	4628      	mov	r0, r5
   11dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   11dc2:	4641      	mov	r1, r8
   11dc4:	4630      	mov	r0, r6
   11dc6:	f7f6 fc53 	bl	8670 <endtx_stoptx_ppi_init>
		if (err < 0) {
   11dca:	2800      	cmp	r0, #0
   11dcc:	dacb      	bge.n	11d66 <uarte_instance_init+0x38>
			return err;
   11dce:	4605      	mov	r5, r0
   11dd0:	e7f4      	b.n	11dbc <uarte_instance_init+0x8e>

00011dd2 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   11dd2:	b510      	push	{r4, lr}
   11dd4:	4604      	mov	r4, r0
   11dd6:	2200      	movs	r2, #0
   11dd8:	2101      	movs	r1, #1
   11dda:	2008      	movs	r0, #8
   11ddc:	f7f2 ffc4 	bl	4d68 <z_arm_irq_priority_set>
   11de0:	2008      	movs	r0, #8
   11de2:	f7ff f9a4 	bl	1112e <arch_irq_enable>
   11de6:	2100      	movs	r1, #0
   11de8:	4620      	mov	r0, r4
   11dea:	f7ff ffa0 	bl	11d2e <uarte_instance_init>
   11dee:	bd10      	pop	{r4, pc}

00011df0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   11df0:	4770      	bx	lr

00011df2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   11df2:	1a40      	subs	r0, r0, r1
}
   11df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11df8:	4770      	bx	lr

00011dfa <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11dfa:	f100 0350 	add.w	r3, r0, #80	; 0x50
   11dfe:	009b      	lsls	r3, r3, #2
   11e00:	b29b      	uxth	r3, r3
   11e02:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   11e06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11e0a:	2200      	movs	r2, #0
   11e0c:	601a      	str	r2, [r3, #0]
   11e0e:	681b      	ldr	r3, [r3, #0]
}
   11e10:	4770      	bx	lr

00011e12 <absolute_time_to_cc>:
}
   11e12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11e16:	4770      	bx	lr

00011e18 <full_int_lock>:
	__asm__ volatile(
   11e18:	f04f 0320 	mov.w	r3, #32
   11e1c:	f3ef 8011 	mrs	r0, BASEPRI
   11e20:	f383 8812 	msr	BASEPRI_MAX, r3
   11e24:	f3bf 8f6f 	isb	sy
}
   11e28:	4770      	bx	lr

00011e2a <full_int_unlock>:
	__asm__ volatile(
   11e2a:	f380 8811 	msr	BASEPRI, r0
   11e2e:	f3bf 8f6f 	isb	sy
}
   11e32:	4770      	bx	lr

00011e34 <set_absolute_alarm>:
{
   11e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e36:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   11e38:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   11e3c:	f7f6 fc72 	bl	8724 <get_comparator>
   11e40:	4607      	mov	r7, r0
   11e42:	e019      	b.n	11e78 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   11e44:	2013      	movs	r0, #19
   11e46:	f001 fb91 	bl	1356c <z_impl_k_busy_wait>
}
   11e4a:	e022      	b.n	11e92 <set_absolute_alarm+0x5e>
		event_clear(chan);
   11e4c:	4630      	mov	r0, r6
   11e4e:	f7ff ffd4 	bl	11dfa <event_clear>
		event_enable(chan);
   11e52:	4630      	mov	r0, r6
   11e54:	f7f6 fc6e 	bl	8734 <event_enable>
		set_comparator(chan, cc_val);
   11e58:	4629      	mov	r1, r5
   11e5a:	4630      	mov	r0, r6
   11e5c:	f7f6 fc58 	bl	8710 <set_comparator>
		now2 = counter();
   11e60:	f7f6 fc7c 	bl	875c <counter>
	} while ((now2 != now) &&
   11e64:	4284      	cmp	r4, r0
   11e66:	d01e      	beq.n	11ea6 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   11e68:	1c81      	adds	r1, r0, #2
   11e6a:	4628      	mov	r0, r5
   11e6c:	f7ff ffc1 	bl	11df2 <counter_sub>
	} while ((now2 != now) &&
   11e70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11e74:	d917      	bls.n	11ea6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   11e76:	462f      	mov	r7, r5
		now = counter();
   11e78:	f7f6 fc70 	bl	875c <counter>
   11e7c:	4604      	mov	r4, r0
		set_comparator(chan, now);
   11e7e:	4601      	mov	r1, r0
   11e80:	4630      	mov	r0, r6
   11e82:	f7f6 fc45 	bl	8710 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   11e86:	4621      	mov	r1, r4
   11e88:	4638      	mov	r0, r7
   11e8a:	f7ff ffb2 	bl	11df2 <counter_sub>
   11e8e:	2801      	cmp	r0, #1
   11e90:	d0d8      	beq.n	11e44 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   11e92:	1ca7      	adds	r7, r4, #2
   11e94:	4639      	mov	r1, r7
   11e96:	4628      	mov	r0, r5
   11e98:	f7ff ffab 	bl	11df2 <counter_sub>
   11e9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11ea0:	d9d4      	bls.n	11e4c <set_absolute_alarm+0x18>
			cc_val = now + 2;
   11ea2:	463d      	mov	r5, r7
   11ea4:	e7d2      	b.n	11e4c <set_absolute_alarm+0x18>
}
   11ea6:	4628      	mov	r0, r5
   11ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011eaa <compare_set>:
{
   11eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   11eac:	b083      	sub	sp, #12
   11eae:	4604      	mov	r4, r0
   11eb0:	4617      	mov	r7, r2
   11eb2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   11eb4:	f7f6 fc58 	bl	8768 <compare_int_lock>
   11eb8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   11eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ebc:	9301      	str	r3, [sp, #4]
   11ebe:	9b08      	ldr	r3, [sp, #32]
   11ec0:	9300      	str	r3, [sp, #0]
   11ec2:	463a      	mov	r2, r7
   11ec4:	462b      	mov	r3, r5
   11ec6:	4620      	mov	r0, r4
   11ec8:	f7f6 fd88 	bl	89dc <compare_set_nolocks>
   11ecc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   11ece:	4631      	mov	r1, r6
   11ed0:	4620      	mov	r0, r4
   11ed2:	f7f6 fca1 	bl	8818 <compare_int_unlock>
}
   11ed6:	4628      	mov	r0, r5
   11ed8:	b003      	add	sp, #12
   11eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011edc <sys_clock_cycle_get_32>:
{
   11edc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   11ede:	f7f6 fd5d 	bl	899c <z_nrf_rtc_timer_read>
}
   11ee2:	bd08      	pop	{r3, pc}

00011ee4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   11ee4:	b410      	push	{r4}
	*state = &config->states[0];
   11ee6:	6843      	ldr	r3, [r0, #4]
   11ee8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   11eea:	e001      	b.n	11ef0 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   11eec:	3408      	adds	r4, #8
   11eee:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   11ef0:	6814      	ldr	r4, [r2, #0]
   11ef2:	7a03      	ldrb	r3, [r0, #8]
   11ef4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   11ef8:	3b01      	subs	r3, #1
   11efa:	f8d0 c004 	ldr.w	ip, [r0, #4]
   11efe:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   11f02:	429c      	cmp	r4, r3
   11f04:	d804      	bhi.n	11f10 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   11f06:	7963      	ldrb	r3, [r4, #5]
   11f08:	428b      	cmp	r3, r1
   11f0a:	d1ef      	bne.n	11eec <pinctrl_lookup_state+0x8>
			return 0;
   11f0c:	2000      	movs	r0, #0
   11f0e:	e001      	b.n	11f14 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   11f10:	f06f 0001 	mvn.w	r0, #1
}
   11f14:	bc10      	pop	{r4}
   11f16:	4770      	bx	lr

00011f18 <nrf_gpio_pin_present_check>:
    switch (port)
   11f18:	0943      	lsrs	r3, r0, #5
   11f1a:	d00a      	beq.n	11f32 <nrf_gpio_pin_present_check+0x1a>
   11f1c:	2b01      	cmp	r3, #1
   11f1e:	d10b      	bne.n	11f38 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   11f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   11f24:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   11f28:	fa23 f000 	lsr.w	r0, r3, r0
}
   11f2c:	f000 0001 	and.w	r0, r0, #1
   11f30:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   11f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f36:	e7f5      	b.n	11f24 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   11f38:	2300      	movs	r3, #0
   11f3a:	e7f3      	b.n	11f24 <nrf_gpio_pin_present_check+0xc>

00011f3c <nrf_gpio_pin_clear>:
{
   11f3c:	b500      	push	{lr}
   11f3e:	b083      	sub	sp, #12
   11f40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f42:	a801      	add	r0, sp, #4
   11f44:	f7f6 fef2 	bl	8d2c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11f48:	9a01      	ldr	r2, [sp, #4]
   11f4a:	2301      	movs	r3, #1
   11f4c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   11f4e:	60c3      	str	r3, [r0, #12]
}
   11f50:	b003      	add	sp, #12
   11f52:	f85d fb04 	ldr.w	pc, [sp], #4

00011f56 <nrf_gpio_pin_set>:
{
   11f56:	b500      	push	{lr}
   11f58:	b083      	sub	sp, #12
   11f5a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f5c:	a801      	add	r0, sp, #4
   11f5e:	f7f6 fee5 	bl	8d2c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11f62:	9a01      	ldr	r2, [sp, #4]
   11f64:	2301      	movs	r3, #1
   11f66:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   11f68:	6083      	str	r3, [r0, #8]
}
   11f6a:	b003      	add	sp, #12
   11f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00011f70 <nrf_gpio_pin_write>:
{
   11f70:	b508      	push	{r3, lr}
    if (value == 0)
   11f72:	b911      	cbnz	r1, 11f7a <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   11f74:	f7ff ffe2 	bl	11f3c <nrf_gpio_pin_clear>
}
   11f78:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   11f7a:	f7ff ffec 	bl	11f56 <nrf_gpio_pin_set>
}
   11f7e:	e7fb      	b.n	11f78 <nrf_gpio_pin_write+0x8>

00011f80 <nrf_gpio_cfg>:
{
   11f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f82:	b083      	sub	sp, #12
   11f84:	9001      	str	r0, [sp, #4]
   11f86:	460c      	mov	r4, r1
   11f88:	4617      	mov	r7, r2
   11f8a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f8c:	a801      	add	r0, sp, #4
   11f8e:	f7f6 fecd 	bl	8d2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   11f92:	9901      	ldr	r1, [sp, #4]
   11f94:	3180      	adds	r1, #128	; 0x80
   11f96:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   11f9a:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   11f9e:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   11fa2:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11fa6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   11fae:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   11fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   11fb6:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   11fba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   11fbe:	b003      	add	sp, #12
   11fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011fc2 <nrf_pin_configure>:
{
   11fc2:	b510      	push	{r4, lr}
   11fc4:	b082      	sub	sp, #8
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   11fc6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   11fca:	d001      	beq.n	11fd0 <nrf_pin_configure+0xe>
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   11fcc:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   11fce:	2100      	movs	r1, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   11fd0:	2400      	movs	r4, #0
   11fd2:	9401      	str	r4, [sp, #4]
   11fd4:	9300      	str	r3, [sp, #0]
   11fd6:	f3c0 1381 	ubfx	r3, r0, #6, #2
   11fda:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   11fde:	f7ff ffcf 	bl	11f80 <nrf_gpio_cfg>
}
   11fe2:	b002      	add	sp, #8
   11fe4:	bd10      	pop	{r4, pc}

00011fe6 <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
   11fe6:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   11fe8:	290f      	cmp	r1, #15
   11fea:	d806      	bhi.n	11ffa <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
   11fec:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   11ff0:	3110      	adds	r1, #16
   11ff2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
   11ff6:	2000      	movs	r0, #0
   11ff8:	4770      	bx	lr
		return -EINVAL;
   11ffa:	f06f 0015 	mvn.w	r0, #21
}
   11ffe:	4770      	bx	lr

00012000 <mbox_nrf_mtu_get>:
}
   12000:	2000      	movs	r0, #0
   12002:	4770      	bx	lr

00012004 <mbox_nrf_max_channels_get>:
}
   12004:	2010      	movs	r0, #16
   12006:	4770      	bx	lr

00012008 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   12008:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1200a:	f7fd fceb 	bl	f9e4 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   1200e:	bd08      	pop	{r3, pc}

00012010 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   12010:	b510      	push	{r4, lr}
   12012:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   12014:	f7f2 fc3c 	bl	4890 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   12018:	f7f2 fd0c 	bl	4a34 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1201c:	4620      	mov	r0, r4
   1201e:	f7ff fff3 	bl	12008 <hw_cc3xx_init_internal>
	return res;
}
   12022:	bd10      	pop	{r4, pc}

00012024 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   12024:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12028:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1202c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   12030:	2a07      	cmp	r2, #7
   12032:	d001      	beq.n	12038 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   12034:	2000      	movs	r0, #0
   12036:	4770      	bx	lr
                    switch(var2)
   12038:	3b02      	subs	r3, #2
   1203a:	2b00      	cmp	r3, #0
   1203c:	d804      	bhi.n	12048 <nrf53_errata_42+0x24>
   1203e:	e8df f003 	tbb	[pc, r3]
   12042:	01          	.byte	0x01
   12043:	00          	.byte	0x00
   12044:	2001      	movs	r0, #1
   12046:	4770      	bx	lr
                            return false;
   12048:	2000      	movs	r0, #0
    #endif
}
   1204a:	4770      	bx	lr

0001204c <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1204c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12050:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   12054:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   12058:	2a07      	cmp	r2, #7
   1205a:	d001      	beq.n	12060 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1205c:	2000      	movs	r0, #0
   1205e:	4770      	bx	lr
                    switch(var2)
   12060:	2b04      	cmp	r3, #4
   12062:	d007      	beq.n	12074 <nrf53_errata_46+0x28>
   12064:	d808      	bhi.n	12078 <nrf53_errata_46+0x2c>
   12066:	3b02      	subs	r3, #2
   12068:	2b01      	cmp	r3, #1
   1206a:	d801      	bhi.n	12070 <nrf53_errata_46+0x24>
   1206c:	2001      	movs	r0, #1
    #endif
}
   1206e:	4770      	bx	lr
                            return false;
   12070:	2000      	movs	r0, #0
   12072:	4770      	bx	lr
                            return false;
   12074:	2000      	movs	r0, #0
   12076:	4770      	bx	lr
                            return false;
   12078:	2000      	movs	r0, #0
   1207a:	4770      	bx	lr

0001207c <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1207c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12080:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   12084:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   12088:	2a07      	cmp	r2, #7
   1208a:	d001      	beq.n	12090 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1208c:	2000      	movs	r0, #0
   1208e:	4770      	bx	lr
                    switch(var2)
   12090:	3b02      	subs	r3, #2
   12092:	2b00      	cmp	r3, #0
   12094:	d804      	bhi.n	120a0 <nrf53_errata_49+0x24>
   12096:	e8df f003 	tbb	[pc, r3]
   1209a:	01          	.byte	0x01
   1209b:	00          	.byte	0x00
   1209c:	2001      	movs	r0, #1
   1209e:	4770      	bx	lr
                            return false;
   120a0:	2000      	movs	r0, #0
    #endif
}
   120a2:	4770      	bx	lr

000120a4 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   120a4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   120a8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   120ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   120b0:	2a07      	cmp	r2, #7
   120b2:	d001      	beq.n	120b8 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
   120b4:	2000      	movs	r0, #0
   120b6:	4770      	bx	lr
                            return true;
   120b8:	2001      	movs	r0, #1
    #endif
}
   120ba:	4770      	bx	lr

000120bc <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   120bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   120c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   120c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   120c8:	2a07      	cmp	r2, #7
   120ca:	d001      	beq.n	120d0 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   120cc:	2000      	movs	r0, #0
   120ce:	4770      	bx	lr
                    switch(var2)
   120d0:	3b02      	subs	r3, #2
   120d2:	2b00      	cmp	r3, #0
   120d4:	d804      	bhi.n	120e0 <nrf53_errata_64+0x24>
   120d6:	e8df f003 	tbb	[pc, r3]
   120da:	01          	.byte	0x01
   120db:	00          	.byte	0x00
   120dc:	2001      	movs	r0, #1
   120de:	4770      	bx	lr
                            return false;
   120e0:	2000      	movs	r0, #0
    #endif
}
   120e2:	4770      	bx	lr

000120e4 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   120e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   120e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   120ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   120f0:	2a07      	cmp	r2, #7
   120f2:	d001      	beq.n	120f8 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   120f4:	2000      	movs	r0, #0
   120f6:	4770      	bx	lr
                    switch(var2)
   120f8:	3b02      	subs	r3, #2
   120fa:	2b00      	cmp	r3, #0
   120fc:	d804      	bhi.n	12108 <nrf53_errata_69+0x24>
   120fe:	e8df f003 	tbb	[pc, r3]
   12102:	01          	.byte	0x01
   12103:	00          	.byte	0x00
   12104:	2001      	movs	r0, #1
   12106:	4770      	bx	lr
                            return false;
   12108:	2000      	movs	r0, #0
    #endif
}
   1210a:	4770      	bx	lr

0001210c <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1210c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12110:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   12114:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   12118:	2a07      	cmp	r2, #7
   1211a:	d001      	beq.n	12120 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1211c:	2000      	movs	r0, #0
   1211e:	4770      	bx	lr
                    switch(var2)
   12120:	3b02      	subs	r3, #2
   12122:	2b00      	cmp	r3, #0
   12124:	d804      	bhi.n	12130 <nrf53_errata_97+0x24>
   12126:	e8df f003 	tbb	[pc, r3]
   1212a:	01          	.byte	0x01
   1212b:	00          	.byte	0x00
   1212c:	2001      	movs	r0, #1
   1212e:	4770      	bx	lr
                            return false;
   12130:	2000      	movs	r0, #0
    #endif
}
   12132:	4770      	bx	lr

00012134 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   12134:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12138:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1213c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   12140:	2a07      	cmp	r2, #7
   12142:	d001      	beq.n	12148 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
   12144:	2000      	movs	r0, #0
   12146:	4770      	bx	lr
                            return true;
   12148:	2001      	movs	r0, #1
    #endif
}
   1214a:	4770      	bx	lr

0001214c <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1214c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1214e:	4780      	blx	r0
}
   12150:	bd08      	pop	{r3, pc}

00012152 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   12152:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12154:	f001 fa0a 	bl	1356c <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   12158:	bd08      	pop	{r3, pc}

0001215a <clock_initial_lfclksrc_get>:
}
   1215a:	2001      	movs	r0, #1
   1215c:	4770      	bx	lr

0001215e <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   1215e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   12160:	2005      	movs	r0, #5
   12162:	f7f2 fdf3 	bl	4d4c <arch_irq_is_enabled>
   12166:	b100      	cbz	r0, 1216a <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   12168:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1216a:	2005      	movs	r0, #5
   1216c:	f7fe ffdf 	bl	1112e <arch_irq_enable>
}
   12170:	e7fa      	b.n	12168 <nrfx_power_clock_irq_init+0xa>

00012172 <clock_lfclksrc_tweak>:
{
   12172:	b538      	push	{r3, r4, r5, lr}
   12174:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   12176:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   12178:	2b02      	cmp	r3, #2
   1217a:	d006      	beq.n	1218a <clock_lfclksrc_tweak+0x18>
   1217c:	2b01      	cmp	r3, #1
   1217e:	d000      	beq.n	12182 <clock_lfclksrc_tweak+0x10>
   12180:	2300      	movs	r3, #0
    if (!is_correct_clk)
   12182:	461d      	mov	r5, r3
   12184:	b11b      	cbz	r3, 1218e <clock_lfclksrc_tweak+0x1c>
}
   12186:	4628      	mov	r0, r5
   12188:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1218a:	2301      	movs	r3, #1
   1218c:	e7f9      	b.n	12182 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1218e:	2000      	movs	r0, #0
   12190:	f7f7 fb04 	bl	979c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   12194:	f7ff ffe1 	bl	1215a <clock_initial_lfclksrc_get>
   12198:	7020      	strb	r0, [r4, #0]
   1219a:	e7f4      	b.n	12186 <clock_lfclksrc_tweak+0x14>

0001219c <nrf_gpiote_event_configure>:
{
   1219c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1219e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   121a2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   121a6:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   121aa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   121ae:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   121b2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   121b6:	0212      	lsls	r2, r2, #8
   121b8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   121bc:	041b      	lsls	r3, r3, #16
   121be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   121c2:	431a      	orrs	r2, r3
   121c4:	4314      	orrs	r4, r2
   121c6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   121ca:	bc10      	pop	{r4}
   121cc:	4770      	bx	lr

000121ce <nrf_gpiote_task_configure>:
{
   121ce:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   121d0:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   121d4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   121d8:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   121dc:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   121e0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   121e4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   121e8:	0212      	lsls	r2, r2, #8
   121ea:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   121ee:	041b      	lsls	r3, r3, #16
   121f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   121f4:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   121f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   121fa:	051b      	lsls	r3, r3, #20
   121fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   12200:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12202:	4314      	orrs	r4, r2
   12204:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   12208:	bc10      	pop	{r4}
   1220a:	4770      	bx	lr

0001220c <nrf_gpio_pin_present_check>:
    switch (port)
   1220c:	0943      	lsrs	r3, r0, #5
   1220e:	d00a      	beq.n	12226 <nrf_gpio_pin_present_check+0x1a>
   12210:	2b01      	cmp	r3, #1
   12212:	d10b      	bne.n	1222c <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   12214:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   12218:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1221c:	fa23 f000 	lsr.w	r0, r3, r0
}
   12220:	f000 0001 	and.w	r0, r0, #1
   12224:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   12226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1222a:	e7f5      	b.n	12218 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   1222c:	2300      	movs	r3, #0
   1222e:	e7f3      	b.n	12218 <nrf_gpio_pin_present_check+0xc>

00012230 <pin_is_task_output>:
{
   12230:	b510      	push	{r4, lr}
   12232:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   12234:	f7f7 fcea 	bl	9c0c <pin_is_output>
   12238:	b128      	cbz	r0, 12246 <pin_is_task_output+0x16>
   1223a:	4620      	mov	r0, r4
   1223c:	f7f7 fcd0 	bl	9be0 <pin_in_use_by_te>
   12240:	b118      	cbz	r0, 1224a <pin_is_task_output+0x1a>
   12242:	2001      	movs	r0, #1
   12244:	e000      	b.n	12248 <pin_is_task_output+0x18>
   12246:	2000      	movs	r0, #0
}
   12248:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1224a:	2000      	movs	r0, #0
   1224c:	e7fc      	b.n	12248 <pin_is_task_output+0x18>

0001224e <pin_is_input>:
{
   1224e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   12250:	f7f7 fcdc 	bl	9c0c <pin_is_output>
   12254:	f080 0001 	eor.w	r0, r0, #1
}
   12258:	b2c0      	uxtb	r0, r0
   1225a:	bd08      	pop	{r3, pc}

0001225c <gpiote_polarity_to_trigger>:
}
   1225c:	4770      	bx	lr

0001225e <gpiote_trigger_to_polarity>:
}
   1225e:	4770      	bx	lr

00012260 <is_level>:
}
   12260:	2803      	cmp	r0, #3
   12262:	bf94      	ite	ls
   12264:	2000      	movls	r0, #0
   12266:	2001      	movhi	r0, #1
   12268:	4770      	bx	lr

0001226a <latch_pending_read_and_check>:
{
   1226a:	b510      	push	{r4, lr}
   1226c:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   1226e:	4602      	mov	r2, r0
   12270:	2102      	movs	r1, #2
   12272:	2000      	movs	r0, #0
   12274:	f7f7 fc8a 	bl	9b8c <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   12278:	2300      	movs	r3, #0
   1227a:	2b01      	cmp	r3, #1
   1227c:	d804      	bhi.n	12288 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   1227e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   12282:	b91a      	cbnz	r2, 1228c <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   12284:	3301      	adds	r3, #1
   12286:	e7f8      	b.n	1227a <latch_pending_read_and_check+0x10>
    return false;
   12288:	2000      	movs	r0, #0
}
   1228a:	bd10      	pop	{r4, pc}
            return true;
   1228c:	2001      	movs	r0, #1
   1228e:	e7fc      	b.n	1228a <latch_pending_read_and_check+0x20>

00012290 <nrf_gpio_cfg_default>:
{
   12290:	b500      	push	{lr}
   12292:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   12294:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12296:	a801      	add	r0, sp, #4
   12298:	f7f7 fd78 	bl	9d8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1229c:	9a01      	ldr	r2, [sp, #4]
   1229e:	3280      	adds	r2, #128	; 0x80
   122a0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   122a4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   122a8:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   122ac:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   122b0:	b003      	add	sp, #12
   122b2:	f85d fb04 	ldr.w	pc, [sp], #4

000122b6 <nrf_gpio_reconfigure>:
{
   122b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122ba:	b082      	sub	sp, #8
   122bc:	9001      	str	r0, [sp, #4]
   122be:	4688      	mov	r8, r1
   122c0:	4615      	mov	r5, r2
   122c2:	461c      	mov	r4, r3
   122c4:	9f08      	ldr	r7, [sp, #32]
   122c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   122c8:	a801      	add	r0, sp, #4
   122ca:	f7f7 fd5f 	bl	9d8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   122ce:	9a01      	ldr	r2, [sp, #4]
   122d0:	f102 0380 	add.w	r3, r2, #128	; 0x80
   122d4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   122d8:	f1b8 0f00 	cmp.w	r8, #0
   122dc:	d031      	beq.n	12342 <nrf_gpio_reconfigure+0x8c>
   122de:	f04f 0c01 	mov.w	ip, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   122e2:	b38d      	cbz	r5, 12348 <nrf_gpio_reconfigure+0x92>
   122e4:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   122e6:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   122ea:	b37c      	cbz	r4, 1234c <nrf_gpio_reconfigure+0x96>
   122ec:	230c      	movs	r3, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   122ee:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   122f2:	b36f      	cbz	r7, 12350 <nrf_gpio_reconfigure+0x9a>
   122f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   122f8:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   122fc:	b356      	cbz	r6, 12354 <nrf_gpio_reconfigure+0x9e>
   122fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12302:	ea4c 0c03 	orr.w	ip, ip, r3
    cnf &= ~to_update;
   12306:	ea21 010c 	bic.w	r1, r1, ip
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1230a:	f1b8 0f00 	cmp.w	r8, #0
   1230e:	d023      	beq.n	12358 <nrf_gpio_reconfigure+0xa2>
   12310:	f898 3000 	ldrb.w	r3, [r8]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   12314:	b315      	cbz	r5, 1235c <nrf_gpio_reconfigure+0xa6>
   12316:	782d      	ldrb	r5, [r5, #0]
   12318:	006d      	lsls	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1231a:	432b      	orrs	r3, r5
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1231c:	b304      	cbz	r4, 12360 <nrf_gpio_reconfigure+0xaa>
   1231e:	7824      	ldrb	r4, [r4, #0]
   12320:	00a4      	lsls	r4, r4, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   12322:	4323      	orrs	r3, r4
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12324:	b1f7      	cbz	r7, 12364 <nrf_gpio_reconfigure+0xae>
   12326:	783c      	ldrb	r4, [r7, #0]
   12328:	0224      	lsls	r4, r4, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1232a:	4323      	orrs	r3, r4
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1232c:	b1e6      	cbz	r6, 12368 <nrf_gpio_reconfigure+0xb2>
   1232e:	7834      	ldrb	r4, [r6, #0]
   12330:	0424      	lsls	r4, r4, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12332:	4323      	orrs	r3, r4
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12334:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   12336:	3280      	adds	r2, #128	; 0x80
   12338:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   1233c:	b002      	add	sp, #8
   1233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   12342:	f04f 0c00 	mov.w	ip, #0
   12346:	e7cc      	b.n	122e2 <nrf_gpio_reconfigure+0x2c>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12348:	2300      	movs	r3, #0
   1234a:	e7cc      	b.n	122e6 <nrf_gpio_reconfigure+0x30>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1234c:	2300      	movs	r3, #0
   1234e:	e7ce      	b.n	122ee <nrf_gpio_reconfigure+0x38>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   12350:	2300      	movs	r3, #0
   12352:	e7d1      	b.n	122f8 <nrf_gpio_reconfigure+0x42>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   12354:	2300      	movs	r3, #0
   12356:	e7d4      	b.n	12302 <nrf_gpio_reconfigure+0x4c>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12358:	2300      	movs	r3, #0
   1235a:	e7db      	b.n	12314 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1235c:	2500      	movs	r5, #0
   1235e:	e7dc      	b.n	1231a <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12360:	2400      	movs	r4, #0
   12362:	e7de      	b.n	12322 <nrf_gpio_reconfigure+0x6c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12364:	2400      	movs	r4, #0
   12366:	e7e0      	b.n	1232a <nrf_gpio_reconfigure+0x74>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   12368:	2400      	movs	r4, #0
   1236a:	e7e2      	b.n	12332 <nrf_gpio_reconfigure+0x7c>

0001236c <nrf_gpio_cfg_sense_set>:
{
   1236c:	b500      	push	{lr}
   1236e:	b085      	sub	sp, #20
   12370:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   12374:	f10d 030f 	add.w	r3, sp, #15
   12378:	9301      	str	r3, [sp, #4]
   1237a:	2100      	movs	r1, #0
   1237c:	9100      	str	r1, [sp, #0]
   1237e:	460b      	mov	r3, r1
   12380:	460a      	mov	r2, r1
   12382:	f7ff ff98 	bl	122b6 <nrf_gpio_reconfigure>
}
   12386:	b005      	add	sp, #20
   12388:	f85d fb04 	ldr.w	pc, [sp], #4

0001238c <nrf_gpio_pin_read>:
{
   1238c:	b500      	push	{lr}
   1238e:	b083      	sub	sp, #12
   12390:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12392:	a801      	add	r0, sp, #4
   12394:	f7f7 fcfa 	bl	9d8c <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   12398:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1239a:	9b01      	ldr	r3, [sp, #4]
   1239c:	40d8      	lsrs	r0, r3
}
   1239e:	f000 0001 	and.w	r0, r0, #1
   123a2:	b003      	add	sp, #12
   123a4:	f85d fb04 	ldr.w	pc, [sp], #4

000123a8 <nrf_gpio_pin_sense_get>:
{
   123a8:	b500      	push	{lr}
   123aa:	b083      	sub	sp, #12
   123ac:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   123ae:	a801      	add	r0, sp, #4
   123b0:	f7f7 fcec 	bl	9d8c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   123b4:	9b01      	ldr	r3, [sp, #4]
   123b6:	3380      	adds	r3, #128	; 0x80
   123b8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   123bc:	f3c0 4001 	ubfx	r0, r0, #16, #2
   123c0:	b003      	add	sp, #12
   123c2:	f85d fb04 	ldr.w	pc, [sp], #4

000123c6 <next_sense_cond_call_handler>:
{
   123c6:	b570      	push	{r4, r5, r6, lr}
   123c8:	4606      	mov	r6, r0
   123ca:	460c      	mov	r4, r1
   123cc:	4615      	mov	r5, r2
    if (is_level(trigger))
   123ce:	4608      	mov	r0, r1
   123d0:	f7ff ff46 	bl	12260 <is_level>
   123d4:	b960      	cbnz	r0, 123f0 <next_sense_cond_call_handler+0x2a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   123d6:	2d02      	cmp	r5, #2
   123d8:	d01c      	beq.n	12414 <next_sense_cond_call_handler+0x4e>
   123da:	2102      	movs	r1, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   123dc:	4630      	mov	r0, r6
   123de:	f7ff ffc5 	bl	1236c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   123e2:	2c03      	cmp	r4, #3
   123e4:	d01a      	beq.n	1241c <next_sense_cond_call_handler+0x56>
   123e6:	2d02      	cmp	r5, #2
   123e8:	d016      	beq.n	12418 <next_sense_cond_call_handler+0x52>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   123ea:	2d03      	cmp	r5, #3
   123ec:	d01b      	beq.n	12426 <next_sense_cond_call_handler+0x60>
}
   123ee:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   123f0:	4621      	mov	r1, r4
   123f2:	4630      	mov	r0, r6
   123f4:	f7f7 fc5c 	bl	9cb0 <call_handler>
        if (nrf_gpio_pin_sense_get(pin) == sense)
   123f8:	4630      	mov	r0, r6
   123fa:	f7ff ffd5 	bl	123a8 <nrf_gpio_pin_sense_get>
   123fe:	42a8      	cmp	r0, r5
   12400:	d1f5      	bne.n	123ee <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   12402:	2100      	movs	r1, #0
   12404:	4630      	mov	r0, r6
   12406:	f7ff ffb1 	bl	1236c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1240a:	4629      	mov	r1, r5
   1240c:	4630      	mov	r0, r6
   1240e:	f7ff ffad 	bl	1236c <nrf_gpio_cfg_sense_set>
   12412:	e7ec      	b.n	123ee <next_sense_cond_call_handler+0x28>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12414:	2103      	movs	r1, #3
   12416:	e7e1      	b.n	123dc <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   12418:	2c01      	cmp	r4, #1
   1241a:	d1e6      	bne.n	123ea <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   1241c:	4621      	mov	r1, r4
   1241e:	4630      	mov	r0, r6
   12420:	f7f7 fc46 	bl	9cb0 <call_handler>
}
   12424:	e7e3      	b.n	123ee <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   12426:	2c02      	cmp	r4, #2
   12428:	d1e1      	bne.n	123ee <next_sense_cond_call_handler+0x28>
   1242a:	e7f7      	b.n	1241c <next_sense_cond_call_handler+0x56>

0001242c <nrf_gpio_pin_latch_clear>:
{
   1242c:	b500      	push	{lr}
   1242e:	b083      	sub	sp, #12
   12430:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12432:	a801      	add	r0, sp, #4
   12434:	f7f7 fcaa 	bl	9d8c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   12438:	2301      	movs	r3, #1
   1243a:	9a01      	ldr	r2, [sp, #4]
   1243c:	4093      	lsls	r3, r2
   1243e:	6203      	str	r3, [r0, #32]
}
   12440:	b003      	add	sp, #12
   12442:	f85d fb04 	ldr.w	pc, [sp], #4

00012446 <nrf_spim_configure>:
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   12446:	3a00      	subs	r2, #0
   12448:	bf18      	it	ne
   1244a:	2201      	movne	r2, #1
    switch (spi_mode)
   1244c:	2902      	cmp	r1, #2
   1244e:	d009      	beq.n	12464 <nrf_spim_configure+0x1e>
   12450:	2903      	cmp	r1, #3
   12452:	d00a      	beq.n	1246a <nrf_spim_configure+0x24>
   12454:	2901      	cmp	r1, #1
   12456:	d002      	beq.n	1245e <nrf_spim_configure+0x18>
    p_reg->CONFIG = config;
   12458:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   1245c:	4770      	bx	lr
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1245e:	f042 0202 	orr.w	r2, r2, #2
        break;
   12462:	e7f9      	b.n	12458 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   12464:	f042 0204 	orr.w	r2, r2, #4
        break;
   12468:	e7f6      	b.n	12458 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1246a:	f042 0206 	orr.w	r2, r2, #6
        break;
   1246e:	e7f3      	b.n	12458 <nrf_spim_configure+0x12>

00012470 <nrf_gpio_pin_present_check>:
    switch (port)
   12470:	0943      	lsrs	r3, r0, #5
   12472:	d00a      	beq.n	1248a <nrf_gpio_pin_present_check+0x1a>
   12474:	2b01      	cmp	r3, #1
   12476:	d10b      	bne.n	12490 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   12478:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1247c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   12480:	fa23 f000 	lsr.w	r0, r3, r0
}
   12484:	f000 0001 	and.w	r0, r0, #1
   12488:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   1248a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1248e:	e7f5      	b.n	1247c <nrf_gpio_pin_present_check+0xc>
    switch (port)
   12490:	2300      	movs	r3, #0
   12492:	e7f3      	b.n	1247c <nrf_gpio_pin_present_check+0xc>

00012494 <spim_int_enable>:
    if (!enable)
   12494:	b919      	cbnz	r1, 1249e <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   12496:	2340      	movs	r3, #64	; 0x40
   12498:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1249c:	4770      	bx	lr
    p_reg->INTENSET = mask;
   1249e:	2340      	movs	r3, #64	; 0x40
   124a0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   124a4:	4770      	bx	lr

000124a6 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   124a6:	f011 0f01 	tst.w	r1, #1
   124aa:	d009      	beq.n	124c0 <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   124ac:	2301      	movs	r3, #1
   124ae:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   124b2:	f011 0f02 	tst.w	r1, #2
   124b6:	d007      	beq.n	124c8 <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   124b8:	2301      	movs	r3, #1
   124ba:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   124be:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   124c0:	2300      	movs	r3, #0
   124c2:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   124c6:	e7f4      	b.n	124b2 <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   124c8:	2300      	movs	r3, #0
   124ca:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   124ce:	4770      	bx	lr

000124d0 <nrf_gpio_pin_clear>:
{
   124d0:	b500      	push	{lr}
   124d2:	b083      	sub	sp, #12
   124d4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   124d6:	a801      	add	r0, sp, #4
   124d8:	f7f8 f8a4 	bl	a624 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   124dc:	9a01      	ldr	r2, [sp, #4]
   124de:	2301      	movs	r3, #1
   124e0:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   124e2:	60c3      	str	r3, [r0, #12]
}
   124e4:	b003      	add	sp, #12
   124e6:	f85d fb04 	ldr.w	pc, [sp], #4

000124ea <nrf_gpio_pin_set>:
{
   124ea:	b500      	push	{lr}
   124ec:	b083      	sub	sp, #12
   124ee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   124f0:	a801      	add	r0, sp, #4
   124f2:	f7f8 f897 	bl	a624 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   124f6:	9a01      	ldr	r2, [sp, #4]
   124f8:	2301      	movs	r3, #1
   124fa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   124fc:	6083      	str	r3, [r0, #8]
}
   124fe:	b003      	add	sp, #12
   12500:	f85d fb04 	ldr.w	pc, [sp], #4

00012504 <nrf_gpio_pin_write>:
{
   12504:	b508      	push	{r3, lr}
    if (value == 0)
   12506:	b911      	cbnz	r1, 1250e <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   12508:	f7ff ffe2 	bl	124d0 <nrf_gpio_pin_clear>
}
   1250c:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   1250e:	f7ff ffec 	bl	124ea <nrf_gpio_pin_set>
}
   12512:	e7fb      	b.n	1250c <nrf_gpio_pin_write+0x8>

00012514 <set_ss_pin_state>:
{
   12514:	b508      	push	{r3, lr}
    if (p_cb->use_hw_ss)
   12516:	7f83      	ldrb	r3, [r0, #30]
   12518:	f013 0f04 	tst.w	r3, #4
   1251c:	d109      	bne.n	12532 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1251e:	7fc0      	ldrb	r0, [r0, #31]
   12520:	28ff      	cmp	r0, #255	; 0xff
   12522:	d006      	beq.n	12532 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   12524:	f013 0f02 	tst.w	r3, #2
   12528:	d101      	bne.n	1252e <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
   1252a:	f081 0101 	eor.w	r1, r1, #1
        nrf_gpio_pin_write(p_cb->ss_pin,
   1252e:	f7ff ffe9 	bl	12504 <nrf_gpio_pin_write>
}
   12532:	bd08      	pop	{r3, pc}

00012534 <finish_transfer>:
{
   12534:	b510      	push	{r4, lr}
   12536:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   12538:	2100      	movs	r1, #0
   1253a:	f7ff ffeb 	bl	12514 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   1253e:	2300      	movs	r3, #0
   12540:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   12542:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   12544:	4620      	mov	r0, r4
   12546:	f850 3b08 	ldr.w	r3, [r0], #8
   1254a:	6861      	ldr	r1, [r4, #4]
   1254c:	4798      	blx	r3
}
   1254e:	bd10      	pop	{r4, pc}

00012550 <nrf_gpio_cfg>:
{
   12550:	b5f0      	push	{r4, r5, r6, r7, lr}
   12552:	b083      	sub	sp, #12
   12554:	9001      	str	r0, [sp, #4]
   12556:	460c      	mov	r4, r1
   12558:	4617      	mov	r7, r2
   1255a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1255c:	a801      	add	r0, sp, #4
   1255e:	f7f8 f861 	bl	a624 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   12562:	9901      	ldr	r1, [sp, #4]
   12564:	3180      	adds	r1, #128	; 0x80
   12566:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   1256a:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1256e:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   12572:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12576:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1257a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1257e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   12582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12586:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   1258a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1258e:	b003      	add	sp, #12
   12590:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012592 <configure_pins>:
{
   12592:	b570      	push	{r4, r5, r6, lr}
   12594:	b082      	sub	sp, #8
   12596:	460c      	mov	r4, r1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   12598:	6805      	ldr	r5, [r0, #0]
    if (!p_config->skip_gpio_cfg)
   1259a:	7ccb      	ldrb	r3, [r1, #19]
   1259c:	bb03      	cbnz	r3, 125e0 <configure_pins+0x4e>
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   1259e:	688b      	ldr	r3, [r1, #8]
                    : NRF_GPIO_PIN_S0S1;
   125a0:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   125a4:	d02e      	beq.n	12604 <configure_pins+0x72>
   125a6:	2600      	movs	r6, #0
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   125a8:	7b21      	ldrb	r1, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   125aa:	2901      	cmp	r1, #1
   125ac:	bf94      	ite	ls
   125ae:	2100      	movls	r1, #0
   125b0:	2101      	movhi	r1, #1
   125b2:	7820      	ldrb	r0, [r4, #0]
   125b4:	f7ff ffa6 	bl	12504 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   125b8:	2200      	movs	r2, #0
   125ba:	9201      	str	r2, [sp, #4]
   125bc:	9600      	str	r6, [sp, #0]
   125be:	4613      	mov	r3, r2
   125c0:	2101      	movs	r1, #1
   125c2:	7820      	ldrb	r0, [r4, #0]
   125c4:	f7ff ffc4 	bl	12550 <nrf_gpio_cfg>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   125c8:	7860      	ldrb	r0, [r4, #1]
   125ca:	28ff      	cmp	r0, #255	; 0xff
   125cc:	d11c      	bne.n	12608 <configure_pins+0x76>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   125ce:	78a0      	ldrb	r0, [r4, #2]
   125d0:	28ff      	cmp	r0, #255	; 0xff
   125d2:	d124      	bne.n	1261e <configure_pins+0x8c>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   125d4:	78e0      	ldrb	r0, [r4, #3]
   125d6:	28ff      	cmp	r0, #255	; 0xff
   125d8:	d129      	bne.n	1262e <configure_pins+0x9c>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   125da:	7be0      	ldrb	r0, [r4, #15]
   125dc:	28ff      	cmp	r0, #255	; 0xff
   125de:	d134      	bne.n	1264a <configure_pins+0xb8>
    if (!p_config->skip_psel_cfg)
   125e0:	7d23      	ldrb	r3, [r4, #20]
   125e2:	b96b      	cbnz	r3, 12600 <configure_pins+0x6e>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   125e4:	7863      	ldrb	r3, [r4, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   125e6:	2bff      	cmp	r3, #255	; 0xff
   125e8:	d03a      	beq.n	12660 <configure_pins+0xce>
   125ea:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   125ec:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   125ee:	2bff      	cmp	r3, #255	; 0xff
   125f0:	d039      	beq.n	12666 <configure_pins+0xd4>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   125f2:	7821      	ldrb	r1, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   125f4:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   125f8:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   125fc:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}
   12600:	b002      	add	sp, #8
   12602:	bd70      	pop	{r4, r5, r6, pc}
                    : NRF_GPIO_PIN_S0S1;
   12604:	2603      	movs	r6, #3
   12606:	e7cf      	b.n	125a8 <configure_pins+0x16>
        nrf_gpio_pin_clear(pin_number);
   12608:	f7ff ff62 	bl	124d0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1260c:	2300      	movs	r3, #0
   1260e:	9301      	str	r3, [sp, #4]
   12610:	9600      	str	r6, [sp, #0]
   12612:	2201      	movs	r2, #1
   12614:	4611      	mov	r1, r2
   12616:	7860      	ldrb	r0, [r4, #1]
   12618:	f7ff ff9a 	bl	12550 <nrf_gpio_cfg>
   1261c:	e7d7      	b.n	125ce <configure_pins+0x3c>
            nrf_gpio_cfg(p_config->miso_pin,
   1261e:	2100      	movs	r1, #0
   12620:	9101      	str	r1, [sp, #4]
   12622:	9600      	str	r6, [sp, #0]
   12624:	7ba3      	ldrb	r3, [r4, #14]
   12626:	460a      	mov	r2, r1
   12628:	f7ff ff92 	bl	12550 <nrf_gpio_cfg>
   1262c:	e7d2      	b.n	125d4 <configure_pins+0x42>
                               p_config->ss_active_high ? 0 : 1);
   1262e:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   12630:	f081 0101 	eor.w	r1, r1, #1
   12634:	f7ff ff66 	bl	12504 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   12638:	2300      	movs	r3, #0
   1263a:	9301      	str	r3, [sp, #4]
   1263c:	9600      	str	r6, [sp, #0]
   1263e:	2201      	movs	r2, #1
   12640:	4611      	mov	r1, r2
   12642:	78e0      	ldrb	r0, [r4, #3]
   12644:	f7ff ff84 	bl	12550 <nrf_gpio_cfg>
   12648:	e7c7      	b.n	125da <configure_pins+0x48>
        nrf_gpio_pin_set(pin_number);
   1264a:	f7ff ff4e 	bl	124ea <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1264e:	2300      	movs	r3, #0
   12650:	9301      	str	r3, [sp, #4]
   12652:	9600      	str	r6, [sp, #0]
   12654:	2201      	movs	r2, #1
   12656:	4611      	mov	r1, r2
   12658:	7be0      	ldrb	r0, [r4, #15]
   1265a:	f7ff ff79 	bl	12550 <nrf_gpio_cfg>
   1265e:	e7bf      	b.n	125e0 <configure_pins+0x4e>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   12660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12664:	e7c2      	b.n	125ec <configure_pins+0x5a>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   12666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1266a:	e7c2      	b.n	125f2 <configure_pins+0x60>

0001266c <nrf_gpio_cfg_default>:
{
   1266c:	b500      	push	{lr}
   1266e:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   12670:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12672:	a801      	add	r0, sp, #4
   12674:	f7f7 ffd6 	bl	a624 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   12678:	9a01      	ldr	r2, [sp, #4]
   1267a:	3280      	adds	r2, #128	; 0x80
   1267c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   12680:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12684:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   12688:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   1268c:	b003      	add	sp, #12
   1268e:	f85d fb04 	ldr.w	pc, [sp], #4

00012692 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   12692:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12696:	d003      	beq.n	126a0 <spim_pin_uninit+0xe>
{
   12698:	b508      	push	{r3, lr}
    nrf_gpio_cfg_default(pin);
   1269a:	f7ff ffe7 	bl	1266c <nrf_gpio_cfg_default>
}
   1269e:	bd08      	pop	{r3, pc}
   126a0:	4770      	bx	lr

000126a2 <spim_abort>:
{
   126a2:	b570      	push	{r4, r5, r6, lr}
   126a4:	4605      	mov	r5, r0
   126a6:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   126a8:	2301      	movs	r3, #1
   126aa:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   126ac:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   126ae:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   126b2:	b923      	cbnz	r3, 126be <spim_abort+0x1c>
   126b4:	2001      	movs	r0, #1
   126b6:	f7ff fd4c 	bl	12152 <nrfx_busy_wait>
   126ba:	3c01      	subs	r4, #1
   126bc:	d1f7      	bne.n	126ae <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   126be:	2300      	movs	r3, #0
   126c0:	7773      	strb	r3, [r6, #29]
}
   126c2:	bd70      	pop	{r4, r5, r6, pc}

000126c4 <nrf_gpio_pin_present_check>:
    switch (port)
   126c4:	0943      	lsrs	r3, r0, #5
   126c6:	d00a      	beq.n	126de <nrf_gpio_pin_present_check+0x1a>
   126c8:	2b01      	cmp	r3, #1
   126ca:	d10b      	bne.n	126e4 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   126cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   126d0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   126d4:	fa23 f000 	lsr.w	r0, r3, r0
}
   126d8:	f000 0001 	and.w	r0, r0, #1
   126dc:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   126de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126e2:	e7f5      	b.n	126d0 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   126e4:	2300      	movs	r3, #0
   126e6:	e7f3      	b.n	126d0 <nrf_gpio_pin_present_check+0xc>

000126e8 <xfer_completeness_check>:
{
   126e8:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   126ea:	7b0a      	ldrb	r2, [r1, #12]
   126ec:	2a03      	cmp	r2, #3
   126ee:	d838      	bhi.n	12762 <xfer_completeness_check+0x7a>
   126f0:	e8df f002 	tbb	[pc, r2]
   126f4:	02163029 	.word	0x02163029
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   126f8:	688a      	ldr	r2, [r1, #8]
   126fa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   126fe:	d004      	beq.n	1270a <xfer_completeness_check+0x22>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   12700:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   12704:	6908      	ldr	r0, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   12706:	4290      	cmp	r0, r2
   12708:	d10f      	bne.n	1272a <xfer_completeness_check+0x42>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1270a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1270c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   12710:	d129      	bne.n	12766 <xfer_completeness_check+0x7e>
   12712:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
   12716:	6949      	ldr	r1, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   12718:	4291      	cmp	r1, r2
   1271a:	d106      	bne.n	1272a <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1271c:	2001      	movs	r0, #1
   1271e:	4770      	bx	lr
   12720:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   12724:	6908      	ldr	r0, [r1, #16]
   12726:	4290      	cmp	r0, r2
   12728:	d006      	beq.n	12738 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1272a:	2000      	movs	r0, #0
   1272c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   12730:	2206      	movs	r2, #6
   12732:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   12736:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   12738:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
   1273c:	6949      	ldr	r1, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1273e:	4291      	cmp	r1, r2
   12740:	d1f3      	bne.n	1272a <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   12742:	2001      	movs	r0, #1
   12744:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   12746:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1274a:	6909      	ldr	r1, [r1, #16]
   1274c:	4291      	cmp	r1, r2
   1274e:	d1ec      	bne.n	1272a <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   12750:	2001      	movs	r0, #1
   12752:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
   12754:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   12758:	6909      	ldr	r1, [r1, #16]
   1275a:	4291      	cmp	r1, r2
   1275c:	d1e5      	bne.n	1272a <xfer_completeness_check+0x42>
    bool transfer_complete = true;
   1275e:	2001      	movs	r0, #1
}
   12760:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
   12762:	2001      	movs	r0, #1
   12764:	4770      	bx	lr
    bool transfer_complete = true;
   12766:	2001      	movs	r0, #1
   12768:	4770      	bx	lr

0001276a <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1276a:	f011 0f01 	tst.w	r1, #1
   1276e:	d009      	beq.n	12784 <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   12770:	2301      	movs	r3, #1
   12772:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   12776:	f011 0f02 	tst.w	r1, #2
   1277a:	d007      	beq.n	1278c <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1277c:	2301      	movs	r3, #1
   1277e:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   12782:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   12784:	2300      	movs	r3, #0
   12786:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1278a:	e7f4      	b.n	12776 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1278c:	2300      	movs	r3, #0
   1278e:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   12792:	4770      	bx	lr

00012794 <nrf_gpio_cfg>:
{
   12794:	b5f0      	push	{r4, r5, r6, r7, lr}
   12796:	b083      	sub	sp, #12
   12798:	9001      	str	r0, [sp, #4]
   1279a:	460c      	mov	r4, r1
   1279c:	4617      	mov	r7, r2
   1279e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   127a0:	a801      	add	r0, sp, #4
   127a2:	f7f8 f9b3 	bl	ab0c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   127a6:	9901      	ldr	r1, [sp, #4]
   127a8:	3180      	adds	r1, #128	; 0x80
   127aa:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   127ae:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   127b2:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   127b6:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   127ba:	f89d 2020 	ldrb.w	r2, [sp, #32]
   127be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   127c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   127c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   127ca:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   127ce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   127d2:	b003      	add	sp, #12
   127d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000127d6 <twim_pins_configure>:
{
   127d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   127d8:	b083      	sub	sp, #12
   127da:	4605      	mov	r5, r0
   127dc:	460c      	mov	r4, r1
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   127de:	7b8b      	ldrb	r3, [r1, #14]
   127e0:	b10b      	cbz	r3, 127e6 <twim_pins_configure+0x10>
   127e2:	7bc8      	ldrb	r0, [r1, #15]
   127e4:	b9e8      	cbnz	r0, 12822 <twim_pins_configure+0x4c>
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
   127e6:	68a2      	ldr	r2, [r4, #8]
   127e8:	f1b2 6f7f 	cmp.w	r2, #267386880	; 0xff00000
   127ec:	d30e      	bcc.n	1280c <twim_pins_configure+0x36>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   127ee:	6822      	ldr	r2, [r4, #0]
   127f0:	2a22      	cmp	r2, #34	; 0x22
   127f2:	d006      	beq.n	12802 <twim_pins_configure+0x2c>
   127f4:	2a23      	cmp	r2, #35	; 0x23
   127f6:	d128      	bne.n	1284a <twim_pins_configure+0x74>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
   127f8:	6862      	ldr	r2, [r4, #4]
   127fa:	2a22      	cmp	r2, #34	; 0x22
   127fc:	d127      	bne.n	1284e <twim_pins_configure+0x78>
        drive = NRF_GPIO_PIN_E0E1;
   127fe:	270b      	movs	r7, #11
   12800:	e005      	b.n	1280e <twim_pins_configure+0x38>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   12802:	6861      	ldr	r1, [r4, #4]
   12804:	2923      	cmp	r1, #35	; 0x23
   12806:	d1f5      	bne.n	127f4 <twim_pins_configure+0x1e>
        drive = NRF_GPIO_PIN_E0E1;
   12808:	270b      	movs	r7, #11
   1280a:	e000      	b.n	1280e <twim_pins_configure+0x38>
        drive = NRF_GPIO_PIN_S0D1;
   1280c:	2706      	movs	r7, #6
    if (!p_config->skip_gpio_cfg)
   1280e:	b153      	cbz	r3, 12826 <twim_pins_configure+0x50>
    if (!p_config->skip_psel_cfg)
   12810:	7be0      	ldrb	r0, [r4, #15]
   12812:	b930      	cbnz	r0, 12822 <twim_pins_configure+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   12814:	6822      	ldr	r2, [r4, #0]
   12816:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.SCL = scl_pin;
   12818:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1281c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    return true;
   12820:	2001      	movs	r0, #1
}
   12822:	b003      	add	sp, #12
   12824:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   12826:	2600      	movs	r6, #0
   12828:	9601      	str	r6, [sp, #4]
   1282a:	9700      	str	r7, [sp, #0]
   1282c:	2303      	movs	r3, #3
   1282e:	4632      	mov	r2, r6
   12830:	4631      	mov	r1, r6
   12832:	6820      	ldr	r0, [r4, #0]
   12834:	f7ff ffae 	bl	12794 <nrf_gpio_cfg>
        TWIM_PIN_INIT(p_config->sda, drive);
   12838:	9601      	str	r6, [sp, #4]
   1283a:	9700      	str	r7, [sp, #0]
   1283c:	2303      	movs	r3, #3
   1283e:	4632      	mov	r2, r6
   12840:	4631      	mov	r1, r6
   12842:	6860      	ldr	r0, [r4, #4]
   12844:	f7ff ffa6 	bl	12794 <nrf_gpio_cfg>
   12848:	e7e2      	b.n	12810 <twim_pins_configure+0x3a>
            return false;
   1284a:	2000      	movs	r0, #0
   1284c:	e7e9      	b.n	12822 <twim_pins_configure+0x4c>
   1284e:	2000      	movs	r0, #0
   12850:	e7e7      	b.n	12822 <twim_pins_configure+0x4c>

00012852 <nrf_gpio_pin_present_check>:
    switch (port)
   12852:	0943      	lsrs	r3, r0, #5
   12854:	d00a      	beq.n	1286c <nrf_gpio_pin_present_check+0x1a>
   12856:	2b01      	cmp	r3, #1
   12858:	d10b      	bne.n	12872 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   1285a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1285e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   12862:	fa23 f000 	lsr.w	r0, r3, r0
}
   12866:	f000 0001 	and.w	r0, r0, #1
   1286a:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   1286c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12870:	e7f5      	b.n	1285e <nrf_gpio_pin_present_check+0xc>
    switch (port)
   12872:	2300      	movs	r3, #0
   12874:	e7f3      	b.n	1285e <nrf_gpio_pin_present_check+0xc>

00012876 <nrf_gpio_pin_clear>:
{
   12876:	b500      	push	{lr}
   12878:	b083      	sub	sp, #12
   1287a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1287c:	a801      	add	r0, sp, #4
   1287e:	f7f8 fd53 	bl	b328 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12882:	9a01      	ldr	r2, [sp, #4]
   12884:	2301      	movs	r3, #1
   12886:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   12888:	60c3      	str	r3, [r0, #12]
}
   1288a:	b003      	add	sp, #12
   1288c:	f85d fb04 	ldr.w	pc, [sp], #4

00012890 <nrf_gpio_pin_set>:
{
   12890:	b500      	push	{lr}
   12892:	b083      	sub	sp, #12
   12894:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12896:	a801      	add	r0, sp, #4
   12898:	f7f8 fd46 	bl	b328 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1289c:	9a01      	ldr	r2, [sp, #4]
   1289e:	2301      	movs	r3, #1
   128a0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   128a2:	6083      	str	r3, [r0, #8]
}
   128a4:	b003      	add	sp, #12
   128a6:	f85d fb04 	ldr.w	pc, [sp], #4

000128aa <nrf_gpio_pin_read>:
{
   128aa:	b500      	push	{lr}
   128ac:	b083      	sub	sp, #12
   128ae:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   128b0:	a801      	add	r0, sp, #4
   128b2:	f7f8 fd39 	bl	b328 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   128b6:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   128b8:	9b01      	ldr	r3, [sp, #4]
   128ba:	40d8      	lsrs	r0, r3
}
   128bc:	f000 0001 	and.w	r0, r0, #1
   128c0:	b003      	add	sp, #12
   128c2:	f85d fb04 	ldr.w	pc, [sp], #4

000128c6 <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
   128c6:	b300      	cbz	r0, 1290a <metal_device_open+0x44>
{
   128c8:	b570      	push	{r4, r5, r6, lr}
   128ca:	b082      	sub	sp, #8
   128cc:	460c      	mov	r4, r1
   128ce:	4615      	mov	r5, r2
   128d0:	4606      	mov	r6, r0
	if (!bus_name || !strlen(bus_name) ||
   128d2:	f7fe fcf2 	bl	112ba <strlen>
   128d6:	b190      	cbz	r0, 128fe <metal_device_open+0x38>
   128d8:	b18c      	cbz	r4, 128fe <metal_device_open+0x38>
	    !dev_name || !strlen(dev_name) ||
   128da:	4620      	mov	r0, r4
   128dc:	f7fe fced 	bl	112ba <strlen>
   128e0:	b168      	cbz	r0, 128fe <metal_device_open+0x38>
   128e2:	b165      	cbz	r5, 128fe <metal_device_open+0x38>
	error = metal_bus_find(bus_name, &bus);
   128e4:	a901      	add	r1, sp, #4
   128e6:	4630      	mov	r0, r6
   128e8:	f7f8 fdd2 	bl	b490 <metal_bus_find>
	if (error)
   128ec:	b928      	cbnz	r0, 128fa <metal_device_open+0x34>
	if (!bus->ops.dev_open)
   128ee:	9801      	ldr	r0, [sp, #4]
   128f0:	6883      	ldr	r3, [r0, #8]
   128f2:	b13b      	cbz	r3, 12904 <metal_device_open+0x3e>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   128f4:	462a      	mov	r2, r5
   128f6:	4621      	mov	r1, r4
   128f8:	4798      	blx	r3
}
   128fa:	b002      	add	sp, #8
   128fc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   128fe:	f06f 0015 	mvn.w	r0, #21
   12902:	e7fa      	b.n	128fa <metal_device_open+0x34>
		return -ENODEV;
   12904:	f06f 0012 	mvn.w	r0, #18
   12908:	e7f7      	b.n	128fa <metal_device_open+0x34>
		return -EINVAL;
   1290a:	f06f 0015 	mvn.w	r0, #21
}
   1290e:	4770      	bx	lr

00012910 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   12910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12914:	b088      	sub	sp, #32
   12916:	4604      	mov	r4, r0
   12918:	4688      	mov	r8, r1
   1291a:	4617      	mov	r7, r2
   1291c:	461e      	mov	r6, r3
   1291e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	const struct metal_io_ops nops = {
   12920:	2220      	movs	r2, #32
   12922:	2100      	movs	r1, #0
   12924:	4668      	mov	r0, sp
   12926:	f7fe fd28 	bl	1137a <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
   1292a:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
   1292e:	6067      	str	r7, [r4, #4]
	io->size = size;
   12930:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
   12932:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   12934:	2d1f      	cmp	r5, #31
   12936:	d912      	bls.n	1295e <metal_io_init+0x4e>
		/* avoid overflow */
		io->page_mask = -1UL;
   12938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1293c:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
   1293e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12940:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   12942:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12944:	b183      	cbz	r3, 12968 <metal_io_init+0x58>
   12946:	3418      	adds	r4, #24
   12948:	469c      	mov	ip, r3
   1294a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1294e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12950:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   12954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   12958:	b008      	add	sp, #32
   1295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
   1295e:	2301      	movs	r3, #1
   12960:	40ab      	lsls	r3, r5
   12962:	3b01      	subs	r3, #1
   12964:	6123      	str	r3, [r4, #16]
   12966:	e7ea      	b.n	1293e <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
   12968:	3418      	adds	r4, #24
   1296a:	466d      	mov	r5, sp
   1296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1296e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   12978:	e7ee      	b.n	12958 <metal_io_init+0x48>

0001297a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1297a:	b530      	push	{r4, r5, lr}
   1297c:	b083      	sub	sp, #12
	return (io->virt != METAL_BAD_VA && offset < io->size
   1297e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   12980:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12984:	d032      	beq.n	129ec <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
   12986:	6885      	ldr	r5, [r0, #8]
   12988:	42a9      	cmp	r1, r5
   1298a:	d232      	bcs.n	129f2 <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1298c:	eb11 0c04 	adds.w	ip, r1, r4
   12990:	d032      	beq.n	129f8 <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
   12992:	185c      	adds	r4, r3, r1
   12994:	42ac      	cmp	r4, r5
   12996:	d900      	bls.n	1299a <metal_io_block_read+0x20>
		len = io->size - offset;
   12998:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1299a:	6a04      	ldr	r4, [r0, #32]
   1299c:	b124      	cbz	r4, 129a8 <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
   1299e:	9300      	str	r3, [sp, #0]
   129a0:	2305      	movs	r3, #5
   129a2:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   129a4:	b003      	add	sp, #12
   129a6:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
   129a8:	f3bf 8f5b 	dmb	ish
		while ( len && (
   129ac:	4619      	mov	r1, r3
   129ae:	e004      	b.n	129ba <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
   129b0:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   129b4:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   129b8:	3901      	subs	r1, #1
		while ( len && (
   129ba:	b159      	cbz	r1, 129d4 <metal_io_block_read+0x5a>
   129bc:	f012 0f03 	tst.w	r2, #3
   129c0:	d1f6      	bne.n	129b0 <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
   129c2:	f01c 0f03 	tst.w	ip, #3
   129c6:	d1f3      	bne.n	129b0 <metal_io_block_read+0x36>
   129c8:	e004      	b.n	129d4 <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   129ca:	f85c 0b04 	ldr.w	r0, [ip], #4
   129ce:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
   129d2:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   129d4:	2903      	cmp	r1, #3
   129d6:	dcf8      	bgt.n	129ca <metal_io_block_read+0x50>
   129d8:	e004      	b.n	129e4 <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
   129da:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   129de:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   129e2:	3901      	subs	r1, #1
   129e4:	2900      	cmp	r1, #0
   129e6:	d1f8      	bne.n	129da <metal_io_block_read+0x60>
	retlen = len;
   129e8:	4618      	mov	r0, r3
   129ea:	e7db      	b.n	129a4 <metal_io_block_read+0x2a>
		return -ERANGE;
   129ec:	f06f 0021 	mvn.w	r0, #33	; 0x21
   129f0:	e7d8      	b.n	129a4 <metal_io_block_read+0x2a>
   129f2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   129f6:	e7d5      	b.n	129a4 <metal_io_block_read+0x2a>
   129f8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   129fc:	e7d2      	b.n	129a4 <metal_io_block_read+0x2a>

000129fe <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   129fe:	b530      	push	{r4, r5, lr}
   12a00:	b083      	sub	sp, #12
   12a02:	6804      	ldr	r4, [r0, #0]
		: NULL);
   12a04:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12a08:	d031      	beq.n	12a6e <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
   12a0a:	6885      	ldr	r5, [r0, #8]
   12a0c:	42a9      	cmp	r1, r5
   12a0e:	d231      	bcs.n	12a74 <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   12a10:	eb11 0c04 	adds.w	ip, r1, r4
   12a14:	d031      	beq.n	12a7a <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
   12a16:	185c      	adds	r4, r3, r1
   12a18:	42ac      	cmp	r4, r5
   12a1a:	d900      	bls.n	12a1e <metal_io_block_write+0x20>
		len = io->size - offset;
   12a1c:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   12a1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   12a20:	b18c      	cbz	r4, 12a46 <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
   12a22:	9300      	str	r3, [sp, #0]
   12a24:	2305      	movs	r3, #5
   12a26:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   12a28:	b003      	add	sp, #12
   12a2a:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
   12a2c:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   12a30:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
   12a34:	3901      	subs	r1, #1
		while ( len && (
   12a36:	b169      	cbz	r1, 12a54 <metal_io_block_write+0x56>
   12a38:	f01c 0f03 	tst.w	ip, #3
   12a3c:	d1f6      	bne.n	12a2c <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
   12a3e:	f012 0f03 	tst.w	r2, #3
   12a42:	d1f3      	bne.n	12a2c <metal_io_block_write+0x2e>
   12a44:	e006      	b.n	12a54 <metal_io_block_write+0x56>
   12a46:	4619      	mov	r1, r3
   12a48:	e7f5      	b.n	12a36 <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   12a4a:	f852 0b04 	ldr.w	r0, [r2], #4
   12a4e:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
   12a52:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   12a54:	2903      	cmp	r1, #3
   12a56:	dcf8      	bgt.n	12a4a <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
   12a58:	b129      	cbz	r1, 12a66 <metal_io_block_write+0x68>
				*(const unsigned char *)source;
   12a5a:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   12a5e:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
   12a62:	3901      	subs	r1, #1
   12a64:	e7f8      	b.n	12a58 <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
   12a66:	f3bf 8f5b 	dmb	ish
	retlen = len;
   12a6a:	4618      	mov	r0, r3
   12a6c:	e7dc      	b.n	12a28 <metal_io_block_write+0x2a>
		return -ERANGE;
   12a6e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12a72:	e7d9      	b.n	12a28 <metal_io_block_write+0x2a>
   12a74:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12a78:	e7d6      	b.n	12a28 <metal_io_block_write+0x2a>
   12a7a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12a7e:	e7d3      	b.n	12a28 <metal_io_block_write+0x2a>

00012a80 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   12a80:	b530      	push	{r4, r5, lr}
   12a82:	b083      	sub	sp, #12
   12a84:	6804      	ldr	r4, [r0, #0]
		: NULL);
   12a86:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12a8a:	d034      	beq.n	12af6 <metal_io_block_set+0x76>
   12a8c:	461d      	mov	r5, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
   12a8e:	6883      	ldr	r3, [r0, #8]
   12a90:	4299      	cmp	r1, r3
   12a92:	d233      	bcs.n	12afc <metal_io_block_set+0x7c>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   12a94:	eb11 0c04 	adds.w	ip, r1, r4
   12a98:	d033      	beq.n	12b02 <metal_io_block_set+0x82>
		return -ERANGE;
	if ((offset + len) > io->size)
   12a9a:	186c      	adds	r4, r5, r1
   12a9c:	429c      	cmp	r4, r3
   12a9e:	d900      	bls.n	12aa2 <metal_io_block_set+0x22>
		len = io->size - offset;
   12aa0:	1a5d      	subs	r5, r3, r1
	retlen = len;
	if (io->ops.block_set) {
   12aa2:	6a84      	ldr	r4, [r0, #40]	; 0x28
   12aa4:	b12c      	cbz	r4, 12ab2 <metal_io_block_set+0x32>
		(*io->ops.block_set)(
   12aa6:	9500      	str	r5, [sp, #0]
   12aa8:	2305      	movs	r3, #5
   12aaa:	47a0      	blx	r4
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   12aac:	4628      	mov	r0, r5
}
   12aae:	b003      	add	sp, #12
   12ab0:	bd30      	pop	{r4, r5, pc}
		unsigned int cint = value;
   12ab2:	4613      	mov	r3, r2
		for (i = 1; i < sizeof(int); i++)
   12ab4:	2101      	movs	r1, #1
   12ab6:	e004      	b.n	12ac2 <metal_io_block_set+0x42>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   12ab8:	00c8      	lsls	r0, r1, #3
   12aba:	fa02 f000 	lsl.w	r0, r2, r0
   12abe:	4303      	orrs	r3, r0
		for (i = 1; i < sizeof(int); i++)
   12ac0:	3101      	adds	r1, #1
   12ac2:	2903      	cmp	r1, #3
   12ac4:	d9f8      	bls.n	12ab8 <metal_io_block_set+0x38>
   12ac6:	4629      	mov	r1, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   12ac8:	b149      	cbz	r1, 12ade <metal_io_block_set+0x5e>
   12aca:	f01c 0f03 	tst.w	ip, #3
   12ace:	d006      	beq.n	12ade <metal_io_block_set+0x5e>
			*(unsigned char *)ptr = (unsigned char) value;
   12ad0:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   12ad4:	3901      	subs	r1, #1
   12ad6:	e7f7      	b.n	12ac8 <metal_io_block_set+0x48>
			*(unsigned int *)ptr = cint;
   12ad8:	f84c 3b04 	str.w	r3, [ip], #4
						len -= sizeof(int))
   12adc:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   12ade:	2903      	cmp	r1, #3
   12ae0:	dcfa      	bgt.n	12ad8 <metal_io_block_set+0x58>
   12ae2:	e002      	b.n	12aea <metal_io_block_set+0x6a>
			*(unsigned char *)ptr = (unsigned char) value;
   12ae4:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len != 0; ptr++, len--)
   12ae8:	3901      	subs	r1, #1
   12aea:	2900      	cmp	r1, #0
   12aec:	d1fa      	bne.n	12ae4 <metal_io_block_set+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   12aee:	f3bf 8f5b 	dmb	ish
	return retlen;
   12af2:	4628      	mov	r0, r5
   12af4:	e7db      	b.n	12aae <metal_io_block_set+0x2e>
		return -ERANGE;
   12af6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12afa:	e7d8      	b.n	12aae <metal_io_block_set+0x2e>
   12afc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12b00:	e7d5      	b.n	12aae <metal_io_block_set+0x2e>
   12b02:	f06f 0021 	mvn.w	r0, #33	; 0x21
   12b06:	e7d2      	b.n	12aae <metal_io_block_set+0x2e>

00012b08 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   12b08:	2000      	movs	r0, #0
   12b0a:	4770      	bx	lr

00012b0c <vring_size>:
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   12b0c:	1cc3      	adds	r3, r0, #3
   12b0e:	005b      	lsls	r3, r3, #1
   12b10:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	size = (size + align - 1) & ~(align - 1);
   12b14:	440b      	add	r3, r1
   12b16:	3b01      	subs	r3, #1
   12b18:	4249      	negs	r1, r1
   12b1a:	400b      	ands	r3, r1
	size += sizeof(struct vring_used) +
   12b1c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3

	return size;
}
   12b20:	3006      	adds	r0, #6
   12b22:	4770      	bx	lr

00012b24 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   12b24:	b508      	push	{r3, lr}
	if (!io->ops.offset_to_phys) {
   12b26:	6b03      	ldr	r3, [r0, #48]	; 0x30
   12b28:	b10b      	cbz	r3, 12b2e <metal_io_phys+0xa>
		return (io->physmap && offset < io->size
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
   12b2a:	4798      	blx	r3
}
   12b2c:	bd08      	pop	{r3, pc}
		unsigned long page = (io->page_shift >=
   12b2e:	68c3      	ldr	r3, [r0, #12]
				     0 : offset >> io->page_shift);
   12b30:	2b1f      	cmp	r3, #31
   12b32:	d80d      	bhi.n	12b50 <metal_io_phys+0x2c>
   12b34:	fa21 f303 	lsr.w	r3, r1, r3
		return (io->physmap && offset < io->size
   12b38:	6842      	ldr	r2, [r0, #4]
			: METAL_BAD_PHYS);
   12b3a:	b15a      	cbz	r2, 12b54 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   12b3c:	f8d0 c008 	ldr.w	ip, [r0, #8]
   12b40:	458c      	cmp	ip, r1
   12b42:	d90a      	bls.n	12b5a <metal_io_phys+0x36>
			? io->physmap[page] + (offset & io->page_mask)
   12b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b48:	6902      	ldr	r2, [r0, #16]
   12b4a:	400a      	ands	r2, r1
			: METAL_BAD_PHYS);
   12b4c:	1898      	adds	r0, r3, r2
   12b4e:	e7ed      	b.n	12b2c <metal_io_phys+0x8>
				     0 : offset >> io->page_shift);
   12b50:	2300      	movs	r3, #0
   12b52:	e7f1      	b.n	12b38 <metal_io_phys+0x14>
			: METAL_BAD_PHYS);
   12b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b58:	e7e8      	b.n	12b2c <metal_io_phys+0x8>
   12b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b5e:	e7e5      	b.n	12b2c <metal_io_phys+0x8>

00012b60 <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
   12b60:	b508      	push	{r3, lr}
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   12b62:	6803      	ldr	r3, [r0, #0]
   12b64:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   12b66:	6883      	ldr	r3, [r0, #8]
   12b68:	4299      	cmp	r1, r3
   12b6a:	d202      	bcs.n	12b72 <metal_io_virt_to_phys+0x12>
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   12b6c:	f7ff ffda 	bl	12b24 <metal_io_phys>
}
   12b70:	bd08      	pop	{r3, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   12b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12b76:	e7f9      	b.n	12b6c <metal_io_virt_to_phys+0xc>

00012b78 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
   12b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b7c:	4683      	mov	fp, r0
   12b7e:	4689      	mov	r9, r1
   12b80:	4610      	mov	r0, r2
   12b82:	4698      	mov	r8, r3
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
   12b84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   12b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b88:	441f      	add	r7, r3

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   12b8a:	2500      	movs	r5, #0
   12b8c:	e001      	b.n	12b92 <vq_ring_add_buffer+0x1a>
   12b8e:	3501      	adds	r5, #1
   12b90:	89e0      	ldrh	r0, [r4, #14]
   12b92:	42bd      	cmp	r5, r7
   12b94:	da22      	bge.n	12bdc <vq_ring_add_buffer+0x64>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		/* CACHE: No need to invalidate desc because it is only written by master */
		dp = &desc[idx];
   12b96:	ea4f 1a00 	mov.w	sl, r0, lsl #4
   12b9a:	eb09 1400 	add.w	r4, r9, r0, lsl #4
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   12b9e:	eb08 06c5 	add.w	r6, r8, r5, lsl #3
	return metal_io_virt_to_phys(io, buf);
   12ba2:	f858 1035 	ldr.w	r1, [r8, r5, lsl #3]
   12ba6:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
   12baa:	f7ff ffd9 	bl	12b60 <metal_io_virt_to_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   12bae:	2300      	movs	r3, #0
   12bb0:	f849 000a 	str.w	r0, [r9, sl]
   12bb4:	6063      	str	r3, [r4, #4]
		dp->len = buf_list[i].len;
   12bb6:	6872      	ldr	r2, [r6, #4]
   12bb8:	60a2      	str	r2, [r4, #8]
		dp->flags = 0;
   12bba:	7323      	strb	r3, [r4, #12]
   12bbc:	7363      	strb	r3, [r4, #13]

		if (i < needed - 1)
   12bbe:	1e7b      	subs	r3, r7, #1
   12bc0:	42ab      	cmp	r3, r5
   12bc2:	dd03      	ble.n	12bcc <vq_ring_add_buffer+0x54>
			dp->flags |= VRING_DESC_F_NEXT;
   12bc4:	2301      	movs	r3, #1
   12bc6:	7323      	strb	r3, [r4, #12]
   12bc8:	2300      	movs	r3, #0
   12bca:	7363      	strb	r3, [r4, #13]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
   12bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12bce:	429d      	cmp	r5, r3
   12bd0:	dbdd      	blt.n	12b8e <vq_ring_add_buffer+0x16>
			dp->flags |= VRING_DESC_F_WRITE;
   12bd2:	89a3      	ldrh	r3, [r4, #12]
   12bd4:	f043 0302 	orr.w	r3, r3, #2
   12bd8:	81a3      	strh	r3, [r4, #12]
   12bda:	e7d8      	b.n	12b8e <vq_ring_add_buffer+0x16>
		VRING_FLUSH(desc[idx]);

	}

	return idx;
}
   12bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012be0 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
   12be0:	b510      	push	{r4, lr}
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	/* CACHE: desc is never written by slave, no need to invalidate */
	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
   12be2:	6984      	ldr	r4, [r0, #24]
   12be4:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	dxp = &vq->vq_descx[desc_idx];

	if (vq->vq_free_cnt == 0) {
   12be8:	f8b0 e024 	ldrh.w	lr, [r0, #36]	; 0x24
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
   12bec:	1d8a      	adds	r2, r1, #6
   12bee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   12bf2:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   12bf6:	44e6      	add	lr, ip
   12bf8:	f8a0 e024 	strh.w	lr, [r0, #36]	; 0x24
	dxp->ndescs--;
   12bfc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   12c00:	f8a2 c008 	strh.w	ip, [r2, #8]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   12c04:	899a      	ldrh	r2, [r3, #12]
   12c06:	f012 0f04 	tst.w	r2, #4
   12c0a:	d00f      	beq.n	12c2c <vq_ring_free_chain+0x4c>
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 *
	 * CACHE: desc.next is never read by slave, no need to flush it.
	 */
	dp->next = vq->vq_desc_head_idx;
   12c0c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   12c0e:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
   12c10:	8581      	strh	r1, [r0, #44]	; 0x2c
}
   12c12:	bd10      	pop	{r4, pc}
			dp = &vq->vq_ring.desc[dp->next];
   12c14:	89db      	ldrh	r3, [r3, #14]
   12c16:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			dxp->ndescs--;
   12c1a:	1d8a      	adds	r2, r1, #6
   12c1c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   12c20:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   12c24:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   12c28:	f8a2 c008 	strh.w	ip, [r2, #8]
		while (dp->flags & VRING_DESC_F_NEXT) {
   12c2c:	899a      	ldrh	r2, [r3, #12]
   12c2e:	f012 0f01 	tst.w	r2, #1
   12c32:	d1ef      	bne.n	12c14 <vq_ring_free_chain+0x34>
   12c34:	e7ea      	b.n	12c0c <vq_ring_free_chain+0x2c>

00012c36 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
   12c36:	b410      	push	{r4}
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
   12c38:	8944      	ldrh	r4, [r0, #10]

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
   12c3a:	6144      	str	r4, [r0, #20]
	vr->desc = (struct vring_desc *)p;
   12c3c:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   12c3e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   12c42:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   12c44:	eb01 0344 	add.w	r3, r1, r4, lsl #1
   12c48:	3304      	adds	r3, #4
   12c4a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
   12c4c:	3301      	adds	r3, #1
   12c4e:	4252      	negs	r2, r2
   12c50:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
   12c52:	6203      	str	r3, [r0, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   12c54:	6803      	ldr	r3, [r0, #0]
   12c56:	699b      	ldr	r3, [r3, #24]
   12c58:	b19b      	cbz	r3, 12c82 <vq_ring_init+0x4c>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_DEVICE_ONLY*/
}
   12c5a:	bc10      	pop	{r4}
   12c5c:	4770      	bx	lr
			vr->desc[i].next = i + 1;
   12c5e:	6982      	ldr	r2, [r0, #24]
   12c60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   12c64:	1c59      	adds	r1, r3, #1
   12c66:	81d1      	strh	r1, [r2, #14]
		for (i = 0; i < size - 1; i++)
   12c68:	460b      	mov	r3, r1
   12c6a:	1e62      	subs	r2, r4, #1
   12c6c:	429a      	cmp	r2, r3
   12c6e:	dcf6      	bgt.n	12c5e <vq_ring_init+0x28>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   12c70:	6982      	ldr	r2, [r0, #24]
   12c72:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   12c76:	2200      	movs	r2, #0
   12c78:	739a      	strb	r2, [r3, #14]
   12c7a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   12c7e:	73da      	strb	r2, [r3, #15]
}
   12c80:	e7eb      	b.n	12c5a <vq_ring_init+0x24>
		for (i = 0; i < size - 1; i++)
   12c82:	2300      	movs	r3, #0
   12c84:	e7f1      	b.n	12c6a <vq_ring_init+0x34>

00012c86 <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   12c86:	6803      	ldr	r3, [r0, #0]
   12c88:	691a      	ldr	r2, [r3, #16]
   12c8a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   12c8e:	d014      	beq.n	12cba <vq_ring_must_notify+0x34>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   12c90:	699b      	ldr	r3, [r3, #24]
   12c92:	b10b      	cbz	r3, 12c98 <vq_ring_must_notify+0x12>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	}

	return 0;
   12c94:	2000      	movs	r0, #0
   12c96:	4770      	bx	lr
			new_idx = vq->vq_ring.avail->idx;
   12c98:	69c3      	ldr	r3, [r0, #28]
   12c9a:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   12c9c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_avail_event(&vq->vq_ring);
   12c9e:	6a01      	ldr	r1, [r0, #32]
   12ca0:	6940      	ldr	r0, [r0, #20]
   12ca2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   12ca6:	8889      	ldrh	r1, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   12ca8:	1a52      	subs	r2, r2, r1
   12caa:	b292      	uxth	r2, r2
   12cac:	3a01      	subs	r2, #1
   12cae:	b292      	uxth	r2, r2
   12cb0:	4293      	cmp	r3, r2
   12cb2:	bf94      	ite	ls
   12cb4:	2000      	movls	r0, #0
   12cb6:	2001      	movhi	r0, #1
						prev_idx) != 0;
   12cb8:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   12cba:	699b      	ldr	r3, [r3, #24]
   12cbc:	b10b      	cbz	r3, 12cc2 <vq_ring_must_notify+0x3c>
	return 0;
   12cbe:	2000      	movs	r0, #0
}
   12cc0:	4770      	bx	lr
			return (vq->vq_ring.used->flags &
   12cc2:	6a03      	ldr	r3, [r0, #32]
   12cc4:	8818      	ldrh	r0, [r3, #0]
				VRING_USED_F_NO_NOTIFY) == 0;
   12cc6:	f080 0001 	eor.w	r0, r0, #1
   12cca:	f000 0001 	and.w	r0, r0, #1
   12cce:	4770      	bx	lr

00012cd0 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
   12cd0:	b508      	push	{r3, lr}
	if (vq->notify)
   12cd2:	6903      	ldr	r3, [r0, #16]
   12cd4:	b103      	cbz	r3, 12cd8 <vq_ring_notify+0x8>
		vq->notify(vq);
   12cd6:	4798      	blx	r3
}
   12cd8:	bd08      	pop	{r3, pc}

00012cda <vq_ring_update_avail>:
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   12cda:	69c2      	ldr	r2, [r0, #28]
   12cdc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   12ce0:	8943      	ldrh	r3, [r0, #10]
   12ce2:	3b01      	subs	r3, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   12ce4:	ea03 030c 	and.w	r3, r3, ip
   12ce8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   12cec:	8091      	strh	r1, [r2, #4]
	atomic_thread_fence(memory_order_seq_cst);
   12cee:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.avail->idx++;
   12cf2:	69c2      	ldr	r2, [r0, #28]
   12cf4:	8853      	ldrh	r3, [r2, #2]
   12cf6:	3301      	adds	r3, #1
   12cf8:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
   12cfa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   12cfc:	3301      	adds	r3, #1
   12cfe:	84c3      	strh	r3, [r0, #38]	; 0x26
}
   12d00:	4770      	bx	lr

00012d02 <virtqueue_create>:
{
   12d02:	b510      	push	{r4, lr}
   12d04:	4604      	mov	r4, r0
   12d06:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
   12d08:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
   12d0a:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
   12d0c:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
   12d0e:	891a      	ldrh	r2, [r3, #8]
   12d10:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   12d12:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
   12d14:	9a02      	ldr	r2, [sp, #8]
   12d16:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
   12d18:	9a03      	ldr	r2, [sp, #12]
   12d1a:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   12d1c:	685a      	ldr	r2, [r3, #4]
   12d1e:	6819      	ldr	r1, [r3, #0]
   12d20:	f7ff ff89 	bl	12c36 <vq_ring_init>
}
   12d24:	2000      	movs	r0, #0
   12d26:	bd10      	pop	{r4, pc}

00012d28 <virtqueue_add_buffer>:
{
   12d28:	b570      	push	{r4, r5, r6, lr}
   12d2a:	b082      	sub	sp, #8
   12d2c:	4604      	mov	r4, r0
	needed = readable + writable;
   12d2e:	18d5      	adds	r5, r2, r3
		head_idx = vq->vq_desc_head_idx;
   12d30:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
		dxp->cookie = cookie;
   12d32:	f106 0c06 	add.w	ip, r6, #6
   12d36:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   12d3a:	f8dd e018 	ldr.w	lr, [sp, #24]
   12d3e:	f8cc e004 	str.w	lr, [ip, #4]
		dxp->ndescs = needed;
   12d42:	b2ad      	uxth	r5, r5
   12d44:	f8ac 5008 	strh.w	r5, [ip, #8]
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   12d48:	9301      	str	r3, [sp, #4]
   12d4a:	9200      	str	r2, [sp, #0]
   12d4c:	460b      	mov	r3, r1
   12d4e:	4632      	mov	r2, r6
   12d50:	6981      	ldr	r1, [r0, #24]
   12d52:	f7ff ff11 	bl	12b78 <vq_ring_add_buffer>
		vq->vq_desc_head_idx = idx;
   12d56:	85a0      	strh	r0, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   12d58:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12d5a:	1b5b      	subs	r3, r3, r5
   12d5c:	84a3      	strh	r3, [r4, #36]	; 0x24
		vq_ring_update_avail(vq, head_idx);
   12d5e:	4631      	mov	r1, r6
   12d60:	4620      	mov	r0, r4
   12d62:	f7ff ffba 	bl	12cda <vq_ring_update_avail>
}
   12d66:	2000      	movs	r0, #0
   12d68:	b002      	add	sp, #8
   12d6a:	bd70      	pop	{r4, r5, r6, pc}

00012d6c <virtqueue_get_buffer>:
{
   12d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   12d6e:	4604      	mov	r4, r0
   12d70:	b310      	cbz	r0, 12db8 <virtqueue_get_buffer+0x4c>
   12d72:	460b      	mov	r3, r1
   12d74:	4617      	mov	r7, r2
   12d76:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   12d78:	6a02      	ldr	r2, [r0, #32]
   12d7a:	8850      	ldrh	r0, [r2, #2]
   12d7c:	4281      	cmp	r1, r0
   12d7e:	d01c      	beq.n	12dba <virtqueue_get_buffer+0x4e>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   12d80:	1c48      	adds	r0, r1, #1
   12d82:	85e0      	strh	r0, [r4, #46]	; 0x2e
   12d84:	8966      	ldrh	r6, [r4, #10]
   12d86:	3e01      	subs	r6, #1
   12d88:	400e      	ands	r6, r1
	atomic_thread_fence(memory_order_seq_cst);
   12d8a:	f3bf 8f5b 	dmb	ish
	desc_idx = (uint16_t)uep->id;
   12d8e:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   12d92:	684d      	ldr	r5, [r1, #4]
   12d94:	b2a9      	uxth	r1, r5
	if (len)
   12d96:	b11b      	cbz	r3, 12da0 <virtqueue_get_buffer+0x34>
		*len = uep->len;
   12d98:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   12d9c:	6892      	ldr	r2, [r2, #8]
   12d9e:	601a      	str	r2, [r3, #0]
	vq_ring_free_chain(vq, desc_idx);
   12da0:	4620      	mov	r0, r4
   12da2:	f7ff ff1d 	bl	12be0 <vq_ring_free_chain>
	cookie = vq->vq_descx[desc_idx].cookie;
   12da6:	b2ad      	uxth	r5, r5
   12da8:	3506      	adds	r5, #6
   12daa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   12dae:	6868      	ldr	r0, [r5, #4]
	vq->vq_descx[desc_idx].cookie = NULL;
   12db0:	2300      	movs	r3, #0
   12db2:	606b      	str	r3, [r5, #4]
	if (idx)
   12db4:	b107      	cbz	r7, 12db8 <virtqueue_get_buffer+0x4c>
		*idx = used_idx;
   12db6:	803e      	strh	r6, [r7, #0]
}
   12db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   12dba:	2000      	movs	r0, #0
   12dbc:	e7fc      	b.n	12db8 <virtqueue_get_buffer+0x4c>

00012dbe <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   12dbe:	6983      	ldr	r3, [r0, #24]
   12dc0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   12dc4:	6898      	ldr	r0, [r3, #8]
   12dc6:	4770      	bx	lr

00012dc8 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   12dc8:	6803      	ldr	r3, [r0, #0]
   12dca:	691a      	ldr	r2, [r3, #16]
   12dcc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   12dd0:	d00c      	beq.n	12dec <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   12dd2:	699b      	ldr	r3, [r3, #24]
   12dd4:	b98b      	cbnz	r3, 12dfa <virtqueue_disable_cb+0x32>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   12dd6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   12dd8:	8942      	ldrh	r2, [r0, #10]
   12dda:	1a9b      	subs	r3, r3, r2
   12ddc:	b29b      	uxth	r3, r3
			vring_used_event(&vq->vq_ring) =
   12dde:	69c2      	ldr	r2, [r0, #28]
   12de0:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   12de2:	3b01      	subs	r3, #1
			vring_used_event(&vq->vq_ring) =
   12de4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   12de8:	8093      	strh	r3, [r2, #4]
   12dea:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   12dec:	699b      	ldr	r3, [r3, #24]
   12dee:	b923      	cbnz	r3, 12dfa <virtqueue_disable_cb+0x32>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   12df0:	69c2      	ldr	r2, [r0, #28]
   12df2:	8813      	ldrh	r3, [r2, #0]
   12df4:	f043 0301 	orr.w	r3, r3, #1
   12df8:	8013      	strh	r3, [r2, #0]
}
   12dfa:	4770      	bx	lr

00012dfc <virtqueue_kick>:
{
   12dfc:	b510      	push	{r4, lr}
   12dfe:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
   12e00:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
   12e04:	f7ff ff3f 	bl	12c86 <vq_ring_must_notify>
   12e08:	b910      	cbnz	r0, 12e10 <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
   12e0a:	2300      	movs	r3, #0
   12e0c:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   12e0e:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
   12e10:	4620      	mov	r0, r4
   12e12:	f7ff ff5d 	bl	12cd0 <vq_ring_notify>
   12e16:	e7f8      	b.n	12e0a <virtqueue_kick+0xe>

00012e18 <virtqueue_notification>:
{
   12e18:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
   12e1a:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   12e1e:	68c3      	ldr	r3, [r0, #12]
   12e20:	b103      	cbz	r3, 12e24 <virtqueue_notification+0xc>
		vq->callback(vq);
   12e22:	4798      	blx	r3
}
   12e24:	bd08      	pop	{r3, pc}

00012e26 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
   12e26:	4684      	mov	ip, r0
   12e28:	4608      	mov	r0, r1
	unsigned int bit;

	for (bit = start;
   12e2a:	e000      	b.n	12e2e <metal_bitmap_next_clear_bit+0x8>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
   12e2c:	3001      	adds	r0, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   12e2e:	4290      	cmp	r0, r2
   12e30:	d208      	bcs.n	12e44 <metal_bitmap_next_clear_bit+0x1e>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   12e32:	0943      	lsrs	r3, r0, #5
   12e34:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   12e38:	f000 011f 	and.w	r1, r0, #31
   12e3c:	40cb      	lsrs	r3, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   12e3e:	f013 0f01 	tst.w	r3, #1
   12e42:	d1f3      	bne.n	12e2c <metal_bitmap_next_clear_bit+0x6>
		;
	return bit;
}
   12e44:	4770      	bx	lr

00012e46 <rpmsg_get_address>:
{
   12e46:	b538      	push	{r3, r4, r5, lr}
   12e48:	4605      	mov	r5, r0
   12e4a:	460c      	mov	r4, r1
	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
   12e4c:	460a      	mov	r2, r1
   12e4e:	2100      	movs	r1, #0
   12e50:	f7ff ffe9 	bl	12e26 <metal_bitmap_next_clear_bit>
	if (nextbit < (uint32_t)size) {
   12e54:	4284      	cmp	r4, r0
   12e56:	d90e      	bls.n	12e76 <rpmsg_get_address+0x30>
   12e58:	4603      	mov	r3, r0
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   12e5a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   12e5e:	095c      	lsrs	r4, r3, #5
   12e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   12e64:	f003 031f 	and.w	r3, r3, #31
   12e68:	2101      	movs	r1, #1
   12e6a:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   12e6e:	431a      	orrs	r2, r3
   12e70:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
}
   12e74:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int addr = RPMSG_ADDR_ANY;
   12e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return addr;
   12e7a:	e7fb      	b.n	12e74 <rpmsg_get_address+0x2e>

00012e7c <rpmsg_release_address>:
	if (addr >= 0 && addr < size)
   12e7c:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   12e80:	d40e      	bmi.n	12ea0 <rpmsg_release_address+0x24>
   12e82:	428a      	cmp	r2, r1
   12e84:	da0c      	bge.n	12ea0 <rpmsg_release_address+0x24>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   12e86:	ea4f 1c52 	mov.w	ip, r2, lsr #5
   12e8a:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   12e8e:	f002 021f 	and.w	r2, r2, #31
   12e92:	2101      	movs	r1, #1
   12e94:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   12e98:	ea23 0302 	bic.w	r3, r3, r2
   12e9c:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
}
   12ea0:	4770      	bx	lr

00012ea2 <__metal_mutex_acquire>:

	return ret;
}

static inline void __metal_mutex_acquire(metal_mutex_t *m)
{
   12ea2:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   12ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eac:	f7fa f864 	bl	cf78 <z_impl_k_sem_take>
	k_sem_take(m, K_FOREVER);
}
   12eb0:	bd08      	pop	{r3, pc}

00012eb2 <rpmsg_unregister_endpoint>:
{
   12eb2:	b570      	push	{r4, r5, r6, lr}
   12eb4:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   12eb6:	6a06      	ldr	r6, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   12eb8:	f106 0558 	add.w	r5, r6, #88	; 0x58
   12ebc:	4628      	mov	r0, r5
   12ebe:	f7ff fff0 	bl	12ea2 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   12ec2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12ec4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   12ec8:	d10e      	bne.n	12ee8 <rpmsg_unregister_endpoint+0x36>
	metal_list_del(&ept->node);
   12eca:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   12ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12ed0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   12ed2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   12ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12ed6:	6011      	str	r1, [r2, #0]
	node->prev = node;
   12ed8:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
   12eda:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   12edc:	2300      	movs	r3, #0
   12ede:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   12ee0:	4628      	mov	r0, r5
   12ee2:	f7fa f805 	bl	cef0 <z_impl_k_sem_give>
}
   12ee6:	bd70      	pop	{r4, r5, r6, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   12ee8:	2180      	movs	r1, #128	; 0x80
   12eea:	f106 0048 	add.w	r0, r6, #72	; 0x48
   12eee:	f7ff ffc5 	bl	12e7c <rpmsg_release_address>
   12ef2:	e7ea      	b.n	12eca <rpmsg_unregister_endpoint+0x18>

00012ef4 <rpmsg_send_ns_message>:
{
   12ef4:	b510      	push	{r4, lr}
   12ef6:	b08c      	sub	sp, #48	; 0x30
   12ef8:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   12efa:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
   12efc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   12efe:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   12f00:	2220      	movs	r2, #32
   12f02:	4601      	mov	r1, r0
   12f04:	a802      	add	r0, sp, #8
   12f06:	f7fe f9be 	bl	11286 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   12f0a:	2301      	movs	r3, #1
   12f0c:	9301      	str	r3, [sp, #4]
   12f0e:	2328      	movs	r3, #40	; 0x28
   12f10:	9300      	str	r3, [sp, #0]
   12f12:	ab02      	add	r3, sp, #8
   12f14:	2235      	movs	r2, #53	; 0x35
   12f16:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12f18:	4620      	mov	r0, r4
   12f1a:	f7f8 fbf3 	bl	b704 <rpmsg_send_offchannel_raw>
	if (ret < 0)
   12f1e:	2800      	cmp	r0, #0
   12f20:	db00      	blt.n	12f24 <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
   12f22:	2000      	movs	r0, #0
}
   12f24:	b00c      	add	sp, #48	; 0x30
   12f26:	bd10      	pop	{r4, pc}

00012f28 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   12f28:	b138      	cbz	r0, 12f3a <rpmsg_hold_rx_buffer+0x12>
{
   12f2a:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   12f2c:	6a00      	ldr	r0, [r0, #32]
   12f2e:	b118      	cbz	r0, 12f38 <rpmsg_hold_rx_buffer+0x10>
   12f30:	b111      	cbz	r1, 12f38 <rpmsg_hold_rx_buffer+0x10>
	if (rdev->ops.hold_rx_buffer)
   12f32:	6f03      	ldr	r3, [r0, #112]	; 0x70
   12f34:	b103      	cbz	r3, 12f38 <rpmsg_hold_rx_buffer+0x10>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   12f36:	4798      	blx	r3
}
   12f38:	bd08      	pop	{r3, pc}
   12f3a:	4770      	bx	lr

00012f3c <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   12f3c:	b138      	cbz	r0, 12f4e <rpmsg_release_rx_buffer+0x12>
{
   12f3e:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   12f40:	6a00      	ldr	r0, [r0, #32]
   12f42:	b118      	cbz	r0, 12f4c <rpmsg_release_rx_buffer+0x10>
   12f44:	b111      	cbz	r1, 12f4c <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   12f46:	6f43      	ldr	r3, [r0, #116]	; 0x74
   12f48:	b103      	cbz	r3, 12f4c <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   12f4a:	4798      	blx	r3
}
   12f4c:	bd08      	pop	{r3, pc}
   12f4e:	4770      	bx	lr

00012f50 <rpmsg_get_tx_payload_buffer>:
{
   12f50:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !len)
   12f52:	b128      	cbz	r0, 12f60 <rpmsg_get_tx_payload_buffer+0x10>
   12f54:	6a00      	ldr	r0, [r0, #32]
   12f56:	b118      	cbz	r0, 12f60 <rpmsg_get_tx_payload_buffer+0x10>
   12f58:	b119      	cbz	r1, 12f62 <rpmsg_get_tx_payload_buffer+0x12>
	if (rdev->ops.get_tx_payload_buffer)
   12f5a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   12f5c:	b11b      	cbz	r3, 12f66 <rpmsg_get_tx_payload_buffer+0x16>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   12f5e:	4798      	blx	r3
}
   12f60:	bd08      	pop	{r3, pc}
		return NULL;
   12f62:	4608      	mov	r0, r1
   12f64:	e7fc      	b.n	12f60 <rpmsg_get_tx_payload_buffer+0x10>
	return NULL;
   12f66:	2000      	movs	r0, #0
   12f68:	e7fa      	b.n	12f60 <rpmsg_get_tx_payload_buffer+0x10>

00012f6a <rpmsg_get_endpoint>:
{
   12f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f6e:	4680      	mov	r8, r0
   12f70:	460f      	mov	r7, r1
   12f72:	4616      	mov	r6, r2
   12f74:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   12f76:	6804      	ldr	r4, [r0, #0]
   12f78:	e003      	b.n	12f82 <rpmsg_get_endpoint+0x18>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   12f7a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   12f7e:	d01a      	beq.n	12fb6 <rpmsg_get_endpoint+0x4c>
	metal_list_for_each(&rdev->endpoints, node) {
   12f80:	6824      	ldr	r4, [r4, #0]
   12f82:	45a0      	cmp	r8, r4
   12f84:	d01c      	beq.n	12fc0 <rpmsg_get_endpoint+0x56>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   12f86:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   12f8a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   12f8e:	d002      	beq.n	12f96 <rpmsg_get_endpoint+0x2c>
   12f90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   12f92:	42b2      	cmp	r2, r6
   12f94:	d015      	beq.n	12fc2 <rpmsg_get_endpoint+0x58>
		if (name)
   12f96:	2f00      	cmp	r7, #0
   12f98:	d0f2      	beq.n	12f80 <rpmsg_get_endpoint+0x16>
			name_match = !strncmp(ept->name, name,
   12f9a:	2220      	movs	r2, #32
   12f9c:	4639      	mov	r1, r7
   12f9e:	4628      	mov	r0, r5
   12fa0:	f7fe f9a9 	bl	112f6 <strncmp>
		if (!name || !name_match)
   12fa4:	2800      	cmp	r0, #0
   12fa6:	d1eb      	bne.n	12f80 <rpmsg_get_endpoint+0x16>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   12fa8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   12fac:	d0e5      	beq.n	12f7a <rpmsg_get_endpoint+0x10>
   12fae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12fb0:	454b      	cmp	r3, r9
   12fb2:	d1e2      	bne.n	12f7a <rpmsg_get_endpoint+0x10>
   12fb4:	e005      	b.n	12fc2 <rpmsg_get_endpoint+0x58>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   12fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12fbc:	d1e0      	bne.n	12f80 <rpmsg_get_endpoint+0x16>
   12fbe:	e000      	b.n	12fc2 <rpmsg_get_endpoint+0x58>
	return NULL;
   12fc0:	2500      	movs	r5, #0
}
   12fc2:	4628      	mov	r0, r5
   12fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012fc8 <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
   12fc8:	b1a0      	cbz	r0, 12ff4 <rpmsg_destroy_ept+0x2c>
{
   12fca:	b510      	push	{r4, lr}
   12fcc:	4604      	mov	r4, r0
		return;

	rdev = ept->rdev;
   12fce:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   12fd0:	b15b      	cbz	r3, 12fea <rpmsg_destroy_ept+0x22>
		return;

	if (ept->name[0] && rdev->support_ns &&
   12fd2:	7802      	ldrb	r2, [r0, #0]
   12fd4:	b132      	cbz	r2, 12fe4 <rpmsg_destroy_ept+0x1c>
   12fd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   12fda:	b11b      	cbz	r3, 12fe4 <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
   12fdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
   12fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12fe2:	d203      	bcs.n	12fec <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
   12fe4:	4620      	mov	r0, r4
   12fe6:	f7ff ff64 	bl	12eb2 <rpmsg_unregister_endpoint>
}
   12fea:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   12fec:	2101      	movs	r1, #1
   12fee:	f7ff ff81 	bl	12ef4 <rpmsg_send_ns_message>
   12ff2:	e7f7      	b.n	12fe4 <rpmsg_destroy_ept+0x1c>
   12ff4:	4770      	bx	lr

00012ff6 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   12ff6:	f851 3c08 	ldr.w	r3, [r1, #-8]
   12ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12ffe:	f841 3c08 	str.w	r3, [r1, #-8]
}
   13002:	4770      	bx	lr

00013004 <rpmsg_virtio_tx_callback>:
}
   13004:	4770      	bx	lr

00013006 <__metal_mutex_acquire>:
{
   13006:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   13008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1300c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13010:	f7f9 ffb2 	bl	cf78 <z_impl_k_sem_take>
}
   13014:	bd08      	pop	{r3, pc}

00013016 <rpmsg_virtio_return_buffer>:
	return rvdev->vdev->role;
   13016:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   1301a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1301c:	b103      	cbz	r3, 13020 <rpmsg_virtio_return_buffer+0xa>
   1301e:	4770      	bx	lr
{
   13020:	b500      	push	{lr}
   13022:	b085      	sub	sp, #20
		vqbuf.buf = buffer;
   13024:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   13026:	9203      	str	r2, [sp, #12]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   13028:	9100      	str	r1, [sp, #0]
   1302a:	2301      	movs	r3, #1
   1302c:	2200      	movs	r2, #0
   1302e:	a902      	add	r1, sp, #8
   13030:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   13034:	f7ff fe78 	bl	12d28 <virtqueue_add_buffer>
}
   13038:	b005      	add	sp, #20
   1303a:	f85d fb04 	ldr.w	pc, [sp], #4

0001303e <rpmsg_virtio_enqueue_buffer>:
   1303e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   13042:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   13044:	b10b      	cbz	r3, 1304a <rpmsg_virtio_enqueue_buffer+0xc>
	return 0;
   13046:	2000      	movs	r0, #0
}
   13048:	4770      	bx	lr
{
   1304a:	b500      	push	{lr}
   1304c:	b085      	sub	sp, #20
		vqbuf.buf = buffer;
   1304e:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   13050:	9203      	str	r2, [sp, #12]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   13052:	9100      	str	r1, [sp, #0]
   13054:	2201      	movs	r2, #1
   13056:	a902      	add	r1, sp, #8
   13058:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1305c:	f7ff fe64 	bl	12d28 <virtqueue_add_buffer>
}
   13060:	b005      	add	sp, #20
   13062:	f85d fb04 	ldr.w	pc, [sp], #4

00013066 <rpmsg_virtio_ns_callback>:
{
   13066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1306a:	b088      	sub	sp, #32
	struct rpmsg_device *rdev = ept->rdev;
   1306c:	6a05      	ldr	r5, [r0, #32]
	struct metal_io_region *io = rvdev->shbuf_io;
   1306e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
	if (len != sizeof(*ns_msg))
   13072:	2a28      	cmp	r2, #40	; 0x28
   13074:	d132      	bne.n	130dc <rpmsg_virtio_ns_callback+0x76>
   13076:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   13078:	6801      	ldr	r1, [r0, #0]
   1307a:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1307c:	6883      	ldr	r3, [r0, #8]
   1307e:	4299      	cmp	r1, r3
   13080:	d223      	bcs.n	130ca <rpmsg_virtio_ns_callback+0x64>
	metal_io_block_read(io,
   13082:	2320      	movs	r3, #32
   13084:	466a      	mov	r2, sp
   13086:	f7ff fc78 	bl	1297a <metal_io_block_read>
	dest = ns_msg->addr;
   1308a:	f8d4 8020 	ldr.w	r8, [r4, #32]
	metal_mutex_acquire(&rdev->lock);
   1308e:	f105 0758 	add.w	r7, r5, #88	; 0x58
   13092:	4638      	mov	r0, r7
   13094:	f7ff ffb7 	bl	13006 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   13098:	4643      	mov	r3, r8
   1309a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1309e:	4669      	mov	r1, sp
   130a0:	4628      	mov	r0, r5
   130a2:	f7ff ff62 	bl	12f6a <rpmsg_get_endpoint>
   130a6:	4606      	mov	r6, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   130a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   130aa:	f013 0f01 	tst.w	r3, #1
   130ae:	d00f      	beq.n	130d0 <rpmsg_virtio_ns_callback+0x6a>
		if (_ept)
   130b0:	b110      	cbz	r0, 130b8 <rpmsg_virtio_ns_callback+0x52>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   130b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130b6:	6283      	str	r3, [r0, #40]	; 0x28
	z_impl_k_sem_give(sem);
   130b8:	4638      	mov	r0, r7
   130ba:	f7f9 ff19 	bl	cef0 <z_impl_k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   130be:	b16e      	cbz	r6, 130dc <rpmsg_virtio_ns_callback+0x76>
   130c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
   130c2:	b15b      	cbz	r3, 130dc <rpmsg_virtio_ns_callback+0x76>
			_ept->ns_unbind_cb(_ept);
   130c4:	4630      	mov	r0, r6
   130c6:	4798      	blx	r3
   130c8:	e008      	b.n	130dc <rpmsg_virtio_ns_callback+0x76>
   130ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130ce:	e7d8      	b.n	13082 <rpmsg_virtio_ns_callback+0x1c>
		if (!_ept) {
   130d0:	b140      	cbz	r0, 130e4 <rpmsg_virtio_ns_callback+0x7e>
			_ept->dest_addr = dest;
   130d2:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   130d6:	4638      	mov	r0, r7
   130d8:	f7f9 ff0a 	bl	cef0 <z_impl_k_sem_give>
}
   130dc:	2000      	movs	r0, #0
   130de:	b008      	add	sp, #32
   130e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130e4:	4638      	mov	r0, r7
   130e6:	f7f9 ff03 	bl	cef0 <z_impl_k_sem_give>
			if (rdev->ns_bind_cb)
   130ea:	6eab      	ldr	r3, [r5, #104]	; 0x68
   130ec:	2b00      	cmp	r3, #0
   130ee:	d0f5      	beq.n	130dc <rpmsg_virtio_ns_callback+0x76>
				rdev->ns_bind_cb(rdev, name, dest);
   130f0:	4642      	mov	r2, r8
   130f2:	4669      	mov	r1, sp
   130f4:	4628      	mov	r0, r5
   130f6:	4798      	blx	r3
   130f8:	e7f0      	b.n	130dc <rpmsg_virtio_ns_callback+0x76>

000130fa <rpmsg_virtio_get_rx_buffer>:
{
   130fa:	b508      	push	{r3, lr}
   130fc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   13100:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   13102:	b923      	cbnz	r3, 1310e <rpmsg_virtio_get_rx_buffer+0x14>
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   13104:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   13108:	f7ff fe30 	bl	12d6c <virtqueue_get_buffer>
}
   1310c:	bd08      	pop	{r3, pc}
	void *data = NULL;
   1310e:	2000      	movs	r0, #0
	return data;
   13110:	e7fc      	b.n	1310c <rpmsg_virtio_get_rx_buffer+0x12>

00013112 <rpmsg_virtio_release_rx_buffer>:
{
   13112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13114:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
   13116:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1311a:	f851 5c08 	ldr.w	r5, [r1, #-8]
   1311e:	b2ad      	uxth	r5, r5
	metal_mutex_acquire(&rdev->lock);
   13120:	f100 0658 	add.w	r6, r0, #88	; 0x58
   13124:	4630      	mov	r0, r6
   13126:	f7ff ff6e 	bl	13006 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1312a:	4629      	mov	r1, r5
   1312c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   13130:	f7ff fe45 	bl	12dbe <virtqueue_get_buffer_length>
   13134:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   13136:	462b      	mov	r3, r5
   13138:	4639      	mov	r1, r7
   1313a:	4620      	mov	r0, r4
   1313c:	f7ff ff6b 	bl	13016 <rpmsg_virtio_return_buffer>
   13140:	4630      	mov	r0, r6
   13142:	f7f9 fed5 	bl	cef0 <z_impl_k_sem_give>
}
   13146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013148 <rpmsg_virtio_shm_pool_get_buffer>:
{
   13148:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1314a:	6842      	ldr	r2, [r0, #4]
   1314c:	428a      	cmp	r2, r1
   1314e:	d308      	bcc.n	13162 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   13150:	6800      	ldr	r0, [r0, #0]
   13152:	f8d3 c008 	ldr.w	ip, [r3, #8]
   13156:	ebac 0c02 	sub.w	ip, ip, r2
   1315a:	4460      	add	r0, ip
	shpool->avail -= size;
   1315c:	1a52      	subs	r2, r2, r1
   1315e:	605a      	str	r2, [r3, #4]
	return buffer;
   13160:	4770      	bx	lr
		return NULL;
   13162:	2000      	movs	r0, #0
}
   13164:	4770      	bx	lr

00013166 <rpmsg_virtio_get_tx_buffer>:
   13166:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   1316a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1316c:	b9d3      	cbnz	r3, 131a4 <rpmsg_virtio_get_tx_buffer+0x3e>
{
   1316e:	b570      	push	{r4, r5, r6, lr}
   13170:	4604      	mov	r4, r0
   13172:	460e      	mov	r6, r1
   13174:	4615      	mov	r5, r2
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   13176:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1317a:	f7ff fdf7 	bl	12d6c <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1317e:	b100      	cbz	r0, 13182 <rpmsg_virtio_get_tx_buffer+0x1c>
}
   13180:	bd70      	pop	{r4, r5, r6, pc}
		if (!data && rvdev->svq->vq_free_cnt) {
   13182:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   13186:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13188:	2b00      	cmp	r3, #0
   1318a:	d0f9      	beq.n	13180 <rpmsg_virtio_get_tx_buffer+0x1a>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1318c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   13190:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   13194:	f7ff ffd8 	bl	13148 <rpmsg_virtio_shm_pool_get_buffer>
			*len = rvdev->config.h2r_buf_size;
   13198:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1319c:	6033      	str	r3, [r6, #0]
			*idx = 0;
   1319e:	2300      	movs	r3, #0
   131a0:	802b      	strh	r3, [r5, #0]
   131a2:	e7ed      	b.n	13180 <rpmsg_virtio_get_tx_buffer+0x1a>
	void *data = NULL;
   131a4:	2000      	movs	r0, #0
}
   131a6:	4770      	bx	lr

000131a8 <rpmsg_virtio_get_tx_payload_buffer>:
{
   131a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131ac:	b082      	sub	sp, #8
   131ae:	4607      	mov	r7, r0
   131b0:	4688      	mov	r8, r1
   131b2:	4615      	mov	r5, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
   131b4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   131b8:	6a03      	ldr	r3, [r0, #32]
   131ba:	681b      	ldr	r3, [r3, #0]
   131bc:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   131be:	f010 0f04 	tst.w	r0, #4
   131c2:	d027      	beq.n	13214 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
	if (wait)
   131c4:	b10d      	cbz	r5, 131ca <rpmsg_virtio_get_tx_payload_buffer+0x22>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   131c6:	f643 2598 	movw	r5, #15000	; 0x3a98
		metal_mutex_acquire(&rdev->lock);
   131ca:	f107 0658 	add.w	r6, r7, #88	; 0x58
   131ce:	4630      	mov	r0, r6
   131d0:	f7ff ff19 	bl	13006 <__metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
   131d4:	f10d 0206 	add.w	r2, sp, #6
   131d8:	4641      	mov	r1, r8
   131da:	4638      	mov	r0, r7
   131dc:	f7ff ffc3 	bl	13166 <rpmsg_virtio_get_tx_buffer>
   131e0:	4604      	mov	r4, r0
   131e2:	4630      	mov	r0, r6
   131e4:	f7f9 fe84 	bl	cef0 <z_impl_k_sem_give>
		if (rp_hdr || !tick_count)
   131e8:	b934      	cbnz	r4, 131f8 <rpmsg_virtio_get_tx_payload_buffer+0x50>
   131ea:	b12d      	cbz	r5, 131f8 <rpmsg_virtio_get_tx_payload_buffer+0x50>
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
	return __metal_sleep_usec(usec);
   131ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   131f0:	f7f8 fc3c 	bl	ba6c <__metal_sleep_usec>
		tick_count--;
   131f4:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
   131f6:	e7e8      	b.n	131ca <rpmsg_virtio_get_tx_payload_buffer+0x22>
	if (!rp_hdr)
   131f8:	b144      	cbz	r4, 1320c <rpmsg_virtio_get_tx_payload_buffer+0x64>
	rp_hdr->reserved = idx;
   131fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   131fe:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   13200:	f8d8 3000 	ldr.w	r3, [r8]
   13204:	3b10      	subs	r3, #16
   13206:	f8c8 3000 	str.w	r3, [r8]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1320a:	3410      	adds	r4, #16
}
   1320c:	4620      	mov	r0, r4
   1320e:	b002      	add	sp, #8
   13210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   13214:	2400      	movs	r4, #0
   13216:	e7f9      	b.n	1320c <rpmsg_virtio_get_tx_payload_buffer+0x64>

00013218 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   13218:	b110      	cbz	r0, 13220 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->base = shb;
   1321a:	6001      	str	r1, [r0, #0]
	shpool->size = size;
   1321c:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
   1321e:	6042      	str	r2, [r0, #4]
}
   13220:	4770      	bx	lr

00013222 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   13222:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   13224:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   13226:	4293      	cmp	r3, r2
   13228:	d804      	bhi.n	13234 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1322a:	6881      	ldr	r1, [r0, #8]
   1322c:	1a8a      	subs	r2, r1, r2
   1322e:	4413      	add	r3, r2
   13230:	1e58      	subs	r0, r3, #1
   13232:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   13234:	1a98      	subs	r0, r3, r2
   13236:	3801      	subs	r0, #1
}
   13238:	4770      	bx	lr

0001323a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1323a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1323e:	4604      	mov	r4, r0
   13240:	4688      	mov	r8, r1
   13242:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   13244:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   13246:	6887      	ldr	r7, [r0, #8]
   13248:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   1324c:	4591      	cmp	r9, r2
   1324e:	d907      	bls.n	13260 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   13250:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   13252:	4428      	add	r0, r5
   13254:	f7fe f862 	bl	1131c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   13258:	4435      	add	r5, r6
   1325a:	60e5      	str	r5, [r4, #12]
}
   1325c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   13260:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   13262:	464a      	mov	r2, r9
   13264:	4428      	add	r0, r5
   13266:	f7fe f859 	bl	1131c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1326a:	1bed      	subs	r5, r5, r7
   1326c:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1326e:	462a      	mov	r2, r5
   13270:	eb08 0109 	add.w	r1, r8, r9
   13274:	6860      	ldr	r0, [r4, #4]
   13276:	f7fe f851 	bl	1131c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1327a:	60e5      	str	r5, [r4, #12]
}
   1327c:	e7ee      	b.n	1325c <_WriteNoCheck+0x22>

0001327e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1327e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13282:	4606      	mov	r6, r0
   13284:	4688      	mov	r8, r1
   13286:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   13288:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   1328a:	f04f 0900 	mov.w	r9, #0
   1328e:	e018      	b.n	132c2 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   13290:	1b5b      	subs	r3, r3, r5
   13292:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   13294:	68b3      	ldr	r3, [r6, #8]
   13296:	1b5c      	subs	r4, r3, r5
   13298:	4294      	cmp	r4, r2
   1329a:	bf28      	it	cs
   1329c:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1329e:	42bc      	cmp	r4, r7
   132a0:	bf28      	it	cs
   132a2:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   132a4:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   132a6:	4622      	mov	r2, r4
   132a8:	4641      	mov	r1, r8
   132aa:	4428      	add	r0, r5
   132ac:	f7fe f836 	bl	1131c <memcpy>
    NumBytesWritten += NumBytesToWrite;
   132b0:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   132b2:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   132b4:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   132b6:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   132b8:	68b3      	ldr	r3, [r6, #8]
   132ba:	42ab      	cmp	r3, r5
   132bc:	d009      	beq.n	132d2 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   132be:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   132c0:	b14f      	cbz	r7, 132d6 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   132c2:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
   132c4:	429d      	cmp	r5, r3
   132c6:	d3e3      	bcc.n	13290 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   132c8:	68b2      	ldr	r2, [r6, #8]
   132ca:	1b5b      	subs	r3, r3, r5
   132cc:	441a      	add	r2, r3
   132ce:	3a01      	subs	r2, #1
   132d0:	e7e0      	b.n	13294 <_WriteBlocking+0x16>
      WrOff = 0u;
   132d2:	2500      	movs	r5, #0
   132d4:	e7f3      	b.n	132be <_WriteBlocking+0x40>
}
   132d6:	4648      	mov	r0, r9
   132d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000132dc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   132dc:	b508      	push	{r3, lr}
  _DoInit();
   132de:	f7f8 fd35 	bl	bd4c <_DoInit>
}
   132e2:	bd08      	pop	{r3, pc}

000132e4 <rtt_init>:
{
   132e4:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   132e6:	f7ff fff9 	bl	132dc <SEGGER_RTT_Init>
}
   132ea:	2000      	movs	r0, #0
   132ec:	bd08      	pop	{r3, pc}

000132ee <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   132ee:	b148      	cbz	r0, 13304 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   132f0:	68c3      	ldr	r3, [r0, #12]
   132f2:	8818      	ldrh	r0, [r3, #0]
   132f4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   132f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   132fc:	bf14      	ite	ne
   132fe:	2000      	movne	r0, #0
   13300:	2001      	moveq	r0, #1
   13302:	4770      	bx	lr
		return false;
   13304:	2000      	movs	r0, #0
}
   13306:	4770      	bx	lr

00013308 <arch_system_halt>:
	__asm__ volatile(
   13308:	f04f 0220 	mov.w	r2, #32
   1330c:	f3ef 8311 	mrs	r3, BASEPRI
   13310:	f382 8812 	msr	BASEPRI_MAX, r2
   13314:	f3bf 8f6f 	isb	sy
	for (;;) {
   13318:	e7fe      	b.n	13318 <arch_system_halt+0x10>

0001331a <z_early_memset>:
{
   1331a:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   1331c:	f7fe f82d 	bl	1137a <memset>
}
   13320:	bd08      	pop	{r3, pc}

00013322 <z_early_memcpy>:
{
   13322:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   13324:	f7fd fffa 	bl	1131c <memcpy>
}
   13328:	bd08      	pop	{r3, pc}

0001332a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1332a:	6902      	ldr	r2, [r0, #16]
   1332c:	6943      	ldr	r3, [r0, #20]
   1332e:	431a      	orrs	r2, r3
   13330:	f012 0203 	ands.w	r2, r2, #3
   13334:	d10d      	bne.n	13352 <create_free_list+0x28>
	slab->free_list = NULL;
   13336:	2100      	movs	r1, #0
   13338:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1333a:	e005      	b.n	13348 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1333c:	6981      	ldr	r1, [r0, #24]
   1333e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   13340:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   13342:	6901      	ldr	r1, [r0, #16]
   13344:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   13346:	3201      	adds	r2, #1
   13348:	68c1      	ldr	r1, [r0, #12]
   1334a:	4291      	cmp	r1, r2
   1334c:	d8f6      	bhi.n	1333c <create_free_list+0x12>
	return 0;
   1334e:	2000      	movs	r0, #0
   13350:	4770      	bx	lr
		return -EINVAL;
   13352:	f06f 0015 	mvn.w	r0, #21
}
   13356:	4770      	bx	lr

00013358 <k_mem_slab_init>:
{
   13358:	b510      	push	{r4, lr}
   1335a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1335c:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   1335e:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   13360:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   13362:	2300      	movs	r3, #0
   13364:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   13366:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   13368:	f7ff ffdf 	bl	1332a <create_free_list>
	if (rc < 0) {
   1336c:	2800      	cmp	r0, #0
   1336e:	db01      	blt.n	13374 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   13370:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   13372:	6064      	str	r4, [r4, #4]
}
   13374:	bd10      	pop	{r4, pc}

00013376 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13376:	3207      	adds	r2, #7
   13378:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1337c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   13380:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   13384:	2300      	movs	r3, #0
   13386:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   1338a:	1888      	adds	r0, r1, r2
   1338c:	4770      	bx	lr

0001338e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1338e:	f3ef 8005 	mrs	r0, IPSR
}
   13392:	3800      	subs	r0, #0
   13394:	bf18      	it	ne
   13396:	2001      	movne	r0, #1
   13398:	4770      	bx	lr

0001339a <k_thread_name_get>:
}
   1339a:	3074      	adds	r0, #116	; 0x74
   1339c:	4770      	bx	lr

0001339e <z_impl_k_thread_start>:
{
   1339e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   133a0:	f7fa fd68 	bl	de74 <z_sched_start>
}
   133a4:	bd08      	pop	{r3, pc}

000133a6 <z_init_thread_base>:
{
   133a6:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   133a8:	2400      	movs	r4, #0
   133aa:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   133ac:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   133ae:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   133b0:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   133b2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   133b4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   133b6:	61c4      	str	r4, [r0, #28]
}
   133b8:	bc10      	pop	{r4}
   133ba:	4770      	bx	lr

000133bc <z_pm_save_idle_exit>:
{
   133bc:	b508      	push	{r3, lr}
	pm_system_resume();
   133be:	f7f1 f92f 	bl	4620 <pm_system_resume>
	sys_clock_idle_exit();
   133c2:	f7fe fd15 	bl	11df0 <sys_clock_idle_exit>
}
   133c6:	bd08      	pop	{r3, pc}

000133c8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   133c8:	4288      	cmp	r0, r1
   133ca:	da00      	bge.n	133ce <new_prio_for_inheritance+0x6>
   133cc:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   133ce:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   133d2:	db01      	blt.n	133d8 <new_prio_for_inheritance+0x10>
   133d4:	4608      	mov	r0, r1
   133d6:	4770      	bx	lr
   133d8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   133dc:	4770      	bx	lr

000133de <adjust_owner_prio>:
{
   133de:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   133e0:	6880      	ldr	r0, [r0, #8]
   133e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   133e6:	428b      	cmp	r3, r1
   133e8:	d101      	bne.n	133ee <adjust_owner_prio+0x10>
	return false;
   133ea:	2000      	movs	r0, #0
}
   133ec:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   133ee:	f7fa fef5 	bl	e1dc <z_set_prio>
   133f2:	e7fb      	b.n	133ec <adjust_owner_prio+0xe>

000133f4 <z_impl_k_mutex_init>:
{
   133f4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   133f6:	2000      	movs	r0, #0
   133f8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   133fa:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   133fc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   133fe:	605b      	str	r3, [r3, #4]
}
   13400:	4770      	bx	lr

00013402 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   13402:	b13a      	cbz	r2, 13414 <z_impl_k_sem_init+0x12>
   13404:	428a      	cmp	r2, r1
   13406:	d308      	bcc.n	1341a <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   13408:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1340a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1340c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1340e:	6040      	str	r0, [r0, #4]
	return 0;
   13410:	2000      	movs	r0, #0
   13412:	4770      	bx	lr
		return -EINVAL;
   13414:	f06f 0015 	mvn.w	r0, #21
   13418:	4770      	bx	lr
   1341a:	f06f 0015 	mvn.w	r0, #21
}
   1341e:	4770      	bx	lr

00013420 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   13420:	460b      	mov	r3, r1
   13422:	b139      	cbz	r1, 13434 <sys_slist_remove+0x14>
	return node->next;
   13424:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   13426:	6019      	str	r1, [r3, #0]
	return list->tail;
   13428:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1342a:	428a      	cmp	r2, r1
   1342c:	d009      	beq.n	13442 <sys_slist_remove+0x22>
	parent->next = child;
   1342e:	2300      	movs	r3, #0
   13430:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13432:	4770      	bx	lr
	return node->next;
   13434:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   13436:	6003      	str	r3, [r0, #0]
	return list->tail;
   13438:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1343a:	428a      	cmp	r2, r1
   1343c:	d1f7      	bne.n	1342e <sys_slist_remove+0xe>
	list->tail = node;
   1343e:	6043      	str	r3, [r0, #4]
}
   13440:	e7f5      	b.n	1342e <sys_slist_remove+0xe>
	list->tail = node;
   13442:	6043      	str	r3, [r0, #4]
}
   13444:	e7f3      	b.n	1342e <sys_slist_remove+0xe>

00013446 <notify_queue_locked>:
	if (queue != NULL) {
   13446:	b130      	cbz	r0, 13456 <notify_queue_locked+0x10>
{
   13448:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1344a:	2200      	movs	r2, #0
   1344c:	4611      	mov	r1, r2
   1344e:	30b8      	adds	r0, #184	; 0xb8
   13450:	f7fb fc06 	bl	ec60 <z_sched_wake>
}
   13454:	bd08      	pop	{r3, pc}
	bool rv = false;
   13456:	2000      	movs	r0, #0
}
   13458:	4770      	bx	lr

0001345a <z_reschedule_unlocked>:
{
   1345a:	b508      	push	{r3, lr}
   1345c:	f04f 0320 	mov.w	r3, #32
   13460:	f3ef 8011 	mrs	r0, BASEPRI
   13464:	f383 8812 	msr	BASEPRI_MAX, r3
   13468:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1346c:	f000 f817 	bl	1349e <z_reschedule_irqlock>
}
   13470:	bd08      	pop	{r3, pc}

00013472 <k_work_submit_to_queue>:
{
   13472:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   13474:	f7f9 ffec 	bl	d450 <z_work_submit_to_queue>
	if (ret > 0) {
   13478:	1e04      	subs	r4, r0, #0
   1347a:	dc01      	bgt.n	13480 <k_work_submit_to_queue+0xe>
}
   1347c:	4620      	mov	r0, r4
   1347e:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   13480:	f7ff ffeb 	bl	1345a <z_reschedule_unlocked>
	return ret;
   13484:	e7fa      	b.n	1347c <k_work_submit_to_queue+0xa>

00013486 <thread_active_elsewhere>:
}
   13486:	2000      	movs	r0, #0
   13488:	4770      	bx	lr

0001348a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1348a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1348e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   13492:	4283      	cmp	r3, r0
   13494:	d001      	beq.n	1349a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   13496:	1ac0      	subs	r0, r0, r3
   13498:	4770      	bx	lr
	return 0;
   1349a:	2000      	movs	r0, #0
}
   1349c:	4770      	bx	lr

0001349e <z_reschedule_irqlock>:
{
   1349e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   134a0:	4603      	mov	r3, r0
   134a2:	b928      	cbnz	r0, 134b0 <z_reschedule_irqlock+0x12>
   134a4:	f3ef 8205 	mrs	r2, IPSR
   134a8:	b912      	cbnz	r2, 134b0 <z_reschedule_irqlock+0x12>
   134aa:	f7f1 fca3 	bl	4df4 <arch_swap>
	return ret;
   134ae:	e003      	b.n	134b8 <z_reschedule_irqlock+0x1a>
	__asm__ volatile(
   134b0:	f383 8811 	msr	BASEPRI, r3
   134b4:	f3bf 8f6f 	isb	sy
}
   134b8:	bd08      	pop	{r3, pc}

000134ba <z_reschedule_unlocked>:
{
   134ba:	b508      	push	{r3, lr}
	__asm__ volatile(
   134bc:	f04f 0320 	mov.w	r3, #32
   134c0:	f3ef 8011 	mrs	r0, BASEPRI
   134c4:	f383 8812 	msr	BASEPRI_MAX, r3
   134c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   134cc:	f7ff ffe7 	bl	1349e <z_reschedule_irqlock>
}
   134d0:	bd08      	pop	{r3, pc}

000134d2 <unpend_thread_no_timeout>:
{
   134d2:	b510      	push	{r4, lr}
   134d4:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   134d6:	f7fa f8e5 	bl	d6a4 <pended_on_thread>
   134da:	4621      	mov	r1, r4
   134dc:	f7fa fabc 	bl	da58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   134e0:	7b63      	ldrb	r3, [r4, #13]
   134e2:	f023 0302 	bic.w	r3, r3, #2
   134e6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   134e8:	2300      	movs	r3, #0
   134ea:	60a3      	str	r3, [r4, #8]
}
   134ec:	bd10      	pop	{r4, pc}

000134ee <z_priq_dumb_best>:
{
   134ee:	4603      	mov	r3, r0
	return list->head == list;
   134f0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   134f2:	4283      	cmp	r3, r0
   134f4:	d000      	beq.n	134f8 <z_priq_dumb_best+0xa>
}
   134f6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   134f8:	2000      	movs	r0, #0
	return thread;
   134fa:	e7fc      	b.n	134f6 <z_priq_dumb_best+0x8>

000134fc <unpend_all>:
{
   134fc:	b538      	push	{r3, r4, r5, lr}
   134fe:	4605      	mov	r5, r0
	return list->head == list;
   13500:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13502:	42a5      	cmp	r5, r4
   13504:	d00e      	beq.n	13524 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13506:	b16c      	cbz	r4, 13524 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   13508:	4620      	mov	r0, r4
   1350a:	f7ff ffe2 	bl	134d2 <unpend_thread_no_timeout>
   1350e:	f104 0018 	add.w	r0, r4, #24
   13512:	f7fb fd63 	bl	efdc <z_abort_timeout>
   13516:	2300      	movs	r3, #0
   13518:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
   1351c:	4620      	mov	r0, r4
   1351e:	f7fa fbfd 	bl	dd1c <ready_thread>
   13522:	e7ed      	b.n	13500 <unpend_all+0x4>
}
   13524:	bd38      	pop	{r3, r4, r5, pc}

00013526 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   13526:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   13528:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1352a:	6083      	str	r3, [r0, #8]
}
   1352c:	4770      	bx	lr

0001352e <remove_timeout>:
{
   1352e:	b510      	push	{r4, lr}
   13530:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   13532:	f7fb fc39 	bl	eda8 <next>
   13536:	b148      	cbz	r0, 1354c <remove_timeout+0x1e>
   13538:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1353a:	6903      	ldr	r3, [r0, #16]
   1353c:	6941      	ldr	r1, [r0, #20]
   1353e:	6920      	ldr	r0, [r4, #16]
   13540:	181b      	adds	r3, r3, r0
   13542:	6960      	ldr	r0, [r4, #20]
   13544:	eb41 0100 	adc.w	r1, r1, r0
   13548:	6113      	str	r3, [r2, #16]
   1354a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1354c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1354e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   13550:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13552:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13554:	2300      	movs	r3, #0
   13556:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   13558:	6063      	str	r3, [r4, #4]
}
   1355a:	bd10      	pop	{r4, pc}

0001355c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1355c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1355e:	f7fb ff1d 	bl	f39c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   13562:	bd08      	pop	{r3, pc}

00013564 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   13564:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   13566:	f7fb ff19 	bl	f39c <sys_clock_tick_get>
}
   1356a:	bd08      	pop	{r3, pc}

0001356c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1356c:	b900      	cbnz	r0, 13570 <z_impl_k_busy_wait+0x4>
   1356e:	4770      	bx	lr
{
   13570:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   13572:	f7fd fa0e 	bl	10992 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   13576:	bd08      	pop	{r3, pc}

00013578 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   13578:	b538      	push	{r3, r4, r5, lr}
   1357a:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1357c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   13580:	bf08      	it	eq
   13582:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   13586:	d020      	beq.n	135ca <sys_clock_timeout_end_calc+0x52>
   13588:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1358a:	ea51 0300 	orrs.w	r3, r1, r0
   1358e:	d009      	beq.n	135a4 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   13590:	f06f 0301 	mvn.w	r3, #1
   13594:	1a18      	subs	r0, r3, r0
   13596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1359a:	eb63 0101 	sbc.w	r1, r3, r1
   1359e:	2900      	cmp	r1, #0
   135a0:	db03      	blt.n	135aa <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   135a2:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   135a4:	f7fb fefa 	bl	f39c <sys_clock_tick_get>
   135a8:	e7fb      	b.n	135a2 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   135aa:	f7fb fef7 	bl	f39c <sys_clock_tick_get>
   135ae:	4603      	mov	r3, r0
   135b0:	462a      	mov	r2, r5
   135b2:	46a4      	mov	ip, r4
   135b4:	2d01      	cmp	r5, #1
   135b6:	f174 0400 	sbcs.w	r4, r4, #0
   135ba:	da02      	bge.n	135c2 <sys_clock_timeout_end_calc+0x4a>
   135bc:	2201      	movs	r2, #1
   135be:	f04f 0c00 	mov.w	ip, #0
   135c2:	1898      	adds	r0, r3, r2
   135c4:	eb41 010c 	adc.w	r1, r1, ip
   135c8:	e7eb      	b.n	135a2 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   135ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   135ce:	4601      	mov	r1, r0
   135d0:	e7e7      	b.n	135a2 <sys_clock_timeout_end_calc+0x2a>

000135d2 <z_reschedule_unlocked>:
{
   135d2:	b508      	push	{r3, lr}
   135d4:	f04f 0320 	mov.w	r3, #32
   135d8:	f3ef 8011 	mrs	r0, BASEPRI
   135dc:	f383 8812 	msr	BASEPRI_MAX, r3
   135e0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   135e4:	f7ff ff5b 	bl	1349e <z_reschedule_irqlock>
}
   135e8:	bd08      	pop	{r3, pc}

000135ea <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   135ea:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   135ec:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   135ee:	2300      	movs	r3, #0
   135f0:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   135f2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   135f6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   135f8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   135fa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   135fc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   135fe:	6343      	str	r3, [r0, #52]	; 0x34
}
   13600:	4770      	bx	lr

00013602 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   13602:	b510      	push	{r4, lr}
   13604:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   13606:	f7fb fce9 	bl	efdc <z_abort_timeout>

	if (inactive) {
   1360a:	b960      	cbnz	r0, 13626 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   1360c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1360e:	b10b      	cbz	r3, 13614 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   13610:	4620      	mov	r0, r4
   13612:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   13614:	f104 0018 	add.w	r0, r4, #24
   13618:	f7fa ffc6 	bl	e5a8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1361c:	b118      	cbz	r0, 13626 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   1361e:	f7fa fbd1 	bl	ddc4 <z_ready_thread>
			z_reschedule_unlocked();
   13622:	f7ff ffd6 	bl	135d2 <z_reschedule_unlocked>
		}
	}
}
   13626:	bd10      	pop	{r4, pc}

00013628 <k_malloc>:
{
   13628:	b508      	push	{r3, lr}
   1362a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1362c:	2004      	movs	r0, #4
   1362e:	f7fc f88f 	bl	f750 <k_aligned_alloc>
}
   13632:	bd08      	pop	{r3, pc}

00013634 <k_heap_init>:
{
   13634:	b510      	push	{r4, lr}
   13636:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1363a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1363c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1363e:	f7ee fa93 	bl	1b68 <sys_heap_init>
}
   13642:	bd10      	pop	{r4, pc}
