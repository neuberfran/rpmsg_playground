
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

void i2c_dump_msgs(const char *name, const struct i2c_msg *msgs,
		   uint8_t num_msgs, uint16_t addr)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	70 31 00 20 5d 43 00 00 e3 c8 00 00 15 43 00 00     p1. ]C.......C..
  10:	15 43 00 00 15 43 00 00 15 43 00 00 15 43 00 00     .C...C...C...C..
	...
  2c:	95 34 00 00 15 43 00 00 00 00 00 00 39 34 00 00     .4...C......94..
  3c:	15 43 00 00                                         .C..

00000040 <_irq_vector_table>:
  40:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  50:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  60:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  70:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  80:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  90:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  a0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  b0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  c0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  d0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  e0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
  f0:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 100:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 110:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 120:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 130:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 140:	25 35 00 00 25 35 00 00 25 35 00 00 25 35 00 00     %5..%5..%5..%5..
 150:	25 35 00 00                                         %5..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x22>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <__data_size+0x2c>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <__data_size+0x2c>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <__data_size+0x2c>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     326:	b916      	cbnz	r6, 32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
     3ec:	d106      	bne.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>

00000424 <ep_recv>:
{
   k_sem_give (&bound_sem);
}

static void ep_recv(const void *data, size_t len, void *priv)
{
     424:	b508      	push	{r3, lr}
     426:	460a      	mov	r2, r1
    memcpy(&remote_reply, data, len);
     428:	4601      	mov	r1, r0
     42a:	4803      	ldr	r0, [pc, #12]	; (438 <ep_recv+0x14>)
     42c:	f00c fb4b 	bl	cac6 <memcpy>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     430:	4802      	ldr	r0, [pc, #8]	; (43c <ep_recv+0x18>)
     432:	f009 fa93 	bl	995c <z_impl_k_sem_give>
    k_sem_give (&bound_sem);
}
     436:	bd08      	pop	{r3, pc}
     438:	20000dd0 	.word	0x20000dd0
     43c:	200002dc 	.word	0x200002dc

00000440 <ep_bound>:
{
     440:	b508      	push	{r3, lr}
     442:	4802      	ldr	r0, [pc, #8]	; (44c <ep_bound+0xc>)
     444:	f009 fa8a 	bl	995c <z_impl_k_sem_give>
}
     448:	bd08      	pop	{r3, pc}
     44a:	bf00      	nop
     44c:	200002dc 	.word	0x200002dc

00000450 <main>:
        .received = ep_recv,
    }, 
};

int main(void)
{
     450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     454:	b09d      	sub	sp, #116	; 0x74
     456:	af00      	add	r7, sp, #0
    struct ipc_ept ep; 
    int ret;

    ret = ipc_service_open_instance(ipc0_instance);
     458:	48bd      	ldr	r0, [pc, #756]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     45a:	f002 f85f 	bl	251c <ipc_service_open_instance>
    if ((ret < 0) && (ret != -EALREADY)) {
     45e:	f1b0 0800 	subs.w	r8, r0, #0
     462:	da02      	bge.n	46a <main+0x1a>
     464:	f118 0f78 	cmn.w	r8, #120	; 0x78
     468:	d13e      	bne.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
       LOG_INF("ipc_service_open_instance() failure");
       return ret;
    }

    ret = ipc_service_register_endpoint(ipc0_instance, &ep, &ep_cfg);
     46a:	4aba      	ldr	r2, [pc, #744]	; (754 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26c>)
     46c:	f107 0108 	add.w	r1, r7, #8
     470:	48b7      	ldr	r0, [pc, #732]	; (750 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x268>)
     472:	f002 f8b7 	bl	25e4 <ipc_service_register_endpoint>
    if (ret < 0) {
     476:	f1b0 0800 	subs.w	r8, r0, #0
     47a:	db58      	blt.n	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
	return z_impl_k_sem_take(sem, timeout);
     47c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     484:	48b4      	ldr	r0, [pc, #720]	; (758 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x270>)
     486:	f009 fa8d 	bl	99a4 <z_impl_k_sem_take>
        LOG_INF("ipc_service_register_endpoint() failure"); 
        return ret;
    }

    k_sem_take(&bound_sem, K_FOREVER); 
    LOG_INF("ipc service is ready to communicate!");
     48a:	4bb4      	ldr	r3, [pc, #720]	; (75c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x274>)
     48c:	63fb      	str	r3, [r7, #60]	; 0x3c
     48e:	2302      	movs	r3, #2
     490:	713b      	strb	r3, [r7, #4]
     492:	2300      	movs	r3, #0
     494:	717b      	strb	r3, [r7, #5]
     496:	71bb      	strb	r3, [r7, #6]
     498:	71fb      	strb	r3, [r7, #7]
     49a:	687a      	ldr	r2, [r7, #4]
     49c:	63ba      	str	r2, [r7, #56]	; 0x38
     49e:	4619      	mov	r1, r3
     4a0:	f363 0100 	bfi	r1, r3, #0, #1
     4a4:	f363 0141 	bfi	r1, r3, #1, #1
     4a8:	f363 0182 	bfi	r1, r3, #2, #1
     4ac:	f363 01c5 	bfi	r1, r3, #3, #3
     4b0:	2203      	movs	r2, #3
     4b2:	f362 1188 	bfi	r1, r2, #6, #3
     4b6:	2208      	movs	r2, #8
     4b8:	f362 2152 	bfi	r1, r2, #9, #10
     4bc:	f363 41de 	bfi	r1, r3, #19, #12
     4c0:	f363 71df 	bfi	r1, r3, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     4c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
     4c8:	48a5      	ldr	r0, [pc, #660]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     4ca:	f00b fe28 	bl	c11e <z_impl_z_log_msg_static_create>

    strcpy(remote_command.command_string, "AT+IPC_COMMAND\n\r");
     4ce:	f8df 8294 	ldr.w	r8, [pc, #660]	; 764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>
     4d2:	49a5      	ldr	r1, [pc, #660]	; (768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>)
     4d4:	4640      	mov	r0, r8
     4d6:	f00c faa1 	bl	ca1c <strcpy>
    remote_command.size = strlen(remote_command.command_string) + 1;
     4da:	4640      	mov	r0, r8
     4dc:	f00c fac2 	bl	ca64 <strlen>
     4e0:	3001      	adds	r0, #1
     4e2:	f848 0c04 	str.w	r0, [r8, #-4]
     4e6:	e0b5      	b.n	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
       LOG_INF("ipc_service_open_instance() failure");
     4e8:	4ba0      	ldr	r3, [pc, #640]	; (76c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x284>)
     4ea:	627b      	str	r3, [r7, #36]	; 0x24
     4ec:	2302      	movs	r3, #2
     4ee:	713b      	strb	r3, [r7, #4]
     4f0:	2300      	movs	r3, #0
     4f2:	717b      	strb	r3, [r7, #5]
     4f4:	71bb      	strb	r3, [r7, #6]
     4f6:	71fb      	strb	r3, [r7, #7]
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	623a      	str	r2, [r7, #32]
     4fc:	4619      	mov	r1, r3
     4fe:	f363 0100 	bfi	r1, r3, #0, #1
     502:	f363 0141 	bfi	r1, r3, #1, #1
     506:	f363 0182 	bfi	r1, r3, #2, #1
     50a:	f363 01c5 	bfi	r1, r3, #3, #3
     50e:	2203      	movs	r2, #3
     510:	f362 1188 	bfi	r1, r2, #6, #3
     514:	2208      	movs	r2, #8
     516:	f362 2152 	bfi	r1, r2, #9, #10
     51a:	f363 41de 	bfi	r1, r3, #19, #12
     51e:	f363 71df 	bfi	r1, r3, #31, #1
     522:	f107 0220 	add.w	r2, r7, #32
     526:	488e      	ldr	r0, [pc, #568]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     528:	f00b fdf9 	bl	c11e <z_impl_z_log_msg_static_create>
       return ret;
     52c:	e021      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
        LOG_INF("ipc_service_register_endpoint() failure"); 
     52e:	4b90      	ldr	r3, [pc, #576]	; (770 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x288>)
     530:	66fb      	str	r3, [r7, #108]	; 0x6c
     532:	2302      	movs	r3, #2
     534:	713b      	strb	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	717b      	strb	r3, [r7, #5]
     53a:	71bb      	strb	r3, [r7, #6]
     53c:	71fb      	strb	r3, [r7, #7]
     53e:	687a      	ldr	r2, [r7, #4]
     540:	66ba      	str	r2, [r7, #104]	; 0x68
     542:	4619      	mov	r1, r3
     544:	f363 0100 	bfi	r1, r3, #0, #1
     548:	f363 0141 	bfi	r1, r3, #1, #1
     54c:	f363 0182 	bfi	r1, r3, #2, #1
     550:	f363 01c5 	bfi	r1, r3, #3, #3
     554:	2203      	movs	r2, #3
     556:	f362 1188 	bfi	r1, r2, #6, #3
     55a:	2208      	movs	r2, #8
     55c:	f362 2152 	bfi	r1, r2, #9, #10
     560:	f363 41de 	bfi	r1, r3, #19, #12
     564:	f363 71df 	bfi	r1, r3, #31, #1
     568:	f107 0268 	add.w	r2, r7, #104	; 0x68
     56c:	487c      	ldr	r0, [pc, #496]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     56e:	f00b fdd6 	bl	c11e <z_impl_z_log_msg_static_create>
         k_sem_take(&bound_sem, K_FOREVER);
         LOG_INF("received from remote CPU the response: %s", remote_reply.command_string);
         k_sleep(K_MSEC(1000));
      }
      return 0;
   }
     572:	4640      	mov	r0, r8
     574:	3774      	adds	r7, #116	; 0x74
     576:	46bd      	mov	sp, r7
     578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LOG_INF("sending AT command: %s to remote CPU", remote_command.command_string);
     57c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     580:	e078      	b.n	674 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18c>
     582:	4601      	mov	r1, r0
     584:	2804      	cmp	r0, #4
     586:	dd03      	ble.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
     588:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>
     58c:	f8c3 c014 	str.w	ip, [r3, #20]
     590:	f04f 0c02 	mov.w	ip, #2
     594:	f887 c000 	strb.w	ip, [r7]
     598:	2908      	cmp	r1, #8
     59a:	dd01      	ble.n	5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>
     59c:	4971      	ldr	r1, [pc, #452]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     59e:	6199      	str	r1, [r3, #24]
     5a0:	f103 011c 	add.w	r1, r3, #28
     5a4:	f04f 0c00 	mov.w	ip, #0
     5a8:	f1bc 0f00 	cmp.w	ip, #0
     5ac:	d166      	bne.n	67c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x194>
     5ae:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
     5b2:	44be      	add	lr, r7
     5b4:	f81e ec70 	ldrb.w	lr, [lr, #-112]
     5b8:	f801 eb01 	strb.w	lr, [r1], #1
     5bc:	f10c 0c01 	add.w	ip, ip, #1
     5c0:	e7f2      	b.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
     5c2:	f06f 011b 	mvn.w	r1, #27
     5c6:	b142      	cbz	r2, 5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
     5c8:	2003      	movs	r0, #3
     5ca:	7138      	strb	r0, [r7, #4]
     5cc:	2000      	movs	r0, #0
     5ce:	7178      	strb	r0, [r7, #5]
     5d0:	71b8      	strb	r0, [r7, #6]
     5d2:	2001      	movs	r0, #1
     5d4:	71f8      	strb	r0, [r7, #7]
     5d6:	6878      	ldr	r0, [r7, #4]
     5d8:	6118      	str	r0, [r3, #16]
     5da:	f36f 0400 	bfc	r4, #0, #1
     5de:	f36f 0441 	bfc	r4, #1, #1
     5e2:	f36f 0482 	bfc	r4, #2, #1
     5e6:	f36f 04c5 	bfc	r4, #3, #3
     5ea:	2303      	movs	r3, #3
     5ec:	f363 1488 	bfi	r4, r3, #6, #3
     5f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
     5f4:	f361 2452 	bfi	r4, r1, #9, #10
     5f8:	f36f 44de 	bfc	r4, #19, #12
     5fc:	f36f 74df 	bfc	r4, #31, #1
     600:	2300      	movs	r3, #0
     602:	4621      	mov	r1, r4
     604:	4856      	ldr	r0, [pc, #344]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     606:	f00b fd8a 	bl	c11e <z_impl_z_log_msg_static_create>
     60a:	46cd      	mov	sp, r9
        if (ret == -ENOMEM) { 
     60c:	f118 0f0c 	cmn.w	r8, #12
     610:	d138      	bne.n	684 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19c>
            LOG_WRN("No space in the vring buffer retrying...");
     612:	4b59      	ldr	r3, [pc, #356]	; (778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>)
     614:	657b      	str	r3, [r7, #84]	; 0x54
     616:	2202      	movs	r2, #2
     618:	713a      	strb	r2, [r7, #4]
     61a:	2300      	movs	r3, #0
     61c:	717b      	strb	r3, [r7, #5]
     61e:	71bb      	strb	r3, [r7, #6]
     620:	71fb      	strb	r3, [r7, #7]
     622:	6879      	ldr	r1, [r7, #4]
     624:	6539      	str	r1, [r7, #80]	; 0x50
     626:	f363 0500 	bfi	r5, r3, #0, #1
     62a:	f363 0541 	bfi	r5, r3, #1, #1
     62e:	f363 0582 	bfi	r5, r3, #2, #1
     632:	f363 05c5 	bfi	r5, r3, #3, #3
     636:	f362 1588 	bfi	r5, r2, #6, #3
     63a:	2208      	movs	r2, #8
     63c:	f362 2552 	bfi	r5, r2, #9, #10
     640:	f363 45de 	bfi	r5, r3, #19, #12
     644:	f363 75df 	bfi	r5, r3, #31, #1
     648:	f107 0250 	add.w	r2, r7, #80	; 0x50
     64c:	4629      	mov	r1, r5
     64e:	4844      	ldr	r0, [pc, #272]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     650:	f00b fd65 	bl	c11e <z_impl_z_log_msg_static_create>
        ret = ipc_service_send(&ep, &remote_command, sizeof(remote_command)); 
     654:	2244      	movs	r2, #68	; 0x44
     656:	4949      	ldr	r1, [pc, #292]	; (77c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x294>)
     658:	f107 0008 	add.w	r0, r7, #8
     65c:	f002 f82a 	bl	26b4 <ipc_service_send>
     660:	4680      	mov	r8, r0
        LOG_INF("sending AT command: %s to remote CPU", remote_command.command_string);
     662:	46e9      	mov	r9, sp
     664:	2302      	movs	r3, #2
     666:	713b      	strb	r3, [r7, #4]
     668:	b088      	sub	sp, #32
     66a:	466b      	mov	r3, sp
     66c:	f113 0210 	adds.w	r2, r3, #16
     670:	d084      	beq.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>
     672:	200d      	movs	r0, #13
     674:	2a00      	cmp	r2, #0
     676:	d184      	bne.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
     678:	2102      	movs	r1, #2
     67a:	7039      	strb	r1, [r7, #0]
     67c:	280c      	cmp	r0, #12
     67e:	dda0      	ble.n	5c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xda>
     680:	210d      	movs	r1, #13
     682:	e7a0      	b.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
     684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     68c:	4832      	ldr	r0, [pc, #200]	; (758 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x270>)
     68e:	f009 f989 	bl	99a4 <z_impl_k_sem_take>
         LOG_INF("received from remote CPU the response: %s", remote_reply.command_string);
     692:	46e8      	mov	r8, sp
     694:	2302      	movs	r3, #2
     696:	713b      	strb	r3, [r7, #4]
     698:	b088      	sub	sp, #32
     69a:	466b      	mov	r3, sp
     69c:	f113 0210 	adds.w	r2, r3, #16
     6a0:	d02f      	beq.n	702 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21a>
     6a2:	200d      	movs	r0, #13
     6a4:	bb82      	cbnz	r2, 708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     6a6:	2102      	movs	r1, #2
     6a8:	7039      	strb	r1, [r7, #0]
     6aa:	280c      	cmp	r0, #12
     6ac:	dd4c      	ble.n	748 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x260>
     6ae:	210d      	movs	r1, #13
     6b0:	b142      	cbz	r2, 6c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1dc>
     6b2:	2003      	movs	r0, #3
     6b4:	7138      	strb	r0, [r7, #4]
     6b6:	2000      	movs	r0, #0
     6b8:	7178      	strb	r0, [r7, #5]
     6ba:	71b8      	strb	r0, [r7, #6]
     6bc:	2001      	movs	r0, #1
     6be:	71f8      	strb	r0, [r7, #7]
     6c0:	6878      	ldr	r0, [r7, #4]
     6c2:	6118      	str	r0, [r3, #16]
     6c4:	f36f 0600 	bfc	r6, #0, #1
     6c8:	f36f 0641 	bfc	r6, #1, #1
     6cc:	f36f 0682 	bfc	r6, #2, #1
     6d0:	f36f 06c5 	bfc	r6, #3, #3
     6d4:	2303      	movs	r3, #3
     6d6:	f363 1688 	bfi	r6, r3, #6, #3
     6da:	f3c1 0109 	ubfx	r1, r1, #0, #10
     6de:	f361 2652 	bfi	r6, r1, #9, #10
     6e2:	f36f 46de 	bfc	r6, #19, #12
     6e6:	f36f 76df 	bfc	r6, #31, #1
     6ea:	2300      	movs	r3, #0
     6ec:	4631      	mov	r1, r6
     6ee:	481c      	ldr	r0, [pc, #112]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     6f0:	f00b fd15 	bl	c11e <z_impl_z_log_msg_static_create>
     6f4:	46c5      	mov	sp, r8
	return z_impl_k_sleep(timeout);
     6f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     6fa:	2100      	movs	r1, #0
     6fc:	f009 fe1a 	bl	a334 <z_impl_k_sleep>
     700:	e7a8      	b.n	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     702:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     706:	e7cd      	b.n	6a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1bc>
     708:	4601      	mov	r1, r0
     70a:	2804      	cmp	r0, #4
     70c:	dd03      	ble.n	716 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22e>
     70e:	f8df c070 	ldr.w	ip, [pc, #112]	; 780 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x298>
     712:	f8c3 c014 	str.w	ip, [r3, #20]
     716:	f04f 0c02 	mov.w	ip, #2
     71a:	f887 c000 	strb.w	ip, [r7]
     71e:	2908      	cmp	r1, #8
     720:	dd01      	ble.n	726 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x23e>
     722:	4918      	ldr	r1, [pc, #96]	; (784 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x29c>)
     724:	6199      	str	r1, [r3, #24]
     726:	f103 011c 	add.w	r1, r3, #28
     72a:	f04f 0c00 	mov.w	ip, #0
     72e:	f1bc 0f00 	cmp.w	ip, #0
     732:	d1ba      	bne.n	6aa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c2>
     734:	f10c 0e70 	add.w	lr, ip, #112	; 0x70
     738:	44be      	add	lr, r7
     73a:	f81e ec70 	ldrb.w	lr, [lr, #-112]
     73e:	f801 eb01 	strb.w	lr, [r1], #1
     742:	f10c 0c01 	add.w	ip, ip, #1
     746:	e7f2      	b.n	72e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x246>
     748:	f06f 011b 	mvn.w	r1, #27
     74c:	e7b0      	b.n	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     74e:	bf00      	nop
     750:	0000f468 	.word	0x0000f468
     754:	20000000 	.word	0x20000000
     758:	200002dc 	.word	0x200002dc
     75c:	0000f8f4 	.word	0x0000f8f4
     760:	0000f780 	.word	0x0000f780
     764:	20000e18 	.word	0x20000e18
     768:	0000f91c 	.word	0x0000f91c
     76c:	0000f8a8 	.word	0x0000f8a8
     770:	0000f8cc 	.word	0x0000f8cc
     774:	0000f930 	.word	0x0000f930
     778:	0000f958 	.word	0x0000f958
     77c:	20000e14 	.word	0x20000e14
     780:	0000f984 	.word	0x0000f984
     784:	20000dd4 	.word	0x20000dd4

00000788 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b08d      	sub	sp, #52	; 0x34
     78e:	9205      	str	r2, [sp, #20]
     790:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     792:	4613      	mov	r3, r2
     794:	f002 0204 	and.w	r2, r2, #4
     798:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     79a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     79e:	f010 0303 	ands.w	r3, r0, #3
     7a2:	9302      	str	r3, [sp, #8]
     7a4:	f040 8205 	bne.w	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
     7a8:	4607      	mov	r7, r0
     7aa:	468a      	mov	sl, r1
     7ac:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     7ae:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     7b0:	2800      	cmp	r0, #0
     7b2:	d044      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     7b4:	b127      	cbz	r7, 7c0 <cbvprintf_package+0x38>
     7b6:	1be3      	subs	r3, r4, r7
     7b8:	3304      	adds	r3, #4
     7ba:	4553      	cmp	r3, sl
     7bc:	f200 81fc 	bhi.w	bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     7c0:	9b03      	ldr	r3, [sp, #12]
     7c2:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     7c4:	f8dd b008 	ldr.w	fp, [sp, #8]
     7c8:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     7cc:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     7d0:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     7d2:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     7d6:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     7d8:	b10f      	cbz	r7, 7de <cbvprintf_package+0x56>
				*(const char **)buf = s;
     7da:	9b03      	ldr	r3, [sp, #12]
     7dc:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7de:	1e53      	subs	r3, r2, #1
     7e0:	9307      	str	r3, [sp, #28]
     7e2:	2a00      	cmp	r2, #0
     7e4:	f340 814f 	ble.w	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     7e8:	9b05      	ldr	r3, [sp, #20]
     7ea:	f013 0202 	ands.w	r2, r3, #2
     7ee:	d023      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7f0:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     7f2:	1be1      	subs	r1, r4, r7
     7f4:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     7f6:	b11a      	cbz	r2, 800 <CONFIG_ISR_STACK_SIZE>
     7f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     7fc:	f080 81e2 	bcs.w	bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     800:	f1bb 0f0f 	cmp.w	fp, #15
     804:	f200 81e1 	bhi.w	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     808:	2f00      	cmp	r7, #0
     80a:	f000 8154 	beq.w	ab6 <CONFIG_ISR_STACK_SIZE+0x2b6>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     80e:	b2db      	uxtb	r3, r3
     810:	f10b 0230 	add.w	r2, fp, #48	; 0x30
     814:	446a      	add	r2, sp
     816:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     81a:	2800      	cmp	r0, #0
     81c:	f000 8147 	beq.w	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     820:	f063 037f 	orn	r3, r3, #127	; 0x7f
     824:	f10b 0230 	add.w	r2, fp, #48	; 0x30
     828:	446a      	add	r2, sp
     82a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     82e:	9b04      	ldr	r3, [sp, #16]
     830:	3301      	adds	r3, #1
     832:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     834:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     838:	3404      	adds	r4, #4

			is_str_arg = false;
     83a:	2200      	movs	r2, #0
     83c:	e031      	b.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     83e:	f001 0a07 	and.w	sl, r1, #7
     842:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     844:	f1ca 0a08 	rsb	sl, sl, #8
     848:	e7b4      	b.n	7b4 <cbvprintf_package+0x2c>
			switch (*fmt) {
     84a:	2600      	movs	r6, #0
     84c:	e028      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     84e:	2600      	movs	r6, #0
     850:	e026      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				align = VA_STACK_ALIGN(intmax_t);
     852:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
     856:	46c1      	mov	r9, r8
     858:	e022      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				if (*fmt == '%') {
     85a:	2925      	cmp	r1, #37	; 0x25
     85c:	d120      	bne.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
					parsing = true;
     85e:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
     860:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
     864:	46c1      	mov	r9, r8
				continue;
     866:	e01b      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
			switch (*fmt) {
     868:	2947      	cmp	r1, #71	; 0x47
     86a:	d8f0      	bhi.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     86c:	292a      	cmp	r1, #42	; 0x2a
     86e:	d312      	bcc.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
     870:	392a      	subs	r1, #42	; 0x2a
     872:	b2c9      	uxtb	r1, r1
     874:	2001      	movs	r0, #1
     876:	fa00 f101 	lsl.w	r1, r0, r1
     87a:	f64f 70da 	movw	r0, #65498	; 0xffda
     87e:	4201      	tst	r1, r0
     880:	d10e      	bne.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     882:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
     886:	f040 80bb 	bne.w	a00 <CONFIG_ISR_STACK_SIZE+0x200>
     88a:	f011 0101 	ands.w	r1, r1, #1
     88e:	f040 8085 	bne.w	99c <CONFIG_ISR_STACK_SIZE+0x19c>
     892:	460e      	mov	r6, r1
     894:	e004      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     896:	2920      	cmp	r1, #32
     898:	d002      	beq.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     89a:	2923      	cmp	r1, #35	; 0x23
     89c:	d000      	beq.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     89e:	2600      	movs	r6, #0
     8a0:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
     8a2:	1c6b      	adds	r3, r5, #1
     8a4:	7869      	ldrb	r1, [r5, #1]
     8a6:	2900      	cmp	r1, #0
     8a8:	f000 8119 	beq.w	ade <CONFIG_ISR_STACK_SIZE+0x2de>
			if (!parsing) {
     8ac:	2e00      	cmp	r6, #0
     8ae:	d0d4      	beq.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
			switch (*fmt) {
     8b0:	297a      	cmp	r1, #122	; 0x7a
     8b2:	d8ca      	bhi.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     8b4:	294c      	cmp	r1, #76	; 0x4c
     8b6:	d3d7      	bcc.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     8b8:	394c      	subs	r1, #76	; 0x4c
     8ba:	292e      	cmp	r1, #46	; 0x2e
     8bc:	d860      	bhi.n	980 <CONFIG_ISR_STACK_SIZE+0x180>
     8be:	a001      	add	r0, pc, #4	; (adr r0, 8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     8c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8c4:	000008a1 	.word	0x000008a1
     8c8:	00000981 	.word	0x00000981
     8cc:	00000981 	.word	0x00000981
     8d0:	00000981 	.word	0x00000981
     8d4:	00000981 	.word	0x00000981
     8d8:	00000981 	.word	0x00000981
     8dc:	00000981 	.word	0x00000981
     8e0:	00000981 	.word	0x00000981
     8e4:	00000981 	.word	0x00000981
     8e8:	00000981 	.word	0x00000981
     8ec:	00000981 	.word	0x00000981
     8f0:	00000981 	.word	0x00000981
     8f4:	00000995 	.word	0x00000995
     8f8:	00000981 	.word	0x00000981
     8fc:	00000981 	.word	0x00000981
     900:	00000981 	.word	0x00000981
     904:	00000981 	.word	0x00000981
     908:	00000981 	.word	0x00000981
     90c:	00000981 	.word	0x00000981
     910:	00000981 	.word	0x00000981
     914:	00000981 	.word	0x00000981
     918:	00000a01 	.word	0x00000a01
     91c:	00000981 	.word	0x00000981
     920:	00000995 	.word	0x00000995
     924:	00000995 	.word	0x00000995
     928:	00000a01 	.word	0x00000a01
     92c:	00000a01 	.word	0x00000a01
     930:	00000a01 	.word	0x00000a01
     934:	000008a1 	.word	0x000008a1
     938:	00000995 	.word	0x00000995
     93c:	00000853 	.word	0x00000853
     940:	00000981 	.word	0x00000981
     944:	000008a1 	.word	0x000008a1
     948:	00000981 	.word	0x00000981
     94c:	00000a5f 	.word	0x00000a5f
     950:	00000995 	.word	0x00000995
     954:	00000a5f 	.word	0x00000a5f
     958:	00000981 	.word	0x00000981
     95c:	00000981 	.word	0x00000981
     960:	00000a69 	.word	0x00000a69
     964:	0000098d 	.word	0x0000098d
     968:	00000995 	.word	0x00000995
     96c:	00000981 	.word	0x00000981
     970:	00000981 	.word	0x00000981
     974:	00000995 	.word	0x00000995
     978:	00000981 	.word	0x00000981
     97c:	00000985 	.word	0x00000985
     980:	2600      	movs	r6, #0
     982:	e78d      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				align = VA_STACK_ALIGN(size_t);
     984:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
     988:	46c1      	mov	r9, r8
				continue;
     98a:	e789      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				align = VA_STACK_ALIGN(ptrdiff_t);
     98c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
     990:	46c1      	mov	r9, r8
				continue;
     992:	e785      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
				if (fmt[-1] == 'l') {
     994:	7829      	ldrb	r1, [r5, #0]
     996:	296c      	cmp	r1, #108	; 0x6c
     998:	d024      	beq.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
				parsing = false;
     99a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     99c:	4444      	add	r4, r8
     99e:	3c01      	subs	r4, #1
     9a0:	f1c8 0100 	rsb	r1, r8, #0
     9a4:	400c      	ands	r4, r1
     9a6:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     9a8:	b127      	cbz	r7, 9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
     9aa:	1be1      	subs	r1, r4, r7
     9ac:	4449      	add	r1, r9
     9ae:	4551      	cmp	r1, sl
     9b0:	f200 8105 	bhi.w	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
		if (is_str_arg) {
     9b4:	2a00      	cmp	r2, #0
     9b6:	d15d      	bne.n	a74 <CONFIG_ISR_STACK_SIZE+0x274>
		} else if (size == sizeof(int)) {
     9b8:	f1b9 0f04 	cmp.w	r9, #4
     9bc:	f000 8087 	beq.w	ace <CONFIG_ISR_STACK_SIZE+0x2ce>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     9c0:	f1b9 0f08 	cmp.w	r9, #8
     9c4:	f040 8104 	bne.w	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
			long long v = va_arg(ap, long long);
     9c8:	9916      	ldr	r1, [sp, #88]	; 0x58
     9ca:	3107      	adds	r1, #7
     9cc:	f021 0107 	bic.w	r1, r1, #7
     9d0:	f101 0008 	add.w	r0, r1, #8
     9d4:	9016      	str	r0, [sp, #88]	; 0x58
     9d6:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
     9da:	b10f      	cbz	r7, 9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     9dc:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
     9e0:	3408      	adds	r4, #8
     9e2:	e75d      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
					if (fmt[-2] == 'l') {
     9e4:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     9e8:	296c      	cmp	r1, #108	; 0x6c
     9ea:	d004      	beq.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
				parsing = false;
     9ec:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
     9ee:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
     9f2:	46c1      	mov	r9, r8
     9f4:	e7d2      	b.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
				parsing = false;
     9f6:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
     9f8:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
     9fc:	46c1      	mov	r9, r8
     9fe:	e7cd      	b.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
				if (fmt[-1] == 'L') {
     a00:	7829      	ldrb	r1, [r5, #0]
     a02:	294c      	cmp	r1, #76	; 0x4c
     a04:	d01b      	beq.n	a3e <CONFIG_ISR_STACK_SIZE+0x23e>
					v.d = va_arg(ap, double);
     a06:	9916      	ldr	r1, [sp, #88]	; 0x58
     a08:	3107      	adds	r1, #7
     a0a:	f021 0107 	bic.w	r1, r1, #7
     a0e:	f101 0008 	add.w	r0, r1, #8
     a12:	9016      	str	r0, [sp, #88]	; 0x58
     a14:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
     a18:	3407      	adds	r4, #7
     a1a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     a1e:	b147      	cbz	r7, a32 <CONFIG_ISR_STACK_SIZE+0x232>
					if (BUF_OFFSET + size > len) {
     a20:	1be6      	subs	r6, r4, r7
     a22:	3608      	adds	r6, #8
     a24:	4556      	cmp	r6, sl
     a26:	d814      	bhi.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
					} else if (fmt[-1] == 'L') {
     a28:	782d      	ldrb	r5, [r5, #0]
     a2a:	2d4c      	cmp	r5, #76	; 0x4c
     a2c:	d014      	beq.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
						*(double *)buf = v.d;
     a2e:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
     a32:	3408      	adds	r4, #8
				parsing = false;
     a34:	2600      	movs	r6, #0
				continue;
     a36:	f04f 0808 	mov.w	r8, #8
     a3a:	46c1      	mov	r9, r8
     a3c:	e730      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
					v.ld = va_arg(ap, long double);
     a3e:	9916      	ldr	r1, [sp, #88]	; 0x58
     a40:	3107      	adds	r1, #7
     a42:	f021 0107 	bic.w	r1, r1, #7
     a46:	f101 0008 	add.w	r0, r1, #8
     a4a:	9016      	str	r0, [sp, #88]	; 0x58
     a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
     a50:	e7e2      	b.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
						return -ENOSPC;
     a52:	f06f 001b 	mvn.w	r0, #27
     a56:	e0a9      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
						*(long double *)buf = v.ld;
     a58:	e9c4 0100 	strd	r0, r1, [r4]
     a5c:	e7e9      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
				parsing = false;
     a5e:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     a60:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     a64:	46c1      	mov	r9, r8
     a66:	e799      	b.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
				is_str_arg = true;
     a68:	4632      	mov	r2, r6
				parsing = false;
     a6a:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
     a6c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
     a70:	46c1      	mov	r9, r8
     a72:	e793      	b.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
			s = va_arg(ap, char *);
     a74:	4604      	mov	r4, r0
     a76:	9a16      	ldr	r2, [sp, #88]	; 0x58
     a78:	1d11      	adds	r1, r2, #4
     a7a:	9116      	str	r1, [sp, #88]	; 0x58
     a7c:	6812      	ldr	r2, [r2, #0]
     a7e:	9203      	str	r2, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a80:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
     a82:	461d      	mov	r5, r3
     a84:	e6a8      	b.n	7d8 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     a86:	4b58      	ldr	r3, [pc, #352]	; (be8 <CONFIG_ISR_STACK_SIZE+0x3e8>)
     a88:	9a03      	ldr	r2, [sp, #12]
     a8a:	429a      	cmp	r2, r3
     a8c:	d304      	bcc.n	a98 <CONFIG_ISR_STACK_SIZE+0x298>
     a8e:	4b57      	ldr	r3, [pc, #348]	; (bec <CONFIG_ISR_STACK_SIZE+0x3ec>)
     a90:	429a      	cmp	r2, r3
     a92:	d30a      	bcc.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
     a94:	2300      	movs	r3, #0
     a96:	e000      	b.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
     a98:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a9a:	2b00      	cmp	r3, #0
     a9c:	f47f aea4 	bne.w	7e8 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     aa0:	9b05      	ldr	r3, [sp, #20]
     aa2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     aa6:	2000      	movs	r0, #0
     aa8:	e6a3      	b.n	7f2 <cbvprintf_package+0x6a>
     aaa:	2301      	movs	r3, #1
     aac:	e7f5      	b.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
						s_rw_cnt++;
     aae:	9b06      	ldr	r3, [sp, #24]
     ab0:	3301      	adds	r3, #1
     ab2:	9306      	str	r3, [sp, #24]
     ab4:	e6be      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
				} else if (is_ro || rws_pos_en) {
     ab6:	b908      	cbnz	r0, abc <CONFIG_ISR_STACK_SIZE+0x2bc>
     ab8:	9b01      	ldr	r3, [sp, #4]
     aba:	b113      	cbz	r3, ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
					len += 1;
     abc:	f10a 0a01 	add.w	sl, sl, #1
     ac0:	e6b8      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
					len += strlen(s) + 1 + 1;
     ac2:	9803      	ldr	r0, [sp, #12]
     ac4:	f00b ffce 	bl	ca64 <strlen>
     ac8:	1c83      	adds	r3, r0, #2
     aca:	449a      	add	sl, r3
     acc:	e6b2      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			int v = va_arg(ap, int);
     ace:	9916      	ldr	r1, [sp, #88]	; 0x58
     ad0:	1d08      	adds	r0, r1, #4
     ad2:	9016      	str	r0, [sp, #88]	; 0x58
     ad4:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
     ad6:	b107      	cbz	r7, ada <CONFIG_ISR_STACK_SIZE+0x2da>
				*(int *)buf = v;
     ad8:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
     ada:	3404      	adds	r4, #4
     adc:	e6e0      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     ade:	1be3      	subs	r3, r4, r7
     ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     ae4:	d277      	bcs.n	bd6 <CONFIG_ISR_STACK_SIZE+0x3d6>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     ae6:	b187      	cbz	r7, b0a <CONFIG_ISR_STACK_SIZE+0x30a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     ae8:	2200      	movs	r2, #0
     aea:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     aec:	089b      	lsrs	r3, r3, #2
     aee:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     af0:	9b01      	ldr	r3, [sp, #4]
     af2:	b173      	cbz	r3, b12 <CONFIG_ISR_STACK_SIZE+0x312>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     af4:	9b06      	ldr	r3, [sp, #24]
     af6:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     af8:	9b04      	ldr	r3, [sp, #16]
     afa:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     afc:	bb0b      	cbnz	r3, b42 <CONFIG_ISR_STACK_SIZE+0x342>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     afe:	9d02      	ldr	r5, [sp, #8]
     b00:	f8dd 9010 	ldr.w	r9, [sp, #16]
     b04:	f8dd 800c 	ldr.w	r8, [sp, #12]
     b08:	e033      	b.n	b72 <CONFIG_ISR_STACK_SIZE+0x372>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     b0a:	4453      	add	r3, sl
     b0c:	f1a3 0008 	sub.w	r0, r3, #8
     b10:	e04c      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     b12:	9b06      	ldr	r3, [sp, #24]
     b14:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     b16:	e7ef      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		for (i = 0; i < s_idx; i++) {
     b18:	3301      	adds	r3, #1
     b1a:	459b      	cmp	fp, r3
     b1c:	d9ef      	bls.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
     b22:	446a      	add	r2, sp
     b24:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     b28:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     b2c:	2a00      	cmp	r2, #0
     b2e:	daf3      	bge.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     b30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     b34:	1be2      	subs	r2, r4, r7
     b36:	3201      	adds	r2, #1
     b38:	4552      	cmp	r2, sl
     b3a:	d84f      	bhi.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
			*buf++ = pos;
     b3c:	f804 1b01 	strb.w	r1, [r4], #1
     b40:	e7ea      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
		for (i = 0; i < s_idx; i++) {
     b42:	9b02      	ldr	r3, [sp, #8]
     b44:	e7e9      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		if (rws_pos_en) {
     b46:	9b01      	ldr	r3, [sp, #4]
     b48:	b303      	cbz	r3, b8c <CONFIG_ISR_STACK_SIZE+0x38c>
			size = 0;
     b4a:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     b4c:	1be3      	subs	r3, r4, r7
     b4e:	4433      	add	r3, r6
     b50:	3301      	adds	r3, #1
     b52:	4553      	cmp	r3, sl
     b54:	d845      	bhi.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     b56:	f105 0330 	add.w	r3, r5, #48	; 0x30
     b5a:	446b      	add	r3, sp
     b5c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     b60:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     b64:	4632      	mov	r2, r6
     b66:	4641      	mov	r1, r8
     b68:	4620      	mov	r0, r4
     b6a:	f00b ffac 	bl	cac6 <memcpy>
		buf += size;
     b6e:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     b70:	3501      	adds	r5, #1
     b72:	45ab      	cmp	fp, r5
     b74:	d919      	bls.n	baa <CONFIG_ISR_STACK_SIZE+0x3aa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     b76:	f1b9 0f00 	cmp.w	r9, #0
     b7a:	d0e4      	beq.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     b7c:	f105 0330 	add.w	r3, r5, #48	; 0x30
     b80:	446b      	add	r3, sp
     b82:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     b86:	2b00      	cmp	r3, #0
     b88:	dadd      	bge.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     b8a:	e7f1      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     b8c:	f105 0330 	add.w	r3, r5, #48	; 0x30
     b90:	446b      	add	r3, sp
     b92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     b96:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     b9a:	2200      	movs	r2, #0
     b9c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     ba0:	4640      	mov	r0, r8
     ba2:	f00b ff5f 	bl	ca64 <strlen>
     ba6:	1c46      	adds	r6, r0, #1
     ba8:	e7d0      	b.n	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     baa:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     bac:	b00d      	add	sp, #52	; 0x34
     bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     bb2:	f06f 000d 	mvn.w	r0, #13
     bb6:	e7f9      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		return -ENOSPC;
     bb8:	f06f 001b 	mvn.w	r0, #27
     bbc:	e7f6      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
			return -ENOSPC;
     bbe:	f06f 001b 	mvn.w	r0, #27
     bc2:	e7f3      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
					return -EINVAL;
     bc4:	f06f 0015 	mvn.w	r0, #21
     bc8:	e7f0      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
					return -EINVAL;
     bca:	f06f 0015 	mvn.w	r0, #21
     bce:	e7ed      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
			return -EINVAL;
     bd0:	f06f 0015 	mvn.w	r0, #21
     bd4:	e7ea      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		return -EINVAL;
     bd6:	f06f 0015 	mvn.w	r0, #21
     bda:	e7e7      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
				return -ENOSPC;
     bdc:	f06f 001b 	mvn.w	r0, #27
     be0:	e7e4      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
			return -ENOSPC;
     be2:	f06f 001b 	mvn.w	r0, #27
     be6:	e7e1      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     be8:	0000f350 	.word	0x0000f350
     bec:	00010be8 	.word	0x00010be8

00000bf0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf4:	b091      	sub	sp, #68	; 0x44
     bf6:	4606      	mov	r6, r0
     bf8:	9200      	str	r2, [sp, #0]
     bfa:	469b      	mov	fp, r3
     bfc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     bfe:	9102      	str	r1, [sp, #8]
     c00:	b159      	cbz	r1, c1a <cbprintf_package_convert+0x2a>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     c02:	f896 9002 	ldrb.w	r9, [r6, #2]
     c06:	f8cd 9004 	str.w	r9, [sp, #4]
	ro_cpy = ros_nbr &&
     c0a:	f1b9 0f00 	cmp.w	r9, #0
     c0e:	d008      	beq.n	c22 <cbprintf_package_convert+0x32>
     c10:	f017 0f01 	tst.w	r7, #1
     c14:	d110      	bne.n	c38 <cbprintf_package_convert+0x48>
     c16:	2300      	movs	r3, #0
     c18:	e004      	b.n	c24 <cbprintf_package_convert+0x34>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     c1a:	f00a f807 	bl	ac2c <get_package_len>
     c1e:	9002      	str	r0, [sp, #8]
     c20:	e7ef      	b.n	c02 <cbprintf_package_convert+0x12>
	ro_cpy = ros_nbr &&
     c22:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     c24:	f896 8003 	ldrb.w	r8, [r6, #3]
	rw_cpy = rws_nbr > 0 &&
     c28:	f1b8 0f00 	cmp.w	r8, #0
     c2c:	d006      	beq.n	c3c <cbprintf_package_convert+0x4c>
     c2e:	f017 0f02 	tst.w	r7, #2
     c32:	d11c      	bne.n	c6e <cbprintf_package_convert+0x7e>
     c34:	2200      	movs	r2, #0
     c36:	e002      	b.n	c3e <cbprintf_package_convert+0x4e>
	ro_cpy = ros_nbr &&
     c38:	2301      	movs	r3, #1
     c3a:	e7f3      	b.n	c24 <cbprintf_package_convert+0x34>
	rw_cpy = rws_nbr > 0 &&
     c3c:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     c3e:	b902      	cbnz	r2, c42 <cbprintf_package_convert+0x52>
     c40:	b1bb      	cbz	r3, c72 <cbprintf_package_convert+0x82>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
     c42:	7835      	ldrb	r5, [r6, #0]
     c44:	00aa      	lsls	r2, r5, #2
     c46:	9203      	str	r2, [sp, #12]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	uint8_t *str_pos = &buf[args_size];
     c48:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
     c4c:	9a00      	ldr	r2, [sp, #0]
     c4e:	b1da      	cbz	r2, c88 <cbprintf_package_convert+0x98>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
     c50:	2b00      	cmp	r3, #0
     c52:	f040 8085 	bne.w	d60 <cbprintf_package_convert+0x170>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     c56:	9b01      	ldr	r3, [sp, #4]
     c58:	2b00      	cmp	r3, #0
     c5a:	f000 808d 	beq.w	d78 <cbprintf_package_convert+0x188>
     c5e:	f017 0f04 	tst.w	r7, #4
     c62:	f040 808d 	bne.w	d80 <cbprintf_package_convert+0x190>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
     c66:	2000      	movs	r0, #0
		keep_cnt = 0;
     c68:	4682      	mov	sl, r0
		scpy_cnt = 0;
     c6a:	4681      	mov	r9, r0
     c6c:	e07b      	b.n	d66 <cbprintf_package_convert+0x176>
	rw_cpy = rws_nbr > 0 &&
     c6e:	2201      	movs	r2, #1
     c70:	e7e5      	b.n	c3e <cbprintf_package_convert+0x4e>
		if (cb) {
     c72:	9b00      	ldr	r3, [sp, #0]
     c74:	b11b      	cbz	r3, c7e <cbprintf_package_convert+0x8e>
			cb(in_packaged, in_len, ctx);
     c76:	465a      	mov	r2, fp
     c78:	9902      	ldr	r1, [sp, #8]
     c7a:	4630      	mov	r0, r6
     c7c:	4798      	blx	r3
		return in_len;
     c7e:	9c02      	ldr	r4, [sp, #8]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     c80:	4620      	mov	r0, r4
     c82:	b011      	add	sp, #68	; 0x44
     c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
     c88:	9c02      	ldr	r4, [sp, #8]
		if (ro_cpy) {
     c8a:	bb03      	cbnz	r3, cce <cbprintf_package_convert+0xde>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     c8c:	9b01      	ldr	r3, [sp, #4]
     c8e:	b3ab      	cbz	r3, cfc <cbprintf_package_convert+0x10c>
     c90:	f017 0b04 	ands.w	fp, r7, #4
     c94:	d02b      	beq.n	cee <cbprintf_package_convert+0xfe>
				str_pos += ros_nbr;
     c96:	441d      	add	r5, r3
	size_t strl_cnt = 0;
     c98:	f04f 0b00 	mov.w	fp, #0
     c9c:	e027      	b.n	cee <cbprintf_package_convert+0xfe>
				out_len += len;
     c9e:	4404      	add	r4, r0
				str_pos++;
     ca0:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
     ca2:	f109 0901 	add.w	r9, r9, #1
     ca6:	45c1      	cmp	r9, r8
     ca8:	d21d      	bcs.n	ce6 <cbprintf_package_convert+0xf6>
				const char *str = *(const char **)&buf32[*str_pos];
     caa:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
     cac:	2300      	movs	r3, #0
     cae:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
     cb2:	4619      	mov	r1, r3
     cb4:	4638      	mov	r0, r7
     cb6:	f009 ffce 	bl	ac56 <append_string>
				if (strl && strl_cnt < strl_len) {
     cba:	2e00      	cmp	r6, #0
     cbc:	d0ef      	beq.n	c9e <cbprintf_package_convert+0xae>
     cbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
     cc0:	459b      	cmp	fp, r3
     cc2:	d2ec      	bcs.n	c9e <cbprintf_package_convert+0xae>
					strl[strl_cnt++] = (uint16_t)len;
     cc4:	f826 001b 	strh.w	r0, [r6, fp, lsl #1]
     cc8:	f10b 0b01 	add.w	fp, fp, #1
     ccc:	e7e7      	b.n	c9e <cbprintf_package_convert+0xae>
			for (int i = 0; i < ros_nbr; i++) {
     cce:	f04f 0900 	mov.w	r9, #0
	size_t strl_cnt = 0;
     cd2:	46cb      	mov	fp, r9
     cd4:	f8cd 8008 	str.w	r8, [sp, #8]
     cd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
     cdc:	46b2      	mov	sl, r6
     cde:	971a      	str	r7, [sp, #104]	; 0x68
     ce0:	9f00      	ldr	r7, [sp, #0]
     ce2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
     ce4:	e7df      	b.n	ca6 <cbprintf_package_convert+0xb6>
     ce6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     cea:	4656      	mov	r6, sl
     cec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		bool drop_ro_str_pos = !(flags &
     cee:	f007 0305 	and.w	r3, r7, #5
     cf2:	9301      	str	r3, [sp, #4]
		for (int i = 0; i < rws_nbr; i++) {
     cf4:	f04f 0900 	mov.w	r9, #0
     cf8:	46b2      	mov	sl, r6
     cfa:	e01d      	b.n	d38 <cbprintf_package_convert+0x148>
	size_t strl_cnt = 0;
     cfc:	f8dd b004 	ldr.w	fp, [sp, #4]
     d00:	e7f5      	b.n	cee <cbprintf_package_convert+0xfe>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     d02:	f017 0f02 	tst.w	r7, #2
     d06:	d029      	beq.n	d5c <cbprintf_package_convert+0x16c>
     d08:	2600      	movs	r6, #0
				int len = append_string(cb, NULL, str, 0);
     d0a:	2300      	movs	r3, #0
     d0c:	4619      	mov	r1, r3
     d0e:	9800      	ldr	r0, [sp, #0]
     d10:	f009 ffa1 	bl	ac56 <append_string>
				if (strl && strl_cnt < strl_len) {
     d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
     d16:	b13b      	cbz	r3, d28 <cbprintf_package_convert+0x138>
     d18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
     d1a:	459b      	cmp	fp, r3
     d1c:	d204      	bcs.n	d28 <cbprintf_package_convert+0x138>
					strl[strl_cnt++] = (uint16_t)len;
     d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
     d20:	f823 001b 	strh.w	r0, [r3, fp, lsl #1]
     d24:	f10b 0b01 	add.w	fp, fp, #1
				out_len += len;
     d28:	4404      	add	r4, r0
			if (is_ro && drop_ro_str_pos) {
     d2a:	b116      	cbz	r6, d32 <cbprintf_package_convert+0x142>
     d2c:	9b01      	ldr	r3, [sp, #4]
     d2e:	b903      	cbnz	r3, d32 <cbprintf_package_convert+0x142>
				out_len--;
     d30:	3c01      	subs	r4, #1
			str_pos++;
     d32:	3501      	adds	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
     d34:	f109 0901 	add.w	r9, r9, #1
     d38:	45c1      	cmp	r9, r8
     d3a:	d2a1      	bcs.n	c80 <cbprintf_package_convert+0x90>
			const char *str = *(const char **)&buf32[*str_pos];
     d3c:	782b      	ldrb	r3, [r5, #0]
     d3e:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
     d42:	4b6f      	ldr	r3, [pc, #444]	; (f00 <cbprintf_package_convert+0x310>)
     d44:	429a      	cmp	r2, r3
     d46:	d3dc      	bcc.n	d02 <cbprintf_package_convert+0x112>
     d48:	4b6e      	ldr	r3, [pc, #440]	; (f04 <cbprintf_package_convert+0x314>)
     d4a:	429a      	cmp	r2, r3
     d4c:	d2d9      	bcs.n	d02 <cbprintf_package_convert+0x112>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     d4e:	f017 0f01 	tst.w	r7, #1
     d52:	d101      	bne.n	d58 <cbprintf_package_convert+0x168>
     d54:	2601      	movs	r6, #1
     d56:	e7e8      	b.n	d2a <cbprintf_package_convert+0x13a>
     d58:	2601      	movs	r6, #1
     d5a:	e7d6      	b.n	d0a <cbprintf_package_convert+0x11a>
     d5c:	2600      	movs	r6, #0
     d5e:	e7e4      	b.n	d2a <cbprintf_package_convert+0x13a>
		dst = cpy_str_pos;
     d60:	a80b      	add	r0, sp, #44	; 0x2c
		keep_cnt = 0;
     d62:	f04f 0a00 	mov.w	sl, #0
	if (dst) {
     d66:	b118      	cbz	r0, d70 <cbprintf_package_convert+0x180>
		memcpy(dst, str_pos, ros_nbr);
     d68:	9a01      	ldr	r2, [sp, #4]
     d6a:	4629      	mov	r1, r5
     d6c:	f00b feab 	bl	cac6 <memcpy>
	str_pos += ros_nbr;
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
     d74:	2300      	movs	r3, #0
     d76:	e030      	b.n	dda <cbprintf_package_convert+0x1ea>
		dst = NULL;
     d78:	2000      	movs	r0, #0
		keep_cnt = 0;
     d7a:	4682      	mov	sl, r0
		scpy_cnt = 0;
     d7c:	4681      	mov	r9, r0
     d7e:	e7f2      	b.n	d66 <cbprintf_package_convert+0x176>
		keep_cnt = ros_nbr;
     d80:	46ca      	mov	sl, r9
		dst = keep_str_pos;
     d82:	a807      	add	r0, sp, #28
		scpy_cnt = 0;
     d84:	f04f 0900 	mov.w	r9, #0
     d88:	e7ed      	b.n	d66 <cbprintf_package_convert+0x176>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     d8a:	f017 0f01 	tst.w	r7, #1
     d8e:	d00a      	beq.n	da6 <cbprintf_package_convert+0x1b6>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     d90:	f109 0101 	add.w	r1, r9, #1
     d94:	f109 0040 	add.w	r0, r9, #64	; 0x40
     d98:	eb0d 0900 	add.w	r9, sp, r0
     d9c:	f809 2c14 	strb.w	r2, [r9, #-20]
     da0:	fa5f f981 	uxtb.w	r9, r1
     da4:	e017      	b.n	dd6 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     da6:	f017 0f04 	tst.w	r7, #4
     daa:	d014      	beq.n	dd6 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = *str_pos;
     dac:	f10a 0101 	add.w	r1, sl, #1
     db0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
     db4:	eb0d 0a00 	add.w	sl, sp, r0
     db8:	f80a 2c24 	strb.w	r2, [sl, #-36]
     dbc:	fa5f fa81 	uxtb.w	sl, r1
     dc0:	e009      	b.n	dd6 <cbprintf_package_convert+0x1e6>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     dc2:	f109 0101 	add.w	r1, r9, #1
     dc6:	f109 0040 	add.w	r0, r9, #64	; 0x40
     dca:	eb0d 0900 	add.w	r9, sp, r0
     dce:	f809 2c14 	strb.w	r2, [r9, #-20]
     dd2:	fa5f f981 	uxtb.w	r9, r1
		str_pos++;
     dd6:	3501      	adds	r5, #1
	for (int i = 0; i < rws_nbr; i++) {
     dd8:	3301      	adds	r3, #1
     dda:	4543      	cmp	r3, r8
     ddc:	d216      	bcs.n	e0c <cbprintf_package_convert+0x21c>
		const char *str = *(const char **)&buf32[*str_pos];
     dde:	782a      	ldrb	r2, [r5, #0]
     de0:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
     de4:	4846      	ldr	r0, [pc, #280]	; (f00 <cbprintf_package_convert+0x310>)
     de6:	4281      	cmp	r1, r0
     de8:	d302      	bcc.n	df0 <cbprintf_package_convert+0x200>
     dea:	4846      	ldr	r0, [pc, #280]	; (f04 <cbprintf_package_convert+0x314>)
     dec:	4281      	cmp	r1, r0
     dee:	d3cc      	bcc.n	d8a <cbprintf_package_convert+0x19a>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     df0:	f017 0f02 	tst.w	r7, #2
     df4:	d1e5      	bne.n	dc2 <cbprintf_package_convert+0x1d2>
				keep_str_pos[keep_cnt++] = *str_pos;
     df6:	f10a 0101 	add.w	r1, sl, #1
     dfa:	f10a 0040 	add.w	r0, sl, #64	; 0x40
     dfe:	eb0d 0a00 	add.w	sl, sp, r0
     e02:	f80a 2c24 	strb.w	r2, [sl, #-36]
     e06:	fa5f fa81 	uxtb.w	sl, r1
     e0a:	e7e4      	b.n	dd6 <cbprintf_package_convert+0x1e6>
	out_desc.len = in_desc->len;
     e0c:	7833      	ldrb	r3, [r6, #0]
     e0e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     e12:	7873      	ldrb	r3, [r6, #1]
     e14:	444b      	add	r3, r9
     e16:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     e1a:	f017 0f02 	tst.w	r7, #2
     e1e:	d00a      	beq.n	e36 <cbprintf_package_convert+0x246>
     e20:	2300      	movs	r3, #0
     e22:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     e26:	f017 0f01 	tst.w	r7, #1
     e2a:	d106      	bne.n	e3a <cbprintf_package_convert+0x24a>
     e2c:	f017 0f04 	tst.w	r7, #4
     e30:	d130      	bne.n	e94 <cbprintf_package_convert+0x2a4>
     e32:	2300      	movs	r3, #0
     e34:	e002      	b.n	e3c <cbprintf_package_convert+0x24c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     e36:	4653      	mov	r3, sl
     e38:	e7f3      	b.n	e22 <cbprintf_package_convert+0x232>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     e3a:	2300      	movs	r3, #0
     e3c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     e40:	6830      	ldr	r0, [r6, #0]
     e42:	9006      	str	r0, [sp, #24]
	*in_desc = out_desc;
     e44:	980f      	ldr	r0, [sp, #60]	; 0x3c
     e46:	6030      	str	r0, [r6, #0]
	rv = cb(in_packaged, args_size, ctx);
     e48:	465a      	mov	r2, fp
     e4a:	9903      	ldr	r1, [sp, #12]
     e4c:	4630      	mov	r0, r6
     e4e:	9f00      	ldr	r7, [sp, #0]
     e50:	47b8      	blx	r7
	if (rv < 0) {
     e52:	1e04      	subs	r4, r0, #0
     e54:	f6ff af14 	blt.w	c80 <cbprintf_package_convert+0x90>
	*in_desc = in_desc_backup;
     e58:	9806      	ldr	r0, [sp, #24]
     e5a:	6030      	str	r0, [r6, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     e5c:	465a      	mov	r2, fp
     e5e:	4651      	mov	r1, sl
     e60:	a807      	add	r0, sp, #28
     e62:	46ba      	mov	sl, r7
     e64:	47b8      	blx	r7
	if (rv < 0) {
     e66:	2800      	cmp	r0, #0
     e68:	db43      	blt.n	ef2 <cbprintf_package_convert+0x302>
	out_len += rv;
     e6a:	1827      	adds	r7, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e6c:	9a01      	ldr	r2, [sp, #4]
     e6e:	9b03      	ldr	r3, [sp, #12]
     e70:	441a      	add	r2, r3
     e72:	4611      	mov	r1, r2
     e74:	4441      	add	r1, r8
	rv = cb(str_pos, strs_len, ctx);
     e76:	465a      	mov	r2, fp
     e78:	9b02      	ldr	r3, [sp, #8]
     e7a:	1a59      	subs	r1, r3, r1
     e7c:	4628      	mov	r0, r5
     e7e:	47d0      	blx	sl
	if (rv < 0) {
     e80:	1e04      	subs	r4, r0, #0
     e82:	f6ff aefd 	blt.w	c80 <cbprintf_package_convert+0x90>
	out_len += rv;
     e86:	193d      	adds	r5, r7, r4
	for (int i = 0; i < scpy_cnt; i++) {
     e88:	2700      	movs	r7, #0
     e8a:	9601      	str	r6, [sp, #4]
     e8c:	4656      	mov	r6, sl
     e8e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
     e92:	e015      	b.n	ec0 <cbprintf_package_convert+0x2d0>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     e94:	4653      	mov	r3, sl
     e96:	e7d1      	b.n	e3c <cbprintf_package_convert+0x24c>
		uint16_t str_len = strl ? strl[i] : 0;
     e98:	f04f 0800 	mov.w	r8, #0
		rv = cb(&loc, 1, ctx);
     e9c:	465a      	mov	r2, fp
     e9e:	2101      	movs	r1, #1
     ea0:	f10d 0017 	add.w	r0, sp, #23
     ea4:	47b0      	blx	r6
		if (rv < 0) {
     ea6:	2800      	cmp	r0, #0
     ea8:	db25      	blt.n	ef6 <cbprintf_package_convert+0x306>
		out_len += rv;
     eaa:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
     eac:	4643      	mov	r3, r8
     eae:	4622      	mov	r2, r4
     eb0:	4659      	mov	r1, fp
     eb2:	4630      	mov	r0, r6
     eb4:	f009 fecf 	bl	ac56 <append_string>
		if (rv < 0) {
     eb8:	2800      	cmp	r0, #0
     eba:	db1e      	blt.n	efa <cbprintf_package_convert+0x30a>
		out_len += rv;
     ebc:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
     ebe:	3701      	adds	r7, #1
     ec0:	45b9      	cmp	r9, r7
     ec2:	dd0f      	ble.n	ee4 <cbprintf_package_convert+0x2f4>
		uint8_t loc = cpy_str_pos[i];
     ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
     ec8:	446b      	add	r3, sp
     eca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
     ece:	f88d 3017 	strb.w	r3, [sp, #23]
		const char *str = *(const char **)&buf32[loc];
     ed2:	9a01      	ldr	r2, [sp, #4]
     ed4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     ed8:	f1ba 0f00 	cmp.w	sl, #0
     edc:	d0dc      	beq.n	e98 <cbprintf_package_convert+0x2a8>
     ede:	f83a 8017 	ldrh.w	r8, [sl, r7, lsl #1]
     ee2:	e7db      	b.n	e9c <cbprintf_package_convert+0x2ac>
	(void)cb(NULL, 0, ctx);
     ee4:	465a      	mov	r2, fp
     ee6:	2100      	movs	r1, #0
     ee8:	4608      	mov	r0, r1
     eea:	9b00      	ldr	r3, [sp, #0]
     eec:	4798      	blx	r3
	return out_len;
     eee:	462c      	mov	r4, r5
     ef0:	e6c6      	b.n	c80 <cbprintf_package_convert+0x90>
		return rv;
     ef2:	4604      	mov	r4, r0
     ef4:	e6c4      	b.n	c80 <cbprintf_package_convert+0x90>
     ef6:	4604      	mov	r4, r0
     ef8:	e6c2      	b.n	c80 <cbprintf_package_convert+0x90>
     efa:	4604      	mov	r4, r0
     efc:	e6c0      	b.n	c80 <cbprintf_package_convert+0x90>
     efe:	bf00      	nop
     f00:	0000f350 	.word	0x0000f350
     f04:	00010be8 	.word	0x00010be8

00000f08 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     f08:	4b01      	ldr	r3, [pc, #4]	; (f10 <__printk_hook_install+0x8>)
     f0a:	6018      	str	r0, [r3, #0]
}
     f0c:	4770      	bx	lr
     f0e:	bf00      	nop
     f10:	20000018 	.word	0x20000018

00000f14 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     f14:	b510      	push	{r4, lr}
     f16:	b086      	sub	sp, #24
     f18:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     f1a:	9003      	str	r0, [sp, #12]
     f1c:	9104      	str	r1, [sp, #16]
     f1e:	2100      	movs	r1, #0
     f20:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     f22:	9100      	str	r1, [sp, #0]
     f24:	a903      	add	r1, sp, #12
     f26:	4806      	ldr	r0, [pc, #24]	; (f40 <vsnprintk+0x2c>)
     f28:	f000 f924 	bl	1174 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     f2c:	9b05      	ldr	r3, [sp, #20]
     f2e:	9a04      	ldr	r2, [sp, #16]
     f30:	4293      	cmp	r3, r2
     f32:	da01      	bge.n	f38 <vsnprintk+0x24>
		str[ctx.count] = '\0';
     f34:	2200      	movs	r2, #0
     f36:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     f38:	9805      	ldr	r0, [sp, #20]
     f3a:	b006      	add	sp, #24
     f3c:	bd10      	pop	{r4, pc}
     f3e:	bf00      	nop
     f40:	0000ad2f 	.word	0x0000ad2f

00000f44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f48:	b083      	sub	sp, #12
     f4a:	4604      	mov	r4, r0
     f4c:	4608      	mov	r0, r1
     f4e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f50:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f52:	f013 0f08 	tst.w	r3, #8
     f56:	d105      	bne.n	f64 <process_event+0x20>
     f58:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     f5c:	2300      	movs	r3, #0
     f5e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     f60:	9301      	str	r3, [sp, #4]
}
     f62:	e055      	b.n	1010 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>
		if (evt == EVT_COMPLETE) {
     f64:	2901      	cmp	r1, #1
     f66:	d009      	beq.n	f7c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     f68:	f043 0320 	orr.w	r3, r3, #32
     f6c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     f6e:	f385 8811 	msr	BASEPRI, r5
     f72:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     f76:	b003      	add	sp, #12
     f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f7c:	f043 0310 	orr.w	r3, r3, #16
     f80:	8323      	strh	r3, [r4, #24]
     f82:	e7f4      	b.n	f6e <process_event+0x2a>
			evt = process_recheck(mgr);
     f84:	4620      	mov	r0, r4
     f86:	f009 ff34 	bl	adf2 <process_recheck>
     f8a:	e043      	b.n	1014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>
			res = mgr->last_res;
     f8c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     f90:	464a      	mov	r2, r9
     f92:	4669      	mov	r1, sp
     f94:	4620      	mov	r0, r4
     f96:	f009 ff45 	bl	ae24 <process_complete>
		onoff_transition_fn transit = NULL;
     f9a:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f9e:	8b23      	ldrh	r3, [r4, #24]
     fa0:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     fa4:	42b7      	cmp	r7, r6
     fa6:	d069      	beq.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     fa8:	68a2      	ldr	r2, [r4, #8]
     faa:	2a00      	cmp	r2, #0
     fac:	d066      	beq.n	107c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fae:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     fb0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     fb4:	8323      	strh	r3, [r4, #24]
     fb6:	f385 8811 	msr	BASEPRI, r5
     fba:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     fbe:	2a00      	cmp	r2, #0
     fc0:	d164      	bne.n	108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>
     fc2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     fc4:	b12b      	cbz	r3, fd2 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     fc6:	464b      	mov	r3, r9
     fc8:	463a      	mov	r2, r7
     fca:	4669      	mov	r1, sp
     fcc:	4620      	mov	r0, r4
     fce:	f009 ffa2 	bl	af16 <notify_all>
			if (transit != NULL) {
     fd2:	f1b8 0f00 	cmp.w	r8, #0
     fd6:	d002      	beq.n	fde <process_event+0x9a>
				transit(mgr, transition_complete);
     fd8:	4934      	ldr	r1, [pc, #208]	; (10ac <CONFIG_HEAP_MEM_POOL_SIZE+0xac>)
     fda:	4620      	mov	r0, r4
     fdc:	47c0      	blx	r8
	__asm__ volatile(
     fde:	f04f 0320 	mov.w	r3, #32
     fe2:	f3ef 8511 	mrs	r5, BASEPRI
     fe6:	f383 8812 	msr	BASEPRI_MAX, r3
     fea:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     fee:	8b23      	ldrh	r3, [r4, #24]
     ff0:	f023 0308 	bic.w	r3, r3, #8
     ff4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     ff6:	8b23      	ldrh	r3, [r4, #24]
     ff8:	f013 0f10 	tst.w	r3, #16
     ffc:	d04c      	beq.n	1098 <CONFIG_HEAP_MEM_POOL_SIZE+0x98>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ffe:	f023 0310 	bic.w	r3, r3, #16
    1002:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1004:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1006:	8b26      	ldrh	r6, [r4, #24]
    1008:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    100c:	2800      	cmp	r0, #0
    100e:	d0ae      	beq.n	f6e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1010:	2802      	cmp	r0, #2
    1012:	d0b7      	beq.n	f84 <process_event+0x40>
		if (evt == EVT_NOP) {
    1014:	2800      	cmp	r0, #0
    1016:	d0aa      	beq.n	f6e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    1018:	3801      	subs	r0, #1
    101a:	2804      	cmp	r0, #4
    101c:	d82a      	bhi.n	1074 <CONFIG_HEAP_MEM_POOL_SIZE+0x74>
    101e:	a301      	add	r3, pc, #4	; (adr r3, 1024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>)
    1020:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1024:	00000f8d 	.word	0x00000f8d
    1028:	00001075 	.word	0x00001075
    102c:	00001039 	.word	0x00001039
    1030:	0000104d 	.word	0x0000104d
    1034:	00001061 	.word	0x00001061
			transit = mgr->transitions->start;
    1038:	6923      	ldr	r3, [r4, #16]
    103a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
    103e:	2106      	movs	r1, #6
    1040:	4620      	mov	r0, r4
    1042:	f009 feac 	bl	ad9e <set_state>
		res = 0;
    1046:	f04f 0900 	mov.w	r9, #0
    104a:	e7a8      	b.n	f9e <process_event+0x5a>
			transit = mgr->transitions->stop;
    104c:	6923      	ldr	r3, [r4, #16]
    104e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1052:	2104      	movs	r1, #4
    1054:	4620      	mov	r0, r4
    1056:	f009 fea2 	bl	ad9e <set_state>
		res = 0;
    105a:	f04f 0900 	mov.w	r9, #0
    105e:	e79e      	b.n	f9e <process_event+0x5a>
			transit = mgr->transitions->reset;
    1060:	6923      	ldr	r3, [r4, #16]
    1062:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    1066:	2105      	movs	r1, #5
    1068:	4620      	mov	r0, r4
    106a:	f009 fe98 	bl	ad9e <set_state>
		res = 0;
    106e:	f04f 0900 	mov.w	r9, #0
    1072:	e794      	b.n	f9e <process_event+0x5a>
		if (evt == EVT_NOP) {
    1074:	f04f 0800 	mov.w	r8, #0
    1078:	46c1      	mov	r9, r8
    107a:	e790      	b.n	f9e <process_event+0x5a>
    107c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    107e:	b10a      	cbz	r2, 1084 <CONFIG_HEAP_MEM_POOL_SIZE+0x84>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1080:	2200      	movs	r2, #0
    1082:	e795      	b.n	fb0 <process_event+0x6c>
		    || (transit != NULL)) {
    1084:	f1b8 0f00 	cmp.w	r8, #0
    1088:	d192      	bne.n	fb0 <process_event+0x6c>
    108a:	e7b4      	b.n	ff6 <process_event+0xb2>
				notify_monitors(mgr, state, res);
    108c:	464a      	mov	r2, r9
    108e:	4639      	mov	r1, r7
    1090:	4620      	mov	r0, r4
    1092:	f009 fe8c 	bl	adae <notify_monitors>
    1096:	e794      	b.n	fc2 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1098:	f013 0f20 	tst.w	r3, #32
    109c:	d004      	beq.n	10a8 <CONFIG_HEAP_MEM_POOL_SIZE+0xa8>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    109e:	f023 0320 	bic.w	r3, r3, #32
    10a2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    10a4:	2002      	movs	r0, #2
    10a6:	e7ae      	b.n	1006 <CONFIG_HEAP_MEM_POOL_SIZE+0x6>
		evt = EVT_NOP;
    10a8:	2000      	movs	r0, #0
    10aa:	e7ac      	b.n	1006 <CONFIG_HEAP_MEM_POOL_SIZE+0x6>
    10ac:	0000af45 	.word	0x0000af45

000010b0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    10b0:	4684      	mov	ip, r0
    10b2:	4608      	mov	r0, r1
	bool loop = true;
    10b4:	2201      	movs	r2, #1
    10b6:	e026      	b.n	1106 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
    10b8:	f89c 3000 	ldrb.w	r3, [ip]
    10bc:	f043 0304 	orr.w	r3, r3, #4
    10c0:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
    10c4:	b1f2      	cbz	r2, 1104 <extract_flags+0x54>
			++sp;
    10c6:	3001      	adds	r0, #1
    10c8:	e01c      	b.n	1104 <extract_flags+0x54>
			conv->flag_plus = true;
    10ca:	f89c 3000 	ldrb.w	r3, [ip]
    10ce:	f043 0308 	orr.w	r3, r3, #8
    10d2:	f88c 3000 	strb.w	r3, [ip]
			break;
    10d6:	e7f5      	b.n	10c4 <extract_flags+0x14>
			conv->flag_space = true;
    10d8:	f89c 3000 	ldrb.w	r3, [ip]
    10dc:	f043 0310 	orr.w	r3, r3, #16
    10e0:	f88c 3000 	strb.w	r3, [ip]
			break;
    10e4:	e7ee      	b.n	10c4 <extract_flags+0x14>
			conv->flag_hash = true;
    10e6:	f89c 3000 	ldrb.w	r3, [ip]
    10ea:	f043 0320 	orr.w	r3, r3, #32
    10ee:	f88c 3000 	strb.w	r3, [ip]
			break;
    10f2:	e7e7      	b.n	10c4 <extract_flags+0x14>
			conv->flag_zero = true;
    10f4:	f89c 3000 	ldrb.w	r3, [ip]
    10f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10fc:	f88c 3000 	strb.w	r3, [ip]
			break;
    1100:	e7e0      	b.n	10c4 <extract_flags+0x14>
		switch (*sp) {
    1102:	2200      	movs	r2, #0
		}
	} while (loop);
    1104:	b342      	cbz	r2, 1158 <extract_flags+0xa8>
		switch (*sp) {
    1106:	7803      	ldrb	r3, [r0, #0]
    1108:	3b20      	subs	r3, #32
    110a:	2b10      	cmp	r3, #16
    110c:	d8f9      	bhi.n	1102 <extract_flags+0x52>
    110e:	a101      	add	r1, pc, #4	; (adr r1, 1114 <extract_flags+0x64>)
    1110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1114:	000010d9 	.word	0x000010d9
    1118:	00001103 	.word	0x00001103
    111c:	00001103 	.word	0x00001103
    1120:	000010e7 	.word	0x000010e7
    1124:	00001103 	.word	0x00001103
    1128:	00001103 	.word	0x00001103
    112c:	00001103 	.word	0x00001103
    1130:	00001103 	.word	0x00001103
    1134:	00001103 	.word	0x00001103
    1138:	00001103 	.word	0x00001103
    113c:	00001103 	.word	0x00001103
    1140:	000010cb 	.word	0x000010cb
    1144:	00001103 	.word	0x00001103
    1148:	000010b9 	.word	0x000010b9
    114c:	00001103 	.word	0x00001103
    1150:	00001103 	.word	0x00001103
    1154:	000010f5 	.word	0x000010f5

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    1158:	f89c 3000 	ldrb.w	r3, [ip]
    115c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1160:	2b44      	cmp	r3, #68	; 0x44
    1162:	d000      	beq.n	1166 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
    1164:	4770      	bx	lr
		conv->flag_zero = false;
    1166:	f89c 3000 	ldrb.w	r3, [ip]
    116a:	f36f 1386 	bfc	r3, #6, #1
    116e:	f88c 3000 	strb.w	r3, [ip]
    1172:	e7f7      	b.n	1164 <extract_flags+0xb4>

00001174 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1178:	b091      	sub	sp, #68	; 0x44
    117a:	4606      	mov	r6, r0
    117c:	460d      	mov	r5, r1
    117e:	4691      	mov	r9, r2
    1180:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1182:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1184:	f899 0000 	ldrb.w	r0, [r9]
    1188:	2800      	cmp	r0, #0
    118a:	f000 82b9 	beq.w	1700 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
    118e:	2825      	cmp	r0, #37	; 0x25
    1190:	d008      	beq.n	11a4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1192:	f109 0901 	add.w	r9, r9, #1
    1196:	4629      	mov	r1, r5
    1198:	47b0      	blx	r6
    119a:	2800      	cmp	r0, #0
    119c:	f2c0 82b1 	blt.w	1702 <z_cbvprintf_impl+0x58e>
    11a0:	3401      	adds	r4, #1
			continue;
    11a2:	e7ef      	b.n	1184 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    11a4:	2300      	movs	r3, #0
    11a6:	9304      	str	r3, [sp, #16]
    11a8:	9305      	str	r3, [sp, #20]
    11aa:	9306      	str	r3, [sp, #24]
    11ac:	9307      	str	r3, [sp, #28]
    11ae:	9308      	str	r3, [sp, #32]
    11b0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    11b2:	4649      	mov	r1, r9
    11b4:	a806      	add	r0, sp, #24
    11b6:	f00a fbba 	bl	b92e <extract_conversion>
    11ba:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    11bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    11c0:	f013 0f01 	tst.w	r3, #1
    11c4:	f000 8097 	beq.w	12f6 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    11c8:	9b03      	ldr	r3, [sp, #12]
    11ca:	1d1a      	adds	r2, r3, #4
    11cc:	9203      	str	r2, [sp, #12]
    11ce:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    11d0:	2f00      	cmp	r7, #0
    11d2:	f2c0 8088 	blt.w	12e6 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    11d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    11da:	f013 0f04 	tst.w	r3, #4
    11de:	f000 809c 	beq.w	131a <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    11e2:	9b03      	ldr	r3, [sp, #12]
    11e4:	1d1a      	adds	r2, r3, #4
    11e6:	9203      	str	r2, [sp, #12]
    11e8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    11ec:	f1ba 0f00 	cmp.w	sl, #0
    11f0:	f2c0 808a 	blt.w	1308 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    11f4:	2300      	movs	r3, #0
    11f6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    11f8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    11fa:	f89d 301a 	ldrb.w	r3, [sp, #26]
    11fe:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1202:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1206:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    120a:	2b01      	cmp	r3, #1
    120c:	f000 808e 	beq.w	132c <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1210:	2b02      	cmp	r3, #2
    1212:	f000 80d3 	beq.w	13bc <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1216:	2b04      	cmp	r3, #4
    1218:	f000 8124 	beq.w	1464 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    121c:	2b03      	cmp	r3, #3
    121e:	f000 813b 	beq.w	1498 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1222:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1226:	f018 0b03 	ands.w	fp, r8, #3
    122a:	f040 813b 	bne.w	14a4 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    122e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1232:	3b25      	subs	r3, #37	; 0x25
    1234:	2b53      	cmp	r3, #83	; 0x53
    1236:	f200 81ca 	bhi.w	15ce <z_cbvprintf_impl+0x45a>
    123a:	e8df f013 	tbh	[pc, r3, lsl #1]
    123e:	0140      	.short	0x0140
    1240:	01c801c8 	.word	0x01c801c8
    1244:	01c801c8 	.word	0x01c801c8
    1248:	01c801c8 	.word	0x01c801c8
    124c:	01c801c8 	.word	0x01c801c8
    1250:	01c801c8 	.word	0x01c801c8
    1254:	01c801c8 	.word	0x01c801c8
    1258:	01c801c8 	.word	0x01c801c8
    125c:	01c801c8 	.word	0x01c801c8
    1260:	01c801c8 	.word	0x01c801c8
    1264:	01c801c8 	.word	0x01c801c8
    1268:	01c801c8 	.word	0x01c801c8
    126c:	01c801c8 	.word	0x01c801c8
    1270:	01c801c8 	.word	0x01c801c8
    1274:	01c801c8 	.word	0x01c801c8
    1278:	01c801c8 	.word	0x01c801c8
    127c:	01c801c8 	.word	0x01c801c8
    1280:	01c801c8 	.word	0x01c801c8
    1284:	01c801c8 	.word	0x01c801c8
    1288:	01c801c8 	.word	0x01c801c8
    128c:	01c801c8 	.word	0x01c801c8
    1290:	01c801c8 	.word	0x01c801c8
    1294:	01c801c8 	.word	0x01c801c8
    1298:	01c801c8 	.word	0x01c801c8
    129c:	01c801c8 	.word	0x01c801c8
    12a0:	01c801c8 	.word	0x01c801c8
    12a4:	01c80181 	.word	0x01c80181
    12a8:	01c801c8 	.word	0x01c801c8
    12ac:	01c801c8 	.word	0x01c801c8
    12b0:	01c801c8 	.word	0x01c801c8
    12b4:	01c801c8 	.word	0x01c801c8
    12b8:	015e01c8 	.word	0x015e01c8
    12bc:	01c80167 	.word	0x01c80167
    12c0:	01c801c8 	.word	0x01c801c8
    12c4:	016701c8 	.word	0x016701c8
    12c8:	01c801c8 	.word	0x01c801c8
    12cc:	01c801c8 	.word	0x01c801c8
    12d0:	018101bd 	.word	0x018101bd
    12d4:	01c801a1 	.word	0x01c801a1
    12d8:	014d01c8 	.word	0x014d01c8
    12dc:	018101c8 	.word	0x018101c8
    12e0:	01c801c8 	.word	0x01c801c8
    12e4:	0181      	.short	0x0181
				conv->flag_dash = true;
    12e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    12ea:	f043 0304 	orr.w	r3, r3, #4
    12ee:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    12f2:	427f      	negs	r7, r7
    12f4:	e76f      	b.n	11d6 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    12f6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    12fa:	2b00      	cmp	r3, #0
    12fc:	db02      	blt.n	1304 <z_cbvprintf_impl+0x190>
		int width = -1;
    12fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1302:	e768      	b.n	11d6 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    1304:	9f07      	ldr	r7, [sp, #28]
    1306:	e766      	b.n	11d6 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    1308:	f89d 3019 	ldrb.w	r3, [sp, #25]
    130c:	f36f 0341 	bfc	r3, #1, #1
    1310:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1314:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1318:	e76c      	b.n	11f4 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    131a:	f013 0f02 	tst.w	r3, #2
    131e:	d002      	beq.n	1326 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    1320:	f8dd a020 	ldr.w	sl, [sp, #32]
    1324:	e766      	b.n	11f4 <z_cbvprintf_impl+0x80>
		int precision = -1;
    1326:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    132a:	e763      	b.n	11f4 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    132c:	1ecb      	subs	r3, r1, #3
    132e:	2b04      	cmp	r3, #4
    1330:	d804      	bhi.n	133c <z_cbvprintf_impl+0x1c8>
    1332:	e8df f003 	tbb	[pc, r3]
    1336:	1d0b      	.short	0x1d0b
    1338:	3529      	.short	0x3529
    133a:	35          	.byte	0x35
    133b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	1d1a      	adds	r2, r3, #4
    1340:	9203      	str	r2, [sp, #12]
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	17da      	asrs	r2, r3, #31
    1346:	9304      	str	r3, [sp, #16]
    1348:	9205      	str	r2, [sp, #20]
				break;
    134a:	e006      	b.n	135a <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    134c:	9b03      	ldr	r3, [sp, #12]
    134e:	1d1a      	adds	r2, r3, #4
    1350:	9203      	str	r2, [sp, #12]
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	17da      	asrs	r2, r3, #31
    1356:	9304      	str	r3, [sp, #16]
    1358:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    135a:	2901      	cmp	r1, #1
    135c:	d028      	beq.n	13b0 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    135e:	2902      	cmp	r1, #2
    1360:	f47f af5f 	bne.w	1222 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    1364:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1368:	17da      	asrs	r2, r3, #31
    136a:	9304      	str	r3, [sp, #16]
    136c:	9205      	str	r2, [sp, #20]
    136e:	e758      	b.n	1222 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    1370:	9b03      	ldr	r3, [sp, #12]
    1372:	3307      	adds	r3, #7
    1374:	f023 0307 	bic.w	r3, r3, #7
    1378:	f103 0208 	add.w	r2, r3, #8
    137c:	9203      	str	r2, [sp, #12]
    137e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1382:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1386:	e7e8      	b.n	135a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1388:	9b03      	ldr	r3, [sp, #12]
    138a:	3307      	adds	r3, #7
    138c:	f023 0307 	bic.w	r3, r3, #7
    1390:	f103 0208 	add.w	r2, r3, #8
    1394:	9203      	str	r2, [sp, #12]
    1396:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    139a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    139e:	e7dc      	b.n	135a <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13a0:	9b03      	ldr	r3, [sp, #12]
    13a2:	1d1a      	adds	r2, r3, #4
    13a4:	9203      	str	r2, [sp, #12]
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	17da      	asrs	r2, r3, #31
				value->sint =
    13aa:	9304      	str	r3, [sp, #16]
    13ac:	9205      	str	r2, [sp, #20]
				break;
    13ae:	e7d4      	b.n	135a <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    13b0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    13b4:	17da      	asrs	r2, r3, #31
    13b6:	9304      	str	r3, [sp, #16]
    13b8:	9205      	str	r2, [sp, #20]
    13ba:	e732      	b.n	1222 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    13bc:	1ecb      	subs	r3, r1, #3
    13be:	2b04      	cmp	r3, #4
    13c0:	d804      	bhi.n	13cc <z_cbvprintf_impl+0x258>
    13c2:	e8df f003 	tbb	[pc, r3]
    13c6:	1f0b      	.short	0x1f0b
    13c8:	4135      	.short	0x4135
    13ca:	41          	.byte	0x41
    13cb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    13cc:	9b03      	ldr	r3, [sp, #12]
    13ce:	1d1a      	adds	r2, r3, #4
    13d0:	9203      	str	r2, [sp, #12]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	9304      	str	r3, [sp, #16]
    13d6:	2300      	movs	r3, #0
    13d8:	9305      	str	r3, [sp, #20]
				break;
    13da:	e01e      	b.n	141a <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    13dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    13e0:	2b63      	cmp	r3, #99	; 0x63
    13e2:	d007      	beq.n	13f4 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    13e4:	9b03      	ldr	r3, [sp, #12]
    13e6:	1d1a      	adds	r2, r3, #4
    13e8:	9203      	str	r2, [sp, #12]
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	9304      	str	r3, [sp, #16]
    13ee:	2300      	movs	r3, #0
    13f0:	9305      	str	r3, [sp, #20]
    13f2:	e012      	b.n	141a <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    13f4:	9b03      	ldr	r3, [sp, #12]
    13f6:	1d1a      	adds	r2, r3, #4
    13f8:	9203      	str	r2, [sp, #12]
    13fa:	681b      	ldr	r3, [r3, #0]
    13fc:	9304      	str	r3, [sp, #16]
    13fe:	2300      	movs	r3, #0
    1400:	9305      	str	r3, [sp, #20]
    1402:	e00a      	b.n	141a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    1404:	9b03      	ldr	r3, [sp, #12]
    1406:	3307      	adds	r3, #7
    1408:	f023 0307 	bic.w	r3, r3, #7
    140c:	f103 0208 	add.w	r2, r3, #8
    1410:	9203      	str	r2, [sp, #12]
    1412:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1416:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    141a:	2901      	cmp	r1, #1
    141c:	d01c      	beq.n	1458 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    141e:	2902      	cmp	r1, #2
    1420:	f47f aeff 	bne.w	1222 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    1424:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1428:	9304      	str	r3, [sp, #16]
    142a:	2300      	movs	r3, #0
    142c:	9305      	str	r3, [sp, #20]
    142e:	e6f8      	b.n	1222 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	3307      	adds	r3, #7
    1434:	f023 0307 	bic.w	r3, r3, #7
    1438:	f103 0208 	add.w	r2, r3, #8
    143c:	9203      	str	r2, [sp, #12]
    143e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1442:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1446:	e7e8      	b.n	141a <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1448:	9b03      	ldr	r3, [sp, #12]
    144a:	1d1a      	adds	r2, r3, #4
    144c:	9203      	str	r2, [sp, #12]
    144e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1450:	9304      	str	r3, [sp, #16]
    1452:	2300      	movs	r3, #0
    1454:	9305      	str	r3, [sp, #20]
				break;
    1456:	e7e0      	b.n	141a <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    1458:	f89d 3010 	ldrb.w	r3, [sp, #16]
    145c:	9304      	str	r3, [sp, #16]
    145e:	2300      	movs	r3, #0
    1460:	9305      	str	r3, [sp, #20]
    1462:	e6de      	b.n	1222 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1464:	2908      	cmp	r1, #8
    1466:	d00b      	beq.n	1480 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    1468:	9b03      	ldr	r3, [sp, #12]
    146a:	3307      	adds	r3, #7
    146c:	f023 0307 	bic.w	r3, r3, #7
    1470:	f103 0208 	add.w	r2, r3, #8
    1474:	9203      	str	r2, [sp, #12]
    1476:	e9d3 2300 	ldrd	r2, r3, [r3]
    147a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    147e:	e6d0      	b.n	1222 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    1480:	9b03      	ldr	r3, [sp, #12]
    1482:	3307      	adds	r3, #7
    1484:	f023 0307 	bic.w	r3, r3, #7
    1488:	f103 0208 	add.w	r2, r3, #8
    148c:	9203      	str	r2, [sp, #12]
    148e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1492:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1496:	e6c4      	b.n	1222 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	1d1a      	adds	r2, r3, #4
    149c:	9203      	str	r2, [sp, #12]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	9304      	str	r3, [sp, #16]
    14a2:	e6be      	b.n	1222 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    14a4:	9f02      	ldr	r7, [sp, #8]
    14a6:	463b      	mov	r3, r7
    14a8:	464a      	mov	r2, r9
    14aa:	4629      	mov	r1, r5
    14ac:	4630      	mov	r0, r6
    14ae:	f00a fae4 	bl	ba7a <outs>
    14b2:	2800      	cmp	r0, #0
    14b4:	f2c0 8125 	blt.w	1702 <z_cbvprintf_impl+0x58e>
    14b8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    14ba:	46b9      	mov	r9, r7
			continue;
    14bc:	e662      	b.n	1184 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    14be:	4629      	mov	r1, r5
    14c0:	2025      	movs	r0, #37	; 0x25
    14c2:	47b0      	blx	r6
    14c4:	2800      	cmp	r0, #0
    14c6:	f2c0 811c 	blt.w	1702 <z_cbvprintf_impl+0x58e>
    14ca:	3401      	adds	r4, #1
		char sign = 0;
    14cc:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    14ce:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    14d2:	f04f 0900 	mov.w	r9, #0
			break;
    14d6:	e07f      	b.n	15d8 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
    14d8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    14dc:	f1ba 0f00 	cmp.w	sl, #0
    14e0:	db07      	blt.n	14f2 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    14e2:	4651      	mov	r1, sl
    14e4:	4648      	mov	r0, r9
    14e6:	f00b fac6 	bl	ca76 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    14ea:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    14ee:	46d8      	mov	r8, fp
			precision = -1;

			break;
    14f0:	e072      	b.n	15d8 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
    14f2:	4648      	mov	r0, r9
    14f4:	f00b fab6 	bl	ca64 <strlen>
    14f8:	e7f7      	b.n	14ea <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14fa:	9b04      	ldr	r3, [sp, #16]
    14fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1500:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1502:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1506:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    150a:	e065      	b.n	15d8 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    150c:	f018 0f08 	tst.w	r8, #8
    1510:	d105      	bne.n	151e <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1512:	f018 0810 	ands.w	r8, r8, #16
    1516:	d004      	beq.n	1522 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    1518:	f04f 0820 	mov.w	r8, #32
    151c:	e001      	b.n	1522 <z_cbvprintf_impl+0x3ae>
				sign = '+';
    151e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1522:	9a04      	ldr	r2, [sp, #16]
    1524:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1526:	2b00      	cmp	r3, #0
    1528:	db02      	blt.n	1530 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    152a:	9204      	str	r2, [sp, #16]
    152c:	9305      	str	r3, [sp, #20]
    152e:	e008      	b.n	1542 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    1530:	4252      	negs	r2, r2
    1532:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1536:	9204      	str	r2, [sp, #16]
    1538:	9305      	str	r3, [sp, #20]
				sign = '-';
    153a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    153e:	e000      	b.n	1542 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    1540:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1542:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1546:	9300      	str	r3, [sp, #0]
    1548:	ab0a      	add	r3, sp, #40	; 0x28
    154a:	aa06      	add	r2, sp, #24
    154c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1550:	f00a fa24 	bl	b99c <encode_uint>
    1554:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1556:	f1ba 0f00 	cmp.w	sl, #0
    155a:	db6c      	blt.n	1636 <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
    155c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1560:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1564:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1568:	f36f 1286 	bfc	r2, #6, #1
    156c:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1570:	459a      	cmp	sl, r3
    1572:	d963      	bls.n	163c <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
    1574:	ebaa 0303 	sub.w	r3, sl, r3
    1578:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    157a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    157e:	e02b      	b.n	15d8 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1580:	9804      	ldr	r0, [sp, #16]
    1582:	b928      	cbnz	r0, 1590 <z_cbvprintf_impl+0x41c>
		char sign = 0;
    1584:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1586:	f8df a180 	ldr.w	sl, [pc, #384]	; 1708 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
    158a:	f1aa 0905 	sub.w	r9, sl, #5
    158e:	e023      	b.n	15d8 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1590:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1594:	9300      	str	r3, [sp, #0]
    1596:	ab0a      	add	r3, sp, #40	; 0x28
    1598:	aa06      	add	r2, sp, #24
    159a:	2100      	movs	r1, #0
    159c:	f00a f9fe 	bl	b99c <encode_uint>
    15a0:	4681      	mov	r9, r0
				conv->altform_0c = true;
    15a2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    15a6:	f043 0310 	orr.w	r3, r3, #16
    15aa:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    15ae:	2378      	movs	r3, #120	; 0x78
    15b0:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    15b4:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    15b6:	e7ce      	b.n	1556 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    15b8:	4622      	mov	r2, r4
    15ba:	9904      	ldr	r1, [sp, #16]
    15bc:	a806      	add	r0, sp, #24
    15be:	f00a fa3d 	bl	ba3c <store_count>
		char sign = 0;
    15c2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    15c4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    15c8:	f04f 0900 	mov.w	r9, #0
			}

			break;
    15cc:	e004      	b.n	15d8 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
    15ce:	46d8      	mov	r8, fp
    15d0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    15d4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    15d8:	f1b9 0f00 	cmp.w	r9, #0
    15dc:	f000 808d 	beq.w	16fa <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    15e0:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    15e4:	f1b8 0f00 	cmp.w	r8, #0
    15e8:	d000      	beq.n	15ec <z_cbvprintf_impl+0x478>
			nj_len += 1U;
    15ea:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    15ec:	f89d 201a 	ldrb.w	r2, [sp, #26]
    15f0:	f012 0f10 	tst.w	r2, #16
    15f4:	d025      	beq.n	1642 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
    15f6:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    15f8:	9907      	ldr	r1, [sp, #28]
    15fa:	440b      	add	r3, r1
		if (conv->pad_fp) {
    15fc:	f012 0f40 	tst.w	r2, #64	; 0x40
    1600:	d001      	beq.n	1606 <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
    1602:	9a08      	ldr	r2, [sp, #32]
    1604:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1606:	2f00      	cmp	r7, #0
    1608:	dd31      	ble.n	166e <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
    160a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    160c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1610:	f013 0f04 	tst.w	r3, #4
    1614:	d12b      	bne.n	166e <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1616:	f013 0f40 	tst.w	r3, #64	; 0x40
    161a:	d017      	beq.n	164c <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
    161c:	f1b8 0f00 	cmp.w	r8, #0
    1620:	d017      	beq.n	1652 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
    1622:	4629      	mov	r1, r5
    1624:	4640      	mov	r0, r8
    1626:	47b0      	blx	r6
    1628:	2800      	cmp	r0, #0
    162a:	db6a      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    162c:	3401      	adds	r4, #1
						sign = 0;
    162e:	46d8      	mov	r8, fp
					}
					pad = '0';
    1630:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1634:	e00f      	b.n	1656 <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
    1636:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    163a:	e7cd      	b.n	15d8 <z_cbvprintf_impl+0x464>
    163c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1640:	e7ca      	b.n	15d8 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
    1642:	f012 0f08 	tst.w	r2, #8
    1646:	d0d7      	beq.n	15f8 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
    1648:	3301      	adds	r3, #1
    164a:	e7d5      	b.n	15f8 <z_cbvprintf_impl+0x484>
				char pad = ' ';
    164c:	f04f 0b20 	mov.w	fp, #32
    1650:	e001      	b.n	1656 <z_cbvprintf_impl+0x4e2>
					pad = '0';
    1652:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1656:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1658:	1e5f      	subs	r7, r3, #1
    165a:	2b00      	cmp	r3, #0
    165c:	dd07      	ble.n	166e <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
    165e:	4629      	mov	r1, r5
    1660:	4658      	mov	r0, fp
    1662:	47b0      	blx	r6
    1664:	2800      	cmp	r0, #0
    1666:	db4c      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    1668:	3401      	adds	r4, #1
				while (width-- > 0) {
    166a:	463b      	mov	r3, r7
    166c:	e7f4      	b.n	1658 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    166e:	f1b8 0f00 	cmp.w	r8, #0
    1672:	d005      	beq.n	1680 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
    1674:	4629      	mov	r1, r5
    1676:	4640      	mov	r0, r8
    1678:	47b0      	blx	r6
    167a:	2800      	cmp	r0, #0
    167c:	db41      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    167e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1680:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1684:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1688:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    168c:	431a      	orrs	r2, r3
    168e:	d005      	beq.n	169c <z_cbvprintf_impl+0x528>
				OUTC('0');
    1690:	4629      	mov	r1, r5
    1692:	2030      	movs	r0, #48	; 0x30
    1694:	47b0      	blx	r6
    1696:	2800      	cmp	r0, #0
    1698:	db33      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    169a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    169c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    16a0:	f013 0f10 	tst.w	r3, #16
    16a4:	d006      	beq.n	16b4 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
    16a6:	4629      	mov	r1, r5
    16a8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    16ac:	47b0      	blx	r6
    16ae:	2800      	cmp	r0, #0
    16b0:	db27      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    16b2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    16b4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    16b6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    16ba:	2b00      	cmp	r3, #0
    16bc:	dd07      	ble.n	16ce <z_cbvprintf_impl+0x55a>
				OUTC('0');
    16be:	4629      	mov	r1, r5
    16c0:	2030      	movs	r0, #48	; 0x30
    16c2:	47b0      	blx	r6
    16c4:	2800      	cmp	r0, #0
    16c6:	db1c      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    16c8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    16ca:	4643      	mov	r3, r8
    16cc:	e7f3      	b.n	16b6 <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
    16ce:	4653      	mov	r3, sl
    16d0:	464a      	mov	r2, r9
    16d2:	4629      	mov	r1, r5
    16d4:	4630      	mov	r0, r6
    16d6:	f00a f9d0 	bl	ba7a <outs>
    16da:	2800      	cmp	r0, #0
    16dc:	db11      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    16de:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    16e0:	2f00      	cmp	r7, #0
    16e2:	dd07      	ble.n	16f4 <z_cbvprintf_impl+0x580>
			OUTC(' ');
    16e4:	4629      	mov	r1, r5
    16e6:	2020      	movs	r0, #32
    16e8:	47b0      	blx	r6
    16ea:	2800      	cmp	r0, #0
    16ec:	db09      	blt.n	1702 <z_cbvprintf_impl+0x58e>
    16ee:	3401      	adds	r4, #1
			--width;
    16f0:	3f01      	subs	r7, #1
    16f2:	e7f5      	b.n	16e0 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
    16f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    16f8:	e544      	b.n	1184 <z_cbvprintf_impl+0x10>
    16fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    16fe:	e541      	b.n	1184 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    1700:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1702:	b011      	add	sp, #68	; 0x44
    1704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1708:	0000f9c1 	.word	0x0000f9c1

0000170c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    170c:	b508      	push	{r3, lr}
    170e:	f04f 0220 	mov.w	r2, #32
    1712:	f3ef 8311 	mrs	r3, BASEPRI
    1716:	f382 8812 	msr	BASEPRI_MAX, r2
    171a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    171e:	f00b f912 	bl	c946 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1722:	4803      	ldr	r0, [pc, #12]	; (1730 <sys_reboot+0x24>)
    1724:	f009 fb1f 	bl	ad66 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1728:	f001 fcca 	bl	30c0 <arch_cpu_idle>
    172c:	e7fc      	b.n	1728 <sys_reboot+0x1c>
    172e:	bf00      	nop
    1730:	0000f9c4 	.word	0x0000f9c4

00001734 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1734:	b168      	cbz	r0, 1752 <nrfx_coredep_delay_us+0x1e>
{
    1736:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1738:	4a06      	ldr	r2, [pc, #24]	; (1754 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    173a:	4b07      	ldr	r3, [pc, #28]	; (1758 <nrfx_coredep_delay_us+0x24>)
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	4907      	ldr	r1, [pc, #28]	; (175c <nrfx_coredep_delay_us+0x28>)
    1740:	fba1 1303 	umull	r1, r3, r1, r3
    1744:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    1746:	fb00 f003 	mul.w	r0, r0, r3
    174a:	f042 0301 	orr.w	r3, r2, #1
    174e:	4798      	blx	r3
}
    1750:	bd08      	pop	{r3, pc}
    1752:	4770      	bx	lr
    1754:	0000f8a0 	.word	0x0000f8a0
    1758:	20000124 	.word	0x20000124
    175c:	431bde83 	.word	0x431bde83

00001760 <nrf_gpio_pin_control_select>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1760:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    1764:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1766:	2801      	cmp	r0, #1
    1768:	d00a      	beq.n	1780 <nrf_gpio_pin_control_select+0x20>
        case 0: return NRF_P0;
    176a:	4806      	ldr	r0, [pc, #24]	; (1784 <nrf_gpio_pin_control_select+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    176c:	3280      	adds	r2, #128	; 0x80
    176e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    1772:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1776:	ea43 7101 	orr.w	r1, r3, r1, lsl #28
    177a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    177e:	4770      	bx	lr
        case 1: return NRF_P1;
    1780:	4801      	ldr	r0, [pc, #4]	; (1788 <nrf_gpio_pin_control_select+0x28>)
    1782:	e7f3      	b.n	176c <nrf_gpio_pin_control_select+0xc>
    1784:	50842500 	.word	0x50842500
    1788:	50842800 	.word	0x50842800

0000178c <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    178c:	b538      	push	{r3, r4, r5, lr}
    178e:	f04f 0320 	mov.w	r3, #32
    1792:	f3ef 8511 	mrs	r5, BASEPRI
    1796:	f383 8812 	msr	BASEPRI_MAX, r3
    179a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    179e:	2101      	movs	r1, #1
    17a0:	4b16      	ldr	r3, [pc, #88]	; (17fc <nordicsemi_nrf53_init+0x70>)
    17a2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    17a6:	4a16      	ldr	r2, [pc, #88]	; (1800 <nordicsemi_nrf53_init+0x74>)
    17a8:	2302      	movs	r3, #2
    17aa:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    17ae:	4815      	ldr	r0, [pc, #84]	; (1804 <nordicsemi_nrf53_init+0x78>)
    17b0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    17b4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    17b8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    17bc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    17c0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    17c4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    17c8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    17cc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    17d0:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    17d4:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    17d8:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
#if defined(NRF_GPIO_FORWARDER_FOR_NRF5340_CPUAPP_ENABLED)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
    17dc:	2400      	movs	r4, #0
    17de:	e005      	b.n	17ec <nordicsemi_nrf53_init+0x60>

#if NRF_GPIO_HAS_SEL
static inline void soc_secure_gpio_pin_mcu_select(uint32_t pin_number,
						  nrf_gpio_pin_sel_t mcu)
{
	nrf_gpio_pin_control_select(pin_number, mcu);
    17e0:	2101      	movs	r1, #1
    17e2:	4b09      	ldr	r3, [pc, #36]	; (1808 <nordicsemi_nrf53_init+0x7c>)
    17e4:	5d18      	ldrb	r0, [r3, r4]
    17e6:	f7ff ffbb 	bl	1760 <nrf_gpio_pin_control_select>
    17ea:	3401      	adds	r4, #1
    17ec:	2c03      	cmp	r4, #3
    17ee:	d9f7      	bls.n	17e0 <nordicsemi_nrf53_init+0x54>
	__asm__ volatile(
    17f0:	f385 8811 	msr	BASEPRI, r5
    17f4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    17f8:	2000      	movs	r0, #0
    17fa:	bd38      	pop	{r3, r4, r5, pc}
    17fc:	50001000 	.word	0x50001000
    1800:	50004000 	.word	0x50004000
    1804:	50842500 	.word	0x50842500
    1808:	0000f9f0 	.word	0x0000f9f0

0000180c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    180c:	2806      	cmp	r0, #6
    180e:	d000      	beq.n	1812 <pm_state_set+0x6>
    1810:	4770      	bx	lr
{
    1812:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
    1814:	4801      	ldr	r0, [pc, #4]	; (181c <pm_state_set+0x10>)
    1816:	f00a fbce 	bl	bfb6 <nrf_regulators_system_off>
    181a:	bf00      	nop
    181c:	50004000 	.word	0x50004000

00001820 <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
    1820:	b500      	push	{lr}
    1822:	b083      	sub	sp, #12
    1824:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
    1826:	4b08      	ldr	r3, [pc, #32]	; (1848 <mbox_rx_init+0x28>)
    1828:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
    182a:	2308      	movs	r3, #8
    182c:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
    182e:	4907      	ldr	r1, [pc, #28]	; (184c <mbox_rx_init+0x2c>)
    1830:	4668      	mov	r0, sp
    1832:	f00a fbcd 	bl	bfd0 <mbox_register_callback>
	if (err < 0) {
    1836:	2800      	cmp	r0, #0
    1838:	db03      	blt.n	1842 <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
    183a:	2101      	movs	r1, #1
    183c:	4668      	mov	r0, sp
    183e:	f00a fbd6 	bl	bfee <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
    1842:	b003      	add	sp, #12
    1844:	f85d fb04 	ldr.w	pc, [sp], #4
    1848:	0000f498 	.word	0x0000f498
    184c:	0000c01d 	.word	0x0000c01d

00001850 <free_resources>:
{
    1850:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    1852:	b2c4      	uxtb	r4, r0
    1854:	2301      	movs	r3, #1
    1856:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    1858:	4a05      	ldr	r2, [pc, #20]	; (1870 <free_resources+0x20>)
    185a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    185e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    1862:	f004 fedb 	bl	661c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    1866:	4620      	mov	r0, r4
    1868:	f005 fcaa 	bl	71c0 <nrfx_dppi_channel_free>
}
    186c:	bd10      	pop	{r4, pc}
    186e:	bf00      	nop
    1870:	50017000 	.word	0x50017000

00001874 <ppi_rtc_to_ipc>:
{
    1874:	b538      	push	{r3, r4, r5, lr}
    1876:	4604      	mov	r4, r0
    1878:	460d      	mov	r5, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    187a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    187e:	f004 fd7d 	bl	637c <z_nrf_rtc_timer_compare_evt_address_get>
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
    1882:	f3c4 4307 	ubfx	r3, r4, #16, #8
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    1886:	009b      	lsls	r3, r3, #2
    1888:	b2db      	uxtb	r3, r3
	if (setup) {
    188a:	b13d      	cbz	r5, 189c <ppi_rtc_to_ipc+0x28>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
    188c:	b2e4      	uxtb	r4, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    188e:	4a06      	ldr	r2, [pc, #24]	; (18a8 <ppi_rtc_to_ipc+0x34>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    1890:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    1894:	50d4      	str	r4, [r2, r3]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    1896:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
    189a:	bd38      	pop	{r3, r4, r5, pc}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    189c:	2100      	movs	r1, #0
    189e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    18a2:	4a01      	ldr	r2, [pc, #4]	; (18a8 <ppi_rtc_to_ipc+0x34>)
    18a4:	50d1      	str	r1, [r2, r3]
    18a6:	e7f8      	b.n	189a <ppi_rtc_to_ipc+0x26>
    18a8:	5002a080 	.word	0x5002a080

000018ac <ppi_ipc_to_rtc>:
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	4605      	mov	r5, r0
    18b0:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
    18b2:	0e04      	lsrs	r4, r0, #24
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    18b4:	00a4      	lsls	r4, r4, #2
    18b6:	f504 7480 	add.w	r4, r4, #256	; 0x100
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    18ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
    18be:	f00b ffc5 	bl	d84c <z_nrf_rtc_timer_capture_task_address_get>
	if (setup) {
    18c2:	b146      	cbz	r6, 18d6 <ppi_ipc_to_rtc+0x2a>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
    18c4:	b2ed      	uxtb	r5, r5
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    18c6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    18ca:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    18ce:	b2a4      	uxth	r4, r4
    18d0:	4b04      	ldr	r3, [pc, #16]	; (18e4 <ppi_ipc_to_rtc+0x38>)
    18d2:	511d      	str	r5, [r3, r4]
}
    18d4:	bd70      	pop	{r4, r5, r6, pc}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    18d6:	2200      	movs	r2, #0
    18d8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    18dc:	b2a4      	uxth	r4, r4
    18de:	4b01      	ldr	r3, [pc, #4]	; (18e4 <ppi_ipc_to_rtc+0x38>)
    18e0:	511a      	str	r2, [r3, r4]
    18e2:	e7f7      	b.n	18d4 <ppi_ipc_to_rtc+0x28>
    18e4:	5002a080 	.word	0x5002a080

000018e8 <remote_callback>:
{
    18e8:	b570      	push	{r4, r5, r6, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    18ee:	f3c0 2607 	ubfx	r6, r0, #8, #8
    18f2:	4630      	mov	r0, r6
    18f4:	f004 fd4a 	bl	638c <z_nrf_rtc_timer_compare_read>
    18f8:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
    18fa:	2100      	movs	r1, #0
    18fc:	4620      	mov	r0, r4
    18fe:	f7ff ffd5 	bl	18ac <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
    1902:	2101      	movs	r1, #1
    1904:	4620      	mov	r0, r4
    1906:	f7ff ffb5 	bl	1874 <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    190a:	f105 0232 	add.w	r2, r5, #50	; 0x32
    190e:	9401      	str	r4, [sp, #4]
    1910:	4b04      	ldr	r3, [pc, #16]	; (1924 <remote_callback+0x3c>)
    1912:	9300      	str	r3, [sp, #0]
    1914:	0052      	lsls	r2, r2, #1
    1916:	2300      	movs	r3, #0
    1918:	4630      	mov	r0, r6
    191a:	f00b ffbb 	bl	d894 <z_nrf_rtc_timer_set>
}
    191e:	b002      	add	sp, #8
    1920:	bd70      	pop	{r4, r5, r6, pc}
    1922:	bf00      	nop
    1924:	0000c009 	.word	0x0000c009

00001928 <sync_rtc_setup>:
	return ipm_set_enabled(ipm_dev, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	b083      	sub	sp, #12
    192c:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    192e:	1d38      	adds	r0, r7, #4
    1930:	f005 fc3e 	bl	71b0 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    1934:	4b31      	ldr	r3, [pc, #196]	; (19fc <sync_rtc_setup+0xd4>)
    1936:	4298      	cmp	r0, r3
    1938:	d03b      	beq.n	19b2 <sync_rtc_setup+0x8a>
		rv = -ENODEV;
    193a:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    193e:	466d      	mov	r5, sp
    1940:	b088      	sub	sp, #32
    1942:	466b      	mov	r3, sp
    1944:	f113 0210 	adds.w	r2, r3, #16
    1948:	d052      	beq.n	19f0 <sync_rtc_setup+0xc8>
    194a:	210c      	movs	r1, #12
    194c:	b13a      	cbz	r2, 195e <sync_rtc_setup+0x36>
    194e:	4608      	mov	r0, r1
    1950:	2904      	cmp	r1, #4
    1952:	dd01      	ble.n	1958 <sync_rtc_setup+0x30>
    1954:	4e2a      	ldr	r6, [pc, #168]	; (1a00 <sync_rtc_setup+0xd8>)
    1956:	615e      	str	r6, [r3, #20]
    1958:	2808      	cmp	r0, #8
    195a:	dd00      	ble.n	195e <sync_rtc_setup+0x36>
    195c:	619c      	str	r4, [r3, #24]
    195e:	290b      	cmp	r1, #11
    1960:	dd49      	ble.n	19f6 <sync_rtc_setup+0xce>
    1962:	f04f 0c0c 	mov.w	ip, #12
    1966:	b13a      	cbz	r2, 1978 <sync_rtc_setup+0x50>
    1968:	2103      	movs	r1, #3
    196a:	7039      	strb	r1, [r7, #0]
    196c:	2100      	movs	r1, #0
    196e:	7079      	strb	r1, [r7, #1]
    1970:	70b9      	strb	r1, [r7, #2]
    1972:	70f9      	strb	r1, [r7, #3]
    1974:	6838      	ldr	r0, [r7, #0]
    1976:	6118      	str	r0, [r3, #16]
    1978:	2100      	movs	r1, #0
    197a:	f36f 0100 	bfc	r1, #0, #1
    197e:	f36f 0141 	bfc	r1, #1, #1
    1982:	f36f 0182 	bfc	r1, #2, #1
    1986:	f36f 01c5 	bfc	r1, #3, #3
    198a:	2301      	movs	r3, #1
    198c:	f363 1188 	bfi	r1, r3, #6, #3
    1990:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    1994:	f36c 2152 	bfi	r1, ip, #9, #10
    1998:	f36f 41de 	bfc	r1, #19, #12
    199c:	f36f 71df 	bfc	r1, #31, #1
    19a0:	2300      	movs	r3, #0
    19a2:	4818      	ldr	r0, [pc, #96]	; (1a04 <sync_rtc_setup+0xdc>)
    19a4:	f00a fbbb 	bl	c11e <z_impl_z_log_msg_static_create>
    19a8:	46ad      	mov	sp, r5
	}

	return rv;
}
    19aa:	4620      	mov	r0, r4
    19ac:	370c      	adds	r7, #12
    19ae:	46bd      	mov	sp, r7
    19b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    19b2:	f004 fe0b 	bl	65cc <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    19b6:	1e04      	subs	r4, r0, #0
    19b8:	db16      	blt.n	19e8 <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    19ba:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    19bc:	2307      	movs	r3, #7
    19be:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
    19c0:	2308      	movs	r3, #8
    19c2:	71fb      	strb	r3, [r7, #7]
	rv = IS_ENABLED(CONFIG_MBOX) ? mbox_rx_init((void *)channels.raw) :
    19c4:	6878      	ldr	r0, [r7, #4]
    19c6:	f7ff ff2b 	bl	1820 <mbox_rx_init>
	if (rv < 0) {
    19ca:	1e04      	subs	r4, r0, #0
    19cc:	dbb7      	blt.n	193e <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    19ce:	793b      	ldrb	r3, [r7, #4]
    19d0:	2101      	movs	r1, #1
    19d2:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
    19d6:	4a0c      	ldr	r2, [pc, #48]	; (1a08 <sync_rtc_setup+0xe0>)
    19d8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    19dc:	6878      	ldr	r0, [r7, #4]
    19de:	f7ff ff65 	bl	18ac <ppi_ipc_to_rtc>
	if (rv != 0) {
    19e2:	2c00      	cmp	r4, #0
    19e4:	d0e1      	beq.n	19aa <sync_rtc_setup+0x82>
    19e6:	e7aa      	b.n	193e <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
    19e8:	7938      	ldrb	r0, [r7, #4]
    19ea:	f005 fbe9 	bl	71c0 <nrfx_dppi_channel_free>
		goto bail;
    19ee:	e7f8      	b.n	19e2 <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    19f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    19f4:	e7aa      	b.n	194c <sync_rtc_setup+0x24>
    19f6:	f06f 0c1b 	mvn.w	ip, #27
    19fa:	e7b4      	b.n	1966 <sync_rtc_setup+0x3e>
    19fc:	0bad0000 	.word	0x0bad0000
    1a00:	0000f9f8 	.word	0x0000f9f8
    1a04:	0000f7e0 	.word	0x0000f7e0
    1a08:	50017000 	.word	0x50017000

00001a0c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1a0c:	f005 ba68 	b.w	6ee0 <SystemInit>

00001a10 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msg_generic *msg)
{
    1a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a12:	4606      	mov	r6, r0
	struct log_backend const *backend;

	for (int i = 0; i < log_backend_count_get(); i++) {
    1a14:	2400      	movs	r4, #0
    1a16:	e000      	b.n	1a1a <msg_process+0xa>
    1a18:	3401      	adds	r4, #1
    1a1a:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <msg_process+0x44>)
    1a1c:	4a0e      	ldr	r2, [pc, #56]	; (1a58 <msg_process+0x48>)
    1a1e:	1a9b      	subs	r3, r3, r2
    1a20:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1a24:	da14      	bge.n	1a50 <msg_process+0x40>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1a26:	4d0c      	ldr	r5, [pc, #48]	; (1a58 <msg_process+0x48>)
    1a28:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1a2c:	686b      	ldr	r3, [r5, #4]
    1a2e:	795b      	ldrb	r3, [r3, #5]
		backend = log_backend_get(i);
		if (log_backend_is_active(backend) &&
    1a30:	2b00      	cmp	r3, #0
    1a32:	d0f1      	beq.n	1a18 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    1a34:	4631      	mov	r1, r6
    1a36:	4628      	mov	r0, r5
    1a38:	f00a fb11 	bl	c05e <msg_filter_check>
		if (log_backend_is_active(backend) &&
    1a3c:	2800      	cmp	r0, #0
    1a3e:	d0eb      	beq.n	1a18 <msg_process+0x8>
	backend->api->process(backend, msg);
    1a40:	0127      	lsls	r7, r4, #4
    1a42:	4b05      	ldr	r3, [pc, #20]	; (1a58 <msg_process+0x48>)
    1a44:	59db      	ldr	r3, [r3, r7]
    1a46:	681b      	ldr	r3, [r3, #0]
    1a48:	4631      	mov	r1, r6
    1a4a:	4628      	mov	r0, r5
    1a4c:	4798      	blx	r3
}
    1a4e:	e7e3      	b.n	1a18 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    1a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a52:	bf00      	nop
    1a54:	0000f808 	.word	0x0000f808
    1a58:	0000f7f8 	.word	0x0000f7f8

00001a5c <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    1a5c:	b570      	push	{r4, r5, r6, lr}
    1a5e:	4606      	mov	r6, r0
    1a60:	460d      	mov	r5, r1
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a62:	2400      	movs	r4, #0
    1a64:	e003      	b.n	1a6e <log_backend_notify_all+0x12>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    1a66:	462a      	mov	r2, r5
    1a68:	4631      	mov	r1, r6
    1a6a:	4798      	blx	r3
    1a6c:	3401      	adds	r4, #1
    1a6e:	4b08      	ldr	r3, [pc, #32]	; (1a90 <log_backend_notify_all+0x34>)
    1a70:	4a08      	ldr	r2, [pc, #32]	; (1a94 <log_backend_notify_all+0x38>)
    1a72:	1a9b      	subs	r3, r3, r2
    1a74:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1a78:	da08      	bge.n	1a8c <log_backend_notify_all+0x30>
	return &__log_backends_start[idx];
    1a7a:	0123      	lsls	r3, r4, #4
    1a7c:	4a05      	ldr	r2, [pc, #20]	; (1a94 <log_backend_notify_all+0x38>)
    1a7e:	eb02 1004 	add.w	r0, r2, r4, lsl #4
	if (backend->api->notify) {
    1a82:	58d3      	ldr	r3, [r2, r3]
    1a84:	699b      	ldr	r3, [r3, #24]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d1ed      	bne.n	1a66 <log_backend_notify_all+0xa>
    1a8a:	e7ef      	b.n	1a6c <log_backend_notify_all+0x10>
		const struct log_backend *backend = log_backend_get(i);

		log_backend_notify(backend, event, arg);
	}
}
    1a8c:	bd70      	pop	{r4, r5, r6, pc}
    1a8e:	bf00      	nop
    1a90:	0000f808 	.word	0x0000f808
    1a94:	0000f7f8 	.word	0x0000f7f8

00001a98 <activate_foreach_backend>:
{
    1a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a9c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    1a9e:	4605      	mov	r5, r0
	while (mask_cpy) {
    1aa0:	e00a      	b.n	1ab8 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    1aa2:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    1aa6:	4b14      	ldr	r3, [pc, #80]	; (1af8 <activate_foreach_backend+0x60>)
    1aa8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    1aac:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1aae:	2204      	movs	r2, #4
    1ab0:	6819      	ldr	r1, [r3, #0]
    1ab2:	4620      	mov	r0, r4
    1ab4:	f000 fa60 	bl	1f78 <log_backend_enable>
	while (mask_cpy) {
    1ab8:	b1d5      	cbz	r5, 1af0 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    1aba:	fa95 f6a5 	rbit	r6, r5
    1abe:	fab6 f686 	clz	r6, r6
	return &__log_backends_start[idx];
    1ac2:	4c0d      	ldr	r4, [pc, #52]	; (1af8 <activate_foreach_backend+0x60>)
    1ac4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    1ac8:	2301      	movs	r3, #1
    1aca:	40b3      	lsls	r3, r6
    1acc:	ea6f 0803 	mvn.w	r8, r3
    1ad0:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1ad4:	7b23      	ldrb	r3, [r4, #12]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d0ee      	beq.n	1ab8 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    1ada:	0133      	lsls	r3, r6, #4
    1adc:	4a06      	ldr	r2, [pc, #24]	; (1af8 <activate_foreach_backend+0x60>)
    1ade:	58d3      	ldr	r3, [r2, r3]
    1ae0:	691b      	ldr	r3, [r3, #16]
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d0dd      	beq.n	1aa2 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    1ae6:	4620      	mov	r0, r4
    1ae8:	4798      	blx	r3
    1aea:	2800      	cmp	r0, #0
    1aec:	d1e4      	bne.n	1ab8 <activate_foreach_backend+0x20>
    1aee:	e7d8      	b.n	1aa2 <activate_foreach_backend+0xa>
}
    1af0:	4638      	mov	r0, r7
    1af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1af6:	bf00      	nop
    1af8:	0000f7f8 	.word	0x0000f7f8

00001afc <z_log_init>:
{
    1afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b00:	4680      	mov	r8, r0
    1b02:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1b04:	4b24      	ldr	r3, [pc, #144]	; (1b98 <z_log_init+0x9c>)
    1b06:	e8d3 6fef 	ldaex	r6, [r3]
    1b0a:	1c72      	adds	r2, r6, #1
    1b0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1b10:	2900      	cmp	r1, #0
    1b12:	d1f8      	bne.n	1b06 <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
    1b14:	2e00      	cmp	r6, #0
    1b16:	d13b      	bne.n	1b90 <z_log_init+0x94>
	for (i = 0; i < log_backend_count_get(); i++) {
    1b18:	2400      	movs	r4, #0
    1b1a:	e009      	b.n	1b30 <z_log_init+0x34>
						   backend->cb->ctx,
    1b1c:	4b1f      	ldr	r3, [pc, #124]	; (1b9c <z_log_init+0xa0>)
    1b1e:	eb03 1309 	add.w	r3, r3, r9, lsl #4
    1b22:	685b      	ldr	r3, [r3, #4]
				log_backend_enable(backend,
    1b24:	2204      	movs	r2, #4
    1b26:	6819      	ldr	r1, [r3, #0]
    1b28:	4628      	mov	r0, r5
    1b2a:	f000 fa25 	bl	1f78 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1b2e:	3401      	adds	r4, #1
    1b30:	4b1b      	ldr	r3, [pc, #108]	; (1ba0 <z_log_init+0xa4>)
    1b32:	4a1a      	ldr	r2, [pc, #104]	; (1b9c <z_log_init+0xa0>)
    1b34:	1a9b      	subs	r3, r3, r2
    1b36:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1b3a:	da1b      	bge.n	1b74 <z_log_init+0x78>
		const struct log_backend *backend = log_backend_get(i);
    1b3c:	46a1      	mov	r9, r4
	return &__log_backends_start[idx];
    1b3e:	4d17      	ldr	r5, [pc, #92]	; (1b9c <z_log_init+0xa0>)
    1b40:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1b44:	7b2b      	ldrb	r3, [r5, #12]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d0f1      	beq.n	1b2e <z_log_init+0x32>
	if (backend->api->init) {
    1b4a:	0123      	lsls	r3, r4, #4
    1b4c:	4a13      	ldr	r2, [pc, #76]	; (1b9c <z_log_init+0xa0>)
    1b4e:	f852 a003 	ldr.w	sl, [r2, r3]
    1b52:	f8da 300c 	ldr.w	r3, [sl, #12]
    1b56:	b10b      	cbz	r3, 1b5c <z_log_init+0x60>
		backend->api->init(backend);
    1b58:	4628      	mov	r0, r5
    1b5a:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1b5c:	f8da 3010 	ldr.w	r3, [sl, #16]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d0db      	beq.n	1b1c <z_log_init+0x20>
		return backend->api->is_ready(backend);
    1b64:	4628      	mov	r0, r5
    1b66:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1b68:	2800      	cmp	r0, #0
    1b6a:	d0d7      	beq.n	1b1c <z_log_init+0x20>
				mask |= BIT(i);
    1b6c:	2301      	movs	r3, #1
    1b6e:	40a3      	lsls	r3, r4
    1b70:	431e      	orrs	r6, r3
    1b72:	e7dc      	b.n	1b2e <z_log_init+0x32>
	if (blocking) {
    1b74:	f1b8 0f00 	cmp.w	r8, #0
    1b78:	d00b      	beq.n	1b92 <z_log_init+0x96>
		while (mask) {
    1b7a:	b156      	cbz	r6, 1b92 <z_log_init+0x96>
			mask = activate_foreach_backend(mask);
    1b7c:	4630      	mov	r0, r6
    1b7e:	f7ff ff8b 	bl	1a98 <activate_foreach_backend>
    1b82:	4606      	mov	r6, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1b84:	2f00      	cmp	r7, #0
    1b86:	d0f8      	beq.n	1b7a <z_log_init+0x7e>
				k_msleep(10);
    1b88:	200a      	movs	r0, #10
    1b8a:	f00a fa6e 	bl	c06a <k_msleep>
    1b8e:	e7f4      	b.n	1b7a <z_log_init+0x7e>
		return 0;
    1b90:	2600      	movs	r6, #0
}
    1b92:	4630      	mov	r0, r6
    1b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b98:	20000e9c 	.word	0x20000e9c
    1b9c:	0000f7f8 	.word	0x0000f7f8
    1ba0:	0000f808 	.word	0x0000f808

00001ba4 <thread_set>:
{
    1ba4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <thread_set+0x1c>)
    1ba8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1baa:	b118      	cbz	r0, 1bb4 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1bac:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <thread_set+0x20>)
    1bae:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    1bb0:	2b09      	cmp	r3, #9
    1bb2:	dc00      	bgt.n	1bb6 <thread_set+0x12>
}
    1bb4:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1bb6:	4804      	ldr	r0, [pc, #16]	; (1bc8 <thread_set+0x24>)
    1bb8:	f007 fed0 	bl	995c <z_impl_k_sem_give>
}
    1bbc:	e7fa      	b.n	1bb4 <thread_set+0x10>
    1bbe:	bf00      	nop
    1bc0:	20000e90 	.word	0x20000e90
    1bc4:	20000e98 	.word	0x20000e98
    1bc8:	200002ec 	.word	0x200002ec

00001bcc <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1bcc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    1bce:	4802      	ldr	r0, [pc, #8]	; (1bd8 <log_process_thread_timer_expiry_fn+0xc>)
    1bd0:	f007 fec4 	bl	995c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    1bd4:	bd08      	pop	{r3, pc}
    1bd6:	bf00      	nop
    1bd8:	200002ec 	.word	0x200002ec

00001bdc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1bdc:	b530      	push	{r4, r5, lr}
    1bde:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1be0:	2200      	movs	r2, #0
    1be2:	490f      	ldr	r1, [pc, #60]	; (1c20 <enable_logger+0x44>)
    1be4:	480f      	ldr	r0, [pc, #60]	; (1c24 <enable_logger+0x48>)
    1be6:	f00d fb20 	bl	f22a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1bea:	4d0f      	ldr	r5, [pc, #60]	; (1c28 <enable_logger+0x4c>)
    1bec:	2200      	movs	r2, #0
    1bee:	2300      	movs	r3, #0
    1bf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1bf4:	2400      	movs	r4, #0
    1bf6:	9404      	str	r4, [sp, #16]
    1bf8:	230e      	movs	r3, #14
    1bfa:	9303      	str	r3, [sp, #12]
    1bfc:	9402      	str	r4, [sp, #8]
    1bfe:	9401      	str	r4, [sp, #4]
    1c00:	9400      	str	r4, [sp, #0]
    1c02:	4b0a      	ldr	r3, [pc, #40]	; (1c2c <enable_logger+0x50>)
    1c04:	f44f 7240 	mov.w	r2, #768	; 0x300
    1c08:	4909      	ldr	r1, [pc, #36]	; (1c30 <enable_logger+0x54>)
    1c0a:	4628      	mov	r0, r5
    1c0c:	f00c fffb 	bl	ec06 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1c10:	4908      	ldr	r1, [pc, #32]	; (1c34 <enable_logger+0x58>)
    1c12:	4628      	mov	r0, r5
    1c14:	f007 fcfa 	bl	960c <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1c18:	4620      	mov	r0, r4
    1c1a:	b009      	add	sp, #36	; 0x24
    1c1c:	bd30      	pop	{r4, r5, pc}
    1c1e:	bf00      	nop
    1c20:	00001bcd 	.word	0x00001bcd
    1c24:	200007b0 	.word	0x200007b0
    1c28:	20000300 	.word	0x20000300
    1c2c:	00001ee9 	.word	0x00001ee9
    1c30:	20001d30 	.word	0x20001d30
    1c34:	0000fa2c 	.word	0x0000fa2c

00001c38 <log_format_func_t_get>:
}
    1c38:	4b01      	ldr	r3, [pc, #4]	; (1c40 <log_format_func_t_get+0x8>)
    1c3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1c3e:	4770      	bx	lr
    1c40:	0000fa48 	.word	0x0000fa48

00001c44 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1c44:	b138      	cbz	r0, 1c56 <log_set_timestamp_func+0x12>
{
    1c46:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1c48:	4a04      	ldr	r2, [pc, #16]	; (1c5c <log_set_timestamp_func+0x18>)
    1c4a:	6010      	str	r0, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1c4c:	4608      	mov	r0, r1
    1c4e:	f000 fbad 	bl	23ac <log_output_timestamp_freq_set>
	return 0;
    1c52:	2000      	movs	r0, #0
}
    1c54:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1c56:	f06f 0015 	mvn.w	r0, #21
}
    1c5a:	4770      	bx	lr
    1c5c:	2000001c 	.word	0x2000001c

00001c60 <z_log_notify_backend_enabled>:
{
    1c60:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1c62:	4b05      	ldr	r3, [pc, #20]	; (1c78 <z_log_notify_backend_enabled+0x18>)
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	b11b      	cbz	r3, 1c70 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1c68:	4b03      	ldr	r3, [pc, #12]	; (1c78 <z_log_notify_backend_enabled+0x18>)
    1c6a:	2201      	movs	r2, #1
    1c6c:	701a      	strb	r2, [r3, #0]
}
    1c6e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1c70:	4802      	ldr	r0, [pc, #8]	; (1c7c <z_log_notify_backend_enabled+0x1c>)
    1c72:	f007 fe73 	bl	995c <z_impl_k_sem_give>
}
    1c76:	e7f7      	b.n	1c68 <z_log_notify_backend_enabled+0x8>
    1c78:	20001d24 	.word	0x20001d24
    1c7c:	200002ec 	.word	0x200002ec

00001c80 <z_log_dropped>:
    1c80:	4b09      	ldr	r3, [pc, #36]	; (1ca8 <z_log_dropped+0x28>)
    1c82:	e8d3 1fef 	ldaex	r1, [r3]
    1c86:	3101      	adds	r1, #1
    1c88:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1c8c:	2a00      	cmp	r2, #0
    1c8e:	d1f8      	bne.n	1c82 <z_log_dropped+0x2>
	if (buffered) {
    1c90:	b900      	cbnz	r0, 1c94 <z_log_dropped+0x14>
}
    1c92:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c94:	4b05      	ldr	r3, [pc, #20]	; (1cac <z_log_dropped+0x2c>)
    1c96:	e8d3 1fef 	ldaex	r1, [r3]
    1c9a:	3901      	subs	r1, #1
    1c9c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1ca0:	2a00      	cmp	r2, #0
    1ca2:	d0f6      	beq.n	1c92 <z_log_dropped+0x12>
    1ca4:	e7f7      	b.n	1c96 <z_log_dropped+0x16>
    1ca6:	bf00      	nop
    1ca8:	20000e94 	.word	0x20000e94
    1cac:	20000e98 	.word	0x20000e98

00001cb0 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <z_log_dropped_read_and_clear+0x14>)
}
    1cb2:	2000      	movs	r0, #0
    1cb4:	4601      	mov	r1, r0
    1cb6:	e8d3 0fef 	ldaex	r0, [r3]
    1cba:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1cbe:	2a00      	cmp	r2, #0
    1cc0:	d1f9      	bne.n	1cb6 <z_log_dropped_read_and_clear+0x6>
    1cc2:	4770      	bx	lr
    1cc4:	20000e94 	.word	0x20000e94

00001cc8 <dropped_notify>:
{
    1cc8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1cca:	f7ff fff1 	bl	1cb0 <z_log_dropped_read_and_clear>
    1cce:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    1cd0:	2400      	movs	r4, #0
    1cd2:	e000      	b.n	1cd6 <dropped_notify+0xe>
    1cd4:	3401      	adds	r4, #1
    1cd6:	4b0b      	ldr	r3, [pc, #44]	; (1d04 <dropped_notify+0x3c>)
    1cd8:	4a0b      	ldr	r2, [pc, #44]	; (1d08 <dropped_notify+0x40>)
    1cda:	1a9b      	subs	r3, r3, r2
    1cdc:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1ce0:	da0f      	bge.n	1d02 <dropped_notify+0x3a>
	return &__log_backends_start[idx];
    1ce2:	4809      	ldr	r0, [pc, #36]	; (1d08 <dropped_notify+0x40>)
    1ce4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1ce8:	6843      	ldr	r3, [r0, #4]
    1cea:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1cec:	2b00      	cmp	r3, #0
    1cee:	d0f1      	beq.n	1cd4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1cf0:	0123      	lsls	r3, r4, #4
    1cf2:	4a05      	ldr	r2, [pc, #20]	; (1d08 <dropped_notify+0x40>)
    1cf4:	58d3      	ldr	r3, [r2, r3]
    1cf6:	685b      	ldr	r3, [r3, #4]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d0eb      	beq.n	1cd4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1cfc:	4629      	mov	r1, r5
    1cfe:	4798      	blx	r3
    1d00:	e7e8      	b.n	1cd4 <dropped_notify+0xc>
}
    1d02:	bd38      	pop	{r3, r4, r5, pc}
    1d04:	0000f808 	.word	0x0000f808
    1d08:	0000f7f8 	.word	0x0000f7f8

00001d0c <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <z_log_dropped_pending+0x10>)
    1d0e:	6818      	ldr	r0, [r3, #0]
}
    1d10:	2800      	cmp	r0, #0
    1d12:	bfd4      	ite	le
    1d14:	2000      	movle	r0, #0
    1d16:	2001      	movgt	r0, #1
    1d18:	4770      	bx	lr
    1d1a:	bf00      	nop
    1d1c:	20000e94 	.word	0x20000e94

00001d20 <z_log_msg_init>:
{
    1d20:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1d22:	4902      	ldr	r1, [pc, #8]	; (1d2c <z_log_msg_init+0xc>)
    1d24:	4802      	ldr	r0, [pc, #8]	; (1d30 <z_log_msg_init+0x10>)
    1d26:	f009 ffaf 	bl	bc88 <mpsc_pbuf_init>
}
    1d2a:	bd08      	pop	{r3, pc}
    1d2c:	0000fa34 	.word	0x0000fa34
    1d30:	20000e58 	.word	0x20000e58

00001d34 <log_core_init>:
{
    1d34:	b508      	push	{r3, lr}
	panic_mode = false;
    1d36:	2300      	movs	r3, #0
    1d38:	4a05      	ldr	r2, [pc, #20]	; (1d50 <log_core_init+0x1c>)
    1d3a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1d3c:	4a05      	ldr	r2, [pc, #20]	; (1d54 <log_core_init+0x20>)
    1d3e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1d44:	4804      	ldr	r0, [pc, #16]	; (1d58 <log_core_init+0x24>)
    1d46:	f7ff ff7d 	bl	1c44 <log_set_timestamp_func>
		z_log_msg_init();
    1d4a:	f7ff ffe9 	bl	1d20 <z_log_msg_init>
}
    1d4e:	bd08      	pop	{r3, pc}
    1d50:	20001d25 	.word	0x20001d25
    1d54:	20000e94 	.word	0x20000e94
    1d58:	0000c063 	.word	0x0000c063

00001d5c <z_log_msg_alloc>:
{
    1d5c:	b508      	push	{r3, lr}
    1d5e:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1d60:	2200      	movs	r2, #0
    1d62:	2300      	movs	r3, #0
    1d64:	4801      	ldr	r0, [pc, #4]	; (1d6c <z_log_msg_alloc+0x10>)
    1d66:	f009 ffb0 	bl	bcca <mpsc_pbuf_alloc>
}
    1d6a:	bd08      	pop	{r3, pc}
    1d6c:	20000e58 	.word	0x20000e58

00001d70 <z_log_msg_claim>:
{
    1d70:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1d72:	4802      	ldr	r0, [pc, #8]	; (1d7c <z_log_msg_claim+0xc>)
    1d74:	f00a f860 	bl	be38 <mpsc_pbuf_claim>
}
    1d78:	bd08      	pop	{r3, pc}
    1d7a:	bf00      	nop
    1d7c:	20000e58 	.word	0x20000e58

00001d80 <z_log_msg_free>:
{
    1d80:	b508      	push	{r3, lr}
    1d82:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1d84:	4801      	ldr	r0, [pc, #4]	; (1d8c <z_log_msg_free+0xc>)
    1d86:	f00a f8c8 	bl	bf1a <mpsc_pbuf_free>
}
    1d8a:	bd08      	pop	{r3, pc}
    1d8c:	20000e58 	.word	0x20000e58

00001d90 <z_log_msg_pending>:
{
    1d90:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
    1d92:	4802      	ldr	r0, [pc, #8]	; (1d9c <z_log_msg_pending+0xc>)
    1d94:	f00a f8fe 	bl	bf94 <mpsc_pbuf_is_pending>
}
    1d98:	bd08      	pop	{r3, pc}
    1d9a:	bf00      	nop
    1d9c:	20000e58 	.word	0x20000e58

00001da0 <z_impl_log_process>:
	if (!backend_attached) {
    1da0:	4b0f      	ldr	r3, [pc, #60]	; (1de0 <z_impl_log_process+0x40>)
    1da2:	7818      	ldrb	r0, [r3, #0]
    1da4:	b900      	cbnz	r0, 1da8 <z_impl_log_process+0x8>
}
    1da6:	4770      	bx	lr
{
    1da8:	b510      	push	{r4, lr}
	msg = z_log_msg_claim();
    1daa:	f7ff ffe1 	bl	1d70 <z_log_msg_claim>
	if (msg) {
    1dae:	4604      	mov	r4, r0
    1db0:	b168      	cbz	r0, 1dce <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1db2:	4b0c      	ldr	r3, [pc, #48]	; (1de4 <z_impl_log_process+0x44>)
    1db4:	e8d3 1fef 	ldaex	r1, [r3]
    1db8:	3901      	subs	r1, #1
    1dba:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1dbe:	2a00      	cmp	r2, #0
    1dc0:	d1f8      	bne.n	1db4 <z_impl_log_process+0x14>
		msg_process(msg);
    1dc2:	4620      	mov	r0, r4
    1dc4:	f7ff fe24 	bl	1a10 <msg_process>
		z_log_msg_free(msg);
    1dc8:	4620      	mov	r0, r4
    1dca:	f7ff ffd9 	bl	1d80 <z_log_msg_free>
	if (z_log_dropped_pending()) {
    1dce:	f7ff ff9d 	bl	1d0c <z_log_dropped_pending>
    1dd2:	b910      	cbnz	r0, 1dda <z_impl_log_process+0x3a>
	return z_log_msg_pending();
    1dd4:	f7ff ffdc 	bl	1d90 <z_log_msg_pending>
}
    1dd8:	bd10      	pop	{r4, pc}
		dropped_notify();
    1dda:	f7ff ff75 	bl	1cc8 <dropped_notify>
    1dde:	e7f9      	b.n	1dd4 <z_impl_log_process+0x34>
    1de0:	20001d24 	.word	0x20001d24
    1de4:	20000e98 	.word	0x20000e98

00001de8 <z_impl_log_panic>:
	if (panic_mode) {
    1de8:	4b13      	ldr	r3, [pc, #76]	; (1e38 <z_impl_log_panic+0x50>)
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	b103      	cbz	r3, 1df0 <z_impl_log_panic+0x8>
    1dee:	4770      	bx	lr
{
    1df0:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    1df2:	2100      	movs	r1, #0
    1df4:	2001      	movs	r0, #1
    1df6:	f7ff fe81 	bl	1afc <z_log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dfa:	2400      	movs	r4, #0
    1dfc:	e000      	b.n	1e00 <z_impl_log_panic+0x18>
    1dfe:	3401      	adds	r4, #1
    1e00:	4b0e      	ldr	r3, [pc, #56]	; (1e3c <z_impl_log_panic+0x54>)
    1e02:	4a0f      	ldr	r2, [pc, #60]	; (1e40 <z_impl_log_panic+0x58>)
    1e04:	1a9b      	subs	r3, r3, r2
    1e06:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1e0a:	da0c      	bge.n	1e26 <z_impl_log_panic+0x3e>
	return &__log_backends_start[idx];
    1e0c:	480c      	ldr	r0, [pc, #48]	; (1e40 <z_impl_log_panic+0x58>)
    1e0e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1e12:	6843      	ldr	r3, [r0, #4]
    1e14:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1e16:	2b00      	cmp	r3, #0
    1e18:	d0f1      	beq.n	1dfe <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    1e1a:	0123      	lsls	r3, r4, #4
    1e1c:	4a08      	ldr	r2, [pc, #32]	; (1e40 <z_impl_log_panic+0x58>)
    1e1e:	58d3      	ldr	r3, [r2, r3]
    1e20:	689b      	ldr	r3, [r3, #8]
    1e22:	4798      	blx	r3
}
    1e24:	e7eb      	b.n	1dfe <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1e26:	f7ff ffbb 	bl	1da0 <z_impl_log_process>
		while (log_process() == true) {
    1e2a:	2800      	cmp	r0, #0
    1e2c:	d1fb      	bne.n	1e26 <z_impl_log_panic+0x3e>
	panic_mode = true;
    1e2e:	4b02      	ldr	r3, [pc, #8]	; (1e38 <z_impl_log_panic+0x50>)
    1e30:	2201      	movs	r2, #1
    1e32:	701a      	strb	r2, [r3, #0]
}
    1e34:	bd10      	pop	{r4, pc}
    1e36:	bf00      	nop
    1e38:	20001d25 	.word	0x20001d25
    1e3c:	0000f808 	.word	0x0000f808
    1e40:	0000f7f8 	.word	0x0000f7f8

00001e44 <z_log_msg_post_finalize>:
{
    1e44:	b510      	push	{r4, lr}
    1e46:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1e48:	4b19      	ldr	r3, [pc, #100]	; (1eb0 <z_log_msg_post_finalize+0x6c>)
    1e4a:	e8d3 2fef 	ldaex	r2, [r3]
    1e4e:	1c51      	adds	r1, r2, #1
    1e50:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1e54:	2800      	cmp	r0, #0
    1e56:	d1f8      	bne.n	1e4a <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
    1e58:	4b16      	ldr	r3, [pc, #88]	; (1eb4 <z_log_msg_post_finalize+0x70>)
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	b963      	cbnz	r3, 1e78 <z_log_msg_post_finalize+0x34>
	} else if (proc_tid != NULL) {
    1e5e:	4b16      	ldr	r3, [pc, #88]	; (1eb8 <z_log_msg_post_finalize+0x74>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	b1bb      	cbz	r3, 1e94 <z_log_msg_post_finalize+0x50>
		if (cnt == 0) {
    1e64:	b1c2      	cbz	r2, 1e98 <z_log_msg_post_finalize+0x54>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1e66:	2a0a      	cmp	r2, #10
    1e68:	d114      	bne.n	1e94 <z_log_msg_post_finalize+0x50>
	z_impl_k_timer_stop(timer);
    1e6a:	4814      	ldr	r0, [pc, #80]	; (1ebc <z_log_msg_post_finalize+0x78>)
    1e6c:	f00d f9e9 	bl	f242 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1e70:	4813      	ldr	r0, [pc, #76]	; (1ec0 <z_log_msg_post_finalize+0x7c>)
    1e72:	f007 fd73 	bl	995c <z_impl_k_sem_give>
}
    1e76:	e00d      	b.n	1e94 <z_log_msg_post_finalize+0x50>
	__asm__ volatile(
    1e78:	f04f 0320 	mov.w	r3, #32
    1e7c:	f3ef 8411 	mrs	r4, BASEPRI
    1e80:	f383 8812 	msr	BASEPRI_MAX, r3
    1e84:	f3bf 8f6f 	isb	sy
    1e88:	f7ff ff8a 	bl	1da0 <z_impl_log_process>
	__asm__ volatile(
    1e8c:	f384 8811 	msr	BASEPRI, r4
    1e90:	f3bf 8f6f 	isb	sy
    1e94:	b002      	add	sp, #8
    1e96:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    1e98:	2200      	movs	r2, #0
    1e9a:	2300      	movs	r3, #0
    1e9c:	e9cd 2300 	strd	r2, r3, [sp]
    1ea0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1ea4:	2300      	movs	r3, #0
    1ea6:	4805      	ldr	r0, [pc, #20]	; (1ebc <z_log_msg_post_finalize+0x78>)
    1ea8:	f008 fc9c 	bl	a7e4 <z_impl_k_timer_start>
    1eac:	e7f2      	b.n	1e94 <z_log_msg_post_finalize+0x50>
    1eae:	bf00      	nop
    1eb0:	20000e98 	.word	0x20000e98
    1eb4:	20001d25 	.word	0x20001d25
    1eb8:	20000e90 	.word	0x20000e90
    1ebc:	200007b0 	.word	0x200007b0
    1ec0:	200002ec 	.word	0x200002ec

00001ec4 <z_log_msg_commit>:
{
    1ec4:	b510      	push	{r4, lr}
    1ec6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1ec8:	4b05      	ldr	r3, [pc, #20]	; (1ee0 <z_log_msg_commit+0x1c>)
    1eca:	681b      	ldr	r3, [r3, #0]
    1ecc:	4798      	blx	r3
    1ece:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    1ed0:	4621      	mov	r1, r4
    1ed2:	4804      	ldr	r0, [pc, #16]	; (1ee4 <z_log_msg_commit+0x20>)
    1ed4:	f009 ff87 	bl	bde6 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    1ed8:	f7ff ffb4 	bl	1e44 <z_log_msg_post_finalize>
}
    1edc:	bd10      	pop	{r4, pc}
    1ede:	bf00      	nop
    1ee0:	2000001c 	.word	0x2000001c
    1ee4:	20000e58 	.word	0x20000e58

00001ee8 <log_process_thread_func>:
{
    1ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1eec:	2100      	movs	r1, #0
    1eee:	4608      	mov	r0, r1
    1ef0:	f7ff fe04 	bl	1afc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1ef4:	4680      	mov	r8, r0
    1ef6:	b140      	cbz	r0, 1f0a <log_process_thread_func+0x22>
    1ef8:	f240 6667 	movw	r6, #1639	; 0x667
    1efc:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    1efe:	f008 fa43 	bl	a388 <z_impl_z_current_get>
	thread_set(k_current_get());
    1f02:	f7ff fe4f 	bl	1ba4 <thread_set>
	bool processed_any = false;
    1f06:	2500      	movs	r5, #0
    1f08:	e015      	b.n	1f36 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1f0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1f0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1f12:	e7f4      	b.n	1efe <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    1f14:	4640      	mov	r0, r8
    1f16:	f7ff fdbf 	bl	1a98 <activate_foreach_backend>
			if (!activate_mask) {
    1f1a:	4680      	mov	r8, r0
    1f1c:	b970      	cbnz	r0, 1f3c <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    1f1e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1f22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1f26:	e009      	b.n	1f3c <log_process_thread_func+0x54>
    1f28:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    1f2a:	4632      	mov	r2, r6
    1f2c:	463b      	mov	r3, r7
    1f2e:	4809      	ldr	r0, [pc, #36]	; (1f54 <log_process_thread_func+0x6c>)
    1f30:	f007 fd38 	bl	99a4 <z_impl_k_sem_take>
{
    1f34:	4625      	mov	r5, r4
		if (activate_mask) {
    1f36:	f1b8 0f00 	cmp.w	r8, #0
    1f3a:	d1eb      	bne.n	1f14 <log_process_thread_func+0x2c>
    1f3c:	f7ff ff30 	bl	1da0 <z_impl_log_process>
		if (log_process() == false) {
    1f40:	4604      	mov	r4, r0
    1f42:	2800      	cmp	r0, #0
    1f44:	d1f6      	bne.n	1f34 <log_process_thread_func+0x4c>
			if (processed_any) {
    1f46:	2d00      	cmp	r5, #0
    1f48:	d0ee      	beq.n	1f28 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    1f4a:	2100      	movs	r1, #0
    1f4c:	4608      	mov	r0, r1
    1f4e:	f7ff fd85 	bl	1a5c <log_backend_notify_all>
    1f52:	e7ea      	b.n	1f2a <log_process_thread_func+0x42>
    1f54:	200002ec 	.word	0x200002ec

00001f58 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f58:	4b05      	ldr	r3, [pc, #20]	; (1f70 <log_source_name_get+0x18>)
    1f5a:	4a06      	ldr	r2, [pc, #24]	; (1f74 <log_source_name_get+0x1c>)
    1f5c:	1a9b      	subs	r3, r3, r2
    1f5e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1f62:	d202      	bcs.n	1f6a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1f64:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1f68:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f6a:	2000      	movs	r0, #0
}
    1f6c:	4770      	bx	lr
    1f6e:	bf00      	nop
    1f70:	0000f7f8 	.word	0x0000f7f8
    1f74:	0000f770 	.word	0x0000f770

00001f78 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1f78:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1f7a:	4b07      	ldr	r3, [pc, #28]	; (1f98 <log_backend_enable+0x20>)
    1f7c:	1ac3      	subs	r3, r0, r3
    1f7e:	111b      	asrs	r3, r3, #4
    1f80:	3301      	adds	r3, #1
	backend->cb->id = id;
    1f82:	6842      	ldr	r2, [r0, #4]
    1f84:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1f86:	6843      	ldr	r3, [r0, #4]
    1f88:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1f8a:	6843      	ldr	r3, [r0, #4]
    1f8c:	2201      	movs	r2, #1
    1f8e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1f90:	f7ff fe66 	bl	1c60 <z_log_notify_backend_enabled>
}
    1f94:	bd08      	pop	{r3, pc}
    1f96:	bf00      	nop
    1f98:	0000f7f8 	.word	0x0000f7f8

00001f9c <cbprintf_package_copy>:
{
    1f9c:	b500      	push	{lr}
    1f9e:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    1fa0:	9205      	str	r2, [sp, #20]
    1fa2:	9306      	str	r3, [sp, #24]
    1fa4:	2300      	movs	r3, #0
    1fa6:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1fa8:	b162      	cbz	r2, 1fc4 <cbprintf_package_copy+0x28>
    1faa:	4a07      	ldr	r2, [pc, #28]	; (1fc8 <cbprintf_package_copy+0x2c>)
    1fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1fae:	9302      	str	r3, [sp, #8]
    1fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fb2:	9301      	str	r3, [sp, #4]
    1fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fb6:	9300      	str	r3, [sp, #0]
    1fb8:	ab05      	add	r3, sp, #20
    1fba:	f7fe fe19 	bl	bf0 <cbprintf_package_convert>
}
    1fbe:	b009      	add	sp, #36	; 0x24
    1fc0:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    1fc4:	2200      	movs	r2, #0
    1fc6:	e7f1      	b.n	1fac <cbprintf_package_copy+0x10>
    1fc8:	0000c0c3 	.word	0x0000c0c3

00001fcc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1fcc:	b40e      	push	{r1, r2, r3}
    1fce:	b500      	push	{lr}
    1fd0:	b084      	sub	sp, #16
    1fd2:	4601      	mov	r1, r0
    1fd4:	ab05      	add	r3, sp, #20
    1fd6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1fda:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1fdc:	2000      	movs	r0, #0
    1fde:	9000      	str	r0, [sp, #0]
    1fe0:	4803      	ldr	r0, [pc, #12]	; (1ff0 <print_formatted+0x24>)
    1fe2:	f7ff f8c7 	bl	1174 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    1fe6:	b004      	add	sp, #16
    1fe8:	f85d eb04 	ldr.w	lr, [sp], #4
    1fec:	b003      	add	sp, #12
    1fee:	4770      	bx	lr
    1ff0:	0000c2e3 	.word	0x0000c2e3

00001ff4 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    1ff4:	b530      	push	{r4, r5, lr}
    1ff6:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    1ff8:	f011 0f44 	tst.w	r1, #68	; 0x44
    1ffc:	d005      	beq.n	200a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    1ffe:	4b1a      	ldr	r3, [pc, #104]	; (2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>)
    2000:	681c      	ldr	r4, [r3, #0]
    2002:	b934      	cbnz	r4, 2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2004:	2000      	movs	r0, #0
	}

	return length;
}
    2006:	b005      	add	sp, #20
    2008:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    200a:	4918      	ldr	r1, [pc, #96]	; (206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>)
    200c:	f7ff ffde 	bl	1fcc <print_formatted>
    2010:	e7f9      	b.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
		timestamp /= timestamp_div;
    2012:	4b17      	ldr	r3, [pc, #92]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    2014:	6819      	ldr	r1, [r3, #0]
    2016:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    201a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    201e:	4a15      	ldr	r2, [pc, #84]	; (2074 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x74>)
    2020:	fba2 320c 	umull	r3, r2, r2, ip
    2024:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2026:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    202a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    202e:	4b12      	ldr	r3, [pc, #72]	; (2078 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x78>)
    2030:	fba3 530e 	umull	r5, r3, r3, lr
    2034:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2036:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    203a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    203e:	fb0c f101 	mul.w	r1, ip, r1
    2042:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2046:	fb04 1115 	mls	r1, r4, r5, r1
    204a:	fb0c f101 	mul.w	r1, ip, r1
    204e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    2052:	9102      	str	r1, [sp, #8]
    2054:	9501      	str	r5, [sp, #4]
    2056:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    205a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    205e:	9100      	str	r1, [sp, #0]
    2060:	4906      	ldr	r1, [pc, #24]	; (207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>)
    2062:	f7ff ffb3 	bl	1fcc <print_formatted>
    2066:	e7ce      	b.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
    2068:	20000ea4 	.word	0x20000ea4
    206c:	0000fa58 	.word	0x0000fa58
    2070:	20000ea0 	.word	0x20000ea0
    2074:	91a2b3c5 	.word	0x91a2b3c5
    2078:	88888889 	.word	0x88888889
    207c:	0000fa64 	.word	0x0000fa64

00002080 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2080:	b161      	cbz	r1, 209c <color_print+0x1c>
{
    2082:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2084:	b12a      	cbz	r2, 2092 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2086:	4a06      	ldr	r2, [pc, #24]	; (20a0 <color_print+0x20>)
    2088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    208c:	b912      	cbnz	r2, 2094 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    208e:	4a05      	ldr	r2, [pc, #20]	; (20a4 <color_print+0x24>)
    2090:	e000      	b.n	2094 <color_print+0x14>
    2092:	4a04      	ldr	r2, [pc, #16]	; (20a4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2094:	4904      	ldr	r1, [pc, #16]	; (20a8 <color_print+0x28>)
    2096:	f7ff ff99 	bl	1fcc <print_formatted>
	}
}
    209a:	bd08      	pop	{r3, pc}
    209c:	4770      	bx	lr
    209e:	bf00      	nop
    20a0:	0000fb08 	.word	0x0000fb08
    20a4:	0000fa80 	.word	0x0000fa80
    20a8:	0000fa88 	.word	0x0000fa88

000020ac <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    20ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20b0:	4605      	mov	r5, r0
    20b2:	4690      	mov	r8, r2
    20b4:	461e      	mov	r6, r3
    20b6:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    20b8:	b981      	cbnz	r1, 20dc <ids_print+0x30>
	int total = 0;
    20ba:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    20bc:	b12e      	cbz	r6, 20ca <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    20be:	4632      	mov	r2, r6
    20c0:	4910      	ldr	r1, [pc, #64]	; (2104 <ids_print+0x58>)
    20c2:	4628      	mov	r0, r5
    20c4:	f7ff ff82 	bl	1fcc <print_formatted>
    20c8:	4404      	add	r4, r0
	}

	if (source) {
    20ca:	b1b7      	cbz	r7, 20fa <ids_print+0x4e>
		total += print_formatted(output,
    20cc:	f1b8 0f00 	cmp.w	r8, #0
    20d0:	d00d      	beq.n	20ee <ids_print+0x42>
				(func_on &&
    20d2:	9b07      	ldr	r3, [sp, #28]
    20d4:	2b04      	cmp	r3, #4
    20d6:	d013      	beq.n	2100 <ids_print+0x54>
		total += print_formatted(output,
    20d8:	490b      	ldr	r1, [pc, #44]	; (2108 <ids_print+0x5c>)
    20da:	e009      	b.n	20f0 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    20dc:	4b0b      	ldr	r3, [pc, #44]	; (210c <ids_print+0x60>)
    20de:	9a07      	ldr	r2, [sp, #28]
    20e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    20e4:	490a      	ldr	r1, [pc, #40]	; (2110 <ids_print+0x64>)
    20e6:	f7ff ff71 	bl	1fcc <print_formatted>
    20ea:	4604      	mov	r4, r0
    20ec:	e7e6      	b.n	20bc <ids_print+0x10>
		total += print_formatted(output,
    20ee:	4906      	ldr	r1, [pc, #24]	; (2108 <ids_print+0x5c>)
    20f0:	463a      	mov	r2, r7
    20f2:	4628      	mov	r0, r5
    20f4:	f7ff ff6a 	bl	1fcc <print_formatted>
    20f8:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    20fa:	4620      	mov	r0, r4
    20fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2100:	4904      	ldr	r1, [pc, #16]	; (2114 <ids_print+0x68>)
    2102:	e7f5      	b.n	20f0 <ids_print+0x44>
    2104:	0000faa0 	.word	0x0000faa0
    2108:	0000fa90 	.word	0x0000fa90
    210c:	0000fb1c 	.word	0x0000fb1c
    2110:	0000fa98 	.word	0x0000fa98
    2114:	0000fa8c 	.word	0x0000fa8c

00002118 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    2118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    211c:	b085      	sub	sp, #20
    211e:	4605      	mov	r5, r0
    2120:	460c      	mov	r4, r1
    2122:	4616      	mov	r6, r2
    2124:	9303      	str	r3, [sp, #12]
    2126:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    212a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    212e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2132:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2136:	f009 ffc2 	bl	c0be <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    213a:	b1d8      	cbz	r0, 2174 <prefix_print+0x5c>
    213c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    213e:	4912      	ldr	r1, [pc, #72]	; (2188 <prefix_print+0x70>)
    2140:	4628      	mov	r0, r5
    2142:	f7ff ff43 	bl	1fcc <print_formatted>
    2146:	4607      	mov	r7, r0
	}

	if (stamp) {
    2148:	f1bb 0f00 	cmp.w	fp, #0
    214c:	d114      	bne.n	2178 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    214e:	4642      	mov	r2, r8
    2150:	4651      	mov	r1, sl
    2152:	4628      	mov	r0, r5
    2154:	f00a f885 	bl	c262 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    2158:	f8cd 8004 	str.w	r8, [sp, #4]
    215c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    215e:	9300      	str	r3, [sp, #0]
    2160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2162:	4632      	mov	r2, r6
    2164:	4649      	mov	r1, r9
    2166:	4628      	mov	r0, r5
    2168:	f7ff ffa0 	bl	20ac <ids_print>

	return length;
}
    216c:	4438      	add	r0, r7
    216e:	b005      	add	sp, #20
    2170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2174:	2700      	movs	r7, #0
    2176:	e7e7      	b.n	2148 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    2178:	9a03      	ldr	r2, [sp, #12]
    217a:	4621      	mov	r1, r4
    217c:	4628      	mov	r0, r5
    217e:	f7ff ff39 	bl	1ff4 <timestamp_print>
    2182:	4407      	add	r7, r0
    2184:	e7e3      	b.n	214e <prefix_print+0x36>
    2186:	bf00      	nop
    2188:	0000faa4 	.word	0x0000faa4

0000218c <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    218c:	f011 0f10 	tst.w	r1, #16
    2190:	d10b      	bne.n	21aa <newline_print+0x1e>
{
    2192:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2194:	f011 0f20 	tst.w	r1, #32
    2198:	d003      	beq.n	21a2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    219a:	4904      	ldr	r1, [pc, #16]	; (21ac <newline_print+0x20>)
    219c:	f7ff ff16 	bl	1fcc <print_formatted>
}
    21a0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    21a2:	4903      	ldr	r1, [pc, #12]	; (21b0 <newline_print+0x24>)
    21a4:	f7ff ff12 	bl	1fcc <print_formatted>
    21a8:	e7fa      	b.n	21a0 <newline_print+0x14>
    21aa:	4770      	bx	lr
    21ac:	00010160 	.word	0x00010160
    21b0:	00010bc4 	.word	0x00010bc4

000021b4 <hexdump_line_print>:
{
    21b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21b8:	4605      	mov	r5, r0
    21ba:	460f      	mov	r7, r1
    21bc:	4616      	mov	r6, r2
    21be:	4698      	mov	r8, r3
	newline_print(output, flags);
    21c0:	9906      	ldr	r1, [sp, #24]
    21c2:	f7ff ffe3 	bl	218c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    21c6:	2400      	movs	r4, #0
    21c8:	4544      	cmp	r4, r8
    21ca:	da05      	bge.n	21d8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    21cc:	4923      	ldr	r1, [pc, #140]	; (225c <hexdump_line_print+0xa8>)
    21ce:	4628      	mov	r0, r5
    21d0:	f7ff fefc 	bl	1fcc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    21d4:	3401      	adds	r4, #1
    21d6:	e7f7      	b.n	21c8 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    21d8:	2400      	movs	r4, #0
    21da:	e009      	b.n	21f0 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    21dc:	491f      	ldr	r1, [pc, #124]	; (225c <hexdump_line_print+0xa8>)
    21de:	4628      	mov	r0, r5
    21e0:	f7ff fef4 	bl	1fcc <print_formatted>
    21e4:	e00b      	b.n	21fe <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    21e6:	491e      	ldr	r1, [pc, #120]	; (2260 <hexdump_line_print+0xac>)
    21e8:	4628      	mov	r0, r5
    21ea:	f7ff feef 	bl	1fcc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    21ee:	3401      	adds	r4, #1
    21f0:	2c0f      	cmp	r4, #15
    21f2:	dc0c      	bgt.n	220e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    21f4:	2c00      	cmp	r4, #0
    21f6:	dd02      	ble.n	21fe <hexdump_line_print+0x4a>
    21f8:	f014 0f07 	tst.w	r4, #7
    21fc:	d0ee      	beq.n	21dc <hexdump_line_print+0x28>
		if (i < length) {
    21fe:	42b4      	cmp	r4, r6
    2200:	d2f1      	bcs.n	21e6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2202:	5d3a      	ldrb	r2, [r7, r4]
    2204:	4917      	ldr	r1, [pc, #92]	; (2264 <hexdump_line_print+0xb0>)
    2206:	4628      	mov	r0, r5
    2208:	f7ff fee0 	bl	1fcc <print_formatted>
    220c:	e7ef      	b.n	21ee <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    220e:	4916      	ldr	r1, [pc, #88]	; (2268 <hexdump_line_print+0xb4>)
    2210:	4628      	mov	r0, r5
    2212:	f7ff fedb 	bl	1fcc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2216:	2400      	movs	r4, #0
    2218:	e009      	b.n	222e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    221a:	4910      	ldr	r1, [pc, #64]	; (225c <hexdump_line_print+0xa8>)
    221c:	4628      	mov	r0, r5
    221e:	f7ff fed5 	bl	1fcc <print_formatted>
    2222:	e00b      	b.n	223c <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    2224:	4911      	ldr	r1, [pc, #68]	; (226c <hexdump_line_print+0xb8>)
    2226:	4628      	mov	r0, r5
    2228:	f7ff fed0 	bl	1fcc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    222c:	3401      	adds	r4, #1
    222e:	2c0f      	cmp	r4, #15
    2230:	dc12      	bgt.n	2258 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2232:	2c00      	cmp	r4, #0
    2234:	dd02      	ble.n	223c <hexdump_line_print+0x88>
    2236:	f014 0f07 	tst.w	r4, #7
    223a:	d0ee      	beq.n	221a <hexdump_line_print+0x66>
		if (i < length) {
    223c:	42b4      	cmp	r4, r6
    223e:	d206      	bcs.n	224e <hexdump_line_print+0x9a>
			char c = (char)data[i];
    2240:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    2242:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    2246:	2b5e      	cmp	r3, #94	; 0x5e
    2248:	d9ec      	bls.n	2224 <hexdump_line_print+0x70>
    224a:	222e      	movs	r2, #46	; 0x2e
    224c:	e7ea      	b.n	2224 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    224e:	4903      	ldr	r1, [pc, #12]	; (225c <hexdump_line_print+0xa8>)
    2250:	4628      	mov	r0, r5
    2252:	f7ff febb 	bl	1fcc <print_formatted>
    2256:	e7e9      	b.n	222c <hexdump_line_print+0x78>
}
    2258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    225c:	0000fa9c 	.word	0x0000fa9c
    2260:	0000fab0 	.word	0x0000fab0
    2264:	0000faa8 	.word	0x0000faa8
    2268:	0000fab4 	.word	0x0000fab4
    226c:	0000fab8 	.word	0x0000fab8

00002270 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2274:	b084      	sub	sp, #16
    2276:	4604      	mov	r4, r0
    2278:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    227c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    227e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2280:	b98d      	cbnz	r5, 22a6 <log_output_process+0x36>
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
    2282:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    2286:	b137      	cbz	r7, 2296 <log_output_process+0x26>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2288:	b9bd      	cbnz	r5, 22ba <log_output_process+0x4a>
    228a:	4814      	ldr	r0, [pc, #80]	; (22dc <log_output_process+0x6c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    228c:	463b      	mov	r3, r7
    228e:	4622      	mov	r2, r4
    2290:	4913      	ldr	r1, [pc, #76]	; (22e0 <log_output_process+0x70>)
    2292:	f008 fcf7 	bl	ac84 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2296:	b996      	cbnz	r6, 22be <log_output_process+0x4e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2298:	b9d5      	cbnz	r5, 22d0 <log_output_process+0x60>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    229a:	4620      	mov	r0, r4
    229c:	f00a f814 	bl	c2c8 <log_output_flush>
}
    22a0:	b004      	add	sp, #16
    22a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    22a6:	9502      	str	r5, [sp, #8]
    22a8:	9301      	str	r3, [sp, #4]
    22aa:	9200      	str	r2, [sp, #0]
    22ac:	460b      	mov	r3, r1
    22ae:	2200      	movs	r2, #0
    22b0:	990e      	ldr	r1, [sp, #56]	; 0x38
    22b2:	f7ff ff31 	bl	2118 <prefix_print>
    22b6:	4680      	mov	r8, r0
    22b8:	e7e5      	b.n	2286 <log_output_process+0x16>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    22ba:	480a      	ldr	r0, [pc, #40]	; (22e4 <log_output_process+0x74>)
    22bc:	e7e6      	b.n	228c <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    22be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22c0:	9300      	str	r3, [sp, #0]
    22c2:	4643      	mov	r3, r8
    22c4:	4632      	mov	r2, r6
    22c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    22c8:	4620      	mov	r0, r4
    22ca:	f009 ffe2 	bl	c292 <log_msg_hexdump>
    22ce:	e7e3      	b.n	2298 <log_output_process+0x28>
		postfix_print(output, flags, level);
    22d0:	462a      	mov	r2, r5
    22d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    22d4:	4620      	mov	r0, r4
    22d6:	f009 ffd0 	bl	c27a <postfix_print>
    22da:	e7de      	b.n	229a <log_output_process+0x2a>
    22dc:	0000c313 	.word	0x0000c313
    22e0:	0000c253 	.word	0x0000c253
    22e4:	0000c2e3 	.word	0x0000c2e3

000022e8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    22e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    22ec:	b087      	sub	sp, #28
    22ee:	4606      	mov	r6, r0
    22f0:	460c      	mov	r4, r1
    22f2:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    22f4:	f8d1 9008 	ldr.w	r9, [r1, #8]
	return msg->hdr.desc.level;
    22f8:	880f      	ldrh	r7, [r1, #0]
    22fa:	f3c7 1782 	ubfx	r7, r7, #6, #3
	return msg->hdr.source;
    22fe:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    2300:	7808      	ldrb	r0, [r1, #0]
    2302:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    2306:	b133      	cbz	r3, 2316 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2308:	4911      	ldr	r1, [pc, #68]	; (2350 <log_output_msg_process+0x68>)
    230a:	1a59      	subs	r1, r3, r1
    230c:	f341 01cf 	sbfx	r1, r1, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2310:	2900      	cmp	r1, #0
    2312:	da19      	bge.n	2348 <log_output_msg_process+0x60>
    2314:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2316:	4621      	mov	r1, r4
    2318:	f851 5b10 	ldr.w	r5, [r1], #16
    231c:	f3c5 2549 	ubfx	r5, r5, #9, #10
	*len = msg->hdr.desc.data_len;
    2320:	8862      	ldrh	r2, [r4, #2]
    2322:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    2326:	1948      	adds	r0, r1, r5
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2328:	b905      	cbnz	r5, 232c <log_output_msg_process+0x44>
    232a:	2100      	movs	r1, #0
    232c:	f8cd 8010 	str.w	r8, [sp, #16]
    2330:	9203      	str	r2, [sp, #12]
    2332:	9002      	str	r0, [sp, #8]
    2334:	9101      	str	r1, [sp, #4]
    2336:	9700      	str	r7, [sp, #0]
    2338:	2200      	movs	r2, #0
    233a:	4649      	mov	r1, r9
    233c:	4630      	mov	r0, r6
    233e:	f7ff ff97 	bl	2270 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2342:	b007      	add	sp, #28
    2344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2348:	f7ff fe06 	bl	1f58 <log_source_name_get>
    234c:	4603      	mov	r3, r0
    234e:	e7e2      	b.n	2316 <log_output_msg_process+0x2e>
    2350:	0000f770 	.word	0x0000f770

00002354 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2354:	b570      	push	{r4, r5, r6, lr}
    2356:	b082      	sub	sp, #8
    2358:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    235a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    235c:	f242 730f 	movw	r3, #9999	; 0x270f
    2360:	428b      	cmp	r3, r1
    2362:	bf28      	it	cs
    2364:	460b      	movcs	r3, r1
    2366:	4a0e      	ldr	r2, [pc, #56]	; (23a0 <log_output_dropped_process+0x4c>)
    2368:	2105      	movs	r1, #5
    236a:	4668      	mov	r0, sp
    236c:	f008 fd09 	bl	ad82 <snprintk>
    2370:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    2372:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2374:	685b      	ldr	r3, [r3, #4]
    2376:	220b      	movs	r2, #11
    2378:	490a      	ldr	r1, [pc, #40]	; (23a4 <log_output_dropped_process+0x50>)
    237a:	4628      	mov	r0, r5
    237c:	f009 ff5c 	bl	c238 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    2380:	6863      	ldr	r3, [r4, #4]
    2382:	685b      	ldr	r3, [r3, #4]
    2384:	4632      	mov	r2, r6
    2386:	4669      	mov	r1, sp
    2388:	4628      	mov	r0, r5
    238a:	f009 ff55 	bl	c238 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    238e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	221b      	movs	r2, #27
    2394:	4904      	ldr	r1, [pc, #16]	; (23a8 <log_output_dropped_process+0x54>)
    2396:	4628      	mov	r0, r5
    2398:	f009 ff4e 	bl	c238 <buffer_write>
}
    239c:	b002      	add	sp, #8
    239e:	bd70      	pop	{r4, r5, r6, pc}
    23a0:	0000fabc 	.word	0x0000fabc
    23a4:	0000fadc 	.word	0x0000fadc
    23a8:	0000fac0 	.word	0x0000fac0

000023ac <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    23ac:	4b07      	ldr	r3, [pc, #28]	; (23cc <log_output_timestamp_freq_set+0x20>)
    23ae:	2201      	movs	r2, #1
    23b0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    23b2:	e004      	b.n	23be <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    23b4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    23b6:	4a05      	ldr	r2, [pc, #20]	; (23cc <log_output_timestamp_freq_set+0x20>)
    23b8:	6813      	ldr	r3, [r2, #0]
    23ba:	005b      	lsls	r3, r3, #1
    23bc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    23be:	4b04      	ldr	r3, [pc, #16]	; (23d0 <log_output_timestamp_freq_set+0x24>)
    23c0:	4298      	cmp	r0, r3
    23c2:	d8f7      	bhi.n	23b4 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    23c4:	4b03      	ldr	r3, [pc, #12]	; (23d4 <log_output_timestamp_freq_set+0x28>)
    23c6:	6018      	str	r0, [r3, #0]
}
    23c8:	4770      	bx	lr
    23ca:	bf00      	nop
    23cc:	20000ea0 	.word	0x20000ea0
    23d0:	000f4240 	.word	0x000f4240
    23d4:	20000ea4 	.word	0x20000ea4

000023d8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    23d8:	4b03      	ldr	r3, [pc, #12]	; (23e8 <log_backend_rtt_init+0x10>)
    23da:	2201      	movs	r2, #1
    23dc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    23de:	4b03      	ldr	r3, [pc, #12]	; (23ec <log_backend_rtt_init+0x14>)
    23e0:	4a03      	ldr	r2, [pc, #12]	; (23f0 <log_backend_rtt_init+0x18>)
    23e2:	601a      	str	r2, [r3, #0]
}
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop
    23e8:	20001d26 	.word	0x20001d26
    23ec:	20000ed0 	.word	0x20000ed0
    23f0:	20000ed4 	.word	0x20000ed4

000023f4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    23f4:	4b01      	ldr	r3, [pc, #4]	; (23fc <format_set+0x8>)
    23f6:	6019      	str	r1, [r3, #0]
	return 0;
}
    23f8:	2000      	movs	r0, #0
    23fa:	4770      	bx	lr
    23fc:	20000ebc 	.word	0x20000ebc

00002400 <on_failed_write>:
{
    2400:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2402:	b918      	cbnz	r0, 240c <on_failed_write+0xc>
		host_present = false;
    2404:	4b07      	ldr	r3, [pc, #28]	; (2424 <on_failed_write+0x24>)
    2406:	2200      	movs	r2, #0
    2408:	701a      	strb	r2, [r3, #0]
}
    240a:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    240c:	4b06      	ldr	r3, [pc, #24]	; (2428 <on_failed_write+0x28>)
    240e:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    2410:	b123      	cbz	r3, 241c <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    2412:	f241 3088 	movw	r0, #5000	; 0x1388
    2416:	f00c fec9 	bl	f1ac <z_impl_k_busy_wait>
}
    241a:	e7f6      	b.n	240a <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
    241c:	2005      	movs	r0, #5
    241e:	f009 ff86 	bl	c32e <k_msleep>
}
    2422:	e7f2      	b.n	240a <on_failed_write+0xa>
    2424:	20001d26 	.word	0x20001d26
    2428:	20001d27 	.word	0x20001d27

0000242c <on_write>:
{
    242c:	b538      	push	{r3, r4, r5, lr}
    242e:	4604      	mov	r4, r0
	host_present = true;
    2430:	4b0a      	ldr	r3, [pc, #40]	; (245c <on_write+0x30>)
    2432:	2201      	movs	r2, #1
    2434:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2436:	4b0a      	ldr	r3, [pc, #40]	; (2460 <on_write+0x34>)
    2438:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    243a:	b92b      	cbnz	r3, 2448 <on_write+0x1c>
}
    243c:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    243e:	1e65      	subs	r5, r4, #1
    2440:	4620      	mov	r0, r4
    2442:	f7ff ffdd 	bl	2400 <on_failed_write>
    2446:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2448:	2000      	movs	r0, #0
    244a:	f006 fddd 	bl	9008 <SEGGER_RTT_HasDataUp>
    244e:	2800      	cmp	r0, #0
    2450:	d0f4      	beq.n	243c <on_write+0x10>
    2452:	4b02      	ldr	r3, [pc, #8]	; (245c <on_write+0x30>)
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	2b00      	cmp	r3, #0
    2458:	d1f1      	bne.n	243e <on_write+0x12>
    245a:	e7ef      	b.n	243c <on_write+0x10>
    245c:	20001d26 	.word	0x20001d26
    2460:	20001d27 	.word	0x20001d27

00002464 <data_out_block_mode>:
{
    2464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2466:	4606      	mov	r6, r0
    2468:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    246a:	2704      	movs	r7, #4
    246c:	e00d      	b.n	248a <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    246e:	462a      	mov	r2, r5
    2470:	4631      	mov	r1, r6
    2472:	2000      	movs	r0, #0
    2474:	f006 fd2e 	bl	8ed4 <SEGGER_RTT_WriteSkipNoLock>
    2478:	4604      	mov	r4, r0
    247a:	e014      	b.n	24a6 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    247c:	4638      	mov	r0, r7
    247e:	f7ff ffd5 	bl	242c <on_write>
	} while ((ret == 0) && host_present);
    2482:	b9dc      	cbnz	r4, 24bc <data_out_block_mode+0x58>
    2484:	4b11      	ldr	r3, [pc, #68]	; (24cc <data_out_block_mode+0x68>)
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	b1c3      	cbz	r3, 24bc <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    248a:	4b11      	ldr	r3, [pc, #68]	; (24d0 <data_out_block_mode+0x6c>)
    248c:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    248e:	2b00      	cmp	r3, #0
    2490:	d1ed      	bne.n	246e <data_out_block_mode+0xa>
			RTT_LOCK();
    2492:	f006 fdc9 	bl	9028 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2496:	462a      	mov	r2, r5
    2498:	4631      	mov	r1, r6
    249a:	2000      	movs	r0, #0
    249c:	f006 fd1a 	bl	8ed4 <SEGGER_RTT_WriteSkipNoLock>
    24a0:	4604      	mov	r4, r0
			RTT_UNLOCK();
    24a2:	f006 fdcd 	bl	9040 <zephyr_rtt_mutex_unlock>
		if (ret) {
    24a6:	2c00      	cmp	r4, #0
    24a8:	d1e8      	bne.n	247c <data_out_block_mode+0x18>
		} else if (host_present) {
    24aa:	4b08      	ldr	r3, [pc, #32]	; (24cc <data_out_block_mode+0x68>)
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d0e7      	beq.n	2482 <data_out_block_mode+0x1e>
			retry_cnt--;
    24b2:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    24b4:	4638      	mov	r0, r7
    24b6:	f7ff ffa3 	bl	2400 <on_failed_write>
    24ba:	e7e2      	b.n	2482 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    24bc:	b914      	cbnz	r4, 24c4 <data_out_block_mode+0x60>
    24be:	4b03      	ldr	r3, [pc, #12]	; (24cc <data_out_block_mode+0x68>)
    24c0:	781b      	ldrb	r3, [r3, #0]
    24c2:	b903      	cbnz	r3, 24c6 <data_out_block_mode+0x62>
    24c4:	462c      	mov	r4, r5
}
    24c6:	4620      	mov	r0, r4
    24c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24ca:	bf00      	nop
    24cc:	20001d26 	.word	0x20001d26
    24d0:	20001d27 	.word	0x20001d27

000024d4 <panic>:
{
    24d4:	b508      	push	{r3, lr}
	panic_mode = true;
    24d6:	4b03      	ldr	r3, [pc, #12]	; (24e4 <panic+0x10>)
    24d8:	2201      	movs	r2, #1
    24da:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    24dc:	4802      	ldr	r0, [pc, #8]	; (24e8 <panic+0x14>)
    24de:	f009 fef3 	bl	c2c8 <log_output_flush>
}
    24e2:	bd08      	pop	{r3, pc}
    24e4:	20001d27 	.word	0x20001d27
    24e8:	0000fb5c 	.word	0x0000fb5c

000024ec <dropped>:
{
    24ec:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    24ee:	4802      	ldr	r0, [pc, #8]	; (24f8 <dropped+0xc>)
    24f0:	f7ff ff30 	bl	2354 <log_output_dropped_process>
}
    24f4:	bd08      	pop	{r3, pc}
    24f6:	bf00      	nop
    24f8:	0000fb5c 	.word	0x0000fb5c

000024fc <process>:
{
    24fc:	b510      	push	{r4, lr}
    24fe:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2500:	4b04      	ldr	r3, [pc, #16]	; (2514 <process+0x18>)
    2502:	6818      	ldr	r0, [r3, #0]
    2504:	f7ff fb98 	bl	1c38 <log_format_func_t_get>
    2508:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    250a:	220f      	movs	r2, #15
    250c:	4621      	mov	r1, r4
    250e:	4802      	ldr	r0, [pc, #8]	; (2518 <process+0x1c>)
    2510:	4798      	blx	r3
}
    2512:	bd10      	pop	{r4, pc}
    2514:	20000ebc 	.word	0x20000ebc
    2518:	0000fb5c 	.word	0x0000fb5c

0000251c <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    251c:	b500      	push	{lr}
    251e:	b08f      	sub	sp, #60	; 0x3c
	const struct ipc_service_backend *backend;

	if (!instance) {
    2520:	b140      	cbz	r0, 2534 <ipc_service_open_instance+0x18>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    2522:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
    2524:	b373      	cbz	r3, 2584 <ipc_service_open_instance+0x68>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	2b00      	cmp	r3, #0
    252a:	d053      	beq.n	25d4 <ipc_service_open_instance+0xb8>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
    252c:	4798      	blx	r3
}
    252e:	b00f      	add	sp, #60	; 0x3c
    2530:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Invalid instance");
    2534:	4b28      	ldr	r3, [pc, #160]	; (25d8 <ipc_service_open_instance+0xbc>)
    2536:	930d      	str	r3, [sp, #52]	; 0x34
    2538:	2302      	movs	r3, #2
    253a:	f88d 3004 	strb.w	r3, [sp, #4]
    253e:	2300      	movs	r3, #0
    2540:	f88d 3005 	strb.w	r3, [sp, #5]
    2544:	f88d 3006 	strb.w	r3, [sp, #6]
    2548:	f88d 3007 	strb.w	r3, [sp, #7]
    254c:	9a01      	ldr	r2, [sp, #4]
    254e:	920c      	str	r2, [sp, #48]	; 0x30
    2550:	4619      	mov	r1, r3
    2552:	f363 0100 	bfi	r1, r3, #0, #1
    2556:	f363 0141 	bfi	r1, r3, #1, #1
    255a:	f363 0182 	bfi	r1, r3, #2, #1
    255e:	f363 01c5 	bfi	r1, r3, #3, #3
    2562:	2201      	movs	r2, #1
    2564:	f362 1188 	bfi	r1, r2, #6, #3
    2568:	2208      	movs	r2, #8
    256a:	f362 2152 	bfi	r1, r2, #9, #10
    256e:	f363 41de 	bfi	r1, r3, #19, #12
    2572:	f363 71df 	bfi	r1, r3, #31, #1
    2576:	aa0c      	add	r2, sp, #48	; 0x30
    2578:	4818      	ldr	r0, [pc, #96]	; (25dc <ipc_service_open_instance+0xc0>)
    257a:	f009 fdd0 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    257e:	f06f 0015 	mvn.w	r0, #21
    2582:	e7d4      	b.n	252e <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
    2584:	4b16      	ldr	r3, [pc, #88]	; (25e0 <ipc_service_open_instance+0xc4>)
    2586:	9307      	str	r3, [sp, #28]
    2588:	2302      	movs	r3, #2
    258a:	f88d 3004 	strb.w	r3, [sp, #4]
    258e:	2300      	movs	r3, #0
    2590:	f88d 3005 	strb.w	r3, [sp, #5]
    2594:	f88d 3006 	strb.w	r3, [sp, #6]
    2598:	f88d 3007 	strb.w	r3, [sp, #7]
    259c:	9a01      	ldr	r2, [sp, #4]
    259e:	9206      	str	r2, [sp, #24]
    25a0:	4619      	mov	r1, r3
    25a2:	f363 0100 	bfi	r1, r3, #0, #1
    25a6:	f363 0141 	bfi	r1, r3, #1, #1
    25aa:	f363 0182 	bfi	r1, r3, #2, #1
    25ae:	f363 01c5 	bfi	r1, r3, #3, #3
    25b2:	2201      	movs	r2, #1
    25b4:	f362 1188 	bfi	r1, r2, #6, #3
    25b8:	2208      	movs	r2, #8
    25ba:	f362 2152 	bfi	r1, r2, #9, #10
    25be:	f363 41de 	bfi	r1, r3, #19, #12
    25c2:	f363 71df 	bfi	r1, r3, #31, #1
    25c6:	aa06      	add	r2, sp, #24
    25c8:	4804      	ldr	r0, [pc, #16]	; (25dc <ipc_service_open_instance+0xc0>)
    25ca:	f009 fda8 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EIO;
    25ce:	f06f 0004 	mvn.w	r0, #4
    25d2:	e7ac      	b.n	252e <ipc_service_open_instance+0x12>
		return 0;
    25d4:	2000      	movs	r0, #0
    25d6:	e7aa      	b.n	252e <ipc_service_open_instance+0x12>
    25d8:	0000fb6c 	.word	0x0000fb6c
    25dc:	0000f798 	.word	0x0000f798
    25e0:	0000fb80 	.word	0x0000fb80

000025e4 <ipc_service_register_endpoint>:

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    25e4:	b510      	push	{r4, lr}
    25e6:	b08e      	sub	sp, #56	; 0x38
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    25e8:	b168      	cbz	r0, 2606 <ipc_service_register_endpoint+0x22>
    25ea:	4603      	mov	r3, r0
    25ec:	b159      	cbz	r1, 2606 <ipc_service_register_endpoint+0x22>
    25ee:	b152      	cbz	r2, 2606 <ipc_service_register_endpoint+0x22>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    25f0:	6880      	ldr	r0, [r0, #8]

	if (!backend || !backend->register_endpoint) {
    25f2:	b380      	cbz	r0, 2656 <ipc_service_register_endpoint+0x72>
    25f4:	6884      	ldr	r4, [r0, #8]
    25f6:	b374      	cbz	r4, 2656 <ipc_service_register_endpoint+0x72>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
    25f8:	f841 3b04 	str.w	r3, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
    25fc:	6884      	ldr	r4, [r0, #8]
    25fe:	4618      	mov	r0, r3
    2600:	47a0      	blx	r4
}
    2602:	b00e      	add	sp, #56	; 0x38
    2604:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid instance, endpoint or configuration");
    2606:	4b28      	ldr	r3, [pc, #160]	; (26a8 <ipc_service_register_endpoint+0xc4>)
    2608:	930d      	str	r3, [sp, #52]	; 0x34
    260a:	2302      	movs	r3, #2
    260c:	f88d 3004 	strb.w	r3, [sp, #4]
    2610:	2300      	movs	r3, #0
    2612:	f88d 3005 	strb.w	r3, [sp, #5]
    2616:	f88d 3006 	strb.w	r3, [sp, #6]
    261a:	f88d 3007 	strb.w	r3, [sp, #7]
    261e:	9a01      	ldr	r2, [sp, #4]
    2620:	920c      	str	r2, [sp, #48]	; 0x30
    2622:	4619      	mov	r1, r3
    2624:	f363 0100 	bfi	r1, r3, #0, #1
    2628:	f363 0141 	bfi	r1, r3, #1, #1
    262c:	f363 0182 	bfi	r1, r3, #2, #1
    2630:	f363 01c5 	bfi	r1, r3, #3, #3
    2634:	2201      	movs	r2, #1
    2636:	f362 1188 	bfi	r1, r2, #6, #3
    263a:	2208      	movs	r2, #8
    263c:	f362 2152 	bfi	r1, r2, #9, #10
    2640:	f363 41de 	bfi	r1, r3, #19, #12
    2644:	f363 71df 	bfi	r1, r3, #31, #1
    2648:	aa0c      	add	r2, sp, #48	; 0x30
    264a:	4818      	ldr	r0, [pc, #96]	; (26ac <ipc_service_register_endpoint+0xc8>)
    264c:	f009 fd67 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    2650:	f06f 0015 	mvn.w	r0, #21
    2654:	e7d5      	b.n	2602 <ipc_service_register_endpoint+0x1e>
		LOG_ERR("Invalid backend configuration");
    2656:	4b16      	ldr	r3, [pc, #88]	; (26b0 <ipc_service_register_endpoint+0xcc>)
    2658:	9307      	str	r3, [sp, #28]
    265a:	2302      	movs	r3, #2
    265c:	f88d 3004 	strb.w	r3, [sp, #4]
    2660:	2300      	movs	r3, #0
    2662:	f88d 3005 	strb.w	r3, [sp, #5]
    2666:	f88d 3006 	strb.w	r3, [sp, #6]
    266a:	f88d 3007 	strb.w	r3, [sp, #7]
    266e:	9a01      	ldr	r2, [sp, #4]
    2670:	9206      	str	r2, [sp, #24]
    2672:	4619      	mov	r1, r3
    2674:	f363 0100 	bfi	r1, r3, #0, #1
    2678:	f363 0141 	bfi	r1, r3, #1, #1
    267c:	f363 0182 	bfi	r1, r3, #2, #1
    2680:	f363 01c5 	bfi	r1, r3, #3, #3
    2684:	2201      	movs	r2, #1
    2686:	f362 1188 	bfi	r1, r2, #6, #3
    268a:	2208      	movs	r2, #8
    268c:	f362 2152 	bfi	r1, r2, #9, #10
    2690:	f363 41de 	bfi	r1, r3, #19, #12
    2694:	f363 71df 	bfi	r1, r3, #31, #1
    2698:	aa06      	add	r2, sp, #24
    269a:	4804      	ldr	r0, [pc, #16]	; (26ac <ipc_service_register_endpoint+0xc8>)
    269c:	f009 fd3f 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EIO;
    26a0:	f06f 0004 	mvn.w	r0, #4
    26a4:	e7ad      	b.n	2602 <ipc_service_register_endpoint+0x1e>
    26a6:	bf00      	nop
    26a8:	0000fba0 	.word	0x0000fba0
    26ac:	0000f798 	.word	0x0000f798
    26b0:	0000fb80 	.word	0x0000fb80

000026b4 <ipc_service_send>:

int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    26b4:	b510      	push	{r4, lr}
    26b6:	b094      	sub	sp, #80	; 0x50
	const struct ipc_service_backend *backend;

	if (!ept) {
    26b8:	b180      	cbz	r0, 26dc <ipc_service_send+0x28>
    26ba:	4613      	mov	r3, r2
    26bc:	4684      	mov	ip, r0
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
    26be:	6800      	ldr	r0, [r0, #0]
    26c0:	2800      	cmp	r0, #0
    26c2:	d033      	beq.n	272c <ipc_service_send+0x78>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
    26c4:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
    26c6:	2a00      	cmp	r2, #0
    26c8:	d058      	beq.n	277c <ipc_service_send+0xc8>
    26ca:	6854      	ldr	r4, [r2, #4]
    26cc:	2c00      	cmp	r4, #0
    26ce:	d055      	beq.n	277c <ipc_service_send+0xc8>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
    26d0:	460a      	mov	r2, r1
    26d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    26d6:	47a0      	blx	r4
}
    26d8:	b014      	add	sp, #80	; 0x50
    26da:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid endpoint");
    26dc:	4b3b      	ldr	r3, [pc, #236]	; (27cc <ipc_service_send+0x118>)
    26de:	9313      	str	r3, [sp, #76]	; 0x4c
    26e0:	2302      	movs	r3, #2
    26e2:	f88d 3004 	strb.w	r3, [sp, #4]
    26e6:	2300      	movs	r3, #0
    26e8:	f88d 3005 	strb.w	r3, [sp, #5]
    26ec:	f88d 3006 	strb.w	r3, [sp, #6]
    26f0:	f88d 3007 	strb.w	r3, [sp, #7]
    26f4:	9a01      	ldr	r2, [sp, #4]
    26f6:	9212      	str	r2, [sp, #72]	; 0x48
    26f8:	4619      	mov	r1, r3
    26fa:	f363 0100 	bfi	r1, r3, #0, #1
    26fe:	f363 0141 	bfi	r1, r3, #1, #1
    2702:	f363 0182 	bfi	r1, r3, #2, #1
    2706:	f363 01c5 	bfi	r1, r3, #3, #3
    270a:	2201      	movs	r2, #1
    270c:	f362 1188 	bfi	r1, r2, #6, #3
    2710:	2208      	movs	r2, #8
    2712:	f362 2152 	bfi	r1, r2, #9, #10
    2716:	f363 41de 	bfi	r1, r3, #19, #12
    271a:	f363 71df 	bfi	r1, r3, #31, #1
    271e:	aa12      	add	r2, sp, #72	; 0x48
    2720:	482b      	ldr	r0, [pc, #172]	; (27d0 <ipc_service_send+0x11c>)
    2722:	f009 fcfc 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    2726:	f06f 0015 	mvn.w	r0, #21
    272a:	e7d5      	b.n	26d8 <ipc_service_send+0x24>
		LOG_ERR("Endpoint not registered\n");
    272c:	4b29      	ldr	r3, [pc, #164]	; (27d4 <ipc_service_send+0x120>)
    272e:	930d      	str	r3, [sp, #52]	; 0x34
    2730:	2302      	movs	r3, #2
    2732:	f88d 3004 	strb.w	r3, [sp, #4]
    2736:	2300      	movs	r3, #0
    2738:	f88d 3005 	strb.w	r3, [sp, #5]
    273c:	f88d 3006 	strb.w	r3, [sp, #6]
    2740:	f88d 3007 	strb.w	r3, [sp, #7]
    2744:	9a01      	ldr	r2, [sp, #4]
    2746:	920c      	str	r2, [sp, #48]	; 0x30
    2748:	4619      	mov	r1, r3
    274a:	f363 0100 	bfi	r1, r3, #0, #1
    274e:	f363 0141 	bfi	r1, r3, #1, #1
    2752:	f363 0182 	bfi	r1, r3, #2, #1
    2756:	f363 01c5 	bfi	r1, r3, #3, #3
    275a:	2201      	movs	r2, #1
    275c:	f362 1188 	bfi	r1, r2, #6, #3
    2760:	2208      	movs	r2, #8
    2762:	f362 2152 	bfi	r1, r2, #9, #10
    2766:	f363 41de 	bfi	r1, r3, #19, #12
    276a:	f363 71df 	bfi	r1, r3, #31, #1
    276e:	aa0c      	add	r2, sp, #48	; 0x30
    2770:	4817      	ldr	r0, [pc, #92]	; (27d0 <ipc_service_send+0x11c>)
    2772:	f009 fcd4 	bl	c11e <z_impl_z_log_msg_static_create>
		return -ENOENT;
    2776:	f06f 0001 	mvn.w	r0, #1
    277a:	e7ad      	b.n	26d8 <ipc_service_send+0x24>
		LOG_ERR("Invalid backend configuration");
    277c:	4b16      	ldr	r3, [pc, #88]	; (27d8 <ipc_service_send+0x124>)
    277e:	9307      	str	r3, [sp, #28]
    2780:	2302      	movs	r3, #2
    2782:	f88d 3004 	strb.w	r3, [sp, #4]
    2786:	2300      	movs	r3, #0
    2788:	f88d 3005 	strb.w	r3, [sp, #5]
    278c:	f88d 3006 	strb.w	r3, [sp, #6]
    2790:	f88d 3007 	strb.w	r3, [sp, #7]
    2794:	9a01      	ldr	r2, [sp, #4]
    2796:	9206      	str	r2, [sp, #24]
    2798:	4619      	mov	r1, r3
    279a:	f363 0100 	bfi	r1, r3, #0, #1
    279e:	f363 0141 	bfi	r1, r3, #1, #1
    27a2:	f363 0182 	bfi	r1, r3, #2, #1
    27a6:	f363 01c5 	bfi	r1, r3, #3, #3
    27aa:	2201      	movs	r2, #1
    27ac:	f362 1188 	bfi	r1, r2, #6, #3
    27b0:	2208      	movs	r2, #8
    27b2:	f362 2152 	bfi	r1, r2, #9, #10
    27b6:	f363 41de 	bfi	r1, r3, #19, #12
    27ba:	f363 71df 	bfi	r1, r3, #31, #1
    27be:	aa06      	add	r2, sp, #24
    27c0:	4803      	ldr	r0, [pc, #12]	; (27d0 <ipc_service_send+0x11c>)
    27c2:	f009 fcac 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EIO;
    27c6:	f06f 0004 	mvn.w	r0, #4
    27ca:	e785      	b.n	26d8 <ipc_service_send+0x24>
    27cc:	0000fbcc 	.word	0x0000fbcc
    27d0:	0000f798 	.word	0x0000f798
    27d4:	0000fbe0 	.word	0x0000fbe0
    27d8:	0000fb80 	.word	0x0000fb80

000027dc <get_available_ept_slot>:

	return NULL;
}

static struct ipc_rpmsg_ept *get_available_ept_slot(struct ipc_rpmsg_instance *rpmsg_inst)
{
    27dc:	b508      	push	{r3, lr}
	return get_ept_slot_with_name(rpmsg_inst, "");
    27de:	4902      	ldr	r1, [pc, #8]	; (27e8 <get_available_ept_slot+0xc>)
    27e0:	f009 fe82 	bl	c4e8 <get_ept_slot_with_name>
}
    27e4:	bd08      	pop	{r3, pc}
    27e6:	bf00      	nop
    27e8:	0000f9ec 	.word	0x0000f9ec

000027ec <advertise_ept>:
	return false;
}

static void advertise_ept(struct ipc_rpmsg_instance *rpmsg_inst, struct ipc_rpmsg_ept *rpmsg_ept,
			  const char *name, uint32_t dest)
{
    27ec:	b530      	push	{r4, r5, lr}
    27ee:	b085      	sub	sp, #20
    27f0:	4604      	mov	r4, r0
    27f2:	460d      	mov	r5, r1
	struct rpmsg_device *rdev;
	int err;

	rdev = rpmsg_virtio_get_rpmsg_device(&rpmsg_inst->rvdev);

	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    27f4:	490b      	ldr	r1, [pc, #44]	; (2824 <advertise_ept+0x38>)
    27f6:	9102      	str	r1, [sp, #8]
    27f8:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    27fc:	9101      	str	r1, [sp, #4]
    27fe:	9300      	str	r3, [sp, #0]
    2800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2804:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    2808:	4628      	mov	r0, r5
    280a:	f006 f961 	bl	8ad0 <rpmsg_create_ept>
			       dest, rpmsg_inst->cb, rpmsg_service_unbind);
	if (err != 0) {
    280e:	b938      	cbnz	r0, 2820 <advertise_ept+0x34>
		return;
	}

	rpmsg_ept->bound = true;
    2810:	2301      	movs	r3, #1
    2812:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    2816:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    281a:	b10b      	cbz	r3, 2820 <advertise_ept+0x34>
		rpmsg_inst->bound_cb(rpmsg_ept);
    281c:	4628      	mov	r0, r5
    281e:	4798      	blx	r3
	}
}
    2820:	b005      	add	sp, #20
    2822:	bd30      	pop	{r4, r5, pc}
    2824:	0000c541 	.word	0x0000c541

00002828 <send>:
	return 0;
}

static int send(const struct device *instance, void *token,
		const void *msg, size_t len)
{
    2828:	b508      	push	{r3, lr}
    282a:	4684      	mov	ip, r0
    282c:	4608      	mov	r0, r1
    282e:	4611      	mov	r1, r2
    2830:	461a      	mov	r2, r3
	struct backend_data_t *data = instance->data;
    2832:	f8dc 3010 	ldr.w	r3, [ip, #16]
	struct ipc_rpmsg_ept *rpmsg_ept;
	int ret;

	/* Instance is not ready */
	if (atomic_get(&data->state) != STATE_INITED) {
    2836:	f503 735d 	add.w	r3, r3, #884	; 0x374
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    283a:	e8d3 3faf 	lda	r3, [r3]
    283e:	2b02      	cmp	r3, #2
    2840:	d107      	bne.n	2852 <send+0x2a>
		return -EBUSY;
	}

	/* Empty message is not allowed */
	if (len == 0) {
    2842:	b14a      	cbz	r2, 2858 <send+0x30>
	}

	rpmsg_ept = (struct ipc_rpmsg_ept *) token;

	/* Endpoint is not registered with instance */
	if (!rpmsg_ept) {
    2844:	b158      	cbz	r0, 285e <send+0x36>
		return -ENOENT;
	}

	ret = rpmsg_send(&rpmsg_ept->ep, msg, len);
    2846:	f009 ff34 	bl	c6b2 <rpmsg_send>

	/* No buffers available */
	if (ret == RPMSG_ERR_NO_BUFF) {
    284a:	4b08      	ldr	r3, [pc, #32]	; (286c <send+0x44>)
    284c:	4298      	cmp	r0, r3
    284e:	d009      	beq.n	2864 <send+0x3c>
		return -ENOMEM;
	}

	return ret;
}
    2850:	bd08      	pop	{r3, pc}
		return -EBUSY;
    2852:	f06f 000f 	mvn.w	r0, #15
    2856:	e7fb      	b.n	2850 <send+0x28>
		return -EBADMSG;
    2858:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    285c:	e7f8      	b.n	2850 <send+0x28>
		return -ENOENT;
    285e:	f06f 0001 	mvn.w	r0, #1
    2862:	e7f5      	b.n	2850 <send+0x28>
		return -ENOMEM;
    2864:	f06f 000b 	mvn.w	r0, #11
    2868:	e7f2      	b.n	2850 <send+0x28>
    286a:	bf00      	nop
    286c:	fffff82e 	.word	0xfffff82e

00002870 <bound_cb>:
{
    2870:	b510      	push	{r4, lr}
    2872:	4604      	mov	r4, r0
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);
    2874:	2200      	movs	r2, #0
    2876:	4904      	ldr	r1, [pc, #16]	; (2888 <bound_cb+0x18>)
    2878:	f009 ff1b 	bl	c6b2 <rpmsg_send>
	if (ept->cb->bound) {
    287c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	b10b      	cbz	r3, 2886 <bound_cb+0x16>
		ept->cb->bound(ept->priv);
    2882:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    2884:	4798      	blx	r3
}
    2886:	bd10      	pop	{r4, pc}
    2888:	0000f9ec 	.word	0x0000f9ec

0000288c <mbox_init>:
{
    288c:	b5f0      	push	{r4, r5, r6, r7, lr}
    288e:	b083      	sub	sp, #12
	const struct backend_config_t *conf = instance->config;
    2890:	6844      	ldr	r4, [r0, #4]
	struct backend_data_t *data = instance->data;
    2892:	6905      	ldr	r5, [r0, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    2894:	69e3      	ldr	r3, [r4, #28]
    2896:	2b01      	cmp	r3, #1
    2898:	d01f      	beq.n	28da <mbox_init+0x4e>
						   K_PRIO_PREEMPT(conf->wq_prio);
    289a:	6a27      	ldr	r7, [r4, #32]
	k_work_queue_init(&data->mbox_wq);
    289c:	f505 7628 	add.w	r6, r5, #672	; 0x2a0
    28a0:	4630      	mov	r0, r6
    28a2:	f00c fa83 	bl	edac <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    28a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28a8:	2300      	movs	r3, #0
    28aa:	9300      	str	r3, [sp, #0]
    28ac:	463b      	mov	r3, r7
    28ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    28b2:	490e      	ldr	r1, [pc, #56]	; (28ec <mbox_init+0x60>)
    28b4:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    28b8:	4630      	mov	r0, r6
    28ba:	f007 f981 	bl	9bc0 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    28be:	490c      	ldr	r1, [pc, #48]	; (28f0 <mbox_init+0x64>)
    28c0:	f505 7024 	add.w	r0, r5, #656	; 0x290
    28c4:	f00c fa4c 	bl	ed60 <k_work_init>
	err = mbox_register_callback(&conf->mbox_rx, mbox_callback, data);
    28c8:	3414      	adds	r4, #20
    28ca:	462a      	mov	r2, r5
    28cc:	4909      	ldr	r1, [pc, #36]	; (28f4 <mbox_init+0x68>)
    28ce:	4620      	mov	r0, r4
    28d0:	f009 fd50 	bl	c374 <mbox_register_callback>
	if (err != 0) {
    28d4:	b120      	cbz	r0, 28e0 <mbox_init+0x54>
}
    28d6:	b003      	add	sp, #12
    28d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    28da:	6a27      	ldr	r7, [r4, #32]
    28dc:	3f10      	subs	r7, #16
    28de:	e7dd      	b.n	289c <mbox_init+0x10>
    28e0:	2101      	movs	r1, #1
    28e2:	4620      	mov	r0, r4
    28e4:	f009 fd55 	bl	c392 <z_impl_mbox_set_enabled>
	return mbox_set_enabled(&conf->mbox_rx, 1);
    28e8:	e7f5      	b.n	28d6 <mbox_init+0x4a>
    28ea:	bf00      	nop
    28ec:	20002030 	.word	0x20002030
    28f0:	0000c797 	.word	0x0000c797
    28f4:	0000c787 	.word	0x0000c787

000028f8 <open>:

	return rpmsg_send_nocopy(&rpmsg_ept->ep, msg, len);
}

static int open(const struct device *instance)
{
    28f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    28fc:	b085      	sub	sp, #20
    28fe:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
    2900:	6846      	ldr	r6, [r0, #4]
	struct backend_data_t *data = instance->data;
    2902:	6905      	ldr	r5, [r0, #16]
	struct ipc_rpmsg_instance *rpmsg_inst;
	struct rpmsg_device *rdev;
	int err;

	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    2904:	f505 795d 	add.w	r9, r5, #884	; 0x374
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2908:	2301      	movs	r3, #1
    290a:	e8d9 2fef 	ldaex	r2, [r9]
    290e:	2a00      	cmp	r2, #0
    2910:	d103      	bne.n	291a <open+0x22>
    2912:	e8c9 3fe1 	stlex	r1, r3, [r9]
    2916:	2900      	cmp	r1, #0
    2918:	d1f7      	bne.n	290a <open+0x12>
    291a:	d152      	bne.n	29c2 <open+0xca>
		return -EALREADY;
	}

	err = vr_shm_configure(&data->vr, conf);
    291c:	f505 78d4 	add.w	r8, r5, #424	; 0x1a8
    2920:	4631      	mov	r1, r6
    2922:	4640      	mov	r0, r8
    2924:	f009 fee9 	bl	c6fa <vr_shm_configure>
	if (err != 0) {
    2928:	4607      	mov	r7, r0
    292a:	b150      	cbz	r0, 2942 <open+0x4a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    292c:	2300      	movs	r3, #0
    292e:	e8d9 2fef 	ldaex	r2, [r9]
    2932:	e8c9 3fe1 	stlex	r1, r3, [r9]
    2936:	2900      	cmp	r1, #0
    2938:	d1f9      	bne.n	292e <open+0x36>
error:
	/* Back to the ready state */
	atomic_set(&data->state, STATE_READY);
	return err;

}
    293a:	4638      	mov	r0, r7
    293c:	b005      	add	sp, #20
    293e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->vr.notify_cb = virtio_notify_cb;
    2942:	4b21      	ldr	r3, [pc, #132]	; (29c8 <open+0xd0>)
    2944:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
	data->vr.priv = (void *) conf;
    2948:	f8c5 6284 	str.w	r6, [r5, #644]	; 0x284
	err = ipc_static_vrings_init(&data->vr, conf->role);
    294c:	6831      	ldr	r1, [r6, #0]
    294e:	4640      	mov	r0, r8
    2950:	f000 f968 	bl	2c24 <ipc_static_vrings_init>
	if (err != 0) {
    2954:	4607      	mov	r7, r0
    2956:	2800      	cmp	r0, #0
    2958:	d1e8      	bne.n	292c <open+0x34>
	err = mbox_init(instance);
    295a:	4620      	mov	r0, r4
    295c:	f7ff ff96 	bl	288c <mbox_init>
	if (err != 0) {
    2960:	4607      	mov	r7, r0
    2962:	2800      	cmp	r0, #0
    2964:	d1e2      	bne.n	292c <open+0x34>
	rpmsg_inst->bound_cb = bound_cb;
    2966:	4b19      	ldr	r3, [pc, #100]	; (29cc <open+0xd4>)
    2968:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
	rpmsg_inst->cb = ept_cb;
    296c:	4b18      	ldr	r3, [pc, #96]	; (29d0 <open+0xd8>)
    296e:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    2972:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    2974:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
    2978:	f8d5 1370 	ldr.w	r1, [r5, #880]	; 0x370
    297c:	4815      	ldr	r0, [pc, #84]	; (29d4 <open+0xdc>)
    297e:	9003      	str	r0, [sp, #12]
    2980:	f8d5 01f0 	ldr.w	r0, [r5, #496]	; 0x1f0
    2984:	9002      	str	r0, [sp, #8]
    2986:	f8d5 01e8 	ldr.w	r0, [r5, #488]	; 0x1e8
    298a:	9001      	str	r0, [sp, #4]
    298c:	f8cd 8000 	str.w	r8, [sp]
    2990:	4628      	mov	r0, r5
    2992:	f000 f8a3 	bl	2adc <ipc_rpmsg_init>
	if (err != 0) {
    2996:	4607      	mov	r7, r0
    2998:	2800      	cmp	r0, #0
    299a:	d1c7      	bne.n	292c <open+0x34>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    299c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    29a0:	f006 f952 	bl	8c48 <rpmsg_virtio_get_buffer_size>
    29a4:	f8c5 0378 	str.w	r0, [r5, #888]	; 0x378
	if (data->tx_buffer_size < 0) {
    29a8:	2800      	cmp	r0, #0
    29aa:	db07      	blt.n	29bc <open+0xc4>
    29ac:	2302      	movs	r3, #2
    29ae:	e8d9 2fef 	ldaex	r2, [r9]
    29b2:	e8c9 3fe1 	stlex	r1, r3, [r9]
    29b6:	2900      	cmp	r1, #0
    29b8:	d0bf      	beq.n	293a <open+0x42>
    29ba:	e7f8      	b.n	29ae <open+0xb6>
		err = -EINVAL;
    29bc:	f06f 0715 	mvn.w	r7, #21
    29c0:	e7b4      	b.n	292c <open+0x34>
		return -EALREADY;
    29c2:	f06f 0777 	mvn.w	r7, #119	; 0x77
    29c6:	e7b8      	b.n	293a <open+0x42>
    29c8:	0000c3cf 	.word	0x0000c3cf
    29cc:	00002871 	.word	0x00002871
    29d0:	0000c6cd 	.word	0x0000c6cd
    29d4:	0000c5bb 	.word	0x0000c5bb

000029d8 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    29d8:	b510      	push	{r4, lr}
    29da:	b08c      	sub	sp, #48	; 0x30
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
    29dc:	f10d 0c04 	add.w	ip, sp, #4
    29e0:	4c0d      	ldr	r4, [pc, #52]	; (2a18 <shared_memory_prepare+0x40>)
    29e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    29e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    29e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    29ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    29ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    29f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		DT_INST_FOREACH_STATUS_OKAY(BACKEND_CONFIG_DEFINE)
	};

	for (backend_config = backend_configs;
    29f6:	ac01      	add	r4, sp, #4
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
    29f8:	ab0c      	add	r3, sp, #48	; 0x30
    29fa:	429c      	cmp	r4, r3
    29fc:	d302      	bcc.n	2a04 <shared_memory_prepare+0x2c>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    29fe:	2000      	movs	r0, #0
    2a00:	b00c      	add	sp, #48	; 0x30
    2a02:	bd10      	pop	{r4, pc}
		if (backend_config->role == ROLE_HOST) {
    2a04:	6823      	ldr	r3, [r4, #0]
    2a06:	b10b      	cbz	r3, 2a0c <shared_memory_prepare+0x34>
	     backend_config++) {
    2a08:	342c      	adds	r4, #44	; 0x2c
    2a0a:	e7f5      	b.n	29f8 <shared_memory_prepare+0x20>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    2a0c:	2204      	movs	r2, #4
    2a0e:	2100      	movs	r1, #0
    2a10:	6860      	ldr	r0, [r4, #4]
    2a12:	f00a f887 	bl	cb24 <memset>
    2a16:	e7f7      	b.n	2a08 <shared_memory_prepare+0x30>
    2a18:	0000f850 	.word	0x0000f850

00002a1c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    2a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a20:	b085      	sub	sp, #20
    2a22:	4607      	mov	r7, r0
    2a24:	460e      	mov	r6, r1
    2a26:	4691      	mov	r9, r2
	struct ipc_rpmsg_instance *instance;
	struct ipc_rpmsg_ept *ept;
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    2a28:	f8d0 809c 	ldr.w	r8, [r0, #156]	; 0x9c

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    2a2c:	2400      	movs	r4, #0
    2a2e:	e000      	b.n	2a32 <ns_bind_cb+0x16>
    2a30:	3401      	adds	r4, #1
    2a32:	2c01      	cmp	r4, #1
    2a34:	d828      	bhi.n	2a88 <ns_bind_cb+0x6c>
		ept = &instance->endpoint[i];
    2a36:	f5a8 71c0 	sub.w	r1, r8, #384	; 0x180
    2a3a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    2a3e:	eb01 1505 	add.w	r5, r1, r5, lsl #4

		if (strcmp(name, ept->name) == 0) {
    2a42:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    2a46:	011b      	lsls	r3, r3, #4
    2a48:	3340      	adds	r3, #64	; 0x40
    2a4a:	4419      	add	r1, r3
    2a4c:	4630      	mov	r0, r6
    2a4e:	f00a f81c 	bl	ca8a <strcmp>
    2a52:	2800      	cmp	r0, #0
    2a54:	d1ec      	bne.n	2a30 <ns_bind_cb+0x14>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    2a56:	4b0e      	ldr	r3, [pc, #56]	; (2a90 <ns_bind_cb+0x74>)
    2a58:	9302      	str	r3, [sp, #8]
    2a5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    2a5e:	9301      	str	r3, [sp, #4]
    2a60:	f8cd 9000 	str.w	r9, [sp]
    2a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a68:	4632      	mov	r2, r6
    2a6a:	4639      	mov	r1, r7
    2a6c:	4628      	mov	r0, r5
    2a6e:	f006 f82f 	bl	8ad0 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    2a72:	b948      	cbnz	r0, 2a88 <ns_bind_cb+0x6c>
				return;
			}

			ept->bound = true;
    2a74:	2101      	movs	r1, #1
    2a76:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (instance->bound_cb) {
    2a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d0d6      	beq.n	2a30 <ns_bind_cb+0x14>
				instance->bound_cb(ept);
    2a82:	4628      	mov	r0, r5
    2a84:	4798      	blx	r3
    2a86:	e7d3      	b.n	2a30 <ns_bind_cb+0x14>
			}
		}
	}
}
    2a88:	b005      	add	sp, #20
    2a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2a8e:	bf00      	nop
    2a90:	0000c7dd 	.word	0x0000c7dd

00002a94 <ipc_rpmsg_register_ept>:
int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    2a94:	b1c8      	cbz	r0, 2aca <ipc_rpmsg_register_ept+0x36>
{
    2a96:	b510      	push	{r4, lr}
    2a98:	b084      	sub	sp, #16
    2a9a:	4614      	mov	r4, r2
    2a9c:	4603      	mov	r3, r0
	if (!instance || !ept) {
    2a9e:	b1ba      	cbz	r2, 2ad0 <ipc_rpmsg_register_ept+0x3c>
 * @return - RPMsg device pointed by RPMsg virtio device
 */
static inline struct rpmsg_device *
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
	return &rvdev->rdev;
    2aa0:	30e0      	adds	r0, #224	; 0xe0
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    2aa2:	2901      	cmp	r1, #1
    2aa4:	d002      	beq.n	2aac <ipc_rpmsg_register_ept+0x18>
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
    2aa6:	2000      	movs	r0, #0
}
    2aa8:	b004      	add	sp, #16
    2aaa:	bd10      	pop	{r4, pc}
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    2aac:	4a0a      	ldr	r2, [pc, #40]	; (2ad8 <ipc_rpmsg_register_ept+0x44>)
    2aae:	9202      	str	r2, [sp, #8]
    2ab0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    2ab4:	9301      	str	r3, [sp, #4]
    2ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2aba:	9300      	str	r3, [sp, #0]
    2abc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    2ac0:	4601      	mov	r1, r0
    2ac2:	4620      	mov	r0, r4
    2ac4:	f006 f804 	bl	8ad0 <rpmsg_create_ept>
    2ac8:	e7ee      	b.n	2aa8 <ipc_rpmsg_register_ept+0x14>
		return -EINVAL;
    2aca:	f06f 0015 	mvn.w	r0, #21
}
    2ace:	4770      	bx	lr
		return -EINVAL;
    2ad0:	f06f 0015 	mvn.w	r0, #21
    2ad4:	e7e8      	b.n	2aa8 <ipc_rpmsg_register_ept+0x14>
    2ad6:	bf00      	nop
    2ad8:	0000c7dd 	.word	0x0000c7dd

00002adc <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    2adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae0:	b084      	sub	sp, #16
    2ae2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2ae4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    2ae6:	b338      	cbz	r0, 2b38 <ipc_rpmsg_init+0x5c>
    2ae8:	461f      	mov	r7, r3
    2aea:	4606      	mov	r6, r0
    2aec:	b33d      	cbz	r5, 2b3e <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
    2aee:	b1bc      	cbz	r4, 2b20 <ipc_rpmsg_init+0x44>
		bind_cb = ns_bind_cb;
	}

	if (role == RPMSG_HOST) {
    2af0:	b9c1      	cbnz	r1, 2b24 <ipc_rpmsg_init+0x48>
		struct rpmsg_virtio_config config;

		config.h2r_buf_size = (uint32_t) buffer_size;
    2af2:	9202      	str	r2, [sp, #8]
		config.r2h_buf_size = (uint32_t) buffer_size;
    2af4:	9203      	str	r2, [sp, #12]

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    2af6:	f506 78c0 	add.w	r8, r6, #384	; 0x180
    2afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2afc:	4629      	mov	r1, r5
    2afe:	4640      	mov	r0, r8
    2b00:	f00b ff8a 	bl	ea18 <rpmsg_virtio_init_shm_pool>

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    2b04:	ab02      	add	r3, sp, #8
    2b06:	9301      	str	r3, [sp, #4]
    2b08:	f8cd 8000 	str.w	r8, [sp]
    2b0c:	463b      	mov	r3, r7
    2b0e:	4622      	mov	r2, r4
    2b10:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b12:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2b16:	f006 f8ad 	bl	8c74 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    2b1a:	b004      	add	sp, #16
    2b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bind_cb = ns_bind_cb;
    2b20:	4c08      	ldr	r4, [pc, #32]	; (2b44 <ipc_rpmsg_init+0x68>)
    2b22:	e7e5      	b.n	2af0 <ipc_rpmsg_init+0x14>
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    2b24:	2300      	movs	r3, #0
    2b26:	9300      	str	r3, [sp, #0]
    2b28:	463b      	mov	r3, r7
    2b2a:	4622      	mov	r2, r4
    2b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b2e:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2b32:	f006 f98b 	bl	8e4c <rpmsg_init_vdev>
    2b36:	e7f0      	b.n	2b1a <ipc_rpmsg_init+0x3e>
		return -EINVAL;
    2b38:	f06f 0015 	mvn.w	r0, #21
    2b3c:	e7ed      	b.n	2b1a <ipc_rpmsg_init+0x3e>
    2b3e:	f06f 0015 	mvn.w	r0, #21
    2b42:	e7ea      	b.n	2b1a <ipc_rpmsg_init+0x3e>
    2b44:	00002a1d 	.word	0x00002a1d

00002b48 <libmetal_setup>:
	.set_features = virtio_set_features,
	.notify = virtio_notify,
};

static int libmetal_setup(struct ipc_static_vrings *vr)
{
    2b48:	b510      	push	{r4, lr}
    2b4a:	b084      	sub	sp, #16
    2b4c:	4604      	mov	r4, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    2b4e:	4a11      	ldr	r2, [pc, #68]	; (2b94 <libmetal_setup+0x4c>)
    2b50:	ab02      	add	r3, sp, #8
    2b52:	e892 0003 	ldmia.w	r2, {r0, r1}
    2b56:	e883 0003 	stmia.w	r3, {r0, r1}
	struct metal_device *device;
	int err;

	err = metal_init(&metal_params);
    2b5a:	4618      	mov	r0, r3
    2b5c:	f005 fe98 	bl	8890 <metal_init>
	if (err != 0) {
    2b60:	b108      	cbz	r0, 2b66 <libmetal_setup+0x1e>
	if (vr->shm_io == NULL) {
		return err;
	}

	return 0;
}
    2b62:	b004      	add	sp, #16
    2b64:	bd10      	pop	{r4, pc}
	err = metal_register_generic_device(&vr->shm_device);
    2b66:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2b6a:	f005 fe71 	bl	8850 <metal_register_generic_device>
	if (err != 0) {
    2b6e:	2800      	cmp	r0, #0
    2b70:	d1f7      	bne.n	2b62 <libmetal_setup+0x1a>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    2b72:	aa01      	add	r2, sp, #4
    2b74:	4908      	ldr	r1, [pc, #32]	; (2b98 <libmetal_setup+0x50>)
    2b76:	4809      	ldr	r0, [pc, #36]	; (2b9c <libmetal_setup+0x54>)
    2b78:	f00b fa08 	bl	df8c <metal_device_open>
	if (err != 0) {
    2b7c:	2800      	cmp	r0, #0
    2b7e:	d1f0      	bne.n	2b62 <libmetal_setup+0x1a>
	vr->shm_io = metal_device_io_region(device, 0);
    2b80:	9b01      	ldr	r3, [sp, #4]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    2b82:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
    2b84:	b11a      	cbz	r2, 2b8e <libmetal_setup+0x46>
    2b86:	330c      	adds	r3, #12
    2b88:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (vr->shm_io == NULL) {
    2b8c:	e7e9      	b.n	2b62 <libmetal_setup+0x1a>
    2b8e:	2300      	movs	r3, #0
    2b90:	e7fa      	b.n	2b88 <libmetal_setup+0x40>
    2b92:	bf00      	nop
    2b94:	0000f87c 	.word	0x0000f87c
    2b98:	0000fc34 	.word	0x0000fc34
    2b9c:	0000fc40 	.word	0x0000fc40

00002ba0 <vq_setup>:

static int vq_setup(struct ipc_static_vrings *vr, unsigned int role)
{
    2ba0:	b538      	push	{r3, r4, r5, lr}
    2ba2:	4604      	mov	r4, r0
    2ba4:	460d      	mov	r5, r1
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    2ba6:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    2baa:	f009 fe37 	bl	c81c <virtqueue_allocate>
    2bae:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    2bb2:	b378      	cbz	r0, 2c14 <vq_setup+0x74>
		return -ENOMEM;
	}

	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    2bb4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    2bb8:	f009 fe30 	bl	c81c <virtqueue_allocate>
    2bbc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    2bc0:	b358      	cbz	r0, 2c1a <vq_setup+0x7a>
		return -ENOMEM;
	}

	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    2bc2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    2bc6:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    2bca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    2bce:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    2bd2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    2bd6:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    2bda:	2304      	movs	r3, #4
    2bdc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    2be0:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
    2be4:	f8c4 c0a4 	str.w	ip, [r4, #164]	; 0xa4

	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    2be8:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    2bec:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    2bf0:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    2bf4:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    2bf8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    2bfc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

	vr->vdev.role = role;
    2c00:	61a5      	str	r5, [r4, #24]

	vr->vdev.vrings_num = VRING_COUNT;
    2c02:	2302      	movs	r3, #2
    2c04:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    2c06:	4b06      	ldr	r3, [pc, #24]	; (2c20 <vq_setup+0x80>)
    2c08:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    2c0a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    2c0e:	62e3      	str	r3, [r4, #44]	; 0x2c

	return 0;
    2c10:	2000      	movs	r0, #0
}
    2c12:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    2c14:	f06f 000b 	mvn.w	r0, #11
    2c18:	e7fb      	b.n	2c12 <vq_setup+0x72>
		return -ENOMEM;
    2c1a:	f06f 000b 	mvn.w	r0, #11
    2c1e:	e7f8      	b.n	2c12 <vq_setup+0x72>
    2c20:	0000fc48 	.word	0x0000fc48

00002c24 <ipc_static_vrings_init>:

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
	int err = 0;

	if (!vr) {
    2c24:	b310      	cbz	r0, 2c6c <ipc_static_vrings_init+0x48>
{
    2c26:	b530      	push	{r4, r5, lr}
    2c28:	b085      	sub	sp, #20
    2c2a:	460d      	mov	r5, r1
    2c2c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
    2c2e:	4b11      	ldr	r3, [pc, #68]	; (2c74 <ipc_static_vrings_init+0x50>)
    2c30:	6343      	str	r3, [r0, #52]	; 0x34
	vr->shm_device.num_regions = 1;
    2c32:	2301      	movs	r3, #1
    2c34:	63c3      	str	r3, [r0, #60]	; 0x3c
	vr->shm_physmap[0] = vr->shm_addr;
    2c36:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    2c3a:	6301      	str	r1, [r0, #48]	; 0x30

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    2c3c:	2300      	movs	r3, #0
    2c3e:	9302      	str	r3, [sp, #8]
    2c40:	9301      	str	r3, [sp, #4]
    2c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c46:	9300      	str	r3, [sp, #0]
    2c48:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    2c4c:	f100 0230 	add.w	r2, r0, #48	; 0x30
    2c50:	3040      	adds	r0, #64	; 0x40
    2c52:	f00b f9c0 	bl	dfd6 <metal_io_init>
		      vr->shm_physmap, vr->shm_size, -1, 0, NULL);

	err = libmetal_setup(vr);
    2c56:	4620      	mov	r0, r4
    2c58:	f7ff ff76 	bl	2b48 <libmetal_setup>
	if (err != 0) {
    2c5c:	b108      	cbz	r0, 2c62 <ipc_static_vrings_init+0x3e>
		return err;
	}

	return vq_setup(vr, role);
}
    2c5e:	b005      	add	sp, #20
    2c60:	bd30      	pop	{r4, r5, pc}
	return vq_setup(vr, role);
    2c62:	4629      	mov	r1, r5
    2c64:	4620      	mov	r0, r4
    2c66:	f7ff ff9b 	bl	2ba0 <vq_setup>
    2c6a:	e7f8      	b.n	2c5e <ipc_static_vrings_init+0x3a>
		return -EINVAL;
    2c6c:	f06f 0015 	mvn.w	r0, #21
}
    2c70:	4770      	bx	lr
    2c72:	bf00      	nop
    2c74:	0000fc34 	.word	0x0000fc34

00002c78 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2c78:	b570      	push	{r4, r5, r6, lr}
    2c7a:	4605      	mov	r5, r0
	__asm__ volatile(
    2c7c:	f04f 0320 	mov.w	r3, #32
    2c80:	f3ef 8611 	mrs	r6, BASEPRI
    2c84:	f383 8812 	msr	BASEPRI_MAX, r3
    2c88:	f3bf 8f6f 	isb	sy
    2c8c:	4b0e      	ldr	r3, [pc, #56]	; (2cc8 <pm_state_notify+0x50>)
    2c8e:	681c      	ldr	r4, [r3, #0]
    2c90:	e00d      	b.n	2cae <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    2c92:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    2c94:	b13a      	cbz	r2, 2ca6 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2c96:	4b0d      	ldr	r3, [pc, #52]	; (2ccc <pm_state_notify+0x54>)
    2c98:	7d1b      	ldrb	r3, [r3, #20]
    2c9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c9e:	490c      	ldr	r1, [pc, #48]	; (2cd0 <pm_state_notify+0x58>)
    2ca0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2ca4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2ca6:	4623      	mov	r3, r4
	return node->next;
    2ca8:	6824      	ldr	r4, [r4, #0]
    2caa:	b104      	cbz	r4, 2cae <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2cac:	b123      	cbz	r3, 2cb8 <pm_state_notify+0x40>
    2cae:	b12c      	cbz	r4, 2cbc <pm_state_notify+0x44>
		if (entering_state) {
    2cb0:	2d00      	cmp	r5, #0
    2cb2:	d0ee      	beq.n	2c92 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    2cb4:	6862      	ldr	r2, [r4, #4]
    2cb6:	e7ed      	b.n	2c94 <pm_state_notify+0x1c>
    2cb8:	461c      	mov	r4, r3
    2cba:	e7f8      	b.n	2cae <pm_state_notify+0x36>
	__asm__ volatile(
    2cbc:	f386 8811 	msr	BASEPRI, r6
    2cc0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2cc4:	bd70      	pop	{r4, r5, r6, pc}
    2cc6:	bf00      	nop
    2cc8:	20000f04 	.word	0x20000f04
    2ccc:	20001b08 	.word	0x20001b08
    2cd0:	20000ef8 	.word	0x20000ef8

00002cd4 <pm_exit_pos_ops>:
{
    2cd4:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    2cd6:	4b06      	ldr	r3, [pc, #24]	; (2cf0 <pm_exit_pos_ops+0x1c>)
    2cd8:	b123      	cbz	r3, 2ce4 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2cda:	7841      	ldrb	r1, [r0, #1]
    2cdc:	7800      	ldrb	r0, [r0, #0]
    2cde:	f009 f971 	bl	bfc4 <pm_state_exit_post_ops>
}
    2ce2:	bd08      	pop	{r3, pc}
    2ce4:	2300      	movs	r3, #0
    2ce6:	f383 8811 	msr	BASEPRI, r3
    2cea:	f3bf 8f6f 	isb	sy
    2cee:	e7f8      	b.n	2ce2 <pm_exit_pos_ops+0xe>
    2cf0:	0000bfc5 	.word	0x0000bfc5

00002cf4 <pm_system_resume>:

void pm_system_resume(void)
{
    2cf4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2cf6:	4b0e      	ldr	r3, [pc, #56]	; (2d30 <pm_system_resume+0x3c>)
    2cf8:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2cfa:	4621      	mov	r1, r4
    2cfc:	480d      	ldr	r0, [pc, #52]	; (2d34 <pm_system_resume+0x40>)
    2cfe:	f009 fd9b 	bl	c838 <atomic_test_and_clear_bit>
    2d02:	b900      	cbnz	r0, 2d06 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2d04:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2d06:	0065      	lsls	r5, r4, #1
    2d08:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    2d0c:	4e0a      	ldr	r6, [pc, #40]	; (2d38 <pm_system_resume+0x44>)
    2d0e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2d12:	f7ff ffdf 	bl	2cd4 <pm_exit_pos_ops>
		pm_state_notify(false);
    2d16:	2000      	movs	r0, #0
    2d18:	f7ff ffae 	bl	2c78 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2d1c:	192b      	adds	r3, r5, r4
    2d1e:	0099      	lsls	r1, r3, #2
    2d20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2d24:	2200      	movs	r2, #0
    2d26:	5072      	str	r2, [r6, r1]
    2d28:	605a      	str	r2, [r3, #4]
    2d2a:	609a      	str	r2, [r3, #8]
}
    2d2c:	e7ea      	b.n	2d04 <pm_system_resume+0x10>
    2d2e:	bf00      	nop
    2d30:	20001b08 	.word	0x20001b08
    2d34:	20000f0c 	.word	0x20000f0c
    2d38:	20000ef8 	.word	0x20000ef8

00002d3c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d3e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    2d40:	4b38      	ldr	r3, [pc, #224]	; (2e24 <pm_system_suspend+0xe8>)
    2d42:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
    2d44:	f04f 0320 	mov.w	r3, #32
    2d48:	f3ef 8611 	mrs	r6, BASEPRI
    2d4c:	f383 8812 	msr	BASEPRI_MAX, r3
    2d50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2d54:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2d58:	4b33      	ldr	r3, [pc, #204]	; (2e28 <pm_system_suspend+0xec>)
    2d5a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d039      	beq.n	2dd6 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2d62:	4b32      	ldr	r3, [pc, #200]	; (2e2c <pm_system_suspend+0xf0>)
    2d64:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    2d68:	4f2f      	ldr	r7, [pc, #188]	; (2e28 <pm_system_suspend+0xec>)
    2d6a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    2d6e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    2d72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2d76:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2d7a:	2300      	movs	r3, #0
    2d7c:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    2d80:	f386 8811 	msr	BASEPRI, r6
    2d84:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2d88:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2d8c:	4a27      	ldr	r2, [pc, #156]	; (2e2c <pm_system_suspend+0xf0>)
    2d8e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d044      	beq.n	2e20 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2d96:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    2d9a:	d12b      	bne.n	2df4 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2d9c:	f006 ffe0 	bl	9d60 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2da0:	2001      	movs	r0, #1
    2da2:	f7ff ff69 	bl	2c78 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    2da6:	4621      	mov	r1, r4
    2da8:	4821      	ldr	r0, [pc, #132]	; (2e30 <pm_system_suspend+0xf4>)
    2daa:	f009 fd5d 	bl	c868 <atomic_set_bit>
	if (pm_state_set != NULL) {
    2dae:	4b21      	ldr	r3, [pc, #132]	; (2e34 <pm_system_suspend+0xf8>)
    2db0:	b15b      	cbz	r3, 2dca <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    2db2:	4a1e      	ldr	r2, [pc, #120]	; (2e2c <pm_system_suspend+0xf0>)
    2db4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2dbc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2dc0:	7859      	ldrb	r1, [r3, #1]
    2dc2:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    2dc6:	f7fe fd21 	bl	180c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2dca:	f7ff ff93 	bl	2cf4 <pm_system_resume>
	k_sched_unlock();
    2dce:	f007 f9c1 	bl	a154 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2dd2:	2001      	movs	r0, #1
}
    2dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    2dd6:	4601      	mov	r1, r0
    2dd8:	4620      	mov	r0, r4
    2dda:	f000 f831 	bl	2e40 <pm_policy_next_state>
		if (info != NULL) {
    2dde:	2800      	cmp	r0, #0
    2de0:	d0ce      	beq.n	2d80 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2de2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2de6:	4b11      	ldr	r3, [pc, #68]	; (2e2c <pm_system_suspend+0xf0>)
    2de8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2dec:	c807      	ldmia	r0, {r0, r1, r2}
    2dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2df2:	e7c5      	b.n	2d80 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    2df4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2df8:	4b0c      	ldr	r3, [pc, #48]	; (2e2c <pm_system_suspend+0xf0>)
    2dfa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2dfe:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2e00:	0c41      	lsrs	r1, r0, #17
    2e02:	03c0      	lsls	r0, r0, #15
    2e04:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <pm_system_suspend+0xfc>)
    2e06:	18c0      	adds	r0, r0, r3
    2e08:	4a0c      	ldr	r2, [pc, #48]	; (2e3c <pm_system_suspend+0x100>)
    2e0a:	f04f 0300 	mov.w	r3, #0
    2e0e:	f141 0100 	adc.w	r1, r1, #0
    2e12:	f7fd f99f 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2e16:	2101      	movs	r1, #1
    2e18:	1a28      	subs	r0, r5, r0
    2e1a:	f00c f994 	bl	f146 <z_set_timeout_expiry>
    2e1e:	e7bd      	b.n	2d9c <pm_system_suspend+0x60>
		return false;
    2e20:	2000      	movs	r0, #0
    2e22:	e7d7      	b.n	2dd4 <pm_system_suspend+0x98>
    2e24:	20001b08 	.word	0x20001b08
    2e28:	20000eec 	.word	0x20000eec
    2e2c:	20000ef8 	.word	0x20000ef8
    2e30:	20000f0c 	.word	0x20000f0c
    2e34:	0000180d 	.word	0x0000180d
    2e38:	000f423f 	.word	0x000f423f
    2e3c:	000f4240 	.word	0x000f4240

00002e40 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e44:	b082      	sub	sp, #8
    2e46:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2e48:	a901      	add	r1, sp, #4
    2e4a:	f000 f845 	bl	2ed8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e4e:	1e44      	subs	r4, r0, #1
    2e50:	b224      	sxth	r4, r4
    2e52:	e007      	b.n	2e64 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    2e54:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2e58:	d033      	beq.n	2ec2 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    2e5a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    2e5c:	45b0      	cmp	r8, r6
    2e5e:	d930      	bls.n	2ec2 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e60:	3c01      	subs	r4, #1
    2e62:	b224      	sxth	r4, r4
    2e64:	2c00      	cmp	r4, #0
    2e66:	db2b      	blt.n	2ec0 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    2e68:	9b01      	ldr	r3, [sp, #4]
    2e6a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2e6e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    2e72:	7869      	ldrb	r1, [r5, #1]
    2e74:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2e78:	f009 fd05 	bl	c886 <pm_policy_state_lock_is_active>
    2e7c:	2800      	cmp	r0, #0
    2e7e:	d1ef      	bne.n	2e60 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    2e80:	6868      	ldr	r0, [r5, #4]
    2e82:	0c41      	lsrs	r1, r0, #17
    2e84:	03c0      	lsls	r0, r0, #15
    2e86:	4f11      	ldr	r7, [pc, #68]	; (2ecc <pm_policy_next_state+0x8c>)
    2e88:	19c0      	adds	r0, r0, r7
    2e8a:	4a11      	ldr	r2, [pc, #68]	; (2ed0 <pm_policy_next_state+0x90>)
    2e8c:	f04f 0300 	mov.w	r3, #0
    2e90:	f141 0100 	adc.w	r1, r1, #0
    2e94:	f7fd f95e 	bl	154 <__aeabi_uldivmod>
    2e98:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    2e9a:	68ab      	ldr	r3, [r5, #8]
    2e9c:	0c59      	lsrs	r1, r3, #17
    2e9e:	03db      	lsls	r3, r3, #15
    2ea0:	19d8      	adds	r0, r3, r7
    2ea2:	4a0b      	ldr	r2, [pc, #44]	; (2ed0 <pm_policy_next_state+0x90>)
    2ea4:	f04f 0300 	mov.w	r3, #0
    2ea8:	f141 0100 	adc.w	r1, r1, #0
    2eac:	f7fd f952 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2eb0:	4b08      	ldr	r3, [pc, #32]	; (2ed4 <pm_policy_next_state+0x94>)
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2eb8:	d0cc      	beq.n	2e54 <pm_policy_next_state+0x14>
    2eba:	4283      	cmp	r3, r0
    2ebc:	d8ca      	bhi.n	2e54 <pm_policy_next_state+0x14>
    2ebe:	e7cf      	b.n	2e60 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    2ec0:	2500      	movs	r5, #0
}
    2ec2:	4628      	mov	r0, r5
    2ec4:	b002      	add	sp, #8
    2ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eca:	bf00      	nop
    2ecc:	000f423f 	.word	0x000f423f
    2ed0:	000f4240 	.word	0x000f4240
    2ed4:	2000004c 	.word	0x2000004c

00002ed8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2ed8:	b908      	cbnz	r0, 2ede <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2eda:	4b02      	ldr	r3, [pc, #8]	; (2ee4 <pm_state_cpu_get_all+0xc>)
    2edc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2ede:	2000      	movs	r0, #0
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop
    2ee4:	0000fc70 	.word	0x0000fc70

00002ee8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2ee8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2eea:	4802      	ldr	r0, [pc, #8]	; (2ef4 <nrf_cc3xx_platform_abort_init+0xc>)
    2eec:	f007 fd6c 	bl	a9c8 <nrf_cc3xx_platform_set_abort>
}
    2ef0:	bd08      	pop	{r3, pc}
    2ef2:	bf00      	nop
    2ef4:	0000fc70 	.word	0x0000fc70

00002ef8 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ef8:	b308      	cbz	r0, 2f3e <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2efa:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2efc:	6843      	ldr	r3, [r0, #4]
    2efe:	2b04      	cmp	r3, #4
    2f00:	d007      	beq.n	2f12 <mutex_unlock_platform+0x1a>
    2f02:	2b08      	cmp	r3, #8
    2f04:	d012      	beq.n	2f2c <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f06:	b1fb      	cbz	r3, 2f48 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2f08:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2f0a:	f006 fce9 	bl	98e0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2f0e:	2000      	movs	r0, #0
    2f10:	e014      	b.n	2f3c <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2f12:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2f14:	2200      	movs	r2, #0
    2f16:	e8d3 1fef 	ldaex	r1, [r3]
    2f1a:	2901      	cmp	r1, #1
    2f1c:	d103      	bne.n	2f26 <mutex_unlock_platform+0x2e>
    2f1e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2f22:	2800      	cmp	r0, #0
    2f24:	d1f7      	bne.n	2f16 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f26:	d10d      	bne.n	2f44 <mutex_unlock_platform+0x4c>
    2f28:	4610      	mov	r0, r2
    2f2a:	e007      	b.n	2f3c <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    2f2c:	6803      	ldr	r3, [r0, #0]
    2f2e:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    2f30:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f34:	2000      	movs	r0, #0
    2f36:	4a05      	ldr	r2, [pc, #20]	; (2f4c <mutex_unlock_platform+0x54>)
    2f38:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    2f3c:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f3e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2f42:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f44:	4802      	ldr	r0, [pc, #8]	; (2f50 <mutex_unlock_platform+0x58>)
    2f46:	e7f9      	b.n	2f3c <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f48:	4802      	ldr	r0, [pc, #8]	; (2f54 <mutex_unlock_platform+0x5c>)
    2f4a:	e7f7      	b.n	2f3c <mutex_unlock_platform+0x44>
    2f4c:	50030000 	.word	0x50030000
    2f50:	ffff8fe9 	.word	0xffff8fe9
    2f54:	ffff8fea 	.word	0xffff8fea

00002f58 <mutex_lock_platform>:
    if(mutex == NULL) {
    2f58:	b370      	cbz	r0, 2fb8 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f5a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2f5c:	6843      	ldr	r3, [r0, #4]
    2f5e:	2b04      	cmp	r3, #4
    2f60:	d004      	beq.n	2f6c <mutex_lock_platform+0x14>
    2f62:	2b08      	cmp	r3, #8
    2f64:	d00f      	beq.n	2f86 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f66:	b9c3      	cbnz	r3, 2f9a <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f68:	4815      	ldr	r0, [pc, #84]	; (2fc0 <mutex_lock_platform+0x68>)
    2f6a:	e00b      	b.n	2f84 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2f6c:	6803      	ldr	r3, [r0, #0]
    2f6e:	2201      	movs	r2, #1
    2f70:	e8d3 1fef 	ldaex	r1, [r3]
    2f74:	2900      	cmp	r1, #0
    2f76:	d103      	bne.n	2f80 <mutex_lock_platform+0x28>
    2f78:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d1f7      	bne.n	2f70 <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f80:	d116      	bne.n	2fb0 <mutex_lock_platform+0x58>
    2f82:	2000      	movs	r0, #0
}
    2f84:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2f86:	6803      	ldr	r3, [r0, #0]
    2f88:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2f8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f8e:	4a0d      	ldr	r2, [pc, #52]	; (2fc4 <mutex_lock_platform+0x6c>)
    2f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f94:	b973      	cbnz	r3, 2fb4 <mutex_lock_platform+0x5c>
    2f96:	2000      	movs	r0, #0
    2f98:	e7f4      	b.n	2f84 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2f9a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fa4:	f006 fc1e 	bl	97e4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2fa8:	2800      	cmp	r0, #0
    2faa:	d0eb      	beq.n	2f84 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2fac:	4806      	ldr	r0, [pc, #24]	; (2fc8 <mutex_lock_platform+0x70>)
    2fae:	e7e9      	b.n	2f84 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2fb0:	4805      	ldr	r0, [pc, #20]	; (2fc8 <mutex_lock_platform+0x70>)
    2fb2:	e7e7      	b.n	2f84 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2fb4:	4804      	ldr	r0, [pc, #16]	; (2fc8 <mutex_lock_platform+0x70>)
    2fb6:	e7e5      	b.n	2f84 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2fb8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2fbc:	4770      	bx	lr
    2fbe:	bf00      	nop
    2fc0:	ffff8fea 	.word	0xffff8fea
    2fc4:	50030000 	.word	0x50030000
    2fc8:	ffff8fe9 	.word	0xffff8fe9

00002fcc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2fcc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2fce:	4604      	mov	r4, r0
    2fd0:	b188      	cbz	r0, 2ff6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2fd2:	6863      	ldr	r3, [r4, #4]
    2fd4:	2b04      	cmp	r3, #4
    2fd6:	d00d      	beq.n	2ff4 <mutex_free_platform+0x28>
    2fd8:	2b08      	cmp	r3, #8
    2fda:	d00b      	beq.n	2ff4 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2fdc:	b153      	cbz	r3, 2ff4 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2fde:	f013 0f02 	tst.w	r3, #2
    2fe2:	d00d      	beq.n	3000 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2fe4:	4621      	mov	r1, r4
    2fe6:	4809      	ldr	r0, [pc, #36]	; (300c <mutex_free_platform+0x40>)
    2fe8:	f00b fdbb 	bl	eb62 <k_mem_slab_free>
        mutex->mutex = NULL;
    2fec:	2300      	movs	r3, #0
    2fee:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2ff0:	2300      	movs	r3, #0
    2ff2:	6063      	str	r3, [r4, #4]
}
    2ff4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <mutex_free_platform+0x44>)
    2ff8:	685b      	ldr	r3, [r3, #4]
    2ffa:	4806      	ldr	r0, [pc, #24]	; (3014 <mutex_free_platform+0x48>)
    2ffc:	4798      	blx	r3
    2ffe:	e7e8      	b.n	2fd2 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3000:	2214      	movs	r2, #20
    3002:	2100      	movs	r1, #0
    3004:	6820      	ldr	r0, [r4, #0]
    3006:	f009 fd8d 	bl	cb24 <memset>
    300a:	e7f1      	b.n	2ff0 <mutex_free_platform+0x24>
    300c:	20001410 	.word	0x20001410
    3010:	200001dc 	.word	0x200001dc
    3014:	0000fc78 	.word	0x0000fc78

00003018 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3018:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    301a:	4604      	mov	r4, r0
    301c:	b178      	cbz	r0, 303e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    301e:	6863      	ldr	r3, [r4, #4]
    3020:	2b04      	cmp	r3, #4
    3022:	d00b      	beq.n	303c <mutex_init_platform+0x24>
    3024:	2b08      	cmp	r3, #8
    3026:	d009      	beq.n	303c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3028:	b90b      	cbnz	r3, 302e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    302a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    302c:	b163      	cbz	r3, 3048 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    302e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3030:	f00b fe27 	bl	ec82 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3034:	6863      	ldr	r3, [r4, #4]
    3036:	f043 0301 	orr.w	r3, r3, #1
    303a:	6063      	str	r3, [r4, #4]
}
    303c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    303e:	4b0f      	ldr	r3, [pc, #60]	; (307c <mutex_init_platform+0x64>)
    3040:	685b      	ldr	r3, [r3, #4]
    3042:	480f      	ldr	r0, [pc, #60]	; (3080 <mutex_init_platform+0x68>)
    3044:	4798      	blx	r3
    3046:	e7ea      	b.n	301e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3050:	4621      	mov	r1, r4
    3052:	480c      	ldr	r0, [pc, #48]	; (3084 <mutex_init_platform+0x6c>)
    3054:	f006 fa86 	bl	9564 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3058:	b908      	cbnz	r0, 305e <mutex_init_platform+0x46>
    305a:	6823      	ldr	r3, [r4, #0]
    305c:	b91b      	cbnz	r3, 3066 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    305e:	4b07      	ldr	r3, [pc, #28]	; (307c <mutex_init_platform+0x64>)
    3060:	685b      	ldr	r3, [r3, #4]
    3062:	4809      	ldr	r0, [pc, #36]	; (3088 <mutex_init_platform+0x70>)
    3064:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3066:	2214      	movs	r2, #20
    3068:	2100      	movs	r1, #0
    306a:	6820      	ldr	r0, [r4, #0]
    306c:	f009 fd5a 	bl	cb24 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3070:	6863      	ldr	r3, [r4, #4]
    3072:	f043 0302 	orr.w	r3, r3, #2
    3076:	6063      	str	r3, [r4, #4]
    3078:	e7d9      	b.n	302e <mutex_init_platform+0x16>
    307a:	bf00      	nop
    307c:	200001dc 	.word	0x200001dc
    3080:	0000fc78 	.word	0x0000fc78
    3084:	20001410 	.word	0x20001410
    3088:	0000fca0 	.word	0x0000fca0

0000308c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    308c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    308e:	2340      	movs	r3, #64	; 0x40
    3090:	2214      	movs	r2, #20
    3092:	4904      	ldr	r1, [pc, #16]	; (30a4 <nrf_cc3xx_platform_mutex_init+0x18>)
    3094:	4804      	ldr	r0, [pc, #16]	; (30a8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3096:	f00b fd56 	bl	eb46 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    309a:	4904      	ldr	r1, [pc, #16]	; (30ac <nrf_cc3xx_platform_mutex_init+0x20>)
    309c:	4804      	ldr	r0, [pc, #16]	; (30b0 <nrf_cc3xx_platform_mutex_init+0x24>)
    309e:	f007 fcf5 	bl	aa8c <nrf_cc3xx_platform_set_mutexes>
}
    30a2:	bd08      	pop	{r3, pc}
    30a4:	20000f10 	.word	0x20000f10
    30a8:	20001410 	.word	0x20001410
    30ac:	0000fcd0 	.word	0x0000fcd0
    30b0:	0000fce4 	.word	0x0000fce4

000030b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    30b4:	4901      	ldr	r1, [pc, #4]	; (30bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    30b6:	2210      	movs	r2, #16
	str	r2, [r1]
    30b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    30ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    30bc:	e000ed10 	.word	0xe000ed10

000030c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    30c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    30c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    30c4:	f380 8811 	msr	BASEPRI, r0
	isb
    30c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    30cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    30d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    30d2:	b662      	cpsie	i
	isb
    30d4:	f3bf 8f6f 	isb	sy

	bx	lr
    30d8:	4770      	bx	lr
    30da:	bf00      	nop

000030dc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    30dc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    30de:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    30e0:	f381 8811 	msr	BASEPRI, r1

	wfe
    30e4:	bf20      	wfe

	msr	BASEPRI, r0
    30e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    30ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop

000030f0 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    30f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30f4:	b082      	sub	sp, #8
    30f6:	af00      	add	r7, sp, #0
    30f8:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    30fa:	f8d0 e000 	ldr.w	lr, [r0]
    30fe:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3102:	6886      	ldr	r6, [r0, #8]
    3104:	466d      	mov	r5, sp
    3106:	b08a      	sub	sp, #40	; 0x28
    3108:	466b      	mov	r3, sp
    310a:	f113 0210 	adds.w	r2, r3, #16
    310e:	f000 80f3 	beq.w	32f8 <esf_dump+0x208>
    3112:	2114      	movs	r1, #20
    3114:	b18a      	cbz	r2, 313a <esf_dump+0x4a>
    3116:	4608      	mov	r0, r1
    3118:	2904      	cmp	r1, #4
    311a:	dd03      	ble.n	3124 <esf_dump+0x34>
    311c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 3328 <esf_dump+0x238>
    3120:	f8c3 8014 	str.w	r8, [r3, #20]
    3124:	2808      	cmp	r0, #8
    3126:	dd01      	ble.n	312c <esf_dump+0x3c>
    3128:	f8c3 e018 	str.w	lr, [r3, #24]
    312c:	280c      	cmp	r0, #12
    312e:	dd01      	ble.n	3134 <esf_dump+0x44>
    3130:	f8c3 c01c 	str.w	ip, [r3, #28]
    3134:	2810      	cmp	r0, #16
    3136:	dd00      	ble.n	313a <esf_dump+0x4a>
    3138:	621e      	str	r6, [r3, #32]
    313a:	2913      	cmp	r1, #19
    313c:	f340 80df 	ble.w	32fe <esf_dump+0x20e>
    3140:	f04f 0c14 	mov.w	ip, #20
    3144:	b13a      	cbz	r2, 3156 <esf_dump+0x66>
    3146:	2105      	movs	r1, #5
    3148:	7139      	strb	r1, [r7, #4]
    314a:	2100      	movs	r1, #0
    314c:	7179      	strb	r1, [r7, #5]
    314e:	71b9      	strb	r1, [r7, #6]
    3150:	71f9      	strb	r1, [r7, #7]
    3152:	6878      	ldr	r0, [r7, #4]
    3154:	6118      	str	r0, [r3, #16]
    3156:	2100      	movs	r1, #0
    3158:	f36f 0100 	bfc	r1, #0, #1
    315c:	f36f 0141 	bfc	r1, #1, #1
    3160:	f36f 0182 	bfc	r1, #2, #1
    3164:	f36f 01c5 	bfc	r1, #3, #3
    3168:	2301      	movs	r3, #1
    316a:	f363 1188 	bfi	r1, r3, #6, #3
    316e:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    3172:	f36c 2152 	bfi	r1, ip, #9, #10
    3176:	f36f 41de 	bfc	r1, #19, #12
    317a:	f36f 71df 	bfc	r1, #31, #1
    317e:	2300      	movs	r3, #0
    3180:	486a      	ldr	r0, [pc, #424]	; (332c <esf_dump+0x23c>)
    3182:	f008 ffcc 	bl	c11e <z_impl_z_log_msg_static_create>
    3186:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3188:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    318c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    3190:	6966      	ldr	r6, [r4, #20]
    3192:	466d      	mov	r5, sp
    3194:	b08a      	sub	sp, #40	; 0x28
    3196:	466b      	mov	r3, sp
    3198:	f113 0210 	adds.w	r2, r3, #16
    319c:	f000 80b2 	beq.w	3304 <esf_dump+0x214>
    31a0:	2114      	movs	r1, #20
    31a2:	b18a      	cbz	r2, 31c8 <esf_dump+0xd8>
    31a4:	4608      	mov	r0, r1
    31a6:	2904      	cmp	r1, #4
    31a8:	dd03      	ble.n	31b2 <esf_dump+0xc2>
    31aa:	f8df 8184 	ldr.w	r8, [pc, #388]	; 3330 <esf_dump+0x240>
    31ae:	f8c3 8014 	str.w	r8, [r3, #20]
    31b2:	2808      	cmp	r0, #8
    31b4:	dd01      	ble.n	31ba <esf_dump+0xca>
    31b6:	f8c3 e018 	str.w	lr, [r3, #24]
    31ba:	280c      	cmp	r0, #12
    31bc:	dd01      	ble.n	31c2 <esf_dump+0xd2>
    31be:	f8c3 c01c 	str.w	ip, [r3, #28]
    31c2:	2810      	cmp	r0, #16
    31c4:	dd00      	ble.n	31c8 <esf_dump+0xd8>
    31c6:	621e      	str	r6, [r3, #32]
    31c8:	2913      	cmp	r1, #19
    31ca:	f340 809e 	ble.w	330a <esf_dump+0x21a>
    31ce:	f04f 0c14 	mov.w	ip, #20
    31d2:	b13a      	cbz	r2, 31e4 <esf_dump+0xf4>
    31d4:	2105      	movs	r1, #5
    31d6:	7139      	strb	r1, [r7, #4]
    31d8:	2100      	movs	r1, #0
    31da:	7179      	strb	r1, [r7, #5]
    31dc:	71b9      	strb	r1, [r7, #6]
    31de:	71f9      	strb	r1, [r7, #7]
    31e0:	6878      	ldr	r0, [r7, #4]
    31e2:	6118      	str	r0, [r3, #16]
    31e4:	2100      	movs	r1, #0
    31e6:	f36f 0100 	bfc	r1, #0, #1
    31ea:	f36f 0141 	bfc	r1, #1, #1
    31ee:	f36f 0182 	bfc	r1, #2, #1
    31f2:	f36f 01c5 	bfc	r1, #3, #3
    31f6:	2301      	movs	r3, #1
    31f8:	f363 1188 	bfi	r1, r3, #6, #3
    31fc:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    3200:	f36c 2152 	bfi	r1, ip, #9, #10
    3204:	f36f 41de 	bfc	r1, #19, #12
    3208:	f36f 71df 	bfc	r1, #31, #1
    320c:	2300      	movs	r3, #0
    320e:	4847      	ldr	r0, [pc, #284]	; (332c <esf_dump+0x23c>)
    3210:	f008 ff85 	bl	c11e <z_impl_z_log_msg_static_create>
    3214:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3216:	69e6      	ldr	r6, [r4, #28]
    3218:	466d      	mov	r5, sp
    321a:	b088      	sub	sp, #32
    321c:	466b      	mov	r3, sp
    321e:	f113 0210 	adds.w	r2, r3, #16
    3222:	d075      	beq.n	3310 <esf_dump+0x220>
    3224:	210c      	movs	r1, #12
    3226:	b14a      	cbz	r2, 323c <esf_dump+0x14c>
    3228:	4608      	mov	r0, r1
    322a:	2904      	cmp	r1, #4
    322c:	dd03      	ble.n	3236 <esf_dump+0x146>
    322e:	f8df c104 	ldr.w	ip, [pc, #260]	; 3334 <esf_dump+0x244>
    3232:	f8c3 c014 	str.w	ip, [r3, #20]
    3236:	2808      	cmp	r0, #8
    3238:	dd00      	ble.n	323c <esf_dump+0x14c>
    323a:	619e      	str	r6, [r3, #24]
    323c:	290b      	cmp	r1, #11
    323e:	dd6a      	ble.n	3316 <esf_dump+0x226>
    3240:	f04f 0c0c 	mov.w	ip, #12
    3244:	b13a      	cbz	r2, 3256 <esf_dump+0x166>
    3246:	2103      	movs	r1, #3
    3248:	7139      	strb	r1, [r7, #4]
    324a:	2100      	movs	r1, #0
    324c:	7179      	strb	r1, [r7, #5]
    324e:	71b9      	strb	r1, [r7, #6]
    3250:	71f9      	strb	r1, [r7, #7]
    3252:	6878      	ldr	r0, [r7, #4]
    3254:	6118      	str	r0, [r3, #16]
    3256:	2100      	movs	r1, #0
    3258:	f36f 0100 	bfc	r1, #0, #1
    325c:	f36f 0141 	bfc	r1, #1, #1
    3260:	f36f 0182 	bfc	r1, #2, #1
    3264:	f36f 01c5 	bfc	r1, #3, #3
    3268:	2301      	movs	r3, #1
    326a:	f363 1188 	bfi	r1, r3, #6, #3
    326e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    3272:	f36c 2152 	bfi	r1, ip, #9, #10
    3276:	f36f 41de 	bfc	r1, #19, #12
    327a:	f36f 71df 	bfc	r1, #31, #1
    327e:	2300      	movs	r3, #0
    3280:	482a      	ldr	r0, [pc, #168]	; (332c <esf_dump+0x23c>)
    3282:	f008 ff4c 	bl	c11e <z_impl_z_log_msg_static_create>
    3286:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3288:	69a4      	ldr	r4, [r4, #24]
    328a:	b088      	sub	sp, #32
    328c:	466b      	mov	r3, sp
    328e:	f113 0210 	adds.w	r2, r3, #16
    3292:	d043      	beq.n	331c <esf_dump+0x22c>
    3294:	210c      	movs	r1, #12
    3296:	b13a      	cbz	r2, 32a8 <esf_dump+0x1b8>
    3298:	4608      	mov	r0, r1
    329a:	2904      	cmp	r1, #4
    329c:	dd01      	ble.n	32a2 <esf_dump+0x1b2>
    329e:	4d26      	ldr	r5, [pc, #152]	; (3338 <esf_dump+0x248>)
    32a0:	615d      	str	r5, [r3, #20]
    32a2:	2808      	cmp	r0, #8
    32a4:	dd00      	ble.n	32a8 <esf_dump+0x1b8>
    32a6:	619c      	str	r4, [r3, #24]
    32a8:	290b      	cmp	r1, #11
    32aa:	dd3a      	ble.n	3322 <esf_dump+0x232>
    32ac:	240c      	movs	r4, #12
    32ae:	b13a      	cbz	r2, 32c0 <esf_dump+0x1d0>
    32b0:	2103      	movs	r1, #3
    32b2:	7139      	strb	r1, [r7, #4]
    32b4:	2100      	movs	r1, #0
    32b6:	7179      	strb	r1, [r7, #5]
    32b8:	71b9      	strb	r1, [r7, #6]
    32ba:	71f9      	strb	r1, [r7, #7]
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	6118      	str	r0, [r3, #16]
    32c0:	2100      	movs	r1, #0
    32c2:	f36f 0100 	bfc	r1, #0, #1
    32c6:	f36f 0141 	bfc	r1, #1, #1
    32ca:	f36f 0182 	bfc	r1, #2, #1
    32ce:	f36f 01c5 	bfc	r1, #3, #3
    32d2:	2301      	movs	r3, #1
    32d4:	f363 1188 	bfi	r1, r3, #6, #3
    32d8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    32dc:	f364 2152 	bfi	r1, r4, #9, #10
    32e0:	f36f 41de 	bfc	r1, #19, #12
    32e4:	f36f 71df 	bfc	r1, #31, #1
    32e8:	2300      	movs	r3, #0
    32ea:	4810      	ldr	r0, [pc, #64]	; (332c <esf_dump+0x23c>)
    32ec:	f008 ff17 	bl	c11e <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    32f0:	3708      	adds	r7, #8
    32f2:	46bd      	mov	sp, r7
    32f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    32f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    32fc:	e70a      	b.n	3114 <esf_dump+0x24>
    32fe:	f06f 0c1b 	mvn.w	ip, #27
    3302:	e71f      	b.n	3144 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3308:	e74b      	b.n	31a2 <esf_dump+0xb2>
    330a:	f06f 0c1b 	mvn.w	ip, #27
    330e:	e760      	b.n	31d2 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3314:	e787      	b.n	3226 <esf_dump+0x136>
    3316:	f06f 0c1b 	mvn.w	ip, #27
    331a:	e793      	b.n	3244 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    331c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3320:	e7b9      	b.n	3296 <esf_dump+0x1a6>
    3322:	f06f 041b 	mvn.w	r4, #27
    3326:	e7c2      	b.n	32ae <esf_dump+0x1be>
    3328:	0000fcf4 	.word	0x0000fcf4
    332c:	0000f7b8 	.word	0x0000f7b8
    3330:	0000fd24 	.word	0x0000fd24
    3334:	0000fd54 	.word	0x0000fd54
    3338:	0000fd64 	.word	0x0000fd64

0000333c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    333c:	2800      	cmp	r0, #0
    333e:	db07      	blt.n	3350 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3340:	f000 021f 	and.w	r2, r0, #31
    3344:	0940      	lsrs	r0, r0, #5
    3346:	2301      	movs	r3, #1
    3348:	4093      	lsls	r3, r2
    334a:	4a02      	ldr	r2, [pc, #8]	; (3354 <__NVIC_EnableIRQ+0x18>)
    334c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    3350:	4770      	bx	lr
    3352:	bf00      	nop
    3354:	e000e100 	.word	0xe000e100

00003358 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3358:	2800      	cmp	r0, #0
    335a:	db0c      	blt.n	3376 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    335c:	f000 021f 	and.w	r2, r0, #31
    3360:	0940      	lsrs	r0, r0, #5
    3362:	2301      	movs	r3, #1
    3364:	4093      	lsls	r3, r2
    3366:	3020      	adds	r0, #32
    3368:	4a03      	ldr	r2, [pc, #12]	; (3378 <__NVIC_DisableIRQ+0x20>)
    336a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    336e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3372:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3376:	4770      	bx	lr
    3378:	e000e100 	.word	0xe000e100

0000337c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    337c:	2800      	cmp	r0, #0
    337e:	db08      	blt.n	3392 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3380:	0149      	lsls	r1, r1, #5
    3382:	b2c9      	uxtb	r1, r1
    3384:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    3388:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    338c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    3390:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3392:	f000 000f 	and.w	r0, r0, #15
    3396:	0149      	lsls	r1, r1, #5
    3398:	b2c9      	uxtb	r1, r1
    339a:	4b01      	ldr	r3, [pc, #4]	; (33a0 <__NVIC_SetPriority+0x24>)
    339c:	5419      	strb	r1, [r3, r0]
  }
}
    339e:	4770      	bx	lr
    33a0:	e000ed14 	.word	0xe000ed14

000033a4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    33a4:	0942      	lsrs	r2, r0, #5
    33a6:	4b05      	ldr	r3, [pc, #20]	; (33bc <arch_irq_is_enabled+0x18>)
    33a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    33ac:	f000 001f 	and.w	r0, r0, #31
    33b0:	2301      	movs	r3, #1
    33b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    33b6:	4010      	ands	r0, r2
    33b8:	4770      	bx	lr
    33ba:	bf00      	nop
    33bc:	e000e100 	.word	0xe000e100

000033c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    33c0:	bf30      	wfi
    b z_SysNmiOnReset
    33c2:	f7ff bffd 	b.w	33c0 <z_SysNmiOnReset>
    33c6:	bf00      	nop

000033c8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    33c8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    33ca:	4b0b      	ldr	r3, [pc, #44]	; (33f8 <z_arm_prep_c+0x30>)
    33cc:	4a0b      	ldr	r2, [pc, #44]	; (33fc <z_arm_prep_c+0x34>)
    33ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    33d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    33d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    33dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    33e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    33e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    33e8:	f006 f806 	bl	93f8 <z_bss_zero>
	z_data_copy();
    33ec:	f007 f81e 	bl	a42c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    33f0:	f000 ff9a 	bl	4328 <z_arm_interrupt_init>
	z_cstart();
    33f4:	f006 f85c 	bl	94b0 <z_cstart>
    33f8:	e000ed00 	.word	0xe000ed00
    33fc:	00000000 	.word	0x00000000

00003400 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3400:	4a0a      	ldr	r2, [pc, #40]	; (342c <arch_swap+0x2c>)
    3402:	6893      	ldr	r3, [r2, #8]
    3404:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3408:	4909      	ldr	r1, [pc, #36]	; (3430 <arch_swap+0x30>)
    340a:	6809      	ldr	r1, [r1, #0]
    340c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3410:	4908      	ldr	r1, [pc, #32]	; (3434 <arch_swap+0x34>)
    3412:	684b      	ldr	r3, [r1, #4]
    3414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3418:	604b      	str	r3, [r1, #4]
    341a:	2300      	movs	r3, #0
    341c:	f383 8811 	msr	BASEPRI, r3
    3420:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3424:	6893      	ldr	r3, [r2, #8]
}
    3426:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    342a:	4770      	bx	lr
    342c:	20001b08 	.word	0x20001b08
    3430:	00010a34 	.word	0x00010a34
    3434:	e000ed00 	.word	0xe000ed00

00003438 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3438:	4914      	ldr	r1, [pc, #80]	; (348c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    343a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    343c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3440:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3442:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3446:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    344a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    344c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3450:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3454:	4f0e      	ldr	r7, [pc, #56]	; (3490 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3456:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    345a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    345c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    345e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3460:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3464:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3466:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    346a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    346e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3472:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3476:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    347a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    347e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3480:	f009 fa35 	bl	c8ee <configure_builtin_stack_guard>
    pop {r2, lr}
    3484:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3488:	4770      	bx	lr
    348a:	0000      	.short	0x0000
    ldr r1, =_kernel
    348c:	20001b08 	.word	0x20001b08
    ldr v4, =_SCS_ICSR
    3490:	e000ed04 	.word	0xe000ed04

00003494 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3494:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3498:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    349a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    349e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    34a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    34a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    34a8:	2902      	cmp	r1, #2
    beq _oops
    34aa:	d0ff      	beq.n	34ac <_oops>

000034ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    34ac:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    34ae:	f009 f9fc 	bl	c8aa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    34b2:	bd01      	pop	{r0, pc}

000034b4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    34b4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    34b6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    34ba:	490e      	ldr	r1, [pc, #56]	; (34f4 <arch_new_thread+0x40>)
    34bc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    34c0:	f021 0101 	bic.w	r1, r1, #1
    34c4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    34c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    34d2:	9b02      	ldr	r3, [sp, #8]
    34d4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    34d8:	9b03      	ldr	r3, [sp, #12]
    34da:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    34de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    34e2:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    34e6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    34e8:	2300      	movs	r3, #0
    34ea:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    34ee:	bc10      	pop	{r4}
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	0000b0bd 	.word	0x0000b0bd

000034f8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    34f8:	4b09      	ldr	r3, [pc, #36]	; (3520 <arch_switch_to_main_thread+0x28>)
    34fa:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    34fc:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3500:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3504:	4610      	mov	r0, r2
    3506:	f381 8809 	msr	PSP, r1
    350a:	2100      	movs	r1, #0
    350c:	b663      	cpsie	if
    350e:	f381 8811 	msr	BASEPRI, r1
    3512:	f3bf 8f6f 	isb	sy
    3516:	2200      	movs	r2, #0
    3518:	2300      	movs	r3, #0
    351a:	f007 fdcf 	bl	b0bc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    351e:	bf00      	nop
    3520:	20001b08 	.word	0x20001b08

00003524 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3524:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3526:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3528:	4a0b      	ldr	r2, [pc, #44]	; (3558 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    352a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    352c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    352e:	bf1e      	ittt	ne
	movne	r1, #0
    3530:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3532:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3534:	f00b fb89 	blne	ec4a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3538:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    353a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    353e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3542:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3546:	4905      	ldr	r1, [pc, #20]	; (355c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3548:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    354a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    354c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    354e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3552:	4903      	ldr	r1, [pc, #12]	; (3560 <_isr_wrapper+0x3c>)
	bx r1
    3554:	4708      	bx	r1
    3556:	0000      	.short	0x0000
	ldr r2, =_kernel
    3558:	20001b08 	.word	0x20001b08
	ldr r1, =_sw_isr_table
    355c:	0000f4f8 	.word	0x0000f4f8
	ldr r1, =z_arm_int_exit
    3560:	00003565 	.word	0x00003565

00003564 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3564:	4b04      	ldr	r3, [pc, #16]	; (3578 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3566:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3568:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    356a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    356c:	d003      	beq.n	3576 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    356e:	4903      	ldr	r1, [pc, #12]	; (357c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3574:	600a      	str	r2, [r1, #0]

00003576 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3576:	4770      	bx	lr
	ldr r3, =_kernel
    3578:	20001b08 	.word	0x20001b08
	ldr r1, =_SCS_ICSR
    357c:	e000ed04 	.word	0xe000ed04

00003580 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    3580:	b510      	push	{r4, lr}
    3582:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    3584:	2400      	movs	r4, #0
    3586:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3588:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    358c:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    3590:	d134      	bne.n	35fc <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3592:	f002 040c 	and.w	r4, r2, #12
    3596:	2c08      	cmp	r4, #8
    3598:	d005      	beq.n	35a6 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    359a:	f012 0f08 	tst.w	r2, #8
    359e:	d02a      	beq.n	35f6 <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    35a0:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    35a2:	b008      	add	sp, #32
    35a4:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    35a6:	4b16      	ldr	r3, [pc, #88]	; (3600 <get_esf+0x80>)
    35a8:	9307      	str	r3, [sp, #28]
    35aa:	2302      	movs	r3, #2
    35ac:	f88d 3004 	strb.w	r3, [sp, #4]
    35b0:	2400      	movs	r4, #0
    35b2:	f88d 4005 	strb.w	r4, [sp, #5]
    35b6:	f88d 4006 	strb.w	r4, [sp, #6]
    35ba:	f88d 4007 	strb.w	r4, [sp, #7]
    35be:	9b01      	ldr	r3, [sp, #4]
    35c0:	9306      	str	r3, [sp, #24]
    35c2:	4621      	mov	r1, r4
    35c4:	f364 0100 	bfi	r1, r4, #0, #1
    35c8:	f364 0141 	bfi	r1, r4, #1, #1
    35cc:	f364 0182 	bfi	r1, r4, #2, #1
    35d0:	f364 01c5 	bfi	r1, r4, #3, #3
    35d4:	2301      	movs	r3, #1
    35d6:	f363 1188 	bfi	r1, r3, #6, #3
    35da:	2308      	movs	r3, #8
    35dc:	f363 2152 	bfi	r1, r3, #9, #10
    35e0:	f364 41de 	bfi	r1, r4, #19, #12
    35e4:	f364 71df 	bfi	r1, r4, #31, #1
    35e8:	4623      	mov	r3, r4
    35ea:	aa06      	add	r2, sp, #24
    35ec:	4805      	ldr	r0, [pc, #20]	; (3604 <get_esf+0x84>)
    35ee:	f008 fd96 	bl	c11e <z_impl_z_log_msg_static_create>
		return NULL;
    35f2:	4620      	mov	r0, r4
    35f4:	e7d5      	b.n	35a2 <get_esf+0x22>
			*nested_exc = true;
    35f6:	2201      	movs	r2, #1
    35f8:	701a      	strb	r2, [r3, #0]
    35fa:	e7d2      	b.n	35a2 <get_esf+0x22>
		return NULL;
    35fc:	2000      	movs	r0, #0
    35fe:	e7d0      	b.n	35a2 <get_esf+0x22>
    3600:	0000fd94 	.word	0x0000fd94
    3604:	0000f7b8 	.word	0x0000f7b8

00003608 <mem_manage_fault>:
{
    3608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    360c:	b0a6      	sub	sp, #152	; 0x98
    360e:	af00      	add	r7, sp, #0
    3610:	4605      	mov	r5, r0
    3612:	460e      	mov	r6, r1
    3614:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3616:	4baf      	ldr	r3, [pc, #700]	; (38d4 <mem_manage_fault+0x2cc>)
    3618:	61fb      	str	r3, [r7, #28]
    361a:	2302      	movs	r3, #2
    361c:	713b      	strb	r3, [r7, #4]
    361e:	2300      	movs	r3, #0
    3620:	717b      	strb	r3, [r7, #5]
    3622:	71bb      	strb	r3, [r7, #6]
    3624:	71fb      	strb	r3, [r7, #7]
    3626:	687a      	ldr	r2, [r7, #4]
    3628:	61ba      	str	r2, [r7, #24]
    362a:	4619      	mov	r1, r3
    362c:	f363 0100 	bfi	r1, r3, #0, #1
    3630:	f363 0141 	bfi	r1, r3, #1, #1
    3634:	f363 0182 	bfi	r1, r3, #2, #1
    3638:	f363 01c5 	bfi	r1, r3, #3, #3
    363c:	2201      	movs	r2, #1
    363e:	f362 1188 	bfi	r1, r2, #6, #3
    3642:	2208      	movs	r2, #8
    3644:	f362 2152 	bfi	r1, r2, #9, #10
    3648:	f363 41de 	bfi	r1, r3, #19, #12
    364c:	f363 71df 	bfi	r1, r3, #31, #1
    3650:	f107 0218 	add.w	r2, r7, #24
    3654:	48a0      	ldr	r0, [pc, #640]	; (38d8 <mem_manage_fault+0x2d0>)
    3656:	f008 fd62 	bl	c11e <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    365a:	4ba0      	ldr	r3, [pc, #640]	; (38dc <mem_manage_fault+0x2d4>)
    365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    365e:	f013 0f10 	tst.w	r3, #16
    3662:	d135      	bne.n	36d0 <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3664:	4b9d      	ldr	r3, [pc, #628]	; (38dc <mem_manage_fault+0x2d4>)
    3666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3668:	f013 0f08 	tst.w	r3, #8
    366c:	d153      	bne.n	3716 <mem_manage_fault+0x10e>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    366e:	4b9b      	ldr	r3, [pc, #620]	; (38dc <mem_manage_fault+0x2d4>)
    3670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3672:	f013 0f02 	tst.w	r3, #2
    3676:	d171      	bne.n	375c <mem_manage_fault+0x154>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3678:	4b98      	ldr	r3, [pc, #608]	; (38dc <mem_manage_fault+0x2d4>)
    367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    367c:	f013 0f01 	tst.w	r3, #1
    3680:	f040 80e0 	bne.w	3844 <mem_manage_fault+0x23c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3684:	4b95      	ldr	r3, [pc, #596]	; (38dc <mem_manage_fault+0x2d4>)
    3686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3688:	f013 0f20 	tst.w	r3, #32
    368c:	f040 80fd 	bne.w	388a <mem_manage_fault+0x282>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3690:	4b92      	ldr	r3, [pc, #584]	; (38dc <mem_manage_fault+0x2d4>)
    3692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3694:	f013 0f10 	tst.w	r3, #16
    3698:	d101      	bne.n	369e <mem_manage_fault+0x96>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    369a:	4b90      	ldr	r3, [pc, #576]	; (38dc <mem_manage_fault+0x2d4>)
    369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    369e:	4b8f      	ldr	r3, [pc, #572]	; (38dc <mem_manage_fault+0x2d4>)
    36a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36a2:	f013 0f20 	tst.w	r3, #32
    36a6:	d004      	beq.n	36b2 <mem_manage_fault+0xaa>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    36a8:	4a8c      	ldr	r2, [pc, #560]	; (38dc <mem_manage_fault+0x2d4>)
    36aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
    36ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    36b0:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    36b2:	4a8a      	ldr	r2, [pc, #552]	; (38dc <mem_manage_fault+0x2d4>)
    36b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    36b6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    36ba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    36bc:	2101      	movs	r1, #1
    36be:	4628      	mov	r0, r5
    36c0:	f009 f91a 	bl	c8f8 <memory_fault_recoverable>
    36c4:	7020      	strb	r0, [r4, #0]
}
    36c6:	2000      	movs	r0, #0
    36c8:	3798      	adds	r7, #152	; 0x98
    36ca:	46bd      	mov	sp, r7
    36cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    36d0:	4b83      	ldr	r3, [pc, #524]	; (38e0 <mem_manage_fault+0x2d8>)
    36d2:	637b      	str	r3, [r7, #52]	; 0x34
    36d4:	2302      	movs	r3, #2
    36d6:	713b      	strb	r3, [r7, #4]
    36d8:	2300      	movs	r3, #0
    36da:	717b      	strb	r3, [r7, #5]
    36dc:	71bb      	strb	r3, [r7, #6]
    36de:	71fb      	strb	r3, [r7, #7]
    36e0:	687a      	ldr	r2, [r7, #4]
    36e2:	633a      	str	r2, [r7, #48]	; 0x30
    36e4:	4619      	mov	r1, r3
    36e6:	f363 0100 	bfi	r1, r3, #0, #1
    36ea:	f363 0141 	bfi	r1, r3, #1, #1
    36ee:	f363 0182 	bfi	r1, r3, #2, #1
    36f2:	f363 01c5 	bfi	r1, r3, #3, #3
    36f6:	2201      	movs	r2, #1
    36f8:	f362 1188 	bfi	r1, r2, #6, #3
    36fc:	2208      	movs	r2, #8
    36fe:	f362 2152 	bfi	r1, r2, #9, #10
    3702:	f363 41de 	bfi	r1, r3, #19, #12
    3706:	f363 71df 	bfi	r1, r3, #31, #1
    370a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    370e:	4872      	ldr	r0, [pc, #456]	; (38d8 <mem_manage_fault+0x2d0>)
    3710:	f008 fd05 	bl	c11e <z_impl_z_log_msg_static_create>
    3714:	e7a6      	b.n	3664 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    3716:	4b73      	ldr	r3, [pc, #460]	; (38e4 <mem_manage_fault+0x2dc>)
    3718:	64fb      	str	r3, [r7, #76]	; 0x4c
    371a:	2302      	movs	r3, #2
    371c:	713b      	strb	r3, [r7, #4]
    371e:	2300      	movs	r3, #0
    3720:	717b      	strb	r3, [r7, #5]
    3722:	71bb      	strb	r3, [r7, #6]
    3724:	71fb      	strb	r3, [r7, #7]
    3726:	687a      	ldr	r2, [r7, #4]
    3728:	64ba      	str	r2, [r7, #72]	; 0x48
    372a:	4619      	mov	r1, r3
    372c:	f363 0100 	bfi	r1, r3, #0, #1
    3730:	f363 0141 	bfi	r1, r3, #1, #1
    3734:	f363 0182 	bfi	r1, r3, #2, #1
    3738:	f363 01c5 	bfi	r1, r3, #3, #3
    373c:	2201      	movs	r2, #1
    373e:	f362 1188 	bfi	r1, r2, #6, #3
    3742:	2208      	movs	r2, #8
    3744:	f362 2152 	bfi	r1, r2, #9, #10
    3748:	f363 41de 	bfi	r1, r3, #19, #12
    374c:	f363 71df 	bfi	r1, r3, #31, #1
    3750:	f107 0248 	add.w	r2, r7, #72	; 0x48
    3754:	4860      	ldr	r0, [pc, #384]	; (38d8 <mem_manage_fault+0x2d0>)
    3756:	f008 fce2 	bl	c11e <z_impl_z_log_msg_static_create>
    375a:	e788      	b.n	366e <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    375c:	4b62      	ldr	r3, [pc, #392]	; (38e8 <mem_manage_fault+0x2e0>)
    375e:	667b      	str	r3, [r7, #100]	; 0x64
    3760:	2302      	movs	r3, #2
    3762:	713b      	strb	r3, [r7, #4]
    3764:	2300      	movs	r3, #0
    3766:	717b      	strb	r3, [r7, #5]
    3768:	71bb      	strb	r3, [r7, #6]
    376a:	71fb      	strb	r3, [r7, #7]
    376c:	687a      	ldr	r2, [r7, #4]
    376e:	663a      	str	r2, [r7, #96]	; 0x60
    3770:	4619      	mov	r1, r3
    3772:	f363 0100 	bfi	r1, r3, #0, #1
    3776:	f363 0141 	bfi	r1, r3, #1, #1
    377a:	f363 0182 	bfi	r1, r3, #2, #1
    377e:	f363 01c5 	bfi	r1, r3, #3, #3
    3782:	2201      	movs	r2, #1
    3784:	f362 1188 	bfi	r1, r2, #6, #3
    3788:	2208      	movs	r2, #8
    378a:	f362 2152 	bfi	r1, r2, #9, #10
    378e:	f363 41de 	bfi	r1, r3, #19, #12
    3792:	f363 71df 	bfi	r1, r3, #31, #1
    3796:	f107 0260 	add.w	r2, r7, #96	; 0x60
    379a:	484f      	ldr	r0, [pc, #316]	; (38d8 <mem_manage_fault+0x2d0>)
    379c:	f008 fcbf 	bl	c11e <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    37a0:	4b4e      	ldr	r3, [pc, #312]	; (38dc <mem_manage_fault+0x2d4>)
    37a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    37a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37a6:	f013 0f80 	tst.w	r3, #128	; 0x80
    37aa:	f43f af65 	beq.w	3678 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    37ae:	46e8      	mov	r8, sp
    37b0:	b088      	sub	sp, #32
    37b2:	466b      	mov	r3, sp
    37b4:	f113 0210 	adds.w	r2, r3, #16
    37b8:	d011      	beq.n	37de <mem_manage_fault+0x1d6>
    37ba:	210c      	movs	r1, #12
    37bc:	b152      	cbz	r2, 37d4 <mem_manage_fault+0x1cc>
    37be:	468c      	mov	ip, r1
    37c0:	2904      	cmp	r1, #4
    37c2:	dd03      	ble.n	37cc <mem_manage_fault+0x1c4>
    37c4:	f8df e124 	ldr.w	lr, [pc, #292]	; 38ec <mem_manage_fault+0x2e4>
    37c8:	f8c3 e014 	str.w	lr, [r3, #20]
    37cc:	f1bc 0f08 	cmp.w	ip, #8
    37d0:	dd08      	ble.n	37e4 <mem_manage_fault+0x1dc>
    37d2:	6198      	str	r0, [r3, #24]
    37d4:	290b      	cmp	r1, #11
    37d6:	dd32      	ble.n	383e <mem_manage_fault+0x236>
    37d8:	f04f 0c0c 	mov.w	ip, #12
    37dc:	e004      	b.n	37e8 <mem_manage_fault+0x1e0>
    37de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    37e2:	e7eb      	b.n	37bc <mem_manage_fault+0x1b4>
    37e4:	f06f 0c1b 	mvn.w	ip, #27
    37e8:	b13a      	cbz	r2, 37fa <mem_manage_fault+0x1f2>
    37ea:	2103      	movs	r1, #3
    37ec:	7139      	strb	r1, [r7, #4]
    37ee:	2100      	movs	r1, #0
    37f0:	7179      	strb	r1, [r7, #5]
    37f2:	71b9      	strb	r1, [r7, #6]
    37f4:	71f9      	strb	r1, [r7, #7]
    37f6:	6878      	ldr	r0, [r7, #4]
    37f8:	6118      	str	r0, [r3, #16]
    37fa:	2100      	movs	r1, #0
    37fc:	f36f 0100 	bfc	r1, #0, #1
    3800:	f36f 0141 	bfc	r1, #1, #1
    3804:	f36f 0182 	bfc	r1, #2, #1
    3808:	f36f 01c5 	bfc	r1, #3, #3
    380c:	2301      	movs	r3, #1
    380e:	f363 1188 	bfi	r1, r3, #6, #3
    3812:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    3816:	f363 2152 	bfi	r1, r3, #9, #10
    381a:	f36f 41de 	bfc	r1, #19, #12
    381e:	f36f 71df 	bfc	r1, #31, #1
    3822:	2300      	movs	r3, #0
    3824:	482c      	ldr	r0, [pc, #176]	; (38d8 <mem_manage_fault+0x2d0>)
    3826:	f008 fc7a 	bl	c11e <z_impl_z_log_msg_static_create>
    382a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    382c:	2e00      	cmp	r6, #0
    382e:	f43f af23 	beq.w	3678 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3832:	4a2a      	ldr	r2, [pc, #168]	; (38dc <mem_manage_fault+0x2d4>)
    3834:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    383a:	6293      	str	r3, [r2, #40]	; 0x28
    383c:	e71c      	b.n	3678 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    383e:	f06f 0c1b 	mvn.w	ip, #27
    3842:	e7d1      	b.n	37e8 <mem_manage_fault+0x1e0>
		PR_FAULT_INFO("  Instruction Access Violation");
    3844:	4b2a      	ldr	r3, [pc, #168]	; (38f0 <mem_manage_fault+0x2e8>)
    3846:	67fb      	str	r3, [r7, #124]	; 0x7c
    3848:	2302      	movs	r3, #2
    384a:	713b      	strb	r3, [r7, #4]
    384c:	2300      	movs	r3, #0
    384e:	717b      	strb	r3, [r7, #5]
    3850:	71bb      	strb	r3, [r7, #6]
    3852:	71fb      	strb	r3, [r7, #7]
    3854:	687a      	ldr	r2, [r7, #4]
    3856:	67ba      	str	r2, [r7, #120]	; 0x78
    3858:	4619      	mov	r1, r3
    385a:	f363 0100 	bfi	r1, r3, #0, #1
    385e:	f363 0141 	bfi	r1, r3, #1, #1
    3862:	f363 0182 	bfi	r1, r3, #2, #1
    3866:	f363 01c5 	bfi	r1, r3, #3, #3
    386a:	2201      	movs	r2, #1
    386c:	f362 1188 	bfi	r1, r2, #6, #3
    3870:	2208      	movs	r2, #8
    3872:	f362 2152 	bfi	r1, r2, #9, #10
    3876:	f363 41de 	bfi	r1, r3, #19, #12
    387a:	f363 71df 	bfi	r1, r3, #31, #1
    387e:	f107 0278 	add.w	r2, r7, #120	; 0x78
    3882:	4815      	ldr	r0, [pc, #84]	; (38d8 <mem_manage_fault+0x2d0>)
    3884:	f008 fc4b 	bl	c11e <z_impl_z_log_msg_static_create>
    3888:	e6fc      	b.n	3684 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
    388a:	4b1a      	ldr	r3, [pc, #104]	; (38f4 <mem_manage_fault+0x2ec>)
    388c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    3890:	2302      	movs	r3, #2
    3892:	713b      	strb	r3, [r7, #4]
    3894:	2300      	movs	r3, #0
    3896:	717b      	strb	r3, [r7, #5]
    3898:	71bb      	strb	r3, [r7, #6]
    389a:	71fb      	strb	r3, [r7, #7]
    389c:	687a      	ldr	r2, [r7, #4]
    389e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    38a2:	4619      	mov	r1, r3
    38a4:	f363 0100 	bfi	r1, r3, #0, #1
    38a8:	f363 0141 	bfi	r1, r3, #1, #1
    38ac:	f363 0182 	bfi	r1, r3, #2, #1
    38b0:	f363 01c5 	bfi	r1, r3, #3, #3
    38b4:	2201      	movs	r2, #1
    38b6:	f362 1188 	bfi	r1, r2, #6, #3
    38ba:	2208      	movs	r2, #8
    38bc:	f362 2152 	bfi	r1, r2, #9, #10
    38c0:	f363 41de 	bfi	r1, r3, #19, #12
    38c4:	f363 71df 	bfi	r1, r3, #31, #1
    38c8:	f107 0290 	add.w	r2, r7, #144	; 0x90
    38cc:	4802      	ldr	r0, [pc, #8]	; (38d8 <mem_manage_fault+0x2d0>)
    38ce:	f008 fc26 	bl	c11e <z_impl_z_log_msg_static_create>
    38d2:	e6dd      	b.n	3690 <mem_manage_fault+0x88>
    38d4:	0000fdc0 	.word	0x0000fdc0
    38d8:	0000f7b8 	.word	0x0000f7b8
    38dc:	e000ed00 	.word	0xe000ed00
    38e0:	0000fdd8 	.word	0x0000fdd8
    38e4:	0000fe0c 	.word	0x0000fe0c
    38e8:	0000fe20 	.word	0x0000fe20
    38ec:	0000fe38 	.word	0x0000fe38
    38f0:	0000fe50 	.word	0x0000fe50
    38f4:	0000fe70 	.word	0x0000fe70

000038f8 <bus_fault>:
{
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38fc:	b0ac      	sub	sp, #176	; 0xb0
    38fe:	af00      	add	r7, sp, #0
    3900:	4605      	mov	r5, r0
    3902:	460e      	mov	r6, r1
    3904:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    3906:	4bbc      	ldr	r3, [pc, #752]	; (3bf8 <bus_fault+0x300>)
    3908:	61fb      	str	r3, [r7, #28]
    390a:	2302      	movs	r3, #2
    390c:	713b      	strb	r3, [r7, #4]
    390e:	2300      	movs	r3, #0
    3910:	717b      	strb	r3, [r7, #5]
    3912:	71bb      	strb	r3, [r7, #6]
    3914:	71fb      	strb	r3, [r7, #7]
    3916:	687a      	ldr	r2, [r7, #4]
    3918:	61ba      	str	r2, [r7, #24]
    391a:	4619      	mov	r1, r3
    391c:	f363 0100 	bfi	r1, r3, #0, #1
    3920:	f363 0141 	bfi	r1, r3, #1, #1
    3924:	f363 0182 	bfi	r1, r3, #2, #1
    3928:	f363 01c5 	bfi	r1, r3, #3, #3
    392c:	2201      	movs	r2, #1
    392e:	f362 1188 	bfi	r1, r2, #6, #3
    3932:	2208      	movs	r2, #8
    3934:	f362 2152 	bfi	r1, r2, #9, #10
    3938:	f363 41de 	bfi	r1, r3, #19, #12
    393c:	f363 71df 	bfi	r1, r3, #31, #1
    3940:	f107 0218 	add.w	r2, r7, #24
    3944:	48ad      	ldr	r0, [pc, #692]	; (3bfc <bus_fault+0x304>)
    3946:	f008 fbea 	bl	c11e <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    394a:	4bad      	ldr	r3, [pc, #692]	; (3c00 <bus_fault+0x308>)
    394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    394e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3952:	d12a      	bne.n	39aa <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3954:	4baa      	ldr	r3, [pc, #680]	; (3c00 <bus_fault+0x308>)
    3956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3958:	f413 6f00 	tst.w	r3, #2048	; 0x800
    395c:	d148      	bne.n	39f0 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    395e:	4ba8      	ldr	r3, [pc, #672]	; (3c00 <bus_fault+0x308>)
    3960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3962:	f413 7f00 	tst.w	r3, #512	; 0x200
    3966:	d166      	bne.n	3a36 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3968:	4ba5      	ldr	r3, [pc, #660]	; (3c00 <bus_fault+0x308>)
    396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    396c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3970:	f040 80d5 	bne.w	3b1e <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3974:	4ba2      	ldr	r3, [pc, #648]	; (3c00 <bus_fault+0x308>)
    3976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3978:	f413 7f80 	tst.w	r3, #256	; 0x100
    397c:	f040 80f2 	bne.w	3b64 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3980:	4b9f      	ldr	r3, [pc, #636]	; (3c00 <bus_fault+0x308>)
    3982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3984:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3988:	f040 8111 	bne.w	3bae <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    398c:	4a9c      	ldr	r2, [pc, #624]	; (3c00 <bus_fault+0x308>)
    398e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3990:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3994:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3996:	2101      	movs	r1, #1
    3998:	4628      	mov	r0, r5
    399a:	f008 ffad 	bl	c8f8 <memory_fault_recoverable>
    399e:	7020      	strb	r0, [r4, #0]
}
    39a0:	2000      	movs	r0, #0
    39a2:	37b0      	adds	r7, #176	; 0xb0
    39a4:	46bd      	mov	sp, r7
    39a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    39aa:	4b96      	ldr	r3, [pc, #600]	; (3c04 <bus_fault+0x30c>)
    39ac:	637b      	str	r3, [r7, #52]	; 0x34
    39ae:	2302      	movs	r3, #2
    39b0:	713b      	strb	r3, [r7, #4]
    39b2:	2300      	movs	r3, #0
    39b4:	717b      	strb	r3, [r7, #5]
    39b6:	71bb      	strb	r3, [r7, #6]
    39b8:	71fb      	strb	r3, [r7, #7]
    39ba:	687a      	ldr	r2, [r7, #4]
    39bc:	633a      	str	r2, [r7, #48]	; 0x30
    39be:	4619      	mov	r1, r3
    39c0:	f363 0100 	bfi	r1, r3, #0, #1
    39c4:	f363 0141 	bfi	r1, r3, #1, #1
    39c8:	f363 0182 	bfi	r1, r3, #2, #1
    39cc:	f363 01c5 	bfi	r1, r3, #3, #3
    39d0:	2201      	movs	r2, #1
    39d2:	f362 1188 	bfi	r1, r2, #6, #3
    39d6:	2208      	movs	r2, #8
    39d8:	f362 2152 	bfi	r1, r2, #9, #10
    39dc:	f363 41de 	bfi	r1, r3, #19, #12
    39e0:	f363 71df 	bfi	r1, r3, #31, #1
    39e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
    39e8:	4884      	ldr	r0, [pc, #528]	; (3bfc <bus_fault+0x304>)
    39ea:	f008 fb98 	bl	c11e <z_impl_z_log_msg_static_create>
    39ee:	e7b1      	b.n	3954 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    39f0:	4b85      	ldr	r3, [pc, #532]	; (3c08 <bus_fault+0x310>)
    39f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    39f4:	2302      	movs	r3, #2
    39f6:	713b      	strb	r3, [r7, #4]
    39f8:	2300      	movs	r3, #0
    39fa:	717b      	strb	r3, [r7, #5]
    39fc:	71bb      	strb	r3, [r7, #6]
    39fe:	71fb      	strb	r3, [r7, #7]
    3a00:	687a      	ldr	r2, [r7, #4]
    3a02:	64ba      	str	r2, [r7, #72]	; 0x48
    3a04:	4619      	mov	r1, r3
    3a06:	f363 0100 	bfi	r1, r3, #0, #1
    3a0a:	f363 0141 	bfi	r1, r3, #1, #1
    3a0e:	f363 0182 	bfi	r1, r3, #2, #1
    3a12:	f363 01c5 	bfi	r1, r3, #3, #3
    3a16:	2201      	movs	r2, #1
    3a18:	f362 1188 	bfi	r1, r2, #6, #3
    3a1c:	2208      	movs	r2, #8
    3a1e:	f362 2152 	bfi	r1, r2, #9, #10
    3a22:	f363 41de 	bfi	r1, r3, #19, #12
    3a26:	f363 71df 	bfi	r1, r3, #31, #1
    3a2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    3a2e:	4873      	ldr	r0, [pc, #460]	; (3bfc <bus_fault+0x304>)
    3a30:	f008 fb75 	bl	c11e <z_impl_z_log_msg_static_create>
    3a34:	e793      	b.n	395e <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    3a36:	4b75      	ldr	r3, [pc, #468]	; (3c0c <bus_fault+0x314>)
    3a38:	667b      	str	r3, [r7, #100]	; 0x64
    3a3a:	2302      	movs	r3, #2
    3a3c:	713b      	strb	r3, [r7, #4]
    3a3e:	2300      	movs	r3, #0
    3a40:	717b      	strb	r3, [r7, #5]
    3a42:	71bb      	strb	r3, [r7, #6]
    3a44:	71fb      	strb	r3, [r7, #7]
    3a46:	687a      	ldr	r2, [r7, #4]
    3a48:	663a      	str	r2, [r7, #96]	; 0x60
    3a4a:	4619      	mov	r1, r3
    3a4c:	f363 0100 	bfi	r1, r3, #0, #1
    3a50:	f363 0141 	bfi	r1, r3, #1, #1
    3a54:	f363 0182 	bfi	r1, r3, #2, #1
    3a58:	f363 01c5 	bfi	r1, r3, #3, #3
    3a5c:	2201      	movs	r2, #1
    3a5e:	f362 1188 	bfi	r1, r2, #6, #3
    3a62:	2208      	movs	r2, #8
    3a64:	f362 2152 	bfi	r1, r2, #9, #10
    3a68:	f363 41de 	bfi	r1, r3, #19, #12
    3a6c:	f363 71df 	bfi	r1, r3, #31, #1
    3a70:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3a74:	4861      	ldr	r0, [pc, #388]	; (3bfc <bus_fault+0x304>)
    3a76:	f008 fb52 	bl	c11e <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3a7a:	4b61      	ldr	r3, [pc, #388]	; (3c00 <bus_fault+0x308>)
    3a7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3a84:	f43f af70 	beq.w	3968 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3a88:	46e8      	mov	r8, sp
    3a8a:	b088      	sub	sp, #32
    3a8c:	466b      	mov	r3, sp
    3a8e:	f113 0210 	adds.w	r2, r3, #16
    3a92:	d011      	beq.n	3ab8 <bus_fault+0x1c0>
    3a94:	210c      	movs	r1, #12
    3a96:	b152      	cbz	r2, 3aae <bus_fault+0x1b6>
    3a98:	468c      	mov	ip, r1
    3a9a:	2904      	cmp	r1, #4
    3a9c:	dd03      	ble.n	3aa6 <bus_fault+0x1ae>
    3a9e:	f8df e170 	ldr.w	lr, [pc, #368]	; 3c10 <bus_fault+0x318>
    3aa2:	f8c3 e014 	str.w	lr, [r3, #20]
    3aa6:	f1bc 0f08 	cmp.w	ip, #8
    3aaa:	dd08      	ble.n	3abe <bus_fault+0x1c6>
    3aac:	6198      	str	r0, [r3, #24]
    3aae:	290b      	cmp	r1, #11
    3ab0:	dd32      	ble.n	3b18 <bus_fault+0x220>
    3ab2:	f04f 0c0c 	mov.w	ip, #12
    3ab6:	e004      	b.n	3ac2 <bus_fault+0x1ca>
    3ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3abc:	e7eb      	b.n	3a96 <bus_fault+0x19e>
    3abe:	f06f 0c1b 	mvn.w	ip, #27
    3ac2:	b13a      	cbz	r2, 3ad4 <bus_fault+0x1dc>
    3ac4:	2103      	movs	r1, #3
    3ac6:	7139      	strb	r1, [r7, #4]
    3ac8:	2100      	movs	r1, #0
    3aca:	7179      	strb	r1, [r7, #5]
    3acc:	71b9      	strb	r1, [r7, #6]
    3ace:	71f9      	strb	r1, [r7, #7]
    3ad0:	6878      	ldr	r0, [r7, #4]
    3ad2:	6118      	str	r0, [r3, #16]
    3ad4:	2100      	movs	r1, #0
    3ad6:	f36f 0100 	bfc	r1, #0, #1
    3ada:	f36f 0141 	bfc	r1, #1, #1
    3ade:	f36f 0182 	bfc	r1, #2, #1
    3ae2:	f36f 01c5 	bfc	r1, #3, #3
    3ae6:	2301      	movs	r3, #1
    3ae8:	f363 1188 	bfi	r1, r3, #6, #3
    3aec:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    3af0:	f363 2152 	bfi	r1, r3, #9, #10
    3af4:	f36f 41de 	bfc	r1, #19, #12
    3af8:	f36f 71df 	bfc	r1, #31, #1
    3afc:	2300      	movs	r3, #0
    3afe:	483f      	ldr	r0, [pc, #252]	; (3bfc <bus_fault+0x304>)
    3b00:	f008 fb0d 	bl	c11e <z_impl_z_log_msg_static_create>
    3b04:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3b06:	2e00      	cmp	r6, #0
    3b08:	f43f af2e 	beq.w	3968 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3b0c:	4a3c      	ldr	r2, [pc, #240]	; (3c00 <bus_fault+0x308>)
    3b0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3b14:	6293      	str	r3, [r2, #40]	; 0x28
    3b16:	e727      	b.n	3968 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3b18:	f06f 0c1b 	mvn.w	ip, #27
    3b1c:	e7d1      	b.n	3ac2 <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
    3b1e:	4b3d      	ldr	r3, [pc, #244]	; (3c14 <bus_fault+0x31c>)
    3b20:	67fb      	str	r3, [r7, #124]	; 0x7c
    3b22:	2302      	movs	r3, #2
    3b24:	713b      	strb	r3, [r7, #4]
    3b26:	2300      	movs	r3, #0
    3b28:	717b      	strb	r3, [r7, #5]
    3b2a:	71bb      	strb	r3, [r7, #6]
    3b2c:	71fb      	strb	r3, [r7, #7]
    3b2e:	687a      	ldr	r2, [r7, #4]
    3b30:	67ba      	str	r2, [r7, #120]	; 0x78
    3b32:	4619      	mov	r1, r3
    3b34:	f363 0100 	bfi	r1, r3, #0, #1
    3b38:	f363 0141 	bfi	r1, r3, #1, #1
    3b3c:	f363 0182 	bfi	r1, r3, #2, #1
    3b40:	f363 01c5 	bfi	r1, r3, #3, #3
    3b44:	2201      	movs	r2, #1
    3b46:	f362 1188 	bfi	r1, r2, #6, #3
    3b4a:	2208      	movs	r2, #8
    3b4c:	f362 2152 	bfi	r1, r2, #9, #10
    3b50:	f363 41de 	bfi	r1, r3, #19, #12
    3b54:	f363 71df 	bfi	r1, r3, #31, #1
    3b58:	f107 0278 	add.w	r2, r7, #120	; 0x78
    3b5c:	4827      	ldr	r0, [pc, #156]	; (3bfc <bus_fault+0x304>)
    3b5e:	f008 fade 	bl	c11e <z_impl_z_log_msg_static_create>
    3b62:	e707      	b.n	3974 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    3b64:	4b2c      	ldr	r3, [pc, #176]	; (3c18 <bus_fault+0x320>)
    3b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    3b6a:	2302      	movs	r3, #2
    3b6c:	713b      	strb	r3, [r7, #4]
    3b6e:	2300      	movs	r3, #0
    3b70:	717b      	strb	r3, [r7, #5]
    3b72:	71bb      	strb	r3, [r7, #6]
    3b74:	71fb      	strb	r3, [r7, #7]
    3b76:	687a      	ldr	r2, [r7, #4]
    3b78:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    3b7c:	4619      	mov	r1, r3
    3b7e:	f363 0100 	bfi	r1, r3, #0, #1
    3b82:	f363 0141 	bfi	r1, r3, #1, #1
    3b86:	f363 0182 	bfi	r1, r3, #2, #1
    3b8a:	f363 01c5 	bfi	r1, r3, #3, #3
    3b8e:	2201      	movs	r2, #1
    3b90:	f362 1188 	bfi	r1, r2, #6, #3
    3b94:	2208      	movs	r2, #8
    3b96:	f362 2152 	bfi	r1, r2, #9, #10
    3b9a:	f363 41de 	bfi	r1, r3, #19, #12
    3b9e:	f363 71df 	bfi	r1, r3, #31, #1
    3ba2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    3ba6:	4815      	ldr	r0, [pc, #84]	; (3bfc <bus_fault+0x304>)
    3ba8:	f008 fab9 	bl	c11e <z_impl_z_log_msg_static_create>
    3bac:	e6ee      	b.n	398c <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3bae:	4b1b      	ldr	r3, [pc, #108]	; (3c1c <bus_fault+0x324>)
    3bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    3bb4:	2302      	movs	r3, #2
    3bb6:	713b      	strb	r3, [r7, #4]
    3bb8:	2300      	movs	r3, #0
    3bba:	717b      	strb	r3, [r7, #5]
    3bbc:	71bb      	strb	r3, [r7, #6]
    3bbe:	71fb      	strb	r3, [r7, #7]
    3bc0:	687a      	ldr	r2, [r7, #4]
    3bc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    3bc6:	4619      	mov	r1, r3
    3bc8:	f363 0100 	bfi	r1, r3, #0, #1
    3bcc:	f363 0141 	bfi	r1, r3, #1, #1
    3bd0:	f363 0182 	bfi	r1, r3, #2, #1
    3bd4:	f363 01c5 	bfi	r1, r3, #3, #3
    3bd8:	2201      	movs	r2, #1
    3bda:	f362 1188 	bfi	r1, r2, #6, #3
    3bde:	2208      	movs	r2, #8
    3be0:	f362 2152 	bfi	r1, r2, #9, #10
    3be4:	f363 41de 	bfi	r1, r3, #19, #12
    3be8:	f363 71df 	bfi	r1, r3, #31, #1
    3bec:	f107 0290 	add.w	r2, r7, #144	; 0x90
    3bf0:	4802      	ldr	r0, [pc, #8]	; (3bfc <bus_fault+0x304>)
    3bf2:	f008 fa94 	bl	c11e <z_impl_z_log_msg_static_create>
    3bf6:	e6c9      	b.n	398c <bus_fault+0x94>
    3bf8:	0000fea0 	.word	0x0000fea0
    3bfc:	0000f7b8 	.word	0x0000f7b8
    3c00:	e000ed00 	.word	0xe000ed00
    3c04:	0000feb8 	.word	0x0000feb8
    3c08:	0000fe0c 	.word	0x0000fe0c
    3c0c:	0000fecc 	.word	0x0000fecc
    3c10:	0000fee8 	.word	0x0000fee8
    3c14:	0000ff00 	.word	0x0000ff00
    3c18:	0000ff1c 	.word	0x0000ff1c
    3c1c:	0000fe70 	.word	0x0000fe70

00003c20 <usage_fault>:
{
    3c20:	b510      	push	{r4, lr}
    3c22:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3c24:	4baf      	ldr	r3, [pc, #700]	; (3ee4 <usage_fault+0x2c4>)
    3c26:	9307      	str	r3, [sp, #28]
    3c28:	2302      	movs	r3, #2
    3c2a:	f88d 3004 	strb.w	r3, [sp, #4]
    3c2e:	2300      	movs	r3, #0
    3c30:	f88d 3005 	strb.w	r3, [sp, #5]
    3c34:	f88d 3006 	strb.w	r3, [sp, #6]
    3c38:	f88d 3007 	strb.w	r3, [sp, #7]
    3c3c:	9a01      	ldr	r2, [sp, #4]
    3c3e:	9206      	str	r2, [sp, #24]
    3c40:	4619      	mov	r1, r3
    3c42:	f363 0100 	bfi	r1, r3, #0, #1
    3c46:	f363 0141 	bfi	r1, r3, #1, #1
    3c4a:	f363 0182 	bfi	r1, r3, #2, #1
    3c4e:	f363 01c5 	bfi	r1, r3, #3, #3
    3c52:	2201      	movs	r2, #1
    3c54:	f362 1188 	bfi	r1, r2, #6, #3
    3c58:	2208      	movs	r2, #8
    3c5a:	f362 2152 	bfi	r1, r2, #9, #10
    3c5e:	f363 41de 	bfi	r1, r3, #19, #12
    3c62:	f363 71df 	bfi	r1, r3, #31, #1
    3c66:	aa06      	add	r2, sp, #24
    3c68:	489f      	ldr	r0, [pc, #636]	; (3ee8 <usage_fault+0x2c8>)
    3c6a:	f008 fa58 	bl	c11e <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3c6e:	4b9f      	ldr	r3, [pc, #636]	; (3eec <usage_fault+0x2cc>)
    3c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3c76:	d12b      	bne.n	3cd0 <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3c78:	4b9c      	ldr	r3, [pc, #624]	; (3eec <usage_fault+0x2cc>)
    3c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3c80:	d14c      	bne.n	3d1c <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3c82:	4b9a      	ldr	r3, [pc, #616]	; (3eec <usage_fault+0x2cc>)
    3c84:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3c86:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    3c8a:	d16d      	bne.n	3d68 <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3c8c:	4b97      	ldr	r3, [pc, #604]	; (3eec <usage_fault+0x2cc>)
    3c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c90:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3c94:	f040 808e 	bne.w	3db4 <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3c98:	4b94      	ldr	r3, [pc, #592]	; (3eec <usage_fault+0x2cc>)
    3c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c9c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3ca0:	f040 80ae 	bne.w	3e00 <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3ca4:	4b91      	ldr	r3, [pc, #580]	; (3eec <usage_fault+0x2cc>)
    3ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ca8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3cac:	f040 80ce 	bne.w	3e4c <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3cb0:	4b8e      	ldr	r3, [pc, #568]	; (3eec <usage_fault+0x2cc>)
    3cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3cb8:	f040 80ee 	bne.w	3e98 <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3cbc:	4a8b      	ldr	r2, [pc, #556]	; (3eec <usage_fault+0x2cc>)
    3cbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cc0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3cc4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3cc8:	6293      	str	r3, [r2, #40]	; 0x28
}
    3cca:	4620      	mov	r0, r4
    3ccc:	b032      	add	sp, #200	; 0xc8
    3cce:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    3cd0:	4b87      	ldr	r3, [pc, #540]	; (3ef0 <usage_fault+0x2d0>)
    3cd2:	930d      	str	r3, [sp, #52]	; 0x34
    3cd4:	2302      	movs	r3, #2
    3cd6:	f88d 3004 	strb.w	r3, [sp, #4]
    3cda:	2300      	movs	r3, #0
    3cdc:	f88d 3005 	strb.w	r3, [sp, #5]
    3ce0:	f88d 3006 	strb.w	r3, [sp, #6]
    3ce4:	f88d 3007 	strb.w	r3, [sp, #7]
    3ce8:	9a01      	ldr	r2, [sp, #4]
    3cea:	920c      	str	r2, [sp, #48]	; 0x30
    3cec:	4619      	mov	r1, r3
    3cee:	f363 0100 	bfi	r1, r3, #0, #1
    3cf2:	f363 0141 	bfi	r1, r3, #1, #1
    3cf6:	f363 0182 	bfi	r1, r3, #2, #1
    3cfa:	f363 01c5 	bfi	r1, r3, #3, #3
    3cfe:	2201      	movs	r2, #1
    3d00:	f362 1188 	bfi	r1, r2, #6, #3
    3d04:	2208      	movs	r2, #8
    3d06:	f362 2152 	bfi	r1, r2, #9, #10
    3d0a:	f363 41de 	bfi	r1, r3, #19, #12
    3d0e:	f363 71df 	bfi	r1, r3, #31, #1
    3d12:	aa0c      	add	r2, sp, #48	; 0x30
    3d14:	4874      	ldr	r0, [pc, #464]	; (3ee8 <usage_fault+0x2c8>)
    3d16:	f008 fa02 	bl	c11e <z_impl_z_log_msg_static_create>
    3d1a:	e7ad      	b.n	3c78 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    3d1c:	4b75      	ldr	r3, [pc, #468]	; (3ef4 <usage_fault+0x2d4>)
    3d1e:	9313      	str	r3, [sp, #76]	; 0x4c
    3d20:	2302      	movs	r3, #2
    3d22:	f88d 3004 	strb.w	r3, [sp, #4]
    3d26:	2300      	movs	r3, #0
    3d28:	f88d 3005 	strb.w	r3, [sp, #5]
    3d2c:	f88d 3006 	strb.w	r3, [sp, #6]
    3d30:	f88d 3007 	strb.w	r3, [sp, #7]
    3d34:	9a01      	ldr	r2, [sp, #4]
    3d36:	9212      	str	r2, [sp, #72]	; 0x48
    3d38:	4619      	mov	r1, r3
    3d3a:	f363 0100 	bfi	r1, r3, #0, #1
    3d3e:	f363 0141 	bfi	r1, r3, #1, #1
    3d42:	f363 0182 	bfi	r1, r3, #2, #1
    3d46:	f363 01c5 	bfi	r1, r3, #3, #3
    3d4a:	2201      	movs	r2, #1
    3d4c:	f362 1188 	bfi	r1, r2, #6, #3
    3d50:	2208      	movs	r2, #8
    3d52:	f362 2152 	bfi	r1, r2, #9, #10
    3d56:	f363 41de 	bfi	r1, r3, #19, #12
    3d5a:	f363 71df 	bfi	r1, r3, #31, #1
    3d5e:	aa12      	add	r2, sp, #72	; 0x48
    3d60:	4861      	ldr	r0, [pc, #388]	; (3ee8 <usage_fault+0x2c8>)
    3d62:	f008 f9dc 	bl	c11e <z_impl_z_log_msg_static_create>
    3d66:	e78c      	b.n	3c82 <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    3d68:	4b63      	ldr	r3, [pc, #396]	; (3ef8 <usage_fault+0x2d8>)
    3d6a:	9319      	str	r3, [sp, #100]	; 0x64
    3d6c:	2402      	movs	r4, #2
    3d6e:	f88d 4004 	strb.w	r4, [sp, #4]
    3d72:	2300      	movs	r3, #0
    3d74:	f88d 3005 	strb.w	r3, [sp, #5]
    3d78:	f88d 3006 	strb.w	r3, [sp, #6]
    3d7c:	f88d 3007 	strb.w	r3, [sp, #7]
    3d80:	9a01      	ldr	r2, [sp, #4]
    3d82:	9218      	str	r2, [sp, #96]	; 0x60
    3d84:	4619      	mov	r1, r3
    3d86:	f363 0100 	bfi	r1, r3, #0, #1
    3d8a:	f363 0141 	bfi	r1, r3, #1, #1
    3d8e:	f363 0182 	bfi	r1, r3, #2, #1
    3d92:	f363 01c5 	bfi	r1, r3, #3, #3
    3d96:	2201      	movs	r2, #1
    3d98:	f362 1188 	bfi	r1, r2, #6, #3
    3d9c:	2208      	movs	r2, #8
    3d9e:	f362 2152 	bfi	r1, r2, #9, #10
    3da2:	f363 41de 	bfi	r1, r3, #19, #12
    3da6:	f363 71df 	bfi	r1, r3, #31, #1
    3daa:	aa18      	add	r2, sp, #96	; 0x60
    3dac:	484e      	ldr	r0, [pc, #312]	; (3ee8 <usage_fault+0x2c8>)
    3dae:	f008 f9b6 	bl	c11e <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
    3db2:	e76b      	b.n	3c8c <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3db4:	4b51      	ldr	r3, [pc, #324]	; (3efc <usage_fault+0x2dc>)
    3db6:	931f      	str	r3, [sp, #124]	; 0x7c
    3db8:	2302      	movs	r3, #2
    3dba:	f88d 3004 	strb.w	r3, [sp, #4]
    3dbe:	2300      	movs	r3, #0
    3dc0:	f88d 3005 	strb.w	r3, [sp, #5]
    3dc4:	f88d 3006 	strb.w	r3, [sp, #6]
    3dc8:	f88d 3007 	strb.w	r3, [sp, #7]
    3dcc:	9a01      	ldr	r2, [sp, #4]
    3dce:	921e      	str	r2, [sp, #120]	; 0x78
    3dd0:	4619      	mov	r1, r3
    3dd2:	f363 0100 	bfi	r1, r3, #0, #1
    3dd6:	f363 0141 	bfi	r1, r3, #1, #1
    3dda:	f363 0182 	bfi	r1, r3, #2, #1
    3dde:	f363 01c5 	bfi	r1, r3, #3, #3
    3de2:	2201      	movs	r2, #1
    3de4:	f362 1188 	bfi	r1, r2, #6, #3
    3de8:	2208      	movs	r2, #8
    3dea:	f362 2152 	bfi	r1, r2, #9, #10
    3dee:	f363 41de 	bfi	r1, r3, #19, #12
    3df2:	f363 71df 	bfi	r1, r3, #31, #1
    3df6:	aa1e      	add	r2, sp, #120	; 0x78
    3df8:	483b      	ldr	r0, [pc, #236]	; (3ee8 <usage_fault+0x2c8>)
    3dfa:	f008 f990 	bl	c11e <z_impl_z_log_msg_static_create>
    3dfe:	e74b      	b.n	3c98 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3e00:	4b3f      	ldr	r3, [pc, #252]	; (3f00 <usage_fault+0x2e0>)
    3e02:	9325      	str	r3, [sp, #148]	; 0x94
    3e04:	2302      	movs	r3, #2
    3e06:	f88d 3004 	strb.w	r3, [sp, #4]
    3e0a:	2300      	movs	r3, #0
    3e0c:	f88d 3005 	strb.w	r3, [sp, #5]
    3e10:	f88d 3006 	strb.w	r3, [sp, #6]
    3e14:	f88d 3007 	strb.w	r3, [sp, #7]
    3e18:	9a01      	ldr	r2, [sp, #4]
    3e1a:	9224      	str	r2, [sp, #144]	; 0x90
    3e1c:	4619      	mov	r1, r3
    3e1e:	f363 0100 	bfi	r1, r3, #0, #1
    3e22:	f363 0141 	bfi	r1, r3, #1, #1
    3e26:	f363 0182 	bfi	r1, r3, #2, #1
    3e2a:	f363 01c5 	bfi	r1, r3, #3, #3
    3e2e:	2201      	movs	r2, #1
    3e30:	f362 1188 	bfi	r1, r2, #6, #3
    3e34:	2208      	movs	r2, #8
    3e36:	f362 2152 	bfi	r1, r2, #9, #10
    3e3a:	f363 41de 	bfi	r1, r3, #19, #12
    3e3e:	f363 71df 	bfi	r1, r3, #31, #1
    3e42:	aa24      	add	r2, sp, #144	; 0x90
    3e44:	4828      	ldr	r0, [pc, #160]	; (3ee8 <usage_fault+0x2c8>)
    3e46:	f008 f96a 	bl	c11e <z_impl_z_log_msg_static_create>
    3e4a:	e72b      	b.n	3ca4 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3e4c:	4b2d      	ldr	r3, [pc, #180]	; (3f04 <usage_fault+0x2e4>)
    3e4e:	932b      	str	r3, [sp, #172]	; 0xac
    3e50:	2302      	movs	r3, #2
    3e52:	f88d 3004 	strb.w	r3, [sp, #4]
    3e56:	2300      	movs	r3, #0
    3e58:	f88d 3005 	strb.w	r3, [sp, #5]
    3e5c:	f88d 3006 	strb.w	r3, [sp, #6]
    3e60:	f88d 3007 	strb.w	r3, [sp, #7]
    3e64:	9a01      	ldr	r2, [sp, #4]
    3e66:	922a      	str	r2, [sp, #168]	; 0xa8
    3e68:	4619      	mov	r1, r3
    3e6a:	f363 0100 	bfi	r1, r3, #0, #1
    3e6e:	f363 0141 	bfi	r1, r3, #1, #1
    3e72:	f363 0182 	bfi	r1, r3, #2, #1
    3e76:	f363 01c5 	bfi	r1, r3, #3, #3
    3e7a:	2201      	movs	r2, #1
    3e7c:	f362 1188 	bfi	r1, r2, #6, #3
    3e80:	2208      	movs	r2, #8
    3e82:	f362 2152 	bfi	r1, r2, #9, #10
    3e86:	f363 41de 	bfi	r1, r3, #19, #12
    3e8a:	f363 71df 	bfi	r1, r3, #31, #1
    3e8e:	aa2a      	add	r2, sp, #168	; 0xa8
    3e90:	4815      	ldr	r0, [pc, #84]	; (3ee8 <usage_fault+0x2c8>)
    3e92:	f008 f944 	bl	c11e <z_impl_z_log_msg_static_create>
    3e96:	e70b      	b.n	3cb0 <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3e98:	4b1b      	ldr	r3, [pc, #108]	; (3f08 <usage_fault+0x2e8>)
    3e9a:	9331      	str	r3, [sp, #196]	; 0xc4
    3e9c:	2302      	movs	r3, #2
    3e9e:	f88d 3004 	strb.w	r3, [sp, #4]
    3ea2:	2300      	movs	r3, #0
    3ea4:	f88d 3005 	strb.w	r3, [sp, #5]
    3ea8:	f88d 3006 	strb.w	r3, [sp, #6]
    3eac:	f88d 3007 	strb.w	r3, [sp, #7]
    3eb0:	9a01      	ldr	r2, [sp, #4]
    3eb2:	9230      	str	r2, [sp, #192]	; 0xc0
    3eb4:	4619      	mov	r1, r3
    3eb6:	f363 0100 	bfi	r1, r3, #0, #1
    3eba:	f363 0141 	bfi	r1, r3, #1, #1
    3ebe:	f363 0182 	bfi	r1, r3, #2, #1
    3ec2:	f363 01c5 	bfi	r1, r3, #3, #3
    3ec6:	2201      	movs	r2, #1
    3ec8:	f362 1188 	bfi	r1, r2, #6, #3
    3ecc:	2208      	movs	r2, #8
    3ece:	f362 2152 	bfi	r1, r2, #9, #10
    3ed2:	f363 41de 	bfi	r1, r3, #19, #12
    3ed6:	f363 71df 	bfi	r1, r3, #31, #1
    3eda:	aa30      	add	r2, sp, #192	; 0xc0
    3edc:	4802      	ldr	r0, [pc, #8]	; (3ee8 <usage_fault+0x2c8>)
    3ede:	f008 f91e 	bl	c11e <z_impl_z_log_msg_static_create>
    3ee2:	e6eb      	b.n	3cbc <usage_fault+0x9c>
    3ee4:	0000ff34 	.word	0x0000ff34
    3ee8:	0000f7b8 	.word	0x0000f7b8
    3eec:	e000ed00 	.word	0xe000ed00
    3ef0:	0000ff4c 	.word	0x0000ff4c
    3ef4:	0000ff60 	.word	0x0000ff60
    3ef8:	0000ff7c 	.word	0x0000ff7c
    3efc:	0000ffa8 	.word	0x0000ffa8
    3f00:	0000ffc8 	.word	0x0000ffc8
    3f04:	0000fff0 	.word	0x0000fff0
    3f08:	0001000c 	.word	0x0001000c

00003f0c <hard_fault>:
{
    3f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f0e:	b09b      	sub	sp, #108	; 0x6c
    3f10:	af00      	add	r7, sp, #0
    3f12:	4606      	mov	r6, r0
    3f14:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    3f16:	4b86      	ldr	r3, [pc, #536]	; (4130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
    3f18:	61fb      	str	r3, [r7, #28]
    3f1a:	2302      	movs	r3, #2
    3f1c:	713b      	strb	r3, [r7, #4]
    3f1e:	2400      	movs	r4, #0
    3f20:	717c      	strb	r4, [r7, #5]
    3f22:	71bc      	strb	r4, [r7, #6]
    3f24:	71fc      	strb	r4, [r7, #7]
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	61bb      	str	r3, [r7, #24]
    3f2a:	4621      	mov	r1, r4
    3f2c:	f364 0100 	bfi	r1, r4, #0, #1
    3f30:	f364 0141 	bfi	r1, r4, #1, #1
    3f34:	f364 0182 	bfi	r1, r4, #2, #1
    3f38:	f364 01c5 	bfi	r1, r4, #3, #3
    3f3c:	2301      	movs	r3, #1
    3f3e:	f363 1188 	bfi	r1, r3, #6, #3
    3f42:	2308      	movs	r3, #8
    3f44:	f363 2152 	bfi	r1, r3, #9, #10
    3f48:	f364 41de 	bfi	r1, r4, #19, #12
    3f4c:	f364 71df 	bfi	r1, r4, #31, #1
    3f50:	4623      	mov	r3, r4
    3f52:	f107 0218 	add.w	r2, r7, #24
    3f56:	4877      	ldr	r0, [pc, #476]	; (4134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    3f58:	f008 f8e1 	bl	c11e <z_impl_z_log_msg_static_create>
	*recoverable = false;
    3f5c:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f5e:	4b76      	ldr	r3, [pc, #472]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    3f60:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3f62:	f014 0402 	ands.w	r4, r4, #2
    3f66:	d10c      	bne.n	3f82 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3f68:	4b73      	ldr	r3, [pc, #460]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    3f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	db2c      	blt.n	3fca <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3f70:	4b71      	ldr	r3, [pc, #452]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    3f72:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3f74:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3f78:	d14a      	bne.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
}
    3f7a:	4620      	mov	r0, r4
    3f7c:	376c      	adds	r7, #108	; 0x6c
    3f7e:	46bd      	mov	sp, r7
    3f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    3f82:	4b6e      	ldr	r3, [pc, #440]	; (413c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>)
    3f84:	667b      	str	r3, [r7, #100]	; 0x64
    3f86:	2302      	movs	r3, #2
    3f88:	713b      	strb	r3, [r7, #4]
    3f8a:	2400      	movs	r4, #0
    3f8c:	717c      	strb	r4, [r7, #5]
    3f8e:	71bc      	strb	r4, [r7, #6]
    3f90:	71fc      	strb	r4, [r7, #7]
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	663b      	str	r3, [r7, #96]	; 0x60
    3f96:	4621      	mov	r1, r4
    3f98:	f364 0100 	bfi	r1, r4, #0, #1
    3f9c:	f364 0141 	bfi	r1, r4, #1, #1
    3fa0:	f364 0182 	bfi	r1, r4, #2, #1
    3fa4:	f364 01c5 	bfi	r1, r4, #3, #3
    3fa8:	2301      	movs	r3, #1
    3faa:	f363 1188 	bfi	r1, r3, #6, #3
    3fae:	2308      	movs	r3, #8
    3fb0:	f363 2152 	bfi	r1, r3, #9, #10
    3fb4:	f364 41de 	bfi	r1, r4, #19, #12
    3fb8:	f364 71df 	bfi	r1, r4, #31, #1
    3fbc:	4623      	mov	r3, r4
    3fbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3fc2:	485c      	ldr	r0, [pc, #368]	; (4134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    3fc4:	f008 f8ab 	bl	c11e <z_impl_z_log_msg_static_create>
    3fc8:	e7d7      	b.n	3f7a <hard_fault+0x6e>
		PR_EXC("  Debug event");
    3fca:	4b5d      	ldr	r3, [pc, #372]	; (4140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>)
    3fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    3fce:	2302      	movs	r3, #2
    3fd0:	713b      	strb	r3, [r7, #4]
    3fd2:	2300      	movs	r3, #0
    3fd4:	717b      	strb	r3, [r7, #5]
    3fd6:	71bb      	strb	r3, [r7, #6]
    3fd8:	71fb      	strb	r3, [r7, #7]
    3fda:	687a      	ldr	r2, [r7, #4]
    3fdc:	64ba      	str	r2, [r7, #72]	; 0x48
    3fde:	4619      	mov	r1, r3
    3fe0:	f363 0100 	bfi	r1, r3, #0, #1
    3fe4:	f363 0141 	bfi	r1, r3, #1, #1
    3fe8:	f363 0182 	bfi	r1, r3, #2, #1
    3fec:	f363 01c5 	bfi	r1, r3, #3, #3
    3ff0:	2201      	movs	r2, #1
    3ff2:	f362 1188 	bfi	r1, r2, #6, #3
    3ff6:	2208      	movs	r2, #8
    3ff8:	f362 2152 	bfi	r1, r2, #9, #10
    3ffc:	f363 41de 	bfi	r1, r3, #19, #12
    4000:	f363 71df 	bfi	r1, r3, #31, #1
    4004:	f107 0248 	add.w	r2, r7, #72	; 0x48
    4008:	484a      	ldr	r0, [pc, #296]	; (4134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    400a:	f008 f888 	bl	c11e <z_impl_z_log_msg_static_create>
    400e:	e7b4      	b.n	3f7a <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
    4010:	4b4c      	ldr	r3, [pc, #304]	; (4144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
    4012:	637b      	str	r3, [r7, #52]	; 0x34
    4014:	2302      	movs	r3, #2
    4016:	713b      	strb	r3, [r7, #4]
    4018:	2300      	movs	r3, #0
    401a:	717b      	strb	r3, [r7, #5]
    401c:	71bb      	strb	r3, [r7, #6]
    401e:	71fb      	strb	r3, [r7, #7]
    4020:	687a      	ldr	r2, [r7, #4]
    4022:	633a      	str	r2, [r7, #48]	; 0x30
    4024:	4619      	mov	r1, r3
    4026:	f363 0100 	bfi	r1, r3, #0, #1
    402a:	f363 0141 	bfi	r1, r3, #1, #1
    402e:	f363 0182 	bfi	r1, r3, #2, #1
    4032:	f363 01c5 	bfi	r1, r3, #3, #3
    4036:	2201      	movs	r2, #1
    4038:	f362 1188 	bfi	r1, r2, #6, #3
    403c:	2208      	movs	r2, #8
    403e:	f362 2152 	bfi	r1, r2, #9, #10
    4042:	f363 41de 	bfi	r1, r3, #19, #12
    4046:	f363 71df 	bfi	r1, r3, #31, #1
    404a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    404e:	4839      	ldr	r0, [pc, #228]	; (4134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    4050:	f008 f865 	bl	c11e <z_impl_z_log_msg_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4054:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4056:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    405a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    405e:	429a      	cmp	r2, r3
    4060:	d014      	beq.n	408c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4062:	4b35      	ldr	r3, [pc, #212]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    4064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4066:	f013 0fff 	tst.w	r3, #255	; 0xff
    406a:	d152      	bne.n	4112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    406c:	4b32      	ldr	r3, [pc, #200]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    406e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4070:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    4074:	d154      	bne.n	4120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    4076:	4b30      	ldr	r3, [pc, #192]	; (4138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    4078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    407a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    407e:	f4ff af7c 	bcc.w	3f7a <hard_fault+0x6e>
			reason = usage_fault(esf);
    4082:	4630      	mov	r0, r6
    4084:	f7ff fdcc 	bl	3c20 <usage_fault>
    4088:	4604      	mov	r4, r0
	return reason;
    408a:	e776      	b.n	3f7a <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    408c:	6834      	ldr	r4, [r6, #0]
    408e:	466d      	mov	r5, sp
    4090:	b088      	sub	sp, #32
    4092:	466b      	mov	r3, sp
    4094:	f113 0210 	adds.w	r2, r3, #16
    4098:	d00f      	beq.n	40ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    409a:	210c      	movs	r1, #12
    409c:	b14a      	cbz	r2, 40b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    409e:	4608      	mov	r0, r1
    40a0:	2904      	cmp	r1, #4
    40a2:	dd03      	ble.n	40ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    40a4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 4148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    40a8:	f8c3 c014 	str.w	ip, [r3, #20]
    40ac:	2808      	cmp	r0, #8
    40ae:	dd07      	ble.n	40c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
    40b0:	619c      	str	r4, [r3, #24]
    40b2:	290b      	cmp	r1, #11
    40b4:	dd2a      	ble.n	410c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    40b6:	240c      	movs	r4, #12
    40b8:	e004      	b.n	40c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
    40ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    40be:	e7ed      	b.n	409c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    40c0:	f06f 041b 	mvn.w	r4, #27
    40c4:	b13a      	cbz	r2, 40d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
    40c6:	2103      	movs	r1, #3
    40c8:	7139      	strb	r1, [r7, #4]
    40ca:	2100      	movs	r1, #0
    40cc:	7179      	strb	r1, [r7, #5]
    40ce:	71b9      	strb	r1, [r7, #6]
    40d0:	71f9      	strb	r1, [r7, #7]
    40d2:	6878      	ldr	r0, [r7, #4]
    40d4:	6118      	str	r0, [r3, #16]
    40d6:	2100      	movs	r1, #0
    40d8:	f36f 0100 	bfc	r1, #0, #1
    40dc:	f36f 0141 	bfc	r1, #1, #1
    40e0:	f36f 0182 	bfc	r1, #2, #1
    40e4:	f36f 01c5 	bfc	r1, #3, #3
    40e8:	2301      	movs	r3, #1
    40ea:	f363 1188 	bfi	r1, r3, #6, #3
    40ee:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    40f2:	f364 2152 	bfi	r1, r4, #9, #10
    40f6:	f36f 41de 	bfc	r1, #19, #12
    40fa:	f36f 71df 	bfc	r1, #31, #1
    40fe:	2300      	movs	r3, #0
    4100:	480c      	ldr	r0, [pc, #48]	; (4134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    4102:	f008 f80c 	bl	c11e <z_impl_z_log_msg_static_create>
    4106:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    4108:	6834      	ldr	r4, [r6, #0]
    410a:	e736      	b.n	3f7a <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    410c:	f06f 041b 	mvn.w	r4, #27
    4110:	e7d8      	b.n	40c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
    4112:	462a      	mov	r2, r5
    4114:	2101      	movs	r1, #1
    4116:	4630      	mov	r0, r6
    4118:	f7ff fa76 	bl	3608 <mem_manage_fault>
    411c:	4604      	mov	r4, r0
    411e:	e72c      	b.n	3f7a <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
    4120:	462a      	mov	r2, r5
    4122:	2101      	movs	r1, #1
    4124:	4630      	mov	r0, r6
    4126:	f7ff fbe7 	bl	38f8 <bus_fault>
    412a:	4604      	mov	r4, r0
    412c:	e725      	b.n	3f7a <hard_fault+0x6e>
    412e:	bf00      	nop
    4130:	00010038 	.word	0x00010038
    4134:	0000f7b8 	.word	0x0000f7b8
    4138:	e000ed00 	.word	0xe000ed00
    413c:	00010050 	.word	0x00010050
    4140:	00010074 	.word	0x00010074
    4144:	00010084 	.word	0x00010084
    4148:	000100a4 	.word	0x000100a4

0000414c <debug_monitor>:
{
    414c:	b500      	push	{lr}
    414e:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    4150:	2300      	movs	r3, #0
    4152:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    4154:	4a13      	ldr	r2, [pc, #76]	; (41a4 <debug_monitor+0x58>)
    4156:	9207      	str	r2, [sp, #28]
    4158:	2202      	movs	r2, #2
    415a:	f88d 2004 	strb.w	r2, [sp, #4]
    415e:	f88d 3005 	strb.w	r3, [sp, #5]
    4162:	f88d 3006 	strb.w	r3, [sp, #6]
    4166:	f88d 3007 	strb.w	r3, [sp, #7]
    416a:	9a01      	ldr	r2, [sp, #4]
    416c:	9206      	str	r2, [sp, #24]
    416e:	4619      	mov	r1, r3
    4170:	f363 0100 	bfi	r1, r3, #0, #1
    4174:	f363 0141 	bfi	r1, r3, #1, #1
    4178:	f363 0182 	bfi	r1, r3, #2, #1
    417c:	f363 01c5 	bfi	r1, r3, #3, #3
    4180:	2201      	movs	r2, #1
    4182:	f362 1188 	bfi	r1, r2, #6, #3
    4186:	2208      	movs	r2, #8
    4188:	f362 2152 	bfi	r1, r2, #9, #10
    418c:	f363 41de 	bfi	r1, r3, #19, #12
    4190:	f363 71df 	bfi	r1, r3, #31, #1
    4194:	aa06      	add	r2, sp, #24
    4196:	4804      	ldr	r0, [pc, #16]	; (41a8 <debug_monitor+0x5c>)
    4198:	f007 ffc1 	bl	c11e <z_impl_z_log_msg_static_create>
}
    419c:	b009      	add	sp, #36	; 0x24
    419e:	f85d fb04 	ldr.w	pc, [sp], #4
    41a2:	bf00      	nop
    41a4:	000100c0 	.word	0x000100c0
    41a8:	0000f7b8 	.word	0x0000f7b8

000041ac <reserved_exception>:
{
    41ac:	b5b0      	push	{r4, r5, r7, lr}
    41ae:	b082      	sub	sp, #8
    41b0:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    41b2:	290f      	cmp	r1, #15
    41b4:	dc4a      	bgt.n	424c <reserved_exception+0xa0>
    41b6:	4c30      	ldr	r4, [pc, #192]	; (4278 <reserved_exception+0xcc>)
    41b8:	3910      	subs	r1, #16
    41ba:	2302      	movs	r3, #2
    41bc:	713b      	strb	r3, [r7, #4]
    41be:	b08a      	sub	sp, #40	; 0x28
    41c0:	466b      	mov	r3, sp
    41c2:	f113 0210 	adds.w	r2, r3, #16
    41c6:	d043      	beq.n	4250 <reserved_exception+0xa4>
    41c8:	f04f 0c11 	mov.w	ip, #17
    41cc:	2a00      	cmp	r2, #0
    41ce:	d042      	beq.n	4256 <reserved_exception+0xaa>
    41d0:	4660      	mov	r0, ip
    41d2:	f1bc 0f04 	cmp.w	ip, #4
    41d6:	dd01      	ble.n	41dc <reserved_exception+0x30>
    41d8:	4d28      	ldr	r5, [pc, #160]	; (427c <reserved_exception+0xd0>)
    41da:	615d      	str	r5, [r3, #20]
    41dc:	f04f 0e02 	mov.w	lr, #2
    41e0:	f887 e000 	strb.w	lr, [r7]
    41e4:	2808      	cmp	r0, #8
    41e6:	dd00      	ble.n	41ea <reserved_exception+0x3e>
    41e8:	619c      	str	r4, [r3, #24]
    41ea:	280c      	cmp	r0, #12
    41ec:	dd00      	ble.n	41f0 <reserved_exception+0x44>
    41ee:	61d9      	str	r1, [r3, #28]
    41f0:	f103 0120 	add.w	r1, r3, #32
    41f4:	2000      	movs	r0, #0
    41f6:	b388      	cbz	r0, 425c <reserved_exception+0xb0>
    41f8:	f1bc 0f10 	cmp.w	ip, #16
    41fc:	dd38      	ble.n	4270 <reserved_exception+0xc4>
    41fe:	f04f 0c11 	mov.w	ip, #17
    4202:	b142      	cbz	r2, 4216 <reserved_exception+0x6a>
    4204:	2104      	movs	r1, #4
    4206:	7139      	strb	r1, [r7, #4]
    4208:	2100      	movs	r1, #0
    420a:	7179      	strb	r1, [r7, #5]
    420c:	71b9      	strb	r1, [r7, #6]
    420e:	2101      	movs	r1, #1
    4210:	71f9      	strb	r1, [r7, #7]
    4212:	6878      	ldr	r0, [r7, #4]
    4214:	6118      	str	r0, [r3, #16]
    4216:	2100      	movs	r1, #0
    4218:	f36f 0100 	bfc	r1, #0, #1
    421c:	f36f 0141 	bfc	r1, #1, #1
    4220:	f36f 0182 	bfc	r1, #2, #1
    4224:	f36f 01c5 	bfc	r1, #3, #3
    4228:	2301      	movs	r3, #1
    422a:	f363 1188 	bfi	r1, r3, #6, #3
    422e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    4232:	f36c 2152 	bfi	r1, ip, #9, #10
    4236:	f36f 41de 	bfc	r1, #19, #12
    423a:	f36f 71df 	bfc	r1, #31, #1
    423e:	2300      	movs	r3, #0
    4240:	480f      	ldr	r0, [pc, #60]	; (4280 <reserved_exception+0xd4>)
    4242:	f007 ff6c 	bl	c11e <z_impl_z_log_msg_static_create>
}
    4246:	3708      	adds	r7, #8
    4248:	46bd      	mov	sp, r7
    424a:	bdb0      	pop	{r4, r5, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    424c:	4c0d      	ldr	r4, [pc, #52]	; (4284 <reserved_exception+0xd8>)
    424e:	e7b3      	b.n	41b8 <reserved_exception+0xc>
    4250:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    4254:	e7ba      	b.n	41cc <reserved_exception+0x20>
    4256:	2102      	movs	r1, #2
    4258:	7039      	strb	r1, [r7, #0]
    425a:	e7cd      	b.n	41f8 <reserved_exception+0x4c>
    425c:	f100 0408 	add.w	r4, r0, #8
    4260:	eb04 0e07 	add.w	lr, r4, r7
    4264:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    4268:	f801 eb01 	strb.w	lr, [r1], #1
    426c:	3001      	adds	r0, #1
    426e:	e7c2      	b.n	41f6 <reserved_exception+0x4a>
    4270:	f06f 0c1b 	mvn.w	ip, #27
    4274:	e7c5      	b.n	4202 <reserved_exception+0x56>
    4276:	bf00      	nop
    4278:	000100e4 	.word	0x000100e4
    427c:	00010118 	.word	0x00010118
    4280:	0000f7b8 	.word	0x0000f7b8
    4284:	000100fc 	.word	0x000100fc

00004288 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4288:	b530      	push	{r4, r5, lr}
    428a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    428c:	4b1a      	ldr	r3, [pc, #104]	; (42f8 <z_arm_fault+0x70>)
    428e:	685c      	ldr	r4, [r3, #4]
    4290:	f3c4 0408 	ubfx	r4, r4, #0, #9
    4294:	2300      	movs	r3, #0
    4296:	f383 8811 	msr	BASEPRI, r3
    429a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    429e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    42a2:	f7ff f96d 	bl	3580 <get_esf>
    42a6:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    42a8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    42ac:	4621      	mov	r1, r4
    42ae:	f008 fb25 	bl	c8fc <fault_handle>
	if (recoverable) {
    42b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    42b6:	b10b      	cbz	r3, 42bc <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    42b8:	b00b      	add	sp, #44	; 0x2c
    42ba:	bd30      	pop	{r4, r5, pc}
    42bc:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    42be:	2220      	movs	r2, #32
    42c0:	4629      	mov	r1, r5
    42c2:	a801      	add	r0, sp, #4
    42c4:	f008 fbff 	bl	cac6 <memcpy>
	if (nested_exc) {
    42c8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    42cc:	b14b      	cbz	r3, 42e2 <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    42ce:	9b08      	ldr	r3, [sp, #32]
    42d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    42d4:	b95a      	cbnz	r2, 42ee <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    42d6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    42da:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    42de:	9308      	str	r3, [sp, #32]
    42e0:	e005      	b.n	42ee <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    42e2:	9b08      	ldr	r3, [sp, #32]
    42e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    42e8:	f023 0301 	bic.w	r3, r3, #1
    42ec:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    42ee:	a901      	add	r1, sp, #4
    42f0:	4620      	mov	r0, r4
    42f2:	f008 face 	bl	c892 <z_arm_fatal_error>
    42f6:	e7df      	b.n	42b8 <z_arm_fault+0x30>
    42f8:	e000ed00 	.word	0xe000ed00

000042fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    42fc:	4b04      	ldr	r3, [pc, #16]	; (4310 <z_arm_fault_init+0x14>)
    42fe:	695a      	ldr	r2, [r3, #20]
    4300:	f042 0210 	orr.w	r2, r2, #16
    4304:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4306:	695a      	ldr	r2, [r3, #20]
    4308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    430c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    430e:	4770      	bx	lr
    4310:	e000ed00 	.word	0xe000ed00

00004314 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4314:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4318:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    431c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    431e:	4672      	mov	r2, lr
	bl z_arm_fault
    4320:	f7ff ffb2 	bl	4288 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4324:	bd01      	pop	{r0, pc}
    4326:	bf00      	nop

00004328 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4328:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    432a:	e007      	b.n	433c <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    432c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4330:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4334:	2120      	movs	r1, #32
    4336:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    433a:	3201      	adds	r2, #1
    433c:	2a44      	cmp	r2, #68	; 0x44
    433e:	dc09      	bgt.n	4354 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4340:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4342:	2b00      	cmp	r3, #0
    4344:	daf2      	bge.n	432c <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4346:	f003 030f 	and.w	r3, r3, #15
    434a:	4903      	ldr	r1, [pc, #12]	; (4358 <z_arm_interrupt_init+0x30>)
    434c:	4419      	add	r1, r3
    434e:	2320      	movs	r3, #32
    4350:	760b      	strb	r3, [r1, #24]
    4352:	e7f2      	b.n	433a <z_arm_interrupt_init+0x12>
	}
}
    4354:	4770      	bx	lr
    4356:	bf00      	nop
    4358:	e000ecfc 	.word	0xe000ecfc

0000435c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    435c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    435e:	4915      	ldr	r1, [pc, #84]	; (43b4 <__start+0x58>)
    strb r0, [r1]
    4360:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4362:	2000      	movs	r0, #0
    msr CONTROL, r0
    4364:	f380 8814 	msr	CONTROL, r0
    isb
    4368:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    436c:	2000      	movs	r0, #0
    msr MSPLIM, r0
    436e:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    4372:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4376:	f7fd fb49 	bl	1a0c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    437a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    437c:	490e      	ldr	r1, [pc, #56]	; (43b8 <__start+0x5c>)
    str r0, [r1]
    437e:	6008      	str	r0, [r1, #0]
    dsb
    4380:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4384:	480d      	ldr	r0, [pc, #52]	; (43bc <__start+0x60>)
    msr msp, r0
    4386:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    438a:	f000 f841 	bl	4410 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    438e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4390:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4394:	480a      	ldr	r0, [pc, #40]	; (43c0 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4396:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    439a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    439c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    43a0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    43a4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    43a6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    43a8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    43ac:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    43b0:	f7ff f80a 	bl	33c8 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    43b4:	20001d2c 	.word	0x20001d2c
    ldr r1, =_SCS_MPU_CTRL
    43b8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    43bc:	20003170 	.word	0x20003170
    ldr r0, =z_interrupt_stacks
    43c0:	20002430 	.word	0x20002430

000043c4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    43c4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    43c8:	4905      	ldr	r1, [pc, #20]	; (43e0 <__NVIC_SystemReset+0x1c>)
    43ca:	68ca      	ldr	r2, [r1, #12]
    43cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    43d0:	4b04      	ldr	r3, [pc, #16]	; (43e4 <__NVIC_SystemReset+0x20>)
    43d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    43d4:	60cb      	str	r3, [r1, #12]
    43d6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    43da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    43dc:	e7fd      	b.n	43da <__NVIC_SystemReset+0x16>
    43de:	bf00      	nop
    43e0:	e000ed00 	.word	0xe000ed00
    43e4:	05fa0004 	.word	0x05fa0004

000043e8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    43e8:	4b08      	ldr	r3, [pc, #32]	; (440c <z_arm_clear_arm_mpu_config+0x24>)
    43ea:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    43ee:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    43f2:	2300      	movs	r3, #0
    43f4:	e006      	b.n	4404 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    43f6:	4a05      	ldr	r2, [pc, #20]	; (440c <z_arm_clear_arm_mpu_config+0x24>)
    43f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    43fc:	2100      	movs	r1, #0
    43fe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4402:	3301      	adds	r3, #1
    4404:	4283      	cmp	r3, r0
    4406:	dbf6      	blt.n	43f6 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	e000ed00 	.word	0xe000ed00

00004410 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4410:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4412:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4414:	2400      	movs	r4, #0
    4416:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    441a:	f7ff ffe5 	bl	43e8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    441e:	4623      	mov	r3, r4
    4420:	e008      	b.n	4434 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4422:	f103 0120 	add.w	r1, r3, #32
    4426:	4a0e      	ldr	r2, [pc, #56]	; (4460 <z_arm_init_arch_hw_at_boot+0x50>)
    4428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    442c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4430:	3301      	adds	r3, #1
    4432:	b2db      	uxtb	r3, r3
    4434:	2b0f      	cmp	r3, #15
    4436:	d9f4      	bls.n	4422 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4438:	2300      	movs	r3, #0
    443a:	e008      	b.n	444e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    443c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4440:	4a07      	ldr	r2, [pc, #28]	; (4460 <z_arm_init_arch_hw_at_boot+0x50>)
    4442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4446:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    444a:	3301      	adds	r3, #1
    444c:	b2db      	uxtb	r3, r3
    444e:	2b0f      	cmp	r3, #15
    4450:	d9f4      	bls.n	443c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4452:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4454:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4458:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    445c:	bd10      	pop	{r4, pc}
    445e:	bf00      	nop
    4460:	e000e100 	.word	0xe000e100

00004464 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4464:	b508      	push	{r3, lr}
	if (_current == thread) {
    4466:	4b0a      	ldr	r3, [pc, #40]	; (4490 <z_impl_k_thread_abort+0x2c>)
    4468:	689b      	ldr	r3, [r3, #8]
    446a:	4283      	cmp	r3, r0
    446c:	d002      	beq.n	4474 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    446e:	f005 ff91 	bl	a394 <z_thread_abort>
}
    4472:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4474:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4478:	2b00      	cmp	r3, #0
    447a:	d0f8      	beq.n	446e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    447c:	4b05      	ldr	r3, [pc, #20]	; (4494 <z_impl_k_thread_abort+0x30>)
    447e:	685a      	ldr	r2, [r3, #4]
    4480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4484:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    448c:	625a      	str	r2, [r3, #36]	; 0x24
    448e:	e7ee      	b.n	446e <z_impl_k_thread_abort+0xa>
    4490:	20001b08 	.word	0x20001b08
    4494:	e000ed00 	.word	0xe000ed00

00004498 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4498:	b510      	push	{r4, lr}
    449a:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    449c:	4c0a      	ldr	r4, [pc, #40]	; (44c8 <z_arm_configure_static_mpu_regions+0x30>)
    449e:	4623      	mov	r3, r4
    44a0:	4a0a      	ldr	r2, [pc, #40]	; (44cc <z_arm_configure_static_mpu_regions+0x34>)
    44a2:	2101      	movs	r1, #1
    44a4:	480a      	ldr	r0, [pc, #40]	; (44d0 <z_arm_configure_static_mpu_regions+0x38>)
    44a6:	f008 fab1 	bl	ca0c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    44aa:	2300      	movs	r3, #0
    44ac:	9301      	str	r3, [sp, #4]
    44ae:	9302      	str	r3, [sp, #8]
    44b0:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    44b2:	4b08      	ldr	r3, [pc, #32]	; (44d4 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    44b4:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    44b6:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    44b8:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    44ba:	2101      	movs	r1, #1
    44bc:	a801      	add	r0, sp, #4
    44be:	f008 faa9 	bl	ca14 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    44c2:	b004      	add	sp, #16
    44c4:	bd10      	pop	{r4, pc}
    44c6:	bf00      	nop
    44c8:	20070000 	.word	0x20070000
    44cc:	20000000 	.word	0x20000000
    44d0:	0001012c 	.word	0x0001012c
    44d4:	20000300 	.word	0x20000300

000044d8 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    44d8:	4b02      	ldr	r3, [pc, #8]	; (44e4 <mpu_init+0xc>)
    44da:	4a03      	ldr	r2, [pc, #12]	; (44e8 <mpu_init+0x10>)
    44dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop
    44e4:	e000ed00 	.word	0xe000ed00
    44e8:	0044ffaa 	.word	0x0044ffaa

000044ec <mpu_set_region>:
	MPU->RNR = rnr;
    44ec:	4b03      	ldr	r3, [pc, #12]	; (44fc <mpu_set_region+0x10>)
    44ee:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    44f2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    44f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    44fa:	4770      	bx	lr
    44fc:	e000ed00 	.word	0xe000ed00

00004500 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    4500:	4b0e      	ldr	r3, [pc, #56]	; (453c <mpu_region_get_conf+0x3c>)
    4502:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    4506:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    450a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    450e:	7a0a      	ldrb	r2, [r1, #8]
    4510:	f360 0204 	bfi	r2, r0, #0, #5
    4514:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    4516:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    451a:	f3c2 0242 	ubfx	r2, r2, #1, #3
    451e:	7a08      	ldrb	r0, [r1, #8]
    4520:	f362 1047 	bfi	r0, r2, #5, #3
    4524:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    4526:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    452a:	f022 021f 	bic.w	r2, r2, #31
    452e:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    4530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    4534:	f023 031f 	bic.w	r3, r3, #31
    4538:	60cb      	str	r3, [r1, #12]
}
    453a:	4770      	bx	lr
    453c:	e000ed00 	.word	0xe000ed00

00004540 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	4605      	mov	r5, r0
    4544:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4546:	2400      	movs	r4, #0
    4548:	e000      	b.n	454c <mpu_mark_areas_for_dynamic_regions+0xc>
    454a:	3401      	adds	r4, #1
    454c:	42a6      	cmp	r6, r4
    454e:	dd1e      	ble.n	458e <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    4550:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4554:	009a      	lsls	r2, r3, #2
    4556:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    455a:	6859      	ldr	r1, [r3, #4]
    455c:	2900      	cmp	r1, #0
    455e:	d0f4      	beq.n	454a <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4560:	58a8      	ldr	r0, [r5, r2]
    4562:	f008 fa23 	bl	c9ac <get_region_index>
		dyn_reg_info[i].index =
    4566:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    456a:	4a0b      	ldr	r2, [pc, #44]	; (4598 <mpu_mark_areas_for_dynamic_regions+0x58>)
    456c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4570:	f110 0f16 	cmn.w	r0, #22
    4574:	d00c      	beq.n	4590 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4576:	4b09      	ldr	r3, [pc, #36]	; (459c <mpu_mark_areas_for_dynamic_regions+0x5c>)
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	4298      	cmp	r0, r3
    457c:	da09      	bge.n	4592 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    457e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4582:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    4586:	3104      	adds	r1, #4
    4588:	f7ff ffba 	bl	4500 <mpu_region_get_conf>
    458c:	e7dd      	b.n	454a <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    458e:	2000      	movs	r0, #0
}
    4590:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    4592:	f06f 0015 	mvn.w	r0, #21
    4596:	e7fb      	b.n	4590 <mpu_mark_areas_for_dynamic_regions+0x50>
    4598:	2000142c 	.word	0x2000142c
    459c:	20001d28 	.word	0x20001d28

000045a0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	b083      	sub	sp, #12
    45a4:	af00      	add	r7, sp, #0
    45a6:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    45a8:	2807      	cmp	r0, #7
    45aa:	d805      	bhi.n	45b8 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    45ac:	f008 f9d8 	bl	c960 <region_init>

	return index;
    45b0:	4620      	mov	r0, r4
}
    45b2:	370c      	adds	r7, #12
    45b4:	46bd      	mov	sp, r7
    45b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    45b8:	466d      	mov	r5, sp
    45ba:	b088      	sub	sp, #32
    45bc:	466b      	mov	r3, sp
    45be:	f113 0210 	adds.w	r2, r3, #16
    45c2:	d031      	beq.n	4628 <region_allocate_and_init+0x88>
    45c4:	210c      	movs	r1, #12
    45c6:	b13a      	cbz	r2, 45d8 <region_allocate_and_init+0x38>
    45c8:	4608      	mov	r0, r1
    45ca:	2904      	cmp	r1, #4
    45cc:	dd01      	ble.n	45d2 <region_allocate_and_init+0x32>
    45ce:	4e19      	ldr	r6, [pc, #100]	; (4634 <region_allocate_and_init+0x94>)
    45d0:	615e      	str	r6, [r3, #20]
    45d2:	2808      	cmp	r0, #8
    45d4:	dd00      	ble.n	45d8 <region_allocate_and_init+0x38>
    45d6:	619c      	str	r4, [r3, #24]
    45d8:	290b      	cmp	r1, #11
    45da:	dd28      	ble.n	462e <region_allocate_and_init+0x8e>
    45dc:	240c      	movs	r4, #12
    45de:	b13a      	cbz	r2, 45f0 <region_allocate_and_init+0x50>
    45e0:	2103      	movs	r1, #3
    45e2:	7139      	strb	r1, [r7, #4]
    45e4:	2100      	movs	r1, #0
    45e6:	7179      	strb	r1, [r7, #5]
    45e8:	71b9      	strb	r1, [r7, #6]
    45ea:	71f9      	strb	r1, [r7, #7]
    45ec:	6878      	ldr	r0, [r7, #4]
    45ee:	6118      	str	r0, [r3, #16]
    45f0:	2100      	movs	r1, #0
    45f2:	f36f 0100 	bfc	r1, #0, #1
    45f6:	f36f 0141 	bfc	r1, #1, #1
    45fa:	f36f 0182 	bfc	r1, #2, #1
    45fe:	f36f 01c5 	bfc	r1, #3, #3
    4602:	2301      	movs	r3, #1
    4604:	f363 1188 	bfi	r1, r3, #6, #3
    4608:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    460c:	f364 2152 	bfi	r1, r4, #9, #10
    4610:	f36f 41de 	bfc	r1, #19, #12
    4614:	f36f 71df 	bfc	r1, #31, #1
    4618:	2300      	movs	r3, #0
    461a:	4807      	ldr	r0, [pc, #28]	; (4638 <region_allocate_and_init+0x98>)
    461c:	f007 fd7f 	bl	c11e <z_impl_z_log_msg_static_create>
    4620:	46ad      	mov	sp, r5
		return -EINVAL;
    4622:	f06f 0015 	mvn.w	r0, #21
    4626:	e7c4      	b.n	45b2 <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    462c:	e7cb      	b.n	45c6 <region_allocate_and_init+0x26>
    462e:	f06f 041b 	mvn.w	r4, #27
    4632:	e7d4      	b.n	45de <region_allocate_and_init+0x3e>
    4634:	0001013c 	.word	0x0001013c
    4638:	0000f7b0 	.word	0x0000f7b0

0000463c <mpu_configure_regions_and_partition>:
{
    463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4640:	b089      	sub	sp, #36	; 0x24
    4642:	af00      	add	r7, sp, #0
    4644:	4682      	mov	sl, r0
    4646:	60b9      	str	r1, [r7, #8]
    4648:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
    464a:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
    464c:	f04f 0800 	mov.w	r8, #0
    4650:	e0b5      	b.n	47be <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4652:	466d      	mov	r5, sp
    4654:	b088      	sub	sp, #32
    4656:	466b      	mov	r3, sp
    4658:	f113 0210 	adds.w	r2, r3, #16
    465c:	d032      	beq.n	46c4 <mpu_configure_regions_and_partition+0x88>
    465e:	210c      	movs	r1, #12
    4660:	b142      	cbz	r2, 4674 <mpu_configure_regions_and_partition+0x38>
    4662:	4608      	mov	r0, r1
    4664:	2904      	cmp	r1, #4
    4666:	dd01      	ble.n	466c <mpu_configure_regions_and_partition+0x30>
    4668:	4c94      	ldr	r4, [pc, #592]	; (48bc <mpu_configure_regions_and_partition+0x280>)
    466a:	615c      	str	r4, [r3, #20]
    466c:	2808      	cmp	r0, #8
    466e:	dd01      	ble.n	4674 <mpu_configure_regions_and_partition+0x38>
    4670:	f8c3 8018 	str.w	r8, [r3, #24]
    4674:	290b      	cmp	r1, #11
    4676:	dd28      	ble.n	46ca <mpu_configure_regions_and_partition+0x8e>
    4678:	240c      	movs	r4, #12
    467a:	b13a      	cbz	r2, 468c <mpu_configure_regions_and_partition+0x50>
    467c:	2103      	movs	r1, #3
    467e:	7439      	strb	r1, [r7, #16]
    4680:	2100      	movs	r1, #0
    4682:	7479      	strb	r1, [r7, #17]
    4684:	74b9      	strb	r1, [r7, #18]
    4686:	74f9      	strb	r1, [r7, #19]
    4688:	6938      	ldr	r0, [r7, #16]
    468a:	6118      	str	r0, [r3, #16]
    468c:	2100      	movs	r1, #0
    468e:	f36f 0100 	bfc	r1, #0, #1
    4692:	f36f 0141 	bfc	r1, #1, #1
    4696:	f36f 0182 	bfc	r1, #2, #1
    469a:	f36f 01c5 	bfc	r1, #3, #3
    469e:	2301      	movs	r3, #1
    46a0:	f363 1188 	bfi	r1, r3, #6, #3
    46a4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    46a8:	f364 2152 	bfi	r1, r4, #9, #10
    46ac:	f36f 41de 	bfc	r1, #19, #12
    46b0:	f36f 71df 	bfc	r1, #31, #1
    46b4:	2300      	movs	r3, #0
    46b6:	4882      	ldr	r0, [pc, #520]	; (48c0 <mpu_configure_regions_and_partition+0x284>)
    46b8:	f007 fd31 	bl	c11e <z_impl_z_log_msg_static_create>
    46bc:	46ad      	mov	sp, r5
			return -EINVAL;
    46be:	f06f 0415 	mvn.w	r4, #21
    46c2:	e03c      	b.n	473e <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
    46c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    46c8:	e7ca      	b.n	4660 <mpu_configure_regions_and_partition+0x24>
    46ca:	f06f 041b 	mvn.w	r4, #27
    46ce:	e7d4      	b.n	467a <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
    46d0:	466d      	mov	r5, sp
    46d2:	b088      	sub	sp, #32
    46d4:	466b      	mov	r3, sp
    46d6:	f113 0210 	adds.w	r2, r3, #16
    46da:	d035      	beq.n	4748 <mpu_configure_regions_and_partition+0x10c>
    46dc:	210c      	movs	r1, #12
    46de:	b13a      	cbz	r2, 46f0 <mpu_configure_regions_and_partition+0xb4>
    46e0:	4608      	mov	r0, r1
    46e2:	2904      	cmp	r1, #4
    46e4:	dd01      	ble.n	46ea <mpu_configure_regions_and_partition+0xae>
    46e6:	4c77      	ldr	r4, [pc, #476]	; (48c4 <mpu_configure_regions_and_partition+0x288>)
    46e8:	615c      	str	r4, [r3, #20]
    46ea:	2808      	cmp	r0, #8
    46ec:	dd00      	ble.n	46f0 <mpu_configure_regions_and_partition+0xb4>
    46ee:	619e      	str	r6, [r3, #24]
    46f0:	290b      	cmp	r1, #11
    46f2:	dd2c      	ble.n	474e <mpu_configure_regions_and_partition+0x112>
    46f4:	240c      	movs	r4, #12
    46f6:	b13a      	cbz	r2, 4708 <mpu_configure_regions_and_partition+0xcc>
    46f8:	2103      	movs	r1, #3
    46fa:	7439      	strb	r1, [r7, #16]
    46fc:	2100      	movs	r1, #0
    46fe:	7479      	strb	r1, [r7, #17]
    4700:	74b9      	strb	r1, [r7, #18]
    4702:	74f9      	strb	r1, [r7, #19]
    4704:	6938      	ldr	r0, [r7, #16]
    4706:	6118      	str	r0, [r3, #16]
    4708:	2100      	movs	r1, #0
    470a:	f36f 0100 	bfc	r1, #0, #1
    470e:	f36f 0141 	bfc	r1, #1, #1
    4712:	f36f 0182 	bfc	r1, #2, #1
    4716:	f36f 01c5 	bfc	r1, #3, #3
    471a:	2301      	movs	r3, #1
    471c:	f363 1188 	bfi	r1, r3, #6, #3
    4720:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    4724:	f363 2152 	bfi	r1, r3, #9, #10
    4728:	f36f 41de 	bfc	r1, #19, #12
    472c:	f36f 71df 	bfc	r1, #31, #1
    4730:	2300      	movs	r3, #0
    4732:	4863      	ldr	r0, [pc, #396]	; (48c0 <mpu_configure_regions_and_partition+0x284>)
    4734:	f007 fcf3 	bl	c11e <z_impl_z_log_msg_static_create>
    4738:	46ad      	mov	sp, r5
			return -EINVAL;
    473a:	f06f 0415 	mvn.w	r4, #21
}
    473e:	4620      	mov	r0, r4
    4740:	3724      	adds	r7, #36	; 0x24
    4742:	46bd      	mov	sp, r7
    4744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
    4748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    474c:	e7c7      	b.n	46de <mpu_configure_regions_and_partition+0xa2>
    474e:	f06f 041b 	mvn.w	r4, #27
    4752:	e7d0      	b.n	46f6 <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
    4754:	4581      	cmp	r9, r0
    4756:	d168      	bne.n	482a <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
    4758:	4629      	mov	r1, r5
    475a:	b2f0      	uxtb	r0, r6
    475c:	f008 f937 	bl	c9ce <mpu_configure_region>
    4760:	e02b      	b.n	47ba <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    4762:	4a59      	ldr	r2, [pc, #356]	; (48c8 <mpu_configure_regions_and_partition+0x28c>)
    4764:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    4768:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    476c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    4770:	f021 011f 	bic.w	r1, r1, #31
    4774:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    4776:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    477a:	4629      	mov	r1, r5
    477c:	b2e0      	uxtb	r0, r4
    477e:	f008 f926 	bl	c9ce <mpu_configure_region>
    4782:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4784:	f110 0f16 	cmn.w	r0, #22
    4788:	d0d9      	beq.n	473e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    478a:	3401      	adds	r4, #1
    478c:	e015      	b.n	47ba <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
    478e:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    4790:	494d      	ldr	r1, [pc, #308]	; (48c8 <mpu_configure_regions_and_partition+0x28c>)
    4792:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    4796:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    479a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    479e:	f023 031f 	bic.w	r3, r3, #31
    47a2:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    47a4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    47a8:	4629      	mov	r1, r5
    47aa:	b2e0      	uxtb	r0, r4
    47ac:	f008 f90f 	bl	c9ce <mpu_configure_region>
    47b0:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    47b2:	f110 0f16 	cmn.w	r0, #22
    47b6:	d0c2      	beq.n	473e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    47b8:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    47ba:	f108 0801 	add.w	r8, r8, #1
    47be:	68bb      	ldr	r3, [r7, #8]
    47c0:	4598      	cmp	r8, r3
    47c2:	dabc      	bge.n	473e <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
    47c4:	eb08 0548 	add.w	r5, r8, r8, lsl #1
    47c8:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    47cc:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    47d0:	686e      	ldr	r6, [r5, #4]
    47d2:	2e00      	cmp	r6, #0
    47d4:	d0f1      	beq.n	47ba <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	b12b      	cbz	r3, 47e6 <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
    47da:	4628      	mov	r0, r5
    47dc:	f008 f8d4 	bl	c988 <mpu_partition_is_valid>
		if (do_sanity_check &&
    47e0:	2800      	cmp	r0, #0
    47e2:	f43f af36 	beq.w	4652 <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
    47e6:	4631      	mov	r1, r6
    47e8:	f85a 000b 	ldr.w	r0, [sl, fp]
    47ec:	f008 f8de 	bl	c9ac <get_region_index>
    47f0:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    47f2:	f110 0f16 	cmn.w	r0, #22
    47f6:	f43f af6b 	beq.w	46d0 <mpu_configure_regions_and_partition+0x94>
    47fa:	4284      	cmp	r4, r0
    47fc:	f77f af68 	ble.w	46d0 <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
    4800:	4b31      	ldr	r3, [pc, #196]	; (48c8 <mpu_configure_regions_and_partition+0x28c>)
    4802:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    4806:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    480a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    480e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    4812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4816:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    481a:	f85a 300b 	ldr.w	r3, [sl, fp]
    481e:	6869      	ldr	r1, [r5, #4]
    4820:	4419      	add	r1, r3
    4822:	1e48      	subs	r0, r1, #1
    4824:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
    4826:	4293      	cmp	r3, r2
    4828:	d094      	beq.n	4754 <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
    482a:	4293      	cmp	r3, r2
    482c:	d099      	beq.n	4762 <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
    482e:	68fa      	ldr	r2, [r7, #12]
    4830:	4591      	cmp	r9, r2
    4832:	d0ac      	beq.n	478e <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
    4834:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    4836:	4924      	ldr	r1, [pc, #144]	; (48c8 <mpu_configure_regions_and_partition+0x28c>)
    4838:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    483c:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    4840:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    4844:	f023 031f 	bic.w	r3, r3, #31
    4848:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    484a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    484e:	4629      	mov	r1, r5
    4850:	b2e0      	uxtb	r0, r4
    4852:	f008 f8bc 	bl	c9ce <mpu_configure_region>
    4856:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4858:	f110 0f16 	cmn.w	r0, #22
    485c:	f43f af6f 	beq.w	473e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    4860:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    4862:	4b19      	ldr	r3, [pc, #100]	; (48c8 <mpu_configure_regions_and_partition+0x28c>)
    4864:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    4868:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    486c:	7e3a      	ldrb	r2, [r7, #24]
    486e:	f361 0204 	bfi	r2, r1, #0, #5
    4872:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
    4874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    4878:	f3c3 0342 	ubfx	r3, r3, #1, #3
    487c:	b2d2      	uxtb	r2, r2
    487e:	f363 1247 	bfi	r2, r3, #5, #3
    4882:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
    4884:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
    4888:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    488a:	4413      	add	r3, r2
    488c:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    488e:	f023 031f 	bic.w	r3, r3, #31
    4892:	68fa      	ldr	r2, [r7, #12]
    4894:	eba9 0902 	sub.w	r9, r9, r2
    4898:	444b      	add	r3, r9
    489a:	3b01      	subs	r3, #1
    489c:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    48a0:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
    48a2:	f107 0110 	add.w	r1, r7, #16
    48a6:	b2c0      	uxtb	r0, r0
    48a8:	f7ff fe7a 	bl	45a0 <region_allocate_and_init>
    48ac:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    48ae:	f110 0f16 	cmn.w	r0, #22
    48b2:	f43f af44 	beq.w	473e <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    48b6:	3401      	adds	r4, #1
    48b8:	e77f      	b.n	47ba <mpu_configure_regions_and_partition+0x17e>
    48ba:	bf00      	nop
    48bc:	00010164 	.word	0x00010164
    48c0:	0000f7b0 	.word	0x0000f7b0
    48c4:	00010188 	.word	0x00010188
    48c8:	e000ed00 	.word	0xe000ed00

000048cc <mpu_configure_static_mpu_regions>:
{
    48cc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    48ce:	4c03      	ldr	r4, [pc, #12]	; (48dc <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    48d0:	2301      	movs	r3, #1
    48d2:	7822      	ldrb	r2, [r4, #0]
    48d4:	f7ff feb2 	bl	463c <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
    48d8:	7020      	strb	r0, [r4, #0]
}
    48da:	bd10      	pop	{r4, pc}
    48dc:	20001d28 	.word	0x20001d28

000048e0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    48e0:	4b04      	ldr	r3, [pc, #16]	; (48f4 <arm_core_mpu_enable+0x14>)
    48e2:	2205      	movs	r2, #5
    48e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    48e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ec:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    48f0:	4770      	bx	lr
    48f2:	bf00      	nop
    48f4:	e000ed00 	.word	0xe000ed00

000048f8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    48f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    48fc:	4b02      	ldr	r3, [pc, #8]	; (4908 <arm_core_mpu_disable+0x10>)
    48fe:	2200      	movs	r2, #0
    4900:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4904:	4770      	bx	lr
    4906:	bf00      	nop
    4908:	e000ed00 	.word	0xe000ed00

0000490c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    490c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    490e:	4b0e      	ldr	r3, [pc, #56]	; (4948 <z_arm_mpu_init+0x3c>)
    4910:	681d      	ldr	r5, [r3, #0]
    4912:	2d08      	cmp	r5, #8
    4914:	d815      	bhi.n	4942 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4916:	f7ff ffef 	bl	48f8 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    491a:	f7ff fddd 	bl	44d8 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    491e:	2400      	movs	r4, #0
    4920:	e007      	b.n	4932 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4922:	4b09      	ldr	r3, [pc, #36]	; (4948 <z_arm_mpu_init+0x3c>)
    4924:	6859      	ldr	r1, [r3, #4]
    4926:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    492a:	4620      	mov	r0, r4
    492c:	f008 f818 	bl	c960 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4930:	3401      	adds	r4, #1
    4932:	42a5      	cmp	r5, r4
    4934:	d8f5      	bhi.n	4922 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4936:	4b05      	ldr	r3, [pc, #20]	; (494c <z_arm_mpu_init+0x40>)
    4938:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    493a:	f7ff ffd1 	bl	48e0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    493e:	2000      	movs	r0, #0
}
    4940:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4946:	e7fb      	b.n	4940 <z_arm_mpu_init+0x34>
    4948:	000101ac 	.word	0x000101ac
    494c:	20001d28 	.word	0x20001d28

00004950 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    4950:	4b01      	ldr	r3, [pc, #4]	; (4958 <__stdout_hook_install+0x8>)
    4952:	6018      	str	r0, [r3, #0]
}
    4954:	4770      	bx	lr
    4956:	bf00      	nop
    4958:	20000070 	.word	0x20000070

0000495c <enable_cpunet>:
{
#if !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	/* Retain nRF5340 Network MCU in Secure domain (bus
	 * accesses by Network MCU will have Secure attribute set).
	 */
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    495c:	4b04      	ldr	r3, [pc, #16]	; (4970 <enable_cpunet+0x14>)
    495e:	2210      	movs	r2, #16
    4960:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    4964:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4968:	2200      	movs	r2, #0
    496a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */
}
    496e:	4770      	bx	lr
    4970:	50003000 	.word	0x50003000

00004974 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4974:	4800      	ldr	r0, [pc, #0]	; (4978 <get_hf_flags+0x4>)
    4976:	4770      	bx	lr
    4978:	200014cc 	.word	0x200014cc

0000497c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    497c:	4b03      	ldr	r3, [pc, #12]	; (498c <get_subsys+0x10>)
    497e:	1ac0      	subs	r0, r0, r3
    4980:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    4982:	4b03      	ldr	r3, [pc, #12]	; (4990 <get_subsys+0x14>)
    4984:	fb03 f000 	mul.w	r0, r3, r0
    4988:	4770      	bx	lr
    498a:	bf00      	nop
    498c:	20001454 	.word	0x20001454
    4990:	b6db6db7 	.word	0xb6db6db7

00004994 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4994:	b538      	push	{r3, r4, r5, lr}
    4996:	4605      	mov	r5, r0
    4998:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    499a:	f7ff ffef 	bl	497c <get_subsys>
    499e:	4601      	mov	r1, r0
    49a0:	2240      	movs	r2, #64	; 0x40
    49a2:	4803      	ldr	r0, [pc, #12]	; (49b0 <onoff_stop+0x1c>)
    49a4:	f008 f995 	bl	ccd2 <stop>
    49a8:	4601      	mov	r1, r0
	notify(mgr, res);
    49aa:	4628      	mov	r0, r5
    49ac:	47a0      	blx	r4
}
    49ae:	bd38      	pop	{r3, r4, r5, pc}
    49b0:	0000f408 	.word	0x0000f408

000049b4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    49b4:	b530      	push	{r4, r5, lr}
    49b6:	b083      	sub	sp, #12
    49b8:	4605      	mov	r5, r0
    49ba:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    49bc:	f7ff ffde 	bl	497c <get_subsys>
    49c0:	4601      	mov	r1, r0
    49c2:	2340      	movs	r3, #64	; 0x40
    49c4:	9300      	str	r3, [sp, #0]
    49c6:	4623      	mov	r3, r4
    49c8:	4a05      	ldr	r2, [pc, #20]	; (49e0 <onoff_start+0x2c>)
    49ca:	4806      	ldr	r0, [pc, #24]	; (49e4 <onoff_start+0x30>)
    49cc:	f008 f99b 	bl	cd06 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    49d0:	1e01      	subs	r1, r0, #0
    49d2:	db01      	blt.n	49d8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    49d4:	b003      	add	sp, #12
    49d6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    49d8:	4628      	mov	r0, r5
    49da:	47a0      	blx	r4
}
    49dc:	e7fa      	b.n	49d4 <onoff_start+0x20>
    49de:	bf00      	nop
    49e0:	0000cd4f 	.word	0x0000cd4f
    49e4:	0000f408 	.word	0x0000f408

000049e8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    49e8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    49ea:	2805      	cmp	r0, #5
    49ec:	d815      	bhi.n	4a1a <clock_event_handler+0x32>
    49ee:	e8df f000 	tbb	[pc, r0]
    49f2:	1a03      	.short	0x1a03
    49f4:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    49f8:	2100      	movs	r1, #0
    49fa:	480d      	ldr	r0, [pc, #52]	; (4a30 <clock_event_handler+0x48>)
    49fc:	f008 f8f2 	bl	cbe4 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4a00:	6883      	ldr	r3, [r0, #8]
    4a02:	f013 0f07 	tst.w	r3, #7
    4a06:	d108      	bne.n	4a1a <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4a08:	2100      	movs	r1, #0
    4a0a:	4809      	ldr	r0, [pc, #36]	; (4a30 <clock_event_handler+0x48>)
    4a0c:	f008 f94f 	bl	ccae <clkstarted_handle>
    4a10:	e003      	b.n	4a1a <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4a12:	2102      	movs	r1, #2
    4a14:	4806      	ldr	r0, [pc, #24]	; (4a30 <clock_event_handler+0x48>)
    4a16:	f008 f94a 	bl	ccae <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4a1a:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4a1c:	2103      	movs	r1, #3
    4a1e:	4804      	ldr	r0, [pc, #16]	; (4a30 <clock_event_handler+0x48>)
    4a20:	f008 f945 	bl	ccae <clkstarted_handle>
		break;
    4a24:	e7f9      	b.n	4a1a <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4a26:	2101      	movs	r1, #1
    4a28:	4801      	ldr	r0, [pc, #4]	; (4a30 <clock_event_handler+0x48>)
    4a2a:	f008 f940 	bl	ccae <clkstarted_handle>
}
    4a2e:	e7f4      	b.n	4a1a <clock_event_handler+0x32>
    4a30:	0000f408 	.word	0x0000f408

00004a34 <generic_hfclk_start>:
{
    4a34:	b510      	push	{r4, lr}
    4a36:	b082      	sub	sp, #8
	__asm__ volatile(
    4a38:	f04f 0320 	mov.w	r3, #32
    4a3c:	f3ef 8411 	mrs	r4, BASEPRI
    4a40:	f383 8812 	msr	BASEPRI_MAX, r3
    4a44:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4a48:	4a14      	ldr	r2, [pc, #80]	; (4a9c <generic_hfclk_start+0x68>)
    4a4a:	6813      	ldr	r3, [r2, #0]
    4a4c:	f043 0102 	orr.w	r1, r3, #2
    4a50:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4a52:	f013 0f01 	tst.w	r3, #1
    4a56:	d109      	bne.n	4a6c <generic_hfclk_start+0x38>
	bool already_started = false;
    4a58:	2300      	movs	r3, #0
	__asm__ volatile(
    4a5a:	f384 8811 	msr	BASEPRI, r4
    4a5e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4a62:	b9b3      	cbnz	r3, 4a92 <generic_hfclk_start+0x5e>
	hfclk_start();
    4a64:	f008 f97b 	bl	cd5e <hfclk_start>
}
    4a68:	b002      	add	sp, #8
    4a6a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4a6c:	f10d 0207 	add.w	r2, sp, #7
    4a70:	2101      	movs	r1, #1
    4a72:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4a76:	f008 f87b 	bl	cb70 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4a7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a7e:	2b01      	cmp	r3, #1
    4a80:	d001      	beq.n	4a86 <generic_hfclk_start+0x52>
	bool already_started = false;
    4a82:	2300      	movs	r3, #0
    4a84:	e7e9      	b.n	4a5a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    4a86:	f7ff ff75 	bl	4974 <get_hf_flags>
    4a8a:	f008 f8fd 	bl	cc88 <set_on_state>
			already_started = true;
    4a8e:	2301      	movs	r3, #1
    4a90:	e7e3      	b.n	4a5a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    4a92:	2100      	movs	r1, #0
    4a94:	4802      	ldr	r0, [pc, #8]	; (4aa0 <generic_hfclk_start+0x6c>)
    4a96:	f008 f90a 	bl	ccae <clkstarted_handle>
		return;
    4a9a:	e7e5      	b.n	4a68 <generic_hfclk_start+0x34>
    4a9c:	200014f4 	.word	0x200014f4
    4aa0:	0000f408 	.word	0x0000f408

00004aa4 <generic_hfclk_stop>:
{
    4aa4:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4aa6:	4b08      	ldr	r3, [pc, #32]	; (4ac8 <generic_hfclk_stop+0x24>)
    4aa8:	e8d3 2fef 	ldaex	r2, [r3]
    4aac:	f022 0102 	bic.w	r1, r2, #2
    4ab0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d1f7      	bne.n	4aa8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4ab8:	f012 0f01 	tst.w	r2, #1
    4abc:	d000      	beq.n	4ac0 <generic_hfclk_stop+0x1c>
}
    4abe:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4ac0:	f008 f961 	bl	cd86 <hfclk_stop>
    4ac4:	e7fb      	b.n	4abe <generic_hfclk_stop+0x1a>
    4ac6:	bf00      	nop
    4ac8:	200014f4 	.word	0x200014f4

00004acc <lfclk_spinwait>:
{
    4acc:	b570      	push	{r4, r5, r6, lr}
    4ace:	b082      	sub	sp, #8
    4ad0:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4ad2:	2801      	cmp	r0, #1
    4ad4:	d107      	bne.n	4ae6 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4ad6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ada:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4ade:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4ae2:	2b02      	cmp	r3, #2
    4ae4:	d037      	beq.n	4b56 <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ae6:	f00a f877 	bl	ebd8 <k_is_in_isr>
    4aea:	4604      	mov	r4, r0
    4aec:	b910      	cbnz	r0, 4af4 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    4aee:	4b2b      	ldr	r3, [pc, #172]	; (4b9c <lfclk_spinwait+0xd0>)
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	b97b      	cbnz	r3, 4b14 <lfclk_spinwait+0x48>
	__asm__ volatile(
    4af4:	f04f 0320 	mov.w	r3, #32
    4af8:	f3ef 8611 	mrs	r6, BASEPRI
    4afc:	f383 8812 	msr	BASEPRI_MAX, r3
    4b00:	f3bf 8f6f 	isb	sy
    4b04:	2401      	movs	r4, #1
	if (!isr_mode) {
    4b06:	b994      	cbnz	r4, 4b2e <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    4b08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b0c:	2202      	movs	r2, #2
    4b0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4b12:	e00c      	b.n	4b2e <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    4b14:	2600      	movs	r6, #0
    4b16:	e7f6      	b.n	4b06 <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b18:	b1fc      	cbz	r4, 4b5a <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4b1a:	4630      	mov	r0, r6
    4b1c:	f7fe fade 	bl	30dc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4b20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b24:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4b28:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4b2a:	2b01      	cmp	r3, #1
    4b2c:	d019      	beq.n	4b62 <lfclk_spinwait+0x96>
    4b2e:	f10d 0207 	add.w	r2, sp, #7
    4b32:	2100      	movs	r1, #0
    4b34:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4b38:	f008 f81a 	bl	cb70 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4b3c:	2800      	cmp	r0, #0
    4b3e:	d0eb      	beq.n	4b18 <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    4b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4b44:	2b02      	cmp	r3, #2
    4b46:	d001      	beq.n	4b4c <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4b48:	2d01      	cmp	r5, #1
    4b4a:	d1e5      	bne.n	4b18 <lfclk_spinwait+0x4c>
	if (isr_mode) {
    4b4c:	b304      	cbz	r4, 4b90 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    4b4e:	f386 8811 	msr	BASEPRI, r6
    4b52:	f3bf 8f6f 	isb	sy
}
    4b56:	b002      	add	sp, #8
    4b58:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    4b5a:	2001      	movs	r0, #1
    4b5c:	f008 f927 	bl	cdae <k_msleep>
    4b60:	e7de      	b.n	4b20 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4b62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d0df      	beq.n	4b2e <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b6e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b72:	2200      	movs	r2, #0
    4b74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4b78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b7c:	2202      	movs	r2, #2
    4b7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b82:	4a07      	ldr	r2, [pc, #28]	; (4ba0 <lfclk_spinwait+0xd4>)
    4b84:	2120      	movs	r1, #32
    4b86:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b8a:	2201      	movs	r2, #1
    4b8c:	609a      	str	r2, [r3, #8]
}
    4b8e:	e7ce      	b.n	4b2e <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    4b90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b94:	2202      	movs	r2, #2
    4b96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4b9a:	e7dc      	b.n	4b56 <lfclk_spinwait+0x8a>
    4b9c:	20001d2c 	.word	0x20001d2c
    4ba0:	e000e100 	.word	0xe000e100

00004ba4 <api_blocking_start>:
{
    4ba4:	b500      	push	{lr}
    4ba6:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ba8:	f8cd d000 	str.w	sp, [sp]
    4bac:	f8cd d004 	str.w	sp, [sp, #4]
    4bb0:	2300      	movs	r3, #0
    4bb2:	9302      	str	r3, [sp, #8]
    4bb4:	2301      	movs	r3, #1
    4bb6:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4bb8:	466b      	mov	r3, sp
    4bba:	4a07      	ldr	r2, [pc, #28]	; (4bd8 <api_blocking_start+0x34>)
    4bbc:	f008 f8bf 	bl	cd3e <api_start>
	if (err < 0) {
    4bc0:	2800      	cmp	r0, #0
    4bc2:	db05      	blt.n	4bd0 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    4bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4bc8:	2300      	movs	r3, #0
    4bca:	4668      	mov	r0, sp
    4bcc:	f004 feea 	bl	99a4 <z_impl_k_sem_take>
}
    4bd0:	b005      	add	sp, #20
    4bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    4bd6:	bf00      	nop
    4bd8:	0000cddb 	.word	0x0000cddb

00004bdc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4bdc:	b570      	push	{r4, r5, r6, lr}
    4bde:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4be0:	2200      	movs	r2, #0
    4be2:	2101      	movs	r1, #1
    4be4:	2005      	movs	r0, #5
    4be6:	f007 fe70 	bl	c8ca <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4bea:	4811      	ldr	r0, [pc, #68]	; (4c30 <clk_init+0x54>)
    4bec:	f002 fa6a 	bl	70c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4bf0:	4b10      	ldr	r3, [pc, #64]	; (4c34 <clk_init+0x58>)
    4bf2:	4298      	cmp	r0, r3
    4bf4:	d119      	bne.n	4c2a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4bf6:	f008 fffa 	bl	dbee <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4bfa:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4bfc:	2c03      	cmp	r4, #3
    4bfe:	d812      	bhi.n	4c26 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4c00:	4621      	mov	r1, r4
    4c02:	4630      	mov	r0, r6
    4c04:	f007 ffee 	bl	cbe4 <get_sub_data>
    4c08:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4c0a:	4621      	mov	r1, r4
    4c0c:	4630      	mov	r0, r6
    4c0e:	f007 fff6 	bl	cbfe <get_onoff_manager>
    4c12:	4909      	ldr	r1, [pc, #36]	; (4c38 <clk_init+0x5c>)
    4c14:	f006 f9a4 	bl	af60 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4c18:	2800      	cmp	r0, #0
    4c1a:	db05      	blt.n	4c28 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4c1c:	2301      	movs	r3, #1
    4c1e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4c20:	441c      	add	r4, r3
    4c22:	b2e4      	uxtb	r4, r4
    4c24:	e7ea      	b.n	4bfc <clk_init+0x20>
	}

	return 0;
    4c26:	2000      	movs	r0, #0
}
    4c28:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4c2a:	f06f 0004 	mvn.w	r0, #4
    4c2e:	e7fb      	b.n	4c28 <clk_init+0x4c>
    4c30:	000049e9 	.word	0x000049e9
    4c34:	0bad0000 	.word	0x0bad0000
    4c38:	000101f8 	.word	0x000101f8

00004c3c <z_nrf_clock_control_lf_on>:
{
    4c3c:	b510      	push	{r4, lr}
    4c3e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4c40:	4b0e      	ldr	r3, [pc, #56]	; (4c7c <z_nrf_clock_control_lf_on+0x40>)
    4c42:	2101      	movs	r1, #1
    4c44:	e8d3 2fef 	ldaex	r2, [r3]
    4c48:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4c4c:	2800      	cmp	r0, #0
    4c4e:	d1f9      	bne.n	4c44 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4c50:	b11a      	cbz	r2, 4c5a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4c52:	1e63      	subs	r3, r4, #1
    4c54:	2b01      	cmp	r3, #1
    4c56:	d90d      	bls.n	4c74 <z_nrf_clock_control_lf_on+0x38>
}
    4c58:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4c5a:	4809      	ldr	r0, [pc, #36]	; (4c80 <z_nrf_clock_control_lf_on+0x44>)
    4c5c:	f007 ffcf 	bl	cbfe <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4c60:	4908      	ldr	r1, [pc, #32]	; (4c84 <z_nrf_clock_control_lf_on+0x48>)
    4c62:	2300      	movs	r3, #0
    4c64:	604b      	str	r3, [r1, #4]
    4c66:	608b      	str	r3, [r1, #8]
    4c68:	60cb      	str	r3, [r1, #12]
    4c6a:	2301      	movs	r3, #1
    4c6c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4c6e:	f006 f994 	bl	af9a <onoff_request>
    4c72:	e7ee      	b.n	4c52 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4c74:	4620      	mov	r0, r4
    4c76:	f7ff ff29 	bl	4acc <lfclk_spinwait>
		break;
    4c7a:	e7ed      	b.n	4c58 <z_nrf_clock_control_lf_on+0x1c>
    4c7c:	20001450 	.word	0x20001450
    4c80:	0000f408 	.word	0x0000f408
    4c84:	20001440 	.word	0x20001440

00004c88 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    4c88:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4c8a:	4c04      	ldr	r4, [pc, #16]	; (4c9c <rtt_console_init+0x14>)
    4c8c:	4620      	mov	r0, r4
    4c8e:	f7fc f93b 	bl	f08 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    4c92:	4620      	mov	r0, r4
    4c94:	f7ff fe5c 	bl	4950 <__stdout_hook_install>

	return 0;
}
    4c98:	2000      	movs	r0, #0
    4c9a:	bd10      	pop	{r4, pc}
    4c9c:	00004ca1 	.word	0x00004ca1

00004ca0 <rtt_console_out>:
{
    4ca0:	b570      	push	{r4, r5, r6, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	4606      	mov	r6, r0
	char c = (char)character;
    4ca6:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    4caa:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
    4cac:	f004 f9bc 	bl	9028 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    4cb0:	2201      	movs	r2, #1
    4cb2:	f10d 0107 	add.w	r1, sp, #7
    4cb6:	2000      	movs	r0, #0
    4cb8:	f004 f970 	bl	8f9c <SEGGER_RTT_WriteNoLock>
    4cbc:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
    4cbe:	f004 f9bf 	bl	9040 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    4cc2:	b93c      	cbnz	r4, 4cd4 <rtt_console_out+0x34>
		} else if (host_present) {
    4cc4:	4b08      	ldr	r3, [pc, #32]	; (4ce8 <rtt_console_out+0x48>)
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	b15b      	cbz	r3, 4ce2 <rtt_console_out+0x42>
			if (max_cnt) {
    4cca:	b13d      	cbz	r5, 4cdc <rtt_console_out+0x3c>
				wait();
    4ccc:	f008 f8a0 	bl	ce10 <wait>
				max_cnt--;
    4cd0:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
    4cd2:	e7eb      	b.n	4cac <rtt_console_out+0xc>
			host_present = true;
    4cd4:	4b04      	ldr	r3, [pc, #16]	; (4ce8 <rtt_console_out+0x48>)
    4cd6:	2201      	movs	r2, #1
    4cd8:	701a      	strb	r2, [r3, #0]
    4cda:	e002      	b.n	4ce2 <rtt_console_out+0x42>
				host_present = false;
    4cdc:	4b02      	ldr	r3, [pc, #8]	; (4ce8 <rtt_console_out+0x48>)
    4cde:	2200      	movs	r2, #0
    4ce0:	701a      	strb	r2, [r3, #0]
}
    4ce2:	4630      	mov	r0, r6
    4ce4:	b002      	add	sp, #8
    4ce6:	bd70      	pop	{r4, r5, r6, pc}
    4ce8:	20001d29 	.word	0x20001d29

00004cec <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4cec:	b128      	cbz	r0, 4cfa <get_dev+0xe>
    4cee:	2801      	cmp	r0, #1
    4cf0:	d101      	bne.n	4cf6 <get_dev+0xa>
    4cf2:	4803      	ldr	r0, [pc, #12]	; (4d00 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4cf4:	4770      	bx	lr
	const struct device *dev = NULL;
    4cf6:	2000      	movs	r0, #0
    4cf8:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4cfa:	4802      	ldr	r0, [pc, #8]	; (4d04 <get_dev+0x18>)
    4cfc:	4770      	bx	lr
    4cfe:	bf00      	nop
    4d00:	0000f420 	.word	0x0000f420
    4d04:	0000f438 	.word	0x0000f438

00004d08 <gpio_nrfx_pin_interrupt_configure>:
{
    4d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0a:	b085      	sub	sp, #20
    4d0c:	460e      	mov	r6, r1
    4d0e:	4619      	mov	r1, r3
	return port->config;
    4d10:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4d12:	7b1b      	ldrb	r3, [r3, #12]
    4d14:	f006 051f 	and.w	r5, r6, #31
    4d18:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4d1c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    4d20:	d022      	beq.n	4d68 <gpio_nrfx_pin_interrupt_configure+0x60>
    4d22:	4607      	mov	r7, r0
    4d24:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4d26:	2300      	movs	r3, #0
    4d28:	9301      	str	r3, [sp, #4]
    4d2a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    4d2c:	4610      	mov	r0, r2
    4d2e:	f008 f948 	bl	cfc2 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4d32:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    4d36:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4d38:	6899      	ldr	r1, [r3, #8]
    4d3a:	40f1      	lsrs	r1, r6
    4d3c:	f011 0f01 	tst.w	r1, #1
    4d40:	d102      	bne.n	4d48 <gpio_nrfx_pin_interrupt_configure+0x40>
    4d42:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    4d46:	d014      	beq.n	4d72 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4d48:	2300      	movs	r3, #0
    4d4a:	aa01      	add	r2, sp, #4
    4d4c:	4619      	mov	r1, r3
    4d4e:	4628      	mov	r0, r5
    4d50:	f002 fcb4 	bl	76bc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4d54:	4b1a      	ldr	r3, [pc, #104]	; (4dc0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    4d56:	4298      	cmp	r0, r3
    4d58:	d12f      	bne.n	4dba <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4d5a:	2101      	movs	r1, #1
    4d5c:	4628      	mov	r0, r5
    4d5e:	f002 fe11 	bl	7984 <nrfx_gpiote_trigger_enable>
	return 0;
    4d62:	2000      	movs	r0, #0
}
    4d64:	b005      	add	sp, #20
    4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4d68:	4628      	mov	r0, r5
    4d6a:	f002 fe3d 	bl	79e8 <nrfx_gpiote_trigger_disable>
		return 0;
    4d6e:	2000      	movs	r0, #0
    4d70:	e7f8      	b.n	4d64 <gpio_nrfx_pin_interrupt_configure+0x5c>
    *p_pin = pin_number & 0x1F;
    4d72:	f005 031f 	and.w	r3, r5, #31
    return pin_number >> 5;
    4d76:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d78:	2a01      	cmp	r2, #1
    4d7a:	d012      	beq.n	4da2 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    4d7c:	4a11      	ldr	r2, [pc, #68]	; (4dc4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4d7e:	3380      	adds	r3, #128	; 0x80
    4d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4d84:	f013 0f01 	tst.w	r3, #1
    4d88:	d1de      	bne.n	4d48 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4d8a:	f10d 010f 	add.w	r1, sp, #15
    4d8e:	4628      	mov	r0, r5
    4d90:	f002 fd9c 	bl	78cc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4d94:	4b0c      	ldr	r3, [pc, #48]	; (4dc8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    4d96:	4298      	cmp	r0, r3
    4d98:	d005      	beq.n	4da6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4d9a:	f10d 030f 	add.w	r3, sp, #15
    4d9e:	9302      	str	r3, [sp, #8]
    4da0:	e7d2      	b.n	4d48 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    4da2:	4a0a      	ldr	r2, [pc, #40]	; (4dcc <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4da4:	e7eb      	b.n	4d7e <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    4da6:	f10d 000f 	add.w	r0, sp, #15
    4daa:	f002 fde3 	bl	7974 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4dae:	4b04      	ldr	r3, [pc, #16]	; (4dc0 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    4db0:	4298      	cmp	r0, r3
    4db2:	d0f2      	beq.n	4d9a <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    4db4:	f06f 000b 	mvn.w	r0, #11
    4db8:	e7d4      	b.n	4d64 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    4dba:	f06f 0015 	mvn.w	r0, #21
    4dbe:	e7d1      	b.n	4d64 <gpio_nrfx_pin_interrupt_configure+0x5c>
    4dc0:	0bad0000 	.word	0x0bad0000
    4dc4:	50842500 	.word	0x50842500
    4dc8:	0bad0004 	.word	0x0bad0004
    4dcc:	50842800 	.word	0x50842800

00004dd0 <gpio_nrfx_pin_configure>:
{
    4dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dd4:	b086      	sub	sp, #24
    4dd6:	460e      	mov	r6, r1
    4dd8:	4614      	mov	r4, r2
	return port->config;
    4dda:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4dde:	f898 300c 	ldrb.w	r3, [r8, #12]
    4de2:	f001 051f 	and.w	r5, r1, #31
    4de6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4dea:	f10d 0117 	add.w	r1, sp, #23
    4dee:	4628      	mov	r0, r5
    4df0:	f002 fd6c 	bl	78cc <nrfx_gpiote_channel_get>
    4df4:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4df6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    4dfa:	d039      	beq.n	4e70 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4dfc:	2100      	movs	r1, #0
    4dfe:	9103      	str	r1, [sp, #12]
    4e00:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e02:	460b      	mov	r3, r1
    4e04:	aa03      	add	r2, sp, #12
    4e06:	4628      	mov	r0, r5
    4e08:	f002 fc58 	bl	76bc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4e0c:	4b32      	ldr	r3, [pc, #200]	; (4ed8 <gpio_nrfx_pin_configure+0x108>)
    4e0e:	4298      	cmp	r0, r3
    4e10:	d15f      	bne.n	4ed2 <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    4e12:	429f      	cmp	r7, r3
    4e14:	d03c      	beq.n	4e90 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    4e16:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    4e1a:	d047      	beq.n	4eac <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    4e1c:	f10d 0103 	add.w	r1, sp, #3
    4e20:	4620      	mov	r0, r4
    4e22:	f008 f85b 	bl	cedc <get_drive>
		if (rv != 0) {
    4e26:	4607      	mov	r7, r0
    4e28:	bb48      	cbnz	r0, 4e7e <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    4e2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4e2e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4e32:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    4e36:	bf0c      	ite	eq
    4e38:	2301      	moveq	r3, #1
    4e3a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    4e3c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    4e40:	4620      	mov	r0, r4
    4e42:	f008 f88e 	bl	cf62 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    4e46:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4e4a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    4e4e:	d024      	beq.n	4e9a <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4e50:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4e54:	2301      	movs	r3, #1
    4e56:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4e58:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4e5a:	2200      	movs	r2, #0
    4e5c:	a901      	add	r1, sp, #4
    4e5e:	4628      	mov	r0, r5
    4e60:	f002 fcc2 	bl	77e8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4e64:	4b1c      	ldr	r3, [pc, #112]	; (4ed8 <gpio_nrfx_pin_configure+0x108>)
    4e66:	4298      	cmp	r0, r3
    4e68:	d009      	beq.n	4e7e <gpio_nrfx_pin_configure+0xae>
    4e6a:	f06f 0715 	mvn.w	r7, #21
    4e6e:	e006      	b.n	4e7e <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4e70:	4628      	mov	r0, r5
    4e72:	f002 fddb 	bl	7a2c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4e76:	4b18      	ldr	r3, [pc, #96]	; (4ed8 <gpio_nrfx_pin_configure+0x108>)
    4e78:	429f      	cmp	r7, r3
    4e7a:	d004      	beq.n	4e86 <gpio_nrfx_pin_configure+0xb6>
		return 0;
    4e7c:	2700      	movs	r7, #0
}
    4e7e:	4638      	mov	r0, r7
    4e80:	b006      	add	sp, #24
    4e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    4e86:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4e8a:	f002 fd6b 	bl	7964 <nrfx_gpiote_channel_free>
    4e8e:	e7f5      	b.n	4e7c <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    4e90:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4e94:	f002 fd66 	bl	7964 <nrfx_gpiote_channel_free>
    4e98:	e7bd      	b.n	4e16 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4e9a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    4e9e:	d0dc      	beq.n	4e5a <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4ea0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4ea4:	2301      	movs	r3, #1
    4ea6:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    4ea8:	60d3      	str	r3, [r2, #12]
}
    4eaa:	e7d6      	b.n	4e5a <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    4eac:	4620      	mov	r0, r4
    4eae:	f008 f858 	bl	cf62 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4eb2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4eb6:	2300      	movs	r3, #0
    4eb8:	461a      	mov	r2, r3
    4eba:	a902      	add	r1, sp, #8
    4ebc:	4628      	mov	r0, r5
    4ebe:	f002 fbfd 	bl	76bc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4ec2:	4b05      	ldr	r3, [pc, #20]	; (4ed8 <gpio_nrfx_pin_configure+0x108>)
    4ec4:	4298      	cmp	r0, r3
    4ec6:	d101      	bne.n	4ecc <gpio_nrfx_pin_configure+0xfc>
    4ec8:	2700      	movs	r7, #0
    4eca:	e7d8      	b.n	4e7e <gpio_nrfx_pin_configure+0xae>
    4ecc:	f06f 0715 	mvn.w	r7, #21
    4ed0:	e7d5      	b.n	4e7e <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    4ed2:	f06f 0715 	mvn.w	r7, #21
    4ed6:	e7d2      	b.n	4e7e <gpio_nrfx_pin_configure+0xae>
    4ed8:	0bad0000 	.word	0x0bad0000

00004edc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4edc:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4ede:	f002 fd37 	bl	7950 <nrfx_gpiote_is_init>
    4ee2:	b108      	cbz	r0, 4ee8 <gpio_nrfx_init+0xc>
		return 0;
    4ee4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4ee6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4ee8:	f002 fd08 	bl	78fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4eec:	4b08      	ldr	r3, [pc, #32]	; (4f10 <gpio_nrfx_init+0x34>)
    4eee:	4298      	cmp	r0, r3
    4ef0:	d10a      	bne.n	4f08 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4ef2:	2100      	movs	r1, #0
    4ef4:	4807      	ldr	r0, [pc, #28]	; (4f14 <gpio_nrfx_init+0x38>)
    4ef6:	f002 fce3 	bl	78c0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4efa:	2200      	movs	r2, #0
    4efc:	2105      	movs	r1, #5
    4efe:	200d      	movs	r0, #13
    4f00:	f007 fce3 	bl	c8ca <z_arm_irq_priority_set>
	return 0;
    4f04:	2000      	movs	r0, #0
    4f06:	e7ee      	b.n	4ee6 <gpio_nrfx_init+0xa>
		return -EIO;
    4f08:	f06f 0004 	mvn.w	r0, #4
    4f0c:	e7eb      	b.n	4ee6 <gpio_nrfx_init+0xa>
    4f0e:	bf00      	nop
    4f10:	0bad0000 	.word	0x0bad0000
    4f14:	0000cffb 	.word	0x0000cffb

00004f18 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    4f18:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4f1a:	6844      	ldr	r4, [r0, #4]
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    4f1c:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    4f1e:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    4f22:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
#endif

	/* disable peripheral if active (required to release SCL/SDA lines) */
	(void)pm_device_state_get(dev, &state);
	if (state == PM_DEVICE_STATE_ACTIVE) {
		nrfx_twim_disable(&dev_config->twim);
    4f26:	4620      	mov	r0, r4
    4f28:	f003 fb7e 	bl	8628 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    4f2c:	4631      	mov	r1, r6
    4f2e:	4628      	mov	r0, r5
    4f30:	f003 fbb2 	bl	8698 <nrfx_twi_twim_bus_recover>
    4f34:	4605      	mov	r5, r0

	err = nrfx_twim_bus_recover(scl_pin, sda_pin);

	/* restore peripheral if it was active before */
	if (state == PM_DEVICE_STATE_ACTIVE) {
		(void)pinctrl_apply_state(dev_config->pcfg,
    4f36:	2100      	movs	r1, #0
    4f38:	6a20      	ldr	r0, [r4, #32]
    4f3a:	f008 f86d 	bl	d018 <pinctrl_apply_state>
					  PINCTRL_STATE_DEFAULT);
		nrfx_twim_enable(&dev_config->twim);
    4f3e:	4620      	mov	r0, r4
    4f40:	f003 fb62 	bl	8608 <nrfx_twim_enable>
	}

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4f44:	4b03      	ldr	r3, [pc, #12]	; (4f54 <i2c_nrfx_twim_recover_bus+0x3c>)
    4f46:	429d      	cmp	r5, r3
    4f48:	d101      	bne.n	4f4e <i2c_nrfx_twim_recover_bus+0x36>
    4f4a:	2000      	movs	r0, #0
}
    4f4c:	bd70      	pop	{r4, r5, r6, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4f4e:	f06f 000f 	mvn.w	r0, #15
    4f52:	e7fb      	b.n	4f4c <i2c_nrfx_twim_recover_bus+0x34>
    4f54:	0bad0000 	.word	0x0bad0000

00004f58 <i2c_nrfx_twim_configure>:
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4f58:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    4f5a:	f011 0f01 	tst.w	r1, #1
    4f5e:	d148      	bne.n	4ff2 <i2c_nrfx_twim_configure+0x9a>
	switch (I2C_SPEED_GET(i2c_config)) {
    4f60:	f3c1 0142 	ubfx	r1, r1, #1, #3
    4f64:	2902      	cmp	r1, #2
    4f66:	d036      	beq.n	4fd6 <i2c_nrfx_twim_configure+0x7e>
    4f68:	2903      	cmp	r1, #3
    4f6a:	d03b      	beq.n	4fe4 <i2c_nrfx_twim_configure+0x8c>
    4f6c:	2901      	cmp	r1, #1
    4f6e:	d02b      	beq.n	4fc8 <i2c_nrfx_twim_configure+0x70>
{
    4f70:	b500      	push	{lr}
    4f72:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("unsupported speed");
    4f74:	4b20      	ldr	r3, [pc, #128]	; (4ff8 <i2c_nrfx_twim_configure+0xa0>)
    4f76:	9307      	str	r3, [sp, #28]
    4f78:	2302      	movs	r3, #2
    4f7a:	f88d 3004 	strb.w	r3, [sp, #4]
    4f7e:	2300      	movs	r3, #0
    4f80:	f88d 3005 	strb.w	r3, [sp, #5]
    4f84:	f88d 3006 	strb.w	r3, [sp, #6]
    4f88:	f88d 3007 	strb.w	r3, [sp, #7]
    4f8c:	9a01      	ldr	r2, [sp, #4]
    4f8e:	9206      	str	r2, [sp, #24]
    4f90:	4619      	mov	r1, r3
    4f92:	f363 0100 	bfi	r1, r3, #0, #1
    4f96:	f363 0141 	bfi	r1, r3, #1, #1
    4f9a:	f363 0182 	bfi	r1, r3, #2, #1
    4f9e:	f363 01c5 	bfi	r1, r3, #3, #3
    4fa2:	2201      	movs	r2, #1
    4fa4:	f362 1188 	bfi	r1, r2, #6, #3
    4fa8:	2208      	movs	r2, #8
    4faa:	f362 2152 	bfi	r1, r2, #9, #10
    4fae:	f363 41de 	bfi	r1, r3, #19, #12
    4fb2:	f363 71df 	bfi	r1, r3, #31, #1
    4fb6:	aa06      	add	r2, sp, #24
    4fb8:	4810      	ldr	r0, [pc, #64]	; (4ffc <i2c_nrfx_twim_configure+0xa4>)
    4fba:	f007 f8b0 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    4fbe:	f06f 0015 	mvn.w	r0, #21
}
    4fc2:	b009      	add	sp, #36	; 0x24
    4fc4:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    4fc8:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    4fca:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    4fce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    4fd2:	2000      	movs	r0, #0
}
    4fd4:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    4fd6:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    4fd8:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    4fdc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    4fe0:	2000      	movs	r0, #0
}
    4fe2:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    4fe4:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    4fe6:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
    4fea:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    4fee:	2000      	movs	r0, #0
}
    4ff0:	4770      	bx	lr
		return -EINVAL;
    4ff2:	f06f 0015 	mvn.w	r0, #21
}
    4ff6:	4770      	bx	lr
    4ff8:	000102f4 	.word	0x000102f4
    4ffc:	0000f790 	.word	0x0000f790

00005000 <i2c_nrfx_twim_transfer>:
{
    5000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5004:	b091      	sub	sp, #68	; 0x44
    5006:	af00      	add	r7, sp, #0
    5008:	4683      	mov	fp, r0
    500a:	4689      	mov	r9, r1
    500c:	4692      	mov	sl, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    500e:	6901      	ldr	r1, [r0, #16]
    5010:	460c      	mov	r4, r1
    5012:	60f9      	str	r1, [r7, #12]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5014:	6842      	ldr	r2, [r0, #4]
    5016:	617a      	str	r2, [r7, #20]
	uint8_t *msg_buf = dev_data->msg_buf;
    5018:	6a48      	ldr	r0, [r1, #36]	; 0x24
    501a:	61b8      	str	r0, [r7, #24]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    501c:	8b12      	ldrh	r2, [r2, #24]
    501e:	607a      	str	r2, [r7, #4]
	nrfx_twim_xfer_desc_t cur_xfer = {
    5020:	2500      	movs	r5, #0
    5022:	62fd      	str	r5, [r7, #44]	; 0x2c
    5024:	633d      	str	r5, [r7, #48]	; 0x30
    5026:	637d      	str	r5, [r7, #52]	; 0x34
    5028:	63bd      	str	r5, [r7, #56]	; 0x38
    502a:	63fd      	str	r5, [r7, #60]	; 0x3c
    502c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    5030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5038:	4608      	mov	r0, r1
    503a:	f004 fcb3 	bl	99a4 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    503e:	f104 0310 	add.w	r3, r4, #16
    5042:	4618      	mov	r0, r3
    5044:	60bb      	str	r3, [r7, #8]
    5046:	2200      	movs	r2, #0
    5048:	2300      	movs	r3, #0
    504a:	f004 fcab 	bl	99a4 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    504e:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
    5050:	462c      	mov	r4, r5
	int ret = 0;
    5052:	613d      	str	r5, [r7, #16]
    5054:	f8c7 b000 	str.w	fp, [r7]
	for (size_t i = 0; i < num_msgs; i++) {
    5058:	e04b      	b.n	50f2 <i2c_nrfx_twim_transfer+0xf2>
		if (concat_next || (msg_buf_used != 0)) {
    505a:	2c00      	cmp	r4, #0
    505c:	f000 80e6 	beq.w	522c <i2c_nrfx_twim_transfer+0x22c>
		bool concat_next = ((i + 1) < num_msgs)
    5060:	2200      	movs	r2, #0
    5062:	61fa      	str	r2, [r7, #28]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    5064:	4620      	mov	r0, r4
    5066:	686a      	ldr	r2, [r5, #4]
    5068:	18a1      	adds	r1, r4, r2
    506a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    506e:	4561      	cmp	r1, ip
    5070:	d863      	bhi.n	513a <i2c_nrfx_twim_transfer+0x13a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    5072:	f013 0f01 	tst.w	r3, #1
    5076:	f000 80d2 	beq.w	521e <i2c_nrfx_twim_transfer+0x21e>
			msg_buf_used += msgs[i].len;
    507a:	686b      	ldr	r3, [r5, #4]
    507c:	4423      	add	r3, r4
    507e:	b29c      	uxth	r4, r3
		if (concat_next) {
    5080:	69fb      	ldr	r3, [r7, #28]
    5082:	2b00      	cmp	r3, #0
    5084:	d134      	bne.n	50f0 <i2c_nrfx_twim_transfer+0xf0>
		if (msg_buf_used == 0) {
    5086:	2c00      	cmp	r4, #0
    5088:	f040 8154 	bne.w	5334 <i2c_nrfx_twim_transfer+0x334>
			cur_xfer.p_primary_buf = msgs[i].buf;
    508c:	f859 300b 	ldr.w	r3, [r9, fp]
    5090:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msgs[i].len;
    5092:	686b      	ldr	r3, [r5, #4]
    5094:	633b      	str	r3, [r7, #48]	; 0x30
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5096:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    5098:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    509c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    50a0:	f013 0f02 	tst.w	r3, #2
    50a4:	f000 814a 	beq.w	533c <i2c_nrfx_twim_transfer+0x33c>
    50a8:	2200      	movs	r2, #0
    50aa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    50ae:	6978      	ldr	r0, [r7, #20]
    50b0:	f003 fad8 	bl	8664 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    50b4:	4ba8      	ldr	r3, [pc, #672]	; (5358 <i2c_nrfx_twim_transfer+0x358>)
    50b6:	4298      	cmp	r0, r3
    50b8:	f040 8142 	bne.w	5340 <i2c_nrfx_twim_transfer+0x340>
    50bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    50c0:	2300      	movs	r3, #0
    50c2:	68b8      	ldr	r0, [r7, #8]
    50c4:	f004 fc6e 	bl	99a4 <z_impl_k_sem_take>
		if (ret != 0) {
    50c8:	6138      	str	r0, [r7, #16]
    50ca:	2800      	cmp	r0, #0
    50cc:	f040 814c 	bne.w	5368 <i2c_nrfx_twim_transfer+0x368>
		res = dev_data->res;
    50d0:	68fb      	ldr	r3, [r7, #12]
    50d2:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    50d4:	4aa0      	ldr	r2, [pc, #640]	; (5358 <i2c_nrfx_twim_transfer+0x358>)
    50d6:	4293      	cmp	r3, r2
    50d8:	f040 818e 	bne.w	53f8 <i2c_nrfx_twim_transfer+0x3f8>
		if ((msgs[i].flags & I2C_MSG_READ)
    50dc:	7a2b      	ldrb	r3, [r5, #8]
    50de:	f013 0f01 	tst.w	r3, #1
    50e2:	d004      	beq.n	50ee <i2c_nrfx_twim_transfer+0xee>
		    && cur_xfer.p_primary_buf == msg_buf) {
    50e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50e6:	69ba      	ldr	r2, [r7, #24]
    50e8:	429a      	cmp	r2, r3
    50ea:	f000 81cd 	beq.w	5488 <i2c_nrfx_twim_transfer+0x488>
		msg_buf_used = 0;
    50ee:	2400      	movs	r4, #0
    50f0:	4646      	mov	r6, r8
	for (size_t i = 0; i < num_msgs; i++) {
    50f2:	4556      	cmp	r6, sl
    50f4:	f080 81de 	bcs.w	54b4 <i2c_nrfx_twim_transfer+0x4b4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    50f8:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    50fc:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    5100:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    5104:	7a2b      	ldrb	r3, [r5, #8]
    5106:	f013 0f08 	tst.w	r3, #8
    510a:	f040 81d0 	bne.w	54ae <i2c_nrfx_twim_transfer+0x4ae>
		bool concat_next = ((i + 1) < num_msgs)
    510e:	f106 0801 	add.w	r8, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    5112:	45d0      	cmp	r8, sl
    5114:	d2a1      	bcs.n	505a <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    5116:	f013 0f02 	tst.w	r3, #2
    511a:	d19e      	bne.n	505a <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    511c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    5120:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    5124:	7a12      	ldrb	r2, [r2, #8]
    5126:	f012 0f04 	tst.w	r2, #4
    512a:	d196      	bne.n	505a <i2c_nrfx_twim_transfer+0x5a>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    512c:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    512e:	f012 0f01 	tst.w	r2, #1
    5132:	d192      	bne.n	505a <i2c_nrfx_twim_transfer+0x5a>
		bool concat_next = ((i + 1) < num_msgs)
    5134:	2201      	movs	r2, #1
    5136:	61fa      	str	r2, [r7, #28]
    5138:	e794      	b.n	5064 <i2c_nrfx_twim_transfer+0x64>
				LOG_ERR("Need to use concatenation buffer and "
    513a:	f8d7 b000 	ldr.w	fp, [r7]
    513e:	f8db 0000 	ldr.w	r0, [fp]
    5142:	466d      	mov	r5, sp
    5144:	2305      	movs	r3, #5
    5146:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    514a:	b08c      	sub	sp, #48	; 0x30
    514c:	466b      	mov	r3, sp
    514e:	f113 0610 	adds.w	r6, r3, #16
    5152:	d04f      	beq.n	51f4 <i2c_nrfx_twim_transfer+0x1f4>
    5154:	f04f 0c19 	mov.w	ip, #25
    5158:	2e00      	cmp	r6, #0
    515a:	d04e      	beq.n	51fa <i2c_nrfx_twim_transfer+0x1fa>
    515c:	4661      	mov	r1, ip
    515e:	f1bc 0f04 	cmp.w	ip, #4
    5162:	dd03      	ble.n	516c <i2c_nrfx_twim_transfer+0x16c>
    5164:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 535c <i2c_nrfx_twim_transfer+0x35c>
    5168:	f8c3 e014 	str.w	lr, [r3, #20]
    516c:	2908      	cmp	r1, #8
    516e:	dd00      	ble.n	5172 <i2c_nrfx_twim_transfer+0x172>
    5170:	619c      	str	r4, [r3, #24]
    5172:	290c      	cmp	r1, #12
    5174:	dd00      	ble.n	5178 <i2c_nrfx_twim_transfer+0x178>
    5176:	61da      	str	r2, [r3, #28]
    5178:	2910      	cmp	r1, #16
    517a:	dd01      	ble.n	5180 <i2c_nrfx_twim_transfer+0x180>
    517c:	687a      	ldr	r2, [r7, #4]
    517e:	621a      	str	r2, [r3, #32]
    5180:	2205      	movs	r2, #5
    5182:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    5186:	2914      	cmp	r1, #20
    5188:	dd00      	ble.n	518c <i2c_nrfx_twim_transfer+0x18c>
    518a:	6258      	str	r0, [r3, #36]	; 0x24
    518c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    5190:	2000      	movs	r0, #0
    5192:	b3b0      	cbz	r0, 5202 <i2c_nrfx_twim_transfer+0x202>
    5194:	f1bc 0f18 	cmp.w	ip, #24
    5198:	dd3e      	ble.n	5218 <i2c_nrfx_twim_transfer+0x218>
    519a:	2219      	movs	r2, #25
    519c:	b166      	cbz	r6, 51b8 <i2c_nrfx_twim_transfer+0x1b8>
    519e:	2106      	movs	r1, #6
    51a0:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    51a4:	2100      	movs	r1, #0
    51a6:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    51aa:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    51ae:	2101      	movs	r1, #1
    51b0:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    51b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    51b6:	6118      	str	r0, [r3, #16]
    51b8:	2100      	movs	r1, #0
    51ba:	f36f 0100 	bfc	r1, #0, #1
    51be:	f36f 0141 	bfc	r1, #1, #1
    51c2:	f36f 0182 	bfc	r1, #2, #1
    51c6:	f36f 01c5 	bfc	r1, #3, #3
    51ca:	2301      	movs	r3, #1
    51cc:	f363 1188 	bfi	r1, r3, #6, #3
    51d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
    51d4:	f362 2152 	bfi	r1, r2, #9, #10
    51d8:	f36f 41de 	bfc	r1, #19, #12
    51dc:	f36f 71df 	bfc	r1, #31, #1
    51e0:	2300      	movs	r3, #0
    51e2:	4632      	mov	r2, r6
    51e4:	485e      	ldr	r0, [pc, #376]	; (5360 <i2c_nrfx_twim_transfer+0x360>)
    51e6:	f006 ff9a 	bl	c11e <z_impl_z_log_msg_static_create>
    51ea:	46ad      	mov	sp, r5
				ret = -ENOSPC;
    51ec:	f06f 031b 	mvn.w	r3, #27
    51f0:	613b      	str	r3, [r7, #16]
				break;
    51f2:	e15f      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
				LOG_ERR("Need to use concatenation buffer and "
    51f4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    51f8:	e7ae      	b.n	5158 <i2c_nrfx_twim_transfer+0x158>
    51fa:	2205      	movs	r2, #5
    51fc:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    5200:	e7c8      	b.n	5194 <i2c_nrfx_twim_transfer+0x194>
    5202:	f100 0220 	add.w	r2, r0, #32
    5206:	f107 0420 	add.w	r4, r7, #32
    520a:	4422      	add	r2, r4
    520c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
    5210:	f801 2b01 	strb.w	r2, [r1], #1
    5214:	3001      	adds	r0, #1
    5216:	e7bc      	b.n	5192 <i2c_nrfx_twim_transfer+0x192>
    5218:	f06f 021b 	mvn.w	r2, #27
    521c:	e7be      	b.n	519c <i2c_nrfx_twim_transfer+0x19c>
				memcpy(msg_buf + msg_buf_used,
    521e:	f859 100b 	ldr.w	r1, [r9, fp]
    5222:	69bb      	ldr	r3, [r7, #24]
    5224:	4418      	add	r0, r3
    5226:	f007 fc4e 	bl	cac6 <memcpy>
    522a:	e726      	b.n	507a <i2c_nrfx_twim_transfer+0x7a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    522c:	f013 0f01 	tst.w	r3, #1
    5230:	d17a      	bne.n	5328 <i2c_nrfx_twim_transfer+0x328>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    5232:	f859 100b 	ldr.w	r1, [r9, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5236:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    523a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    523e:	d076      	beq.n	532e <i2c_nrfx_twim_transfer+0x32e>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    5240:	686a      	ldr	r2, [r5, #4]
    5242:	697b      	ldr	r3, [r7, #20]
    5244:	8b5b      	ldrh	r3, [r3, #26]
    5246:	429a      	cmp	r2, r3
    5248:	d806      	bhi.n	5258 <i2c_nrfx_twim_transfer+0x258>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    524a:	69b8      	ldr	r0, [r7, #24]
    524c:	f007 fc3b 	bl	cac6 <memcpy>
			msg_buf_used = msgs[i].len;
    5250:	88ac      	ldrh	r4, [r5, #4]
		bool concat_next = ((i + 1) < num_msgs)
    5252:	2300      	movs	r3, #0
    5254:	61fb      	str	r3, [r7, #28]
    5256:	e713      	b.n	5080 <i2c_nrfx_twim_transfer+0x80>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    5258:	f8d7 b000 	ldr.w	fp, [r7]
    525c:	f8db 6000 	ldr.w	r6, [fp]
    5260:	466c      	mov	r4, sp
    5262:	2303      	movs	r3, #3
    5264:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    5268:	b08a      	sub	sp, #40	; 0x28
    526a:	466b      	mov	r3, sp
    526c:	f113 0510 	adds.w	r5, r3, #16
    5270:	d045      	beq.n	52fe <i2c_nrfx_twim_transfer+0x2fe>
    5272:	2011      	movs	r0, #17
    5274:	2d00      	cmp	r5, #0
    5276:	d045      	beq.n	5304 <i2c_nrfx_twim_transfer+0x304>
    5278:	4601      	mov	r1, r0
    527a:	2804      	cmp	r0, #4
    527c:	dd03      	ble.n	5286 <i2c_nrfx_twim_transfer+0x286>
    527e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 5364 <i2c_nrfx_twim_transfer+0x364>
    5282:	f8c3 c014 	str.w	ip, [r3, #20]
    5286:	2908      	cmp	r1, #8
    5288:	dd00      	ble.n	528c <i2c_nrfx_twim_transfer+0x28c>
    528a:	619a      	str	r2, [r3, #24]
    528c:	2203      	movs	r2, #3
    528e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    5292:	290c      	cmp	r1, #12
    5294:	dd00      	ble.n	5298 <i2c_nrfx_twim_transfer+0x298>
    5296:	61de      	str	r6, [r3, #28]
    5298:	f103 0120 	add.w	r1, r3, #32
    529c:	2200      	movs	r2, #0
    529e:	b3aa      	cbz	r2, 530c <i2c_nrfx_twim_transfer+0x30c>
    52a0:	2810      	cmp	r0, #16
    52a2:	dd3e      	ble.n	5322 <i2c_nrfx_twim_transfer+0x322>
    52a4:	2211      	movs	r2, #17
    52a6:	b165      	cbz	r5, 52c2 <i2c_nrfx_twim_transfer+0x2c2>
    52a8:	2104      	movs	r1, #4
    52aa:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    52ae:	2100      	movs	r1, #0
    52b0:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    52b4:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    52b8:	2101      	movs	r1, #1
    52ba:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    52be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    52c0:	6118      	str	r0, [r3, #16]
    52c2:	2100      	movs	r1, #0
    52c4:	f36f 0100 	bfc	r1, #0, #1
    52c8:	f36f 0141 	bfc	r1, #1, #1
    52cc:	f36f 0182 	bfc	r1, #2, #1
    52d0:	f36f 01c5 	bfc	r1, #3, #3
    52d4:	2301      	movs	r3, #1
    52d6:	f363 1188 	bfi	r1, r3, #6, #3
    52da:	f3c2 0309 	ubfx	r3, r2, #0, #10
    52de:	f363 2152 	bfi	r1, r3, #9, #10
    52e2:	f36f 41de 	bfc	r1, #19, #12
    52e6:	f36f 71df 	bfc	r1, #31, #1
    52ea:	2300      	movs	r3, #0
    52ec:	462a      	mov	r2, r5
    52ee:	481c      	ldr	r0, [pc, #112]	; (5360 <i2c_nrfx_twim_transfer+0x360>)
    52f0:	f006 ff15 	bl	c11e <z_impl_z_log_msg_static_create>
    52f4:	46a5      	mov	sp, r4
				ret = -EINVAL;
    52f6:	f06f 0315 	mvn.w	r3, #21
    52fa:	613b      	str	r3, [r7, #16]
				break;
    52fc:	e0da      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    52fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5302:	e7b7      	b.n	5274 <i2c_nrfx_twim_transfer+0x274>
    5304:	2203      	movs	r2, #3
    5306:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    530a:	e7c9      	b.n	52a0 <i2c_nrfx_twim_transfer+0x2a0>
    530c:	f102 0620 	add.w	r6, r2, #32
    5310:	f107 0c20 	add.w	ip, r7, #32
    5314:	4466      	add	r6, ip
    5316:	f816 6c1c 	ldrb.w	r6, [r6, #-28]
    531a:	f801 6b01 	strb.w	r6, [r1], #1
    531e:	3201      	adds	r2, #1
    5320:	e7bd      	b.n	529e <i2c_nrfx_twim_transfer+0x29e>
    5322:	f06f 021b 	mvn.w	r2, #27
    5326:	e7be      	b.n	52a6 <i2c_nrfx_twim_transfer+0x2a6>
		bool concat_next = ((i + 1) < num_msgs)
    5328:	2300      	movs	r3, #0
    532a:	61fb      	str	r3, [r7, #28]
    532c:	e6a8      	b.n	5080 <i2c_nrfx_twim_transfer+0x80>
    532e:	2300      	movs	r3, #0
    5330:	61fb      	str	r3, [r7, #28]
    5332:	e6a5      	b.n	5080 <i2c_nrfx_twim_transfer+0x80>
			cur_xfer.p_primary_buf = msg_buf;
    5334:	69bb      	ldr	r3, [r7, #24]
    5336:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msg_buf_used;
    5338:	633c      	str	r4, [r7, #48]	; 0x30
    533a:	e6ac      	b.n	5096 <i2c_nrfx_twim_transfer+0x96>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    533c:	2220      	movs	r2, #32
    533e:	e6b4      	b.n	50aa <i2c_nrfx_twim_transfer+0xaa>
			if (res == NRFX_ERROR_BUSY) {
    5340:	330b      	adds	r3, #11
    5342:	4298      	cmp	r0, r3
    5344:	d003      	beq.n	534e <i2c_nrfx_twim_transfer+0x34e>
				ret = -EIO;
    5346:	f06f 0304 	mvn.w	r3, #4
    534a:	613b      	str	r3, [r7, #16]
    534c:	e0b2      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
				ret = -EBUSY;
    534e:	f06f 030f 	mvn.w	r3, #15
    5352:	613b      	str	r3, [r7, #16]
    5354:	e0ae      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
    5356:	bf00      	nop
    5358:	0bad0000 	.word	0x0bad0000
    535c:	00010308 	.word	0x00010308
    5360:	0000f790 	.word	0x0000f790
    5364:	00010398 	.word	0x00010398
			LOG_ERR("Error on I2C line occurred for message %d", i);
    5368:	f8d7 b000 	ldr.w	fp, [r7]
    536c:	466c      	mov	r4, sp
    536e:	b088      	sub	sp, #32
    5370:	466b      	mov	r3, sp
    5372:	f113 0210 	adds.w	r2, r3, #16
    5376:	d039      	beq.n	53ec <i2c_nrfx_twim_transfer+0x3ec>
    5378:	210c      	movs	r1, #12
    537a:	b13a      	cbz	r2, 538c <i2c_nrfx_twim_transfer+0x38c>
    537c:	4608      	mov	r0, r1
    537e:	2904      	cmp	r1, #4
    5380:	dd01      	ble.n	5386 <i2c_nrfx_twim_transfer+0x386>
    5382:	4d50      	ldr	r5, [pc, #320]	; (54c4 <i2c_nrfx_twim_transfer+0x4c4>)
    5384:	615d      	str	r5, [r3, #20]
    5386:	2808      	cmp	r0, #8
    5388:	dd00      	ble.n	538c <i2c_nrfx_twim_transfer+0x38c>
    538a:	619e      	str	r6, [r3, #24]
    538c:	290b      	cmp	r1, #11
    538e:	dd30      	ble.n	53f2 <i2c_nrfx_twim_transfer+0x3f2>
    5390:	250c      	movs	r5, #12
    5392:	b15a      	cbz	r2, 53ac <i2c_nrfx_twim_transfer+0x3ac>
    5394:	2103      	movs	r1, #3
    5396:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    539a:	2100      	movs	r1, #0
    539c:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    53a0:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    53a4:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    53a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    53aa:	6118      	str	r0, [r3, #16]
    53ac:	2100      	movs	r1, #0
    53ae:	f36f 0100 	bfc	r1, #0, #1
    53b2:	f36f 0141 	bfc	r1, #1, #1
    53b6:	f36f 0182 	bfc	r1, #2, #1
    53ba:	f36f 01c5 	bfc	r1, #3, #3
    53be:	2301      	movs	r3, #1
    53c0:	f363 1188 	bfi	r1, r3, #6, #3
    53c4:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    53c8:	f365 2152 	bfi	r1, r5, #9, #10
    53cc:	f36f 41de 	bfc	r1, #19, #12
    53d0:	f36f 71df 	bfc	r1, #31, #1
    53d4:	2300      	movs	r3, #0
    53d6:	483c      	ldr	r0, [pc, #240]	; (54c8 <i2c_nrfx_twim_transfer+0x4c8>)
    53d8:	f006 fea1 	bl	c11e <z_impl_z_log_msg_static_create>
    53dc:	46a5      	mov	sp, r4
			(void)i2c_nrfx_twim_recover_bus(dev);
    53de:	4658      	mov	r0, fp
    53e0:	f7ff fd9a 	bl	4f18 <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
    53e4:	f06f 0304 	mvn.w	r3, #4
    53e8:	613b      	str	r3, [r7, #16]
			break;
    53ea:	e063      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    53ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    53f0:	e7c3      	b.n	537a <i2c_nrfx_twim_transfer+0x37a>
    53f2:	f06f 051b 	mvn.w	r5, #27
    53f6:	e7cc      	b.n	5392 <i2c_nrfx_twim_transfer+0x392>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    53f8:	466c      	mov	r4, sp
    53fa:	b088      	sub	sp, #32
    53fc:	4669      	mov	r1, sp
    53fe:	f111 0210 	adds.w	r2, r1, #16
    5402:	d03b      	beq.n	547c <i2c_nrfx_twim_transfer+0x47c>
    5404:	2010      	movs	r0, #16
    5406:	b162      	cbz	r2, 5422 <i2c_nrfx_twim_transfer+0x422>
    5408:	4605      	mov	r5, r0
    540a:	2804      	cmp	r0, #4
    540c:	dd03      	ble.n	5416 <i2c_nrfx_twim_transfer+0x416>
    540e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 54cc <i2c_nrfx_twim_transfer+0x4cc>
    5412:	f8c1 c014 	str.w	ip, [r1, #20]
    5416:	2d08      	cmp	r5, #8
    5418:	dd00      	ble.n	541c <i2c_nrfx_twim_transfer+0x41c>
    541a:	618b      	str	r3, [r1, #24]
    541c:	2d0c      	cmp	r5, #12
    541e:	dd00      	ble.n	5422 <i2c_nrfx_twim_transfer+0x422>
    5420:	61ce      	str	r6, [r1, #28]
    5422:	280f      	cmp	r0, #15
    5424:	dd2d      	ble.n	5482 <i2c_nrfx_twim_transfer+0x482>
    5426:	2310      	movs	r3, #16
    5428:	b15a      	cbz	r2, 5442 <i2c_nrfx_twim_transfer+0x442>
    542a:	2004      	movs	r0, #4
    542c:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    5430:	2000      	movs	r0, #0
    5432:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    5436:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    543a:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    543e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5440:	6108      	str	r0, [r1, #16]
    5442:	2100      	movs	r1, #0
    5444:	f36f 0100 	bfc	r1, #0, #1
    5448:	f36f 0141 	bfc	r1, #1, #1
    544c:	f36f 0182 	bfc	r1, #2, #1
    5450:	f36f 01c5 	bfc	r1, #3, #3
    5454:	2001      	movs	r0, #1
    5456:	f360 1188 	bfi	r1, r0, #6, #3
    545a:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
    545e:	f363 2152 	bfi	r1, r3, #9, #10
    5462:	f36f 41de 	bfc	r1, #19, #12
    5466:	f36f 71df 	bfc	r1, #31, #1
    546a:	2300      	movs	r3, #0
    546c:	4816      	ldr	r0, [pc, #88]	; (54c8 <i2c_nrfx_twim_transfer+0x4c8>)
    546e:	f006 fe56 	bl	c11e <z_impl_z_log_msg_static_create>
    5472:	46a5      	mov	sp, r4
			ret = -EIO;
    5474:	f06f 0304 	mvn.w	r3, #4
    5478:	613b      	str	r3, [r7, #16]
			break;
    547a:	e01b      	b.n	54b4 <i2c_nrfx_twim_transfer+0x4b4>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    547c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5480:	e7c1      	b.n	5406 <i2c_nrfx_twim_transfer+0x406>
    5482:	f06f 031b 	mvn.w	r3, #27
    5486:	e7cf      	b.n	5428 <i2c_nrfx_twim_transfer+0x428>
			while (msg_buf_used >= msgs[j].len) {
    5488:	4615      	mov	r5, r2
    548a:	e007      	b.n	549c <i2c_nrfx_twim_transfer+0x49c>
				msg_buf_used -= msgs[j].len;
    548c:	1aa4      	subs	r4, r4, r2
    548e:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
    5490:	1929      	adds	r1, r5, r4
    5492:	f859 0000 	ldr.w	r0, [r9, r0]
    5496:	f007 fb16 	bl	cac6 <memcpy>
				j--;
    549a:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
    549c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    54a0:	0098      	lsls	r0, r3, #2
    54a2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    54a6:	685a      	ldr	r2, [r3, #4]
    54a8:	4294      	cmp	r4, r2
    54aa:	d2ef      	bcs.n	548c <i2c_nrfx_twim_transfer+0x48c>
    54ac:	e61f      	b.n	50ee <i2c_nrfx_twim_transfer+0xee>
			ret = -ENOTSUP;
    54ae:	f06f 0385 	mvn.w	r3, #133	; 0x85
    54b2:	613b      	str	r3, [r7, #16]
	z_impl_k_sem_give(sem);
    54b4:	68f8      	ldr	r0, [r7, #12]
    54b6:	f004 fa51 	bl	995c <z_impl_k_sem_give>
}
    54ba:	6938      	ldr	r0, [r7, #16]
    54bc:	3744      	adds	r7, #68	; 0x44
    54be:	46bd      	mov	sp, r7
    54c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54c4:	00010400 	.word	0x00010400
    54c8:	0000f790 	.word	0x0000f790
    54cc:	0001042c 	.word	0x0001042c

000054d0 <event_handler>:
{
    54d0:	b508      	push	{r3, lr}
	switch (p_event->type) {
    54d2:	7803      	ldrb	r3, [r0, #0]
    54d4:	2b01      	cmp	r3, #1
    54d6:	d00c      	beq.n	54f2 <event_handler+0x22>
    54d8:	2b02      	cmp	r3, #2
    54da:	d00d      	beq.n	54f8 <event_handler+0x28>
    54dc:	b113      	cbz	r3, 54e4 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    54de:	4b08      	ldr	r3, [pc, #32]	; (5500 <event_handler+0x30>)
    54e0:	620b      	str	r3, [r1, #32]
		break;
    54e2:	e001      	b.n	54e8 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    54e4:	4b07      	ldr	r3, [pc, #28]	; (5504 <event_handler+0x34>)
    54e6:	620b      	str	r3, [r1, #32]
	k_sem_give(&dev_data->completion_sync);
    54e8:	f101 0010 	add.w	r0, r1, #16
    54ec:	f004 fa36 	bl	995c <z_impl_k_sem_give>
}
    54f0:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    54f2:	4b05      	ldr	r3, [pc, #20]	; (5508 <event_handler+0x38>)
    54f4:	620b      	str	r3, [r1, #32]
		break;
    54f6:	e7f7      	b.n	54e8 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    54f8:	4b04      	ldr	r3, [pc, #16]	; (550c <event_handler+0x3c>)
    54fa:	620b      	str	r3, [r1, #32]
		break;
    54fc:	e7f4      	b.n	54e8 <event_handler+0x18>
    54fe:	bf00      	nop
    5500:	0bad0001 	.word	0x0bad0001
    5504:	0bad0000 	.word	0x0bad0000
    5508:	0bae0001 	.word	0x0bae0001
    550c:	0bae0002 	.word	0x0bae0002

00005510 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    5510:	b5f0      	push	{r4, r5, r6, r7, lr}
    5512:	b083      	sub	sp, #12
    5514:	af00      	add	r7, sp, #0
    5516:	4604      	mov	r4, r0
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5518:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    551a:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    551c:	69eb      	ldr	r3, [r5, #28]
    551e:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
    5520:	2100      	movs	r1, #0
    5522:	6a28      	ldr	r0, [r5, #32]
    5524:	f007 fd78 	bl	d018 <pinctrl_apply_state>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    5528:	2800      	cmp	r0, #0
    552a:	db0d      	blt.n	5548 <i2c_nrfx_twim_init+0x38>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    552c:	4633      	mov	r3, r6
    552e:	4a32      	ldr	r2, [pc, #200]	; (55f8 <i2c_nrfx_twim_init+0xe8>)
    5530:	f105 0108 	add.w	r1, r5, #8
    5534:	4628      	mov	r0, r5
    5536:	f003 f81d 	bl	8574 <nrfx_twim_init>
    553a:	4b30      	ldr	r3, [pc, #192]	; (55fc <i2c_nrfx_twim_init+0xec>)
    553c:	4298      	cmp	r0, r3
    553e:	d106      	bne.n	554e <i2c_nrfx_twim_init+0x3e>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    5540:	4628      	mov	r0, r5
    5542:	f003 f861 	bl	8608 <nrfx_twim_enable>
#endif

	return 0;
    5546:	2000      	movs	r0, #0
}
    5548:	370c      	adds	r7, #12
    554a:	46bd      	mov	sp, r7
    554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
    554e:	6826      	ldr	r6, [r4, #0]
    5550:	466c      	mov	r4, sp
    5552:	2302      	movs	r3, #2
    5554:	713b      	strb	r3, [r7, #4]
    5556:	b088      	sub	sp, #32
    5558:	466b      	mov	r3, sp
    555a:	f113 0210 	adds.w	r2, r3, #16
    555e:	d038      	beq.n	55d2 <i2c_nrfx_twim_init+0xc2>
    5560:	250d      	movs	r5, #13
    5562:	b3ca      	cbz	r2, 55d8 <i2c_nrfx_twim_init+0xc8>
    5564:	4629      	mov	r1, r5
    5566:	2d04      	cmp	r5, #4
    5568:	dd01      	ble.n	556e <i2c_nrfx_twim_init+0x5e>
    556a:	4825      	ldr	r0, [pc, #148]	; (5600 <i2c_nrfx_twim_init+0xf0>)
    556c:	6158      	str	r0, [r3, #20]
    556e:	2002      	movs	r0, #2
    5570:	7038      	strb	r0, [r7, #0]
    5572:	2908      	cmp	r1, #8
    5574:	dd00      	ble.n	5578 <i2c_nrfx_twim_init+0x68>
    5576:	619e      	str	r6, [r3, #24]
    5578:	f103 011c 	add.w	r1, r3, #28
    557c:	2000      	movs	r0, #0
    557e:	b370      	cbz	r0, 55de <i2c_nrfx_twim_init+0xce>
    5580:	2d0c      	cmp	r5, #12
    5582:	dd35      	ble.n	55f0 <i2c_nrfx_twim_init+0xe0>
    5584:	250d      	movs	r5, #13
    5586:	b142      	cbz	r2, 559a <i2c_nrfx_twim_init+0x8a>
    5588:	2103      	movs	r1, #3
    558a:	7139      	strb	r1, [r7, #4]
    558c:	2100      	movs	r1, #0
    558e:	7179      	strb	r1, [r7, #5]
    5590:	71b9      	strb	r1, [r7, #6]
    5592:	2101      	movs	r1, #1
    5594:	71f9      	strb	r1, [r7, #7]
    5596:	6878      	ldr	r0, [r7, #4]
    5598:	6118      	str	r0, [r3, #16]
    559a:	2100      	movs	r1, #0
    559c:	f36f 0100 	bfc	r1, #0, #1
    55a0:	f36f 0141 	bfc	r1, #1, #1
    55a4:	f36f 0182 	bfc	r1, #2, #1
    55a8:	f36f 01c5 	bfc	r1, #3, #3
    55ac:	2301      	movs	r3, #1
    55ae:	f363 1188 	bfi	r1, r3, #6, #3
    55b2:	f3c5 0309 	ubfx	r3, r5, #0, #10
    55b6:	f363 2152 	bfi	r1, r3, #9, #10
    55ba:	f36f 41de 	bfc	r1, #19, #12
    55be:	f36f 71df 	bfc	r1, #31, #1
    55c2:	2300      	movs	r3, #0
    55c4:	480f      	ldr	r0, [pc, #60]	; (5604 <i2c_nrfx_twim_init+0xf4>)
    55c6:	f006 fdaa 	bl	c11e <z_impl_z_log_msg_static_create>
    55ca:	46a5      	mov	sp, r4
		return -EIO;
    55cc:	f06f 0004 	mvn.w	r0, #4
    55d0:	e7ba      	b.n	5548 <i2c_nrfx_twim_init+0x38>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    55d2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    55d6:	e7c4      	b.n	5562 <i2c_nrfx_twim_init+0x52>
    55d8:	2102      	movs	r1, #2
    55da:	7039      	strb	r1, [r7, #0]
    55dc:	e7d0      	b.n	5580 <i2c_nrfx_twim_init+0x70>
    55de:	f100 0608 	add.w	r6, r0, #8
    55e2:	443e      	add	r6, r7
    55e4:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    55e8:	f801 6b01 	strb.w	r6, [r1], #1
    55ec:	3001      	adds	r0, #1
    55ee:	e7c6      	b.n	557e <i2c_nrfx_twim_init+0x6e>
    55f0:	f06f 051b 	mvn.w	r5, #27
    55f4:	e7c7      	b.n	5586 <i2c_nrfx_twim_init+0x76>
    55f6:	bf00      	nop
    55f8:	000054d1 	.word	0x000054d1
    55fc:	0bad0000 	.word	0x0bad0000
    5600:	00010454 	.word	0x00010454
    5604:	0000f790 	.word	0x0000f790

00005608 <get_nrf_spim_frequency>:

static inline nrf_spim_frequency_t get_nrf_spim_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
    5608:	4b19      	ldr	r3, [pc, #100]	; (5670 <get_nrf_spim_frequency+0x68>)
    560a:	4298      	cmp	r0, r3
    560c:	d917      	bls.n	563e <get_nrf_spim_frequency+0x36>
		return NRF_SPIM_FREQ_125K;
	} else if (frequency < 500000) {
    560e:	4b19      	ldr	r3, [pc, #100]	; (5674 <get_nrf_spim_frequency+0x6c>)
    5610:	4298      	cmp	r0, r3
    5612:	d917      	bls.n	5644 <get_nrf_spim_frequency+0x3c>
		return NRF_SPIM_FREQ_250K;
	} else if (frequency < 1000000) {
    5614:	4b18      	ldr	r3, [pc, #96]	; (5678 <get_nrf_spim_frequency+0x70>)
    5616:	4298      	cmp	r0, r3
    5618:	d917      	bls.n	564a <get_nrf_spim_frequency+0x42>
		return NRF_SPIM_FREQ_500K;
	} else if (frequency < 2000000) {
    561a:	4b18      	ldr	r3, [pc, #96]	; (567c <get_nrf_spim_frequency+0x74>)
    561c:	4298      	cmp	r0, r3
    561e:	d917      	bls.n	5650 <get_nrf_spim_frequency+0x48>
		return NRF_SPIM_FREQ_1M;
	} else if (frequency < 4000000) {
    5620:	4b17      	ldr	r3, [pc, #92]	; (5680 <get_nrf_spim_frequency+0x78>)
    5622:	4298      	cmp	r0, r3
    5624:	d917      	bls.n	5656 <get_nrf_spim_frequency+0x4e>
		return NRF_SPIM_FREQ_2M;
	} else if (frequency < 8000000) {
    5626:	4b17      	ldr	r3, [pc, #92]	; (5684 <get_nrf_spim_frequency+0x7c>)
    5628:	4298      	cmp	r0, r3
    562a:	d317      	bcc.n	565c <get_nrf_spim_frequency+0x54>
		return NRF_SPIM_FREQ_4M;
/* Only the devices with HS-SPI can use SPI clock higher than 8 MHz and
 * have SPIM_FREQUENCY_FREQUENCY_M32 defined in their own bitfields.h
 */
#if defined(SPIM_FREQUENCY_FREQUENCY_M32)
	} else if (frequency < 16000000) {
    562c:	4b16      	ldr	r3, [pc, #88]	; (5688 <get_nrf_spim_frequency+0x80>)
    562e:	4298      	cmp	r0, r3
    5630:	d317      	bcc.n	5662 <get_nrf_spim_frequency+0x5a>
		return NRF_SPIM_FREQ_8M;
	} else if (frequency < 32000000) {
    5632:	4b16      	ldr	r3, [pc, #88]	; (568c <get_nrf_spim_frequency+0x84>)
    5634:	4298      	cmp	r0, r3
    5636:	d217      	bcs.n	5668 <get_nrf_spim_frequency+0x60>
		return NRF_SPIM_FREQ_16M;
    5638:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
    563c:	4770      	bx	lr
		return NRF_SPIM_FREQ_125K;
    563e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    5642:	4770      	bx	lr
		return NRF_SPIM_FREQ_250K;
    5644:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    5648:	4770      	bx	lr
		return NRF_SPIM_FREQ_500K;
    564a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    564e:	4770      	bx	lr
		return NRF_SPIM_FREQ_1M;
    5650:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    5654:	4770      	bx	lr
		return NRF_SPIM_FREQ_2M;
    5656:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    565a:	4770      	bx	lr
		return NRF_SPIM_FREQ_4M;
    565c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    5660:	4770      	bx	lr
		return NRF_SPIM_FREQ_8M;
    5662:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5666:	4770      	bx	lr
	} else {
		return NRF_SPIM_FREQ_32M;
    5668:	f04f 50a0 	mov.w	r0, #335544320	; 0x14000000
#else
	} else {
		return NRF_SPIM_FREQ_8M;
#endif
	}
}
    566c:	4770      	bx	lr
    566e:	bf00      	nop
    5670:	0003d08f 	.word	0x0003d08f
    5674:	0007a11f 	.word	0x0007a11f
    5678:	000f423f 	.word	0x000f423f
    567c:	001e847f 	.word	0x001e847f
    5680:	003d08ff 	.word	0x003d08ff
    5684:	007a1200 	.word	0x007a1200
    5688:	00f42400 	.word	0x00f42400
    568c:	01e84800 	.word	0x01e84800

00005690 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    5690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5694:	b0a1      	sub	sp, #132	; 0x84
    5696:	af00      	add	r7, sp, #0
    5698:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
    569a:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    569c:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
    569e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    56a2:	f895 805d 	ldrb.w	r8, [r5, #93]	; 0x5d
    56a6:	f1b8 0f00 	cmp.w	r8, #0
    56aa:	d003      	beq.n	56b4 <configure+0x24>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    56ac:	682b      	ldr	r3, [r5, #0]
    56ae:	428b      	cmp	r3, r1
    56b0:	f000 8199 	beq.w	59e6 <configure+0x356>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    56b4:	88a3      	ldrh	r3, [r4, #4]
    56b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    56ba:	d159      	bne.n	5770 <configure+0xe0>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    56bc:	f013 0f01 	tst.w	r3, #1
    56c0:	d17b      	bne.n	57ba <configure+0x12a>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    56c2:	f013 0f08 	tst.w	r3, #8
    56c6:	f040 80cc 	bne.w	5862 <configure+0x1d2>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    56ca:	f3c3 1345 	ubfx	r3, r3, #5, #6
    56ce:	2b08      	cmp	r3, #8
    56d0:	f040 80ec 	bne.w	58ac <configure+0x21c>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    56d4:	6822      	ldr	r2, [r4, #0]
    56d6:	4bc5      	ldr	r3, [pc, #788]	; (59ec <configure+0x35c>)
    56d8:	429a      	cmp	r2, r3
    56da:	f240 810c 	bls.w	58f6 <configure+0x266>
#if defined(CONFIG_SOC_NRF5340_CPUAPP)
	/* On nRF5340, the 32 Mbps speed is supported by the application core
	 * when it is running at 128 MHz (see the Timing specifications section
	 * in the nRF5340 PS).
	 */
	if (max_freq > 16000000 &&
    56de:	4bc4      	ldr	r3, [pc, #784]	; (59f0 <configure+0x360>)
    56e0:	4599      	cmp	r9, r3
    56e2:	d908      	bls.n	56f6 <configure+0x66>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
    56e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56e8:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
    56ec:	f013 0f03 	tst.w	r3, #3
    56f0:	d001      	beq.n	56f6 <configure+0x66>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
    56f2:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 59f0 <configure+0x360>
	}
#endif

	config = dev_config->def_config;
    56f6:	f107 0c08 	add.w	ip, r7, #8
    56fa:	f106 0e0c 	add.w	lr, r6, #12
    56fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    5702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5706:	e89e 0003 	ldmia.w	lr, {r0, r1}
    570a:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    570e:	6820      	ldr	r0, [r4, #0]
    5710:	4548      	cmp	r0, r9
    5712:	bf28      	it	cs
    5714:	4648      	movcs	r0, r9
    5716:	f7ff ff77 	bl	5608 <get_nrf_spim_frequency>
    571a:	6138      	str	r0, [r7, #16]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    571c:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    571e:	f013 0f02 	tst.w	r3, #2
    5722:	f000 810d 	beq.w	5940 <configure+0x2b0>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    5726:	f013 0f04 	tst.w	r3, #4
    572a:	f000 810e 	beq.w	594a <configure+0x2ba>
			return NRF_SPIM_MODE_3;
    572e:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    5730:	753b      	strb	r3, [r7, #20]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    5732:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    5734:	f013 0f10 	tst.w	r3, #16
    5738:	f000 810b 	beq.w	5952 <configure+0x2c2>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
    573c:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    573e:	757b      	strb	r3, [r7, #21]

	if (dev_data->initialized) {
    5740:	f1b8 0f00 	cmp.w	r8, #0
    5744:	f040 8107 	bne.w	5956 <configure+0x2c6>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
    5748:	462b      	mov	r3, r5
    574a:	4aaa      	ldr	r2, [pc, #680]	; (59f4 <configure+0x364>)
    574c:	f107 0108 	add.w	r1, r7, #8
    5750:	4630      	mov	r0, r6
    5752:	f002 fb73 	bl	7e3c <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    5756:	4ba8      	ldr	r3, [pc, #672]	; (59f8 <configure+0x368>)
    5758:	4298      	cmp	r0, r3
    575a:	f040 8103 	bne.w	5964 <configure+0x2d4>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    575e:	2301      	movs	r3, #1
    5760:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

	ctx->config = spi_cfg;
    5764:	602c      	str	r4, [r5, #0]

	return 0;
    5766:	2000      	movs	r0, #0
}
    5768:	3784      	adds	r7, #132	; 0x84
    576a:	46bd      	mov	sp, r7
    576c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Half-duplex not supported");
    5770:	4ba2      	ldr	r3, [pc, #648]	; (59fc <configure+0x36c>)
    5772:	67fb      	str	r3, [r7, #124]	; 0x7c
    5774:	2302      	movs	r3, #2
    5776:	713b      	strb	r3, [r7, #4]
    5778:	2300      	movs	r3, #0
    577a:	717b      	strb	r3, [r7, #5]
    577c:	71bb      	strb	r3, [r7, #6]
    577e:	71fb      	strb	r3, [r7, #7]
    5780:	687a      	ldr	r2, [r7, #4]
    5782:	67ba      	str	r2, [r7, #120]	; 0x78
    5784:	4619      	mov	r1, r3
    5786:	f363 0100 	bfi	r1, r3, #0, #1
    578a:	f363 0141 	bfi	r1, r3, #1, #1
    578e:	f363 0182 	bfi	r1, r3, #2, #1
    5792:	f363 01c5 	bfi	r1, r3, #3, #3
    5796:	2201      	movs	r2, #1
    5798:	f362 1188 	bfi	r1, r2, #6, #3
    579c:	2208      	movs	r2, #8
    579e:	f362 2152 	bfi	r1, r2, #9, #10
    57a2:	f363 41de 	bfi	r1, r3, #19, #12
    57a6:	f363 71df 	bfi	r1, r3, #31, #1
    57aa:	f107 0278 	add.w	r2, r7, #120	; 0x78
    57ae:	4894      	ldr	r0, [pc, #592]	; (5a00 <configure+0x370>)
    57b0:	f006 fcb5 	bl	c11e <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
    57b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    57b8:	e7d6      	b.n	5768 <configure+0xd8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    57ba:	6801      	ldr	r1, [r0, #0]
    57bc:	466c      	mov	r4, sp
    57be:	2302      	movs	r3, #2
    57c0:	713b      	strb	r3, [r7, #4]
    57c2:	b088      	sub	sp, #32
    57c4:	466b      	mov	r3, sp
    57c6:	f113 0210 	adds.w	r2, r3, #16
    57ca:	d038      	beq.n	583e <configure+0x1ae>
    57cc:	250d      	movs	r5, #13
    57ce:	b3ca      	cbz	r2, 5844 <configure+0x1b4>
    57d0:	4628      	mov	r0, r5
    57d2:	2d04      	cmp	r5, #4
    57d4:	dd01      	ble.n	57da <configure+0x14a>
    57d6:	4e8b      	ldr	r6, [pc, #556]	; (5a04 <configure+0x374>)
    57d8:	615e      	str	r6, [r3, #20]
    57da:	2602      	movs	r6, #2
    57dc:	703e      	strb	r6, [r7, #0]
    57de:	2808      	cmp	r0, #8
    57e0:	dd00      	ble.n	57e4 <configure+0x154>
    57e2:	6199      	str	r1, [r3, #24]
    57e4:	f103 011c 	add.w	r1, r3, #28
    57e8:	2000      	movs	r0, #0
    57ea:	b370      	cbz	r0, 584a <configure+0x1ba>
    57ec:	2d0c      	cmp	r5, #12
    57ee:	dd35      	ble.n	585c <configure+0x1cc>
    57f0:	250d      	movs	r5, #13
    57f2:	b142      	cbz	r2, 5806 <configure+0x176>
    57f4:	2103      	movs	r1, #3
    57f6:	7139      	strb	r1, [r7, #4]
    57f8:	2100      	movs	r1, #0
    57fa:	7179      	strb	r1, [r7, #5]
    57fc:	71b9      	strb	r1, [r7, #6]
    57fe:	2101      	movs	r1, #1
    5800:	71f9      	strb	r1, [r7, #7]
    5802:	6878      	ldr	r0, [r7, #4]
    5804:	6118      	str	r0, [r3, #16]
    5806:	2100      	movs	r1, #0
    5808:	f36f 0100 	bfc	r1, #0, #1
    580c:	f36f 0141 	bfc	r1, #1, #1
    5810:	f36f 0182 	bfc	r1, #2, #1
    5814:	f36f 01c5 	bfc	r1, #3, #3
    5818:	2301      	movs	r3, #1
    581a:	f363 1188 	bfi	r1, r3, #6, #3
    581e:	f3c5 0309 	ubfx	r3, r5, #0, #10
    5822:	f363 2152 	bfi	r1, r3, #9, #10
    5826:	f36f 41de 	bfc	r1, #19, #12
    582a:	f36f 71df 	bfc	r1, #31, #1
    582e:	2300      	movs	r3, #0
    5830:	4873      	ldr	r0, [pc, #460]	; (5a00 <configure+0x370>)
    5832:	f006 fc74 	bl	c11e <z_impl_z_log_msg_static_create>
    5836:	46a5      	mov	sp, r4
		return -EINVAL;
    5838:	f06f 0015 	mvn.w	r0, #21
    583c:	e794      	b.n	5768 <configure+0xd8>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    583e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5842:	e7c4      	b.n	57ce <configure+0x13e>
    5844:	2102      	movs	r1, #2
    5846:	7039      	strb	r1, [r7, #0]
    5848:	e7d0      	b.n	57ec <configure+0x15c>
    584a:	f100 0680 	add.w	r6, r0, #128	; 0x80
    584e:	443e      	add	r6, r7
    5850:	f816 6c80 	ldrb.w	r6, [r6, #-128]
    5854:	f801 6b01 	strb.w	r6, [r1], #1
    5858:	3001      	adds	r0, #1
    585a:	e7c6      	b.n	57ea <configure+0x15a>
    585c:	f06f 051b 	mvn.w	r5, #27
    5860:	e7c7      	b.n	57f2 <configure+0x162>
		LOG_ERR("Loopback mode is not supported");
    5862:	4b69      	ldr	r3, [pc, #420]	; (5a08 <configure+0x378>)
    5864:	667b      	str	r3, [r7, #100]	; 0x64
    5866:	2302      	movs	r3, #2
    5868:	713b      	strb	r3, [r7, #4]
    586a:	2300      	movs	r3, #0
    586c:	717b      	strb	r3, [r7, #5]
    586e:	71bb      	strb	r3, [r7, #6]
    5870:	71fb      	strb	r3, [r7, #7]
    5872:	687a      	ldr	r2, [r7, #4]
    5874:	663a      	str	r2, [r7, #96]	; 0x60
    5876:	4619      	mov	r1, r3
    5878:	f363 0100 	bfi	r1, r3, #0, #1
    587c:	f363 0141 	bfi	r1, r3, #1, #1
    5880:	f363 0182 	bfi	r1, r3, #2, #1
    5884:	f363 01c5 	bfi	r1, r3, #3, #3
    5888:	2201      	movs	r2, #1
    588a:	f362 1188 	bfi	r1, r2, #6, #3
    588e:	2208      	movs	r2, #8
    5890:	f362 2152 	bfi	r1, r2, #9, #10
    5894:	f363 41de 	bfi	r1, r3, #19, #12
    5898:	f363 71df 	bfi	r1, r3, #31, #1
    589c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    58a0:	4857      	ldr	r0, [pc, #348]	; (5a00 <configure+0x370>)
    58a2:	f006 fc3c 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    58a6:	f06f 0015 	mvn.w	r0, #21
    58aa:	e75d      	b.n	5768 <configure+0xd8>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    58ac:	4b57      	ldr	r3, [pc, #348]	; (5a0c <configure+0x37c>)
    58ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    58b0:	2302      	movs	r3, #2
    58b2:	713b      	strb	r3, [r7, #4]
    58b4:	2300      	movs	r3, #0
    58b6:	717b      	strb	r3, [r7, #5]
    58b8:	71bb      	strb	r3, [r7, #6]
    58ba:	71fb      	strb	r3, [r7, #7]
    58bc:	687a      	ldr	r2, [r7, #4]
    58be:	64ba      	str	r2, [r7, #72]	; 0x48
    58c0:	4619      	mov	r1, r3
    58c2:	f363 0100 	bfi	r1, r3, #0, #1
    58c6:	f363 0141 	bfi	r1, r3, #1, #1
    58ca:	f363 0182 	bfi	r1, r3, #2, #1
    58ce:	f363 01c5 	bfi	r1, r3, #3, #3
    58d2:	2201      	movs	r2, #1
    58d4:	f362 1188 	bfi	r1, r2, #6, #3
    58d8:	2208      	movs	r2, #8
    58da:	f362 2152 	bfi	r1, r2, #9, #10
    58de:	f363 41de 	bfi	r1, r3, #19, #12
    58e2:	f363 71df 	bfi	r1, r3, #31, #1
    58e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
    58ea:	4845      	ldr	r0, [pc, #276]	; (5a00 <configure+0x370>)
    58ec:	f006 fc17 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    58f0:	f06f 0015 	mvn.w	r0, #21
    58f4:	e738      	b.n	5768 <configure+0xd8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    58f6:	4b46      	ldr	r3, [pc, #280]	; (5a10 <configure+0x380>)
    58f8:	637b      	str	r3, [r7, #52]	; 0x34
    58fa:	2302      	movs	r3, #2
    58fc:	713b      	strb	r3, [r7, #4]
    58fe:	2300      	movs	r3, #0
    5900:	717b      	strb	r3, [r7, #5]
    5902:	71bb      	strb	r3, [r7, #6]
    5904:	71fb      	strb	r3, [r7, #7]
    5906:	687a      	ldr	r2, [r7, #4]
    5908:	633a      	str	r2, [r7, #48]	; 0x30
    590a:	4619      	mov	r1, r3
    590c:	f363 0100 	bfi	r1, r3, #0, #1
    5910:	f363 0141 	bfi	r1, r3, #1, #1
    5914:	f363 0182 	bfi	r1, r3, #2, #1
    5918:	f363 01c5 	bfi	r1, r3, #3, #3
    591c:	2201      	movs	r2, #1
    591e:	f362 1188 	bfi	r1, r2, #6, #3
    5922:	2208      	movs	r2, #8
    5924:	f362 2152 	bfi	r1, r2, #9, #10
    5928:	f363 41de 	bfi	r1, r3, #19, #12
    592c:	f363 71df 	bfi	r1, r3, #31, #1
    5930:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5934:	4832      	ldr	r0, [pc, #200]	; (5a00 <configure+0x370>)
    5936:	f006 fbf2 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EINVAL;
    593a:	f06f 0015 	mvn.w	r0, #21
    593e:	e713      	b.n	5768 <configure+0xd8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    5940:	f013 0f04 	tst.w	r3, #4
    5944:	d003      	beq.n	594e <configure+0x2be>
			return NRF_SPIM_MODE_1;
    5946:	2301      	movs	r3, #1
    5948:	e6f2      	b.n	5730 <configure+0xa0>
			return NRF_SPIM_MODE_2;
    594a:	2302      	movs	r3, #2
    594c:	e6f0      	b.n	5730 <configure+0xa0>
			return NRF_SPIM_MODE_0;
    594e:	2300      	movs	r3, #0
    5950:	e6ee      	b.n	5730 <configure+0xa0>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
    5952:	2300      	movs	r3, #0
    5954:	e6f3      	b.n	573e <configure+0xae>
		nrfx_spim_uninit(&dev_config->spim);
    5956:	4630      	mov	r0, r6
    5958:	f002 fae0 	bl	7f1c <nrfx_spim_uninit>
		dev_data->initialized = false;
    595c:	2300      	movs	r3, #0
    595e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    5962:	e6f1      	b.n	5748 <configure+0xb8>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    5964:	466d      	mov	r5, sp
    5966:	b088      	sub	sp, #32
    5968:	466b      	mov	r3, sp
    596a:	f113 0210 	adds.w	r2, r3, #16
    596e:	d00d      	beq.n	598c <configure+0x2fc>
    5970:	210c      	movs	r1, #12
    5972:	b13a      	cbz	r2, 5984 <configure+0x2f4>
    5974:	460c      	mov	r4, r1
    5976:	2904      	cmp	r1, #4
    5978:	dd01      	ble.n	597e <configure+0x2ee>
    597a:	4e26      	ldr	r6, [pc, #152]	; (5a14 <configure+0x384>)
    597c:	615e      	str	r6, [r3, #20]
    597e:	2c08      	cmp	r4, #8
    5980:	dd07      	ble.n	5992 <configure+0x302>
    5982:	6198      	str	r0, [r3, #24]
    5984:	290b      	cmp	r1, #11
    5986:	dd2b      	ble.n	59e0 <configure+0x350>
    5988:	240c      	movs	r4, #12
    598a:	e004      	b.n	5996 <configure+0x306>
    598c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5990:	e7ef      	b.n	5972 <configure+0x2e2>
    5992:	f06f 041b 	mvn.w	r4, #27
    5996:	b13a      	cbz	r2, 59a8 <configure+0x318>
    5998:	2103      	movs	r1, #3
    599a:	7139      	strb	r1, [r7, #4]
    599c:	2100      	movs	r1, #0
    599e:	7179      	strb	r1, [r7, #5]
    59a0:	71b9      	strb	r1, [r7, #6]
    59a2:	71f9      	strb	r1, [r7, #7]
    59a4:	6878      	ldr	r0, [r7, #4]
    59a6:	6118      	str	r0, [r3, #16]
    59a8:	2100      	movs	r1, #0
    59aa:	f36f 0100 	bfc	r1, #0, #1
    59ae:	f36f 0141 	bfc	r1, #1, #1
    59b2:	f36f 0182 	bfc	r1, #2, #1
    59b6:	f36f 01c5 	bfc	r1, #3, #3
    59ba:	2301      	movs	r3, #1
    59bc:	f363 1188 	bfi	r1, r3, #6, #3
    59c0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    59c4:	f363 2152 	bfi	r1, r3, #9, #10
    59c8:	f36f 41de 	bfc	r1, #19, #12
    59cc:	f36f 71df 	bfc	r1, #31, #1
    59d0:	2300      	movs	r3, #0
    59d2:	480b      	ldr	r0, [pc, #44]	; (5a00 <configure+0x370>)
    59d4:	f006 fba3 	bl	c11e <z_impl_z_log_msg_static_create>
    59d8:	46ad      	mov	sp, r5
		return -EIO;
    59da:	f06f 0004 	mvn.w	r0, #4
    59de:	e6c3      	b.n	5768 <configure+0xd8>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    59e0:	f06f 041b 	mvn.w	r4, #27
    59e4:	e7d7      	b.n	5996 <configure+0x306>
		return 0;
    59e6:	2000      	movs	r0, #0
    59e8:	e6be      	b.n	5768 <configure+0xd8>
    59ea:	bf00      	nop
    59ec:	0001e847 	.word	0x0001e847
    59f0:	00f42400 	.word	0x00f42400
    59f4:	00005b79 	.word	0x00005b79
    59f8:	0bad0000 	.word	0x0bad0000
    59fc:	000104e8 	.word	0x000104e8
    5a00:	0000f7d8 	.word	0x0000f7d8
    5a04:	00010504 	.word	0x00010504
    5a08:	00010528 	.word	0x00010528
    5a0c:	00010548 	.word	0x00010548
    5a10:	00010578 	.word	0x00010578
    5a14:	000105ac 	.word	0x000105ac

00005a18 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
    5a18:	b530      	push	{r4, r5, lr}
    5a1a:	b089      	sub	sp, #36	; 0x24
    5a1c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5a1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
    5a20:	6c82      	ldr	r2, [r0, #72]	; 0x48
    5a22:	4293      	cmp	r3, r2
    5a24:	bf38      	it	cc
    5a26:	4613      	movcc	r3, r2
    5a28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    5a2c:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
    5a30:	4605      	mov	r5, r0
    5a32:	f855 2b20 	ldr.w	r2, [r5], #32
    5a36:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5a38:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    5a3c:	33c8      	adds	r3, #200	; 0xc8
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5a3e:	0c59      	lsrs	r1, r3, #17
    5a40:	03db      	lsls	r3, r3, #15
    5a42:	f240 32e7 	movw	r2, #999	; 0x3e7
    5a46:	1898      	adds	r0, r3, r2
    5a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a4c:	f04f 0300 	mov.w	r3, #0
    5a50:	f141 0100 	adc.w	r1, r1, #0
    5a54:	f7fa fb7e 	bl	154 <__aeabi_uldivmod>
    5a58:	4602      	mov	r2, r0
    5a5a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    5a5c:	4628      	mov	r0, r5
    5a5e:	f003 ffa1 	bl	99a4 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
    5a62:	b910      	cbnz	r0, 5a6a <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
    5a64:	6b20      	ldr	r0, [r4, #48]	; 0x30
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
    5a66:	b009      	add	sp, #36	; 0x24
    5a68:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
    5a6a:	4b14      	ldr	r3, [pc, #80]	; (5abc <spi_context_wait_for_completion+0xa4>)
    5a6c:	9307      	str	r3, [sp, #28]
    5a6e:	2302      	movs	r3, #2
    5a70:	f88d 3004 	strb.w	r3, [sp, #4]
    5a74:	2300      	movs	r3, #0
    5a76:	f88d 3005 	strb.w	r3, [sp, #5]
    5a7a:	f88d 3006 	strb.w	r3, [sp, #6]
    5a7e:	f88d 3007 	strb.w	r3, [sp, #7]
    5a82:	9a01      	ldr	r2, [sp, #4]
    5a84:	9206      	str	r2, [sp, #24]
    5a86:	4619      	mov	r1, r3
    5a88:	f363 0100 	bfi	r1, r3, #0, #1
    5a8c:	f363 0141 	bfi	r1, r3, #1, #1
    5a90:	f363 0182 	bfi	r1, r3, #2, #1
    5a94:	f363 01c5 	bfi	r1, r3, #3, #3
    5a98:	2201      	movs	r2, #1
    5a9a:	f362 1188 	bfi	r1, r2, #6, #3
    5a9e:	2208      	movs	r2, #8
    5aa0:	f362 2152 	bfi	r1, r2, #9, #10
    5aa4:	f363 41de 	bfi	r1, r3, #19, #12
    5aa8:	f363 71df 	bfi	r1, r3, #31, #1
    5aac:	aa06      	add	r2, sp, #24
    5aae:	4804      	ldr	r0, [pc, #16]	; (5ac0 <spi_context_wait_for_completion+0xa8>)
    5ab0:	f006 fb35 	bl	c11e <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
    5ab4:	f06f 0073 	mvn.w	r0, #115	; 0x73
    5ab8:	e7d5      	b.n	5a66 <spi_context_wait_for_completion+0x4e>
    5aba:	bf00      	nop
    5abc:	000105d4 	.word	0x000105d4
    5ac0:	0000f7d8 	.word	0x0000f7d8

00005ac4 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    5ac4:	b570      	push	{r4, r5, r6, lr}
    5ac6:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
    5ac8:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    5aca:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    5acc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d043      	beq.n	5b5a <transfer_next_chunk+0x96>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    5ad2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5ad4:	2d00      	cmp	r5, #0
    5ad6:	d042      	beq.n	5b5e <transfer_next_chunk+0x9a>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    5ad8:	429d      	cmp	r5, r3
    5ada:	bf28      	it	cs
    5adc:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    5ade:	2d00      	cmp	r5, #0
    5ae0:	d045      	beq.n	5b6e <transfer_next_chunk+0xaa>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
    5ae2:	6c61      	ldr	r1, [r4, #68]	; 0x44
	return !!(ctx->tx_buf && ctx->tx_len);
    5ae4:	b169      	cbz	r1, 5b02 <transfer_next_chunk+0x3e>
    5ae6:	b163      	cbz	r3, 5b02 <transfer_next_chunk+0x3e>
    5ae8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    5aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5af0:	d007      	beq.n	5b02 <transfer_next_chunk+0x3e>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    5af2:	2d08      	cmp	r5, #8
    5af4:	d900      	bls.n	5af8 <transfer_next_chunk+0x34>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
    5af6:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
    5af8:	462a      	mov	r2, r5
    5afa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    5afc:	f006 ffe3 	bl	cac6 <memcpy>
			tx_buf = dev_data->buffer;
    5b00:	6e21      	ldr	r1, [r4, #96]	; 0x60
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
    5b02:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    5b06:	d301      	bcc.n	5b0c <transfer_next_chunk+0x48>
			chunk_len = MAX_CHUNK_LEN;
    5b08:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
    5b0c:	65a5      	str	r5, [r4, #88]	; 0x58

		xfer.p_tx_buffer = tx_buf;
    5b0e:	9100      	str	r1, [sp, #0]
    5b10:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5b12:	b333      	cbz	r3, 5b62 <transfer_next_chunk+0x9e>
    5b14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5b16:	bb33      	cbnz	r3, 5b66 <transfer_next_chunk+0xa2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5b18:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    5b1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5b1c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    5b1e:	b323      	cbz	r3, 5b6a <transfer_next_chunk+0xa6>
    5b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5b22:	b903      	cbnz	r3, 5b26 <transfer_next_chunk+0x62>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5b24:	461d      	mov	r5, r3
    5b26:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    5b28:	2200      	movs	r2, #0
    5b2a:	4669      	mov	r1, sp
    5b2c:	4630      	mov	r0, r6
    5b2e:	f002 fa35 	bl	7f9c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    5b32:	4b10      	ldr	r3, [pc, #64]	; (5b74 <transfer_next_chunk+0xb0>)
    5b34:	4298      	cmp	r0, r3
    5b36:	d00e      	beq.n	5b56 <transfer_next_chunk+0x92>
				return;
			}
			error = -EIO;
    5b38:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
    5b3c:	2200      	movs	r2, #0
    5b3e:	4611      	mov	r1, r2
    5b40:	4620      	mov	r0, r4
    5b42:	f007 fb17 	bl	d174 <_spi_context_cs_control>
	ctx->sync_status = status;
    5b46:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
    5b48:	f104 0020 	add.w	r0, r4, #32
	z_impl_k_sem_give(sem);
    5b4c:	f003 ff06 	bl	995c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    5b50:	2300      	movs	r3, #0
    5b52:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    5b56:	b004      	add	sp, #16
    5b58:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
    5b5a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5b5c:	e7bf      	b.n	5ade <transfer_next_chunk+0x1a>
		return ctx->tx_len;
    5b5e:	461d      	mov	r5, r3
    5b60:	e7bd      	b.n	5ade <transfer_next_chunk+0x1a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5b62:	2300      	movs	r3, #0
    5b64:	e7d8      	b.n	5b18 <transfer_next_chunk+0x54>
    5b66:	462b      	mov	r3, r5
    5b68:	e7d6      	b.n	5b18 <transfer_next_chunk+0x54>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5b6a:	2500      	movs	r5, #0
    5b6c:	e7db      	b.n	5b26 <transfer_next_chunk+0x62>
	int error = 0;
    5b6e:	2500      	movs	r5, #0
    5b70:	e7e4      	b.n	5b3c <transfer_next_chunk+0x78>
    5b72:	bf00      	nop
    5b74:	0bad0000 	.word	0x0bad0000

00005b78 <event_handler>:

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    5b78:	7803      	ldrb	r3, [r0, #0]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	f040 808f 	bne.w	5c9e <event_handler+0x126>
{
    5b80:	b510      	push	{r4, lr}
    5b82:	b08e      	sub	sp, #56	; 0x38
    5b84:	460c      	mov	r4, r1
#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
		anomaly_58_workaround_clear(dev_data);
#endif
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    5b86:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    5b88:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5b8a:	b14b      	cbz	r3, 5ba0 <event_handler+0x28>
	if (len > ctx->tx_len) {
    5b8c:	429a      	cmp	r2, r3
    5b8e:	d819      	bhi.n	5bc4 <event_handler+0x4c>
	ctx->tx_len -= len;
    5b90:	1a9b      	subs	r3, r3, r2
    5b92:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    5b94:	2b00      	cmp	r3, #0
    5b96:	d03b      	beq.n	5c10 <event_handler+0x98>
	} else if (ctx->tx_buf) {
    5b98:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    5b9a:	b10b      	cbz	r3, 5ba0 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    5b9c:	4413      	add	r3, r2
    5b9e:	644b      	str	r3, [r1, #68]	; 0x44
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    5ba0:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    5ba2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5ba4:	b14b      	cbz	r3, 5bba <event_handler+0x42>
	if (len > ctx->rx_len) {
    5ba6:	429a      	cmp	r2, r3
    5ba8:	d842      	bhi.n	5c30 <event_handler+0xb8>
	ctx->rx_len -= len;
    5baa:	1a9b      	subs	r3, r3, r2
    5bac:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d064      	beq.n	5c7c <event_handler+0x104>
	} else if (ctx->rx_buf) {
    5bb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5bb4:	b10b      	cbz	r3, 5bba <event_handler+0x42>
		ctx->rx_buf += dfs * len;
    5bb6:	4413      	add	r3, r2
    5bb8:	64e3      	str	r3, [r4, #76]	; 0x4c

		transfer_next_chunk(dev_data->dev);
    5bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5bbc:	f7ff ff82 	bl	5ac4 <transfer_next_chunk>
	}
}
    5bc0:	b00e      	add	sp, #56	; 0x38
    5bc2:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
    5bc4:	4b36      	ldr	r3, [pc, #216]	; (5ca0 <event_handler+0x128>)
    5bc6:	930d      	str	r3, [sp, #52]	; 0x34
    5bc8:	2302      	movs	r3, #2
    5bca:	f88d 3004 	strb.w	r3, [sp, #4]
    5bce:	2300      	movs	r3, #0
    5bd0:	f88d 3005 	strb.w	r3, [sp, #5]
    5bd4:	f88d 3006 	strb.w	r3, [sp, #6]
    5bd8:	f88d 3007 	strb.w	r3, [sp, #7]
    5bdc:	9a01      	ldr	r2, [sp, #4]
    5bde:	920c      	str	r2, [sp, #48]	; 0x30
    5be0:	4619      	mov	r1, r3
    5be2:	f363 0100 	bfi	r1, r3, #0, #1
    5be6:	f363 0141 	bfi	r1, r3, #1, #1
    5bea:	f363 0182 	bfi	r1, r3, #2, #1
    5bee:	f363 01c5 	bfi	r1, r3, #3, #3
    5bf2:	2201      	movs	r2, #1
    5bf4:	f362 1188 	bfi	r1, r2, #6, #3
    5bf8:	2208      	movs	r2, #8
    5bfa:	f362 2152 	bfi	r1, r2, #9, #10
    5bfe:	f363 41de 	bfi	r1, r3, #19, #12
    5c02:	f363 71df 	bfi	r1, r3, #31, #1
    5c06:	aa0c      	add	r2, sp, #48	; 0x30
    5c08:	4826      	ldr	r0, [pc, #152]	; (5ca4 <event_handler+0x12c>)
    5c0a:	f006 fa88 	bl	c11e <z_impl_z_log_msg_static_create>
		return;
    5c0e:	e7c7      	b.n	5ba0 <event_handler+0x28>
		++ctx->current_tx;
    5c10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5c12:	3308      	adds	r3, #8
    5c14:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    5c16:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    5c18:	3b01      	subs	r3, #1
    5c1a:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    5c1c:	2301      	movs	r3, #1
    5c1e:	f101 0248 	add.w	r2, r1, #72	; 0x48
    5c22:	3138      	adds	r1, #56	; 0x38
    5c24:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5c28:	f007 fa5d 	bl	d0e6 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
    5c2c:	6460      	str	r0, [r4, #68]	; 0x44
    5c2e:	e7b7      	b.n	5ba0 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
    5c30:	4b1b      	ldr	r3, [pc, #108]	; (5ca0 <event_handler+0x128>)
    5c32:	9307      	str	r3, [sp, #28]
    5c34:	2302      	movs	r3, #2
    5c36:	f88d 3004 	strb.w	r3, [sp, #4]
    5c3a:	2300      	movs	r3, #0
    5c3c:	f88d 3005 	strb.w	r3, [sp, #5]
    5c40:	f88d 3006 	strb.w	r3, [sp, #6]
    5c44:	f88d 3007 	strb.w	r3, [sp, #7]
    5c48:	9a01      	ldr	r2, [sp, #4]
    5c4a:	9206      	str	r2, [sp, #24]
    5c4c:	4619      	mov	r1, r3
    5c4e:	f363 0100 	bfi	r1, r3, #0, #1
    5c52:	f363 0141 	bfi	r1, r3, #1, #1
    5c56:	f363 0182 	bfi	r1, r3, #2, #1
    5c5a:	f363 01c5 	bfi	r1, r3, #3, #3
    5c5e:	2201      	movs	r2, #1
    5c60:	f362 1188 	bfi	r1, r2, #6, #3
    5c64:	2208      	movs	r2, #8
    5c66:	f362 2152 	bfi	r1, r2, #9, #10
    5c6a:	f363 41de 	bfi	r1, r3, #19, #12
    5c6e:	f363 71df 	bfi	r1, r3, #31, #1
    5c72:	aa06      	add	r2, sp, #24
    5c74:	480b      	ldr	r0, [pc, #44]	; (5ca4 <event_handler+0x12c>)
    5c76:	f006 fa52 	bl	c11e <z_impl_z_log_msg_static_create>
		return;
    5c7a:	e79e      	b.n	5bba <event_handler+0x42>
		++ctx->current_rx;
    5c7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c7e:	3308      	adds	r3, #8
    5c80:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    5c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5c84:	3b01      	subs	r3, #1
    5c86:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    5c88:	2301      	movs	r3, #1
    5c8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    5c8e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    5c92:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    5c96:	f007 fa26 	bl	d0e6 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
    5c9a:	64e0      	str	r0, [r4, #76]	; 0x4c
    5c9c:	e78d      	b.n	5bba <event_handler+0x42>
    5c9e:	4770      	bx	lr
    5ca0:	000105fc 	.word	0x000105fc
    5ca4:	0000f7d8 	.word	0x0000f7d8

00005ca8 <spi_context_cs_configure_all>:
{
    5ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5caa:	b083      	sub	sp, #12
    5cac:	af00      	add	r7, sp, #0
    5cae:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    5cb0:	6884      	ldr	r4, [r0, #8]
    5cb2:	e05d      	b.n	5d70 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    5cb4:	6823      	ldr	r3, [r4, #0]
    5cb6:	f8d3 c000 	ldr.w	ip, [r3]
    5cba:	7926      	ldrb	r6, [r4, #4]
    5cbc:	466c      	mov	r4, sp
    5cbe:	2302      	movs	r3, #2
    5cc0:	713b      	strb	r3, [r7, #4]
    5cc2:	b08a      	sub	sp, #40	; 0x28
    5cc4:	466b      	mov	r3, sp
    5cc6:	f113 0210 	adds.w	r2, r3, #16
    5cca:	d03d      	beq.n	5d48 <spi_context_cs_configure_all+0xa0>
    5ccc:	2511      	movs	r5, #17
    5cce:	2a00      	cmp	r2, #0
    5cd0:	d03d      	beq.n	5d4e <spi_context_cs_configure_all+0xa6>
    5cd2:	4629      	mov	r1, r5
    5cd4:	2d04      	cmp	r5, #4
    5cd6:	dd01      	ble.n	5cdc <spi_context_cs_configure_all+0x34>
    5cd8:	4831      	ldr	r0, [pc, #196]	; (5da0 <spi_context_cs_configure_all+0xf8>)
    5cda:	6158      	str	r0, [r3, #20]
    5cdc:	2002      	movs	r0, #2
    5cde:	7038      	strb	r0, [r7, #0]
    5ce0:	2908      	cmp	r1, #8
    5ce2:	dd01      	ble.n	5ce8 <spi_context_cs_configure_all+0x40>
    5ce4:	f8c3 c018 	str.w	ip, [r3, #24]
    5ce8:	290c      	cmp	r1, #12
    5cea:	dd00      	ble.n	5cee <spi_context_cs_configure_all+0x46>
    5cec:	61de      	str	r6, [r3, #28]
    5cee:	f103 0120 	add.w	r1, r3, #32
    5cf2:	2000      	movs	r0, #0
    5cf4:	b370      	cbz	r0, 5d54 <spi_context_cs_configure_all+0xac>
    5cf6:	2d10      	cmp	r5, #16
    5cf8:	dd36      	ble.n	5d68 <spi_context_cs_configure_all+0xc0>
    5cfa:	2511      	movs	r5, #17
    5cfc:	b142      	cbz	r2, 5d10 <spi_context_cs_configure_all+0x68>
    5cfe:	2104      	movs	r1, #4
    5d00:	7139      	strb	r1, [r7, #4]
    5d02:	2100      	movs	r1, #0
    5d04:	7179      	strb	r1, [r7, #5]
    5d06:	71b9      	strb	r1, [r7, #6]
    5d08:	2101      	movs	r1, #1
    5d0a:	71f9      	strb	r1, [r7, #7]
    5d0c:	6878      	ldr	r0, [r7, #4]
    5d0e:	6118      	str	r0, [r3, #16]
    5d10:	2100      	movs	r1, #0
    5d12:	f36f 0100 	bfc	r1, #0, #1
    5d16:	f36f 0141 	bfc	r1, #1, #1
    5d1a:	f36f 0182 	bfc	r1, #2, #1
    5d1e:	f36f 01c5 	bfc	r1, #3, #3
    5d22:	2301      	movs	r3, #1
    5d24:	f363 1188 	bfi	r1, r3, #6, #3
    5d28:	f3c5 0309 	ubfx	r3, r5, #0, #10
    5d2c:	f363 2152 	bfi	r1, r3, #9, #10
    5d30:	f36f 41de 	bfc	r1, #19, #12
    5d34:	f36f 71df 	bfc	r1, #31, #1
    5d38:	2300      	movs	r3, #0
    5d3a:	481a      	ldr	r0, [pc, #104]	; (5da4 <spi_context_cs_configure_all+0xfc>)
    5d3c:	f006 f9ef 	bl	c11e <z_impl_z_log_msg_static_create>
    5d40:	46a5      	mov	sp, r4
			return -ENODEV;
    5d42:	f06f 0012 	mvn.w	r0, #18
    5d46:	e027      	b.n	5d98 <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    5d48:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5d4c:	e7bf      	b.n	5cce <spi_context_cs_configure_all+0x26>
    5d4e:	2102      	movs	r1, #2
    5d50:	7039      	strb	r1, [r7, #0]
    5d52:	e7d0      	b.n	5cf6 <spi_context_cs_configure_all+0x4e>
    5d54:	f100 0608 	add.w	r6, r0, #8
    5d58:	eb06 0c07 	add.w	ip, r6, r7
    5d5c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    5d60:	f801 cb01 	strb.w	ip, [r1], #1
    5d64:	3001      	adds	r0, #1
    5d66:	e7c5      	b.n	5cf4 <spi_context_cs_configure_all+0x4c>
    5d68:	f06f 051b 	mvn.w	r5, #27
    5d6c:	e7c6      	b.n	5cfc <spi_context_cs_configure_all+0x54>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    5d6e:	3408      	adds	r4, #8
    5d70:	68ab      	ldr	r3, [r5, #8]
    5d72:	68ea      	ldr	r2, [r5, #12]
    5d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5d78:	429c      	cmp	r4, r3
    5d7a:	d20c      	bcs.n	5d96 <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
    5d7c:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5d7e:	f008 feb6 	bl	eaee <z_device_is_ready>
    5d82:	2800      	cmp	r0, #0
    5d84:	d096      	beq.n	5cb4 <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
    5d86:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    5d8a:	4620      	mov	r0, r4
    5d8c:	f007 f983 	bl	d096 <gpio_pin_configure_dt>
		if (ret < 0) {
    5d90:	2800      	cmp	r0, #0
    5d92:	daec      	bge.n	5d6e <spi_context_cs_configure_all+0xc6>
    5d94:	e000      	b.n	5d98 <spi_context_cs_configure_all+0xf0>
	return 0;
    5d96:	2000      	movs	r0, #0
}
    5d98:	370c      	adds	r7, #12
    5d9a:	46bd      	mov	sp, r7
    5d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d9e:	bf00      	nop
    5da0:	0001061c 	.word	0x0001061c
    5da4:	0000f7d8 	.word	0x0000f7d8

00005da8 <common_init>:
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
{
    5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5daa:	b083      	sub	sp, #12
    5dac:	af00      	add	r7, sp, #0
	const struct driver_config *cfg = dev->config;
    5dae:	6844      	ldr	r4, [r0, #4]
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
    5db0:	68e0      	ldr	r0, [r4, #12]
    5db2:	f008 fe9c 	bl	eaee <z_device_is_ready>
    5db6:	b138      	cbz	r0, 5dc8 <common_init+0x20>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	bool on = cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON);
    5db8:	7d23      	ldrb	r3, [r4, #20]
	uint32_t delay_us = 0;

	if (on) {
    5dba:	f013 0f03 	tst.w	r3, #3
    5dbe:	d059      	beq.n	5e74 <common_init+0xcc>
		flags = GPIO_OUTPUT_ACTIVE;
		delay_us = cfg->startup_delay_us;
    5dc0:	6865      	ldr	r5, [r4, #4]
		flags = GPIO_OUTPUT_ACTIVE;
    5dc2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
    5dc6:	e058      	b.n	5e7a <common_init+0xd2>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    5dc8:	68e3      	ldr	r3, [r4, #12]
    5dca:	681e      	ldr	r6, [r3, #0]
    5dcc:	466c      	mov	r4, sp
    5dce:	2302      	movs	r3, #2
    5dd0:	713b      	strb	r3, [r7, #4]
    5dd2:	b088      	sub	sp, #32
    5dd4:	466b      	mov	r3, sp
    5dd6:	f113 0210 	adds.w	r2, r3, #16
    5dda:	d038      	beq.n	5e4e <common_init+0xa6>
    5ddc:	250d      	movs	r5, #13
    5dde:	b3ca      	cbz	r2, 5e54 <common_init+0xac>
    5de0:	4629      	mov	r1, r5
    5de2:	2d04      	cmp	r5, #4
    5de4:	dd01      	ble.n	5dea <common_init+0x42>
    5de6:	482c      	ldr	r0, [pc, #176]	; (5e98 <common_init+0xf0>)
    5de8:	6158      	str	r0, [r3, #20]
    5dea:	2002      	movs	r0, #2
    5dec:	7038      	strb	r0, [r7, #0]
    5dee:	2908      	cmp	r1, #8
    5df0:	dd00      	ble.n	5df4 <common_init+0x4c>
    5df2:	619e      	str	r6, [r3, #24]
    5df4:	f103 011c 	add.w	r1, r3, #28
    5df8:	2000      	movs	r0, #0
    5dfa:	b370      	cbz	r0, 5e5a <common_init+0xb2>
    5dfc:	2d0c      	cmp	r5, #12
    5dfe:	dd36      	ble.n	5e6e <common_init+0xc6>
    5e00:	250d      	movs	r5, #13
    5e02:	b142      	cbz	r2, 5e16 <common_init+0x6e>
    5e04:	2103      	movs	r1, #3
    5e06:	7139      	strb	r1, [r7, #4]
    5e08:	2100      	movs	r1, #0
    5e0a:	7179      	strb	r1, [r7, #5]
    5e0c:	71b9      	strb	r1, [r7, #6]
    5e0e:	2101      	movs	r1, #1
    5e10:	71f9      	strb	r1, [r7, #7]
    5e12:	6878      	ldr	r0, [r7, #4]
    5e14:	6118      	str	r0, [r3, #16]
    5e16:	2100      	movs	r1, #0
    5e18:	f36f 0100 	bfc	r1, #0, #1
    5e1c:	f36f 0141 	bfc	r1, #1, #1
    5e20:	f36f 0182 	bfc	r1, #2, #1
    5e24:	f36f 01c5 	bfc	r1, #3, #3
    5e28:	2301      	movs	r3, #1
    5e2a:	f363 1188 	bfi	r1, r3, #6, #3
    5e2e:	f3c5 0509 	ubfx	r5, r5, #0, #10
    5e32:	f365 2152 	bfi	r1, r5, #9, #10
    5e36:	f36f 41de 	bfc	r1, #19, #12
    5e3a:	f36f 71df 	bfc	r1, #31, #1
    5e3e:	2300      	movs	r3, #0
    5e40:	4816      	ldr	r0, [pc, #88]	; (5e9c <common_init+0xf4>)
    5e42:	f006 f96c 	bl	c11e <z_impl_z_log_msg_static_create>
    5e46:	46a5      	mov	sp, r4
		return -ENODEV;
    5e48:	f06f 0412 	mvn.w	r4, #18
    5e4c:	e01c      	b.n	5e88 <common_init+0xe0>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    5e4e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5e52:	e7c4      	b.n	5dde <common_init+0x36>
    5e54:	2102      	movs	r1, #2
    5e56:	7039      	strb	r1, [r7, #0]
    5e58:	e7d0      	b.n	5dfc <common_init+0x54>
    5e5a:	f100 0608 	add.w	r6, r0, #8
    5e5e:	eb06 0c07 	add.w	ip, r6, r7
    5e62:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    5e66:	f801 cb01 	strb.w	ip, [r1], #1
    5e6a:	3001      	adds	r0, #1
    5e6c:	e7c5      	b.n	5dfa <common_init+0x52>
    5e6e:	f06f 051b 	mvn.w	r5, #27
    5e72:	e7c6      	b.n	5e02 <common_init+0x5a>
	uint32_t delay_us = 0;
    5e74:	2500      	movs	r5, #0
	} else {
		flags = GPIO_OUTPUT_INACTIVE;
    5e76:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
	}

	int rc = gpio_pin_configure_dt(&cfg->enable, flags);
    5e7a:	f104 000c 	add.w	r0, r4, #12
    5e7e:	f007 fa6e 	bl	d35e <gpio_pin_configure_dt>

	if ((rc == 0) && (delay_us > 0)) {
    5e82:	4604      	mov	r4, r0
    5e84:	b900      	cbnz	r0, 5e88 <common_init+0xe0>
    5e86:	b91d      	cbnz	r5, 5e90 <common_init+0xe8>
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
    5e88:	4620      	mov	r0, r4
    5e8a:	370c      	adds	r7, #12
    5e8c:	46bd      	mov	sp, r7
    5e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_busy_wait(usec_to_wait);
    5e90:	4628      	mov	r0, r5
    5e92:	f009 f98b 	bl	f1ac <z_impl_k_busy_wait>
}
    5e96:	e7f7      	b.n	5e88 <common_init+0xe0>
    5e98:	000106c8 	.word	0x000106c8
    5e9c:	0000f7c8 	.word	0x0000f7c8

00005ea0 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    5ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ea2:	b083      	sub	sp, #12
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	4605      	mov	r5, r0
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    5ea8:	f7ff ff7e 	bl	5da8 <common_init>
    5eac:	4604      	mov	r4, r0
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    5eae:	682e      	ldr	r6, [r5, #0]
    5eb0:	2302      	movs	r3, #2
    5eb2:	713b      	strb	r3, [r7, #4]
    5eb4:	b08a      	sub	sp, #40	; 0x28
    5eb6:	466b      	mov	r3, sp
    5eb8:	f113 0210 	adds.w	r2, r3, #16
    5ebc:	d03d      	beq.n	5f3a <regulator_fixed_init_sync+0x9a>
    5ebe:	2511      	movs	r5, #17
    5ec0:	2a00      	cmp	r2, #0
    5ec2:	d03d      	beq.n	5f40 <regulator_fixed_init_sync+0xa0>
    5ec4:	4629      	mov	r1, r5
    5ec6:	2d04      	cmp	r5, #4
    5ec8:	dd01      	ble.n	5ece <regulator_fixed_init_sync+0x2e>
    5eca:	4825      	ldr	r0, [pc, #148]	; (5f60 <regulator_fixed_init_sync+0xc0>)
    5ecc:	6158      	str	r0, [r3, #20]
    5ece:	2002      	movs	r0, #2
    5ed0:	7038      	strb	r0, [r7, #0]
    5ed2:	2908      	cmp	r1, #8
    5ed4:	dd00      	ble.n	5ed8 <regulator_fixed_init_sync+0x38>
    5ed6:	619e      	str	r6, [r3, #24]
    5ed8:	290c      	cmp	r1, #12
    5eda:	dd00      	ble.n	5ede <regulator_fixed_init_sync+0x3e>
    5edc:	61dc      	str	r4, [r3, #28]
    5ede:	f103 0120 	add.w	r1, r3, #32
    5ee2:	2000      	movs	r0, #0
    5ee4:	b378      	cbz	r0, 5f46 <regulator_fixed_init_sync+0xa6>
    5ee6:	2d10      	cmp	r5, #16
    5ee8:	dd37      	ble.n	5f5a <regulator_fixed_init_sync+0xba>
    5eea:	f04f 0c11 	mov.w	ip, #17
    5eee:	b142      	cbz	r2, 5f02 <regulator_fixed_init_sync+0x62>
    5ef0:	2104      	movs	r1, #4
    5ef2:	7139      	strb	r1, [r7, #4]
    5ef4:	2100      	movs	r1, #0
    5ef6:	7179      	strb	r1, [r7, #5]
    5ef8:	71b9      	strb	r1, [r7, #6]
    5efa:	2101      	movs	r1, #1
    5efc:	71f9      	strb	r1, [r7, #7]
    5efe:	6878      	ldr	r0, [r7, #4]
    5f00:	6118      	str	r0, [r3, #16]
    5f02:	2100      	movs	r1, #0
    5f04:	f36f 0100 	bfc	r1, #0, #1
    5f08:	f36f 0141 	bfc	r1, #1, #1
    5f0c:	f36f 0182 	bfc	r1, #2, #1
    5f10:	f36f 01c5 	bfc	r1, #3, #3
    5f14:	2303      	movs	r3, #3
    5f16:	f363 1188 	bfi	r1, r3, #6, #3
    5f1a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    5f1e:	f36c 2152 	bfi	r1, ip, #9, #10
    5f22:	f36f 41de 	bfc	r1, #19, #12
    5f26:	f36f 71df 	bfc	r1, #31, #1
    5f2a:	2300      	movs	r3, #0
    5f2c:	480d      	ldr	r0, [pc, #52]	; (5f64 <regulator_fixed_init_sync+0xc4>)
    5f2e:	f006 f8f6 	bl	c11e <z_impl_z_log_msg_static_create>

	return rc;
}
    5f32:	4620      	mov	r0, r4
    5f34:	370c      	adds	r7, #12
    5f36:	46bd      	mov	sp, r7
    5f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("%s sync: %d", dev->name, rc);
    5f3a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5f3e:	e7bf      	b.n	5ec0 <regulator_fixed_init_sync+0x20>
    5f40:	2102      	movs	r1, #2
    5f42:	7039      	strb	r1, [r7, #0]
    5f44:	e7cf      	b.n	5ee6 <regulator_fixed_init_sync+0x46>
    5f46:	f100 0608 	add.w	r6, r0, #8
    5f4a:	eb06 0c07 	add.w	ip, r6, r7
    5f4e:	f81c cc08 	ldrb.w	ip, [ip, #-8]
    5f52:	f801 cb01 	strb.w	ip, [r1], #1
    5f56:	3001      	adds	r0, #1
    5f58:	e7c4      	b.n	5ee4 <regulator_fixed_init_sync+0x44>
    5f5a:	f06f 0c1b 	mvn.w	ip, #27
    5f5e:	e7c6      	b.n	5eee <regulator_fixed_init_sync+0x4e>
    5f60:	000106e0 	.word	0x000106e0
    5f64:	0000f7c8 	.word	0x0000f7c8

00005f68 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    5f68:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    5f6a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5f6c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    5f70:	d06f      	beq.n	6052 <baudrate_set+0xea>
    5f72:	d83a      	bhi.n	5fea <baudrate_set+0x82>
    5f74:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5f78:	d06e      	beq.n	6058 <baudrate_set+0xf0>
    5f7a:	d90a      	bls.n	5f92 <baudrate_set+0x2a>
    5f7c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5f80:	d075      	beq.n	606e <baudrate_set+0x106>
    5f82:	d924      	bls.n	5fce <baudrate_set+0x66>
    5f84:	f647 2312 	movw	r3, #31250	; 0x7a12
    5f88:	4299      	cmp	r1, r3
    5f8a:	d12b      	bne.n	5fe4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5f8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5f90:	e013      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    5f92:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5f96:	d061      	beq.n	605c <baudrate_set+0xf4>
    5f98:	d907      	bls.n	5faa <baudrate_set+0x42>
    5f9a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    5f9e:	d063      	beq.n	6068 <baudrate_set+0x100>
    5fa0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5fa4:	d110      	bne.n	5fc8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5fa6:	4b3c      	ldr	r3, [pc, #240]	; (6098 <baudrate_set+0x130>)
    5fa8:	e007      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    5faa:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    5fae:	d058      	beq.n	6062 <baudrate_set+0xfa>
    5fb0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5fb4:	d105      	bne.n	5fc2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5fb6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5fba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    5fbe:	2000      	movs	r0, #0
    5fc0:	4770      	bx	lr
	switch (baudrate) {
    5fc2:	f06f 0015 	mvn.w	r0, #21
    5fc6:	4770      	bx	lr
    5fc8:	f06f 0015 	mvn.w	r0, #21
    5fcc:	4770      	bx	lr
    5fce:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    5fd2:	d04e      	beq.n	6072 <baudrate_set+0x10a>
    5fd4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5fd8:	d101      	bne.n	5fde <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5fda:	4b30      	ldr	r3, [pc, #192]	; (609c <baudrate_set+0x134>)
    5fdc:	e7ed      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    5fde:	f06f 0015 	mvn.w	r0, #21
    5fe2:	4770      	bx	lr
    5fe4:	f06f 0015 	mvn.w	r0, #21
    5fe8:	4770      	bx	lr
    5fea:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    5fee:	d042      	beq.n	6076 <baudrate_set+0x10e>
    5ff0:	d909      	bls.n	6006 <baudrate_set+0x9e>
    5ff2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5ff6:	d046      	beq.n	6086 <baudrate_set+0x11e>
    5ff8:	d91f      	bls.n	603a <baudrate_set+0xd2>
    5ffa:	4b29      	ldr	r3, [pc, #164]	; (60a0 <baudrate_set+0x138>)
    5ffc:	4299      	cmp	r1, r3
    5ffe:	d148      	bne.n	6092 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6004:	e7d9      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    6006:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    600a:	d037      	beq.n	607c <baudrate_set+0x114>
    600c:	d905      	bls.n	601a <baudrate_set+0xb2>
    600e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    6012:	d10f      	bne.n	6034 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6014:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6018:	e7cf      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    601a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    601e:	4299      	cmp	r1, r3
    6020:	d02e      	beq.n	6080 <baudrate_set+0x118>
    6022:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    6026:	d102      	bne.n	602e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6028:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    602c:	e7c5      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    602e:	f06f 0015 	mvn.w	r0, #21
    6032:	4770      	bx	lr
    6034:	f06f 0015 	mvn.w	r0, #21
    6038:	4770      	bx	lr
    603a:	4b1a      	ldr	r3, [pc, #104]	; (60a4 <baudrate_set+0x13c>)
    603c:	4299      	cmp	r1, r3
    603e:	d025      	beq.n	608c <baudrate_set+0x124>
    6040:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    6044:	d102      	bne.n	604c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6046:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    604a:	e7b6      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    604c:	f06f 0015 	mvn.w	r0, #21
    6050:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6052:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6056:	e7b0      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6058:	4b13      	ldr	r3, [pc, #76]	; (60a8 <baudrate_set+0x140>)
    605a:	e7ae      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    605c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6060:	e7ab      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    6062:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6066:	e7a8      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6068:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    606c:	e7a5      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    606e:	4b0f      	ldr	r3, [pc, #60]	; (60ac <baudrate_set+0x144>)
    6070:	e7a3      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    6072:	4b0f      	ldr	r3, [pc, #60]	; (60b0 <baudrate_set+0x148>)
    6074:	e7a1      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6076:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    607a:	e79e      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    607c:	4b0d      	ldr	r3, [pc, #52]	; (60b4 <baudrate_set+0x14c>)
    607e:	e79c      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    6080:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6084:	e799      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6086:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    608a:	e796      	b.n	5fba <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    608c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6090:	e793      	b.n	5fba <baudrate_set+0x52>
	switch (baudrate) {
    6092:	f06f 0015 	mvn.w	r0, #21
}
    6096:	4770      	bx	lr
    6098:	0013b000 	.word	0x0013b000
    609c:	004ea000 	.word	0x004ea000
    60a0:	000f4240 	.word	0x000f4240
    60a4:	0003d090 	.word	0x0003d090
    60a8:	00275000 	.word	0x00275000
    60ac:	0075c000 	.word	0x0075c000
    60b0:	003af000 	.word	0x003af000
    60b4:	013a9000 	.word	0x013a9000

000060b8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    60b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ba:	4605      	mov	r5, r0
    60bc:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    60be:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    60c0:	f008 fd8a 	bl	ebd8 <k_is_in_isr>
    60c4:	b910      	cbnz	r0, 60cc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    60c6:	4b12      	ldr	r3, [pc, #72]	; (6110 <uarte_nrfx_poll_out+0x58>)
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	b983      	cbnz	r3, 60ee <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    60cc:	f04f 0320 	mov.w	r3, #32
    60d0:	f3ef 8411 	mrs	r4, BASEPRI
    60d4:	f383 8812 	msr	BASEPRI_MAX, r3
    60d8:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    60dc:	4628      	mov	r0, r5
    60de:	f007 fa5c 	bl	d59a <is_tx_ready>
    60e2:	b940      	cbnz	r0, 60f6 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    60e4:	f384 8811 	msr	BASEPRI, r4
    60e8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    60ec:	e7ee      	b.n	60cc <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    60ee:	4628      	mov	r0, r5
    60f0:	f007 fab8 	bl	d664 <wait_tx_ready>
    60f4:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    60f6:	693b      	ldr	r3, [r7, #16]
    60f8:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    60fa:	2201      	movs	r2, #1
    60fc:	6939      	ldr	r1, [r7, #16]
    60fe:	4628      	mov	r0, r5
    6100:	f007 fa65 	bl	d5ce <tx_start>
	__asm__ volatile(
    6104:	f384 8811 	msr	BASEPRI, r4
    6108:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    610e:	bf00      	nop
    6110:	20001d2c 	.word	0x20001d2c

00006114 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6114:	b530      	push	{r4, r5, lr}
    6116:	b089      	sub	sp, #36	; 0x24
    6118:	4605      	mov	r5, r0
    611a:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    611c:	f101 0018 	add.w	r0, r1, #24
    6120:	f001 f846 	bl	71b0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6124:	4b1d      	ldr	r3, [pc, #116]	; (619c <endtx_stoptx_ppi_init+0x88>)
    6126:	4298      	cmp	r0, r3
    6128:	d10f      	bne.n	614a <endtx_stoptx_ppi_init+0x36>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    612a:	7e23      	ldrb	r3, [r4, #24]
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    612c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6130:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    6134:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6138:	7e22      	ldrb	r2, [r4, #24]
    613a:	2301      	movs	r3, #1
    613c:	4093      	lsls	r3, r2
    613e:	4a18      	ldr	r2, [pc, #96]	; (61a0 <endtx_stoptx_ppi_init+0x8c>)
    6140:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6144:	2000      	movs	r0, #0
}
    6146:	b009      	add	sp, #36	; 0x24
    6148:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    614a:	4b16      	ldr	r3, [pc, #88]	; (61a4 <endtx_stoptx_ppi_init+0x90>)
    614c:	9307      	str	r3, [sp, #28]
    614e:	2302      	movs	r3, #2
    6150:	f88d 3004 	strb.w	r3, [sp, #4]
    6154:	2300      	movs	r3, #0
    6156:	f88d 3005 	strb.w	r3, [sp, #5]
    615a:	f88d 3006 	strb.w	r3, [sp, #6]
    615e:	f88d 3007 	strb.w	r3, [sp, #7]
    6162:	9a01      	ldr	r2, [sp, #4]
    6164:	9206      	str	r2, [sp, #24]
    6166:	4619      	mov	r1, r3
    6168:	f363 0100 	bfi	r1, r3, #0, #1
    616c:	f363 0141 	bfi	r1, r3, #1, #1
    6170:	f363 0182 	bfi	r1, r3, #2, #1
    6174:	f363 01c5 	bfi	r1, r3, #3, #3
    6178:	2201      	movs	r2, #1
    617a:	f362 1188 	bfi	r1, r2, #6, #3
    617e:	2208      	movs	r2, #8
    6180:	f362 2152 	bfi	r1, r2, #9, #10
    6184:	f363 41de 	bfi	r1, r3, #19, #12
    6188:	f363 71df 	bfi	r1, r3, #31, #1
    618c:	aa06      	add	r2, sp, #24
    618e:	4806      	ldr	r0, [pc, #24]	; (61a8 <endtx_stoptx_ppi_init+0x94>)
    6190:	f005 ffc5 	bl	c11e <z_impl_z_log_msg_static_create>
		return -EIO;
    6194:	f06f 0004 	mvn.w	r0, #4
    6198:	e7d5      	b.n	6146 <endtx_stoptx_ppi_init+0x32>
    619a:	bf00      	nop
    619c:	0bad0000 	.word	0x0bad0000
    61a0:	50017000 	.word	0x50017000
    61a4:	0001076c 	.word	0x0001076c
    61a8:	0000f7f0 	.word	0x0000f7f0

000061ac <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    61ac:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    61b0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    61b4:	4b01      	ldr	r3, [pc, #4]	; (61bc <set_comparator+0x10>)
    61b6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    61ba:	4770      	bx	lr
    61bc:	50015000 	.word	0x50015000

000061c0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    61c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    61c4:	4b01      	ldr	r3, [pc, #4]	; (61cc <get_comparator+0xc>)
    61c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    61ca:	4770      	bx	lr
    61cc:	50015000 	.word	0x50015000

000061d0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    61d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    61d4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    61d6:	4a02      	ldr	r2, [pc, #8]	; (61e0 <event_enable+0x10>)
    61d8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    61dc:	4770      	bx	lr
    61de:	bf00      	nop
    61e0:	50015000 	.word	0x50015000

000061e4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    61e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    61e8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    61ea:	4a02      	ldr	r2, [pc, #8]	; (61f4 <event_disable+0x10>)
    61ec:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    61f0:	4770      	bx	lr
    61f2:	bf00      	nop
    61f4:	50015000 	.word	0x50015000

000061f8 <counter>:
     return p_reg->COUNTER;
    61f8:	4b01      	ldr	r3, [pc, #4]	; (6200 <counter+0x8>)
    61fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    61fe:	4770      	bx	lr
    6200:	50015000 	.word	0x50015000

00006204 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6204:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6206:	2301      	movs	r3, #1
    6208:	4083      	lsls	r3, r0
    620a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    620e:	4a0c      	ldr	r2, [pc, #48]	; (6240 <compare_int_lock+0x3c>)
    6210:	e8d2 1fef 	ldaex	r1, [r2]
    6214:	ea01 0e0c 	and.w	lr, r1, ip
    6218:	e8c2 efe4 	stlex	r4, lr, [r2]
    621c:	2c00      	cmp	r4, #0
    621e:	d1f7      	bne.n	6210 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6224:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6226:	4807      	ldr	r0, [pc, #28]	; (6244 <compare_int_lock+0x40>)
    6228:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    622c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6230:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6234:	420b      	tst	r3, r1
}
    6236:	bf14      	ite	ne
    6238:	2001      	movne	r0, #1
    623a:	2000      	moveq	r0, #0
    623c:	bd10      	pop	{r4, pc}
    623e:	bf00      	nop
    6240:	20001538 	.word	0x20001538
    6244:	50015000 	.word	0x50015000

00006248 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6248:	b538      	push	{r3, r4, r5, lr}
    624a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    624c:	f007 fab5 	bl	d7ba <full_int_lock>
    6250:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6256:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6258:	4a14      	ldr	r2, [pc, #80]	; (62ac <channel_processing_check_and_clear+0x64>)
    625a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    625e:	4213      	tst	r3, r2
    6260:	d105      	bne.n	626e <channel_processing_check_and_clear+0x26>
	bool result = false;
    6262:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6264:	4628      	mov	r0, r5
    6266:	f007 fab1 	bl	d7cc <full_int_unlock>

	return result;
}
    626a:	4620      	mov	r0, r4
    626c:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    626e:	2301      	movs	r3, #1
    6270:	40a3      	lsls	r3, r4
    6272:	43db      	mvns	r3, r3
    6274:	4a0e      	ldr	r2, [pc, #56]	; (62b0 <channel_processing_check_and_clear+0x68>)
    6276:	e8d2 1fef 	ldaex	r1, [r2]
    627a:	ea01 0003 	and.w	r0, r1, r3
    627e:	e8c2 0fec 	stlex	ip, r0, [r2]
    6282:	f1bc 0f00 	cmp.w	ip, #0
    6286:	d1f6      	bne.n	6276 <channel_processing_check_and_clear+0x2e>
    6288:	b949      	cbnz	r1, 629e <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    628a:	f104 0350 	add.w	r3, r4, #80	; 0x50
    628e:	009b      	lsls	r3, r3, #2
    6290:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6292:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6296:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    629a:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    629c:	b123      	cbz	r3, 62a8 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    629e:	4620      	mov	r0, r4
    62a0:	f007 fa7c 	bl	d79c <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    62a4:	2401      	movs	r4, #1
    62a6:	e7dd      	b.n	6264 <channel_processing_check_and_clear+0x1c>
    62a8:	2400      	movs	r4, #0
    62aa:	e7db      	b.n	6264 <channel_processing_check_and_clear+0x1c>
    62ac:	50015000 	.word	0x50015000
    62b0:	20001530 	.word	0x20001530

000062b4 <compare_int_unlock>:
	if (key) {
    62b4:	b901      	cbnz	r1, 62b8 <compare_int_unlock+0x4>
}
    62b6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    62b8:	2301      	movs	r3, #1
    62ba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    62bc:	4a0d      	ldr	r2, [pc, #52]	; (62f4 <compare_int_unlock+0x40>)
    62be:	e8d2 cfef 	ldaex	ip, [r2]
    62c2:	ea4c 0c03 	orr.w	ip, ip, r3
    62c6:	e8c2 cfe1 	stlex	r1, ip, [r2]
    62ca:	2900      	cmp	r1, #0
    62cc:	d1f7      	bne.n	62be <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    62ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    62d2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    62d4:	4a08      	ldr	r2, [pc, #32]	; (62f8 <compare_int_unlock+0x44>)
    62d6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    62da:	4b08      	ldr	r3, [pc, #32]	; (62fc <compare_int_unlock+0x48>)
    62dc:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    62e0:	40c3      	lsrs	r3, r0
    62e2:	f013 0f01 	tst.w	r3, #1
    62e6:	d0e6      	beq.n	62b6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    62e8:	4b05      	ldr	r3, [pc, #20]	; (6300 <compare_int_unlock+0x4c>)
    62ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    62ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    62f2:	e7e0      	b.n	62b6 <compare_int_unlock+0x2>
    62f4:	20001538 	.word	0x20001538
    62f8:	50015000 	.word	0x50015000
    62fc:	20001530 	.word	0x20001530
    6300:	e000e100 	.word	0xe000e100

00006304 <sys_clock_timeout_handler>:
{
    6304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6308:	4607      	mov	r7, r0
    630a:	4614      	mov	r4, r2
    630c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    630e:	4610      	mov	r0, r2
    6310:	4619      	mov	r1, r3
    6312:	f007 fa4f 	bl	d7b4 <absolute_time_to_cc>
    6316:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6318:	4b15      	ldr	r3, [pc, #84]	; (6370 <sys_clock_timeout_handler+0x6c>)
    631a:	681a      	ldr	r2, [r3, #0]
    631c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    631e:	601c      	str	r4, [r3, #0]
    6320:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6322:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    632a:	d309      	bcc.n	6340 <sys_clock_timeout_handler+0x3c>
	return false;
    632c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    632e:	f004 f969 	bl	a604 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6332:	4638      	mov	r0, r7
    6334:	f7ff ff44 	bl	61c0 <get_comparator>
    6338:	42a8      	cmp	r0, r5
    633a:	d00e      	beq.n	635a <sys_clock_timeout_handler+0x56>
}
    633c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6340:	4b0c      	ldr	r3, [pc, #48]	; (6374 <sys_clock_timeout_handler+0x70>)
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	0a1a      	lsrs	r2, r3, #8
    6346:	061b      	lsls	r3, r3, #24
    6348:	eb15 0803 	adds.w	r8, r5, r3
    634c:	f142 0900 	adc.w	r9, r2, #0
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <sys_clock_timeout_handler+0x74>)
    6352:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    6356:	2401      	movs	r4, #1
    6358:	e7e9      	b.n	632e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    635a:	b11c      	cbz	r4, 6364 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    635c:	4638      	mov	r0, r7
    635e:	f7ff ff37 	bl	61d0 <event_enable>
}
    6362:	e7eb      	b.n	633c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6364:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6368:	4638      	mov	r0, r7
    636a:	f7ff ff1f 	bl	61ac <set_comparator>
    636e:	e7f5      	b.n	635c <sys_clock_timeout_handler+0x58>
    6370:	20000b88 	.word	0x20000b88
    6374:	2000153c 	.word	0x2000153c
    6378:	20000b90 	.word	0x20000b90

0000637c <z_nrf_rtc_timer_compare_evt_address_get>:
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    637c:	b2c3      	uxtb	r3, r0
    637e:	009b      	lsls	r3, r3, #2
}
    6380:	4801      	ldr	r0, [pc, #4]	; (6388 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    6382:	4418      	add	r0, r3
    6384:	4770      	bx	lr
    6386:	bf00      	nop
    6388:	50015140 	.word	0x50015140

0000638c <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    638c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6390:	4b01      	ldr	r3, [pc, #4]	; (6398 <z_nrf_rtc_timer_compare_read+0xc>)
    6392:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    6396:	4770      	bx	lr
    6398:	50015000 	.word	0x50015000

0000639c <z_nrf_rtc_timer_read>:
{
    639c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    639e:	4b0d      	ldr	r3, [pc, #52]	; (63d4 <z_nrf_rtc_timer_read+0x38>)
    63a0:	681c      	ldr	r4, [r3, #0]
    63a2:	0a25      	lsrs	r5, r4, #8
    63a4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    63a6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    63aa:	f7ff ff25 	bl	61f8 <counter>
    63ae:	4603      	mov	r3, r0
	val += cntr;
    63b0:	1900      	adds	r0, r0, r4
    63b2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    63b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    63ba:	d20a      	bcs.n	63d2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    63bc:	4b06      	ldr	r3, [pc, #24]	; (63d8 <z_nrf_rtc_timer_read+0x3c>)
    63be:	e9d3 2300 	ldrd	r2, r3, [r3]
    63c2:	4290      	cmp	r0, r2
    63c4:	eb71 0303 	sbcs.w	r3, r1, r3
    63c8:	d203      	bcs.n	63d2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    63ca:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    63ce:	f141 0100 	adc.w	r1, r1, #0
}
    63d2:	bd38      	pop	{r3, r4, r5, pc}
    63d4:	2000153c 	.word	0x2000153c
    63d8:	20000b90 	.word	0x20000b90

000063dc <compare_set_nolocks>:
{
    63dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63de:	4606      	mov	r6, r0
    63e0:	4614      	mov	r4, r2
    63e2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    63e4:	4610      	mov	r0, r2
    63e6:	4619      	mov	r1, r3
    63e8:	f007 f9e4 	bl	d7b4 <absolute_time_to_cc>
    63ec:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    63ee:	f7ff ffd5 	bl	639c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    63f2:	42a0      	cmp	r0, r4
    63f4:	eb71 0305 	sbcs.w	r3, r1, r5
    63f8:	d21d      	bcs.n	6436 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    63fa:	1a20      	subs	r0, r4, r0
    63fc:	eb65 0101 	sbc.w	r1, r5, r1
    6400:	4b19      	ldr	r3, [pc, #100]	; (6468 <compare_set_nolocks+0x8c>)
    6402:	4298      	cmp	r0, r3
    6404:	f171 0100 	sbcs.w	r1, r1, #0
    6408:	d22b      	bcs.n	6462 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    640a:	4b18      	ldr	r3, [pc, #96]	; (646c <compare_set_nolocks+0x90>)
    640c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6410:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6414:	42ab      	cmp	r3, r5
    6416:	bf08      	it	eq
    6418:	42a2      	cmpeq	r2, r4
    641a:	d016      	beq.n	644a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    641c:	4639      	mov	r1, r7
    641e:	4630      	mov	r0, r6
    6420:	f007 f9d9 	bl	d7d6 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6424:	4639      	mov	r1, r7
    6426:	f007 f9b5 	bl	d794 <counter_sub>
    642a:	1900      	adds	r0, r0, r4
    642c:	f145 0300 	adc.w	r3, r5, #0
    6430:	4604      	mov	r4, r0
    6432:	461d      	mov	r5, r3
    6434:	e009      	b.n	644a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    6436:	2301      	movs	r3, #1
    6438:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    643a:	4a0d      	ldr	r2, [pc, #52]	; (6470 <compare_set_nolocks+0x94>)
    643c:	e8d2 0fef 	ldaex	r0, [r2]
    6440:	4318      	orrs	r0, r3
    6442:	e8c2 0fe1 	stlex	r1, r0, [r2]
    6446:	2900      	cmp	r1, #0
    6448:	d1f8      	bne.n	643c <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    644a:	4b08      	ldr	r3, [pc, #32]	; (646c <compare_set_nolocks+0x90>)
    644c:	0132      	lsls	r2, r6, #4
    644e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6452:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6456:	9906      	ldr	r1, [sp, #24]
    6458:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    645a:	9b07      	ldr	r3, [sp, #28]
    645c:	6073      	str	r3, [r6, #4]
	return ret;
    645e:	2000      	movs	r0, #0
}
    6460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    6462:	f06f 0015 	mvn.w	r0, #21
    6466:	e7fb      	b.n	6460 <compare_set_nolocks+0x84>
    6468:	01000001 	.word	0x01000001
    646c:	20000b68 	.word	0x20000b68
    6470:	20001530 	.word	0x20001530

00006474 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6474:	b530      	push	{r4, r5, lr}
    6476:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    6478:	2300      	movs	r3, #0
    647a:	4a1f      	ldr	r2, [pc, #124]	; (64f8 <sys_clock_driver_init+0x84>)
    647c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6480:	e00f      	b.n	64a2 <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6482:	4a1e      	ldr	r2, [pc, #120]	; (64fc <sys_clock_driver_init+0x88>)
    6484:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    648c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6490:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6498:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    649a:	4917      	ldr	r1, [pc, #92]	; (64f8 <sys_clock_driver_init+0x84>)
    649c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    64a0:	3301      	adds	r3, #1
    64a2:	2b01      	cmp	r3, #1
    64a4:	dded      	ble.n	6482 <sys_clock_driver_init+0xe>
    64a6:	4c14      	ldr	r4, [pc, #80]	; (64f8 <sys_clock_driver_init+0x84>)
    64a8:	2502      	movs	r5, #2
    64aa:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64ae:	4b14      	ldr	r3, [pc, #80]	; (6500 <sys_clock_driver_init+0x8c>)
    64b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    64b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    64b8:	2200      	movs	r2, #0
    64ba:	2101      	movs	r1, #1
    64bc:	2015      	movs	r0, #21
    64be:	f006 fa04 	bl	c8ca <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    64c2:	2015      	movs	r0, #21
    64c4:	f006 f9f7 	bl	c8b6 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    64c8:	2301      	movs	r3, #1
    64ca:	60a3      	str	r3, [r4, #8]
    64cc:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    64ce:	4b0d      	ldr	r3, [pc, #52]	; (6504 <sys_clock_driver_init+0x90>)
    64d0:	2203      	movs	r2, #3
    64d2:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    64d4:	4b0c      	ldr	r3, [pc, #48]	; (6508 <sys_clock_driver_init+0x94>)
    64d6:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    64d8:	2400      	movs	r4, #0
    64da:	9401      	str	r4, [sp, #4]
    64dc:	4b0b      	ldr	r3, [pc, #44]	; (650c <sys_clock_driver_init+0x98>)
    64de:	9300      	str	r3, [sp, #0]
    64e0:	4a0b      	ldr	r2, [pc, #44]	; (6510 <sys_clock_driver_init+0x9c>)
    64e2:	2300      	movs	r3, #0
    64e4:	4620      	mov	r0, r4
    64e6:	f007 f9bc 	bl	d862 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    64ea:	4628      	mov	r0, r5
    64ec:	f7fe fba6 	bl	4c3c <z_nrf_clock_control_lf_on>

	return 0;
}
    64f0:	4620      	mov	r0, r4
    64f2:	b003      	add	sp, #12
    64f4:	bd30      	pop	{r4, r5, pc}
    64f6:	bf00      	nop
    64f8:	50015000 	.word	0x50015000
    64fc:	20000b68 	.word	0x20000b68
    6500:	e000e100 	.word	0xe000e100
    6504:	20001538 	.word	0x20001538
    6508:	20001534 	.word	0x20001534
    650c:	00006305 	.word	0x00006305
    6510:	007fffff 	.word	0x007fffff

00006514 <process_channel>:
{
    6514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6518:	b082      	sub	sp, #8
    651a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    651c:	f7ff fe94 	bl	6248 <channel_processing_check_and_clear>
    6520:	b910      	cbnz	r0, 6528 <process_channel+0x14>
}
    6522:	b002      	add	sp, #8
    6524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    6528:	f7ff ff38 	bl	639c <z_nrf_rtc_timer_read>
    652c:	4682      	mov	sl, r0
    652e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    6530:	f007 f943 	bl	d7ba <full_int_lock>
    6534:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    6536:	4b13      	ldr	r3, [pc, #76]	; (6584 <process_channel+0x70>)
    6538:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    653c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    6540:	45c2      	cmp	sl, r8
    6542:	eb75 0509 	sbcs.w	r5, r5, r9
    6546:	d20b      	bcs.n	6560 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6548:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    654a:	4630      	mov	r0, r6
    654c:	f007 f93e 	bl	d7cc <full_int_unlock>
		if (handler) {
    6550:	2d00      	cmp	r5, #0
    6552:	d0e6      	beq.n	6522 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6554:	9700      	str	r7, [sp, #0]
    6556:	4642      	mov	r2, r8
    6558:	464b      	mov	r3, r9
    655a:	4620      	mov	r0, r4
    655c:	47a8      	blx	r5
}
    655e:	e7e0      	b.n	6522 <process_channel+0xe>
			handler = cc_data[chan].callback;
    6560:	4a08      	ldr	r2, [pc, #32]	; (6584 <process_channel+0x70>)
    6562:	0123      	lsls	r3, r4, #4
    6564:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6568:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    656a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    656c:	2000      	movs	r0, #0
    656e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6578:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    657c:	4620      	mov	r0, r4
    657e:	f7ff fe31 	bl	61e4 <event_disable>
    6582:	e7e2      	b.n	654a <process_channel+0x36>
    6584:	20000b68 	.word	0x20000b68

00006588 <rtc_nrf_isr>:
{
    6588:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    658a:	4b0e      	ldr	r3, [pc, #56]	; (65c4 <rtc_nrf_isr+0x3c>)
    658c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6590:	f013 0f02 	tst.w	r3, #2
    6594:	d00d      	beq.n	65b2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6596:	4b0b      	ldr	r3, [pc, #44]	; (65c4 <rtc_nrf_isr+0x3c>)
    6598:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    659c:	b14b      	cbz	r3, 65b2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    659e:	4b09      	ldr	r3, [pc, #36]	; (65c4 <rtc_nrf_isr+0x3c>)
    65a0:	2200      	movs	r2, #0
    65a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    65a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    65aa:	4a07      	ldr	r2, [pc, #28]	; (65c8 <rtc_nrf_isr+0x40>)
    65ac:	6813      	ldr	r3, [r2, #0]
    65ae:	3301      	adds	r3, #1
    65b0:	6013      	str	r3, [r2, #0]
{
    65b2:	2400      	movs	r4, #0
    65b4:	e003      	b.n	65be <rtc_nrf_isr+0x36>
		process_channel(chan);
    65b6:	4620      	mov	r0, r4
    65b8:	f7ff ffac 	bl	6514 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    65bc:	3401      	adds	r4, #1
    65be:	2c01      	cmp	r4, #1
    65c0:	ddf9      	ble.n	65b6 <rtc_nrf_isr+0x2e>
}
    65c2:	bd10      	pop	{r4, pc}
    65c4:	50015000 	.word	0x50015000
    65c8:	2000153c 	.word	0x2000153c

000065cc <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    65cc:	4b12      	ldr	r3, [pc, #72]	; (6618 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    65ce:	6818      	ldr	r0, [r3, #0]
    65d0:	b1f0      	cbz	r0, 6610 <z_nrf_rtc_timer_chan_alloc+0x44>
{
    65d2:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    65d4:	fab0 f080 	clz	r0, r0
    65d8:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    65dc:	2301      	movs	r3, #1
    65de:	4083      	lsls	r3, r0
    65e0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    65e2:	490d      	ldr	r1, [pc, #52]	; (6618 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    65e4:	e8d1 2fef 	ldaex	r2, [r1]
    65e8:	ea02 0c03 	and.w	ip, r2, r3
    65ec:	e8c1 cfee 	stlex	lr, ip, [r1]
    65f0:	f1be 0f00 	cmp.w	lr, #0
    65f4:	d1f6      	bne.n	65e4 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    65f6:	fa22 f300 	lsr.w	r3, r2, r0
    65fa:	f013 0f01 	tst.w	r3, #1
    65fe:	d105      	bne.n	660c <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    6600:	4b05      	ldr	r3, [pc, #20]	; (6618 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    6602:	6818      	ldr	r0, [r3, #0]
    6604:	2800      	cmp	r0, #0
    6606:	d1e5      	bne.n	65d4 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
    6608:	f06f 000b 	mvn.w	r0, #11
}
    660c:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
    6610:	f06f 000b 	mvn.w	r0, #11
}
    6614:	4770      	bx	lr
    6616:	bf00      	nop
    6618:	20001534 	.word	0x20001534

0000661c <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    661c:	2301      	movs	r3, #1
    661e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6620:	4a04      	ldr	r2, [pc, #16]	; (6634 <z_nrf_rtc_timer_chan_free+0x18>)
    6622:	e8d2 0fef 	ldaex	r0, [r2]
    6626:	4318      	orrs	r0, r3
    6628:	e8c2 0fe1 	stlex	r1, r0, [r2]
    662c:	2900      	cmp	r1, #0
    662e:	d1f8      	bne.n	6622 <z_nrf_rtc_timer_chan_free+0x6>
}
    6630:	4770      	bx	lr
    6632:	bf00      	nop
    6634:	20001534 	.word	0x20001534

00006638 <sys_clock_set_timeout>:
{
    6638:	b510      	push	{r4, lr}
    663a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    663c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6640:	d006      	beq.n	6650 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6642:	2801      	cmp	r0, #1
    6644:	dd06      	ble.n	6654 <sys_clock_set_timeout+0x1c>
    6646:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    664a:	da05      	bge.n	6658 <sys_clock_set_timeout+0x20>
    664c:	1e44      	subs	r4, r0, #1
    664e:	e004      	b.n	665a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6650:	480f      	ldr	r0, [pc, #60]	; (6690 <sys_clock_set_timeout+0x58>)
    6652:	e7f8      	b.n	6646 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6654:	2400      	movs	r4, #0
    6656:	e000      	b.n	665a <sys_clock_set_timeout+0x22>
    6658:	4c0d      	ldr	r4, [pc, #52]	; (6690 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    665a:	f7ff fe9f 	bl	639c <z_nrf_rtc_timer_read>
    665e:	4b0d      	ldr	r3, [pc, #52]	; (6694 <sys_clock_set_timeout+0x5c>)
    6660:	681a      	ldr	r2, [r3, #0]
    6662:	685b      	ldr	r3, [r3, #4]
    6664:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    6666:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    666a:	d300      	bcc.n	666e <sys_clock_set_timeout+0x36>
		ticks = 0;
    666c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    666e:	4420      	add	r0, r4
    6670:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    6672:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6676:	d300      	bcc.n	667a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    6678:	4905      	ldr	r1, [pc, #20]	; (6690 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    667a:	2000      	movs	r0, #0
    667c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    667e:	9001      	str	r0, [sp, #4]
    6680:	4905      	ldr	r1, [pc, #20]	; (6698 <sys_clock_set_timeout+0x60>)
    6682:	9100      	str	r1, [sp, #0]
    6684:	f143 0300 	adc.w	r3, r3, #0
    6688:	f007 f8eb 	bl	d862 <compare_set>
}
    668c:	b002      	add	sp, #8
    668e:	bd10      	pop	{r4, pc}
    6690:	007fffff 	.word	0x007fffff
    6694:	20000b88 	.word	0x20000b88
    6698:	00006305 	.word	0x00006305

0000669c <sys_clock_elapsed>:
{
    669c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    669e:	f7ff fe7d 	bl	639c <z_nrf_rtc_timer_read>
    66a2:	4b02      	ldr	r3, [pc, #8]	; (66ac <sys_clock_elapsed+0x10>)
    66a4:	681b      	ldr	r3, [r3, #0]
}
    66a6:	1ac0      	subs	r0, r0, r3
    66a8:	bd08      	pop	{r3, pc}
    66aa:	bf00      	nop
    66ac:	20000b88 	.word	0x20000b88

000066b0 <nrf_gpio_cfg>:
{
    66b0:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    66b2:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    66b6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66b8:	2801      	cmp	r0, #1
    66ba:	d018      	beq.n	66ee <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    66bc:	4d0d      	ldr	r5, [pc, #52]	; (66f4 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    66be:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    66c2:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    66c6:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    66ca:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    66ce:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    66d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    66d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    66da:	f89d 200c 	ldrb.w	r2, [sp, #12]
    66de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    66e2:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    66e6:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    66ea:	bc30      	pop	{r4, r5}
    66ec:	4770      	bx	lr
        case 1: return NRF_P1;
    66ee:	4d02      	ldr	r5, [pc, #8]	; (66f8 <nrf_gpio_cfg+0x48>)
    66f0:	e7e5      	b.n	66be <nrf_gpio_cfg+0xe>
    66f2:	bf00      	nop
    66f4:	50842500 	.word	0x50842500
    66f8:	50842800 	.word	0x50842800

000066fc <nrf_gpio_pin_write>:
    if (value == 0)
    66fc:	b959      	cbnz	r1, 6716 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    66fe:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    6702:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6704:	2801      	cmp	r0, #1
    6706:	d004      	beq.n	6712 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    6708:	4a09      	ldr	r2, [pc, #36]	; (6730 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    670a:	2301      	movs	r3, #1
    670c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    670e:	60d3      	str	r3, [r2, #12]
}
    6710:	4770      	bx	lr
        case 1: return NRF_P1;
    6712:	4a08      	ldr	r2, [pc, #32]	; (6734 <nrf_gpio_pin_write+0x38>)
    6714:	e7f9      	b.n	670a <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    6716:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    671a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    671c:	2801      	cmp	r0, #1
    671e:	d004      	beq.n	672a <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    6720:	4a03      	ldr	r2, [pc, #12]	; (6730 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6722:	2301      	movs	r3, #1
    6724:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    6726:	6093      	str	r3, [r2, #8]
}
    6728:	4770      	bx	lr
        case 1: return NRF_P1;
    672a:	4a02      	ldr	r2, [pc, #8]	; (6734 <nrf_gpio_pin_write+0x38>)
    672c:	e7f9      	b.n	6722 <nrf_gpio_pin_write+0x26>
    672e:	bf00      	nop
    6730:	50842500 	.word	0x50842500
    6734:	50842800 	.word	0x50842800

00006738 <pinctrl_configure_pins>:
		     NRF_GPIO_PIN_NOSENSE);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    673c:	4605      	mov	r5, r0
    673e:	460f      	mov	r7, r1
    6740:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6742:	2400      	movs	r4, #0
    6744:	e016      	b.n	6774 <pinctrl_configure_pins+0x3c>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    674a:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    674e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    6752:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6756:	f012 0f20 	tst.w	r2, #32
    675a:	d161      	bne.n	6820 <pinctrl_configure_pins+0xe8>
        case 0: return NRF_P0;
    675c:	4ac3      	ldr	r2, [pc, #780]	; (6a6c <pinctrl_configure_pins+0x334>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    675e:	2101      	movs	r1, #1
    6760:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    6764:	6093      	str	r3, [r2, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6766:	4633      	mov	r3, r6
    6768:	460a      	mov	r2, r1
    676a:	5828      	ldr	r0, [r5, r0]
    676c:	f007 f8bb 	bl	d8e6 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6770:	3401      	adds	r4, #1
    6772:	b2e4      	uxtb	r4, r4
    6774:	42bc      	cmp	r4, r7
    6776:	f080 8173 	bcs.w	6a60 <pinctrl_configure_pins+0x328>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    677a:	00a0      	lsls	r0, r4, #2
    677c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6780:	f3c3 2603 	ubfx	r6, r3, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    6784:	0c1a      	lsrs	r2, r3, #16
    6786:	2a22      	cmp	r2, #34	; 0x22
    6788:	f200 816c 	bhi.w	6a64 <pinctrl_configure_pins+0x32c>
    678c:	a101      	add	r1, pc, #4	; (adr r1, 6794 <pinctrl_configure_pins+0x5c>)
    678e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6792:	bf00      	nop
    6794:	00006747 	.word	0x00006747
    6798:	00006825 	.word	0x00006825
    679c:	0000683d 	.word	0x0000683d
    67a0:	0000686d 	.word	0x0000686d
    67a4:	00006885 	.word	0x00006885
    67a8:	000068b5 	.word	0x000068b5
    67ac:	000068e5 	.word	0x000068e5
    67b0:	00006a65 	.word	0x00006a65
    67b4:	00006a65 	.word	0x00006a65
    67b8:	00006a65 	.word	0x00006a65
    67bc:	00006a65 	.word	0x00006a65
    67c0:	000068fd 	.word	0x000068fd
    67c4:	00006917 	.word	0x00006917
    67c8:	00006a65 	.word	0x00006a65
    67cc:	00006a65 	.word	0x00006a65
    67d0:	00006a65 	.word	0x00006a65
    67d4:	00006a65 	.word	0x00006a65
    67d8:	00006a65 	.word	0x00006a65
    67dc:	00006a65 	.word	0x00006a65
    67e0:	00006a65 	.word	0x00006a65
    67e4:	00006a65 	.word	0x00006a65
    67e8:	00006a65 	.word	0x00006a65
    67ec:	00006931 	.word	0x00006931
    67f0:	00006959 	.word	0x00006959
    67f4:	00006981 	.word	0x00006981
    67f8:	000069a9 	.word	0x000069a9
    67fc:	00006a65 	.word	0x00006a65
    6800:	00006a65 	.word	0x00006a65
    6804:	00006a65 	.word	0x00006a65
    6808:	000069d1 	.word	0x000069d1
    680c:	000069e9 	.word	0x000069e9
    6810:	00006a01 	.word	0x00006a01
    6814:	00006a19 	.word	0x00006a19
    6818:	00006a31 	.word	0x00006a31
    681c:	00006a49 	.word	0x00006a49
        case 1: return NRF_P1;
    6820:	4a93      	ldr	r2, [pc, #588]	; (6a70 <pinctrl_configure_pins+0x338>)
    6822:	e79c      	b.n	675e <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6828:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    682c:	4633      	mov	r3, r6
    682e:	2200      	movs	r2, #0
    6830:	4611      	mov	r1, r2
    6832:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6836:	f007 f856 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    683a:	e799      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6840:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    6848:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    684c:	f012 0f20 	tst.w	r2, #32
    6850:	d10a      	bne.n	6868 <pinctrl_configure_pins+0x130>
        case 0: return NRF_P0;
    6852:	4a86      	ldr	r2, [pc, #536]	; (6a6c <pinctrl_configure_pins+0x334>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6854:	2101      	movs	r1, #1
    6856:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
    685a:	6093      	str	r3, [r2, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    685c:	4633      	mov	r3, r6
    685e:	460a      	mov	r2, r1
    6860:	5828      	ldr	r0, [r5, r0]
    6862:	f007 f840 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6866:	e783      	b.n	6770 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    6868:	4a81      	ldr	r2, [pc, #516]	; (6a70 <pinctrl_configure_pins+0x338>)
    686a:	e7f3      	b.n	6854 <pinctrl_configure_pins+0x11c>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    686c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6870:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6874:	4633      	mov	r3, r6
    6876:	2200      	movs	r2, #0
    6878:	4611      	mov	r1, r2
    687a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    687e:	f007 f832 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    6882:	e775      	b.n	6770 <pinctrl_configure_pins+0x38>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6888:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    688c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    6890:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6894:	f012 0f20 	tst.w	r2, #32
    6898:	d10a      	bne.n	68b0 <pinctrl_configure_pins+0x178>
        case 0: return NRF_P0;
    689a:	4a74      	ldr	r2, [pc, #464]	; (6a6c <pinctrl_configure_pins+0x334>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    689c:	2101      	movs	r1, #1
    689e:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    68a2:	60d3      	str	r3, [r2, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    68a4:	4633      	mov	r3, r6
    68a6:	2200      	movs	r2, #0
    68a8:	5828      	ldr	r0, [r5, r0]
    68aa:	f007 f81c 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    68ae:	e75f      	b.n	6770 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    68b0:	4a6f      	ldr	r2, [pc, #444]	; (6a70 <pinctrl_configure_pins+0x338>)
    68b2:	e7f3      	b.n	689c <pinctrl_configure_pins+0x164>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    68b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68b8:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    68bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    68c0:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68c4:	f012 0f20 	tst.w	r2, #32
    68c8:	d10a      	bne.n	68e0 <pinctrl_configure_pins+0x1a8>
        case 0: return NRF_P0;
    68ca:	4a68      	ldr	r2, [pc, #416]	; (6a6c <pinctrl_configure_pins+0x334>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    68cc:	2101      	movs	r1, #1
    68ce:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
    68d2:	60d3      	str	r3, [r2, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    68d4:	4633      	mov	r3, r6
    68d6:	460a      	mov	r2, r1
    68d8:	5828      	ldr	r0, [r5, r0]
    68da:	f007 f804 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    68de:	e747      	b.n	6770 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
    68e0:	4a63      	ldr	r2, [pc, #396]	; (6a70 <pinctrl_configure_pins+0x338>)
    68e2:	e7f3      	b.n	68cc <pinctrl_configure_pins+0x194>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    68e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68e8:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    68ec:	4633      	mov	r3, r6
    68ee:	2200      	movs	r2, #0
    68f0:	4611      	mov	r1, r2
    68f2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    68f6:	f006 fff6 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    68fa:	e739      	b.n	6770 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    68fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6900:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    6904:	b906      	cbnz	r6, 6908 <pinctrl_configure_pins+0x1d0>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    6906:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6908:	4633      	mov	r3, r6
    690a:	2200      	movs	r2, #0
    690c:	4611      	mov	r1, r2
    690e:	5828      	ldr	r0, [r5, r0]
    6910:	f006 ffe9 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    6914:	e72c      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    691a:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    691e:	b906      	cbnz	r6, 6922 <pinctrl_configure_pins+0x1ea>
				drive = NRF_DRIVE_S0D1;
    6920:	2606      	movs	r6, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6922:	4633      	mov	r3, r6
    6924:	2200      	movs	r2, #0
    6926:	4611      	mov	r1, r2
    6928:	5828      	ldr	r0, [r5, r0]
    692a:	f006 ffdc 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    692e:	e71f      	b.n	6770 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6934:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6938:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    693c:	f3c0 3140 	ubfx	r1, r0, #13, #1
    6940:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6944:	f7ff feda 	bl	66fc <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6948:	4633      	mov	r3, r6
    694a:	2201      	movs	r2, #1
    694c:	4611      	mov	r1, r2
    694e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6952:	f006 ffc8 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6956:	e70b      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    695c:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6960:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6964:	f3c0 3140 	ubfx	r1, r0, #13, #1
    6968:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    696c:	f7ff fec6 	bl	66fc <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6970:	4633      	mov	r3, r6
    6972:	2201      	movs	r2, #1
    6974:	4611      	mov	r1, r2
    6976:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    697a:	f006 ffb4 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    697e:	e6f7      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6984:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6988:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    698c:	f3c0 3140 	ubfx	r1, r0, #13, #1
    6990:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6994:	f7ff feb2 	bl	66fc <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6998:	4633      	mov	r3, r6
    699a:	2201      	movs	r2, #1
    699c:	4611      	mov	r1, r2
    699e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    69a2:	f006 ffa0 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    69a6:	e6e3      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    69a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69ac:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    69b0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    69b4:	f3c0 3140 	ubfx	r1, r0, #13, #1
    69b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    69bc:	f7ff fe9e 	bl	66fc <nrf_gpio_pin_write>
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    69c0:	4633      	mov	r3, r6
    69c2:	2201      	movs	r2, #1
    69c4:	4611      	mov	r1, r2
    69c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    69ca:	f006 ff8c 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    69ce:	e6cf      	b.n	6770 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    69d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69d4:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    69d8:	4633      	mov	r3, r6
    69da:	2201      	movs	r2, #1
    69dc:	2100      	movs	r1, #0
    69de:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    69e2:	f006 ff80 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    69e6:	e6c3      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    69e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69ec:	f8c8 3528 	str.w	r3, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    69f0:	4633      	mov	r3, r6
    69f2:	2201      	movs	r2, #1
    69f4:	2100      	movs	r1, #0
    69f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    69fa:	f006 ff74 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    69fe:	e6b7      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    6a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a04:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a08:	4633      	mov	r3, r6
    6a0a:	2201      	movs	r2, #1
    6a0c:	2100      	movs	r1, #0
    6a0e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6a12:	f006 ff68 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6a16:	e6ab      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a1c:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a20:	4633      	mov	r3, r6
    6a22:	2201      	movs	r2, #1
    6a24:	2100      	movs	r1, #0
    6a26:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6a2a:	f006 ff5c 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6a2e:	e69f      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a34:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a38:	4633      	mov	r3, r6
    6a3a:	2201      	movs	r2, #1
    6a3c:	2100      	movs	r1, #0
    6a3e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6a42:	f006 ff50 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6a46:	e693      	b.n	6770 <pinctrl_configure_pins+0x38>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    6a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a4c:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6a50:	4633      	mov	r3, r6
    6a52:	2201      	movs	r2, #1
    6a54:	2100      	movs	r1, #0
    6a56:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6a5a:	f006 ff44 	bl	d8e6 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    6a5e:	e687      	b.n	6770 <pinctrl_configure_pins+0x38>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6a60:	2000      	movs	r0, #0
    6a62:	e001      	b.n	6a68 <pinctrl_configure_pins+0x330>
		switch (NRF_GET_FUN(pins[i])) {
    6a64:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a6c:	50842500 	.word	0x50842500
    6a70:	50842800 	.word	0x50842800

00006a74 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
    6a74:	b530      	push	{r4, r5, lr}
    6a76:	b089      	sub	sp, #36	; 0x24
    6a78:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    6a7a:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
    6a7c:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    6a7e:	290f      	cmp	r1, #15
    6a80:	d806      	bhi.n	6a90 <mbox_nrf_set_enabled+0x1c>
    6a82:	681b      	ldr	r3, [r3, #0]
    6a84:	40cb      	lsrs	r3, r1
    6a86:	f013 0f01 	tst.w	r3, #1
    6a8a:	d11d      	bne.n	6ac8 <mbox_nrf_set_enabled+0x54>
    6a8c:	2300      	movs	r3, #0
    6a8e:	e000      	b.n	6a92 <mbox_nrf_set_enabled+0x1e>
    6a90:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
    6a92:	2b00      	cmp	r3, #0
    6a94:	d061      	beq.n	6b5a <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    6a96:	b9ca      	cbnz	r2, 6acc <mbox_nrf_set_enabled+0x58>
    6a98:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6a9c:	40e3      	lsrs	r3, r4
    6a9e:	f013 0f01 	tst.w	r3, #1
    6aa2:	d05d      	beq.n	6b60 <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
    6aa4:	b2e0      	uxtb	r0, r4
    6aa6:	f001 f84d 	bl	7b44 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
    6aaa:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6aae:	2201      	movs	r2, #1
    6ab0:	40a2      	lsls	r2, r4
    6ab2:	ea23 0302 	bic.w	r3, r3, r2
    6ab6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
    6aba:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d046      	beq.n	6b50 <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
    6ac2:	2000      	movs	r0, #0
}
    6ac4:	b009      	add	sp, #36	; 0x24
    6ac6:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    6ac8:	2301      	movs	r3, #1
    6aca:	e7e2      	b.n	6a92 <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    6acc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6ad0:	40e3      	lsrs	r3, r4
    6ad2:	f013 0f01 	tst.w	r3, #1
    6ad6:	d146      	bne.n	6b66 <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
    6ad8:	2a00      	cmp	r2, #0
    6ada:	d0e3      	beq.n	6aa4 <mbox_nrf_set_enabled+0x30>
    6adc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6ae0:	b16b      	cbz	r3, 6afe <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
    6ae2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6ae6:	b37b      	cbz	r3, 6b48 <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
    6ae8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    6aec:	2201      	movs	r2, #1
    6aee:	40a2      	lsls	r2, r4
    6af0:	4313      	orrs	r3, r2
    6af2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    6af6:	b2e0      	uxtb	r0, r4
    6af8:	f001 f81c 	bl	7b34 <nrfx_ipc_receive_event_enable>
    6afc:	e7dd      	b.n	6aba <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
    6afe:	4b1b      	ldr	r3, [pc, #108]	; (6b6c <mbox_nrf_set_enabled+0xf8>)
    6b00:	9307      	str	r3, [sp, #28]
    6b02:	2202      	movs	r2, #2
    6b04:	f88d 2004 	strb.w	r2, [sp, #4]
    6b08:	2300      	movs	r3, #0
    6b0a:	f88d 3005 	strb.w	r3, [sp, #5]
    6b0e:	f88d 3006 	strb.w	r3, [sp, #6]
    6b12:	f88d 3007 	strb.w	r3, [sp, #7]
    6b16:	9901      	ldr	r1, [sp, #4]
    6b18:	9106      	str	r1, [sp, #24]
    6b1a:	4619      	mov	r1, r3
    6b1c:	f363 0100 	bfi	r1, r3, #0, #1
    6b20:	f363 0141 	bfi	r1, r3, #1, #1
    6b24:	f363 0182 	bfi	r1, r3, #2, #1
    6b28:	f363 01c5 	bfi	r1, r3, #3, #3
    6b2c:	f362 1188 	bfi	r1, r2, #6, #3
    6b30:	2208      	movs	r2, #8
    6b32:	f362 2152 	bfi	r1, r2, #9, #10
    6b36:	f363 41de 	bfi	r1, r3, #19, #12
    6b3a:	f363 71df 	bfi	r1, r3, #31, #1
    6b3e:	aa06      	add	r2, sp, #24
    6b40:	480b      	ldr	r0, [pc, #44]	; (6b70 <mbox_nrf_set_enabled+0xfc>)
    6b42:	f005 faec 	bl	c11e <z_impl_z_log_msg_static_create>
    6b46:	e7cc      	b.n	6ae2 <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
    6b48:	202a      	movs	r0, #42	; 0x2a
    6b4a:	f005 feb4 	bl	c8b6 <arch_irq_enable>
    6b4e:	e7cb      	b.n	6ae8 <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
    6b50:	202a      	movs	r0, #42	; 0x2a
    6b52:	f005 feb5 	bl	c8c0 <arch_irq_disable>
	return 0;
    6b56:	2000      	movs	r0, #0
    6b58:	e7b4      	b.n	6ac4 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
    6b5a:	f06f 0015 	mvn.w	r0, #21
    6b5e:	e7b1      	b.n	6ac4 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
    6b60:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6b64:	e7ae      	b.n	6ac4 <mbox_nrf_set_enabled+0x50>
    6b66:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6b6a:	e7ab      	b.n	6ac4 <mbox_nrf_set_enabled+0x50>
    6b6c:	000107f0 	.word	0x000107f0
    6b70:	0000f7a8 	.word	0x0000f7a8

00006b74 <mbox_nrf_send>:
{
    6b74:	b530      	push	{r4, r5, lr}
    6b76:	b089      	sub	sp, #36	; 0x24
    6b78:	4605      	mov	r5, r0
    6b7a:	460c      	mov	r4, r1
	if (msg) {
    6b7c:	b31a      	cbz	r2, 6bc6 <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
    6b7e:	4b20      	ldr	r3, [pc, #128]	; (6c00 <mbox_nrf_send+0x8c>)
    6b80:	9307      	str	r3, [sp, #28]
    6b82:	2202      	movs	r2, #2
    6b84:	f88d 2004 	strb.w	r2, [sp, #4]
    6b88:	2300      	movs	r3, #0
    6b8a:	f88d 3005 	strb.w	r3, [sp, #5]
    6b8e:	f88d 3006 	strb.w	r3, [sp, #6]
    6b92:	f88d 3007 	strb.w	r3, [sp, #7]
    6b96:	9901      	ldr	r1, [sp, #4]
    6b98:	9106      	str	r1, [sp, #24]
    6b9a:	4619      	mov	r1, r3
    6b9c:	f363 0100 	bfi	r1, r3, #0, #1
    6ba0:	f363 0141 	bfi	r1, r3, #1, #1
    6ba4:	f363 0182 	bfi	r1, r3, #2, #1
    6ba8:	f363 01c5 	bfi	r1, r3, #3, #3
    6bac:	f362 1188 	bfi	r1, r2, #6, #3
    6bb0:	2208      	movs	r2, #8
    6bb2:	f362 2152 	bfi	r1, r2, #9, #10
    6bb6:	f363 41de 	bfi	r1, r3, #19, #12
    6bba:	f363 71df 	bfi	r1, r3, #31, #1
    6bbe:	aa06      	add	r2, sp, #24
    6bc0:	4810      	ldr	r0, [pc, #64]	; (6c04 <mbox_nrf_send+0x90>)
    6bc2:	f005 faac 	bl	c11e <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
    6bc6:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    6bc8:	2c0f      	cmp	r4, #15
    6bca:	d806      	bhi.n	6bda <mbox_nrf_send+0x66>
    6bcc:	685b      	ldr	r3, [r3, #4]
    6bce:	40e3      	lsrs	r3, r4
    6bd0:	f013 0f01 	tst.w	r3, #1
    6bd4:	d10f      	bne.n	6bf6 <mbox_nrf_send+0x82>
    6bd6:	2300      	movs	r3, #0
    6bd8:	e000      	b.n	6bdc <mbox_nrf_send+0x68>
    6bda:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
    6bdc:	b16b      	cbz	r3, 6bfa <mbox_nrf_send+0x86>
	nrfx_ipc_signal(channel);
    6bde:	b2e1      	uxtb	r1, r4
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    6be0:	0089      	lsls	r1, r1, #2
    6be2:	b2c9      	uxtb	r1, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6be4:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    6be8:	f501 3128 	add.w	r1, r1, #172032	; 0x2a000
    6bec:	2301      	movs	r3, #1
    6bee:	600b      	str	r3, [r1, #0]
	return 0;
    6bf0:	2000      	movs	r0, #0
}
    6bf2:	b009      	add	sp, #36	; 0x24
    6bf4:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    6bf6:	2301      	movs	r3, #1
    6bf8:	e7f0      	b.n	6bdc <mbox_nrf_send+0x68>
		return -EINVAL;
    6bfa:	f06f 0015 	mvn.w	r0, #21
    6bfe:	e7f8      	b.n	6bf2 <mbox_nrf_send+0x7e>
    6c00:	00010820 	.word	0x00010820
    6c04:	0000f7a8 	.word	0x0000f7a8

00006c08 <mbox_dispatcher>:
{
    6c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c0c:	b08e      	sub	sp, #56	; 0x38
    6c0e:	4605      	mov	r5, r0
    6c10:	460e      	mov	r6, r1
	const struct device *dev = data->dev;
    6c12:	f8d1 9080 	ldr.w	r9, [r1, #128]	; 0x80
	while (event_mask) {
    6c16:	e01a      	b.n	6c4e <mbox_dispatcher+0x46>
    return 32U;
    6c18:	2320      	movs	r3, #32
    6c1a:	e020      	b.n	6c5e <mbox_dispatcher+0x56>
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    6c1c:	2300      	movs	r3, #0
		if (!is_rx_channel_valid(dev, channel)) {
    6c1e:	b36b      	cbz	r3, 6c7c <mbox_dispatcher+0x74>
		if (!(data->enabled_mask & BIT(channel))) {
    6c20:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    6c24:	40e3      	lsrs	r3, r4
    6c26:	f013 0f01 	tst.w	r3, #1
    6c2a:	d04c      	beq.n	6cc6 <mbox_dispatcher+0xbe>
		event_mask &= ~BIT(channel);
    6c2c:	2301      	movs	r3, #1
    6c2e:	40a3      	lsls	r3, r4
    6c30:	ea25 0503 	bic.w	r5, r5, r3
		if (data->cb[channel] != NULL) {
    6c34:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
    6c38:	f1ba 0f00 	cmp.w	sl, #0
    6c3c:	d007      	beq.n	6c4e <mbox_dispatcher+0x46>
			data->cb[channel](dev, channel, data->user_data[channel], NULL);
    6c3e:	f104 0210 	add.w	r2, r4, #16
    6c42:	2300      	movs	r3, #0
    6c44:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    6c48:	4621      	mov	r1, r4
    6c4a:	4648      	mov	r0, r9
    6c4c:	47d0      	blx	sl
	while (event_mask) {
    6c4e:	2d00      	cmp	r5, #0
    6c50:	d05e      	beq.n	6d10 <mbox_dispatcher+0x108>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6c52:	fa95 f3a5 	rbit	r3, r5
  if (value == 0U)
    6c56:	2b00      	cmp	r3, #0
    6c58:	d0de      	beq.n	6c18 <mbox_dispatcher+0x10>
  return __builtin_clz(value);
    6c5a:	fab3 f383 	clz	r3, r3
		uint32_t channel = __CLZ(__RBIT(event_mask));
    6c5e:	461c      	mov	r4, r3
	const struct mbox_nrf_conf *conf = dev->config;
    6c60:	f8d9 2004 	ldr.w	r2, [r9, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    6c64:	2b0f      	cmp	r3, #15
    6c66:	d8d9      	bhi.n	6c1c <mbox_dispatcher+0x14>
    6c68:	6812      	ldr	r2, [r2, #0]
    6c6a:	fa22 f303 	lsr.w	r3, r2, r3
    6c6e:	f013 0f01 	tst.w	r3, #1
    6c72:	d101      	bne.n	6c78 <mbox_dispatcher+0x70>
    6c74:	2300      	movs	r3, #0
    6c76:	e7d2      	b.n	6c1e <mbox_dispatcher+0x16>
    6c78:	2301      	movs	r3, #1
    6c7a:	e7d0      	b.n	6c1e <mbox_dispatcher+0x16>
			LOG_WRN("RX event on illegal channel");
    6c7c:	4b26      	ldr	r3, [pc, #152]	; (6d18 <mbox_dispatcher+0x110>)
    6c7e:	9307      	str	r3, [sp, #28]
    6c80:	2202      	movs	r2, #2
    6c82:	f88d 2004 	strb.w	r2, [sp, #4]
    6c86:	2300      	movs	r3, #0
    6c88:	f88d 3005 	strb.w	r3, [sp, #5]
    6c8c:	f88d 3006 	strb.w	r3, [sp, #6]
    6c90:	f88d 3007 	strb.w	r3, [sp, #7]
    6c94:	9901      	ldr	r1, [sp, #4]
    6c96:	9106      	str	r1, [sp, #24]
    6c98:	f363 0700 	bfi	r7, r3, #0, #1
    6c9c:	f363 0741 	bfi	r7, r3, #1, #1
    6ca0:	f363 0782 	bfi	r7, r3, #2, #1
    6ca4:	f363 07c5 	bfi	r7, r3, #3, #3
    6ca8:	f362 1788 	bfi	r7, r2, #6, #3
    6cac:	2208      	movs	r2, #8
    6cae:	f362 2752 	bfi	r7, r2, #9, #10
    6cb2:	f363 47de 	bfi	r7, r3, #19, #12
    6cb6:	f363 77df 	bfi	r7, r3, #31, #1
    6cba:	aa06      	add	r2, sp, #24
    6cbc:	4639      	mov	r1, r7
    6cbe:	4817      	ldr	r0, [pc, #92]	; (6d1c <mbox_dispatcher+0x114>)
    6cc0:	f005 fa2d 	bl	c11e <z_impl_z_log_msg_static_create>
    6cc4:	e7ac      	b.n	6c20 <mbox_dispatcher+0x18>
			LOG_WRN("RX event on disabled channel");
    6cc6:	4b16      	ldr	r3, [pc, #88]	; (6d20 <mbox_dispatcher+0x118>)
    6cc8:	930d      	str	r3, [sp, #52]	; 0x34
    6cca:	2202      	movs	r2, #2
    6ccc:	f88d 2004 	strb.w	r2, [sp, #4]
    6cd0:	2300      	movs	r3, #0
    6cd2:	f88d 3005 	strb.w	r3, [sp, #5]
    6cd6:	f88d 3006 	strb.w	r3, [sp, #6]
    6cda:	f88d 3007 	strb.w	r3, [sp, #7]
    6cde:	9901      	ldr	r1, [sp, #4]
    6ce0:	910c      	str	r1, [sp, #48]	; 0x30
    6ce2:	f363 0800 	bfi	r8, r3, #0, #1
    6ce6:	f363 0841 	bfi	r8, r3, #1, #1
    6cea:	f363 0882 	bfi	r8, r3, #2, #1
    6cee:	f363 08c5 	bfi	r8, r3, #3, #3
    6cf2:	f362 1888 	bfi	r8, r2, #6, #3
    6cf6:	2208      	movs	r2, #8
    6cf8:	f362 2852 	bfi	r8, r2, #9, #10
    6cfc:	f363 48de 	bfi	r8, r3, #19, #12
    6d00:	f363 78df 	bfi	r8, r3, #31, #1
    6d04:	aa0c      	add	r2, sp, #48	; 0x30
    6d06:	4641      	mov	r1, r8
    6d08:	4804      	ldr	r0, [pc, #16]	; (6d1c <mbox_dispatcher+0x114>)
    6d0a:	f005 fa08 	bl	c11e <z_impl_z_log_msg_static_create>
    6d0e:	e78d      	b.n	6c2c <mbox_dispatcher+0x24>
}
    6d10:	b00e      	add	sp, #56	; 0x38
    6d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d16:	bf00      	nop
    6d18:	0001083c 	.word	0x0001083c
    6d1c:	0000f7a8 	.word	0x0000f7a8
    6d20:	00010858 	.word	0x00010858

00006d24 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
    6d24:	b510      	push	{r4, lr}
    6d26:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
    6d28:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    6d2a:	2284      	movs	r2, #132	; 0x84
    6d2c:	2100      	movs	r1, #0
    6d2e:	a801      	add	r0, sp, #4
    6d30:	f005 fef8 	bl	cb24 <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    6d34:	6863      	ldr	r3, [r4, #4]
    6d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6d3a:	d206      	bcs.n	6d4a <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    6d3c:	6823      	ldr	r3, [r4, #0]
    6d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6d42:	d227      	bcs.n	6d94 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
    6d44:	2300      	movs	r3, #0
    6d46:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    6d48:	e04a      	b.n	6de0 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    6d4a:	4b36      	ldr	r3, [pc, #216]	; (6e24 <enable_dt_channels+0x100>)
    6d4c:	9327      	str	r3, [sp, #156]	; 0x9c
    6d4e:	2202      	movs	r2, #2
    6d50:	f88d 2000 	strb.w	r2, [sp]
    6d54:	2300      	movs	r3, #0
    6d56:	f88d 3001 	strb.w	r3, [sp, #1]
    6d5a:	f88d 3002 	strb.w	r3, [sp, #2]
    6d5e:	f88d 3003 	strb.w	r3, [sp, #3]
    6d62:	9900      	ldr	r1, [sp, #0]
    6d64:	9126      	str	r1, [sp, #152]	; 0x98
    6d66:	4619      	mov	r1, r3
    6d68:	f363 0100 	bfi	r1, r3, #0, #1
    6d6c:	f363 0141 	bfi	r1, r3, #1, #1
    6d70:	f363 0182 	bfi	r1, r3, #2, #1
    6d74:	f363 01c5 	bfi	r1, r3, #3, #3
    6d78:	f362 1188 	bfi	r1, r2, #6, #3
    6d7c:	2208      	movs	r2, #8
    6d7e:	f362 2152 	bfi	r1, r2, #9, #10
    6d82:	f363 41de 	bfi	r1, r3, #19, #12
    6d86:	f363 71df 	bfi	r1, r3, #31, #1
    6d8a:	aa26      	add	r2, sp, #152	; 0x98
    6d8c:	4826      	ldr	r0, [pc, #152]	; (6e28 <enable_dt_channels+0x104>)
    6d8e:	f005 f9c6 	bl	c11e <z_impl_z_log_msg_static_create>
    6d92:	e7d3      	b.n	6d3c <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    6d94:	4b25      	ldr	r3, [pc, #148]	; (6e2c <enable_dt_channels+0x108>)
    6d96:	932d      	str	r3, [sp, #180]	; 0xb4
    6d98:	2202      	movs	r2, #2
    6d9a:	f88d 2000 	strb.w	r2, [sp]
    6d9e:	2300      	movs	r3, #0
    6da0:	f88d 3001 	strb.w	r3, [sp, #1]
    6da4:	f88d 3002 	strb.w	r3, [sp, #2]
    6da8:	f88d 3003 	strb.w	r3, [sp, #3]
    6dac:	9900      	ldr	r1, [sp, #0]
    6dae:	912c      	str	r1, [sp, #176]	; 0xb0
    6db0:	4619      	mov	r1, r3
    6db2:	f363 0100 	bfi	r1, r3, #0, #1
    6db6:	f363 0141 	bfi	r1, r3, #1, #1
    6dba:	f363 0182 	bfi	r1, r3, #2, #1
    6dbe:	f363 01c5 	bfi	r1, r3, #3, #3
    6dc2:	f362 1188 	bfi	r1, r2, #6, #3
    6dc6:	2208      	movs	r2, #8
    6dc8:	f362 2152 	bfi	r1, r2, #9, #10
    6dcc:	f363 41de 	bfi	r1, r3, #19, #12
    6dd0:	f363 71df 	bfi	r1, r3, #31, #1
    6dd4:	aa2c      	add	r2, sp, #176	; 0xb0
    6dd6:	4814      	ldr	r0, [pc, #80]	; (6e28 <enable_dt_channels+0x104>)
    6dd8:	f005 f9a1 	bl	c11e <z_impl_z_log_msg_static_create>
    6ddc:	e7b2      	b.n	6d44 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    6dde:	3301      	adds	r3, #1
    6de0:	2b0f      	cmp	r3, #15
    6de2:	d81a      	bhi.n	6e1a <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
    6de4:	6862      	ldr	r2, [r4, #4]
    6de6:	40da      	lsrs	r2, r3
    6de8:	f012 0f01 	tst.w	r2, #1
    6dec:	d006      	beq.n	6dfc <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
    6dee:	2201      	movs	r2, #1
    6df0:	409a      	lsls	r2, r3
    6df2:	a92e      	add	r1, sp, #184	; 0xb8
    6df4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    6df8:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
    6dfc:	6822      	ldr	r2, [r4, #0]
    6dfe:	40da      	lsrs	r2, r3
    6e00:	f012 0f01 	tst.w	r2, #1
    6e04:	d0eb      	beq.n	6dde <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
    6e06:	2101      	movs	r1, #1
    6e08:	4099      	lsls	r1, r3
    6e0a:	f103 0210 	add.w	r2, r3, #16
    6e0e:	a82e      	add	r0, sp, #184	; 0xb8
    6e10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6e14:	f842 1cb4 	str.w	r1, [r2, #-180]
    6e18:	e7e1      	b.n	6dde <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
    6e1a:	a801      	add	r0, sp, #4
    6e1c:	f000 fe64 	bl	7ae8 <nrfx_ipc_config_load>
}
    6e20:	b02e      	add	sp, #184	; 0xb8
    6e22:	bd10      	pop	{r4, pc}
    6e24:	00010878 	.word	0x00010878
    6e28:	0000f7a8 	.word	0x0000f7a8
    6e2c:	000108a4 	.word	0x000108a4

00006e30 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
    6e30:	b510      	push	{r4, lr}
    6e32:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    6e34:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
    6e36:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    6e3a:	4907      	ldr	r1, [pc, #28]	; (6e58 <mbox_nrf_init+0x28>)
    6e3c:	2000      	movs	r0, #0
    6e3e:	f000 fe3b 	bl	7ab8 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e42:	2200      	movs	r2, #0
    6e44:	2101      	movs	r1, #1
    6e46:	202a      	movs	r0, #42	; 0x2a
    6e48:	f005 fd3f 	bl	c8ca <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    6e4c:	4620      	mov	r0, r4
    6e4e:	f7ff ff69 	bl	6d24 <enable_dt_channels>

	return 0;
}
    6e52:	2000      	movs	r0, #0
    6e54:	bd10      	pop	{r4, pc}
    6e56:	bf00      	nop
    6e58:	00006c09 	.word	0x00006c09

00006e5c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6e5c:	b510      	push	{r4, lr}
    6e5e:	b088      	sub	sp, #32
	z_impl_log_panic();
    6e60:	f7fa ffc2 	bl	1de8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6e64:	4b14      	ldr	r3, [pc, #80]	; (6eb8 <k_sys_fatal_error_handler+0x5c>)
    6e66:	9307      	str	r3, [sp, #28]
    6e68:	2302      	movs	r3, #2
    6e6a:	f88d 3004 	strb.w	r3, [sp, #4]
    6e6e:	2400      	movs	r4, #0
    6e70:	f88d 4005 	strb.w	r4, [sp, #5]
    6e74:	f88d 4006 	strb.w	r4, [sp, #6]
    6e78:	f88d 4007 	strb.w	r4, [sp, #7]
    6e7c:	9b01      	ldr	r3, [sp, #4]
    6e7e:	9306      	str	r3, [sp, #24]
    6e80:	4621      	mov	r1, r4
    6e82:	f364 0100 	bfi	r1, r4, #0, #1
    6e86:	f364 0141 	bfi	r1, r4, #1, #1
    6e8a:	f364 0182 	bfi	r1, r4, #2, #1
    6e8e:	f364 01c5 	bfi	r1, r4, #3, #3
    6e92:	2301      	movs	r3, #1
    6e94:	f363 1188 	bfi	r1, r3, #6, #3
    6e98:	2308      	movs	r3, #8
    6e9a:	f363 2152 	bfi	r1, r3, #9, #10
    6e9e:	f364 41de 	bfi	r1, r4, #19, #12
    6ea2:	f364 71df 	bfi	r1, r4, #31, #1
    6ea6:	4623      	mov	r3, r4
    6ea8:	aa06      	add	r2, sp, #24
    6eaa:	4804      	ldr	r0, [pc, #16]	; (6ebc <k_sys_fatal_error_handler+0x60>)
    6eac:	f005 f937 	bl	c11e <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    6eb0:	4620      	mov	r0, r4
    6eb2:	f005 fd48 	bl	c946 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6eb6:	bf00      	nop
    6eb8:	00010900 	.word	0x00010900
    6ebc:	0000f778 	.word	0x0000f778

00006ec0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    6ec0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ec4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    6ec8:	f002 0203 	and.w	r2, r2, #3
    6ecc:	4b02      	ldr	r3, [pc, #8]	; (6ed8 <SystemCoreClockUpdate+0x18>)
    6ece:	40d3      	lsrs	r3, r2
    6ed0:	4a02      	ldr	r2, [pc, #8]	; (6edc <SystemCoreClockUpdate+0x1c>)
    6ed2:	6013      	str	r3, [r2, #0]
#endif
}
    6ed4:	4770      	bx	lr
    6ed6:	bf00      	nop
    6ed8:	07a12000 	.word	0x07a12000
    6edc:	20000124 	.word	0x20000124

00006ee0 <SystemInit>:

void SystemInit(void)
{
    6ee0:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    6ee2:	f006 fda5 	bl	da30 <nrf53_errata_97>
    6ee6:	b168      	cbz	r0, 6f04 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    6ee8:	4b4e      	ldr	r3, [pc, #312]	; (7024 <SystemInit+0x144>)
    6eea:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    6eee:	b94b      	cbnz	r3, 6f04 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    6ef0:	4b4c      	ldr	r3, [pc, #304]	; (7024 <SystemInit+0x144>)
    6ef2:	220d      	movs	r2, #13
    6ef4:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    6ef8:	2201      	movs	r2, #1
    6efa:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    6efe:	2200      	movs	r2, #0
    6f00:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    6f04:	2200      	movs	r2, #0
    6f06:	e00b      	b.n	6f20 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6f08:	f102 0360 	add.w	r3, r2, #96	; 0x60
    6f0c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6f10:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    6f14:	00db      	lsls	r3, r3, #3
    6f16:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    6f1a:	685b      	ldr	r3, [r3, #4]
    6f1c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6f1e:	3201      	adds	r2, #1
    6f20:	2a1f      	cmp	r2, #31
    6f22:	d808      	bhi.n	6f36 <SystemInit+0x56>
    6f24:	f102 0360 	add.w	r3, r2, #96	; 0x60
    6f28:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6f2c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    6f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6f34:	d1e8      	bne.n	6f08 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    6f36:	f006 fd53 	bl	d9e0 <nrf53_errata_64>
    6f3a:	b130      	cbz	r0, 6f4a <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    6f3c:	4b39      	ldr	r3, [pc, #228]	; (7024 <SystemInit+0x144>)
    6f3e:	2229      	movs	r2, #41	; 0x29
    6f40:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    6f44:	2203      	movs	r2, #3
    6f46:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    6f4a:	f006 fcfd 	bl	d948 <nrf53_errata_42>
    6f4e:	b140      	cbz	r0, 6f62 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    6f50:	4b35      	ldr	r3, [pc, #212]	; (7028 <SystemInit+0x148>)
    6f52:	4a36      	ldr	r2, [pc, #216]	; (702c <SystemInit+0x14c>)
    6f54:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    6f58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f5c:	2201      	movs	r2, #1
    6f5e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    6f62:	f006 fd05 	bl	d970 <nrf53_errata_46>
    6f66:	b118      	cbz	r0, 6f70 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    6f68:	4b31      	ldr	r3, [pc, #196]	; (7030 <SystemInit+0x150>)
    6f6a:	2200      	movs	r2, #0
    6f6c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    6f70:	f006 fd16 	bl	d9a0 <nrf53_errata_49>
    6f74:	b168      	cbz	r0, 6f92 <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    6f76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6f7e:	f013 0f01 	tst.w	r3, #1
    6f82:	d006      	beq.n	6f92 <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    6f84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f88:	2200      	movs	r2, #0
    6f8a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    6f8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    6f92:	f006 fd19 	bl	d9c8 <nrf53_errata_55>
    6f96:	b160      	cbz	r0, 6fb2 <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    6f98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6f9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6fa0:	f013 0f01 	tst.w	r3, #1
    6fa4:	d005      	beq.n	6fb2 <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    6fa6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6faa:	f06f 0201 	mvn.w	r2, #1
    6fae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    6fb2:	f006 fd29 	bl	da08 <nrf53_errata_69>
    6fb6:	b118      	cbz	r0, 6fc0 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    6fb8:	4b1a      	ldr	r3, [pc, #104]	; (7024 <SystemInit+0x144>)
    6fba:	2265      	movs	r2, #101	; 0x65
    6fbc:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    6fc0:	f006 fd4a 	bl	da58 <nrf53_errata_140>
    6fc4:	b120      	cbz	r0, 6fd0 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    6fc6:	4b1a      	ldr	r3, [pc, #104]	; (7030 <SystemInit+0x150>)
    6fc8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    6fcc:	2b00      	cmp	r3, #0
    6fce:	db11      	blt.n	6ff4 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    6fd0:	4a18      	ldr	r2, [pc, #96]	; (7034 <SystemInit+0x154>)
    6fd2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    6fd6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    6fda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    6fde:	4a16      	ldr	r2, [pc, #88]	; (7038 <SystemInit+0x158>)
    6fe0:	6811      	ldr	r1, [r2, #0]
    6fe2:	4b16      	ldr	r3, [pc, #88]	; (703c <SystemInit+0x15c>)
    6fe4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    6fe8:	69d2      	ldr	r2, [r2, #28]
    6fea:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    6fee:	f7ff ff67 	bl	6ec0 <SystemCoreClockUpdate>
}
    6ff2:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    6ff4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6ff8:	2203      	movs	r2, #3
    6ffa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    6ffe:	2201      	movs	r2, #1
    7000:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    7002:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7006:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    700a:	2b00      	cmp	r3, #0
    700c:	d0f9      	beq.n	7002 <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    700e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7012:	2200      	movs	r2, #0
    7014:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    7018:	2201      	movs	r2, #1
    701a:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    701c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    7020:	e7d6      	b.n	6fd0 <SystemInit+0xf0>
    7022:	bf00      	nop
    7024:	50004000 	.word	0x50004000
    7028:	50039000 	.word	0x50039000
    702c:	beef0044 	.word	0xbeef0044
    7030:	50032000 	.word	0x50032000
    7034:	e000ed00 	.word	0xe000ed00
    7038:	00ff8000 	.word	0x00ff8000
    703c:	50006000 	.word	0x50006000

00007040 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7040:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    7042:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    7044:	fab4 f384 	clz	r3, r4
    7048:	f1c3 031f 	rsb	r3, r3, #31
    704c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    7050:	2b00      	cmp	r3, #0
    7052:	db12      	blt.n	707a <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    7054:	2201      	movs	r2, #1
    7056:	fa02 f303 	lsl.w	r3, r2, r3
    705a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    705e:	e8d0 2fef 	ldaex	r2, [r0]
    7062:	42a2      	cmp	r2, r4
    7064:	d104      	bne.n	7070 <nrfx_flag32_alloc+0x30>
    7066:	e8c0 3fee 	stlex	lr, r3, [r0]
    706a:	f1be 0f00 	cmp.w	lr, #0
    706e:	d1f6      	bne.n	705e <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7070:	d1e7      	bne.n	7042 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    7072:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    7076:	4802      	ldr	r0, [pc, #8]	; (7080 <nrfx_flag32_alloc+0x40>)
}
    7078:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    707a:	4802      	ldr	r0, [pc, #8]	; (7084 <nrfx_flag32_alloc+0x44>)
    707c:	e7fc      	b.n	7078 <nrfx_flag32_alloc+0x38>
    707e:	bf00      	nop
    7080:	0bad0000 	.word	0x0bad0000
    7084:	0bad0002 	.word	0x0bad0002

00007088 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7088:	6803      	ldr	r3, [r0, #0]
    708a:	40cb      	lsrs	r3, r1
    708c:	f013 0f01 	tst.w	r3, #1
    7090:	d111      	bne.n	70b6 <nrfx_flag32_free+0x2e>
{
    7092:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    7094:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    7096:	2301      	movs	r3, #1
    7098:	408b      	lsls	r3, r1
    709a:	4313      	orrs	r3, r2
    709c:	e8d0 cfef 	ldaex	ip, [r0]
    70a0:	4594      	cmp	ip, r2
    70a2:	d104      	bne.n	70ae <nrfx_flag32_free+0x26>
    70a4:	e8c0 3fee 	stlex	lr, r3, [r0]
    70a8:	f1be 0f00 	cmp.w	lr, #0
    70ac:	d1f6      	bne.n	709c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    70ae:	d1f1      	bne.n	7094 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    70b0:	4802      	ldr	r0, [pc, #8]	; (70bc <nrfx_flag32_free+0x34>)
}
    70b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    70b6:	4802      	ldr	r0, [pc, #8]	; (70c0 <nrfx_flag32_free+0x38>)
}
    70b8:	4770      	bx	lr
    70ba:	bf00      	nop
    70bc:	0bad0000 	.word	0x0bad0000
    70c0:	0bad0004 	.word	0x0bad0004

000070c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    70c4:	4b05      	ldr	r3, [pc, #20]	; (70dc <nrfx_clock_init+0x18>)
    70c6:	791b      	ldrb	r3, [r3, #4]
    70c8:	b92b      	cbnz	r3, 70d6 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    70ca:	4b04      	ldr	r3, [pc, #16]	; (70dc <nrfx_clock_init+0x18>)
    70cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    70ce:	2201      	movs	r2, #1
    70d0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    70d2:	4803      	ldr	r0, [pc, #12]	; (70e0 <nrfx_clock_init+0x1c>)
    70d4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    70d6:	4803      	ldr	r0, [pc, #12]	; (70e4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    70d8:	4770      	bx	lr
    70da:	bf00      	nop
    70dc:	200015c8 	.word	0x200015c8
    70e0:	0bad0000 	.word	0x0bad0000
    70e4:	0bad000c 	.word	0x0bad000c

000070e8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    70e8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    70ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    70f2:	b163      	cbz	r3, 710e <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    70f8:	2000      	movs	r0, #0
    70fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    70fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    7102:	2201      	movs	r2, #1
    7104:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7108:	4b28      	ldr	r3, [pc, #160]	; (71ac <nrfx_power_clock_irq_handler+0xc4>)
    710a:	681b      	ldr	r3, [r3, #0]
    710c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    710e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7112:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7116:	b1bb      	cbz	r3, 7148 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7118:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    711c:	2200      	movs	r2, #0
    711e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7122:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7126:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    712a:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    712e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7132:	2a01      	cmp	r2, #1
    7134:	d031      	beq.n	719a <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    7136:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    713a:	2202      	movs	r2, #2
    713c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7140:	4b1a      	ldr	r3, [pc, #104]	; (71ac <nrfx_power_clock_irq_handler+0xc4>)
    7142:	681b      	ldr	r3, [r3, #0]
    7144:	2001      	movs	r0, #1
    7146:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7148:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    714c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    7150:	b173      	cbz	r3, 7170 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7152:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7156:	2200      	movs	r2, #0
    7158:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    715c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    7160:	f44f 7280 	mov.w	r2, #256	; 0x100
    7164:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    7168:	4b10      	ldr	r3, [pc, #64]	; (71ac <nrfx_power_clock_irq_handler+0xc4>)
    716a:	681b      	ldr	r3, [r3, #0]
    716c:	2004      	movs	r0, #4
    716e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7170:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7174:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    7178:	b173      	cbz	r3, 7198 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    717a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    717e:	2200      	movs	r2, #0
    7180:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    7184:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    7188:	f44f 7200 	mov.w	r2, #512	; 0x200
    718c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    7190:	4b06      	ldr	r3, [pc, #24]	; (71ac <nrfx_power_clock_irq_handler+0xc4>)
    7192:	681b      	ldr	r3, [r3, #0]
    7194:	2005      	movs	r0, #5
    7196:	4798      	blx	r3
    }
#endif
}
    7198:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    719a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    719e:	2202      	movs	r2, #2
    71a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71a4:	2201      	movs	r2, #1
    71a6:	609a      	str	r2, [r3, #8]
}
    71a8:	e7ce      	b.n	7148 <nrfx_power_clock_irq_handler+0x60>
    71aa:	bf00      	nop
    71ac:	200015c8 	.word	0x200015c8

000071b0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    71b0:	b508      	push	{r3, lr}
    71b2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    71b4:	4801      	ldr	r0, [pc, #4]	; (71bc <nrfx_dppi_channel_alloc+0xc>)
    71b6:	f7ff ff43 	bl	7040 <nrfx_flag32_alloc>
}
    71ba:	bd08      	pop	{r3, pc}
    71bc:	20000128 	.word	0x20000128

000071c0 <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    71c0:	b508      	push	{r3, lr}
    71c2:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    71c4:	2301      	movs	r3, #1
    71c6:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
    71c8:	4a03      	ldr	r2, [pc, #12]	; (71d8 <nrfx_dppi_channel_free+0x18>)
    71ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    71ce:	4803      	ldr	r0, [pc, #12]	; (71dc <nrfx_dppi_channel_free+0x1c>)
    71d0:	f7ff ff5a 	bl	7088 <nrfx_flag32_free>
}
    71d4:	bd08      	pop	{r3, pc}
    71d6:	bf00      	nop
    71d8:	50017000 	.word	0x50017000
    71dc:	20000128 	.word	0x20000128

000071e0 <nrf_gpio_reconfigure>:
{
    71e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71e2:	461c      	mov	r4, r3
    71e4:	9f05      	ldr	r7, [sp, #20]
    71e6:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    71e8:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    71ec:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71ee:	2801      	cmp	r0, #1
    71f0:	d034      	beq.n	725c <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    71f2:	4d27      	ldr	r5, [pc, #156]	; (7290 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    71f4:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    71f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    71fc:	b381      	cbz	r1, 7260 <nrf_gpio_reconfigure+0x80>
    71fe:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7200:	b382      	cbz	r2, 7264 <nrf_gpio_reconfigure+0x84>
    7202:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7206:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    720a:	b374      	cbz	r4, 726a <nrf_gpio_reconfigure+0x8a>
    720c:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7210:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7214:	b367      	cbz	r7, 7270 <nrf_gpio_reconfigure+0x90>
    7216:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    721a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    721e:	b356      	cbz	r6, 7276 <nrf_gpio_reconfigure+0x96>
    7220:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7224:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    7228:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    722c:	b331      	cbz	r1, 727c <nrf_gpio_reconfigure+0x9c>
    722e:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7230:	b332      	cbz	r2, 7280 <nrf_gpio_reconfigure+0xa0>
    7232:	7812      	ldrb	r2, [r2, #0]
    7234:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7236:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7238:	b324      	cbz	r4, 7284 <nrf_gpio_reconfigure+0xa4>
    723a:	7822      	ldrb	r2, [r4, #0]
    723c:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    723e:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7240:	b317      	cbz	r7, 7288 <nrf_gpio_reconfigure+0xa8>
    7242:	783a      	ldrb	r2, [r7, #0]
    7244:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7246:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7248:	b306      	cbz	r6, 728c <nrf_gpio_reconfigure+0xac>
    724a:	7832      	ldrb	r2, [r6, #0]
    724c:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    724e:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7250:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7252:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    7256:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    725c:	4d0d      	ldr	r5, [pc, #52]	; (7294 <nrf_gpio_reconfigure+0xb4>)
    725e:	e7c9      	b.n	71f4 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7260:	2000      	movs	r0, #0
    7262:	e7cd      	b.n	7200 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7264:	f04f 0e00 	mov.w	lr, #0
    7268:	e7cd      	b.n	7206 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    726a:	f04f 0e00 	mov.w	lr, #0
    726e:	e7cf      	b.n	7210 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7270:	f04f 0e00 	mov.w	lr, #0
    7274:	e7d1      	b.n	721a <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7276:	f04f 0e00 	mov.w	lr, #0
    727a:	e7d3      	b.n	7224 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    727c:	2300      	movs	r3, #0
    727e:	e7d7      	b.n	7230 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7280:	2200      	movs	r2, #0
    7282:	e7d8      	b.n	7236 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7284:	2200      	movs	r2, #0
    7286:	e7da      	b.n	723e <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7288:	2200      	movs	r2, #0
    728a:	e7dc      	b.n	7246 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    728c:	2200      	movs	r2, #0
    728e:	e7de      	b.n	724e <nrf_gpio_reconfigure+0x6e>
    7290:	50842500 	.word	0x50842500
    7294:	50842800 	.word	0x50842800

00007298 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    7298:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    729c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    729e:	2801      	cmp	r0, #1
    72a0:	d00a      	beq.n	72b8 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    72a2:	4906      	ldr	r1, [pc, #24]	; (72bc <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    72a4:	3280      	adds	r2, #128	; 0x80
    72a6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    72aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    72ae:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    72b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    72b6:	4770      	bx	lr
        case 1: return NRF_P1;
    72b8:	4901      	ldr	r1, [pc, #4]	; (72c0 <nrf_gpio_cfg_default+0x28>)
    72ba:	e7f3      	b.n	72a4 <nrf_gpio_cfg_default+0xc>
    72bc:	50842500 	.word	0x50842500
    72c0:	50842800 	.word	0x50842800

000072c4 <nrf_gpio_latches_read_and_clear>:
{
    72c4:	b500      	push	{lr}
    72c6:	b083      	sub	sp, #12
    72c8:	4684      	mov	ip, r0
    72ca:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    72cc:	4b0c      	ldr	r3, [pc, #48]	; (7300 <nrf_gpio_latches_read_and_clear+0x3c>)
    72ce:	e893 0003 	ldmia.w	r3, {r0, r1}
    72d2:	ab02      	add	r3, sp, #8
    72d4:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    72d8:	4663      	mov	r3, ip
    72da:	e009      	b.n	72f0 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    72dc:	a902      	add	r1, sp, #8
    72de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    72e2:	f851 1c08 	ldr.w	r1, [r1, #-8]
    72e6:	6a08      	ldr	r0, [r1, #32]
    72e8:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    72ec:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    72ee:	3301      	adds	r3, #1
    72f0:	eb0c 000e 	add.w	r0, ip, lr
    72f4:	4298      	cmp	r0, r3
    72f6:	d8f1      	bhi.n	72dc <nrf_gpio_latches_read_and_clear+0x18>
}
    72f8:	b003      	add	sp, #12
    72fa:	f85d fb04 	ldr.w	pc, [sp], #4
    72fe:	bf00      	nop
    7300:	0000f884 	.word	0x0000f884

00007304 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7304:	3008      	adds	r0, #8
    7306:	4b03      	ldr	r3, [pc, #12]	; (7314 <pin_in_use+0x10>)
    7308:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    730c:	f000 0001 	and.w	r0, r0, #1
    7310:	4770      	bx	lr
    7312:	bf00      	nop
    7314:	2000012c 	.word	0x2000012c

00007318 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7318:	3008      	adds	r0, #8
    731a:	4b03      	ldr	r3, [pc, #12]	; (7328 <pin_in_use_by_te+0x10>)
    731c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7320:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7324:	4770      	bx	lr
    7326:	bf00      	nop
    7328:	2000012c 	.word	0x2000012c

0000732c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    732c:	3008      	adds	r0, #8
    732e:	4b04      	ldr	r3, [pc, #16]	; (7340 <pin_has_trigger+0x14>)
    7330:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7334:	f010 001c 	ands.w	r0, r0, #28
    7338:	bf18      	it	ne
    733a:	2001      	movne	r0, #1
    733c:	4770      	bx	lr
    733e:	bf00      	nop
    7340:	2000012c 	.word	0x2000012c

00007344 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7344:	3008      	adds	r0, #8
    7346:	4b03      	ldr	r3, [pc, #12]	; (7354 <pin_is_output+0x10>)
    7348:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    734c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7350:	4770      	bx	lr
    7352:	bf00      	nop
    7354:	2000012c 	.word	0x2000012c

00007358 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7358:	3008      	adds	r0, #8
    735a:	4b02      	ldr	r3, [pc, #8]	; (7364 <pin_te_get+0xc>)
    735c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7360:	0b40      	lsrs	r0, r0, #13
    7362:	4770      	bx	lr
    7364:	2000012c 	.word	0x2000012c

00007368 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7368:	2200      	movs	r2, #0
    736a:	e004      	b.n	7376 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    736c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7370:	4283      	cmp	r3, r0
    7372:	d00f      	beq.n	7394 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7374:	3201      	adds	r2, #1
    7376:	2a2f      	cmp	r2, #47	; 0x2f
    7378:	d80a      	bhi.n	7390 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    737a:	f102 0308 	add.w	r3, r2, #8
    737e:	4906      	ldr	r1, [pc, #24]	; (7398 <handler_in_use+0x30>)
    7380:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7384:	f413 7f80 	tst.w	r3, #256	; 0x100
    7388:	d0f0      	beq.n	736c <handler_in_use+0x4>
    738a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    738e:	e7ef      	b.n	7370 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    7390:	2000      	movs	r0, #0
    7392:	4770      	bx	lr
            return true;
    7394:	2001      	movs	r0, #1
}
    7396:	4770      	bx	lr
    7398:	2000012c 	.word	0x2000012c

0000739c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    739c:	2300      	movs	r3, #0
    739e:	b113      	cbz	r3, 73a6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    73a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    73a4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    73a6:	4a07      	ldr	r2, [pc, #28]	; (73c4 <find_handler+0x28>)
    73a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    73ac:	4282      	cmp	r2, r0
    73ae:	d001      	beq.n	73b4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    73b0:	3301      	adds	r3, #1
    73b2:	e7f4      	b.n	739e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    73b4:	4a03      	ldr	r2, [pc, #12]	; (73c4 <find_handler+0x28>)
    73b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    73ba:	6852      	ldr	r2, [r2, #4]
    73bc:	428a      	cmp	r2, r1
    73be:	d1f7      	bne.n	73b0 <find_handler+0x14>
            return i;
    73c0:	4618      	mov	r0, r3
    73c2:	4770      	bx	lr
    73c4:	2000012c 	.word	0x2000012c

000073c8 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    73c8:	f100 0208 	add.w	r2, r0, #8
    73cc:	4b0e      	ldr	r3, [pc, #56]	; (7408 <get_initial_sense+0x40>)
    73ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    73d2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    73d6:	2b04      	cmp	r3, #4
    73d8:	d010      	beq.n	73fc <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    73da:	2b05      	cmp	r3, #5
    73dc:	d010      	beq.n	7400 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    73de:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    73e2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    73e4:	2801      	cmp	r0, #1
    73e6:	d007      	beq.n	73f8 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    73e8:	4b08      	ldr	r3, [pc, #32]	; (740c <get_initial_sense+0x44>)
    return p_reg->IN;
    73ea:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    73ec:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    73ee:	f013 0f01 	tst.w	r3, #1
    73f2:	d007      	beq.n	7404 <get_initial_sense+0x3c>
    73f4:	2003      	movs	r0, #3
    73f6:	4770      	bx	lr
        case 1: return NRF_P1;
    73f8:	4b05      	ldr	r3, [pc, #20]	; (7410 <get_initial_sense+0x48>)
    73fa:	e7f6      	b.n	73ea <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    73fc:	2003      	movs	r0, #3
    73fe:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7400:	2002      	movs	r0, #2
    7402:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7404:	2002      	movs	r0, #2
    }

    return sense;
}
    7406:	4770      	bx	lr
    7408:	2000012c 	.word	0x2000012c
    740c:	50842500 	.word	0x50842500
    7410:	50842800 	.word	0x50842800

00007414 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7414:	3008      	adds	r0, #8
    7416:	4b06      	ldr	r3, [pc, #24]	; (7430 <channel_handler_get+0x1c>)
    7418:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    741c:	f410 7f80 	tst.w	r0, #256	; 0x100
    7420:	d004      	beq.n	742c <channel_handler_get+0x18>
    7422:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    7426:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    742a:	4770      	bx	lr
        return NULL;
    742c:	2000      	movs	r0, #0
}
    742e:	4770      	bx	lr
    7430:	2000012c 	.word	0x2000012c

00007434 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7434:	b570      	push	{r4, r5, r6, lr}
    7436:	4604      	mov	r4, r0
    7438:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    743a:	f7ff ffeb 	bl	7414 <channel_handler_get>

    if (handler)
    743e:	b120      	cbz	r0, 744a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    7440:	6806      	ldr	r6, [r0, #0]
    7442:	6842      	ldr	r2, [r0, #4]
    7444:	4629      	mov	r1, r5
    7446:	4620      	mov	r0, r4
    7448:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    744a:	4b04      	ldr	r3, [pc, #16]	; (745c <call_handler+0x28>)
    744c:	689b      	ldr	r3, [r3, #8]
    744e:	b123      	cbz	r3, 745a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7450:	4a02      	ldr	r2, [pc, #8]	; (745c <call_handler+0x28>)
    7452:	68d2      	ldr	r2, [r2, #12]
    7454:	4629      	mov	r1, r5
    7456:	4620      	mov	r0, r4
    7458:	4798      	blx	r3
    }
}
    745a:	bd70      	pop	{r4, r5, r6, pc}
    745c:	2000012c 	.word	0x2000012c

00007460 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    7460:	b570      	push	{r4, r5, r6, lr}
    7462:	4606      	mov	r6, r0
    7464:	460c      	mov	r4, r1
    7466:	4615      	mov	r5, r2
    if (is_level(trigger))
    7468:	4608      	mov	r0, r1
    746a:	f006 fca8 	bl	ddbe <is_level>
    746e:	b960      	cbnz	r0, 748a <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7470:	2d02      	cmp	r5, #2
    7472:	d026      	beq.n	74c2 <next_sense_cond_call_handler+0x62>
    7474:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    7476:	4630      	mov	r0, r6
    7478:	f006 fc79 	bl	dd6e <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    747c:	2c03      	cmp	r4, #3
    747e:	d024      	beq.n	74ca <next_sense_cond_call_handler+0x6a>
    7480:	2d02      	cmp	r5, #2
    7482:	d020      	beq.n	74c6 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7484:	2d03      	cmp	r5, #3
    7486:	d025      	beq.n	74d4 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    7488:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    748a:	4621      	mov	r1, r4
    748c:	4630      	mov	r0, r6
    748e:	f7ff ffd1 	bl	7434 <call_handler>
    *p_pin = pin_number & 0x1F;
    7492:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    7496:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7498:	2a01      	cmp	r2, #1
    749a:	d010      	beq.n	74be <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    749c:	4a0f      	ldr	r2, [pc, #60]	; (74dc <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    749e:	3380      	adds	r3, #128	; 0x80
    74a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    74a8:	429d      	cmp	r5, r3
    74aa:	d1ed      	bne.n	7488 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    74ac:	2100      	movs	r1, #0
    74ae:	4630      	mov	r0, r6
    74b0:	f006 fc5d 	bl	dd6e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    74b4:	4629      	mov	r1, r5
    74b6:	4630      	mov	r0, r6
    74b8:	f006 fc59 	bl	dd6e <nrf_gpio_cfg_sense_set>
    74bc:	e7e4      	b.n	7488 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    74be:	4a08      	ldr	r2, [pc, #32]	; (74e0 <next_sense_cond_call_handler+0x80>)
    74c0:	e7ed      	b.n	749e <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    74c2:	2103      	movs	r1, #3
    74c4:	e7d7      	b.n	7476 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    74c6:	2c01      	cmp	r4, #1
    74c8:	d1dc      	bne.n	7484 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    74ca:	4621      	mov	r1, r4
    74cc:	4630      	mov	r0, r6
    74ce:	f7ff ffb1 	bl	7434 <call_handler>
}
    74d2:	e7d9      	b.n	7488 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    74d4:	2c02      	cmp	r4, #2
    74d6:	d1d7      	bne.n	7488 <next_sense_cond_call_handler+0x28>
    74d8:	e7f7      	b.n	74ca <next_sense_cond_call_handler+0x6a>
    74da:	bf00      	nop
    74dc:	50842500 	.word	0x50842500
    74e0:	50842800 	.word	0x50842800

000074e4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    74e4:	f100 0208 	add.w	r2, r0, #8
    74e8:	4b0e      	ldr	r3, [pc, #56]	; (7524 <release_handler+0x40>)
    74ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    74ee:	f413 7f80 	tst.w	r3, #256	; 0x100
    74f2:	d016      	beq.n	7522 <release_handler+0x3e>
{
    74f4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    74f6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    74fa:	4610      	mov	r0, r2
    74fc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7500:	4a08      	ldr	r2, [pc, #32]	; (7524 <release_handler+0x40>)
    7502:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    7506:	4620      	mov	r0, r4
    7508:	f7ff ff2e 	bl	7368 <handler_in_use>
    750c:	b100      	cbz	r0, 7510 <release_handler+0x2c>
}
    750e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    7510:	4804      	ldr	r0, [pc, #16]	; (7524 <release_handler+0x40>)
    7512:	2300      	movs	r3, #0
    7514:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7518:	4621      	mov	r1, r4
    751a:	3074      	adds	r0, #116	; 0x74
    751c:	f7ff fdb4 	bl	7088 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7520:	e7f5      	b.n	750e <release_handler+0x2a>
    7522:	4770      	bx	lr
    7524:	2000012c 	.word	0x2000012c

00007528 <pin_handler_trigger_uninit>:
{
    7528:	b510      	push	{r4, lr}
    752a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    752c:	f7ff fef4 	bl	7318 <pin_in_use_by_te>
    7530:	b150      	cbz	r0, 7548 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7532:	4620      	mov	r0, r4
    7534:	f7ff ff10 	bl	7358 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7538:	4b08      	ldr	r3, [pc, #32]	; (755c <pin_handler_trigger_uninit+0x34>)
    753a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    753e:	2200      	movs	r2, #0
    7540:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    7544:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7548:	4620      	mov	r0, r4
    754a:	f7ff ffcb 	bl	74e4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    754e:	3408      	adds	r4, #8
    7550:	4b03      	ldr	r3, [pc, #12]	; (7560 <pin_handler_trigger_uninit+0x38>)
    7552:	2200      	movs	r2, #0
    7554:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7558:	bd10      	pop	{r4, pc}
    755a:	bf00      	nop
    755c:	5000d000 	.word	0x5000d000
    7560:	2000012c 	.word	0x2000012c

00007564 <pin_handler_set>:
{
    7564:	b570      	push	{r4, r5, r6, lr}
    7566:	b082      	sub	sp, #8
    7568:	4605      	mov	r5, r0
    756a:	460e      	mov	r6, r1
    756c:	4614      	mov	r4, r2
    release_handler(pin);
    756e:	f7ff ffb9 	bl	74e4 <release_handler>
    if (!handler)
    7572:	b326      	cbz	r6, 75be <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    7574:	4621      	mov	r1, r4
    7576:	4630      	mov	r0, r6
    7578:	f7ff ff10 	bl	739c <find_handler>
    if (handler_id < 0)
    757c:	1e03      	subs	r3, r0, #0
    757e:	db13      	blt.n	75a8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7580:	4910      	ldr	r1, [pc, #64]	; (75c4 <pin_handler_set+0x60>)
    7582:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7586:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    758a:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    758c:	f105 0008 	add.w	r0, r5, #8
    7590:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    7594:	025b      	lsls	r3, r3, #9
    7596:	b29b      	uxth	r3, r3
    7598:	4313      	orrs	r3, r2
    759a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    759e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    75a2:	4809      	ldr	r0, [pc, #36]	; (75c8 <pin_handler_set+0x64>)
}
    75a4:	b002      	add	sp, #8
    75a6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    75a8:	f10d 0107 	add.w	r1, sp, #7
    75ac:	4807      	ldr	r0, [pc, #28]	; (75cc <pin_handler_set+0x68>)
    75ae:	f7ff fd47 	bl	7040 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    75b2:	4b05      	ldr	r3, [pc, #20]	; (75c8 <pin_handler_set+0x64>)
    75b4:	4298      	cmp	r0, r3
    75b6:	d1f5      	bne.n	75a4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    75b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75bc:	e7e0      	b.n	7580 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    75be:	4802      	ldr	r0, [pc, #8]	; (75c8 <pin_handler_set+0x64>)
    75c0:	e7f0      	b.n	75a4 <pin_handler_set+0x40>
    75c2:	bf00      	nop
    75c4:	2000012c 	.word	0x2000012c
    75c8:	0bad0000 	.word	0x0bad0000
    75cc:	200001a0 	.word	0x200001a0

000075d0 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    75d0:	b570      	push	{r4, r5, r6, lr}
    75d2:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    75d4:	466a      	mov	r2, sp
    75d6:	2102      	movs	r1, #2
    75d8:	2000      	movs	r0, #0
    75da:	f7ff fe73 	bl	72c4 <nrf_gpio_latches_read_and_clear>
    75de:	e03e      	b.n	765e <port_event_handle+0x8e>
    75e0:	4e21      	ldr	r6, [pc, #132]	; (7668 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    75e2:	f105 0380 	add.w	r3, r5, #128	; 0x80
    75e6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    75ea:	f3c2 4201 	ubfx	r2, r2, #16, #2
    75ee:	f7ff ff37 	bl	7460 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    75f2:	2301      	movs	r3, #1
    75f4:	40ab      	lsls	r3, r5
    75f6:	6233      	str	r3, [r6, #32]
            while (latch[i])
    75f8:	ab02      	add	r3, sp, #8
    75fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    75fe:	f853 0c08 	ldr.w	r0, [r3, #-8]
    7602:	b1f8      	cbz	r0, 7644 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    7604:	fa90 f0a0 	rbit	r0, r0
    7608:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    760c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7610:	f100 0208 	add.w	r2, r0, #8
    7614:	4b15      	ldr	r3, [pc, #84]	; (766c <port_event_handle+0x9c>)
    7616:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    761a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    761e:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    7620:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7624:	f81d 2005 	ldrb.w	r2, [sp, r5]
    7628:	2301      	movs	r3, #1
    762a:	40b3      	lsls	r3, r6
    762c:	43db      	mvns	r3, r3
    762e:	b25b      	sxtb	r3, r3
    7630:	4013      	ands	r3, r2
    7632:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    7636:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    763a:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    763c:	2b01      	cmp	r3, #1
    763e:	d0cf      	beq.n	75e0 <port_event_handle+0x10>
        case 0: return NRF_P0;
    7640:	4e0b      	ldr	r6, [pc, #44]	; (7670 <port_event_handle+0xa0>)
    7642:	e7ce      	b.n	75e2 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7644:	3401      	adds	r4, #1
    7646:	2c01      	cmp	r4, #1
    7648:	d9d6      	bls.n	75f8 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    764a:	4b0a      	ldr	r3, [pc, #40]	; (7674 <port_event_handle+0xa4>)
    764c:	2200      	movs	r2, #0
    764e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7652:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    7656:	4668      	mov	r0, sp
    7658:	f006 fbb6 	bl	ddc8 <latch_pending_read_and_check>
    765c:	b108      	cbz	r0, 7662 <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    765e:	2400      	movs	r4, #0
    7660:	e7f1      	b.n	7646 <port_event_handle+0x76>
}
    7662:	b002      	add	sp, #8
    7664:	bd70      	pop	{r4, r5, r6, pc}
    7666:	bf00      	nop
    7668:	50842800 	.word	0x50842800
    766c:	2000012c 	.word	0x2000012c
    7670:	50842500 	.word	0x50842500
    7674:	5000d000 	.word	0x5000d000

00007678 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7678:	b538      	push	{r3, r4, r5, lr}
    767a:	4604      	mov	r4, r0
    while (mask)
    767c:	e018      	b.n	76b0 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    767e:	fa94 f3a4 	rbit	r3, r4
    7682:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7686:	2201      	movs	r2, #1
    7688:	409a      	lsls	r2, r3
    768a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    768e:	4a0a      	ldr	r2, [pc, #40]	; (76b8 <gpiote_evt_handle+0x40>)
    7690:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7694:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7698:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    769c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    76a0:	f3c0 4001 	ubfx	r0, r0, #16, #2
    76a4:	f006 fb89 	bl	ddba <gpiote_polarity_to_trigger>
    76a8:	4601      	mov	r1, r0
    76aa:	4628      	mov	r0, r5
    76ac:	f7ff fec2 	bl	7434 <call_handler>
    while (mask)
    76b0:	2c00      	cmp	r4, #0
    76b2:	d1e4      	bne.n	767e <gpiote_evt_handle+0x6>
    }
}
    76b4:	bd38      	pop	{r3, r4, r5, pc}
    76b6:	bf00      	nop
    76b8:	5000d000 	.word	0x5000d000

000076bc <nrfx_gpiote_input_configure>:
{
    76bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76c0:	b084      	sub	sp, #16
    76c2:	4604      	mov	r4, r0
    76c4:	4615      	mov	r5, r2
    76c6:	461e      	mov	r6, r3
    if (p_input_config)
    76c8:	b309      	cbz	r1, 770e <nrfx_gpiote_input_configure+0x52>
    76ca:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    76cc:	f006 fb5f 	bl	dd8e <pin_is_task_output>
    76d0:	2800      	cmp	r0, #0
    76d2:	d13f      	bne.n	7754 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    76d4:	2300      	movs	r3, #0
    76d6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    76da:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    76de:	9301      	str	r3, [sp, #4]
    76e0:	9300      	str	r3, [sp, #0]
    76e2:	463b      	mov	r3, r7
    76e4:	f10d 020f 	add.w	r2, sp, #15
    76e8:	f10d 010e 	add.w	r1, sp, #14
    76ec:	4620      	mov	r0, r4
    76ee:	f7ff fd77 	bl	71e0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    76f2:	4a39      	ldr	r2, [pc, #228]	; (77d8 <nrfx_gpiote_input_configure+0x11c>)
    76f4:	f104 0108 	add.w	r1, r4, #8
    76f8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    76fc:	f023 0302 	bic.w	r3, r3, #2
    7700:	b29b      	uxth	r3, r3
    7702:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7706:	f043 0301 	orr.w	r3, r3, #1
    770a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    770e:	b1bd      	cbz	r5, 7740 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7710:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7712:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    7716:	4620      	mov	r0, r4
    7718:	f7ff fe14 	bl	7344 <pin_is_output>
    771c:	b1e0      	cbz	r0, 7758 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    771e:	f1b8 0f00 	cmp.w	r8, #0
    7722:	d153      	bne.n	77cc <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7724:	4a2c      	ldr	r2, [pc, #176]	; (77d8 <nrfx_gpiote_input_configure+0x11c>)
    7726:	f104 0108 	add.w	r1, r4, #8
    772a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    772e:	f023 031c 	bic.w	r3, r3, #28
    7732:	b29b      	uxth	r3, r3
    7734:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7738:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    773c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    7740:	2e00      	cmp	r6, #0
    7742:	d047      	beq.n	77d4 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7744:	6872      	ldr	r2, [r6, #4]
    7746:	6831      	ldr	r1, [r6, #0]
    7748:	4620      	mov	r0, r4
    774a:	f7ff ff0b 	bl	7564 <pin_handler_set>
}
    774e:	b004      	add	sp, #16
    7750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    7754:	4821      	ldr	r0, [pc, #132]	; (77dc <nrfx_gpiote_input_configure+0x120>)
    7756:	e7fa      	b.n	774e <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7758:	4a1f      	ldr	r2, [pc, #124]	; (77d8 <nrfx_gpiote_input_configure+0x11c>)
    775a:	f104 0108 	add.w	r1, r4, #8
    775e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7762:	f023 0320 	bic.w	r3, r3, #32
    7766:	04db      	lsls	r3, r3, #19
    7768:	0cdb      	lsrs	r3, r3, #19
    776a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    776e:	f1b8 0f00 	cmp.w	r8, #0
    7772:	d0d7      	beq.n	7724 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    7774:	2f03      	cmp	r7, #3
    7776:	d82b      	bhi.n	77d0 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7778:	686b      	ldr	r3, [r5, #4]
    777a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    777c:	b947      	cbnz	r7, 7790 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    777e:	4b18      	ldr	r3, [pc, #96]	; (77e0 <nrfx_gpiote_input_configure+0x124>)
    7780:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    7784:	2200      	movs	r2, #0
    7786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    778a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    778e:	e7c9      	b.n	7724 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    7790:	4638      	mov	r0, r7
    7792:	f006 fb13 	bl	ddbc <gpiote_trigger_to_polarity>
    7796:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7798:	4811      	ldr	r0, [pc, #68]	; (77e0 <nrfx_gpiote_input_configure+0x124>)
    779a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    779e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    77a2:	f022 0203 	bic.w	r2, r2, #3
    77a6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    77aa:	4622      	mov	r2, r4
    77ac:	4629      	mov	r1, r5
    77ae:	f006 faa6 	bl	dcfe <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    77b2:	4a09      	ldr	r2, [pc, #36]	; (77d8 <nrfx_gpiote_input_configure+0x11c>)
    77b4:	f104 0108 	add.w	r1, r4, #8
    77b8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    77bc:	036d      	lsls	r5, r5, #13
    77be:	b2ad      	uxth	r5, r5
    77c0:	432b      	orrs	r3, r5
    77c2:	f043 0320 	orr.w	r3, r3, #32
    77c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    77ca:	e7ab      	b.n	7724 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    77cc:	4803      	ldr	r0, [pc, #12]	; (77dc <nrfx_gpiote_input_configure+0x120>)
    77ce:	e7be      	b.n	774e <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    77d0:	4802      	ldr	r0, [pc, #8]	; (77dc <nrfx_gpiote_input_configure+0x120>)
    77d2:	e7bc      	b.n	774e <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    77d4:	4803      	ldr	r0, [pc, #12]	; (77e4 <nrfx_gpiote_input_configure+0x128>)
    77d6:	e7ba      	b.n	774e <nrfx_gpiote_input_configure+0x92>
    77d8:	2000012c 	.word	0x2000012c
    77dc:	0bad0004 	.word	0x0bad0004
    77e0:	5000d000 	.word	0x5000d000
    77e4:	0bad0000 	.word	0x0bad0000

000077e8 <nrfx_gpiote_output_configure>:
{
    77e8:	b570      	push	{r4, r5, r6, lr}
    77ea:	b084      	sub	sp, #16
    77ec:	4604      	mov	r4, r0
    77ee:	4615      	mov	r5, r2
    if (p_config)
    77f0:	b329      	cbz	r1, 783e <nrfx_gpiote_output_configure+0x56>
    77f2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    77f4:	f006 fada 	bl	ddac <pin_is_input>
    77f8:	b120      	cbz	r0, 7804 <nrfx_gpiote_output_configure+0x1c>
    77fa:	4620      	mov	r0, r4
    77fc:	f7ff fd8c 	bl	7318 <pin_in_use_by_te>
    7800:	2800      	cmp	r0, #0
    7802:	d13a      	bne.n	787a <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7804:	4620      	mov	r0, r4
    7806:	f7ff fd91 	bl	732c <pin_has_trigger>
    780a:	b110      	cbz	r0, 7812 <nrfx_gpiote_output_configure+0x2a>
    780c:	7873      	ldrb	r3, [r6, #1]
    780e:	2b01      	cmp	r3, #1
    7810:	d033      	beq.n	787a <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7812:	2301      	movs	r3, #1
    7814:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7818:	2300      	movs	r3, #0
    781a:	9301      	str	r3, [sp, #4]
    781c:	9600      	str	r6, [sp, #0]
    781e:	1cb3      	adds	r3, r6, #2
    7820:	1c72      	adds	r2, r6, #1
    7822:	f10d 010f 	add.w	r1, sp, #15
    7826:	4620      	mov	r0, r4
    7828:	f7ff fcda 	bl	71e0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    782c:	4a20      	ldr	r2, [pc, #128]	; (78b0 <nrfx_gpiote_output_configure+0xc8>)
    782e:	f104 0108 	add.w	r1, r4, #8
    7832:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7836:	f043 0303 	orr.w	r3, r3, #3
    783a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    783e:	b395      	cbz	r5, 78a6 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    7840:	4620      	mov	r0, r4
    7842:	f006 fab3 	bl	ddac <pin_is_input>
    7846:	bb80      	cbnz	r0, 78aa <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    7848:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    784a:	4b1a      	ldr	r3, [pc, #104]	; (78b4 <nrfx_gpiote_output_configure+0xcc>)
    784c:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    7850:	2100      	movs	r1, #0
    7852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    7856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    785a:	4a15      	ldr	r2, [pc, #84]	; (78b0 <nrfx_gpiote_output_configure+0xc8>)
    785c:	f104 0108 	add.w	r1, r4, #8
    7860:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7864:	f023 0320 	bic.w	r3, r3, #32
    7868:	04db      	lsls	r3, r3, #19
    786a:	0cdb      	lsrs	r3, r3, #19
    786c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7870:	786b      	ldrb	r3, [r5, #1]
    7872:	b923      	cbnz	r3, 787e <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    7874:	4810      	ldr	r0, [pc, #64]	; (78b8 <nrfx_gpiote_output_configure+0xd0>)
}
    7876:	b004      	add	sp, #16
    7878:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    787a:	4810      	ldr	r0, [pc, #64]	; (78bc <nrfx_gpiote_output_configure+0xd4>)
    787c:	e7fb      	b.n	7876 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    787e:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7880:	9200      	str	r2, [sp, #0]
    7882:	4622      	mov	r2, r4
    7884:	4631      	mov	r1, r6
    7886:	480b      	ldr	r0, [pc, #44]	; (78b4 <nrfx_gpiote_output_configure+0xcc>)
    7888:	f006 fa52 	bl	dd30 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    788c:	4a08      	ldr	r2, [pc, #32]	; (78b0 <nrfx_gpiote_output_configure+0xc8>)
    788e:	3408      	adds	r4, #8
    7890:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    7894:	0376      	lsls	r6, r6, #13
    7896:	b2b6      	uxth	r6, r6
    7898:	4333      	orrs	r3, r6
    789a:	f043 0320 	orr.w	r3, r3, #32
    789e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    78a2:	4805      	ldr	r0, [pc, #20]	; (78b8 <nrfx_gpiote_output_configure+0xd0>)
    78a4:	e7e7      	b.n	7876 <nrfx_gpiote_output_configure+0x8e>
    78a6:	4804      	ldr	r0, [pc, #16]	; (78b8 <nrfx_gpiote_output_configure+0xd0>)
    78a8:	e7e5      	b.n	7876 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    78aa:	4804      	ldr	r0, [pc, #16]	; (78bc <nrfx_gpiote_output_configure+0xd4>)
    78ac:	e7e3      	b.n	7876 <nrfx_gpiote_output_configure+0x8e>
    78ae:	bf00      	nop
    78b0:	2000012c 	.word	0x2000012c
    78b4:	5000d000 	.word	0x5000d000
    78b8:	0bad0000 	.word	0x0bad0000
    78bc:	0bad0004 	.word	0x0bad0004

000078c0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    78c0:	4b01      	ldr	r3, [pc, #4]	; (78c8 <nrfx_gpiote_global_callback_set+0x8>)
    78c2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    78c4:	60d9      	str	r1, [r3, #12]
}
    78c6:	4770      	bx	lr
    78c8:	2000012c 	.word	0x2000012c

000078cc <nrfx_gpiote_channel_get>:
{
    78cc:	b538      	push	{r3, r4, r5, lr}
    78ce:	4604      	mov	r4, r0
    78d0:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    78d2:	f7ff fd21 	bl	7318 <pin_in_use_by_te>
    78d6:	b140      	cbz	r0, 78ea <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    78d8:	f104 0008 	add.w	r0, r4, #8
    78dc:	4b04      	ldr	r3, [pc, #16]	; (78f0 <nrfx_gpiote_channel_get+0x24>)
    78de:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    78e2:	0b5b      	lsrs	r3, r3, #13
    78e4:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    78e6:	4803      	ldr	r0, [pc, #12]	; (78f4 <nrfx_gpiote_channel_get+0x28>)
}
    78e8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    78ea:	4803      	ldr	r0, [pc, #12]	; (78f8 <nrfx_gpiote_channel_get+0x2c>)
    78ec:	e7fc      	b.n	78e8 <nrfx_gpiote_channel_get+0x1c>
    78ee:	bf00      	nop
    78f0:	2000012c 	.word	0x2000012c
    78f4:	0bad0000 	.word	0x0bad0000
    78f8:	0bad0004 	.word	0x0bad0004

000078fc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    78fc:	4b0f      	ldr	r3, [pc, #60]	; (793c <nrfx_gpiote_init+0x40>)
    78fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7902:	b10b      	cbz	r3, 7908 <nrfx_gpiote_init+0xc>
        return err_code;
    7904:	480e      	ldr	r0, [pc, #56]	; (7940 <nrfx_gpiote_init+0x44>)
}
    7906:	4770      	bx	lr
{
    7908:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    790a:	4c0e      	ldr	r4, [pc, #56]	; (7944 <nrfx_gpiote_init+0x48>)
    790c:	2260      	movs	r2, #96	; 0x60
    790e:	2100      	movs	r1, #0
    7910:	4620      	mov	r0, r4
    7912:	f005 f907 	bl	cb24 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7916:	200d      	movs	r0, #13
    7918:	f004 ffcd 	bl	c8b6 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    791c:	4b0a      	ldr	r3, [pc, #40]	; (7948 <nrfx_gpiote_init+0x4c>)
    791e:	2200      	movs	r2, #0
    7920:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7924:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7928:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    792c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7930:	2301      	movs	r3, #1
    7932:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7936:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    7938:	4804      	ldr	r0, [pc, #16]	; (794c <nrfx_gpiote_init+0x50>)
}
    793a:	bd10      	pop	{r4, pc}
    793c:	2000012c 	.word	0x2000012c
    7940:	0bad0005 	.word	0x0bad0005
    7944:	2000013c 	.word	0x2000013c
    7948:	5000d000 	.word	0x5000d000
    794c:	0bad0000 	.word	0x0bad0000

00007950 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7950:	4b03      	ldr	r3, [pc, #12]	; (7960 <nrfx_gpiote_is_init+0x10>)
    7952:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7956:	3800      	subs	r0, #0
    7958:	bf18      	it	ne
    795a:	2001      	movne	r0, #1
    795c:	4770      	bx	lr
    795e:	bf00      	nop
    7960:	2000012c 	.word	0x2000012c

00007964 <nrfx_gpiote_channel_free>:
{
    7964:	b508      	push	{r3, lr}
    7966:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7968:	4801      	ldr	r0, [pc, #4]	; (7970 <nrfx_gpiote_channel_free+0xc>)
    796a:	f7ff fb8d 	bl	7088 <nrfx_flag32_free>
}
    796e:	bd08      	pop	{r3, pc}
    7970:	2000019c 	.word	0x2000019c

00007974 <nrfx_gpiote_channel_alloc>:
{
    7974:	b508      	push	{r3, lr}
    7976:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7978:	4801      	ldr	r0, [pc, #4]	; (7980 <nrfx_gpiote_channel_alloc+0xc>)
    797a:	f7ff fb61 	bl	7040 <nrfx_flag32_alloc>
}
    797e:	bd08      	pop	{r3, pc}
    7980:	2000019c 	.word	0x2000019c

00007984 <nrfx_gpiote_trigger_enable>:
{
    7984:	b538      	push	{r3, r4, r5, lr}
    7986:	4604      	mov	r4, r0
    7988:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    798a:	f7ff fcc5 	bl	7318 <pin_in_use_by_te>
    798e:	b300      	cbz	r0, 79d2 <nrfx_gpiote_trigger_enable+0x4e>
    7990:	4620      	mov	r0, r4
    7992:	f006 fa0b 	bl	ddac <pin_is_input>
    7996:	b1e0      	cbz	r0, 79d2 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    7998:	4620      	mov	r0, r4
    799a:	f7ff fcdd 	bl	7358 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    799e:	0083      	lsls	r3, r0, #2
    79a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    79a4:	b29b      	uxth	r3, r3
    79a6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    79aa:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    79ae:	2200      	movs	r2, #0
    79b0:	601a      	str	r2, [r3, #0]
    79b2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    79b4:	4a0b      	ldr	r2, [pc, #44]	; (79e4 <nrfx_gpiote_trigger_enable+0x60>)
    79b6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    79ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    79be:	f043 0301 	orr.w	r3, r3, #1
    79c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    79c6:	b15d      	cbz	r5, 79e0 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    79c8:	2301      	movs	r3, #1
    79ca:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    79cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    79d0:	e006      	b.n	79e0 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    79d2:	4620      	mov	r0, r4
    79d4:	f7ff fcf8 	bl	73c8 <get_initial_sense>
    79d8:	4601      	mov	r1, r0
    79da:	4620      	mov	r0, r4
    79dc:	f006 f9c7 	bl	dd6e <nrf_gpio_cfg_sense_set>
}
    79e0:	bd38      	pop	{r3, r4, r5, pc}
    79e2:	bf00      	nop
    79e4:	5000d000 	.word	0x5000d000

000079e8 <nrfx_gpiote_trigger_disable>:
{
    79e8:	b510      	push	{r4, lr}
    79ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    79ec:	f7ff fc94 	bl	7318 <pin_in_use_by_te>
    79f0:	b1a0      	cbz	r0, 7a1c <nrfx_gpiote_trigger_disable+0x34>
    79f2:	4620      	mov	r0, r4
    79f4:	f006 f9da 	bl	ddac <pin_is_input>
    79f8:	b180      	cbz	r0, 7a1c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    79fa:	4620      	mov	r0, r4
    79fc:	f7ff fcac 	bl	7358 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7a00:	2201      	movs	r2, #1
    7a02:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    7a04:	4b08      	ldr	r3, [pc, #32]	; (7a28 <nrfx_gpiote_trigger_disable+0x40>)
    7a06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7a0a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7a0e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    7a12:	f022 0203 	bic.w	r2, r2, #3
    7a16:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    7a1a:	e003      	b.n	7a24 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7a1c:	2100      	movs	r1, #0
    7a1e:	4620      	mov	r0, r4
    7a20:	f006 f9a5 	bl	dd6e <nrf_gpio_cfg_sense_set>
}
    7a24:	bd10      	pop	{r4, pc}
    7a26:	bf00      	nop
    7a28:	5000d000 	.word	0x5000d000

00007a2c <nrfx_gpiote_pin_uninit>:
{
    7a2c:	b510      	push	{r4, lr}
    7a2e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7a30:	f7ff fc68 	bl	7304 <pin_in_use>
    7a34:	b908      	cbnz	r0, 7a3a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    7a36:	4806      	ldr	r0, [pc, #24]	; (7a50 <nrfx_gpiote_pin_uninit+0x24>)
}
    7a38:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    7a3a:	4620      	mov	r0, r4
    7a3c:	f7ff ffd4 	bl	79e8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7a40:	4620      	mov	r0, r4
    7a42:	f7ff fd71 	bl	7528 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    7a46:	4620      	mov	r0, r4
    7a48:	f7ff fc26 	bl	7298 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    7a4c:	4801      	ldr	r0, [pc, #4]	; (7a54 <nrfx_gpiote_pin_uninit+0x28>)
    7a4e:	e7f3      	b.n	7a38 <nrfx_gpiote_pin_uninit+0xc>
    7a50:	0bad0004 	.word	0x0bad0004
    7a54:	0bad0000 	.word	0x0bad0000

00007a58 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7a58:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7a5a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7a5c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a60:	2100      	movs	r1, #0
    uint32_t status = 0;
    7a62:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a64:	e003      	b.n	7a6e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    7a66:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7a68:	3304      	adds	r3, #4
    7a6a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7a6c:	3101      	adds	r1, #1
    7a6e:	2907      	cmp	r1, #7
    7a70:	d814      	bhi.n	7a9c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a72:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    7a76:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    7a7a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7a7c:	2a00      	cmp	r2, #0
    7a7e:	d0f2      	beq.n	7a66 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    7a80:	4a0c      	ldr	r2, [pc, #48]	; (7ab4 <nrfx_gpiote_irq_handler+0x5c>)
    7a82:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7a86:	4210      	tst	r0, r2
    7a88:	d0ed      	beq.n	7a66 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7a8a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    7a8e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7a92:	2500      	movs	r5, #0
    7a94:	6015      	str	r5, [r2, #0]
    7a96:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7a98:	4304      	orrs	r4, r0
    7a9a:	e7e4      	b.n	7a66 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a9c:	4b05      	ldr	r3, [pc, #20]	; (7ab4 <nrfx_gpiote_irq_handler+0x5c>)
    7a9e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7aa2:	b91b      	cbnz	r3, 7aac <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    7aa4:	4620      	mov	r0, r4
    7aa6:	f7ff fde7 	bl	7678 <gpiote_evt_handle>
}
    7aaa:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7aac:	f7ff fd90 	bl	75d0 <port_event_handle>
    7ab0:	e7f8      	b.n	7aa4 <nrfx_gpiote_irq_handler+0x4c>
    7ab2:	bf00      	nop
    7ab4:	5000d000 	.word	0x5000d000

00007ab8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    7ab8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7aba:	4b08      	ldr	r3, [pc, #32]	; (7adc <nrfx_ipc_init+0x24>)
    7abc:	791b      	ldrb	r3, [r3, #4]
    7abe:	b10b      	cbz	r3, 7ac4 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7ac0:	4807      	ldr	r0, [pc, #28]	; (7ae0 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
    7ac2:	bd38      	pop	{r3, r4, r5, pc}
    7ac4:	460d      	mov	r5, r1
    7ac6:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
    7ac8:	202a      	movs	r0, #42	; 0x2a
    7aca:	f004 fef4 	bl	c8b6 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7ace:	4b03      	ldr	r3, [pc, #12]	; (7adc <nrfx_ipc_init+0x24>)
    7ad0:	2201      	movs	r2, #1
    7ad2:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
    7ad4:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
    7ad6:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
    7ad8:	4802      	ldr	r0, [pc, #8]	; (7ae4 <nrfx_ipc_init+0x2c>)
    7ada:	e7f2      	b.n	7ac2 <nrfx_ipc_init+0xa>
    7adc:	200015d0 	.word	0x200015d0
    7ae0:	0bad000c 	.word	0x0bad000c
    7ae4:	0bad0000 	.word	0x0bad0000

00007ae8 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    7ae8:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    7aea:	2300      	movs	r3, #0
    7aec:	e008      	b.n	7b00 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    7aee:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
    7af2:	b2da      	uxtb	r2, r3
    7af4:	f502 72a2 	add.w	r2, r2, #324	; 0x144
    7af8:	490d      	ldr	r1, [pc, #52]	; (7b30 <nrfx_ipc_config_load+0x48>)
    7afa:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    7afe:	3301      	adds	r3, #1
    7b00:	2b0f      	cmp	r3, #15
    7b02:	d9f4      	bls.n	7aee <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    7b04:	2300      	movs	r3, #0
    7b06:	e00a      	b.n	7b1e <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    7b08:	f103 0210 	add.w	r2, r3, #16
    7b0c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
    7b10:	b2da      	uxtb	r2, r3
    7b12:	f502 72b2 	add.w	r2, r2, #356	; 0x164
    7b16:	4906      	ldr	r1, [pc, #24]	; (7b30 <nrfx_ipc_config_load+0x48>)
    7b18:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    7b1c:	3301      	adds	r3, #1
    7b1e:	2b0f      	cmp	r3, #15
    7b20:	d9f2      	bls.n	7b08 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    7b22:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    7b26:	4b02      	ldr	r3, [pc, #8]	; (7b30 <nrfx_ipc_config_load+0x48>)
    7b28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7b2c:	bc10      	pop	{r4}
    7b2e:	4770      	bx	lr
    7b30:	5002a000 	.word	0x5002a000

00007b34 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    7b34:	2301      	movs	r3, #1
    7b36:	4083      	lsls	r3, r0
    7b38:	4a01      	ldr	r2, [pc, #4]	; (7b40 <nrfx_ipc_receive_event_enable+0xc>)
    7b3a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7b3e:	4770      	bx	lr
    7b40:	5002a000 	.word	0x5002a000

00007b44 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    7b44:	2301      	movs	r3, #1
    7b46:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    7b48:	4a01      	ldr	r2, [pc, #4]	; (7b50 <nrfx_ipc_receive_event_disable+0xc>)
    7b4a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7b4e:	4770      	bx	lr
    7b50:	5002a000 	.word	0x5002a000

00007b54 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    7b54:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
    7b56:	4b0c      	ldr	r3, [pc, #48]	; (7b88 <nrfx_ipc_irq_handler+0x34>)
    7b58:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
    7b5c:	4602      	mov	r2, r0
    while (bitmask)
    7b5e:	e00c      	b.n	7b7a <nrfx_ipc_irq_handler+0x26>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    7b60:	fa92 f3a2 	rbit	r3, r2
    7b64:	fab3 f383 	clz	r3, r3
    7b68:	2101      	movs	r1, #1
    7b6a:	4099      	lsls	r1, r3
    7b6c:	ea22 0201 	bic.w	r2, r2, r1
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    7b70:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b72:	4906      	ldr	r1, [pc, #24]	; (7b8c <nrfx_ipc_irq_handler+0x38>)
    7b74:	4419      	add	r1, r3
    7b76:	2300      	movs	r3, #0
    7b78:	600b      	str	r3, [r1, #0]
    while (bitmask)
    7b7a:	2a00      	cmp	r2, #0
    7b7c:	d1f0      	bne.n	7b60 <nrfx_ipc_irq_handler+0xc>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    7b7e:	4b04      	ldr	r3, [pc, #16]	; (7b90 <nrfx_ipc_irq_handler+0x3c>)
    7b80:	681a      	ldr	r2, [r3, #0]
    7b82:	6899      	ldr	r1, [r3, #8]
    7b84:	4790      	blx	r2
}
    7b86:	bd08      	pop	{r3, pc}
    7b88:	5002a000 	.word	0x5002a000
    7b8c:	5002a100 	.word	0x5002a100
    7b90:	200015d0 	.word	0x200015d0

00007b94 <nrf_gpio_cfg>:
{
    7b94:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    7b96:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    7b9a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b9c:	2801      	cmp	r0, #1
    7b9e:	d018      	beq.n	7bd2 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    7ba0:	4d0d      	ldr	r5, [pc, #52]	; (7bd8 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7ba2:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    7ba6:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    7baa:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7bae:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    7bb2:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7bb6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7bbe:	f89d 200c 	ldrb.w	r2, [sp, #12]
    7bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7bc6:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    7bca:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    7bce:	bc30      	pop	{r4, r5}
    7bd0:	4770      	bx	lr
        case 1: return NRF_P1;
    7bd2:	4d02      	ldr	r5, [pc, #8]	; (7bdc <nrf_gpio_cfg+0x48>)
    7bd4:	e7e5      	b.n	7ba2 <nrf_gpio_cfg+0xe>
    7bd6:	bf00      	nop
    7bd8:	50842500 	.word	0x50842500
    7bdc:	50842800 	.word	0x50842800

00007be0 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    7be0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    7be4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7be6:	2801      	cmp	r0, #1
    7be8:	d00a      	beq.n	7c00 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    7bea:	4906      	ldr	r1, [pc, #24]	; (7c04 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7bec:	3280      	adds	r2, #128	; 0x80
    7bee:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7bf2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7bf6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    7bfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    7bfe:	4770      	bx	lr
        case 1: return NRF_P1;
    7c00:	4901      	ldr	r1, [pc, #4]	; (7c08 <nrf_gpio_cfg_default+0x28>)
    7c02:	e7f3      	b.n	7bec <nrf_gpio_cfg_default+0xc>
    7c04:	50842500 	.word	0x50842500
    7c08:	50842800 	.word	0x50842800

00007c0c <nrf_gpio_pin_write>:
    if (value == 0)
    7c0c:	b959      	cbnz	r1, 7c26 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    7c0e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    7c12:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c14:	2801      	cmp	r0, #1
    7c16:	d004      	beq.n	7c22 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    7c18:	4a09      	ldr	r2, [pc, #36]	; (7c40 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7c1a:	2301      	movs	r3, #1
    7c1c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    7c1e:	60d3      	str	r3, [r2, #12]
}
    7c20:	4770      	bx	lr
        case 1: return NRF_P1;
    7c22:	4a08      	ldr	r2, [pc, #32]	; (7c44 <nrf_gpio_pin_write+0x38>)
    7c24:	e7f9      	b.n	7c1a <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    7c26:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    7c2a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c2c:	2801      	cmp	r0, #1
    7c2e:	d004      	beq.n	7c3a <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    7c30:	4a03      	ldr	r2, [pc, #12]	; (7c40 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7c32:	2301      	movs	r3, #1
    7c34:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    7c36:	6093      	str	r3, [r2, #8]
}
    7c38:	4770      	bx	lr
        case 1: return NRF_P1;
    7c3a:	4a02      	ldr	r2, [pc, #8]	; (7c44 <nrf_gpio_pin_write+0x38>)
    7c3c:	e7f9      	b.n	7c32 <nrf_gpio_pin_write+0x26>
    7c3e:	bf00      	nop
    7c40:	50842500 	.word	0x50842500
    7c44:	50842800 	.word	0x50842800

00007c48 <configure_pins>:
    p_cb->transfer_in_progress = false;
}

static void configure_pins(nrfx_spim_t const *        p_instance,
                           nrfx_spim_config_t const * p_config)
{
    7c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c4a:	b083      	sub	sp, #12
    7c4c:	460c      	mov	r4, r1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    7c4e:	6806      	ldr	r6, [r0, #0]

    if (!p_config->skip_gpio_cfg)
    7c50:	7ccb      	ldrb	r3, [r1, #19]
    7c52:	2b00      	cmp	r3, #0
    7c54:	d15e      	bne.n	7d14 <configure_pins+0xcc>
    {
        // Configure pin drive - high drive for 32 MHz clock frequency.
        nrf_gpio_pin_drive_t pin_drive;
#if NRF_SPIM_HAS_32_MHZ_FREQ
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
    7c56:	688b      	ldr	r3, [r1, #8]
                    ? NRF_GPIO_PIN_H0H1
                    : NRF_GPIO_PIN_S0S1;
    7c58:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    7c5c:	d06c      	beq.n	7d38 <configure_pins+0xf0>
    7c5e:	2700      	movs	r7, #0
        //   used: 0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3
        //   (CPOL = 1);
        //   according to the reference manual guidelines, this pin and its
        //   input buffer must always be connected for the SPI to work
        nrf_gpio_pin_write(p_config->sck_pin,
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
    7c60:	7b21      	ldrb	r1, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    7c62:	2901      	cmp	r1, #1
    7c64:	bf94      	ite	ls
    7c66:	2100      	movls	r1, #0
    7c68:	2101      	movhi	r1, #1
    7c6a:	7820      	ldrb	r0, [r4, #0]
    7c6c:	f7ff ffce 	bl	7c0c <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
    7c70:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    7c72:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7c76:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c78:	2b01      	cmp	r3, #1
    7c7a:	d05f      	beq.n	7d3c <configure_pins+0xf4>
        case 0: return NRF_P0;
    7c7c:	4948      	ldr	r1, [pc, #288]	; (7da0 <configure_pins+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7c7e:	3280      	adds	r2, #128	; 0x80
    7c80:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7c84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7c88:	023d      	lsls	r5, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7c8a:	f045 0001 	orr.w	r0, r5, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7c8e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7c90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                     NRF_GPIO_PIN_INPUT_CONNECT,
                     NRF_GPIO_PIN_NOPULL,
                     pin_drive,
                     NRF_GPIO_PIN_NOSENSE);
        // - MOSI (optional) - output with initial value 0
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7c94:	7863      	ldrb	r3, [r4, #1]
    7c96:	2bff      	cmp	r3, #255	; 0xff
    7c98:	d019      	beq.n	7cce <configure_pins+0x86>
    *p_pin = pin_number & 0x1F;
    7c9a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7c9e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ca0:	2b01      	cmp	r3, #1
    7ca2:	d04d      	beq.n	7d40 <configure_pins+0xf8>
        case 0: return NRF_P0;
    7ca4:	493e      	ldr	r1, [pc, #248]	; (7da0 <configure_pins+0x158>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7ca6:	2301      	movs	r3, #1
    7ca8:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7caa:	60cb      	str	r3, [r1, #12]
        {
            nrf_gpio_pin_write(p_config->mosi_pin, 0);
            nrf_gpio_cfg(p_config->mosi_pin,
    7cac:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
    7cae:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7cb2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cb4:	2b01      	cmp	r3, #1
    7cb6:	d045      	beq.n	7d44 <configure_pins+0xfc>
        case 0: return NRF_P0;
    7cb8:	4939      	ldr	r1, [pc, #228]	; (7da0 <configure_pins+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7cba:	3280      	adds	r2, #128	; 0x80
    7cbc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7cc0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7cc4:	f045 0003 	orr.w	r0, r5, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7cc8:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                         NRF_GPIO_PIN_NOPULL,
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
        // - MISO (optional) - input
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    7cce:	78a0      	ldrb	r0, [r4, #2]
    7cd0:	28ff      	cmp	r0, #255	; 0xff
    7cd2:	d139      	bne.n	7d48 <configure_pins+0x100>
                         p_config->miso_pull,
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
        // - Slave Select (optional) - output, initially inactive
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    7cd4:	78e0      	ldrb	r0, [r4, #3]
    7cd6:	28ff      	cmp	r0, #255	; 0xff
    7cd8:	d13e      	bne.n	7d58 <configure_pins+0x110>
                         pin_drive,
                         NRF_GPIO_PIN_NOSENSE);
        }
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        // - DCX (optional) - output.
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    7cda:	7be3      	ldrb	r3, [r4, #15]
    7cdc:	2bff      	cmp	r3, #255	; 0xff
    7cde:	d019      	beq.n	7d14 <configure_pins+0xcc>
    *p_pin = pin_number & 0x1F;
    7ce0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7ce4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ce6:	2b01      	cmp	r3, #1
    7ce8:	d04f      	beq.n	7d8a <configure_pins+0x142>
        case 0: return NRF_P0;
    7cea:	492d      	ldr	r1, [pc, #180]	; (7da0 <configure_pins+0x158>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7cec:	2301      	movs	r3, #1
    7cee:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7cf0:	608b      	str	r3, [r1, #8]
        {
            nrf_gpio_pin_write(p_config->dcx_pin, 1);
            nrf_gpio_cfg(p_config->dcx_pin,
    7cf2:	7be3      	ldrb	r3, [r4, #15]
    *p_pin = pin_number & 0x1F;
    7cf4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7cf8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cfa:	2b01      	cmp	r3, #1
    7cfc:	d047      	beq.n	7d8e <configure_pins+0x146>
        case 0: return NRF_P0;
    7cfe:	4928      	ldr	r1, [pc, #160]	; (7da0 <configure_pins+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7d00:	3280      	adds	r2, #128	; 0x80
    7d02:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7d06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7d0a:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7d0e:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
    7d10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                         NRF_GPIO_PIN_NOSENSE);
        }
#endif
    }

    if (!p_config->skip_psel_cfg)
    7d14:	7d23      	ldrb	r3, [r4, #20]
    7d16:	b96b      	cbnz	r3, 7d34 <configure_pins+0xec>
    {
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7d18:	7863      	ldrb	r3, [r4, #1]
                            ? p_config->mosi_pin
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7d1a:	2bff      	cmp	r3, #255	; 0xff
    7d1c:	d039      	beq.n	7d92 <configure_pins+0x14a>
    7d1e:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    7d20:	78a3      	ldrb	r3, [r4, #2]
                            ? p_config->miso_pin
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7d22:	2bff      	cmp	r3, #255	; 0xff
    7d24:	d038      	beq.n	7d98 <configure_pins+0x150>

        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    7d26:	7821      	ldrb	r1, [r4, #0]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    7d28:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    7d2c:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    7d30:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
                               : NRF_SPIM_PIN_NOT_CONNECTED;
            nrf_spim_dcx_pin_set(p_spim, dcx_pin);
        }
#endif
    }
}
    7d34:	b003      	add	sp, #12
    7d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    : NRF_GPIO_PIN_S0S1;
    7d38:	2703      	movs	r7, #3
    7d3a:	e791      	b.n	7c60 <configure_pins+0x18>
        case 1: return NRF_P1;
    7d3c:	4919      	ldr	r1, [pc, #100]	; (7da4 <configure_pins+0x15c>)
    7d3e:	e79e      	b.n	7c7e <configure_pins+0x36>
    7d40:	4918      	ldr	r1, [pc, #96]	; (7da4 <configure_pins+0x15c>)
    7d42:	e7b0      	b.n	7ca6 <configure_pins+0x5e>
    7d44:	4917      	ldr	r1, [pc, #92]	; (7da4 <configure_pins+0x15c>)
    7d46:	e7b8      	b.n	7cba <configure_pins+0x72>
            nrf_gpio_cfg(p_config->miso_pin,
    7d48:	2100      	movs	r1, #0
    7d4a:	9101      	str	r1, [sp, #4]
    7d4c:	9700      	str	r7, [sp, #0]
    7d4e:	7ba3      	ldrb	r3, [r4, #14]
    7d50:	460a      	mov	r2, r1
    7d52:	f7ff ff1f 	bl	7b94 <nrf_gpio_cfg>
    7d56:	e7bd      	b.n	7cd4 <configure_pins+0x8c>
                               p_config->ss_active_high ? 0 : 1);
    7d58:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    7d5a:	f081 0101 	eor.w	r1, r1, #1
    7d5e:	f7ff ff55 	bl	7c0c <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
    7d62:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
    7d64:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7d68:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d6a:	2b01      	cmp	r3, #1
    7d6c:	d00b      	beq.n	7d86 <configure_pins+0x13e>
        case 0: return NRF_P0;
    7d6e:	490c      	ldr	r1, [pc, #48]	; (7da0 <configure_pins+0x158>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7d70:	3280      	adds	r2, #128	; 0x80
    7d72:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7d76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7d7a:	f045 0003 	orr.w	r0, r5, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7d7e:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7d80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    7d84:	e7a9      	b.n	7cda <configure_pins+0x92>
        case 1: return NRF_P1;
    7d86:	4907      	ldr	r1, [pc, #28]	; (7da4 <configure_pins+0x15c>)
    7d88:	e7f2      	b.n	7d70 <configure_pins+0x128>
    7d8a:	4906      	ldr	r1, [pc, #24]	; (7da4 <configure_pins+0x15c>)
    7d8c:	e7ae      	b.n	7cec <configure_pins+0xa4>
    7d8e:	4905      	ldr	r1, [pc, #20]	; (7da4 <configure_pins+0x15c>)
    7d90:	e7b6      	b.n	7d00 <configure_pins+0xb8>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d96:	e7c3      	b.n	7d20 <configure_pins+0xd8>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d9c:	e7c3      	b.n	7d26 <configure_pins+0xde>
    7d9e:	bf00      	nop
    7da0:	50842500 	.word	0x50842500
    7da4:	50842800 	.word	0x50842800

00007da8 <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    7da8:	b570      	push	{r4, r5, r6, lr}
    7daa:	4604      	mov	r4, r0
    7dac:	460e      	mov	r6, r1
    7dae:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    7db0:	6813      	ldr	r3, [r2, #0]
    7db2:	b123      	cbz	r3, 7dbe <spim_xfer+0x16>
    7db4:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
    7db8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    7dbc:	d106      	bne.n	7dcc <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    7dbe:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    7dc0:	b141      	cbz	r1, 7dd4 <spim_xfer+0x2c>
    7dc2:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    7dc6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    7dca:	d003      	beq.n	7dd4 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
    7dcc:	2300      	movs	r3, #0
    7dce:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    7dd0:	4818      	ldr	r0, [pc, #96]	; (7e34 <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7dd2:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    7dd4:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7dd6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7dda:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    7dde:	6891      	ldr	r1, [r2, #8]
    7de0:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7de2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7de6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7dea:	2300      	movs	r3, #0
    7dec:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7df0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
    7df4:	4629      	mov	r1, r5
    7df6:	4620      	mov	r0, r4
    7df8:	f006 f83d 	bl	de76 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    7dfc:	f015 0208 	ands.w	r2, r5, #8
    7e00:	d101      	bne.n	7e06 <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e02:	2301      	movs	r3, #1
    7e04:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
    7e06:	6833      	ldr	r3, [r6, #0]
    7e08:	b14b      	cbz	r3, 7e1e <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    7e0a:	f015 0f04 	tst.w	r5, #4
    7e0e:	bf0c      	ite	eq
    7e10:	2101      	moveq	r1, #1
    7e12:	2100      	movne	r1, #0
    7e14:	4620      	mov	r0, r4
    7e16:	f006 f825 	bl	de64 <spim_int_enable>
    return err_code;
    7e1a:	4807      	ldr	r0, [pc, #28]	; (7e38 <spim_xfer+0x90>)
    7e1c:	e7d9      	b.n	7dd2 <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    7e1e:	b91a      	cbnz	r2, 7e28 <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e20:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    7e24:	2b00      	cmp	r3, #0
    7e26:	d0fb      	beq.n	7e20 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
    7e28:	2100      	movs	r1, #0
    7e2a:	4630      	mov	r0, r6
    7e2c:	f005 fffc 	bl	de28 <set_ss_pin_state>
    return err_code;
    7e30:	4801      	ldr	r0, [pc, #4]	; (7e38 <spim_xfer+0x90>)
    7e32:	e7ce      	b.n	7dd2 <spim_xfer+0x2a>
    7e34:	0bad000a 	.word	0x0bad000a
    7e38:	0bad0000 	.word	0x0bad0000

00007e3c <nrfx_spim_init>:
{
    7e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e40:	460d      	mov	r5, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7e42:	7906      	ldrb	r6, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    7e44:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7e46:	4931      	ldr	r1, [pc, #196]	; (7f0c <nrfx_spim_init+0xd0>)
    7e48:	eb01 1146 	add.w	r1, r1, r6, lsl #5
    7e4c:	7f09      	ldrb	r1, [r1, #28]
    7e4e:	2900      	cmp	r1, #0
    7e50:	d151      	bne.n	7ef6 <nrfx_spim_init+0xba>
    7e52:	4604      	mov	r4, r0
    if (
    7e54:	2e00      	cmp	r6, #0
    7e56:	d151      	bne.n	7efc <nrfx_spim_init+0xc0>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    7e58:	68a9      	ldr	r1, [r5, #8]
    7e5a:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
    7e5e:	d04f      	beq.n	7f00 <nrfx_spim_init+0xc4>
    7e60:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
    7e64:	d04e      	beq.n	7f04 <nrfx_spim_init+0xc8>
        ((p_config->use_hw_ss) &&
    7e66:	7c69      	ldrb	r1, [r5, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    7e68:	2900      	cmp	r1, #0
    7e6a:	d14d      	bne.n	7f08 <nrfx_spim_init+0xcc>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
    7e6c:	7be9      	ldrb	r1, [r5, #15]
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
    7e6e:	29ff      	cmp	r1, #255	; 0xff
    7e70:	d001      	beq.n	7e76 <nrfx_spim_init+0x3a>
        return err_code;
    7e72:	4827      	ldr	r0, [pc, #156]	; (7f10 <nrfx_spim_init+0xd4>)
    7e74:	e040      	b.n	7ef8 <nrfx_spim_init+0xbc>
    p_cb->handler = handler;
    7e76:	f8df 9094 	ldr.w	r9, [pc, #148]	; 7f0c <nrfx_spim_init+0xd0>
    7e7a:	ea4f 1846 	mov.w	r8, r6, lsl #5
    7e7e:	eb09 1146 	add.w	r1, r9, r6, lsl #5
    7e82:	f849 2008 	str.w	r2, [r9, r8]
    p_cb->p_context = p_context;
    7e86:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    7e88:	7ce8      	ldrb	r0, [r5, #19]
    7e8a:	7f8a      	ldrb	r2, [r1, #30]
    7e8c:	f360 0200 	bfi	r2, r0, #0, #1
    7e90:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    7e92:	7928      	ldrb	r0, [r5, #4]
    7e94:	b2d2      	uxtb	r2, r2
    7e96:	f360 0241 	bfi	r2, r0, #1, #1
    7e9a:	778a      	strb	r2, [r1, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
    7e9c:	7c68      	ldrb	r0, [r5, #17]
    7e9e:	b2d2      	uxtb	r2, r2
    7ea0:	f360 0282 	bfi	r2, r0, #2, #1
    7ea4:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
    7ea6:	78eb      	ldrb	r3, [r5, #3]
    7ea8:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
    7eaa:	4629      	mov	r1, r5
    7eac:	4620      	mov	r0, r4
    7eae:	f7ff fecb 	bl	7c48 <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    7eb2:	7c2b      	ldrb	r3, [r5, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
    7eb4:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    7eb8:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
    7eba:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    7ebe:	7b6a      	ldrb	r2, [r5, #13]
    7ec0:	7b29      	ldrb	r1, [r5, #12]
    7ec2:	4638      	mov	r0, r7
    7ec4:	f005 ff93 	bl	ddee <nrf_spim_configure>
    nrf_spim_orc_set(p_spim, p_config->orc);
    7ec8:	79ab      	ldrb	r3, [r5, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    7eca:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    7ece:	2307      	movs	r3, #7
    7ed0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    7ed4:	f859 3008 	ldr.w	r3, [r9, r8]
    7ed8:	b123      	cbz	r3, 7ee4 <nrfx_spim_init+0xa8>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    7eda:	6820      	ldr	r0, [r4, #0]
    7edc:	f340 3007 	sbfx	r0, r0, #12, #8
    7ee0:	f004 fce9 	bl	c8b6 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    7ee4:	4b09      	ldr	r3, [pc, #36]	; (7f0c <nrfx_spim_init+0xd0>)
    7ee6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    7eea:	2200      	movs	r2, #0
    7eec:	775a      	strb	r2, [r3, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7eee:	2201      	movs	r2, #1
    7ef0:	771a      	strb	r2, [r3, #28]
    return err_code;
    7ef2:	4808      	ldr	r0, [pc, #32]	; (7f14 <nrfx_spim_init+0xd8>)
    7ef4:	e000      	b.n	7ef8 <nrfx_spim_init+0xbc>
        return err_code;
    7ef6:	4808      	ldr	r0, [pc, #32]	; (7f18 <nrfx_spim_init+0xdc>)
}
    7ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
    7efc:	4804      	ldr	r0, [pc, #16]	; (7f10 <nrfx_spim_init+0xd4>)
    7efe:	e7fb      	b.n	7ef8 <nrfx_spim_init+0xbc>
    7f00:	4803      	ldr	r0, [pc, #12]	; (7f10 <nrfx_spim_init+0xd4>)
    7f02:	e7f9      	b.n	7ef8 <nrfx_spim_init+0xbc>
    7f04:	4802      	ldr	r0, [pc, #8]	; (7f10 <nrfx_spim_init+0xd4>)
    7f06:	e7f7      	b.n	7ef8 <nrfx_spim_init+0xbc>
    7f08:	4801      	ldr	r0, [pc, #4]	; (7f10 <nrfx_spim_init+0xd4>)
    7f0a:	e7f5      	b.n	7ef8 <nrfx_spim_init+0xbc>
    7f0c:	200015dc 	.word	0x200015dc
    7f10:	0bad0003 	.word	0x0bad0003
    7f14:	0bad0000 	.word	0x0bad0000
    7f18:	0bad0005 	.word	0x0bad0005

00007f1c <nrfx_spim_uninit>:
{
    7f1c:	b570      	push	{r4, r5, r6, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7f1e:	7904      	ldrb	r4, [r0, #4]
    7f20:	0162      	lsls	r2, r4, #5
    7f22:	4b1c      	ldr	r3, [pc, #112]	; (7f94 <nrfx_spim_uninit+0x78>)
    7f24:	eb03 1644 	add.w	r6, r3, r4, lsl #5
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    7f28:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    7f2a:	589b      	ldr	r3, [r3, r2]
    7f2c:	b143      	cbz	r3, 7f40 <nrfx_spim_uninit+0x24>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    7f2e:	f345 3007 	sbfx	r0, r5, #12, #8
    7f32:	f004 fcc5 	bl	c8c0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7f36:	4b18      	ldr	r3, [pc, #96]	; (7f98 <nrfx_spim_uninit+0x7c>)
    7f38:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
    7f3c:	7f73      	ldrb	r3, [r6, #29]
    7f3e:	b97b      	cbnz	r3, 7f60 <nrfx_spim_uninit+0x44>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    7f40:	2300      	movs	r3, #0
    7f42:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
    7f46:	4b13      	ldr	r3, [pc, #76]	; (7f94 <nrfx_spim_uninit+0x78>)
    7f48:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7f4c:	7f9b      	ldrb	r3, [r3, #30]
    7f4e:	f013 0f01 	tst.w	r3, #1
    7f52:	d00a      	beq.n	7f6a <nrfx_spim_uninit+0x4e>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    7f54:	4b0f      	ldr	r3, [pc, #60]	; (7f94 <nrfx_spim_uninit+0x78>)
    7f56:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7f5a:	2200      	movs	r2, #0
    7f5c:	771a      	strb	r2, [r3, #28]
}
    7f5e:	bd70      	pop	{r4, r5, r6, pc}
            spim_abort(p_spim, p_cb);
    7f60:	4631      	mov	r1, r6
    7f62:	4628      	mov	r0, r5
    7f64:	f005 ffab 	bl	debe <spim_abort>
    7f68:	e7ea      	b.n	7f40 <nrfx_spim_uninit+0x24>
    return p_reg->PSEL.SCK;
    7f6a:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    7f6e:	f005 ff53 	bl	de18 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    7f72:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    7f76:	f005 ff4f 	bl	de18 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    7f7a:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    7f7e:	f005 ff4b 	bl	de18 <spim_pin_uninit>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    7f82:	4b04      	ldr	r3, [pc, #16]	; (7f94 <nrfx_spim_uninit+0x78>)
    7f84:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    7f88:	7fd8      	ldrb	r0, [r3, #31]
    7f8a:	28ff      	cmp	r0, #255	; 0xff
    7f8c:	d0e2      	beq.n	7f54 <nrfx_spim_uninit+0x38>
            nrf_gpio_cfg_default(p_cb->ss_pin);
    7f8e:	f7ff fe27 	bl	7be0 <nrf_gpio_cfg_default>
    7f92:	e7df      	b.n	7f54 <nrfx_spim_uninit+0x38>
    7f94:	200015dc 	.word	0x200015dc
    7f98:	00080152 	.word	0x00080152

00007f9c <nrfx_spim_xfer>:

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    7f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fa0:	4690      	mov	r8, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7fa2:	7903      	ldrb	r3, [r0, #4]
    7fa4:	4e13      	ldr	r6, [pc, #76]	; (7ff4 <nrfx_spim_xfer+0x58>)
    7fa6:	eb06 1643 	add.w	r6, r6, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    7faa:	7f72      	ldrb	r2, [r6, #29]
    7fac:	b9fa      	cbnz	r2, 7fee <nrfx_spim_xfer+0x52>
    7fae:	4607      	mov	r7, r0
    7fb0:	460d      	mov	r5, r1
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    7fb2:	015a      	lsls	r2, r3, #5
    7fb4:	490f      	ldr	r1, [pc, #60]	; (7ff4 <nrfx_spim_xfer+0x58>)
    7fb6:	588a      	ldr	r2, [r1, r2]
    7fb8:	b122      	cbz	r2, 7fc4 <nrfx_spim_xfer+0x28>
    7fba:	f018 0f14 	tst.w	r8, #20
    7fbe:	d101      	bne.n	7fc4 <nrfx_spim_xfer+0x28>
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    7fc0:	2101      	movs	r1, #1
    7fc2:	7771      	strb	r1, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    7fc4:	4c0b      	ldr	r4, [pc, #44]	; (7ff4 <nrfx_spim_xfer+0x58>)
    7fc6:	eb04 1c43 	add.w	ip, r4, r3, lsl #5
    7fca:	f10c 0c0c 	add.w	ip, ip, #12
    7fce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    7fd6:	2101      	movs	r1, #1
    7fd8:	4630      	mov	r0, r6
    7fda:	f005 ff25 	bl	de28 <set_ss_pin_state>

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    7fde:	4643      	mov	r3, r8
    7fe0:	462a      	mov	r2, r5
    7fe2:	4631      	mov	r1, r6
    7fe4:	6838      	ldr	r0, [r7, #0]
    7fe6:	f7ff fedf 	bl	7da8 <spim_xfer>
}
    7fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    7fee:	4802      	ldr	r0, [pc, #8]	; (7ff8 <nrfx_spim_xfer+0x5c>)
    7ff0:	e7fb      	b.n	7fea <nrfx_spim_xfer+0x4e>
    7ff2:	bf00      	nop
    7ff4:	200015dc 	.word	0x200015dc
    7ff8:	0bad000b 	.word	0x0bad000b

00007ffc <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    7ffc:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
    7ffe:	4902      	ldr	r1, [pc, #8]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    8000:	4802      	ldr	r0, [pc, #8]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    8002:	f005 ff4d 	bl	dea0 <irq_handler>
}
    8006:	bd08      	pop	{r3, pc}
    8008:	200015dc 	.word	0x200015dc
    800c:	5000c000 	.word	0x5000c000

00008010 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    8010:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    8012:	f010 0f01 	tst.w	r0, #1
    8016:	d108      	bne.n	802a <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    8018:	4806      	ldr	r0, [pc, #24]	; (8034 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    801a:	f013 0f02 	tst.w	r3, #2
    801e:	d000      	beq.n	8022 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    8020:	4805      	ldr	r0, [pc, #20]	; (8038 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    8022:	f013 0f04 	tst.w	r3, #4
    8026:	d102      	bne.n	802e <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    8028:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    802a:	4804      	ldr	r0, [pc, #16]	; (803c <twi_process_error+0x2c>)
    802c:	e7f5      	b.n	801a <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    802e:	4804      	ldr	r0, [pc, #16]	; (8040 <twi_process_error+0x30>)
    return ret;
    8030:	e7fa      	b.n	8028 <twi_process_error+0x18>
    8032:	bf00      	nop
    8034:	0bad0001 	.word	0x0bad0001
    8038:	0bae0001 	.word	0x0bae0001
    803c:	0bae0000 	.word	0x0bae0000
    8040:	0bae0002 	.word	0x0bae0002

00008044 <twim_pins_configure>:

    return transfer_complete;
}

static bool twim_pins_configure(NRF_TWIM_Type * p_twim, nrfx_twim_config_t const * p_config)
{
    8044:	4684      	mov	ip, r0
    // If both GPIO configuration and pin selection are to be skipped,
    // the pin numbers may be not specified at all, so even validation
    // of those numbers cannot be performed.
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    8046:	7b8b      	ldrb	r3, [r1, #14]
    8048:	b113      	cbz	r3, 8050 <twim_pins_configure+0xc>
    804a:	7bc8      	ldrb	r0, [r1, #15]
    804c:	2800      	cmp	r0, #0
    804e:	d149      	bne.n	80e4 <twim_pins_configure+0xa0>
    }

    nrf_gpio_pin_drive_t drive;

#if NRF_TWIM_HAS_1000_KHZ_FREQ && defined(NRF5340_XXAA)
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
    8050:	688a      	ldr	r2, [r1, #8]
    8052:	f1b2 6f7f 	cmp.w	r2, #267386880	; 0xff00000
    8056:	d30e      	bcc.n	8076 <twim_pins_configure+0x32>

        uint32_t e0e1_pin_1 = NRF_GPIO_PIN_MAP(1, 2);
        uint32_t e0e1_pin_2 = NRF_GPIO_PIN_MAP(1, 3);

        /* Check whether provided pins have the extra high drive capabilities. */
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    8058:	680a      	ldr	r2, [r1, #0]
    805a:	2a22      	cmp	r2, #34	; 0x22
    805c:	d006      	beq.n	806c <twim_pins_configure+0x28>
    805e:	2a23      	cmp	r2, #35	; 0x23
    8060:	d13c      	bne.n	80dc <twim_pins_configure+0x98>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
    8062:	684a      	ldr	r2, [r1, #4]
    8064:	2a22      	cmp	r2, #34	; 0x22
    8066:	d13b      	bne.n	80e0 <twim_pins_configure+0x9c>
        drive = NRF_GPIO_PIN_E0E1;
    8068:	220b      	movs	r2, #11
    806a:	e005      	b.n	8078 <twim_pins_configure+0x34>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    806c:	6848      	ldr	r0, [r1, #4]
    806e:	2823      	cmp	r0, #35	; 0x23
    8070:	d1f5      	bne.n	805e <twim_pins_configure+0x1a>
        drive = NRF_GPIO_PIN_E0E1;
    8072:	220b      	movs	r2, #11
    8074:	e000      	b.n	8078 <twim_pins_configure+0x34>
        }
    }
    else
#endif
    {
        drive = NRF_GPIO_PIN_S0D1;
    8076:	2206      	movs	r2, #6
{
    8078:	b510      	push	{r4, lr}

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    if (!p_config->skip_gpio_cfg)
    807a:	bb0b      	cbnz	r3, 80c0 <twim_pins_configure+0x7c>
    {
        TWIM_PIN_INIT(p_config->scl, drive);
    807c:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    807e:	f003 0e1f 	and.w	lr, r3, #31
    return pin_number >> 5;
    8082:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8084:	2b01      	cmp	r3, #1
    8086:	d025      	beq.n	80d4 <twim_pins_configure+0x90>
        case 0: return NRF_P0;
    8088:	4c17      	ldr	r4, [pc, #92]	; (80e8 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    808a:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
    808e:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
    8092:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    8096:	0213      	lsls	r3, r2, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8098:	f043 030c 	orr.w	r3, r3, #12
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    809c:	4318      	orrs	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
    809e:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    80a2:	684a      	ldr	r2, [r1, #4]
    *p_pin = pin_number & 0x1F;
    80a4:	f002 001f 	and.w	r0, r2, #31
    return pin_number >> 5;
    80a8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80aa:	2a01      	cmp	r2, #1
    80ac:	d014      	beq.n	80d8 <twim_pins_configure+0x94>
        case 0: return NRF_P0;
    80ae:	4c0e      	ldr	r4, [pc, #56]	; (80e8 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    80b0:	3080      	adds	r0, #128	; 0x80
    80b2:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
    80b6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    80ba:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    80bc:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    }

    if (!p_config->skip_psel_cfg)
    80c0:	7bc8      	ldrb	r0, [r1, #15]
    80c2:	b930      	cbnz	r0, 80d2 <twim_pins_configure+0x8e>
    {
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    80c4:	680a      	ldr	r2, [r1, #0]
    80c6:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    80c8:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    80cc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    }

    return true;
    80d0:	2001      	movs	r0, #1
}
    80d2:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    80d4:	4c05      	ldr	r4, [pc, #20]	; (80ec <twim_pins_configure+0xa8>)
    80d6:	e7d8      	b.n	808a <twim_pins_configure+0x46>
    80d8:	4c04      	ldr	r4, [pc, #16]	; (80ec <twim_pins_configure+0xa8>)
    80da:	e7e9      	b.n	80b0 <twim_pins_configure+0x6c>
            return false;
    80dc:	2000      	movs	r0, #0
    80de:	4770      	bx	lr
    80e0:	2000      	movs	r0, #0
    80e2:	4770      	bx	lr
}
    80e4:	4770      	bx	lr
    80e6:	bf00      	nop
    80e8:	50842500 	.word	0x50842500
    80ec:	50842800 	.word	0x50842800

000080f0 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    80f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80f4:	4605      	mov	r5, r0
    80f6:	460c      	mov	r4, r1
    80f8:	4616      	mov	r6, r2
    80fa:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    80fc:	2300      	movs	r3, #0
    80fe:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    8102:	6853      	ldr	r3, [r2, #4]
    8104:	b133      	cbz	r3, 8114 <twim_xfer+0x24>
    8106:	68d3      	ldr	r3, [r2, #12]
    8108:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    810c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    8110:	f040 8131 	bne.w	8376 <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
    8114:	4b9c      	ldr	r3, [pc, #624]	; (8388 <twim_xfer+0x298>)
    8116:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    811a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    811e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    8122:	2b00      	cmp	r3, #0
    8124:	d136      	bne.n	8194 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    8126:	f017 0f14 	tst.w	r7, #20
    812a:	bf0c      	ite	eq
    812c:	2301      	moveq	r3, #1
    812e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    8130:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    8134:	f105 0c0c 	add.w	ip, r5, #12
    8138:	46b6      	mov	lr, r6
    813a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    813e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8142:	f8de 3000 	ldr.w	r3, [lr]
    8146:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    814a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    814e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    8152:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    8154:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    8156:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    815a:	2300      	movs	r3, #0
    815c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    8160:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    8164:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    8168:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    816c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    8170:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    8174:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    8178:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    817c:	4639      	mov	r1, r7
    817e:	4620      	mov	r0, r4
    8180:	f005 feef 	bl	df62 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    8184:	7833      	ldrb	r3, [r6, #0]
    8186:	2b03      	cmp	r3, #3
    8188:	f200 80a8 	bhi.w	82dc <twim_xfer+0x1ec>
    818c:	e8df f003 	tbb	[pc, r3]
    8190:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    8194:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    8196:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    819a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 838c <twim_xfer+0x29c>
    819e:	e081      	b.n	82a4 <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    81a0:	6933      	ldr	r3, [r6, #16]
    81a2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    81a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    81aa:	f040 80e7 	bne.w	837c <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    81ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    81b2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    81b6:	68f2      	ldr	r2, [r6, #12]
    81b8:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    81ba:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    81be:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    81c2:	2300      	movs	r3, #0
    81c4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    81c8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    81cc:	2301      	movs	r3, #1
    81ce:	6223      	str	r3, [r4, #32]
    81d0:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    81d2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    81d6:	2b00      	cmp	r3, #0
    81d8:	d0fb      	beq.n	81d2 <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    81da:	2300      	movs	r3, #0
    81dc:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    81e0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    81e4:	6932      	ldr	r2, [r6, #16]
    81e6:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    81e8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    81ec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    81f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    81f4:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    81f6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    81f8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8390 <twim_xfer+0x2a0>
        break;
    81fc:	e032      	b.n	8264 <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    81fe:	68f2      	ldr	r2, [r6, #12]
    8200:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8202:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8206:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    820a:	6933      	ldr	r3, [r6, #16]
    820c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    8210:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    8214:	f040 80b5 	bne.w	8382 <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    8218:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    821a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    821e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    8222:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    8226:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    822a:	2302      	movs	r3, #2
    822c:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    822e:	2301      	movs	r3, #1
    8230:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    8232:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    8234:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8390 <twim_xfer+0x2a0>
}
    8238:	e014      	b.n	8264 <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    823a:	68f2      	ldr	r2, [r6, #12]
    823c:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    823e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8242:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    8246:	f017 0f20 	tst.w	r7, #32
    824a:	d02e      	beq.n	82aa <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
    824c:	f44f 7380 	mov.w	r3, #256	; 0x100
    8250:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    8254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    8258:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    825a:	2301      	movs	r3, #1
    825c:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    825e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    8260:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8390 <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    8264:	f017 0f08 	tst.w	r7, #8
    8268:	d107      	bne.n	827a <twim_xfer+0x18a>
    826a:	7832      	ldrb	r2, [r6, #0]
    826c:	2a03      	cmp	r2, #3
    826e:	d004      	beq.n	827a <twim_xfer+0x18a>
    8270:	2201      	movs	r2, #1
    8272:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    8274:	6873      	ldr	r3, [r6, #4]
    8276:	b903      	cbnz	r3, 827a <twim_xfer+0x18a>
    8278:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    827a:	682b      	ldr	r3, [r5, #0]
    827c:	b393      	cbz	r3, 82e4 <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    827e:	f017 0f04 	tst.w	r7, #4
    8282:	d001      	beq.n	8288 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
    8284:	2300      	movs	r3, #0
    8286:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    8288:	f017 0f40 	tst.w	r7, #64	; 0x40
    828c:	d103      	bne.n	8296 <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    828e:	68ab      	ldr	r3, [r5, #8]
    8290:	f043 0302 	orr.w	r3, r3, #2
    8294:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    8296:	68ab      	ldr	r3, [r5, #8]
    8298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    829c:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    829e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    82a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    82a4:	4648      	mov	r0, r9
    82a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    82aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    82ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    82b2:	2302      	movs	r3, #2
    82b4:	60ab      	str	r3, [r5, #8]
    82b6:	e7d0      	b.n	825a <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    82b8:	68f2      	ldr	r2, [r6, #12]
    82ba:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    82bc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    82c0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    82c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    82c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    82cc:	2302      	movs	r3, #2
    82ce:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82d0:	2301      	movs	r3, #1
    82d2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    82d4:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    82d6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8390 <twim_xfer+0x2a0>
}
    82da:	e7c3      	b.n	8264 <twim_xfer+0x174>
    switch (p_xfer_desc->type)
    82dc:	2308      	movs	r3, #8
    82de:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8394 <twim_xfer+0x2a4>
    82e2:	e7bf      	b.n	8264 <twim_xfer+0x174>
        bool transmission_finished = false;
    82e4:	4643      	mov	r3, r8
    82e6:	e000      	b.n	82ea <twim_xfer+0x1fa>
        } while (!transmission_finished);
    82e8:	bb6b      	cbnz	r3, 8346 <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    82ea:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    82ee:	b102      	cbz	r2, 82f2 <twim_xfer+0x202>
                transmission_finished = true;
    82f0:	2301      	movs	r3, #1
    82f2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    82f6:	b12a      	cbz	r2, 8304 <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82f8:	2300      	movs	r3, #0
    82fa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    82fe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    8302:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8304:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    8308:	2a00      	cmp	r2, #0
    830a:	d0ed      	beq.n	82e8 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    830c:	2200      	movs	r2, #0
    830e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    8312:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8316:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    831a:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    831e:	b112      	cbz	r2, 8326 <twim_xfer+0x236>
    8320:	f411 7f00 	tst.w	r1, #512	; 0x200
    8324:	d103      	bne.n	832e <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8326:	2301      	movs	r3, #1
    8328:	6223      	str	r3, [r4, #32]
    832a:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    832c:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    832e:	2a00      	cmp	r2, #0
    8330:	d0da      	beq.n	82e8 <twim_xfer+0x1f8>
    8332:	f411 7f80 	tst.w	r1, #256	; 0x100
    8336:	d0d7      	beq.n	82e8 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8338:	2300      	movs	r3, #0
    833a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    833e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    8342:	4643      	mov	r3, r8
    8344:	e7d0      	b.n	82e8 <twim_xfer+0x1f8>
    uint32_t error_source = p_reg->ERRORSRC;
    8346:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    834a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    834e:	2300      	movs	r3, #0
    8350:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    8354:	b118      	cbz	r0, 835e <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
    8356:	f7ff fe5b 	bl	8010 <twi_process_error>
    835a:	4681      	mov	r9, r0
    835c:	e7a2      	b.n	82a4 <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    835e:	f017 0f40 	tst.w	r7, #64	; 0x40
    8362:	d19f      	bne.n	82a4 <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
    8364:	4629      	mov	r1, r5
    8366:	4620      	mov	r0, r4
    8368:	f005 fdba 	bl	dee0 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    836c:	2800      	cmp	r0, #0
    836e:	d199      	bne.n	82a4 <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
    8370:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8398 <twim_xfer+0x2a8>
    8374:	e796      	b.n	82a4 <twim_xfer+0x1b4>
        return err_code;
    8376:	f8df 9024 	ldr.w	r9, [pc, #36]	; 839c <twim_xfer+0x2ac>
    837a:	e793      	b.n	82a4 <twim_xfer+0x1b4>
            return err_code;
    837c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 839c <twim_xfer+0x2ac>
    8380:	e790      	b.n	82a4 <twim_xfer+0x1b4>
            return err_code;
    8382:	f8df 9018 	ldr.w	r9, [pc, #24]	; 839c <twim_xfer+0x2ac>
    8386:	e78d      	b.n	82a4 <twim_xfer+0x1b4>
    8388:	019c0202 	.word	0x019c0202
    838c:	0bad000b 	.word	0x0bad000b
    8390:	0bad0000 	.word	0x0bad0000
    8394:	0bad0004 	.word	0x0bad0004
    8398:	0bad0001 	.word	0x0bad0001
    839c:	0bad000a 	.word	0x0bad000a

000083a0 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    83a0:	b530      	push	{r4, r5, lr}
    83a2:	b087      	sub	sp, #28
    83a4:	4604      	mov	r4, r0
    83a6:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83a8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    83ac:	b143      	cbz	r3, 83c0 <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83ae:	2300      	movs	r3, #0
    83b0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    83b4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83b8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    83bc:	2b00      	cmp	r3, #0
    83be:	d05f      	beq.n	8480 <twim_irq_handler+0xe0>
    83c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    83c4:	2b00      	cmp	r3, #0
    83c6:	d07b      	beq.n	84c0 <twim_irq_handler+0x120>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83c8:	2300      	movs	r3, #0
    83ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    83ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    83d2:	6a2b      	ldr	r3, [r5, #32]
    83d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    83d8:	d103      	bne.n	83e2 <twim_irq_handler+0x42>
    83da:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    83de:	2b00      	cmp	r3, #0
    83e0:	d065      	beq.n	84ae <twim_irq_handler+0x10e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    83e2:	6a2b      	ldr	r3, [r5, #32]
    83e4:	f013 0f04 	tst.w	r3, #4
    83e8:	d12e      	bne.n	8448 <twim_irq_handler+0xa8>
        {
            event.xfer_desc = p_cb->xfer_desc;
    83ea:	f10d 0c04 	add.w	ip, sp, #4
    83ee:	f105 0e0c 	add.w	lr, r5, #12
    83f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    83f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83fa:	f8de 3000 	ldr.w	r3, [lr]
    83fe:	f8cc 3000 	str.w	r3, [ip]
    8402:	2300      	movs	r3, #0
    8404:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    8408:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    840c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    8410:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    8414:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    8418:	b113      	cbz	r3, 8420 <twim_irq_handler+0x80>
    841a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    841e:	b19b      	cbz	r3, 8448 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
    8420:	2300      	movs	r3, #0
    8422:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    8426:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    8428:	4b50      	ldr	r3, [pc, #320]	; (856c <twim_irq_handler+0x1cc>)
    842a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    842e:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    8432:	2b00      	cmp	r3, #0
    8434:	db08      	blt.n	8448 <twim_irq_handler+0xa8>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8436:	f003 011f 	and.w	r1, r3, #31
    843a:	095b      	lsrs	r3, r3, #5
    843c:	2201      	movs	r2, #1
    843e:	408a      	lsls	r2, r1
    8440:	3360      	adds	r3, #96	; 0x60
    8442:	494b      	ldr	r1, [pc, #300]	; (8570 <twim_irq_handler+0x1d0>)
    8444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    8448:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    844c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    8450:	f013 0f02 	tst.w	r3, #2
    8454:	d071      	beq.n	853a <twim_irq_handler+0x19a>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    8456:	2301      	movs	r3, #1
    8458:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    845c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    8460:	b90b      	cbnz	r3, 8466 <twim_irq_handler+0xc6>
    {
        p_cb->busy = false;
    8462:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    8466:	6a2b      	ldr	r3, [r5, #32]
    8468:	f013 0f04 	tst.w	r3, #4
    846c:	d002      	beq.n	8474 <twim_irq_handler+0xd4>
    846e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    8472:	b11b      	cbz	r3, 847c <twim_irq_handler+0xdc>
    {
        p_cb->handler(&event, p_cb->p_context);
    8474:	682b      	ldr	r3, [r5, #0]
    8476:	6869      	ldr	r1, [r5, #4]
    8478:	4668      	mov	r0, sp
    847a:	4798      	blx	r3
    }
}
    847c:	b007      	add	sp, #28
    847e:	bd30      	pop	{r4, r5, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    8480:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    8482:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    8486:	2302      	movs	r3, #2
    8488:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    848a:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    848c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8490:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    8494:	b123      	cbz	r3, 84a0 <twim_irq_handler+0x100>
    return p_reg->SHORTS;
    8496:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    849a:	f413 7f00 	tst.w	r3, #512	; 0x200
    849e:	d102      	bne.n	84a6 <twim_irq_handler+0x106>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84a0:	2301      	movs	r3, #1
    84a2:	6223      	str	r3, [r4, #32]
    84a4:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    84a6:	2301      	movs	r3, #1
    84a8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    84ac:	e7e6      	b.n	847c <twim_irq_handler+0xdc>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    84ae:	4629      	mov	r1, r5
    84b0:	4620      	mov	r0, r4
    84b2:	f005 fd15 	bl	dee0 <xfer_completeness_check>
    84b6:	f080 0001 	eor.w	r0, r0, #1
    84ba:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    84be:	e790      	b.n	83e2 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84c0:	2300      	movs	r3, #0
    84c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    84c6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    84ca:	7b2b      	ldrb	r3, [r5, #12]
    84cc:	bb1b      	cbnz	r3, 8516 <twim_irq_handler+0x176>
            event.xfer_desc = p_cb->xfer_desc;
    84ce:	f10d 0c04 	add.w	ip, sp, #4
    84d2:	f105 0e0c 	add.w	lr, r5, #12
    84d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    84da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    84de:	f8de 3000 	ldr.w	r3, [lr]
    84e2:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
    84e6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    84ea:	2b00      	cmp	r3, #0
    84ec:	d1ac      	bne.n	8448 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
    84ee:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    84f2:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    84f4:	4b1d      	ldr	r3, [pc, #116]	; (856c <twim_irq_handler+0x1cc>)
    84f6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    84fa:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    84fe:	2b00      	cmp	r3, #0
    8500:	dba2      	blt.n	8448 <twim_irq_handler+0xa8>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8502:	f003 011f 	and.w	r1, r3, #31
    8506:	095b      	lsrs	r3, r3, #5
    8508:	2201      	movs	r2, #1
    850a:	408a      	lsls	r2, r1
    850c:	3360      	adds	r3, #96	; 0x60
    850e:	4918      	ldr	r1, [pc, #96]	; (8570 <twim_irq_handler+0x1d0>)
    8510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8514:	e798      	b.n	8448 <twim_irq_handler+0xa8>
    p_reg->SHORTS = mask;
    8516:	f44f 7300 	mov.w	r3, #512	; 0x200
    851a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    851e:	f240 2302 	movw	r3, #514	; 0x202
    8522:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    8524:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    8528:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    852c:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    852e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8532:	2301      	movs	r3, #1
    8534:	60a3      	str	r3, [r4, #8]
    8536:	6223      	str	r3, [r4, #32]
            return;
    8538:	e7a0      	b.n	847c <twim_irq_handler+0xdc>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    853a:	f013 0f04 	tst.w	r3, #4
    853e:	d003      	beq.n	8548 <twim_irq_handler+0x1a8>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    8540:	2302      	movs	r3, #2
    8542:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    8546:	e789      	b.n	845c <twim_irq_handler+0xbc>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    8548:	f013 0f01 	tst.w	r3, #1
    854c:	d003      	beq.n	8556 <twim_irq_handler+0x1b6>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    854e:	2303      	movs	r3, #3
    8550:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    8554:	e782      	b.n	845c <twim_irq_handler+0xbc>
    else if (p_cb->error)
    8556:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    855a:	b11b      	cbz	r3, 8564 <twim_irq_handler+0x1c4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    855c:	2304      	movs	r3, #4
    855e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    8562:	e77b      	b.n	845c <twim_irq_handler+0xbc>
        event.type = NRFX_TWIM_EVT_DONE;
    8564:	2300      	movs	r3, #0
    8566:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    856a:	e777      	b.n	845c <twim_irq_handler+0xbc>
    856c:	019c0202 	.word	0x019c0202
    8570:	e000e100 	.word	0xe000e100

00008574 <nrfx_twim_init>:
{
    8574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8576:	4604      	mov	r4, r0
    8578:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    857a:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    857c:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    857e:	491e      	ldr	r1, [pc, #120]	; (85f8 <nrfx_twim_init+0x84>)
    8580:	2034      	movs	r0, #52	; 0x34
    8582:	fb00 1106 	mla	r1, r0, r6, r1
    8586:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    858a:	b109      	cbz	r1, 8590 <nrfx_twim_init+0x1c>
        return err_code;
    858c:	481b      	ldr	r0, [pc, #108]	; (85fc <nrfx_twim_init+0x88>)
}
    858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
    8590:	f8df c064 	ldr.w	ip, [pc, #100]	; 85f8 <nrfx_twim_init+0x84>
    8594:	fb06 f000 	mul.w	r0, r6, r0
    8598:	eb0c 0100 	add.w	r1, ip, r0
    859c:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
    85a0:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
    85a2:	2300      	movs	r3, #0
    85a4:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
    85a6:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
    85aa:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    85ae:	7b6b      	ldrb	r3, [r5, #13]
    85b0:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    85b4:	7bab      	ldrb	r3, [r5, #14]
    85b6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
    85ba:	4629      	mov	r1, r5
    85bc:	4638      	mov	r0, r7
    85be:	f7ff fd41 	bl	8044 <twim_pins_configure>
    85c2:	b1b0      	cbz	r0, 85f2 <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    85c4:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
    85c6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
    85ca:	2334      	movs	r3, #52	; 0x34
    85cc:	fb06 f303 	mul.w	r3, r6, r3
    85d0:	4a09      	ldr	r2, [pc, #36]	; (85f8 <nrfx_twim_init+0x84>)
    85d2:	58d3      	ldr	r3, [r2, r3]
    85d4:	b123      	cbz	r3, 85e0 <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    85d6:	6820      	ldr	r0, [r4, #0]
    85d8:	f340 3007 	sbfx	r0, r0, #12, #8
    85dc:	f004 f96b 	bl	c8b6 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    85e0:	4b05      	ldr	r3, [pc, #20]	; (85f8 <nrfx_twim_init+0x84>)
    85e2:	2234      	movs	r2, #52	; 0x34
    85e4:	fb02 3306 	mla	r3, r2, r6, r3
    85e8:	2201      	movs	r2, #1
    85ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    return err_code;
    85ee:	4804      	ldr	r0, [pc, #16]	; (8600 <nrfx_twim_init+0x8c>)
    85f0:	e7cd      	b.n	858e <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
    85f2:	4804      	ldr	r0, [pc, #16]	; (8604 <nrfx_twim_init+0x90>)
    85f4:	e7cb      	b.n	858e <nrfx_twim_init+0x1a>
    85f6:	bf00      	nop
    85f8:	200015fc 	.word	0x200015fc
    85fc:	0bad0005 	.word	0x0bad0005
    8600:	0bad0000 	.word	0x0bad0000
    8604:	0bad0004 	.word	0x0bad0004

00008608 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8608:	7902      	ldrb	r2, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
    860a:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    860c:	2106      	movs	r1, #6
    860e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    8612:	4b04      	ldr	r3, [pc, #16]	; (8624 <nrfx_twim_enable+0x1c>)
    8614:	2134      	movs	r1, #52	; 0x34
    8616:	fb01 3302 	mla	r3, r1, r2, r3
    861a:	2202      	movs	r2, #2
    861c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    8620:	4770      	bx	lr
    8622:	bf00      	nop
    8624:	200015fc 	.word	0x200015fc

00008628 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8628:	7901      	ldrb	r1, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    862a:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    862c:	4b0b      	ldr	r3, [pc, #44]	; (865c <nrfx_twim_disable+0x34>)
    862e:	2034      	movs	r0, #52	; 0x34
    8630:	fb00 3301 	mla	r3, r0, r1, r3
    8634:	2100      	movs	r1, #0
    8636:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
    8638:	4809      	ldr	r0, [pc, #36]	; (8660 <nrfx_twim_disable+0x38>)
    863a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    863e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    8642:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    8646:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    864a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    864e:	2201      	movs	r2, #1
    8650:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    8654:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    8658:	4770      	bx	lr
    865a:	bf00      	nop
    865c:	200015fc 	.word	0x200015fc
    8660:	019c0202 	.word	0x019c0202

00008664 <nrfx_twim_xfer>:
{
    8664:	b510      	push	{r4, lr}
    8666:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8668:	f890 c004 	ldrb.w	ip, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    866c:	460a      	mov	r2, r1
    866e:	6801      	ldr	r1, [r0, #0]
    8670:	2034      	movs	r0, #52	; 0x34
    8672:	4c03      	ldr	r4, [pc, #12]	; (8680 <nrfx_twim_xfer+0x1c>)
    8674:	fb00 400c 	mla	r0, r0, ip, r4
    8678:	f7ff fd3a 	bl	80f0 <twim_xfer>
}
    867c:	bd10      	pop	{r4, pc}
    867e:	bf00      	nop
    8680:	200015fc 	.word	0x200015fc

00008684 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    8684:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    8686:	4902      	ldr	r1, [pc, #8]	; (8690 <nrfx_twim_1_irq_handler+0xc>)
    8688:	4802      	ldr	r0, [pc, #8]	; (8694 <nrfx_twim_1_irq_handler+0x10>)
    868a:	f7ff fe89 	bl	83a0 <twim_irq_handler>
}
    868e:	bd08      	pop	{r3, pc}
    8690:	200015fc 	.word	0x200015fc
    8694:	50009000 	.word	0x50009000

00008698 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    8698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
    869c:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    86a0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86a2:	2801      	cmp	r0, #1
    86a4:	d039      	beq.n	871a <nrfx_twi_twim_bus_recover+0x82>
        case 0: return NRF_P0;
    86a6:	4e29      	ldr	r6, [pc, #164]	; (874c <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    86a8:	2501      	movs	r5, #1
    86aa:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
    86ac:	60b5      	str	r5, [r6, #8]
    *p_pin = pin_number & 0x1F;
    86ae:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
    86b2:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86b4:	2901      	cmp	r1, #1
    86b6:	d032      	beq.n	871e <nrfx_twi_twim_bus_recover+0x86>
        case 0: return NRF_P0;
    86b8:	4f24      	ldr	r7, [pc, #144]	; (874c <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    86ba:	f04f 0901 	mov.w	r9, #1
    86be:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
    86c2:	f8c7 9008 	str.w	r9, [r7, #8]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    86c6:	3380      	adds	r3, #128	; 0x80
    86c8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    86cc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    86d0:	f240 610d 	movw	r1, #1549	; 0x60d
    86d4:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    86d6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    86da:	f108 0280 	add.w	r2, r8, #128	; 0x80
    86de:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    86e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    86e6:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    86e8:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    86ec:	2004      	movs	r0, #4
    86ee:	f005 f9c2 	bl	da76 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    86f2:	2400      	movs	r4, #0
    86f4:	2c08      	cmp	r4, #8
    86f6:	d814      	bhi.n	8722 <nrfx_twi_twim_bus_recover+0x8a>
    return p_reg->IN;
    86f8:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    86fa:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
    86fe:	f013 0f01 	tst.w	r3, #1
    8702:	d10e      	bne.n	8722 <nrfx_twi_twim_bus_recover+0x8a>
    p_reg->OUTCLR = clr_mask;
    8704:	60f5      	str	r5, [r6, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    8706:	2004      	movs	r0, #4
    8708:	f005 f9b5 	bl	da76 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    870c:	60b5      	str	r5, [r6, #8]
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    870e:	2004      	movs	r0, #4
    8710:	f005 f9b1 	bl	da76 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    8714:	3401      	adds	r4, #1
    8716:	b2e4      	uxtb	r4, r4
    8718:	e7ec      	b.n	86f4 <nrfx_twi_twim_bus_recover+0x5c>
        case 1: return NRF_P1;
    871a:	4e0d      	ldr	r6, [pc, #52]	; (8750 <nrfx_twi_twim_bus_recover+0xb8>)
    871c:	e7c4      	b.n	86a8 <nrfx_twi_twim_bus_recover+0x10>
    871e:	4f0c      	ldr	r7, [pc, #48]	; (8750 <nrfx_twi_twim_bus_recover+0xb8>)
    8720:	e7cb      	b.n	86ba <nrfx_twi_twim_bus_recover+0x22>
    p_reg->OUTCLR = clr_mask;
    8722:	f8c7 900c 	str.w	r9, [r7, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    8726:	2004      	movs	r0, #4
    8728:	f005 f9a5 	bl	da76 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    872c:	f8c7 9008 	str.w	r9, [r7, #8]
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    8730:	2004      	movs	r0, #4
    8732:	f005 f9a0 	bl	da76 <nrfx_busy_wait>
    return p_reg->IN;
    8736:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8738:	fa23 f308 	lsr.w	r3, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
    873c:	f013 0f01 	tst.w	r3, #1
    8740:	d002      	beq.n	8748 <nrfx_twi_twim_bus_recover+0xb0>
    {
        return NRFX_SUCCESS;
    8742:	4804      	ldr	r0, [pc, #16]	; (8754 <nrfx_twi_twim_bus_recover+0xbc>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    8744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
    8748:	4803      	ldr	r0, [pc, #12]	; (8758 <nrfx_twi_twim_bus_recover+0xc0>)
    874a:	e7fb      	b.n	8744 <nrfx_twi_twim_bus_recover+0xac>
    874c:	50842500 	.word	0x50842500
    8750:	50842800 	.word	0x50842800
    8754:	0bad0000 	.word	0x0bad0000
    8758:	0bad0001 	.word	0x0bad0001

0000875c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
    875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    875e:	460d      	mov	r5, r1
    8760:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
    8762:	4b0c      	ldr	r3, [pc, #48]	; (8794 <metal_generic_dev_open+0x38>)
    8764:	699c      	ldr	r4, [r3, #24]
    8766:	e000      	b.n	876a <metal_generic_dev_open+0xe>
    8768:	6824      	ldr	r4, [r4, #0]
    876a:	4b0b      	ldr	r3, [pc, #44]	; (8798 <metal_generic_dev_open+0x3c>)
    876c:	429c      	cmp	r4, r3
    876e:	d00d      	beq.n	878c <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
    8770:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
    8774:	4629      	mov	r1, r5
    8776:	f854 0c44 	ldr.w	r0, [r4, #-68]
    877a:	f004 f986 	bl	ca8a <strcmp>
    877e:	2800      	cmp	r0, #0
    8780:	d1f2      	bne.n	8768 <metal_generic_dev_open+0xc>
			*device = dev;
    8782:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
    8784:	4630      	mov	r0, r6
    8786:	f005 fd22 	bl	e1ce <metal_generic_dev_sys_open>
    878a:	e001      	b.n	8790 <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
    878c:	f06f 0012 	mvn.w	r0, #18
}
    8790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8792:	bf00      	nop
    8794:	20001630 	.word	0x20001630
    8798:	20001648 	.word	0x20001648

0000879c <metal_bus_find>:
{
    879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    879e:	4605      	mov	r5, r0
    87a0:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
    87a2:	4b0c      	ldr	r3, [pc, #48]	; (87d4 <metal_bus_find+0x38>)
    87a4:	689c      	ldr	r4, [r3, #8]
    87a6:	e000      	b.n	87aa <metal_bus_find+0xe>
    87a8:	6824      	ldr	r4, [r4, #0]
    87aa:	4b0b      	ldr	r3, [pc, #44]	; (87d8 <metal_bus_find+0x3c>)
    87ac:	429c      	cmp	r4, r3
    87ae:	d00d      	beq.n	87cc <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
    87b0:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
    87b4:	4629      	mov	r1, r5
    87b6:	f854 0c24 	ldr.w	r0, [r4, #-36]
    87ba:	f004 f966 	bl	ca8a <strcmp>
    87be:	4603      	mov	r3, r0
    87c0:	2800      	cmp	r0, #0
    87c2:	d1f1      	bne.n	87a8 <metal_bus_find+0xc>
    87c4:	2f00      	cmp	r7, #0
    87c6:	d0ef      	beq.n	87a8 <metal_bus_find+0xc>
			*result = bus;
    87c8:	603e      	str	r6, [r7, #0]
			return 0;
    87ca:	e001      	b.n	87d0 <metal_bus_find+0x34>
	return -ENOENT;
    87cc:	f06f 0301 	mvn.w	r3, #1
}
    87d0:	4618      	mov	r0, r3
    87d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87d4:	20001630 	.word	0x20001630
    87d8:	20001638 	.word	0x20001638

000087dc <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
    87dc:	b380      	cbz	r0, 8840 <metal_bus_register+0x64>
{
    87de:	b510      	push	{r4, lr}
    87e0:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
    87e2:	6800      	ldr	r0, [r0, #0]
    87e4:	b310      	cbz	r0, 882c <metal_bus_register+0x50>
    87e6:	f004 f93d 	bl	ca64 <strlen>
    87ea:	b1f8      	cbz	r0, 882c <metal_bus_register+0x50>
	if (metal_bus_find(bus->name, NULL) == 0)
    87ec:	2100      	movs	r1, #0
    87ee:	6820      	ldr	r0, [r4, #0]
    87f0:	f7ff ffd4 	bl	879c <metal_bus_find>
    87f4:	b1e8      	cbz	r0, 8832 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
    87f6:	f104 031c 	add.w	r3, r4, #28
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
    87fa:	6223      	str	r3, [r4, #32]
	list->next = list;
    87fc:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
    87fe:	f104 0224 	add.w	r2, r4, #36	; 0x24
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
    8802:	4b11      	ldr	r3, [pc, #68]	; (8848 <metal_bus_register+0x6c>)
    8804:	68d9      	ldr	r1, [r3, #12]
    8806:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
    8808:	f103 0008 	add.w	r0, r3, #8
    880c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
    880e:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
    8810:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
    8812:	781b      	ldrb	r3, [r3, #0]
    8814:	2b06      	cmp	r3, #6
    8816:	d90f      	bls.n	8838 <metal_bus_register+0x5c>
    8818:	f1a0 0308 	sub.w	r3, r0, #8
    881c:	685b      	ldr	r3, [r3, #4]
    881e:	b16b      	cbz	r3, 883c <metal_bus_register+0x60>
    8820:	6822      	ldr	r2, [r4, #0]
    8822:	490a      	ldr	r1, [pc, #40]	; (884c <metal_bus_register+0x70>)
    8824:	2007      	movs	r0, #7
    8826:	4798      	blx	r3
	return 0;
    8828:	2000      	movs	r0, #0
    882a:	e006      	b.n	883a <metal_bus_register+0x5e>
		return -EINVAL;
    882c:	f06f 0015 	mvn.w	r0, #21
    8830:	e003      	b.n	883a <metal_bus_register+0x5e>
		return -EEXIST;
    8832:	f06f 0010 	mvn.w	r0, #16
    8836:	e000      	b.n	883a <metal_bus_register+0x5e>
	return 0;
    8838:	2000      	movs	r0, #0
}
    883a:	bd10      	pop	{r4, pc}
	return 0;
    883c:	2000      	movs	r0, #0
    883e:	e7fc      	b.n	883a <metal_bus_register+0x5e>
		return -EINVAL;
    8840:	f06f 0015 	mvn.w	r0, #21
}
    8844:	4770      	bx	lr
    8846:	bf00      	nop
    8848:	20001630 	.word	0x20001630
    884c:	00010920 	.word	0x00010920

00008850 <metal_register_generic_device>:
{
    8850:	b510      	push	{r4, lr}
    8852:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
    8854:	6800      	ldr	r0, [r0, #0]
    8856:	b198      	cbz	r0, 8880 <metal_register_generic_device+0x30>
    8858:	f004 f904 	bl	ca64 <strlen>
    885c:	b180      	cbz	r0, 8880 <metal_register_generic_device+0x30>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
    885e:	68a3      	ldr	r3, [r4, #8]
	if (!device->name || !strlen(device->name) ||
    8860:	2b01      	cmp	r3, #1
    8862:	d80d      	bhi.n	8880 <metal_register_generic_device+0x30>
	device->bus = &metal_generic_bus;
    8864:	4b08      	ldr	r3, [pc, #32]	; (8888 <metal_register_generic_device+0x38>)
    8866:	6063      	str	r3, [r4, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
    8868:	f104 0144 	add.w	r1, r4, #68	; 0x44
	new_node->prev = node->prev;
    886c:	4b07      	ldr	r3, [pc, #28]	; (888c <metal_register_generic_device+0x3c>)
    886e:	69da      	ldr	r2, [r3, #28]
    8870:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next = node;
    8872:	f103 0018 	add.w	r0, r3, #24
    8876:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->next->prev = new_node;
    8878:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
    887a:	6011      	str	r1, [r2, #0]
	return 0;
    887c:	2000      	movs	r0, #0
}
    887e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8880:	f06f 0015 	mvn.w	r0, #21
    8884:	e7fb      	b.n	887e <metal_register_generic_device+0x2e>
    8886:	bf00      	nop
    8888:	200001a8 	.word	0x200001a8
    888c:	20001630 	.word	0x20001630

00008890 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
    8890:	b538      	push	{r3, r4, r5, lr}
    8892:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
    8894:	4c0c      	ldr	r4, [pc, #48]	; (88c8 <metal_init+0x38>)
    8896:	2220      	movs	r2, #32
    8898:	2100      	movs	r1, #0
    889a:	4620      	mov	r0, r4
    889c:	f004 f942 	bl	cb24 <memset>

	_metal.common.log_handler   = params->log_handler;
    88a0:	682b      	ldr	r3, [r5, #0]
    88a2:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
    88a4:	792a      	ldrb	r2, [r5, #4]
    88a6:	4623      	mov	r3, r4
    88a8:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
    88ac:	60e3      	str	r3, [r4, #12]
	list->next = list;
    88ae:	60a3      	str	r3, [r4, #8]
	list->prev = list;
    88b0:	f104 0310 	add.w	r3, r4, #16
    88b4:	6163      	str	r3, [r4, #20]
	list->next = list;
    88b6:	6123      	str	r3, [r4, #16]
	list->prev = list;
    88b8:	f104 0318 	add.w	r3, r4, #24
    88bc:	61e3      	str	r3, [r4, #28]
	list->next = list;
    88be:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
    88c0:	4628      	mov	r0, r5
    88c2:	f000 f803 	bl	88cc <metal_sys_init>
	if (error)
		return error;

	return error;
}
    88c6:	bd38      	pop	{r3, r4, r5, pc}
    88c8:	20001630 	.word	0x20001630

000088cc <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
    88cc:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
    88ce:	4802      	ldr	r0, [pc, #8]	; (88d8 <metal_sys_init+0xc>)
    88d0:	f7ff ff84 	bl	87dc <metal_bus_register>
	return 0;
}
    88d4:	2000      	movs	r0, #0
    88d6:	bd08      	pop	{r3, pc}
    88d8:	200001a8 	.word	0x200001a8

000088dc <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
    88dc:	b40e      	push	{r1, r2, r3}
    88de:	b500      	push	{lr}
    88e0:	b082      	sub	sp, #8
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
    88e2:	1e43      	subs	r3, r0, #1
    88e4:	b2db      	uxtb	r3, r3
    88e6:	2b06      	cmp	r3, #6
    88e8:	d900      	bls.n	88ec <metal_zephyr_log_handler+0x10>
		level = METAL_LOG_EMERGENCY;
    88ea:	2000      	movs	r0, #0
	printk("%s", level_strs[level]);
    88ec:	4b07      	ldr	r3, [pc, #28]	; (890c <metal_zephyr_log_handler+0x30>)
    88ee:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    88f2:	4807      	ldr	r0, [pc, #28]	; (8910 <metal_zephyr_log_handler+0x34>)
    88f4:	f002 fa37 	bl	ad66 <printk>

	va_start(args, format);
    88f8:	a904      	add	r1, sp, #16
    88fa:	9101      	str	r1, [sp, #4]
	vprintk(format, args);
    88fc:	9803      	ldr	r0, [sp, #12]
    88fe:	f002 fa2e 	bl	ad5e <vprintk>
	va_end(args);
}
    8902:	b002      	add	sp, #8
    8904:	f85d eb04 	ldr.w	lr, [sp], #4
    8908:	b003      	add	sp, #12
    890a:	4770      	bx	lr
    890c:	000109d4 	.word	0x000109d4
    8910:	0000fa88 	.word	0x0000fa88

00008914 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
    8914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8918:	b087      	sub	sp, #28
    891a:	9204      	str	r2, [sp, #16]
    891c:	9305      	str	r3, [sp, #20]
    891e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
    8922:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
    8924:	4293      	cmp	r3, r2
    8926:	d341      	bcc.n	89ac <virtio_create_virtqueues+0x98>
    8928:	4605      	mov	r5, r0
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
    892a:	2400      	movs	r4, #0
    892c:	e01d      	b.n	896a <virtio_create_virtqueues+0x56>
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
    892e:	6899      	ldr	r1, [r3, #8]
    8930:	8998      	ldrh	r0, [r3, #12]
    8932:	f005 fc4e 	bl	e1d2 <vring_size>
    8936:	4603      	mov	r3, r0
    8938:	2200      	movs	r2, #0
    893a:	4639      	mov	r1, r7
    893c:	4650      	mov	r0, sl
    893e:	f005 fc02 	bl	e146 <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
    8942:	6a2b      	ldr	r3, [r5, #32]
    8944:	6a1b      	ldr	r3, [r3, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
    8946:	f856 2009 	ldr.w	r2, [r6, r9]
    894a:	9202      	str	r2, [sp, #8]
    894c:	9301      	str	r3, [sp, #4]
    894e:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    8952:	9300      	str	r3, [sp, #0]
    8954:	4643      	mov	r3, r8
    8956:	9a05      	ldr	r2, [sp, #20]
    8958:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    895c:	b2a1      	uxth	r1, r4
    895e:	4628      	mov	r0, r5
    8960:	f005 fd32 	bl	e3c8 <virtqueue_create>
				       vring_info->vq);
		if (ret)
    8964:	4603      	mov	r3, r0
    8966:	b9e8      	cbnz	r0, 89a4 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
    8968:	3401      	adds	r4, #1
    896a:	9b04      	ldr	r3, [sp, #16]
    896c:	429c      	cmp	r4, r3
    896e:	d218      	bcs.n	89a2 <virtio_create_virtqueues+0x8e>
		vring_info = &vdev->vrings_info[i];
    8970:	6aee      	ldr	r6, [r5, #44]	; 0x2c
    8972:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    8976:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    897a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
		vring_alloc = &vring_info->info;
    897e:	f103 0804 	add.w	r8, r3, #4
		if (vdev->role == VIRTIO_DEV_DRIVER) {
    8982:	69aa      	ldr	r2, [r5, #24]
    8984:	2a00      	cmp	r2, #0
    8986:	d1dc      	bne.n	8942 <virtio_create_virtqueues+0x2e>
			struct metal_io_region *io = vring_info->io;
    8988:	f8d3 a014 	ldr.w	sl, [r3, #20]
			offset = metal_io_virt_to_offset(io,
    898c:	685f      	ldr	r7, [r3, #4]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    898e:	f8da 2000 	ldr.w	r2, [sl]
    8992:	1abf      	subs	r7, r7, r2

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    8994:	f8da 2008 	ldr.w	r2, [sl, #8]
    8998:	4297      	cmp	r7, r2
    899a:	d3c8      	bcc.n	892e <virtio_create_virtqueues+0x1a>
    899c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    89a0:	e7c5      	b.n	892e <virtio_create_virtqueues+0x1a>
			return ret;
	}
	return 0;
    89a2:	2300      	movs	r3, #0
}
    89a4:	4618      	mov	r0, r3
    89a6:	b007      	add	sp, #28
    89a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
    89ac:	4b00      	ldr	r3, [pc, #0]	; (89b0 <virtio_create_virtqueues+0x9c>)
    89ae:	e7f9      	b.n	89a4 <virtio_create_virtqueues+0x90>
    89b0:	fffff440 	.word	0xfffff440

000089b4 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
    89b4:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
    89b8:	d40a      	bmi.n	89d0 <rpmsg_is_address_set+0x1c>
    89ba:	428a      	cmp	r2, r1
    89bc:	da0a      	bge.n	89d4 <rpmsg_is_address_set+0x20>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    89be:	0953      	lsrs	r3, r2, #5
    89c0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    89c4:	f002 021f 	and.w	r2, r2, #31
    89c8:	40d0      	lsrs	r0, r2
    89ca:	f000 0001 	and.w	r0, r0, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
    89ce:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
    89d0:	4801      	ldr	r0, [pc, #4]	; (89d8 <rpmsg_is_address_set+0x24>)
    89d2:	4770      	bx	lr
    89d4:	4800      	ldr	r0, [pc, #0]	; (89d8 <rpmsg_is_address_set+0x24>)
}
    89d6:	4770      	bx	lr
    89d8:	fffff82d 	.word	0xfffff82d

000089dc <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
    89dc:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
    89e0:	d40f      	bmi.n	8a02 <rpmsg_set_address+0x26>
    89e2:	428a      	cmp	r2, r1
    89e4:	da0f      	bge.n	8a06 <rpmsg_set_address+0x2a>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    89e6:	ea4f 1c52 	mov.w	ip, r2, lsr #5
    89ea:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    89ee:	f002 021f 	and.w	r2, r2, #31
    89f2:	2101      	movs	r1, #1
    89f4:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    89f8:	4313      	orrs	r3, r2
    89fa:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
    89fe:	2000      	movs	r0, #0
    8a00:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
    8a02:	4802      	ldr	r0, [pc, #8]	; (8a0c <rpmsg_set_address+0x30>)
    8a04:	4770      	bx	lr
    8a06:	4801      	ldr	r0, [pc, #4]	; (8a0c <rpmsg_set_address+0x30>)
	}
}
    8a08:	4770      	bx	lr
    8a0a:	bf00      	nop
    8a0c:	fffff82d 	.word	0xfffff82d

00008a10 <rpmsg_send_offchannel_raw>:
			      uint32_t dst, const void *data, int len,
			      int wait)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    8a10:	b1a0      	cbz	r0, 8a3c <rpmsg_send_offchannel_raw+0x2c>
{
    8a12:	b510      	push	{r4, lr}
    8a14:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    8a16:	6a00      	ldr	r0, [r0, #32]
    8a18:	b190      	cbz	r0, 8a40 <rpmsg_send_offchannel_raw+0x30>
    8a1a:	b19b      	cbz	r3, 8a44 <rpmsg_send_offchannel_raw+0x34>
    8a1c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    8a20:	d012      	beq.n	8a48 <rpmsg_send_offchannel_raw+0x38>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
    8a22:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    8a24:	b194      	cbz	r4, 8a4c <rpmsg_send_offchannel_raw+0x3c>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
    8a26:	f8dd c014 	ldr.w	ip, [sp, #20]
    8a2a:	f8cd c004 	str.w	ip, [sp, #4]
    8a2e:	f8dd c010 	ldr.w	ip, [sp, #16]
    8a32:	f8cd c000 	str.w	ip, [sp]
    8a36:	47a0      	blx	r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
    8a38:	b002      	add	sp, #8
    8a3a:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
    8a3c:	4804      	ldr	r0, [pc, #16]	; (8a50 <rpmsg_send_offchannel_raw+0x40>)
}
    8a3e:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
    8a40:	4803      	ldr	r0, [pc, #12]	; (8a50 <rpmsg_send_offchannel_raw+0x40>)
    8a42:	e7f9      	b.n	8a38 <rpmsg_send_offchannel_raw+0x28>
    8a44:	4802      	ldr	r0, [pc, #8]	; (8a50 <rpmsg_send_offchannel_raw+0x40>)
    8a46:	e7f7      	b.n	8a38 <rpmsg_send_offchannel_raw+0x28>
    8a48:	4801      	ldr	r0, [pc, #4]	; (8a50 <rpmsg_send_offchannel_raw+0x40>)
    8a4a:	e7f5      	b.n	8a38 <rpmsg_send_offchannel_raw+0x28>
	return RPMSG_ERR_PARAM;
    8a4c:	4800      	ldr	r0, [pc, #0]	; (8a50 <rpmsg_send_offchannel_raw+0x40>)
    8a4e:	e7f3      	b.n	8a38 <rpmsg_send_offchannel_raw+0x28>
    8a50:	fffff82d 	.word	0xfffff82d

00008a54 <rpmsg_send_offchannel_nocopy>:
int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    8a54:	b180      	cbz	r0, 8a78 <rpmsg_send_offchannel_nocopy+0x24>
{
    8a56:	b510      	push	{r4, lr}
    8a58:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
    8a5a:	6a00      	ldr	r0, [r0, #32]
    8a5c:	b170      	cbz	r0, 8a7c <rpmsg_send_offchannel_nocopy+0x28>
    8a5e:	b17b      	cbz	r3, 8a80 <rpmsg_send_offchannel_nocopy+0x2c>
    8a60:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    8a64:	d00e      	beq.n	8a84 <rpmsg_send_offchannel_nocopy+0x30>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
    8a66:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    8a68:	b174      	cbz	r4, 8a88 <rpmsg_send_offchannel_nocopy+0x34>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
    8a6a:	f8dd c010 	ldr.w	ip, [sp, #16]
    8a6e:	f8cd c000 	str.w	ip, [sp]
    8a72:	47a0      	blx	r4
							data, len);

	return RPMSG_ERR_PARAM;
}
    8a74:	b002      	add	sp, #8
    8a76:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
    8a78:	4804      	ldr	r0, [pc, #16]	; (8a8c <rpmsg_send_offchannel_nocopy+0x38>)
}
    8a7a:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
    8a7c:	4803      	ldr	r0, [pc, #12]	; (8a8c <rpmsg_send_offchannel_nocopy+0x38>)
    8a7e:	e7f9      	b.n	8a74 <rpmsg_send_offchannel_nocopy+0x20>
    8a80:	4802      	ldr	r0, [pc, #8]	; (8a8c <rpmsg_send_offchannel_nocopy+0x38>)
    8a82:	e7f7      	b.n	8a74 <rpmsg_send_offchannel_nocopy+0x20>
    8a84:	4801      	ldr	r0, [pc, #4]	; (8a8c <rpmsg_send_offchannel_nocopy+0x38>)
    8a86:	e7f5      	b.n	8a74 <rpmsg_send_offchannel_nocopy+0x20>
	return RPMSG_ERR_PARAM;
    8a88:	4800      	ldr	r0, [pc, #0]	; (8a8c <rpmsg_send_offchannel_nocopy+0x38>)
    8a8a:	e7f3      	b.n	8a74 <rpmsg_send_offchannel_nocopy+0x20>
    8a8c:	fffff82d 	.word	0xfffff82d

00008a90 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
    8a90:	b570      	push	{r4, r5, r6, lr}
    8a92:	4605      	mov	r5, r0
    8a94:	460c      	mov	r4, r1
    8a96:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    8a98:	4611      	mov	r1, r2
    8a9a:	b1a2      	cbz	r2, 8ac6 <rpmsg_register_endpoint+0x36>
    8a9c:	2220      	movs	r2, #32
    8a9e:	4620      	mov	r0, r4
    8aa0:	f003 ffc6 	bl	ca30 <strncpy>
	ept->addr = src;
    8aa4:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
    8aa6:	9b04      	ldr	r3, [sp, #16]
    8aa8:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
    8aaa:	9b05      	ldr	r3, [sp, #20]
    8aac:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
    8aae:	9b06      	ldr	r3, [sp, #24]
    8ab0:	6323      	str	r3, [r4, #48]	; 0x30
	ept->rdev = rdev;
    8ab2:	6225      	str	r5, [r4, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
    8ab4:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->prev = node->prev;
    8ab8:	686a      	ldr	r2, [r5, #4]
    8aba:	63a2      	str	r2, [r4, #56]	; 0x38
	new_node->next = node;
    8abc:	6365      	str	r5, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
    8abe:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
    8ac0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8ac2:	6013      	str	r3, [r2, #0]
}
    8ac4:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
    8ac6:	4901      	ldr	r1, [pc, #4]	; (8acc <rpmsg_register_endpoint+0x3c>)
    8ac8:	e7e8      	b.n	8a9c <rpmsg_register_endpoint+0xc>
    8aca:	bf00      	nop
    8acc:	0000f9ec 	.word	0x0000f9ec

00008ad0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
    8ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ad4:	b084      	sub	sp, #16
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
    8ad6:	2800      	cmp	r0, #0
    8ad8:	d05b      	beq.n	8b92 <rpmsg_create_ept+0xc2>
    8ada:	460f      	mov	r7, r1
    8adc:	4691      	mov	r9, r2
    8ade:	461c      	mov	r4, r3
    8ae0:	4680      	mov	r8, r0
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
    8ae2:	f101 0658 	add.w	r6, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
    8ae6:	4630      	mov	r0, r6
    8ae8:	f005 fd3e 	bl	e568 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
    8aec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8af0:	d012      	beq.n	8b18 <rpmsg_create_ept+0x48>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
    8af2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    8af6:	d320      	bcc.n	8b3a <rpmsg_create_ept+0x6a>
		status = rpmsg_is_address_set(rdev->bitmap,
    8af8:	f107 0a48 	add.w	sl, r7, #72	; 0x48
    8afc:	4622      	mov	r2, r4
    8afe:	2180      	movs	r1, #128	; 0x80
    8b00:	4650      	mov	r0, sl
    8b02:	f7ff ff57 	bl	89b4 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
    8b06:	4605      	mov	r5, r0
    8b08:	b188      	cbz	r0, 8b2e <rpmsg_create_ept+0x5e>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
    8b0a:	2800      	cmp	r0, #0
    8b0c:	dd00      	ble.n	8b10 <rpmsg_create_ept+0x40>
			status = RPMSG_ERR_ADDR;
    8b0e:	4d22      	ldr	r5, [pc, #136]	; (8b98 <rpmsg_create_ept+0xc8>)
	z_impl_k_sem_give(sem);
    8b10:	4630      	mov	r0, r6
    8b12:	f000 ff23 	bl	995c <z_impl_k_sem_give>
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
    8b16:	e02c      	b.n	8b72 <rpmsg_create_ept+0xa2>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
    8b18:	2180      	movs	r1, #128	; 0x80
    8b1a:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8b1e:	f005 fcf5 	bl	e50c <rpmsg_get_address>
    8b22:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
    8b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8b28:	d031      	beq.n	8b8e <rpmsg_create_ept+0xbe>
	int status = RPMSG_SUCCESS;
    8b2a:	2500      	movs	r5, #0
    8b2c:	e006      	b.n	8b3c <rpmsg_create_ept+0x6c>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
    8b2e:	4622      	mov	r2, r4
    8b30:	2180      	movs	r1, #128	; 0x80
    8b32:	4650      	mov	r0, sl
    8b34:	f7ff ff52 	bl	89dc <rpmsg_set_address>
    8b38:	e000      	b.n	8b3c <rpmsg_create_ept+0x6c>
	int status = RPMSG_SUCCESS;
    8b3a:	2500      	movs	r5, #0
	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
    8b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b3e:	9302      	str	r3, [sp, #8]
    8b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b42:	9301      	str	r3, [sp, #4]
    8b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b46:	9300      	str	r3, [sp, #0]
    8b48:	4623      	mov	r3, r4
    8b4a:	464a      	mov	r2, r9
    8b4c:	4641      	mov	r1, r8
    8b4e:	4638      	mov	r0, r7
    8b50:	f7ff ff9e 	bl	8a90 <rpmsg_register_endpoint>
    8b54:	4630      	mov	r0, r6
    8b56:	f000 ff01 	bl	995c <z_impl_k_sem_give>
	if (ept->name[0] && rdev->support_ns &&
    8b5a:	f898 3000 	ldrb.w	r3, [r8]
    8b5e:	b13b      	cbz	r3, 8b70 <rpmsg_create_ept+0xa0>
    8b60:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
    8b64:	b123      	cbz	r3, 8b70 <rpmsg_create_ept+0xa0>
	    ept->dest_addr == RPMSG_ADDR_ANY)
    8b66:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
    8b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8b6e:	d004      	beq.n	8b7a <rpmsg_create_ept+0xaa>
	if (status)
    8b70:	b94d      	cbnz	r5, 8b86 <rpmsg_create_ept+0xb6>
}
    8b72:	4628      	mov	r0, r5
    8b74:	b004      	add	sp, #16
    8b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
    8b7a:	2100      	movs	r1, #0
    8b7c:	4640      	mov	r0, r8
    8b7e:	f005 fd1c 	bl	e5ba <rpmsg_send_ns_message>
    8b82:	4605      	mov	r5, r0
    8b84:	e7f4      	b.n	8b70 <rpmsg_create_ept+0xa0>
		rpmsg_unregister_endpoint(ept);
    8b86:	4640      	mov	r0, r8
    8b88:	f005 fcf6 	bl	e578 <rpmsg_unregister_endpoint>
    8b8c:	e7f1      	b.n	8b72 <rpmsg_create_ept+0xa2>
			status = RPMSG_ERR_ADDR;
    8b8e:	4d02      	ldr	r5, [pc, #8]	; (8b98 <rpmsg_create_ept+0xc8>)
    8b90:	e7be      	b.n	8b10 <rpmsg_create_ept+0x40>
		return RPMSG_ERR_PARAM;
    8b92:	4d02      	ldr	r5, [pc, #8]	; (8b9c <rpmsg_create_ept+0xcc>)
    8b94:	e7ed      	b.n	8b72 <rpmsg_create_ept+0xa2>
    8b96:	bf00      	nop
    8b98:	fffff829 	.word	0xfffff829
    8b9c:	fffff82d 	.word	0xfffff82d

00008ba0 <_rpmsg_virtio_get_buffer_size>:
	return rvdev->vdev->role;
    8ba0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    8ba4:	699b      	ldr	r3, [r3, #24]
{
	unsigned int role = rpmsg_virtio_get_role(rvdev);
	int length = 0;

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    8ba6:	b92b      	cbnz	r3, 8bb4 <_rpmsg_virtio_get_buffer_size+0x14>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
    8ba8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8bac:	3810      	subs	r0, #16
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/

	if (length <= 0) {
    8bae:	2800      	cmp	r0, #0
    8bb0:	dd02      	ble.n	8bb8 <_rpmsg_virtio_get_buffer_size+0x18>
		length = RPMSG_ERR_NO_BUFF;
	}

	return length;
}
    8bb2:	4770      	bx	lr
		length = RPMSG_ERR_NO_BUFF;
    8bb4:	4801      	ldr	r0, [pc, #4]	; (8bbc <_rpmsg_virtio_get_buffer_size+0x1c>)
    8bb6:	4770      	bx	lr
    8bb8:	4800      	ldr	r0, [pc, #0]	; (8bbc <_rpmsg_virtio_get_buffer_size+0x1c>)
	return length;
    8bba:	e7fa      	b.n	8bb2 <_rpmsg_virtio_get_buffer_size+0x12>
    8bbc:	fffff82e 	.word	0xfffff82e

00008bc0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
    8bc0:	b508      	push	{r3, lr}
    8bc2:	0c41      	lsrs	r1, r0, #17
    8bc4:	03c0      	lsls	r0, r0, #15
    8bc6:	4b06      	ldr	r3, [pc, #24]	; (8be0 <__metal_sleep_usec+0x20>)
    8bc8:	18c0      	adds	r0, r0, r3
    8bca:	4a06      	ldr	r2, [pc, #24]	; (8be4 <__metal_sleep_usec+0x24>)
    8bcc:	f04f 0300 	mov.w	r3, #0
    8bd0:	f141 0100 	adc.w	r1, r1, #0
    8bd4:	f7f7 fabe 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    8bd8:	f001 fbac 	bl	a334 <z_impl_k_sleep>
	k_sleep(K_USEC(usec));
	return 0;
}
    8bdc:	2000      	movs	r0, #0
    8bde:	bd08      	pop	{r3, pc}
    8be0:	000f423f 	.word	0x000f423f
    8be4:	000f4240 	.word	0x000f4240

00008be8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
    8be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8bec:	b084      	sub	sp, #16
    8bee:	4604      	mov	r4, r0
    8bf0:	460e      	mov	r6, r1
    8bf2:	4690      	mov	r8, r2
    8bf4:	4699      	mov	r9, r3
    8bf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
    8bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8bfa:	a903      	add	r1, sp, #12
    8bfc:	f005 fed4 	bl	e9a8 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
    8c00:	b1e8      	cbz	r0, 8c3e <rpmsg_virtio_send_offchannel_raw+0x56>
    8c02:	4682      	mov	sl, r0
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
    8c04:	9d03      	ldr	r5, [sp, #12]
    8c06:	42bd      	cmp	r5, r7
    8c08:	db00      	blt.n	8c0c <rpmsg_virtio_send_offchannel_raw+0x24>
    8c0a:	463d      	mov	r5, r7
		len = buff_len;
	io = rvdev->shbuf_io;
    8c0c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    8c10:	6801      	ldr	r1, [r0, #0]
    8c12:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    8c16:	6883      	ldr	r3, [r0, #8]
    8c18:	4299      	cmp	r1, r3
    8c1a:	d20d      	bcs.n	8c38 <rpmsg_virtio_send_offchannel_raw+0x50>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
    8c1c:	462b      	mov	r3, r5
    8c1e:	464a      	mov	r2, r9
    8c20:	f005 fa50 	bl	e0c4 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
    8c24:	9500      	str	r5, [sp, #0]
    8c26:	4653      	mov	r3, sl
    8c28:	4642      	mov	r2, r8
    8c2a:	4631      	mov	r1, r6
    8c2c:	4620      	mov	r0, r4
    8c2e:	f005 fe2e 	bl	e88e <rpmsg_virtio_send_offchannel_nocopy>
}
    8c32:	b004      	add	sp, #16
    8c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8c3c:	e7ee      	b.n	8c1c <rpmsg_virtio_send_offchannel_raw+0x34>
		return RPMSG_ERR_NO_BUFF;
    8c3e:	4801      	ldr	r0, [pc, #4]	; (8c44 <rpmsg_virtio_send_offchannel_raw+0x5c>)
    8c40:	e7f7      	b.n	8c32 <rpmsg_virtio_send_offchannel_raw+0x4a>
    8c42:	bf00      	nop
    8c44:	fffff82e 	.word	0xfffff82e

00008c48 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
    8c48:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
    8c4a:	b170      	cbz	r0, 8c6a <rpmsg_virtio_get_buffer_size+0x22>
    8c4c:	4604      	mov	r4, r0
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
    8c4e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    8c52:	4628      	mov	r0, r5
    8c54:	f005 fd3a 	bl	e6cc <__metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
    8c58:	4620      	mov	r0, r4
    8c5a:	f7ff ffa1 	bl	8ba0 <_rpmsg_virtio_get_buffer_size>
    8c5e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    8c60:	4628      	mov	r0, r5
    8c62:	f000 fe7b 	bl	995c <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);
	return size;
}
    8c66:	4620      	mov	r0, r4
    8c68:	bd38      	pop	{r3, r4, r5, pc}
		return RPMSG_ERR_PARAM;
    8c6a:	4c01      	ldr	r4, [pc, #4]	; (8c70 <rpmsg_virtio_get_buffer_size+0x28>)
    8c6c:	e7fb      	b.n	8c66 <rpmsg_virtio_get_buffer_size+0x1e>
    8c6e:	bf00      	nop
    8c70:	fffff82d 	.word	0xfffff82d

00008c74 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
    8c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c78:	b08a      	sub	sp, #40	; 0x28
    8c7a:	4604      	mov	r4, r0
    8c7c:	460e      	mov	r6, r1
    8c7e:	4690      	mov	r8, r2
    8c80:	461d      	mov	r5, r3
    8c82:	9f12      	ldr	r7, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
    8c84:	2284      	movs	r2, #132	; 0x84
    8c86:	2100      	movs	r1, #0
    8c88:	f003 ff4c 	bl	cb24 <memset>
	metal_mutex_init(&rdev->lock);
    8c8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
    8c90:	2201      	movs	r2, #1
    8c92:	4611      	mov	r1, r2
    8c94:	f005 fffc 	bl	ec90 <z_impl_k_sem_init>
	rvdev->vdev = vdev;
    8c98:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	rdev->ns_bind_cb = ns_bind_cb;
    8c9c:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
	vdev->priv = rvdev;
    8ca0:	6274      	str	r4, [r6, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
    8ca2:	4b5d      	ldr	r3, [pc, #372]	; (8e18 <rpmsg_init_vdev_with_config+0x1a4>)
    8ca4:	66e3      	str	r3, [r4, #108]	; 0x6c
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
    8ca6:	4b5d      	ldr	r3, [pc, #372]	; (8e1c <rpmsg_init_vdev_with_config+0x1a8>)
    8ca8:	6723      	str	r3, [r4, #112]	; 0x70
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
    8caa:	4b5d      	ldr	r3, [pc, #372]	; (8e20 <rpmsg_init_vdev_with_config+0x1ac>)
    8cac:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
    8cae:	4b5d      	ldr	r3, [pc, #372]	; (8e24 <rpmsg_init_vdev_with_config+0x1b0>)
    8cb0:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
    8cb2:	4b5d      	ldr	r3, [pc, #372]	; (8e28 <rpmsg_init_vdev_with_config+0x1b4>)
    8cb4:	67e3      	str	r3, [r4, #124]	; 0x7c
    8cb6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    8cba:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    8cbe:	f1b8 0f00 	cmp.w	r8, #0
    8cc2:	d109      	bne.n	8cd8 <rpmsg_init_vdev_with_config+0x64>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
    8cc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8cc6:	2a00      	cmp	r2, #0
    8cc8:	f000 809c 	beq.w	8e04 <rpmsg_init_vdev_with_config+0x190>
			return RPMSG_ERR_PARAM;
		}
		rvdev->config = *config;
    8ccc:	f104 0284 	add.w	r2, r4, #132	; 0x84
    8cd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8cd2:	c903      	ldmia	r1, {r0, r1}
    8cd4:	e882 0003 	stmia.w	r2, {r0, r1}
	return rvdev->vdev->func->get_features(rvdev->vdev);
    8cd8:	6a1a      	ldr	r2, [r3, #32]
    8cda:	6892      	ldr	r2, [r2, #8]
    8cdc:	4618      	mov	r0, r3
    8cde:	4790      	blx	r2
	if (role == RPMSG_REMOTE) {
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
    8ce0:	6130      	str	r0, [r6, #16]
    8ce2:	2300      	movs	r3, #0
    8ce4:	6173      	str	r3, [r6, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
    8ce6:	f000 0001 	and.w	r0, r0, #1
    8cea:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
    8cee:	f1b8 0f00 	cmp.w	r8, #0
    8cf2:	d118      	bne.n	8d26 <rpmsg_init_vdev_with_config+0xb2>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
    8cf4:	2f00      	cmp	r7, #0
    8cf6:	f000 8088 	beq.w	8e0a <rpmsg_init_vdev_with_config+0x196>
			return RPMSG_ERR_PARAM;
		if (!shpool->size)
    8cfa:	68bb      	ldr	r3, [r7, #8]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	f000 8087 	beq.w	8e10 <rpmsg_init_vdev_with_config+0x19c>
			return RPMSG_ERR_NO_BUFF;
		rvdev->shpool = shpool;
    8d02:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c

		vq_names[0] = "rx_vq";
    8d06:	4b49      	ldr	r3, [pc, #292]	; (8e2c <rpmsg_init_vdev_with_config+0x1b8>)
    8d08:	9308      	str	r3, [sp, #32]
		vq_names[1] = "tx_vq";
    8d0a:	4b49      	ldr	r3, [pc, #292]	; (8e30 <rpmsg_init_vdev_with_config+0x1bc>)
    8d0c:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
    8d0e:	4b49      	ldr	r3, [pc, #292]	; (8e34 <rpmsg_init_vdev_with_config+0x1c0>)
    8d10:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
    8d12:	4b49      	ldr	r3, [pc, #292]	; (8e38 <rpmsg_init_vdev_with_config+0x1c4>)
    8d14:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
    8d16:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8d18:	681b      	ldr	r3, [r3, #0]
    8d1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		rvdev->svq  = vdev->vrings_info[1].vq;
    8d1e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8d20:	699b      	ldr	r3, [r3, #24]
    8d22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	rvdev->shbuf_io = shm_io;
    8d26:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
    8d2a:	ab06      	add	r3, sp, #24
    8d2c:	9300      	str	r3, [sp, #0]
    8d2e:	ab08      	add	r3, sp, #32
    8d30:	2202      	movs	r2, #2
    8d32:	2100      	movs	r1, #0
    8d34:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    8d38:	f7ff fdec 	bl	8914 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
    8d3c:	4682      	mov	sl, r0
    8d3e:	b118      	cbz	r0, 8d48 <rpmsg_init_vdev_with_config+0xd4>
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
    8d40:	4650      	mov	r0, sl
    8d42:	b00a      	add	sp, #40	; 0x28
    8d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	virtqueue_disable_cb(rvdev->svq);
    8d48:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8d4c:	f005 fb9f 	bl	e48e <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
    8d50:	2300      	movs	r3, #0
    8d52:	2b01      	cmp	r3, #1
    8d54:	d807      	bhi.n	8d66 <rpmsg_init_vdev_with_config+0xf2>
		vq = vdev->vrings_info[i].vq;
    8d56:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    8d58:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    8d5c:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
		vq->shm_io = shm_io;
    8d60:	6295      	str	r5, [r2, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
    8d62:	3301      	adds	r3, #1
    8d64:	e7f5      	b.n	8d52 <rpmsg_init_vdev_with_config+0xde>
	if (role == RPMSG_HOST) {
    8d66:	f1b8 0f00 	cmp.w	r8, #0
    8d6a:	d12f      	bne.n	8dcc <rpmsg_init_vdev_with_config+0x158>
		vqbuf.len = rvdev->config.r2h_buf_size;
    8d6c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    8d70:	9305      	str	r3, [sp, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    8d72:	46c1      	mov	r9, r8
    8d74:	e012      	b.n	8d9c <rpmsg_init_vdev_with_config+0x128>
			metal_io_block_set(shm_io,
    8d76:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    8d7a:	2200      	movs	r2, #0
    8d7c:	4628      	mov	r0, r5
    8d7e:	f005 f9e2 	bl	e146 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
    8d82:	9600      	str	r6, [sp, #0]
    8d84:	2301      	movs	r3, #1
    8d86:	2200      	movs	r2, #0
    8d88:	a904      	add	r1, sp, #16
    8d8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    8d8e:	f005 fb2e 	bl	e3ee <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
    8d92:	4682      	mov	sl, r0
    8d94:	2800      	cmp	r0, #0
    8d96:	d1d3      	bne.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
    8d98:	f109 0901 	add.w	r9, r9, #1
    8d9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    8da0:	895b      	ldrh	r3, [r3, #10]
    8da2:	454b      	cmp	r3, r9
    8da4:	d912      	bls.n	8dcc <rpmsg_init_vdev_with_config+0x158>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
    8da6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    8daa:	4638      	mov	r0, r7
    8dac:	f005 fdcc 	bl	e948 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
    8db0:	4606      	mov	r6, r0
    8db2:	b140      	cbz	r0, 8dc6 <rpmsg_init_vdev_with_config+0x152>
			vqbuf.buf = buffer;
    8db4:	9004      	str	r0, [sp, #16]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    8db6:	6829      	ldr	r1, [r5, #0]
    8db8:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    8dba:	68ab      	ldr	r3, [r5, #8]
    8dbc:	4299      	cmp	r1, r3
    8dbe:	d3da      	bcc.n	8d76 <rpmsg_init_vdev_with_config+0x102>
    8dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8dc4:	e7d7      	b.n	8d76 <rpmsg_init_vdev_with_config+0x102>
				return RPMSG_ERR_NO_BUFF;
    8dc6:	f8df a074 	ldr.w	sl, [pc, #116]	; 8e3c <rpmsg_init_vdev_with_config+0x1c8>
    8dca:	e7b9      	b.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
	list->prev = list;
    8dcc:	6064      	str	r4, [r4, #4]
	list->next = list;
    8dce:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
    8dd0:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    8dd4:	b94b      	cbnz	r3, 8dea <rpmsg_init_vdev_with_config+0x176>
	if (role == RPMSG_HOST)
    8dd6:	f1b8 0f00 	cmp.w	r8, #0
    8dda:	d1b1      	bne.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
    8ddc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    8de0:	6a03      	ldr	r3, [r0, #32]
    8de2:	685b      	ldr	r3, [r3, #4]
    8de4:	2104      	movs	r1, #4
    8de6:	4798      	blx	r3
}
    8de8:	e7aa      	b.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
    8dea:	2300      	movs	r3, #0
    8dec:	9302      	str	r3, [sp, #8]
    8dee:	4b14      	ldr	r3, [pc, #80]	; (8e40 <rpmsg_init_vdev_with_config+0x1cc>)
    8df0:	9301      	str	r3, [sp, #4]
    8df2:	2335      	movs	r3, #53	; 0x35
    8df4:	9300      	str	r3, [sp, #0]
    8df6:	4a13      	ldr	r2, [pc, #76]	; (8e44 <rpmsg_init_vdev_with_config+0x1d0>)
    8df8:	f104 0108 	add.w	r1, r4, #8
    8dfc:	4620      	mov	r0, r4
    8dfe:	f7ff fe47 	bl	8a90 <rpmsg_register_endpoint>
    8e02:	e7e8      	b.n	8dd6 <rpmsg_init_vdev_with_config+0x162>
			return RPMSG_ERR_PARAM;
    8e04:	f8df a040 	ldr.w	sl, [pc, #64]	; 8e48 <rpmsg_init_vdev_with_config+0x1d4>
    8e08:	e79a      	b.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
			return RPMSG_ERR_PARAM;
    8e0a:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8e48 <rpmsg_init_vdev_with_config+0x1d4>
    8e0e:	e797      	b.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
			return RPMSG_ERR_NO_BUFF;
    8e10:	f8df a028 	ldr.w	sl, [pc, #40]	; 8e3c <rpmsg_init_vdev_with_config+0x1c8>
    8e14:	e794      	b.n	8d40 <rpmsg_init_vdev_with_config+0xcc>
    8e16:	bf00      	nop
    8e18:	00008be9 	.word	0x00008be9
    8e1c:	0000e6bd 	.word	0x0000e6bd
    8e20:	0000e913 	.word	0x0000e913
    8e24:	0000e9a9 	.word	0x0000e9a9
    8e28:	0000e88f 	.word	0x0000e88f
    8e2c:	000109f4 	.word	0x000109f4
    8e30:	000109fc 	.word	0x000109fc
    8e34:	0000e7d9 	.word	0x0000e7d9
    8e38:	0000e6cb 	.word	0x0000e6cb
    8e3c:	fffff82e 	.word	0xfffff82e
    8e40:	0000e72d 	.word	0x0000e72d
    8e44:	00010a04 	.word	0x00010a04
    8e48:	fffff82d 	.word	0xfffff82d

00008e4c <rpmsg_init_vdev>:
{
    8e4c:	b510      	push	{r4, lr}
    8e4e:	b084      	sub	sp, #16
    8e50:	4684      	mov	ip, r0
    8e52:	468e      	mov	lr, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
    8e54:	4906      	ldr	r1, [pc, #24]	; (8e70 <rpmsg_init_vdev+0x24>)
    8e56:	ac02      	add	r4, sp, #8
    8e58:	c903      	ldmia	r1, {r0, r1}
    8e5a:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
    8e5e:	9401      	str	r4, [sp, #4]
    8e60:	9906      	ldr	r1, [sp, #24]
    8e62:	9100      	str	r1, [sp, #0]
    8e64:	4671      	mov	r1, lr
    8e66:	4660      	mov	r0, ip
    8e68:	f7ff ff04 	bl	8c74 <rpmsg_init_vdev_with_config>
}
    8e6c:	b004      	add	sp, #16
    8e6e:	bd10      	pop	{r4, pc}
    8e70:	0000f88c 	.word	0x0000f88c

00008e74 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    8e74:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    8e76:	4c11      	ldr	r4, [pc, #68]	; (8ebc <_DoInit+0x48>)
    8e78:	2303      	movs	r3, #3
    8e7a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    8e7c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    8e7e:	4a10      	ldr	r2, [pc, #64]	; (8ec0 <_DoInit+0x4c>)
    8e80:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    8e82:	4b10      	ldr	r3, [pc, #64]	; (8ec4 <_DoInit+0x50>)
    8e84:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    8e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8e8a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    8e8c:	2300      	movs	r3, #0
    8e8e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    8e90:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    8e92:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    8e94:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    8e96:	4a0c      	ldr	r2, [pc, #48]	; (8ec8 <_DoInit+0x54>)
    8e98:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    8e9a:	2210      	movs	r2, #16
    8e9c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    8e9e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    8ea0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    8ea2:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    8ea4:	4909      	ldr	r1, [pc, #36]	; (8ecc <_DoInit+0x58>)
    8ea6:	1de0      	adds	r0, r4, #7
    8ea8:	f003 fdb8 	bl	ca1c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    8eac:	4908      	ldr	r1, [pc, #32]	; (8ed0 <_DoInit+0x5c>)
    8eae:	4620      	mov	r0, r4
    8eb0:	f003 fdb4 	bl	ca1c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    8eb4:	2320      	movs	r3, #32
    8eb6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    8eb8:	bd10      	pop	{r4, pc}
    8eba:	bf00      	nop
    8ebc:	20001a60 	.word	0x20001a60
    8ec0:	00010a08 	.word	0x00010a08
    8ec4:	20001660 	.word	0x20001660
    8ec8:	20001650 	.word	0x20001650
    8ecc:	00010a14 	.word	0x00010a14
    8ed0:	00010a18 	.word	0x00010a18

00008ed4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ed8:	4604      	mov	r4, r0
    8eda:	460e      	mov	r6, r1
    8edc:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    8ede:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    8ee2:	4a2d      	ldr	r2, [pc, #180]	; (8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8ee4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8ee8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    8eea:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8eec:	42bb      	cmp	r3, r7
    8eee:	d84c      	bhi.n	8f8a <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    8ef0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    8ef4:	4a28      	ldr	r2, [pc, #160]	; (8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8ef6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    8efa:	f8d2 8020 	ldr.w	r8, [r2, #32]
    8efe:	eba8 0907 	sub.w	r9, r8, r7
    8f02:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    8f06:	4295      	cmp	r5, r2
    8f08:	d904      	bls.n	8f14 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    8f0a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    8f0c:	429d      	cmp	r5, r3
    8f0e:	d916      	bls.n	8f3e <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    8f10:	2000      	movs	r0, #0
    8f12:	e03f      	b.n	8f94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8f14:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    8f18:	1c63      	adds	r3, r4, #1
    8f1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f1e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    8f22:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    8f24:	462a      	mov	r2, r5
    8f26:	4631      	mov	r1, r6
    8f28:	4438      	add	r0, r7
    8f2a:	f003 fdcc 	bl	cac6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    8f2e:	442f      	add	r7, r5
    8f30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8f34:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    8f38:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    8f3a:	2001      	movs	r0, #1
    8f3c:	e02a      	b.n	8f94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8f3e:	1c43      	adds	r3, r0, #1
    8f40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f44:	4a14      	ldr	r2, [pc, #80]	; (8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8f46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8f4a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    8f4c:	464a      	mov	r2, r9
    8f4e:	4631      	mov	r1, r6
    8f50:	4438      	add	r0, r7
    8f52:	f003 fdb8 	bl	cac6 <memcpy>
      NumBytes -= Rem;
    8f56:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
    8f5a:	eb18 0505 	adds.w	r5, r8, r5
    8f5e:	d107      	bne.n	8f70 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
    8f60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8f64:	4b0c      	ldr	r3, [pc, #48]	; (8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8f66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8f6a:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
    8f6c:	2001      	movs	r0, #1
    8f6e:	e011      	b.n	8f94 <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    8f70:	1c63      	adds	r3, r4, #1
    8f72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f76:	4a08      	ldr	r2, [pc, #32]	; (8f98 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8f78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    8f7c:	462a      	mov	r2, r5
    8f7e:	eb06 0109 	add.w	r1, r6, r9
    8f82:	6858      	ldr	r0, [r3, #4]
    8f84:	f003 fd9f 	bl	cac6 <memcpy>
    8f88:	e7ea      	b.n	8f60 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
    8f8a:	1bdb      	subs	r3, r3, r7
    8f8c:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    8f8e:	42ab      	cmp	r3, r5
    8f90:	d2c0      	bcs.n	8f14 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    8f92:	2000      	movs	r0, #0
}
    8f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f98:	20001a60 	.word	0x20001a60

00008f9c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f9e:	460f      	mov	r7, r1
    8fa0:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    8fa2:	1c45      	adds	r5, r0, #1
    8fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8fa8:	4b16      	ldr	r3, [pc, #88]	; (9004 <SEGGER_RTT_WriteNoLock+0x68>)
    8faa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    8fae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8fb2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    8fb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    8fb8:	2c01      	cmp	r4, #1
    8fba:	d011      	beq.n	8fe0 <SEGGER_RTT_WriteNoLock+0x44>
    8fbc:	2c02      	cmp	r4, #2
    8fbe:	d01c      	beq.n	8ffa <SEGGER_RTT_WriteNoLock+0x5e>
    8fc0:	b114      	cbz	r4, 8fc8 <SEGGER_RTT_WriteNoLock+0x2c>
    8fc2:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    8fc4:	4620      	mov	r0, r4
    8fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    8fc8:	4628      	mov	r0, r5
    8fca:	f005 fd2a 	bl	ea22 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    8fce:	4286      	cmp	r6, r0
    8fd0:	d8f8      	bhi.n	8fc4 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    8fd2:	4632      	mov	r2, r6
    8fd4:	4639      	mov	r1, r7
    8fd6:	4628      	mov	r0, r5
    8fd8:	f005 fd2f 	bl	ea3a <_WriteNoCheck>
      Status = NumBytes;
    8fdc:	4634      	mov	r4, r6
    8fde:	e7f1      	b.n	8fc4 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    8fe0:	4628      	mov	r0, r5
    8fe2:	f005 fd1e 	bl	ea22 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    8fe6:	4634      	mov	r4, r6
    8fe8:	4286      	cmp	r6, r0
    8fea:	bf28      	it	cs
    8fec:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    8fee:	4622      	mov	r2, r4
    8ff0:	4639      	mov	r1, r7
    8ff2:	4628      	mov	r0, r5
    8ff4:	f005 fd21 	bl	ea3a <_WriteNoCheck>
    break;
    8ff8:	e7e4      	b.n	8fc4 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    8ffa:	4628      	mov	r0, r5
    8ffc:	f005 fd3f 	bl	ea7e <_WriteBlocking>
    9000:	4604      	mov	r4, r0
    break;
    9002:	e7df      	b.n	8fc4 <SEGGER_RTT_WriteNoLock+0x28>
    9004:	20001a60 	.word	0x20001a60

00009008 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    9008:	4b06      	ldr	r3, [pc, #24]	; (9024 <SEGGER_RTT_HasDataUp+0x1c>)
    900a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    900e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    9012:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    9014:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9018:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    901c:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    901e:	1a80      	subs	r0, r0, r2
    9020:	4770      	bx	lr
    9022:	bf00      	nop
    9024:	20001a60 	.word	0x20001a60

00009028 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
    9028:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    902a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    902e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9032:	4802      	ldr	r0, [pc, #8]	; (903c <zephyr_rtt_mutex_lock+0x14>)
    9034:	f000 fbd6 	bl	97e4 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
    9038:	bd08      	pop	{r3, pc}
    903a:	bf00      	nop
    903c:	200002b4 	.word	0x200002b4

00009040 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
    9040:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    9042:	4802      	ldr	r0, [pc, #8]	; (904c <zephyr_rtt_mutex_unlock+0xc>)
    9044:	f000 fc4c 	bl	98e0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
    9048:	bd08      	pop	{r3, pc}
    904a:	bf00      	nop
    904c:	200002b4 	.word	0x200002b4

00009050 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    9050:	4b03      	ldr	r3, [pc, #12]	; (9060 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    9052:	e000      	b.n	9056 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    9054:	3318      	adds	r3, #24
	while (dev < __device_end) {
    9056:	4a03      	ldr	r2, [pc, #12]	; (9064 <z_device_state_init+0x14>)
    9058:	4293      	cmp	r3, r2
    905a:	d3fb      	bcc.n	9054 <z_device_state_init+0x4>
	}
}
    905c:	4770      	bx	lr
    905e:	bf00      	nop
    9060:	0000f408 	.word	0x0000f408
    9064:	0000f4f8 	.word	0x0000f4f8

00009068 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    9068:	b570      	push	{r4, r5, r6, lr}
    906a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    906c:	4b11      	ldr	r3, [pc, #68]	; (90b4 <z_sys_init_run_level+0x4c>)
    906e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9072:	e009      	b.n	9088 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    9074:	4240      	negs	r0, r0
    9076:	e017      	b.n	90a8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    9078:	68eb      	ldr	r3, [r5, #12]
    907a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    907c:	68ea      	ldr	r2, [r5, #12]
    907e:	7853      	ldrb	r3, [r2, #1]
    9080:	f043 0301 	orr.w	r3, r3, #1
    9084:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9086:	3408      	adds	r4, #8
    9088:	1c73      	adds	r3, r6, #1
    908a:	4a0a      	ldr	r2, [pc, #40]	; (90b4 <z_sys_init_run_level+0x4c>)
    908c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9090:	42a3      	cmp	r3, r4
    9092:	d90d      	bls.n	90b0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    9094:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    9096:	6823      	ldr	r3, [r4, #0]
    9098:	4628      	mov	r0, r5
    909a:	4798      	blx	r3
		if (dev != NULL) {
    909c:	2d00      	cmp	r5, #0
    909e:	d0f2      	beq.n	9086 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    90a0:	2800      	cmp	r0, #0
    90a2:	d0eb      	beq.n	907c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    90a4:	2800      	cmp	r0, #0
    90a6:	dbe5      	blt.n	9074 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    90a8:	28ff      	cmp	r0, #255	; 0xff
    90aa:	dde5      	ble.n	9078 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    90ac:	20ff      	movs	r0, #255	; 0xff
    90ae:	e7e3      	b.n	9078 <z_sys_init_run_level+0x10>
		}
	}
}
    90b0:	bd70      	pop	{r4, r5, r6, pc}
    90b2:	bf00      	nop
    90b4:	00010a20 	.word	0x00010a20

000090b8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    90b8:	2804      	cmp	r0, #4
    90ba:	d80c      	bhi.n	90d6 <reason_to_str+0x1e>
    90bc:	e8df f000 	tbb	[pc, r0]
    90c0:	07050d03 	.word	0x07050d03
    90c4:	09          	.byte	0x09
    90c5:	00          	.byte	0x00
    90c6:	4806      	ldr	r0, [pc, #24]	; (90e0 <reason_to_str+0x28>)
    90c8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    90ca:	4806      	ldr	r0, [pc, #24]	; (90e4 <reason_to_str+0x2c>)
    90cc:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    90ce:	4806      	ldr	r0, [pc, #24]	; (90e8 <reason_to_str+0x30>)
    90d0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    90d2:	4806      	ldr	r0, [pc, #24]	; (90ec <reason_to_str+0x34>)
    90d4:	4770      	bx	lr
	default:
		return "Unknown error";
    90d6:	4806      	ldr	r0, [pc, #24]	; (90f0 <reason_to_str+0x38>)
    90d8:	4770      	bx	lr
		return "Unhandled interrupt";
    90da:	4806      	ldr	r0, [pc, #24]	; (90f4 <reason_to_str+0x3c>)
	}
}
    90dc:	4770      	bx	lr
    90de:	bf00      	nop
    90e0:	00010a38 	.word	0x00010a38
    90e4:	00010a5c 	.word	0x00010a5c
    90e8:	00010a6c 	.word	0x00010a6c
    90ec:	00010a78 	.word	0x00010a78
    90f0:	00010a88 	.word	0x00010a88
    90f4:	00010a48 	.word	0x00010a48

000090f8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    90f8:	b130      	cbz	r0, 9108 <thread_name_get+0x10>
{
    90fa:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    90fc:	f005 fd72 	bl	ebe4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    9100:	b120      	cbz	r0, 910c <thread_name_get+0x14>
    9102:	7803      	ldrb	r3, [r0, #0]
    9104:	b123      	cbz	r3, 9110 <thread_name_get+0x18>
}
    9106:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    9108:	4802      	ldr	r0, [pc, #8]	; (9114 <thread_name_get+0x1c>)
}
    910a:	4770      	bx	lr
		thread_name = "unknown";
    910c:	4801      	ldr	r0, [pc, #4]	; (9114 <thread_name_get+0x1c>)
    910e:	e7fa      	b.n	9106 <thread_name_get+0xe>
    9110:	4800      	ldr	r0, [pc, #0]	; (9114 <thread_name_get+0x1c>)
	return thread_name;
    9112:	e7f8      	b.n	9106 <thread_name_get+0xe>
    9114:	00010a98 	.word	0x00010a98

00009118 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    911c:	b089      	sub	sp, #36	; 0x24
    911e:	af00      	add	r7, sp, #0
    9120:	4606      	mov	r6, r0
    9122:	460c      	mov	r4, r1
	__asm__ volatile(
    9124:	f04f 0320 	mov.w	r3, #32
    9128:	f3ef 8811 	mrs	r8, BASEPRI
    912c:	f383 8812 	msr	BASEPRI_MAX, r3
    9130:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9134:	f001 f928 	bl	a388 <z_impl_z_current_get>
    9138:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    913a:	4630      	mov	r0, r6
    913c:	f7ff ffbc 	bl	90b8 <reason_to_str>
    9140:	46e9      	mov	r9, sp
    9142:	2303      	movs	r3, #3
    9144:	713b      	strb	r3, [r7, #4]
    9146:	b08a      	sub	sp, #40	; 0x28
    9148:	466b      	mov	r3, sp
    914a:	f113 0210 	adds.w	r2, r3, #16
    914e:	f000 80af 	beq.w	92b0 <z_fatal_error+0x198>
    9152:	f04f 0c15 	mov.w	ip, #21
    9156:	2a00      	cmp	r2, #0
    9158:	f000 80ad 	beq.w	92b6 <z_fatal_error+0x19e>
    915c:	4661      	mov	r1, ip
    915e:	f1bc 0f04 	cmp.w	ip, #4
    9162:	dd03      	ble.n	916c <z_fatal_error+0x54>
    9164:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 9340 <z_fatal_error+0x228>
    9168:	f8c3 e014 	str.w	lr, [r3, #20]
    916c:	2908      	cmp	r1, #8
    916e:	dd00      	ble.n	9172 <z_fatal_error+0x5a>
    9170:	619e      	str	r6, [r3, #24]
    9172:	f04f 0e03 	mov.w	lr, #3
    9176:	f887 e000 	strb.w	lr, [r7]
    917a:	290c      	cmp	r1, #12
    917c:	dd00      	ble.n	9180 <z_fatal_error+0x68>
    917e:	61d8      	str	r0, [r3, #28]
    9180:	2910      	cmp	r1, #16
    9182:	dd01      	ble.n	9188 <z_fatal_error+0x70>
    9184:	2100      	movs	r1, #0
    9186:	6219      	str	r1, [r3, #32]
    9188:	f103 0124 	add.w	r1, r3, #36	; 0x24
    918c:	2000      	movs	r0, #0
    918e:	2800      	cmp	r0, #0
    9190:	f000 8094 	beq.w	92bc <z_fatal_error+0x1a4>
    9194:	f1bc 0f14 	cmp.w	ip, #20
    9198:	f340 8099 	ble.w	92ce <z_fatal_error+0x1b6>
    919c:	f04f 0c15 	mov.w	ip, #21
    91a0:	b142      	cbz	r2, 91b4 <z_fatal_error+0x9c>
    91a2:	2105      	movs	r1, #5
    91a4:	7139      	strb	r1, [r7, #4]
    91a6:	2100      	movs	r1, #0
    91a8:	7179      	strb	r1, [r7, #5]
    91aa:	71b9      	strb	r1, [r7, #6]
    91ac:	2101      	movs	r1, #1
    91ae:	71f9      	strb	r1, [r7, #7]
    91b0:	6878      	ldr	r0, [r7, #4]
    91b2:	6118      	str	r0, [r3, #16]
    91b4:	2100      	movs	r1, #0
    91b6:	f36f 0100 	bfc	r1, #0, #1
    91ba:	f36f 0141 	bfc	r1, #1, #1
    91be:	f36f 0182 	bfc	r1, #2, #1
    91c2:	f36f 01c5 	bfc	r1, #3, #3
    91c6:	2301      	movs	r3, #1
    91c8:	f363 1188 	bfi	r1, r3, #6, #3
    91cc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    91d0:	f36c 2152 	bfi	r1, ip, #9, #10
    91d4:	f36f 41de 	bfc	r1, #19, #12
    91d8:	f36f 71df 	bfc	r1, #31, #1
    91dc:	2300      	movs	r3, #0
    91de:	4859      	ldr	r0, [pc, #356]	; (9344 <z_fatal_error+0x22c>)
    91e0:	f002 ff9d 	bl	c11e <z_impl_z_log_msg_static_create>
    91e4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    91e6:	b124      	cbz	r4, 91f2 <z_fatal_error+0xda>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    91e8:	69e3      	ldr	r3, [r4, #28]
    91ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
    91ee:	2b00      	cmp	r3, #0
    91f0:	d170      	bne.n	92d4 <z_fatal_error+0x1bc>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    91f2:	4628      	mov	r0, r5
    91f4:	f7ff ff80 	bl	90f8 <thread_name_get>
    91f8:	46e9      	mov	r9, sp
    91fa:	2303      	movs	r3, #3
    91fc:	713b      	strb	r3, [r7, #4]
    91fe:	b08a      	sub	sp, #40	; 0x28
    9200:	466b      	mov	r3, sp
    9202:	f113 0210 	adds.w	r2, r3, #16
    9206:	f000 8088 	beq.w	931a <z_fatal_error+0x202>
    920a:	f04f 0c11 	mov.w	ip, #17
    920e:	2a00      	cmp	r2, #0
    9210:	f000 8086 	beq.w	9320 <z_fatal_error+0x208>
    9214:	4661      	mov	r1, ip
    9216:	f1bc 0f04 	cmp.w	ip, #4
    921a:	dd03      	ble.n	9224 <z_fatal_error+0x10c>
    921c:	f8df e128 	ldr.w	lr, [pc, #296]	; 9348 <z_fatal_error+0x230>
    9220:	f8c3 e014 	str.w	lr, [r3, #20]
    9224:	2908      	cmp	r1, #8
    9226:	dd00      	ble.n	922a <z_fatal_error+0x112>
    9228:	619d      	str	r5, [r3, #24]
    922a:	f04f 0e03 	mov.w	lr, #3
    922e:	f887 e000 	strb.w	lr, [r7]
    9232:	290c      	cmp	r1, #12
    9234:	dd00      	ble.n	9238 <z_fatal_error+0x120>
    9236:	61d8      	str	r0, [r3, #28]
    9238:	f103 0120 	add.w	r1, r3, #32
    923c:	2000      	movs	r0, #0
    923e:	2800      	cmp	r0, #0
    9240:	d071      	beq.n	9326 <z_fatal_error+0x20e>
    9242:	f1bc 0f10 	cmp.w	ip, #16
    9246:	dd77      	ble.n	9338 <z_fatal_error+0x220>
    9248:	f04f 0c11 	mov.w	ip, #17
    924c:	b142      	cbz	r2, 9260 <z_fatal_error+0x148>
    924e:	2104      	movs	r1, #4
    9250:	7139      	strb	r1, [r7, #4]
    9252:	2100      	movs	r1, #0
    9254:	7179      	strb	r1, [r7, #5]
    9256:	71b9      	strb	r1, [r7, #6]
    9258:	2101      	movs	r1, #1
    925a:	71f9      	strb	r1, [r7, #7]
    925c:	6878      	ldr	r0, [r7, #4]
    925e:	6118      	str	r0, [r3, #16]
    9260:	2100      	movs	r1, #0
    9262:	f36f 0100 	bfc	r1, #0, #1
    9266:	f36f 0141 	bfc	r1, #1, #1
    926a:	f36f 0182 	bfc	r1, #2, #1
    926e:	f36f 01c5 	bfc	r1, #3, #3
    9272:	2301      	movs	r3, #1
    9274:	f363 1188 	bfi	r1, r3, #6, #3
    9278:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    927c:	f36c 2152 	bfi	r1, ip, #9, #10
    9280:	f36f 41de 	bfc	r1, #19, #12
    9284:	f36f 71df 	bfc	r1, #31, #1
    9288:	2300      	movs	r3, #0
    928a:	482e      	ldr	r0, [pc, #184]	; (9344 <z_fatal_error+0x22c>)
    928c:	f002 ff47 	bl	c11e <z_impl_z_log_msg_static_create>
    9290:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    9292:	4621      	mov	r1, r4
    9294:	4630      	mov	r0, r6
    9296:	f7fd fde1 	bl	6e5c <k_sys_fatal_error_handler>
	__asm__ volatile(
    929a:	f388 8811 	msr	BASEPRI, r8
    929e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    92a2:	4628      	mov	r0, r5
    92a4:	f7fb f8de 	bl	4464 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    92a8:	3724      	adds	r7, #36	; 0x24
    92aa:	46bd      	mov	sp, r7
    92ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    92b0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    92b4:	e74f      	b.n	9156 <z_fatal_error+0x3e>
    92b6:	2103      	movs	r1, #3
    92b8:	7039      	strb	r1, [r7, #0]
    92ba:	e76b      	b.n	9194 <z_fatal_error+0x7c>
    92bc:	f100 0e20 	add.w	lr, r0, #32
    92c0:	44be      	add	lr, r7
    92c2:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    92c6:	f801 eb01 	strb.w	lr, [r1], #1
    92ca:	3001      	adds	r0, #1
    92cc:	e75f      	b.n	918e <z_fatal_error+0x76>
    92ce:	f06f 0c1b 	mvn.w	ip, #27
    92d2:	e765      	b.n	91a0 <z_fatal_error+0x88>
		LOG_ERR("Fault during interrupt handling\n");
    92d4:	4b1d      	ldr	r3, [pc, #116]	; (934c <z_fatal_error+0x234>)
    92d6:	61fb      	str	r3, [r7, #28]
    92d8:	2302      	movs	r3, #2
    92da:	713b      	strb	r3, [r7, #4]
    92dc:	2300      	movs	r3, #0
    92de:	717b      	strb	r3, [r7, #5]
    92e0:	71bb      	strb	r3, [r7, #6]
    92e2:	71fb      	strb	r3, [r7, #7]
    92e4:	687a      	ldr	r2, [r7, #4]
    92e6:	61ba      	str	r2, [r7, #24]
    92e8:	4619      	mov	r1, r3
    92ea:	f363 0100 	bfi	r1, r3, #0, #1
    92ee:	f363 0141 	bfi	r1, r3, #1, #1
    92f2:	f363 0182 	bfi	r1, r3, #2, #1
    92f6:	f363 01c5 	bfi	r1, r3, #3, #3
    92fa:	2201      	movs	r2, #1
    92fc:	f362 1188 	bfi	r1, r2, #6, #3
    9300:	2208      	movs	r2, #8
    9302:	f362 2152 	bfi	r1, r2, #9, #10
    9306:	f363 41de 	bfi	r1, r3, #19, #12
    930a:	f363 71df 	bfi	r1, r3, #31, #1
    930e:	f107 0218 	add.w	r2, r7, #24
    9312:	480c      	ldr	r0, [pc, #48]	; (9344 <z_fatal_error+0x22c>)
    9314:	f002 ff03 	bl	c11e <z_impl_z_log_msg_static_create>
    9318:	e76b      	b.n	91f2 <z_fatal_error+0xda>
	LOG_ERR("Current thread: %p (%s)", thread,
    931a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    931e:	e776      	b.n	920e <z_fatal_error+0xf6>
    9320:	2103      	movs	r1, #3
    9322:	7039      	strb	r1, [r7, #0]
    9324:	e78d      	b.n	9242 <z_fatal_error+0x12a>
    9326:	f100 0e20 	add.w	lr, r0, #32
    932a:	44be      	add	lr, r7
    932c:	f81e ec20 	ldrb.w	lr, [lr, #-32]
    9330:	f801 eb01 	strb.w	lr, [r1], #1
    9334:	3001      	adds	r0, #1
    9336:	e782      	b.n	923e <z_fatal_error+0x126>
    9338:	f06f 0c1b 	mvn.w	ip, #27
    933c:	e786      	b.n	924c <z_fatal_error+0x134>
    933e:	bf00      	nop
    9340:	00010aa0 	.word	0x00010aa0
    9344:	0000f7b8 	.word	0x0000f7b8
    9348:	00010aec 	.word	0x00010aec
    934c:	00010ac8 	.word	0x00010ac8

00009350 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    9350:	b510      	push	{r4, lr}
    9352:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    9354:	23b0      	movs	r3, #176	; 0xb0
    9356:	4c11      	ldr	r4, [pc, #68]	; (939c <init_idle_thread+0x4c>)
    9358:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    935c:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9364:	4b0e      	ldr	r3, [pc, #56]	; (93a0 <init_idle_thread+0x50>)
    9366:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    936a:	4a0e      	ldr	r2, [pc, #56]	; (93a4 <init_idle_thread+0x54>)
    936c:	9205      	str	r2, [sp, #20]
    936e:	2201      	movs	r2, #1
    9370:	9204      	str	r2, [sp, #16]
    9372:	220f      	movs	r2, #15
    9374:	9203      	str	r2, [sp, #12]
    9376:	2200      	movs	r2, #0
    9378:	9202      	str	r2, [sp, #8]
    937a:	9201      	str	r2, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	4b0a      	ldr	r3, [pc, #40]	; (93a8 <init_idle_thread+0x58>)
    9380:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9384:	4909      	ldr	r1, [pc, #36]	; (93ac <init_idle_thread+0x5c>)
    9386:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    938a:	4620      	mov	r0, r4
    938c:	f000 f95e 	bl	964c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9390:	7b63      	ldrb	r3, [r4, #13]
    9392:	f023 0304 	bic.w	r3, r3, #4
    9396:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    9398:	b006      	add	sp, #24
    939a:	bd10      	pop	{r4, pc}
    939c:	20000b98 	.word	0x20000b98
    93a0:	20001b08 	.word	0x20001b08
    93a4:	00010b04 	.word	0x00010b04
    93a8:	000097a9 	.word	0x000097a9
    93ac:	20002c30 	.word	0x20002c30

000093b0 <bg_thread_main>:
{
    93b0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    93b2:	4b0a      	ldr	r3, [pc, #40]	; (93dc <bg_thread_main+0x2c>)
    93b4:	2201      	movs	r2, #1
    93b6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    93b8:	2002      	movs	r0, #2
    93ba:	f7ff fe55 	bl	9068 <z_sys_init_run_level>
	boot_banner();
    93be:	f001 fa79 	bl	a8b4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    93c2:	2003      	movs	r0, #3
    93c4:	f7ff fe50 	bl	9068 <z_sys_init_run_level>
	z_init_static_threads();
    93c8:	f000 f9a4 	bl	9714 <z_init_static_threads>
	main();
    93cc:	f7f7 f840 	bl	450 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    93d0:	4a03      	ldr	r2, [pc, #12]	; (93e0 <bg_thread_main+0x30>)
    93d2:	7b13      	ldrb	r3, [r2, #12]
    93d4:	f023 0301 	bic.w	r3, r3, #1
    93d8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    93da:	bd08      	pop	{r3, pc}
    93dc:	20001d2c 	.word	0x20001d2c
    93e0:	20000c48 	.word	0x20000c48

000093e4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    93e4:	b508      	push	{r3, lr}
    93e6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    93e8:	4a01      	ldr	r2, [pc, #4]	; (93f0 <switch_to_main_thread+0xc>)
    93ea:	4802      	ldr	r0, [pc, #8]	; (93f4 <switch_to_main_thread+0x10>)
    93ec:	f7fa f884 	bl	34f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    93f0:	000093b1 	.word	0x000093b1
    93f4:	20000c48 	.word	0x20000c48

000093f8 <z_bss_zero>:
{
    93f8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    93fa:	4803      	ldr	r0, [pc, #12]	; (9408 <z_bss_zero+0x10>)
    93fc:	4a03      	ldr	r2, [pc, #12]	; (940c <z_bss_zero+0x14>)
    93fe:	1a12      	subs	r2, r2, r0
    9400:	2100      	movs	r1, #0
    9402:	f005 fb81 	bl	eb08 <z_early_memset>
}
    9406:	bd08      	pop	{r3, pc}
    9408:	20000300 	.word	0x20000300
    940c:	20001d30 	.word	0x20001d30

00009410 <z_init_cpu>:
{
    9410:	b510      	push	{r4, lr}
    9412:	4604      	mov	r4, r0
	init_idle_thread(id);
    9414:	f7ff ff9c 	bl	9350 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    9418:	23b0      	movs	r3, #176	; 0xb0
    941a:	490a      	ldr	r1, [pc, #40]	; (9444 <z_init_cpu+0x34>)
    941c:	fb03 1104 	mla	r1, r3, r4, r1
    9420:	4a09      	ldr	r2, [pc, #36]	; (9448 <z_init_cpu+0x38>)
    9422:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    9426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    942a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    942c:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    942e:	4b07      	ldr	r3, [pc, #28]	; (944c <z_init_cpu+0x3c>)
    9430:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    9434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    9438:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    943c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    9440:	6053      	str	r3, [r2, #4]
}
    9442:	bd10      	pop	{r4, pc}
    9444:	20000b98 	.word	0x20000b98
    9448:	20001b08 	.word	0x20001b08
    944c:	20002430 	.word	0x20002430

00009450 <prepare_multithreading>:
{
    9450:	b570      	push	{r4, r5, r6, lr}
    9452:	b086      	sub	sp, #24
	z_sched_init();
    9454:	f000 fed0 	bl	a1f8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    9458:	4d10      	ldr	r5, [pc, #64]	; (949c <prepare_multithreading+0x4c>)
    945a:	4b11      	ldr	r3, [pc, #68]	; (94a0 <prepare_multithreading+0x50>)
    945c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    945e:	4b11      	ldr	r3, [pc, #68]	; (94a4 <prepare_multithreading+0x54>)
    9460:	9305      	str	r3, [sp, #20]
    9462:	2301      	movs	r3, #1
    9464:	9304      	str	r3, [sp, #16]
    9466:	2400      	movs	r4, #0
    9468:	9403      	str	r4, [sp, #12]
    946a:	9402      	str	r4, [sp, #8]
    946c:	9401      	str	r4, [sp, #4]
    946e:	9400      	str	r4, [sp, #0]
    9470:	4b0d      	ldr	r3, [pc, #52]	; (94a8 <prepare_multithreading+0x58>)
    9472:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9476:	490d      	ldr	r1, [pc, #52]	; (94ac <prepare_multithreading+0x5c>)
    9478:	4628      	mov	r0, r5
    947a:	f000 f8e7 	bl	964c <z_setup_new_thread>
    947e:	4606      	mov	r6, r0
    9480:	7b6b      	ldrb	r3, [r5, #13]
    9482:	f023 0304 	bic.w	r3, r3, #4
    9486:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    9488:	4628      	mov	r0, r5
    948a:	f005 fcf1 	bl	ee70 <z_ready_thread>
	z_init_cpu(0);
    948e:	4620      	mov	r0, r4
    9490:	f7ff ffbe 	bl	9410 <z_init_cpu>
}
    9494:	4630      	mov	r0, r6
    9496:	b006      	add	sp, #24
    9498:	bd70      	pop	{r4, r5, r6, pc}
    949a:	bf00      	nop
    949c:	20000c48 	.word	0x20000c48
    94a0:	20001b08 	.word	0x20001b08
    94a4:	00010b0c 	.word	0x00010b0c
    94a8:	000093b1 	.word	0x000093b1
    94ac:	20002d70 	.word	0x20002d70

000094b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    94b0:	b500      	push	{lr}
    94b2:	b0ad      	sub	sp, #180	; 0xb4
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    94b4:	4b1f      	ldr	r3, [pc, #124]	; (9534 <z_cstart+0x84>)
	uint32_t msp =
    94b6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    94ba:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    94be:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    94c2:	4c1d      	ldr	r4, [pc, #116]	; (9538 <z_cstart+0x88>)
    94c4:	23e0      	movs	r3, #224	; 0xe0
    94c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    94ca:	2500      	movs	r5, #0
    94cc:	77e5      	strb	r5, [r4, #31]
    94ce:	7625      	strb	r5, [r4, #24]
    94d0:	7665      	strb	r5, [r4, #25]
    94d2:	76a5      	strb	r5, [r4, #26]
    94d4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    94d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    94da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    94de:	6263      	str	r3, [r4, #36]	; 0x24
    94e0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    94e4:	f7fa ff0a 	bl	42fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    94e8:	f7f9 fde4 	bl	30b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    94ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94f0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    94f2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    94f4:	f7fb fa0a 	bl	490c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    94f8:	f7fa ffce 	bl	4498 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    94fc:	f7f8 fc1a 	bl	1d34 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    9500:	2401      	movs	r4, #1
    9502:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    9506:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    950a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    950c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    950e:	4668      	mov	r0, sp
    9510:	f001 f9ca 	bl	a8a8 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    9514:	4b09      	ldr	r3, [pc, #36]	; (953c <z_cstart+0x8c>)
    9516:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    951a:	f7ff fd99 	bl	9050 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    951e:	4628      	mov	r0, r5
    9520:	f7ff fda2 	bl	9068 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9524:	4620      	mov	r0, r4
    9526:	f7ff fd9f 	bl	9068 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    952a:	f7ff ff91 	bl	9450 <prepare_multithreading>
    952e:	f7ff ff59 	bl	93e4 <switch_to_main_thread>
    9532:	bf00      	nop
    9534:	20002430 	.word	0x20002430
    9538:	e000ed00 	.word	0xe000ed00
    953c:	20001b08 	.word	0x20001b08

00009540 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    9540:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9542:	4c06      	ldr	r4, [pc, #24]	; (955c <init_mem_slab_module+0x1c>)
	int rc = 0;
    9544:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9546:	e000      	b.n	954a <init_mem_slab_module+0xa>
    9548:	341c      	adds	r4, #28
    954a:	4b05      	ldr	r3, [pc, #20]	; (9560 <init_mem_slab_module+0x20>)
    954c:	429c      	cmp	r4, r3
    954e:	d204      	bcs.n	955a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    9550:	4620      	mov	r0, r4
    9552:	f005 fae1 	bl	eb18 <create_free_list>
		if (rc < 0) {
    9556:	2800      	cmp	r0, #0
    9558:	daf6      	bge.n	9548 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    955a:	bd10      	pop	{r4, pc}
    955c:	20000264 	.word	0x20000264
    9560:	20000264 	.word	0x20000264

00009564 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9564:	b530      	push	{r4, r5, lr}
    9566:	b083      	sub	sp, #12
    9568:	460d      	mov	r5, r1
	__asm__ volatile(
    956a:	f04f 0120 	mov.w	r1, #32
    956e:	f3ef 8c11 	mrs	ip, BASEPRI
    9572:	f381 8812 	msr	BASEPRI_MAX, r1
    9576:	f3bf 8f6f 	isb	sy
    957a:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    957c:	6944      	ldr	r4, [r0, #20]
    957e:	b164      	cbz	r4, 959a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    9580:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    9582:	6823      	ldr	r3, [r4, #0]
    9584:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9586:	6983      	ldr	r3, [r0, #24]
    9588:	3301      	adds	r3, #1
    958a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    958c:	2000      	movs	r0, #0
	__asm__ volatile(
    958e:	f381 8811 	msr	BASEPRI, r1
    9592:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    9596:	b003      	add	sp, #12
    9598:	bd30      	pop	{r4, r5, pc}
    959a:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    959e:	ea53 0402 	orrs.w	r4, r3, r2
    95a2:	d104      	bne.n	95ae <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    95a4:	2300      	movs	r3, #0
    95a6:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    95a8:	f06f 000b 	mvn.w	r0, #11
    95ac:	e7ef      	b.n	958e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    95ae:	9200      	str	r2, [sp, #0]
    95b0:	9301      	str	r3, [sp, #4]
    95b2:	4602      	mov	r2, r0
    95b4:	4670      	mov	r0, lr
    95b6:	f000 fd21 	bl	9ffc <z_pend_curr>
		if (result == 0) {
    95ba:	2800      	cmp	r0, #0
    95bc:	d1eb      	bne.n	9596 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    95be:	4b02      	ldr	r3, [pc, #8]	; (95c8 <k_mem_slab_alloc+0x64>)
    95c0:	689b      	ldr	r3, [r3, #8]
    95c2:	695b      	ldr	r3, [r3, #20]
    95c4:	602b      	str	r3, [r5, #0]
		return result;
    95c6:	e7e6      	b.n	9596 <k_mem_slab_alloc+0x32>
    95c8:	20001b08 	.word	0x20001b08

000095cc <z_thread_monitor_exit>:
	__asm__ volatile(
    95cc:	f04f 0320 	mov.w	r3, #32
    95d0:	f3ef 8111 	mrs	r1, BASEPRI
    95d4:	f383 8812 	msr	BASEPRI_MAX, r3
    95d8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    95dc:	4b0a      	ldr	r3, [pc, #40]	; (9608 <z_thread_monitor_exit+0x3c>)
    95de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95e0:	4283      	cmp	r3, r0
    95e2:	d104      	bne.n	95ee <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    95e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    95e6:	4b08      	ldr	r3, [pc, #32]	; (9608 <z_thread_monitor_exit+0x3c>)
    95e8:	629a      	str	r2, [r3, #40]	; 0x28
    95ea:	e007      	b.n	95fc <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    95ec:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    95ee:	b113      	cbz	r3, 95f6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    95f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    95f2:	4282      	cmp	r2, r0
    95f4:	d1fa      	bne.n	95ec <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    95f6:	b10b      	cbz	r3, 95fc <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    95f8:	6f02      	ldr	r2, [r0, #112]	; 0x70
    95fa:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    95fc:	f381 8811 	msr	BASEPRI, r1
    9600:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    9604:	4770      	bx	lr
    9606:	bf00      	nop
    9608:	20001b08 	.word	0x20001b08

0000960c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    960c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    960e:	4604      	mov	r4, r0
    9610:	b140      	cbz	r0, 9624 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    9612:	221f      	movs	r2, #31
    9614:	f104 0074 	add.w	r0, r4, #116	; 0x74
    9618:	f003 fa0a 	bl	ca30 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    961c:	2000      	movs	r0, #0
    961e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    9622:	bd10      	pop	{r4, pc}
		thread = _current;
    9624:	4b01      	ldr	r3, [pc, #4]	; (962c <z_impl_k_thread_name_set+0x20>)
    9626:	689c      	ldr	r4, [r3, #8]
    9628:	e7f3      	b.n	9612 <z_impl_k_thread_name_set+0x6>
    962a:	bf00      	nop
    962c:	20001b08 	.word	0x20001b08

00009630 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    9630:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9632:	ea53 0102 	orrs.w	r1, r3, r2
    9636:	d102      	bne.n	963e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    9638:	f005 fad6 	bl	ebe8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    963c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    963e:	4902      	ldr	r1, [pc, #8]	; (9648 <schedule_new_thread+0x18>)
    9640:	3018      	adds	r0, #24
    9642:	f000 ff55 	bl	a4f0 <z_add_timeout>
    9646:	e7f9      	b.n	963c <schedule_new_thread+0xc>
    9648:	0000eea9 	.word	0x0000eea9

0000964c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9650:	b085      	sub	sp, #20
    9652:	4604      	mov	r4, r0
    9654:	460f      	mov	r7, r1
    9656:	4615      	mov	r5, r2
    9658:	461e      	mov	r6, r3
    965a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    965e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    9662:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    9666:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    966a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    966e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    9670:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    9672:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9674:	2204      	movs	r2, #4
    9676:	9911      	ldr	r1, [sp, #68]	; 0x44
    9678:	f005 faba 	bl	ebf0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    967c:	462a      	mov	r2, r5
    967e:	4639      	mov	r1, r7
    9680:	4620      	mov	r0, r4
    9682:	f005 fa9d 	bl	ebc0 <setup_thread_stack>
    9686:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9688:	f8cd 8008 	str.w	r8, [sp, #8]
    968c:	f8cd 9004 	str.w	r9, [sp, #4]
    9690:	f8cd a000 	str.w	sl, [sp]
    9694:	4633      	mov	r3, r6
    9696:	4602      	mov	r2, r0
    9698:	4639      	mov	r1, r7
    969a:	4620      	mov	r0, r4
    969c:	f7f9 ff0a 	bl	34b4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    96a0:	2300      	movs	r3, #0
    96a2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    96a4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    96a6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    96aa:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    96ae:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    96b2:	f04f 0320 	mov.w	r3, #32
    96b6:	f3ef 8211 	mrs	r2, BASEPRI
    96ba:	f383 8812 	msr	BASEPRI_MAX, r3
    96be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    96c2:	4b13      	ldr	r3, [pc, #76]	; (9710 <z_setup_new_thread+0xc4>)
    96c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    96c6:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    96c8:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    96ca:	f382 8811 	msr	BASEPRI, r2
    96ce:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    96d2:	f1bb 0f00 	cmp.w	fp, #0
    96d6:	d013      	beq.n	9700 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    96d8:	221f      	movs	r2, #31
    96da:	4659      	mov	r1, fp
    96dc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    96e0:	f003 f9a6 	bl	ca30 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    96e4:	2300      	movs	r3, #0
    96e6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    96ea:	4b09      	ldr	r3, [pc, #36]	; (9710 <z_setup_new_thread+0xc4>)
    96ec:	689b      	ldr	r3, [r3, #8]
    96ee:	b15b      	cbz	r3, 9708 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    96f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    96f4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    96f8:	4628      	mov	r0, r5
    96fa:	b005      	add	sp, #20
    96fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    9700:	2300      	movs	r3, #0
    9702:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    9706:	e7f0      	b.n	96ea <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    9708:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    970c:	e7f4      	b.n	96f8 <z_setup_new_thread+0xac>
    970e:	bf00      	nop
    9710:	20001b08 	.word	0x20001b08

00009714 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    9714:	b530      	push	{r4, r5, lr}
    9716:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    9718:	4c21      	ldr	r4, [pc, #132]	; (97a0 <z_init_static_threads+0x8c>)
    971a:	e014      	b.n	9746 <z_init_static_threads+0x32>
		z_setup_new_thread(
    971c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    971e:	9305      	str	r3, [sp, #20]
    9720:	6a23      	ldr	r3, [r4, #32]
    9722:	9304      	str	r3, [sp, #16]
    9724:	69e3      	ldr	r3, [r4, #28]
    9726:	9303      	str	r3, [sp, #12]
    9728:	69a3      	ldr	r3, [r4, #24]
    972a:	9302      	str	r3, [sp, #8]
    972c:	6963      	ldr	r3, [r4, #20]
    972e:	9301      	str	r3, [sp, #4]
    9730:	6923      	ldr	r3, [r4, #16]
    9732:	9300      	str	r3, [sp, #0]
    9734:	68e3      	ldr	r3, [r4, #12]
    9736:	68a2      	ldr	r2, [r4, #8]
    9738:	6861      	ldr	r1, [r4, #4]
    973a:	6820      	ldr	r0, [r4, #0]
    973c:	f7ff ff86 	bl	964c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    9740:	6823      	ldr	r3, [r4, #0]
    9742:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    9744:	3430      	adds	r4, #48	; 0x30
    9746:	4b17      	ldr	r3, [pc, #92]	; (97a4 <z_init_static_threads+0x90>)
    9748:	429c      	cmp	r4, r3
    974a:	d3e7      	bcc.n	971c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    974c:	f000 fb08 	bl	9d60 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9750:	4c13      	ldr	r4, [pc, #76]	; (97a0 <z_init_static_threads+0x8c>)
    9752:	e000      	b.n	9756 <z_init_static_threads+0x42>
    9754:	3430      	adds	r4, #48	; 0x30
    9756:	4b13      	ldr	r3, [pc, #76]	; (97a4 <z_init_static_threads+0x90>)
    9758:	429c      	cmp	r4, r3
    975a:	d21c      	bcs.n	9796 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    975c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    975e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9762:	d0f7      	beq.n	9754 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    9764:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    9766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    976a:	17c1      	asrs	r1, r0, #31
    976c:	03c9      	lsls	r1, r1, #15
    976e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    9772:	03c0      	lsls	r0, r0, #15
    9774:	f240 33e7 	movw	r3, #999	; 0x3e7
    9778:	18c0      	adds	r0, r0, r3
    977a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    977e:	f04f 0300 	mov.w	r3, #0
    9782:	f141 0100 	adc.w	r1, r1, #0
    9786:	f7f6 fce5 	bl	154 <__aeabi_uldivmod>
    978a:	4602      	mov	r2, r0
    978c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    978e:	4628      	mov	r0, r5
    9790:	f7ff ff4e 	bl	9630 <schedule_new_thread>
    9794:	e7de      	b.n	9754 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    9796:	f000 fcdd 	bl	a154 <k_sched_unlock>
}
    979a:	b007      	add	sp, #28
    979c:	bd30      	pop	{r4, r5, pc}
    979e:	bf00      	nop
    97a0:	20000264 	.word	0x20000264
    97a4:	20000264 	.word	0x20000264

000097a8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    97a8:	b508      	push	{r3, lr}
    97aa:	e001      	b.n	97b0 <idle+0x8>
	arch_cpu_idle();
    97ac:	f7f9 fc88 	bl	30c0 <arch_cpu_idle>
	__asm__ volatile(
    97b0:	f04f 0220 	mov.w	r2, #32
    97b4:	f3ef 8311 	mrs	r3, BASEPRI
    97b8:	f382 8812 	msr	BASEPRI_MAX, r2
    97bc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    97c0:	f005 fcaa 	bl	f118 <z_get_next_timeout_expiry>
    97c4:	4b05      	ldr	r3, [pc, #20]	; (97dc <idle+0x34>)
    97c6:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    97c8:	4b05      	ldr	r3, [pc, #20]	; (97e0 <idle+0x38>)
    97ca:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    97cc:	2b00      	cmp	r3, #0
    97ce:	d0ed      	beq.n	97ac <idle+0x4>
    97d0:	f7f9 fab4 	bl	2d3c <pm_system_suspend>
    97d4:	2800      	cmp	r0, #0
    97d6:	d1eb      	bne.n	97b0 <idle+0x8>
    97d8:	e7e8      	b.n	97ac <idle+0x4>
    97da:	bf00      	nop
    97dc:	20001b08 	.word	0x20001b08
    97e0:	20001d2c 	.word	0x20001d2c

000097e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    97e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97e8:	b082      	sub	sp, #8
    97ea:	4604      	mov	r4, r0
    97ec:	461e      	mov	r6, r3
    97ee:	f04f 0320 	mov.w	r3, #32
    97f2:	f3ef 8511 	mrs	r5, BASEPRI
    97f6:	f383 8812 	msr	BASEPRI_MAX, r3
    97fa:	f3bf 8f6f 	isb	sy
    97fe:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9800:	68c1      	ldr	r1, [r0, #12]
    9802:	b999      	cbnz	r1, 982c <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    9804:	2900      	cmp	r1, #0
    9806:	d14f      	bne.n	98a8 <z_impl_k_mutex_lock+0xc4>
    9808:	4a33      	ldr	r2, [pc, #204]	; (98d8 <z_impl_k_mutex_lock+0xf4>)
    980a:	6892      	ldr	r2, [r2, #8]
    980c:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9810:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    9812:	3101      	adds	r1, #1
    9814:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    9816:	4a30      	ldr	r2, [pc, #192]	; (98d8 <z_impl_k_mutex_lock+0xf4>)
    9818:	6892      	ldr	r2, [r2, #8]
    981a:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    981c:	f383 8811 	msr	BASEPRI, r3
    9820:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    9824:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9826:	b002      	add	sp, #8
    9828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    982c:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    982e:	6880      	ldr	r0, [r0, #8]
    9830:	4a29      	ldr	r2, [pc, #164]	; (98d8 <z_impl_k_mutex_lock+0xf4>)
    9832:	6892      	ldr	r2, [r2, #8]
    9834:	4290      	cmp	r0, r2
    9836:	d0e5      	beq.n	9804 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9838:	ea56 0107 	orrs.w	r1, r6, r7
    983c:	d036      	beq.n	98ac <z_impl_k_mutex_lock+0xc8>
					    mutex->owner->base.prio);
    983e:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9842:	4641      	mov	r1, r8
    9844:	f992 000e 	ldrsb.w	r0, [r2, #14]
    9848:	f005 fa05 	bl	ec56 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    984c:	4580      	cmp	r8, r0
    984e:	dc34      	bgt.n	98ba <z_impl_k_mutex_lock+0xd6>
	bool resched = false;
    9850:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9854:	9700      	str	r7, [sp, #0]
    9856:	9601      	str	r6, [sp, #4]
    9858:	4622      	mov	r2, r4
    985a:	4629      	mov	r1, r5
    985c:	481f      	ldr	r0, [pc, #124]	; (98dc <z_impl_k_mutex_lock+0xf8>)
    985e:	f000 fbcd 	bl	9ffc <z_pend_curr>
	if (got_mutex == 0) {
    9862:	2800      	cmp	r0, #0
    9864:	d0df      	beq.n	9826 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    9866:	f04f 0320 	mov.w	r3, #32
    986a:	f3ef 8511 	mrs	r5, BASEPRI
    986e:	f383 8812 	msr	BASEPRI_MAX, r3
    9872:	f3bf 8f6f 	isb	sy
    9876:	462e      	mov	r6, r5
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9878:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    987a:	429c      	cmp	r4, r3
    987c:	d023      	beq.n	98c6 <z_impl_k_mutex_lock+0xe2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    987e:	b313      	cbz	r3, 98c6 <z_impl_k_mutex_lock+0xe2>
    9880:	6921      	ldr	r1, [r4, #16]
    9882:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9886:	f005 f9e6 	bl	ec56 <new_prio_for_inheritance>
    988a:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    988c:	4620      	mov	r0, r4
    988e:	f005 f9ed 	bl	ec6c <adjust_owner_prio>
    9892:	b9d0      	cbnz	r0, 98ca <z_impl_k_mutex_lock+0xe6>
    9894:	f1b8 0f00 	cmp.w	r8, #0
    9898:	d117      	bne.n	98ca <z_impl_k_mutex_lock+0xe6>
	__asm__ volatile(
    989a:	f386 8811 	msr	BASEPRI, r6
    989e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    98a2:	f06f 000a 	mvn.w	r0, #10
    98a6:	e7be      	b.n	9826 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    98a8:	6922      	ldr	r2, [r4, #16]
    98aa:	e7b1      	b.n	9810 <z_impl_k_mutex_lock+0x2c>
    98ac:	f385 8811 	msr	BASEPRI, r5
    98b0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    98b4:	f06f 000f 	mvn.w	r0, #15
    98b8:	e7b5      	b.n	9826 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    98ba:	4601      	mov	r1, r0
    98bc:	4620      	mov	r0, r4
    98be:	f005 f9d5 	bl	ec6c <adjust_owner_prio>
    98c2:	4680      	mov	r8, r0
    98c4:	e7c6      	b.n	9854 <z_impl_k_mutex_lock+0x70>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    98c6:	6921      	ldr	r1, [r4, #16]
    98c8:	e7e0      	b.n	988c <z_impl_k_mutex_lock+0xa8>
		z_reschedule(&lock, key);
    98ca:	4629      	mov	r1, r5
    98cc:	4803      	ldr	r0, [pc, #12]	; (98dc <z_impl_k_mutex_lock+0xf8>)
    98ce:	f000 fa31 	bl	9d34 <z_reschedule>
	return -EAGAIN;
    98d2:	f06f 000a 	mvn.w	r0, #10
    98d6:	e7a6      	b.n	9826 <z_impl_k_mutex_lock+0x42>
    98d8:	20001b08 	.word	0x20001b08
    98dc:	20001b34 	.word	0x20001b34

000098e0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    98e0:	6883      	ldr	r3, [r0, #8]
    98e2:	b38b      	cbz	r3, 9948 <z_impl_k_mutex_unlock+0x68>
{
    98e4:	b570      	push	{r4, r5, r6, lr}
    98e6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    98e8:	4a1a      	ldr	r2, [pc, #104]	; (9954 <z_impl_k_mutex_unlock+0x74>)
    98ea:	6892      	ldr	r2, [r2, #8]
    98ec:	4293      	cmp	r3, r2
    98ee:	d12e      	bne.n	994e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    98f0:	68c3      	ldr	r3, [r0, #12]
    98f2:	2b01      	cmp	r3, #1
    98f4:	d903      	bls.n	98fe <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    98f6:	3b01      	subs	r3, #1
    98f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    98fa:	2000      	movs	r0, #0
}
    98fc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    98fe:	f04f 0320 	mov.w	r3, #32
    9902:	f3ef 8511 	mrs	r5, BASEPRI
    9906:	f383 8812 	msr	BASEPRI_MAX, r3
    990a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    990e:	6901      	ldr	r1, [r0, #16]
    9910:	f005 f9ac 	bl	ec6c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9914:	4620      	mov	r0, r4
    9916:	f005 fb76 	bl	f006 <z_unpend_first_thread>
	mutex->owner = new_owner;
    991a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    991c:	b168      	cbz	r0, 993a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    991e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9922:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9924:	2400      	movs	r4, #0
    9926:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    992a:	f005 faa1 	bl	ee70 <z_ready_thread>
		z_reschedule(&lock, key);
    992e:	4629      	mov	r1, r5
    9930:	4809      	ldr	r0, [pc, #36]	; (9958 <z_impl_k_mutex_unlock+0x78>)
    9932:	f000 f9ff 	bl	9d34 <z_reschedule>
	return 0;
    9936:	4620      	mov	r0, r4
    9938:	e7e0      	b.n	98fc <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    993a:	2000      	movs	r0, #0
    993c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    993e:	f385 8811 	msr	BASEPRI, r5
    9942:	f3bf 8f6f 	isb	sy
    9946:	e7d9      	b.n	98fc <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    9948:	f06f 0015 	mvn.w	r0, #21
}
    994c:	4770      	bx	lr
		return -EPERM;
    994e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9952:	e7d3      	b.n	98fc <z_impl_k_mutex_unlock+0x1c>
    9954:	20001b08 	.word	0x20001b08
    9958:	20001b34 	.word	0x20001b34

0000995c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    995c:	b538      	push	{r3, r4, r5, lr}
    995e:	4604      	mov	r4, r0
	__asm__ volatile(
    9960:	f04f 0320 	mov.w	r3, #32
    9964:	f3ef 8511 	mrs	r5, BASEPRI
    9968:	f383 8812 	msr	BASEPRI_MAX, r3
    996c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9970:	f005 fb49 	bl	f006 <z_unpend_first_thread>

	if (thread != NULL) {
    9974:	b148      	cbz	r0, 998a <z_impl_k_sem_give+0x2e>
    9976:	2200      	movs	r2, #0
    9978:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    997c:	f005 fa78 	bl	ee70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    9980:	4629      	mov	r1, r5
    9982:	4807      	ldr	r0, [pc, #28]	; (99a0 <z_impl_k_sem_give+0x44>)
    9984:	f000 f9d6 	bl	9d34 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9988:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    998a:	68a3      	ldr	r3, [r4, #8]
    998c:	68e2      	ldr	r2, [r4, #12]
    998e:	4293      	cmp	r3, r2
    9990:	d003      	beq.n	999a <z_impl_k_sem_give+0x3e>
    9992:	2201      	movs	r2, #1
    9994:	4413      	add	r3, r2
    9996:	60a3      	str	r3, [r4, #8]
}
    9998:	e7f2      	b.n	9980 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    999a:	2200      	movs	r2, #0
    999c:	e7fa      	b.n	9994 <z_impl_k_sem_give+0x38>
    999e:	bf00      	nop
    99a0:	20001b34 	.word	0x20001b34

000099a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    99a4:	b510      	push	{r4, lr}
    99a6:	b082      	sub	sp, #8
    99a8:	f04f 0420 	mov.w	r4, #32
    99ac:	f3ef 8111 	mrs	r1, BASEPRI
    99b0:	f384 8812 	msr	BASEPRI_MAX, r4
    99b4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    99b8:	6884      	ldr	r4, [r0, #8]
    99ba:	b144      	cbz	r4, 99ce <z_impl_k_sem_take+0x2a>
		sem->count--;
    99bc:	3c01      	subs	r4, #1
    99be:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    99c0:	f381 8811 	msr	BASEPRI, r1
    99c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    99c8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    99ca:	b002      	add	sp, #8
    99cc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    99ce:	ea53 0402 	orrs.w	r4, r3, r2
    99d2:	d006      	beq.n	99e2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    99d4:	9200      	str	r2, [sp, #0]
    99d6:	9301      	str	r3, [sp, #4]
    99d8:	4602      	mov	r2, r0
    99da:	4805      	ldr	r0, [pc, #20]	; (99f0 <z_impl_k_sem_take+0x4c>)
    99dc:	f000 fb0e 	bl	9ffc <z_pend_curr>
	return ret;
    99e0:	e7f3      	b.n	99ca <z_impl_k_sem_take+0x26>
    99e2:	f381 8811 	msr	BASEPRI, r1
    99e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    99ea:	f06f 000f 	mvn.w	r0, #15
    99ee:	e7ec      	b.n	99ca <z_impl_k_sem_take+0x26>
    99f0:	20001b34 	.word	0x20001b34

000099f4 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    99f4:	b370      	cbz	r0, 9a54 <queue_submit_locked+0x60>
{
    99f6:	b538      	push	{r3, r4, r5, lr}
    99f8:	460d      	mov	r5, r1
    99fa:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    99fc:	4b1b      	ldr	r3, [pc, #108]	; (9a6c <queue_submit_locked+0x78>)
    99fe:	689b      	ldr	r3, [r3, #8]
    9a00:	4283      	cmp	r3, r0
    9a02:	d01b      	beq.n	9a3c <queue_submit_locked+0x48>
    9a04:	2300      	movs	r3, #0
    9a06:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    9a08:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    9a0c:	f3c3 0180 	ubfx	r1, r3, #2, #1
    9a10:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9a14:	f013 0f01 	tst.w	r3, #1
    9a18:	d01f      	beq.n	9a5a <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    9a1a:	b101      	cbz	r1, 9a1e <queue_submit_locked+0x2a>
    9a1c:	b302      	cbz	r2, 9a60 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    9a1e:	b100      	cbz	r0, 9a22 <queue_submit_locked+0x2e>
    9a20:	b309      	cbz	r1, 9a66 <queue_submit_locked+0x72>
	parent->next = child;
    9a22:	2300      	movs	r3, #0
    9a24:	602b      	str	r3, [r5, #0]
	return list->tail;
    9a26:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    9a2a:	b173      	cbz	r3, 9a4a <queue_submit_locked+0x56>
	parent->next = child;
    9a2c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9a2e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    9a32:	4620      	mov	r0, r4
    9a34:	f005 f94e 	bl	ecd4 <notify_queue_locked>
		ret = 1;
    9a38:	2001      	movs	r0, #1
	}

	return ret;
}
    9a3a:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9a3c:	f005 f8cc 	bl	ebd8 <k_is_in_isr>
    9a40:	b908      	cbnz	r0, 9a46 <queue_submit_locked+0x52>
    9a42:	2301      	movs	r3, #1
    9a44:	e7df      	b.n	9a06 <queue_submit_locked+0x12>
    9a46:	2300      	movs	r3, #0
    9a48:	e7dd      	b.n	9a06 <queue_submit_locked+0x12>
    9a4a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	list->head = node;
    9a4e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
}
    9a52:	e7ee      	b.n	9a32 <queue_submit_locked+0x3e>
		return -EINVAL;
    9a54:	f06f 0015 	mvn.w	r0, #21
}
    9a58:	4770      	bx	lr
		ret = -ENODEV;
    9a5a:	f06f 0012 	mvn.w	r0, #18
    9a5e:	e7ec      	b.n	9a3a <queue_submit_locked+0x46>
		ret = -EBUSY;
    9a60:	f06f 000f 	mvn.w	r0, #15
    9a64:	e7e9      	b.n	9a3a <queue_submit_locked+0x46>
		ret = -EBUSY;
    9a66:	f06f 000f 	mvn.w	r0, #15
    9a6a:	e7e6      	b.n	9a3a <queue_submit_locked+0x46>
    9a6c:	20001b08 	.word	0x20001b08

00009a70 <finalize_cancel_locked>:
{
    9a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a72:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    9a74:	68c3      	ldr	r3, [r0, #12]
    9a76:	f023 0302 	bic.w	r3, r3, #2
    9a7a:	60c3      	str	r3, [r0, #12]
	return list->head;
    9a7c:	4b13      	ldr	r3, [pc, #76]	; (9acc <finalize_cancel_locked+0x5c>)
    9a7e:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9a80:	b185      	cbz	r5, 9aa4 <finalize_cancel_locked+0x34>
	return node->next;
    9a82:	682c      	ldr	r4, [r5, #0]
    9a84:	b104      	cbz	r4, 9a88 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9a86:	b10d      	cbz	r5, 9a8c <finalize_cancel_locked+0x1c>
    9a88:	2700      	movs	r7, #0
    9a8a:	e010      	b.n	9aae <finalize_cancel_locked+0x3e>
    9a8c:	462c      	mov	r4, r5
    9a8e:	e7fb      	b.n	9a88 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9a90:	462a      	mov	r2, r5
    9a92:	4639      	mov	r1, r7
    9a94:	480d      	ldr	r0, [pc, #52]	; (9acc <finalize_cancel_locked+0x5c>)
    9a96:	f005 f90a 	bl	ecae <sys_slist_remove>
			k_sem_give(&wc->sem);
    9a9a:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    9a9e:	f7ff ff5d 	bl	995c <z_impl_k_sem_give>
}
    9aa2:	e009      	b.n	9ab8 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9aa4:	462c      	mov	r4, r5
    9aa6:	e7ef      	b.n	9a88 <finalize_cancel_locked+0x18>
    9aa8:	4623      	mov	r3, r4
    9aaa:	4625      	mov	r5, r4
    9aac:	461c      	mov	r4, r3
    9aae:	b165      	cbz	r5, 9aca <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    9ab0:	686b      	ldr	r3, [r5, #4]
    9ab2:	42b3      	cmp	r3, r6
    9ab4:	d0ec      	beq.n	9a90 <finalize_cancel_locked+0x20>
			prev = &wc->node;
    9ab6:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9ab8:	2c00      	cmp	r4, #0
    9aba:	d0f5      	beq.n	9aa8 <finalize_cancel_locked+0x38>
	return node->next;
    9abc:	6823      	ldr	r3, [r4, #0]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d0f3      	beq.n	9aaa <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9ac2:	2c00      	cmp	r4, #0
    9ac4:	d1f1      	bne.n	9aaa <finalize_cancel_locked+0x3a>
    9ac6:	4623      	mov	r3, r4
    9ac8:	e7ef      	b.n	9aaa <finalize_cancel_locked+0x3a>
}
    9aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9acc:	20001b34 	.word	0x20001b34

00009ad0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9ad0:	b570      	push	{r4, r5, r6, lr}
    9ad2:	b084      	sub	sp, #16
    9ad4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    9ad6:	e016      	b.n	9b06 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    9ad8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    9adc:	f023 0204 	bic.w	r2, r3, #4
    9ae0:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    9ae4:	f013 0f04 	tst.w	r3, #4
    9ae8:	d15a      	bne.n	9ba0 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9aea:	2300      	movs	r3, #0
    9aec:	9302      	str	r3, [sp, #8]
    9aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9af6:	e9cd 2300 	strd	r2, r3, [sp]
    9afa:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    9afe:	4631      	mov	r1, r6
    9b00:	482e      	ldr	r0, [pc, #184]	; (9bbc <work_queue_main+0xec>)
    9b02:	f000 fc7f 	bl	a404 <z_sched_wait>
	__asm__ volatile(
    9b06:	f04f 0320 	mov.w	r3, #32
    9b0a:	f3ef 8611 	mrs	r6, BASEPRI
    9b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b12:	f3bf 8f6f 	isb	sy
    9b16:	4632      	mov	r2, r6
	return list->head;
    9b18:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9b1c:	2c00      	cmp	r4, #0
    9b1e:	d0db      	beq.n	9ad8 <work_queue_main+0x8>
	return node->next;
    9b20:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    9b22:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    9b26:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9b2a:	428c      	cmp	r4, r1
    9b2c:	d035      	beq.n	9b9a <work_queue_main+0xca>
	*flagp |= BIT(bit);
    9b2e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    9b32:	f043 0302 	orr.w	r3, r3, #2
    9b36:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    9b3a:	68e3      	ldr	r3, [r4, #12]
    9b3c:	f043 0101 	orr.w	r1, r3, #1
    9b40:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    9b42:	f023 0304 	bic.w	r3, r3, #4
    9b46:	f043 0301 	orr.w	r3, r3, #1
    9b4a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    9b4c:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    9b4e:	f382 8811 	msr	BASEPRI, r2
    9b52:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9b56:	4620      	mov	r0, r4
    9b58:	4798      	blx	r3
	__asm__ volatile(
    9b5a:	f04f 0320 	mov.w	r3, #32
    9b5e:	f3ef 8611 	mrs	r6, BASEPRI
    9b62:	f383 8812 	msr	BASEPRI_MAX, r3
    9b66:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9b6a:	68e3      	ldr	r3, [r4, #12]
    9b6c:	f023 0301 	bic.w	r3, r3, #1
    9b70:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9b72:	f013 0f02 	tst.w	r3, #2
    9b76:	d11d      	bne.n	9bb4 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    9b78:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    9b7c:	f023 0302 	bic.w	r3, r3, #2
    9b80:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    9b84:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    9b88:	f386 8811 	msr	BASEPRI, r6
    9b8c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9b90:	2b00      	cmp	r3, #0
    9b92:	d1b8      	bne.n	9b06 <work_queue_main+0x36>
	z_impl_k_yield();
    9b94:	f000 fb3c 	bl	a210 <z_impl_k_yield>
}
    9b98:	e7b5      	b.n	9b06 <work_queue_main+0x36>
	list->tail = node;
    9b9a:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (node != NULL) {
    9b9e:	e7c6      	b.n	9b2e <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9ba0:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9ba4:	2200      	movs	r2, #0
    9ba6:	2101      	movs	r1, #1
    9ba8:	4620      	mov	r0, r4
    9baa:	f005 fa52 	bl	f052 <z_sched_wake>
    9bae:	2800      	cmp	r0, #0
    9bb0:	d1f8      	bne.n	9ba4 <work_queue_main+0xd4>
    9bb2:	e79a      	b.n	9aea <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    9bb4:	4620      	mov	r0, r4
    9bb6:	f7ff ff5b 	bl	9a70 <finalize_cancel_locked>
    9bba:	e7dd      	b.n	9b78 <work_queue_main+0xa8>
    9bbc:	20001b3c 	.word	0x20001b3c

00009bc0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bc2:	b089      	sub	sp, #36	; 0x24
    9bc4:	4604      	mov	r4, r0
    9bc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    9bc8:	2000      	movs	r0, #0
    9bca:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    9bce:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    9bd2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    9bd6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    9bda:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    9bde:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    9be2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    9be6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9bea:	b1fd      	cbz	r5, 9c2c <k_work_queue_start+0x6c>
    9bec:	7928      	ldrb	r0, [r5, #4]
    9bee:	b9f8      	cbnz	r0, 9c30 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9bf0:	2001      	movs	r0, #1
	*flagp = flags;
    9bf2:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9bf6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9bfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9bfe:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9c02:	2000      	movs	r0, #0
    9c04:	9004      	str	r0, [sp, #16]
    9c06:	9303      	str	r3, [sp, #12]
    9c08:	9002      	str	r0, [sp, #8]
    9c0a:	9001      	str	r0, [sp, #4]
    9c0c:	9400      	str	r4, [sp, #0]
    9c0e:	4b0a      	ldr	r3, [pc, #40]	; (9c38 <k_work_queue_start+0x78>)
    9c10:	4620      	mov	r0, r4
    9c12:	f004 fff8 	bl	ec06 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9c16:	b125      	cbz	r5, 9c22 <k_work_queue_start+0x62>
    9c18:	6829      	ldr	r1, [r5, #0]
    9c1a:	b111      	cbz	r1, 9c22 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    9c1c:	4620      	mov	r0, r4
    9c1e:	f7ff fcf5 	bl	960c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9c22:	4620      	mov	r0, r4
    9c24:	f004 ffe0 	bl	ebe8 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9c28:	b009      	add	sp, #36	; 0x24
    9c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9c2c:	2001      	movs	r0, #1
    9c2e:	e7e0      	b.n	9bf2 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    9c30:	f240 1001 	movw	r0, #257	; 0x101
    9c34:	e7dd      	b.n	9bf2 <k_work_queue_start+0x32>
    9c36:	bf00      	nop
    9c38:	00009ad1 	.word	0x00009ad1

00009c3c <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9c3c:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    9c3e:	2b7f      	cmp	r3, #127	; 0x7f
    9c40:	d80e      	bhi.n	9c60 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    9c42:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    9c44:	f013 0f1f 	tst.w	r3, #31
    9c48:	d10c      	bne.n	9c64 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9c4a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9c4e:	4b08      	ldr	r3, [pc, #32]	; (9c70 <sliceable+0x34>)
    9c50:	681b      	ldr	r3, [r3, #0]
    9c52:	429a      	cmp	r2, r3
    9c54:	db08      	blt.n	9c68 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    9c56:	4b07      	ldr	r3, [pc, #28]	; (9c74 <sliceable+0x38>)
    9c58:	4298      	cmp	r0, r3
    9c5a:	d007      	beq.n	9c6c <sliceable+0x30>
    9c5c:	2001      	movs	r0, #1
    9c5e:	4770      	bx	lr
    9c60:	2000      	movs	r0, #0
    9c62:	4770      	bx	lr
    9c64:	2000      	movs	r0, #0
    9c66:	4770      	bx	lr
    9c68:	2000      	movs	r0, #0
    9c6a:	4770      	bx	lr
    9c6c:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    9c6e:	4770      	bx	lr
    9c70:	20001b40 	.word	0x20001b40
    9c74:	20000b98 	.word	0x20000b98

00009c78 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c7c:	bf08      	it	eq
    9c7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9c82:	d100      	bne.n	9c86 <add_thread_timeout+0xe>
    9c84:	4770      	bx	lr
{
    9c86:	b508      	push	{r3, lr}
    9c88:	4902      	ldr	r1, [pc, #8]	; (9c94 <add_thread_timeout+0x1c>)
    9c8a:	3018      	adds	r0, #24
    9c8c:	f000 fc30 	bl	a4f0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    9c90:	bd08      	pop	{r3, pc}
    9c92:	bf00      	nop
    9c94:	0000eea9 	.word	0x0000eea9

00009c98 <z_reset_time_slice>:
{
    9c98:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    9c9a:	4b07      	ldr	r3, [pc, #28]	; (9cb8 <z_reset_time_slice+0x20>)
    9c9c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    9c9e:	b904      	cbnz	r4, 9ca2 <z_reset_time_slice+0xa>
}
    9ca0:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9ca2:	f7fc fcfb 	bl	669c <sys_clock_elapsed>
    9ca6:	4404      	add	r4, r0
    9ca8:	4b04      	ldr	r3, [pc, #16]	; (9cbc <z_reset_time_slice+0x24>)
    9caa:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9cac:	2100      	movs	r1, #0
    9cae:	4b02      	ldr	r3, [pc, #8]	; (9cb8 <z_reset_time_slice+0x20>)
    9cb0:	6818      	ldr	r0, [r3, #0]
    9cb2:	f005 fa48 	bl	f146 <z_set_timeout_expiry>
}
    9cb6:	e7f3      	b.n	9ca0 <z_reset_time_slice+0x8>
    9cb8:	20001b44 	.word	0x20001b44
    9cbc:	20001b08 	.word	0x20001b08

00009cc0 <k_sched_time_slice_set>:
{
    9cc0:	b570      	push	{r4, r5, r6, lr}
    9cc2:	4604      	mov	r4, r0
    9cc4:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    9cc6:	2300      	movs	r3, #0
	__asm__ volatile(
    9cc8:	f04f 0220 	mov.w	r2, #32
    9ccc:	f3ef 8511 	mrs	r5, BASEPRI
    9cd0:	f382 8812 	msr	BASEPRI_MAX, r2
    9cd4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    9cd8:	e00e      	b.n	9cf8 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    9cda:	2802      	cmp	r0, #2
    9cdc:	bfb8      	it	lt
    9cde:	2002      	movlt	r0, #2
    9ce0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    9ce2:	4b11      	ldr	r3, [pc, #68]	; (9d28 <k_sched_time_slice_set+0x68>)
    9ce4:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    9ce6:	4b11      	ldr	r3, [pc, #68]	; (9d2c <k_sched_time_slice_set+0x6c>)
    9ce8:	6898      	ldr	r0, [r3, #8]
    9cea:	f7ff ffd5 	bl	9c98 <z_reset_time_slice>
	__asm__ volatile(
    9cee:	f385 8811 	msr	BASEPRI, r5
    9cf2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9cf6:	2301      	movs	r3, #1
    9cf8:	b9a3      	cbnz	r3, 9d24 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    9cfa:	4b0c      	ldr	r3, [pc, #48]	; (9d2c <k_sched_time_slice_set+0x6c>)
    9cfc:	2200      	movs	r2, #0
    9cfe:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    9d00:	0c61      	lsrs	r1, r4, #17
    9d02:	03e0      	lsls	r0, r4, #15
    9d04:	f240 33e7 	movw	r3, #999	; 0x3e7
    9d08:	18c0      	adds	r0, r0, r3
    9d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9d0e:	f04f 0300 	mov.w	r3, #0
    9d12:	f141 0100 	adc.w	r1, r1, #0
    9d16:	f7f6 fa1d 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    9d1a:	4b05      	ldr	r3, [pc, #20]	; (9d30 <k_sched_time_slice_set+0x70>)
    9d1c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9d1e:	2c00      	cmp	r4, #0
    9d20:	dcdb      	bgt.n	9cda <k_sched_time_slice_set+0x1a>
    9d22:	e7de      	b.n	9ce2 <k_sched_time_slice_set+0x22>
}
    9d24:	bd70      	pop	{r4, r5, r6, pc}
    9d26:	bf00      	nop
    9d28:	20001b40 	.word	0x20001b40
    9d2c:	20001b08 	.word	0x20001b08
    9d30:	20001b44 	.word	0x20001b44

00009d34 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9d34:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    9d36:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9d38:	b959      	cbnz	r1, 9d52 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9d3a:	f3ef 8205 	mrs	r2, IPSR
    9d3e:	b942      	cbnz	r2, 9d52 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    9d40:	4a06      	ldr	r2, [pc, #24]	; (9d5c <z_reschedule+0x28>)
    9d42:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    9d44:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    9d46:	4290      	cmp	r0, r2
    9d48:	d003      	beq.n	9d52 <z_reschedule+0x1e>
	ret = arch_swap(key);
    9d4a:	4608      	mov	r0, r1
    9d4c:	f7f9 fb58 	bl	3400 <arch_swap>
		z_swap(lock, key);
    9d50:	e003      	b.n	9d5a <z_reschedule+0x26>
    9d52:	f383 8811 	msr	BASEPRI, r3
    9d56:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    9d5a:	bd08      	pop	{r3, pc}
    9d5c:	20001b08 	.word	0x20001b08

00009d60 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    9d60:	2300      	movs	r3, #0
	__asm__ volatile(
    9d62:	f04f 0220 	mov.w	r2, #32
    9d66:	f3ef 8111 	mrs	r1, BASEPRI
    9d6a:	f382 8812 	msr	BASEPRI_MAX, r2
    9d6e:	f3bf 8f6f 	isb	sy
    9d72:	e009      	b.n	9d88 <k_sched_lock+0x28>
	--_current->base.sched_locked;
    9d74:	4b06      	ldr	r3, [pc, #24]	; (9d90 <k_sched_lock+0x30>)
    9d76:	689a      	ldr	r2, [r3, #8]
    9d78:	7bd3      	ldrb	r3, [r2, #15]
    9d7a:	3b01      	subs	r3, #1
    9d7c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    9d7e:	f381 8811 	msr	BASEPRI, r1
    9d82:	f3bf 8f6f 	isb	sy
    9d86:	2301      	movs	r3, #1
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d0f3      	beq.n	9d74 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    9d8c:	4770      	bx	lr
    9d8e:	bf00      	nop
    9d90:	20001b08 	.word	0x20001b08

00009d94 <update_cache>:
{
    9d94:	b538      	push	{r3, r4, r5, lr}
    9d96:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    9d98:	4810      	ldr	r0, [pc, #64]	; (9ddc <update_cache+0x48>)
    9d9a:	f005 f862 	bl	ee62 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9d9e:	4605      	mov	r5, r0
    9da0:	b170      	cbz	r0, 9dc0 <update_cache+0x2c>
	if (preempt_ok != 0) {
    9da2:	b984      	cbnz	r4, 9dc6 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    9da4:	4b0e      	ldr	r3, [pc, #56]	; (9de0 <update_cache+0x4c>)
    9da6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9da8:	7b5a      	ldrb	r2, [r3, #13]
    9daa:	f012 0f1f 	tst.w	r2, #31
    9dae:	d10a      	bne.n	9dc6 <update_cache+0x32>
	return node->next != NULL;
    9db0:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9db2:	b942      	cbnz	r2, 9dc6 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9db4:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    9db6:	2a7f      	cmp	r2, #127	; 0x7f
    9db8:	d905      	bls.n	9dc6 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    9dba:	4a09      	ldr	r2, [pc, #36]	; (9de0 <update_cache+0x4c>)
    9dbc:	61d3      	str	r3, [r2, #28]
    9dbe:	e00b      	b.n	9dd8 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9dc0:	4b07      	ldr	r3, [pc, #28]	; (9de0 <update_cache+0x4c>)
    9dc2:	68dd      	ldr	r5, [r3, #12]
    9dc4:	e7ed      	b.n	9da2 <update_cache+0xe>
		if (thread != _current) {
    9dc6:	4b06      	ldr	r3, [pc, #24]	; (9de0 <update_cache+0x4c>)
    9dc8:	689b      	ldr	r3, [r3, #8]
    9dca:	42ab      	cmp	r3, r5
    9dcc:	d002      	beq.n	9dd4 <update_cache+0x40>
			z_reset_time_slice(thread);
    9dce:	4628      	mov	r0, r5
    9dd0:	f7ff ff62 	bl	9c98 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9dd4:	4b02      	ldr	r3, [pc, #8]	; (9de0 <update_cache+0x4c>)
    9dd6:	61dd      	str	r5, [r3, #28]
}
    9dd8:	bd38      	pop	{r3, r4, r5, pc}
    9dda:	bf00      	nop
    9ddc:	20001b28 	.word	0x20001b28
    9de0:	20001b08 	.word	0x20001b08

00009de4 <move_thread_to_end_of_prio_q>:
{
    9de4:	b538      	push	{r3, r4, r5, lr}
    9de6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    9de8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9dea:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9dee:	2b00      	cmp	r3, #0
    9df0:	db0a      	blt.n	9e08 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    9df2:	7b6b      	ldrb	r3, [r5, #13]
    9df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9df8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    9dfa:	4b1b      	ldr	r3, [pc, #108]	; (9e68 <move_thread_to_end_of_prio_q+0x84>)
    9dfc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e00:	429c      	cmp	r4, r3
    9e02:	d110      	bne.n	9e26 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e04:	2400      	movs	r4, #0
    9e06:	e00e      	b.n	9e26 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9e0c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9e0e:	4601      	mov	r1, r0
    9e10:	4816      	ldr	r0, [pc, #88]	; (9e6c <move_thread_to_end_of_prio_q+0x88>)
    9e12:	f005 f810 	bl	ee36 <z_priq_dumb_remove>
}
    9e16:	e7ec      	b.n	9df2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9e18:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    9e1a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9e1c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9e1e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9e20:	6065      	str	r5, [r4, #4]
}
    9e22:	e017      	b.n	9e54 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e24:	2400      	movs	r4, #0
    9e26:	b16c      	cbz	r4, 9e44 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9e28:	4621      	mov	r1, r4
    9e2a:	4628      	mov	r0, r5
    9e2c:	f004 ffc8 	bl	edc0 <z_sched_prio_cmp>
    9e30:	2800      	cmp	r0, #0
    9e32:	dcf1      	bgt.n	9e18 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9e34:	2c00      	cmp	r4, #0
    9e36:	d0f6      	beq.n	9e26 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    9e38:	4b0b      	ldr	r3, [pc, #44]	; (9e68 <move_thread_to_end_of_prio_q+0x84>)
    9e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e3c:	429c      	cmp	r4, r3
    9e3e:	d0f1      	beq.n	9e24 <move_thread_to_end_of_prio_q+0x40>
    9e40:	6824      	ldr	r4, [r4, #0]
    9e42:	e7f0      	b.n	9e26 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    9e44:	4b08      	ldr	r3, [pc, #32]	; (9e68 <move_thread_to_end_of_prio_q+0x84>)
    9e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9e48:	f103 0120 	add.w	r1, r3, #32
    9e4c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9e4e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9e50:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9e52:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    9e54:	4b04      	ldr	r3, [pc, #16]	; (9e68 <move_thread_to_end_of_prio_q+0x84>)
    9e56:	6898      	ldr	r0, [r3, #8]
    9e58:	42a8      	cmp	r0, r5
    9e5a:	bf14      	ite	ne
    9e5c:	2000      	movne	r0, #0
    9e5e:	2001      	moveq	r0, #1
    9e60:	f7ff ff98 	bl	9d94 <update_cache>
}
    9e64:	bd38      	pop	{r3, r4, r5, pc}
    9e66:	bf00      	nop
    9e68:	20001b08 	.word	0x20001b08
    9e6c:	20001b28 	.word	0x20001b28

00009e70 <slice_expired_locked>:
{
    9e70:	b538      	push	{r3, r4, r5, lr}
    9e72:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9e74:	4b07      	ldr	r3, [pc, #28]	; (9e94 <slice_expired_locked+0x24>)
    9e76:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9e78:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    9e7a:	f013 0f1f 	tst.w	r3, #31
    9e7e:	d004      	beq.n	9e8a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9e80:	4628      	mov	r0, r5
    9e82:	f7ff ff09 	bl	9c98 <z_reset_time_slice>
}
    9e86:	4620      	mov	r0, r4
    9e88:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    9e8a:	4628      	mov	r0, r5
    9e8c:	f7ff ffaa 	bl	9de4 <move_thread_to_end_of_prio_q>
    9e90:	e7f6      	b.n	9e80 <slice_expired_locked+0x10>
    9e92:	bf00      	nop
    9e94:	20001b08 	.word	0x20001b08

00009e98 <z_time_slice>:
{
    9e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e9a:	4605      	mov	r5, r0
	__asm__ volatile(
    9e9c:	f04f 0320 	mov.w	r3, #32
    9ea0:	f3ef 8611 	mrs	r6, BASEPRI
    9ea4:	f383 8812 	msr	BASEPRI_MAX, r3
    9ea8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    9eac:	4b15      	ldr	r3, [pc, #84]	; (9f04 <z_time_slice+0x6c>)
    9eae:	6898      	ldr	r0, [r3, #8]
    9eb0:	4b15      	ldr	r3, [pc, #84]	; (9f08 <z_time_slice+0x70>)
    9eb2:	681b      	ldr	r3, [r3, #0]
    9eb4:	4298      	cmp	r0, r3
    9eb6:	d011      	beq.n	9edc <z_time_slice+0x44>
    9eb8:	4634      	mov	r4, r6
	pending_current = NULL;
    9eba:	4b13      	ldr	r3, [pc, #76]	; (9f08 <z_time_slice+0x70>)
    9ebc:	2200      	movs	r2, #0
    9ebe:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    9ec0:	4b12      	ldr	r3, [pc, #72]	; (9f0c <z_time_slice+0x74>)
    9ec2:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    9ec4:	b1b3      	cbz	r3, 9ef4 <z_time_slice+0x5c>
    9ec6:	f7ff feb9 	bl	9c3c <sliceable>
    9eca:	b198      	cbz	r0, 9ef4 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    9ecc:	4b0d      	ldr	r3, [pc, #52]	; (9f04 <z_time_slice+0x6c>)
    9ece:	691b      	ldr	r3, [r3, #16]
    9ed0:	42ab      	cmp	r3, r5
    9ed2:	dd0a      	ble.n	9eea <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    9ed4:	1b5b      	subs	r3, r3, r5
    9ed6:	4a0b      	ldr	r2, [pc, #44]	; (9f04 <z_time_slice+0x6c>)
    9ed8:	6113      	str	r3, [r2, #16]
    9eda:	e00e      	b.n	9efa <z_time_slice+0x62>
		z_reset_time_slice(_current);
    9edc:	f7ff fedc 	bl	9c98 <z_reset_time_slice>
	__asm__ volatile(
    9ee0:	f386 8811 	msr	BASEPRI, r6
    9ee4:	f3bf 8f6f 	isb	sy
		return;
    9ee8:	e00b      	b.n	9f02 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    9eea:	4630      	mov	r0, r6
    9eec:	f7ff ffc0 	bl	9e70 <slice_expired_locked>
    9ef0:	4604      	mov	r4, r0
    9ef2:	e002      	b.n	9efa <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    9ef4:	4b03      	ldr	r3, [pc, #12]	; (9f04 <z_time_slice+0x6c>)
    9ef6:	2200      	movs	r2, #0
    9ef8:	611a      	str	r2, [r3, #16]
    9efa:	f384 8811 	msr	BASEPRI, r4
    9efe:	f3bf 8f6f 	isb	sy
}
    9f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f04:	20001b08 	.word	0x20001b08
    9f08:	20001b3c 	.word	0x20001b3c
    9f0c:	20001b44 	.word	0x20001b44

00009f10 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    9f10:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9f12:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9f16:	2b00      	cmp	r3, #0
    9f18:	db33      	blt.n	9f82 <ready_thread+0x72>
{
    9f1a:	b570      	push	{r4, r5, r6, lr}
    9f1c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9f1e:	f012 0f1f 	tst.w	r2, #31
    9f22:	d101      	bne.n	9f28 <ready_thread+0x18>
	return node->next != NULL;
    9f24:	6986      	ldr	r6, [r0, #24]
    9f26:	b106      	cbz	r6, 9f2a <ready_thread+0x1a>
}
    9f28:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    9f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9f2e:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    9f30:	4b14      	ldr	r3, [pc, #80]	; (9f84 <ready_thread+0x74>)
    9f32:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f36:	429d      	cmp	r5, r3
    9f38:	d108      	bne.n	9f4c <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f3a:	4635      	mov	r5, r6
    9f3c:	e006      	b.n	9f4c <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    9f3e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    9f40:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9f42:	6025      	str	r5, [r4, #0]
	prev->next = node;
    9f44:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9f46:	606c      	str	r4, [r5, #4]
}
    9f48:	e017      	b.n	9f7a <ready_thread+0x6a>
    9f4a:	4635      	mov	r5, r6
    9f4c:	b16d      	cbz	r5, 9f6a <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9f4e:	4629      	mov	r1, r5
    9f50:	4620      	mov	r0, r4
    9f52:	f004 ff35 	bl	edc0 <z_sched_prio_cmp>
    9f56:	2800      	cmp	r0, #0
    9f58:	dcf1      	bgt.n	9f3e <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9f5a:	2d00      	cmp	r5, #0
    9f5c:	d0f6      	beq.n	9f4c <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    9f5e:	4b09      	ldr	r3, [pc, #36]	; (9f84 <ready_thread+0x74>)
    9f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9f62:	429d      	cmp	r5, r3
    9f64:	d0f1      	beq.n	9f4a <ready_thread+0x3a>
    9f66:	682d      	ldr	r5, [r5, #0]
    9f68:	e7f0      	b.n	9f4c <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    9f6a:	4b06      	ldr	r3, [pc, #24]	; (9f84 <ready_thread+0x74>)
    9f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9f6e:	f103 0120 	add.w	r1, r3, #32
    9f72:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    9f74:	6062      	str	r2, [r4, #4]
	tail->next = node;
    9f76:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9f78:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    9f7a:	2000      	movs	r0, #0
    9f7c:	f7ff ff0a 	bl	9d94 <update_cache>
}
    9f80:	e7d2      	b.n	9f28 <ready_thread+0x18>
    9f82:	4770      	bx	lr
    9f84:	20001b08 	.word	0x20001b08

00009f88 <z_sched_start>:
{
    9f88:	b510      	push	{r4, lr}
	__asm__ volatile(
    9f8a:	f04f 0320 	mov.w	r3, #32
    9f8e:	f3ef 8411 	mrs	r4, BASEPRI
    9f92:	f383 8812 	msr	BASEPRI_MAX, r3
    9f96:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9f9a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    9f9c:	f013 0f04 	tst.w	r3, #4
    9fa0:	d104      	bne.n	9fac <z_sched_start+0x24>
	__asm__ volatile(
    9fa2:	f384 8811 	msr	BASEPRI, r4
    9fa6:	f3bf 8f6f 	isb	sy
}
    9faa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9fac:	f023 0304 	bic.w	r3, r3, #4
    9fb0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    9fb2:	f7ff ffad 	bl	9f10 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9fb6:	4621      	mov	r1, r4
    9fb8:	4801      	ldr	r0, [pc, #4]	; (9fc0 <z_sched_start+0x38>)
    9fba:	f7ff febb 	bl	9d34 <z_reschedule>
    9fbe:	e7f4      	b.n	9faa <z_sched_start+0x22>
    9fc0:	20001b48 	.word	0x20001b48

00009fc4 <unready_thread>:
{
    9fc4:	b510      	push	{r4, lr}
    9fc6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    9fc8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9fca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	db08      	blt.n	9fe4 <unready_thread+0x20>
	update_cache(thread == _current);
    9fd2:	4b08      	ldr	r3, [pc, #32]	; (9ff4 <unready_thread+0x30>)
    9fd4:	6898      	ldr	r0, [r3, #8]
    9fd6:	42a0      	cmp	r0, r4
    9fd8:	bf14      	ite	ne
    9fda:	2000      	movne	r0, #0
    9fdc:	2001      	moveq	r0, #1
    9fde:	f7ff fed9 	bl	9d94 <update_cache>
}
    9fe2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9fe8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9fea:	4601      	mov	r1, r0
    9fec:	4802      	ldr	r0, [pc, #8]	; (9ff8 <unready_thread+0x34>)
    9fee:	f004 ff22 	bl	ee36 <z_priq_dumb_remove>
}
    9ff2:	e7ee      	b.n	9fd2 <unready_thread+0xe>
    9ff4:	20001b08 	.word	0x20001b08
    9ff8:	20001b28 	.word	0x20001b28

00009ffc <z_pend_curr>:
{
    9ffc:	b510      	push	{r4, lr}
    9ffe:	460c      	mov	r4, r1
    a000:	4611      	mov	r1, r2
	pending_current = _current;
    a002:	4b06      	ldr	r3, [pc, #24]	; (a01c <z_pend_curr+0x20>)
    a004:	6898      	ldr	r0, [r3, #8]
    a006:	4b06      	ldr	r3, [pc, #24]	; (a020 <z_pend_curr+0x24>)
    a008:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a00e:	f004 ffba 	bl	ef86 <pend>
    a012:	4620      	mov	r0, r4
    a014:	f7f9 f9f4 	bl	3400 <arch_swap>
}
    a018:	bd10      	pop	{r4, pc}
    a01a:	bf00      	nop
    a01c:	20001b08 	.word	0x20001b08
    a020:	20001b3c 	.word	0x20001b3c

0000a024 <z_set_prio>:
{
    a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a028:	4605      	mov	r5, r0
    a02a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    a02c:	2300      	movs	r3, #0
	__asm__ volatile(
    a02e:	f04f 0220 	mov.w	r2, #32
    a032:	f3ef 8611 	mrs	r6, BASEPRI
    a036:	f382 8812 	msr	BASEPRI_MAX, r2
    a03a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    a03e:	4618      	mov	r0, r3
    a040:	e029      	b.n	a096 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    a042:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a044:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a046:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a048:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a04a:	6065      	str	r5, [r4, #4]
}
    a04c:	e017      	b.n	a07e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a04e:	4644      	mov	r4, r8
    a050:	b16c      	cbz	r4, a06e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a052:	4621      	mov	r1, r4
    a054:	4628      	mov	r0, r5
    a056:	f004 feb3 	bl	edc0 <z_sched_prio_cmp>
    a05a:	2800      	cmp	r0, #0
    a05c:	dcf1      	bgt.n	a042 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a05e:	2c00      	cmp	r4, #0
    a060:	d0f6      	beq.n	a050 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    a062:	4b1d      	ldr	r3, [pc, #116]	; (a0d8 <z_set_prio+0xb4>)
    a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a066:	429c      	cmp	r4, r3
    a068:	d0f1      	beq.n	a04e <z_set_prio+0x2a>
    a06a:	6824      	ldr	r4, [r4, #0]
    a06c:	e7f0      	b.n	a050 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    a06e:	4b1a      	ldr	r3, [pc, #104]	; (a0d8 <z_set_prio+0xb4>)
    a070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a072:	f103 0120 	add.w	r1, r3, #32
    a076:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    a078:	606a      	str	r2, [r5, #4]
	tail->next = node;
    a07a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    a07c:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    a07e:	2001      	movs	r0, #1
    a080:	f7ff fe88 	bl	9d94 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a084:	2001      	movs	r0, #1
    a086:	e001      	b.n	a08c <z_set_prio+0x68>
			thread->base.prio = prio;
    a088:	73af      	strb	r7, [r5, #14]
    a08a:	2000      	movs	r0, #0
	__asm__ volatile(
    a08c:	f386 8811 	msr	BASEPRI, r6
    a090:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a094:	2301      	movs	r3, #1
    a096:	b9e3      	cbnz	r3, a0d2 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    a098:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a09a:	f013 0f1f 	tst.w	r3, #31
    a09e:	d1f3      	bne.n	a088 <z_set_prio+0x64>
	return node->next != NULL;
    a0a0:	f8d5 8018 	ldr.w	r8, [r5, #24]
    a0a4:	f1b8 0f00 	cmp.w	r8, #0
    a0a8:	d1ee      	bne.n	a088 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a0ae:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a0b0:	f8df 9028 	ldr.w	r9, [pc, #40]	; a0dc <z_set_prio+0xb8>
    a0b4:	4629      	mov	r1, r5
    a0b6:	4648      	mov	r0, r9
    a0b8:	f004 febd 	bl	ee36 <z_priq_dumb_remove>
				thread->base.prio = prio;
    a0bc:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a0be:	7b6b      	ldrb	r3, [r5, #13]
    a0c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a0c4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    a0c6:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a0ca:	454c      	cmp	r4, r9
    a0cc:	d1c0      	bne.n	a050 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a0ce:	4644      	mov	r4, r8
    a0d0:	e7be      	b.n	a050 <z_set_prio+0x2c>
}
    a0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0d6:	bf00      	nop
    a0d8:	20001b08 	.word	0x20001b08
    a0dc:	20001b28 	.word	0x20001b28

0000a0e0 <z_impl_k_thread_suspend>:
{
    a0e0:	b538      	push	{r3, r4, r5, lr}
    a0e2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a0e4:	3018      	adds	r0, #24
    a0e6:	f004 fff9 	bl	f0dc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a0ea:	2300      	movs	r3, #0
	__asm__ volatile(
    a0ec:	f04f 0220 	mov.w	r2, #32
    a0f0:	f3ef 8511 	mrs	r5, BASEPRI
    a0f4:	f382 8812 	msr	BASEPRI_MAX, r2
    a0f8:	f3bf 8f6f 	isb	sy
    a0fc:	e010      	b.n	a120 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a0fe:	7b63      	ldrb	r3, [r4, #13]
    a100:	f043 0310 	orr.w	r3, r3, #16
    a104:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a106:	4b11      	ldr	r3, [pc, #68]	; (a14c <z_impl_k_thread_suspend+0x6c>)
    a108:	6898      	ldr	r0, [r3, #8]
    a10a:	42a0      	cmp	r0, r4
    a10c:	bf14      	ite	ne
    a10e:	2000      	movne	r0, #0
    a110:	2001      	moveq	r0, #1
    a112:	f7ff fe3f 	bl	9d94 <update_cache>
	__asm__ volatile(
    a116:	f385 8811 	msr	BASEPRI, r5
    a11a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a11e:	2301      	movs	r3, #1
    a120:	b963      	cbnz	r3, a13c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    a122:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a124:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a128:	2b00      	cmp	r3, #0
    a12a:	dae8      	bge.n	a0fe <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a12c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a130:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a132:	4621      	mov	r1, r4
    a134:	4806      	ldr	r0, [pc, #24]	; (a150 <z_impl_k_thread_suspend+0x70>)
    a136:	f004 fe7e 	bl	ee36 <z_priq_dumb_remove>
}
    a13a:	e7e0      	b.n	a0fe <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    a13c:	4b03      	ldr	r3, [pc, #12]	; (a14c <z_impl_k_thread_suspend+0x6c>)
    a13e:	689b      	ldr	r3, [r3, #8]
    a140:	42a3      	cmp	r3, r4
    a142:	d000      	beq.n	a146 <z_impl_k_thread_suspend+0x66>
}
    a144:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    a146:	f004 fe6a 	bl	ee1e <z_reschedule_unlocked>
}
    a14a:	e7fb      	b.n	a144 <z_impl_k_thread_suspend+0x64>
    a14c:	20001b08 	.word	0x20001b08
    a150:	20001b28 	.word	0x20001b28

0000a154 <k_sched_unlock>:

void k_sched_unlock(void)
{
    a154:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    a156:	2300      	movs	r3, #0
	__asm__ volatile(
    a158:	f04f 0220 	mov.w	r2, #32
    a15c:	f3ef 8411 	mrs	r4, BASEPRI
    a160:	f382 8812 	msr	BASEPRI_MAX, r2
    a164:	f3bf 8f6f 	isb	sy
    a168:	e00c      	b.n	a184 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    a16a:	4b09      	ldr	r3, [pc, #36]	; (a190 <k_sched_unlock+0x3c>)
    a16c:	689a      	ldr	r2, [r3, #8]
    a16e:	7bd3      	ldrb	r3, [r2, #15]
    a170:	3301      	adds	r3, #1
    a172:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a174:	2000      	movs	r0, #0
    a176:	f7ff fe0d 	bl	9d94 <update_cache>
	__asm__ volatile(
    a17a:	f384 8811 	msr	BASEPRI, r4
    a17e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a182:	2301      	movs	r3, #1
    a184:	2b00      	cmp	r3, #0
    a186:	d0f0      	beq.n	a16a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    a188:	f004 fe49 	bl	ee1e <z_reschedule_unlocked>
}
    a18c:	bd10      	pop	{r4, pc}
    a18e:	bf00      	nop
    a190:	20001b08 	.word	0x20001b08

0000a194 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    a194:	7b43      	ldrb	r3, [r0, #13]
    a196:	f013 0f08 	tst.w	r3, #8
    a19a:	d12a      	bne.n	a1f2 <end_thread+0x5e>
{
    a19c:	b510      	push	{r4, lr}
    a19e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    a1a0:	f043 0208 	orr.w	r2, r3, #8
    a1a4:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a1a6:	f023 0220 	bic.w	r2, r3, #32
    a1aa:	f042 0208 	orr.w	r2, r2, #8
    a1ae:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    a1b0:	f012 0f80 	tst.w	r2, #128	; 0x80
    a1b4:	d113      	bne.n	a1de <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    a1b6:	68a3      	ldr	r3, [r4, #8]
    a1b8:	b113      	cbz	r3, a1c0 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    a1ba:	4620      	mov	r0, r4
    a1bc:	f004 fe43 	bl	ee46 <unpend_thread_no_timeout>
    a1c0:	f104 0018 	add.w	r0, r4, #24
    a1c4:	f004 ff8a 	bl	f0dc <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    a1c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a1cc:	f004 fe9b 	bl	ef06 <unpend_all>
		update_cache(1);
    a1d0:	2001      	movs	r0, #1
    a1d2:	f7ff fddf 	bl	9d94 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    a1d6:	4620      	mov	r0, r4
    a1d8:	f7ff f9f8 	bl	95cc <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    a1dc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a1de:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    a1e2:	f043 0308 	orr.w	r3, r3, #8
    a1e6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a1e8:	4601      	mov	r1, r0
    a1ea:	4802      	ldr	r0, [pc, #8]	; (a1f4 <end_thread+0x60>)
    a1ec:	f004 fe23 	bl	ee36 <z_priq_dumb_remove>
}
    a1f0:	e7e1      	b.n	a1b6 <end_thread+0x22>
    a1f2:	4770      	bx	lr
    a1f4:	20001b28 	.word	0x20001b28

0000a1f8 <z_sched_init>:
{
    a1f8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    a1fa:	4804      	ldr	r0, [pc, #16]	; (a20c <z_sched_init+0x14>)
    a1fc:	f004 ff25 	bl	f04a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    a200:	2100      	movs	r1, #0
    a202:	4608      	mov	r0, r1
    a204:	f7ff fd5c 	bl	9cc0 <k_sched_time_slice_set>
}
    a208:	bd08      	pop	{r3, pc}
    a20a:	bf00      	nop
    a20c:	20001b24 	.word	0x20001b24

0000a210 <z_impl_k_yield>:
{
    a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    a212:	f04f 0320 	mov.w	r3, #32
    a216:	f3ef 8611 	mrs	r6, BASEPRI
    a21a:	f383 8812 	msr	BASEPRI_MAX, r3
    a21e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    a222:	4c1d      	ldr	r4, [pc, #116]	; (a298 <z_impl_k_yield+0x88>)
    a224:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a226:	7b4b      	ldrb	r3, [r1, #13]
    a228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a22c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a22e:	f104 0720 	add.w	r7, r4, #32
    a232:	4638      	mov	r0, r7
    a234:	f004 fdff 	bl	ee36 <z_priq_dumb_remove>
	queue_thread(_current);
    a238:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    a23a:	7b6b      	ldrb	r3, [r5, #13]
    a23c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a240:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    a242:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a244:	42bc      	cmp	r4, r7
    a246:	d108      	bne.n	a25a <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a248:	2400      	movs	r4, #0
    a24a:	e006      	b.n	a25a <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    a24c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a24e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a250:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a252:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a254:	6065      	str	r5, [r4, #4]
}
    a256:	e017      	b.n	a288 <z_impl_k_yield+0x78>
    a258:	2400      	movs	r4, #0
    a25a:	b16c      	cbz	r4, a278 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a25c:	4621      	mov	r1, r4
    a25e:	4628      	mov	r0, r5
    a260:	f004 fdae 	bl	edc0 <z_sched_prio_cmp>
    a264:	2800      	cmp	r0, #0
    a266:	dcf1      	bgt.n	a24c <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a268:	2c00      	cmp	r4, #0
    a26a:	d0f6      	beq.n	a25a <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    a26c:	4b0a      	ldr	r3, [pc, #40]	; (a298 <z_impl_k_yield+0x88>)
    a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a270:	429c      	cmp	r4, r3
    a272:	d0f1      	beq.n	a258 <z_impl_k_yield+0x48>
    a274:	6824      	ldr	r4, [r4, #0]
    a276:	e7f0      	b.n	a25a <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    a278:	4b07      	ldr	r3, [pc, #28]	; (a298 <z_impl_k_yield+0x88>)
    a27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a27c:	f103 0120 	add.w	r1, r3, #32
    a280:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    a282:	606a      	str	r2, [r5, #4]
	tail->next = node;
    a284:	6015      	str	r5, [r2, #0]
	list->tail = node;
    a286:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    a288:	2001      	movs	r0, #1
    a28a:	f7ff fd83 	bl	9d94 <update_cache>
    a28e:	4630      	mov	r0, r6
    a290:	f7f9 f8b6 	bl	3400 <arch_swap>
}
    a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a296:	bf00      	nop
    a298:	20001b08 	.word	0x20001b08

0000a29c <z_tick_sleep>:
{
    a29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    a2a0:	ea50 0301 	orrs.w	r3, r0, r1
    a2a4:	d038      	beq.n	a318 <z_tick_sleep+0x7c>
    a2a6:	4604      	mov	r4, r0
    a2a8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    a2aa:	f06f 0301 	mvn.w	r3, #1
    a2ae:	1a1b      	subs	r3, r3, r0
    a2b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a2b4:	eb62 0201 	sbc.w	r2, r2, r1
    a2b8:	2b01      	cmp	r3, #1
    a2ba:	f172 0200 	sbcs.w	r2, r2, #0
    a2be:	db2f      	blt.n	a320 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    a2c0:	f06f 0501 	mvn.w	r5, #1
    a2c4:	1a2d      	subs	r5, r5, r0
    a2c6:	f04f 0320 	mov.w	r3, #32
    a2ca:	f3ef 8811 	mrs	r8, BASEPRI
    a2ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a2d2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    a2d6:	4f14      	ldr	r7, [pc, #80]	; (a328 <z_tick_sleep+0x8c>)
    a2d8:	68b8      	ldr	r0, [r7, #8]
    a2da:	4b14      	ldr	r3, [pc, #80]	; (a32c <z_tick_sleep+0x90>)
    a2dc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    a2de:	f7ff fe71 	bl	9fc4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    a2e2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a2e4:	4622      	mov	r2, r4
    a2e6:	4633      	mov	r3, r6
    a2e8:	4911      	ldr	r1, [pc, #68]	; (a330 <z_tick_sleep+0x94>)
    a2ea:	3018      	adds	r0, #24
    a2ec:	f000 f900 	bl	a4f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a2f0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a2f2:	7b53      	ldrb	r3, [r2, #13]
    a2f4:	f043 0310 	orr.w	r3, r3, #16
    a2f8:	7353      	strb	r3, [r2, #13]
    a2fa:	4640      	mov	r0, r8
    a2fc:	f7f9 f880 	bl	3400 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a300:	f004 ff4c 	bl	f19c <sys_clock_tick_get_32>
    a304:	1a28      	subs	r0, r5, r0
    a306:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a30a:	2801      	cmp	r0, #1
    a30c:	f173 0300 	sbcs.w	r3, r3, #0
    a310:	da00      	bge.n	a314 <z_tick_sleep+0x78>
	return 0;
    a312:	2000      	movs	r0, #0
}
    a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    a318:	f7ff ff7a 	bl	a210 <z_impl_k_yield>
		return 0;
    a31c:	2000      	movs	r0, #0
    a31e:	e7f9      	b.n	a314 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a320:	f004 ff3c 	bl	f19c <sys_clock_tick_get_32>
    a324:	1905      	adds	r5, r0, r4
    a326:	e7ce      	b.n	a2c6 <z_tick_sleep+0x2a>
    a328:	20001b08 	.word	0x20001b08
    a32c:	20001b3c 	.word	0x20001b3c
    a330:	0000eea9 	.word	0x0000eea9

0000a334 <z_impl_k_sleep>:
{
    a334:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a336:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a33a:	bf08      	it	eq
    a33c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    a340:	d018      	beq.n	a374 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    a342:	f7ff ffab 	bl	a29c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    a346:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    a348:	0151      	lsls	r1, r2, #5
    a34a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    a34e:	0143      	lsls	r3, r0, #5
    a350:	1a1b      	subs	r3, r3, r0
    a352:	eb61 0102 	sbc.w	r1, r1, r2
    a356:	0089      	lsls	r1, r1, #2
    a358:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    a35c:	009b      	lsls	r3, r3, #2
    a35e:	181b      	adds	r3, r3, r0
    a360:	eb42 0201 	adc.w	r2, r2, r1
    a364:	00d2      	lsls	r2, r2, #3
    a366:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    a36a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    a36e:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    a372:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    a374:	4b03      	ldr	r3, [pc, #12]	; (a384 <z_impl_k_sleep+0x50>)
    a376:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a378:	f7ff feb2 	bl	a0e0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    a37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a380:	e7f7      	b.n	a372 <z_impl_k_sleep+0x3e>
    a382:	bf00      	nop
    a384:	20001b08 	.word	0x20001b08

0000a388 <z_impl_z_current_get>:
}
    a388:	4b01      	ldr	r3, [pc, #4]	; (a390 <z_impl_z_current_get+0x8>)
    a38a:	6898      	ldr	r0, [r3, #8]
    a38c:	4770      	bx	lr
    a38e:	bf00      	nop
    a390:	20001b08 	.word	0x20001b08

0000a394 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    a394:	b570      	push	{r4, r5, r6, lr}
    a396:	f04f 0320 	mov.w	r3, #32
    a39a:	f3ef 8511 	mrs	r5, BASEPRI
    a39e:	f383 8812 	msr	BASEPRI_MAX, r3
    a3a2:	f3bf 8f6f 	isb	sy
    a3a6:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    a3a8:	7b03      	ldrb	r3, [r0, #12]
    a3aa:	f013 0f01 	tst.w	r3, #1
    a3ae:	d109      	bne.n	a3c4 <z_thread_abort+0x30>
    a3b0:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a3b2:	7b43      	ldrb	r3, [r0, #13]
    a3b4:	f013 0f08 	tst.w	r3, #8
    a3b8:	d00f      	beq.n	a3da <z_thread_abort+0x46>
	__asm__ volatile(
    a3ba:	f385 8811 	msr	BASEPRI, r5
    a3be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    a3c2:	e009      	b.n	a3d8 <z_thread_abort+0x44>
    a3c4:	f385 8811 	msr	BASEPRI, r5
    a3c8:	f3bf 8f6f 	isb	sy
		k_panic();
    a3cc:	4040      	eors	r0, r0
    a3ce:	f380 8811 	msr	BASEPRI, r0
    a3d2:	f04f 0004 	mov.w	r0, #4
    a3d6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a3d8:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    a3da:	f7ff fedb 	bl	a194 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    a3de:	4b08      	ldr	r3, [pc, #32]	; (a400 <z_thread_abort+0x6c>)
    a3e0:	689b      	ldr	r3, [r3, #8]
    a3e2:	42a3      	cmp	r3, r4
    a3e4:	d004      	beq.n	a3f0 <z_thread_abort+0x5c>
    a3e6:	f386 8811 	msr	BASEPRI, r6
    a3ea:	f3bf 8f6f 	isb	sy
    a3ee:	e7f3      	b.n	a3d8 <z_thread_abort+0x44>
    a3f0:	f3ef 8305 	mrs	r3, IPSR
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d1f6      	bne.n	a3e6 <z_thread_abort+0x52>
    a3f8:	4628      	mov	r0, r5
    a3fa:	f7f9 f801 	bl	3400 <arch_swap>
	return ret;
    a3fe:	e7f2      	b.n	a3e6 <z_thread_abort+0x52>
    a400:	20001b08 	.word	0x20001b08

0000a404 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    a404:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    a408:	b083      	sub	sp, #12
    a40a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a40c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    a410:	e9cd bc00 	strd	fp, ip, [sp]
    a414:	f7ff fdf2 	bl	9ffc <z_pend_curr>

	if (data != NULL) {
    a418:	b11c      	cbz	r4, a422 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    a41a:	4b03      	ldr	r3, [pc, #12]	; (a428 <z_sched_wait+0x24>)
    a41c:	689b      	ldr	r3, [r3, #8]
    a41e:	695b      	ldr	r3, [r3, #20]
    a420:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    a422:	b003      	add	sp, #12
    a424:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    a428:	20001b08 	.word	0x20001b08

0000a42c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a42c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a42e:	4806      	ldr	r0, [pc, #24]	; (a448 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a430:	4a06      	ldr	r2, [pc, #24]	; (a44c <z_data_copy+0x20>)
    a432:	1a12      	subs	r2, r2, r0
    a434:	4906      	ldr	r1, [pc, #24]	; (a450 <z_data_copy+0x24>)
    a436:	f004 fb6b 	bl	eb10 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a43a:	4a06      	ldr	r2, [pc, #24]	; (a454 <z_data_copy+0x28>)
    a43c:	4906      	ldr	r1, [pc, #24]	; (a458 <z_data_copy+0x2c>)
    a43e:	4807      	ldr	r0, [pc, #28]	; (a45c <z_data_copy+0x30>)
    a440:	f004 fb66 	bl	eb10 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a444:	bd08      	pop	{r3, pc}
    a446:	bf00      	nop
    a448:	20000000 	.word	0x20000000
    a44c:	200002fc 	.word	0x200002fc
    a450:	00010be8 	.word	0x00010be8
    a454:	00000000 	.word	0x00000000
    a458:	00010be8 	.word	0x00010be8
    a45c:	20000000 	.word	0x20000000

0000a460 <first>:
	return list->head == list;
    a460:	4b03      	ldr	r3, [pc, #12]	; (a470 <first+0x10>)
    a462:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a464:	4298      	cmp	r0, r3
    a466:	d000      	beq.n	a46a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    a468:	4770      	bx	lr
    a46a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    a46c:	e7fc      	b.n	a468 <first+0x8>
    a46e:	bf00      	nop
    a470:	200001d4 	.word	0x200001d4

0000a474 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a474:	b130      	cbz	r0, a484 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    a476:	4a04      	ldr	r2, [pc, #16]	; (a488 <next+0x14>)
    a478:	6852      	ldr	r2, [r2, #4]
    a47a:	4290      	cmp	r0, r2
    a47c:	d001      	beq.n	a482 <next+0xe>
    a47e:	6800      	ldr	r0, [r0, #0]
    a480:	4770      	bx	lr
    a482:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    a484:	4770      	bx	lr
    a486:	bf00      	nop
    a488:	200001d4 	.word	0x200001d4

0000a48c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    a48c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a48e:	4b04      	ldr	r3, [pc, #16]	; (a4a0 <elapsed+0x14>)
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	b10b      	cbz	r3, a498 <elapsed+0xc>
    a494:	2000      	movs	r0, #0
}
    a496:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a498:	f7fc f900 	bl	669c <sys_clock_elapsed>
    a49c:	e7fb      	b.n	a496 <elapsed+0xa>
    a49e:	bf00      	nop
    a4a0:	20001b48 	.word	0x20001b48

0000a4a4 <next_timeout>:

static int32_t next_timeout(void)
{
    a4a4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    a4a6:	f7ff ffdb 	bl	a460 <first>
    a4aa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    a4ac:	f7ff ffee 	bl	a48c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    a4b0:	b17c      	cbz	r4, a4d2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a4b2:	6923      	ldr	r3, [r4, #16]
    a4b4:	6962      	ldr	r2, [r4, #20]
    a4b6:	1a1b      	subs	r3, r3, r0
    a4b8:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    a4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a4c0:	f172 0100 	sbcs.w	r1, r2, #0
    a4c4:	da08      	bge.n	a4d8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    a4c6:	2a00      	cmp	r2, #0
    a4c8:	db01      	blt.n	a4ce <next_timeout+0x2a>
    a4ca:	4618      	mov	r0, r3
    a4cc:	e006      	b.n	a4dc <next_timeout+0x38>
    a4ce:	2300      	movs	r3, #0
    a4d0:	e7fb      	b.n	a4ca <next_timeout+0x26>
		ret = MAX_WAIT;
    a4d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a4d6:	e001      	b.n	a4dc <next_timeout+0x38>
    a4d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    a4dc:	4b03      	ldr	r3, [pc, #12]	; (a4ec <next_timeout+0x48>)
    a4de:	691b      	ldr	r3, [r3, #16]
    a4e0:	b113      	cbz	r3, a4e8 <next_timeout+0x44>
    a4e2:	4283      	cmp	r3, r0
    a4e4:	da00      	bge.n	a4e8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    a4e6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    a4e8:	bd10      	pop	{r4, pc}
    a4ea:	bf00      	nop
    a4ec:	20001b08 	.word	0x20001b08

0000a4f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a4f4:	bf08      	it	eq
    a4f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a4fa:	d07b      	beq.n	a5f4 <z_add_timeout+0x104>
{
    a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a500:	4604      	mov	r4, r0
    a502:	4692      	mov	sl, r2
    a504:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    a506:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    a508:	2300      	movs	r3, #0
	__asm__ volatile(
    a50a:	f04f 0220 	mov.w	r2, #32
    a50e:	f3ef 8711 	mrs	r7, BASEPRI
    a512:	f382 8812 	msr	BASEPRI_MAX, r2
    a516:	f3bf 8f6f 	isb	sy
    a51a:	e026      	b.n	a56a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    a51c:	f11a 0801 	adds.w	r8, sl, #1
    a520:	f145 0900 	adc.w	r9, r5, #0
    a524:	f7ff ffb2 	bl	a48c <elapsed>
    a528:	eb18 0300 	adds.w	r3, r8, r0
    a52c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    a530:	6123      	str	r3, [r4, #16]
    a532:	6160      	str	r0, [r4, #20]
    a534:	e03b      	b.n	a5ae <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    a536:	1a52      	subs	r2, r2, r1
    a538:	eb66 0303 	sbc.w	r3, r6, r3
    a53c:	6102      	str	r2, [r0, #16]
    a53e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    a540:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    a542:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a544:	6020      	str	r0, [r4, #0]
	prev->next = node;
    a546:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a548:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    a54a:	e005      	b.n	a558 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    a54c:	4b2a      	ldr	r3, [pc, #168]	; (a5f8 <z_add_timeout+0x108>)
    a54e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    a550:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    a552:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a554:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a556:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a558:	f7ff ff82 	bl	a460 <first>
    a55c:	4284      	cmp	r4, r0
    a55e:	d03a      	beq.n	a5d6 <z_add_timeout+0xe6>
	__asm__ volatile(
    a560:	f387 8811 	msr	BASEPRI, r7
    a564:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a568:	2301      	movs	r3, #1
    a56a:	2b00      	cmp	r3, #0
    a56c:	d140      	bne.n	a5f0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    a56e:	4653      	mov	r3, sl
    a570:	f06f 0101 	mvn.w	r1, #1
    a574:	ebb1 010a 	subs.w	r1, r1, sl
    a578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a57c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    a580:	2a00      	cmp	r2, #0
    a582:	dbcb      	blt.n	a51c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    a584:	4a1d      	ldr	r2, [pc, #116]	; (a5fc <z_add_timeout+0x10c>)
    a586:	6811      	ldr	r1, [r2, #0]
    a588:	6852      	ldr	r2, [r2, #4]
    a58a:	185b      	adds	r3, r3, r1
    a58c:	eb42 0205 	adc.w	r2, r2, r5
    a590:	f06f 0101 	mvn.w	r1, #1
    a594:	1ac9      	subs	r1, r1, r3
    a596:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    a59a:	4608      	mov	r0, r1
    a59c:	461a      	mov	r2, r3
    a59e:	2901      	cmp	r1, #1
    a5a0:	f173 0300 	sbcs.w	r3, r3, #0
    a5a4:	da01      	bge.n	a5aa <z_add_timeout+0xba>
    a5a6:	2001      	movs	r0, #1
    a5a8:	2200      	movs	r2, #0
    a5aa:	6120      	str	r0, [r4, #16]
    a5ac:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a5ae:	f7ff ff57 	bl	a460 <first>
    a5b2:	2800      	cmp	r0, #0
    a5b4:	d0ca      	beq.n	a54c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    a5b6:	6902      	ldr	r2, [r0, #16]
    a5b8:	6946      	ldr	r6, [r0, #20]
    a5ba:	6921      	ldr	r1, [r4, #16]
    a5bc:	6963      	ldr	r3, [r4, #20]
    a5be:	4291      	cmp	r1, r2
    a5c0:	eb73 0e06 	sbcs.w	lr, r3, r6
    a5c4:	dbb7      	blt.n	a536 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    a5c6:	1a89      	subs	r1, r1, r2
    a5c8:	eb63 0306 	sbc.w	r3, r3, r6
    a5cc:	6121      	str	r1, [r4, #16]
    a5ce:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a5d0:	f7ff ff50 	bl	a474 <next>
    a5d4:	e7ed      	b.n	a5b2 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    a5d6:	f7ff ff65 	bl	a4a4 <next_timeout>

			if (next_time == 0 ||
    a5da:	4603      	mov	r3, r0
    a5dc:	b118      	cbz	r0, a5e6 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    a5de:	4a08      	ldr	r2, [pc, #32]	; (a600 <z_add_timeout+0x110>)
    a5e0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    a5e2:	4282      	cmp	r2, r0
    a5e4:	d0bc      	beq.n	a560 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    a5e6:	2100      	movs	r1, #0
    a5e8:	4618      	mov	r0, r3
    a5ea:	f7fc f825 	bl	6638 <sys_clock_set_timeout>
    a5ee:	e7b7      	b.n	a560 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a5f4:	4770      	bx	lr
    a5f6:	bf00      	nop
    a5f8:	200001d4 	.word	0x200001d4
    a5fc:	20000cf8 	.word	0x20000cf8
    a600:	20001b08 	.word	0x20001b08

0000a604 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    a604:	b570      	push	{r4, r5, r6, lr}
    a606:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a608:	f7ff fc46 	bl	9e98 <z_time_slice>
	__asm__ volatile(
    a60c:	f04f 0320 	mov.w	r3, #32
    a610:	f3ef 8611 	mrs	r6, BASEPRI
    a614:	f383 8812 	msr	BASEPRI_MAX, r3
    a618:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a61c:	4b28      	ldr	r3, [pc, #160]	; (a6c0 <sys_clock_announce+0xbc>)
    a61e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    a620:	e021      	b.n	a666 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a622:	4a28      	ldr	r2, [pc, #160]	; (a6c4 <sys_clock_announce+0xc0>)
    a624:	6813      	ldr	r3, [r2, #0]
    a626:	6851      	ldr	r1, [r2, #4]
    a628:	195b      	adds	r3, r3, r5
    a62a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    a62e:	6013      	str	r3, [r2, #0]
    a630:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    a632:	2200      	movs	r2, #0
    a634:	2300      	movs	r3, #0
    a636:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    a63a:	4620      	mov	r0, r4
    a63c:	f004 fd37 	bl	f0ae <remove_timeout>
	__asm__ volatile(
    a640:	f386 8811 	msr	BASEPRI, r6
    a644:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    a648:	68a3      	ldr	r3, [r4, #8]
    a64a:	4620      	mov	r0, r4
    a64c:	4798      	blx	r3
	__asm__ volatile(
    a64e:	f04f 0320 	mov.w	r3, #32
    a652:	f3ef 8611 	mrs	r6, BASEPRI
    a656:	f383 8812 	msr	BASEPRI_MAX, r3
    a65a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    a65e:	4a18      	ldr	r2, [pc, #96]	; (a6c0 <sys_clock_announce+0xbc>)
    a660:	6813      	ldr	r3, [r2, #0]
    a662:	1b5b      	subs	r3, r3, r5
    a664:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    a666:	f7ff fefb 	bl	a460 <first>
    a66a:	4604      	mov	r4, r0
    a66c:	b138      	cbz	r0, a67e <sys_clock_announce+0x7a>
    a66e:	6905      	ldr	r5, [r0, #16]
    a670:	6941      	ldr	r1, [r0, #20]
    a672:	4b13      	ldr	r3, [pc, #76]	; (a6c0 <sys_clock_announce+0xbc>)
    a674:	681a      	ldr	r2, [r3, #0]
    a676:	17d3      	asrs	r3, r2, #31
    a678:	42aa      	cmp	r2, r5
    a67a:	418b      	sbcs	r3, r1
    a67c:	dad1      	bge.n	a622 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    a67e:	b144      	cbz	r4, a692 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    a680:	6923      	ldr	r3, [r4, #16]
    a682:	6962      	ldr	r2, [r4, #20]
    a684:	490e      	ldr	r1, [pc, #56]	; (a6c0 <sys_clock_announce+0xbc>)
    a686:	6809      	ldr	r1, [r1, #0]
    a688:	1a5b      	subs	r3, r3, r1
    a68a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    a68e:	6123      	str	r3, [r4, #16]
    a690:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    a692:	4a0c      	ldr	r2, [pc, #48]	; (a6c4 <sys_clock_announce+0xc0>)
    a694:	4d0a      	ldr	r5, [pc, #40]	; (a6c0 <sys_clock_announce+0xbc>)
    a696:	6828      	ldr	r0, [r5, #0]
    a698:	6813      	ldr	r3, [r2, #0]
    a69a:	6851      	ldr	r1, [r2, #4]
    a69c:	181b      	adds	r3, r3, r0
    a69e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    a6a2:	6013      	str	r3, [r2, #0]
    a6a4:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    a6a6:	2400      	movs	r4, #0
    a6a8:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a6aa:	f7ff fefb 	bl	a4a4 <next_timeout>
    a6ae:	4621      	mov	r1, r4
    a6b0:	f7fb ffc2 	bl	6638 <sys_clock_set_timeout>
	__asm__ volatile(
    a6b4:	f386 8811 	msr	BASEPRI, r6
    a6b8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a6bc:	bd70      	pop	{r4, r5, r6, pc}
    a6be:	bf00      	nop
    a6c0:	20001b48 	.word	0x20001b48
    a6c4:	20000cf8 	.word	0x20000cf8

0000a6c8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a6c8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    a6ca:	2200      	movs	r2, #0
	__asm__ volatile(
    a6cc:	f04f 0320 	mov.w	r3, #32
    a6d0:	f3ef 8411 	mrs	r4, BASEPRI
    a6d4:	f383 8812 	msr	BASEPRI_MAX, r3
    a6d8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    a6dc:	4613      	mov	r3, r2
    a6de:	4611      	mov	r1, r2
    a6e0:	e00c      	b.n	a6fc <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    a6e2:	f7ff fed3 	bl	a48c <elapsed>
    a6e6:	4a07      	ldr	r2, [pc, #28]	; (a704 <sys_clock_tick_get+0x3c>)
    a6e8:	6813      	ldr	r3, [r2, #0]
    a6ea:	6851      	ldr	r1, [r2, #4]
    a6ec:	18c3      	adds	r3, r0, r3
    a6ee:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    a6f2:	f384 8811 	msr	BASEPRI, r4
    a6f6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a6fa:	2201      	movs	r2, #1
    a6fc:	2a00      	cmp	r2, #0
    a6fe:	d0f0      	beq.n	a6e2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    a700:	4618      	mov	r0, r3
    a702:	bd10      	pop	{r4, pc}
    a704:	20000cf8 	.word	0x20000cf8

0000a708 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a708:	b538      	push	{r3, r4, r5, lr}
    a70a:	4604      	mov	r4, r0
	__asm__ volatile(
    a70c:	f04f 0320 	mov.w	r3, #32
    a710:	f3ef 8511 	mrs	r5, BASEPRI
    a714:	f383 8812 	msr	BASEPRI_MAX, r3
    a718:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a71c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a71e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    a720:	ea52 0103 	orrs.w	r1, r2, r3
    a724:	d005      	beq.n	a732 <z_timer_expiration_handler+0x2a>
    a726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a72a:	bf08      	it	eq
    a72c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a730:	d128      	bne.n	a784 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    a732:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a734:	3301      	adds	r3, #1
    a736:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a738:	6a23      	ldr	r3, [r4, #32]
    a73a:	b173      	cbz	r3, a75a <z_timer_expiration_handler+0x52>
	__asm__ volatile(
    a73c:	f385 8811 	msr	BASEPRI, r5
    a740:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    a744:	6a23      	ldr	r3, [r4, #32]
    a746:	4620      	mov	r0, r4
    a748:	4798      	blx	r3
	__asm__ volatile(
    a74a:	f04f 0320 	mov.w	r3, #32
    a74e:	f3ef 8511 	mrs	r5, BASEPRI
    a752:	f383 8812 	msr	BASEPRI_MAX, r3
    a756:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a75a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    a75e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a760:	42a3      	cmp	r3, r4
    a762:	d038      	beq.n	a7d6 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a764:	2c00      	cmp	r4, #0
    a766:	d036      	beq.n	a7d6 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    a768:	4620      	mov	r0, r4
    a76a:	f004 fb33 	bl	edd4 <z_unpend_thread_no_timeout>
    a76e:	2300      	movs	r3, #0
    a770:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    a774:	f385 8811 	msr	BASEPRI, r5
    a778:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    a77c:	4620      	mov	r0, r4
    a77e:	f004 fb77 	bl	ee70 <z_ready_thread>
}
    a782:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
    a784:	f004 fd0e 	bl	f1a4 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    a788:	3001      	adds	r0, #1
    a78a:	f141 0100 	adc.w	r1, r1, #0
    a78e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    a792:	18c0      	adds	r0, r0, r3
    a794:	eb41 0102 	adc.w	r1, r1, r2
    a798:	2801      	cmp	r0, #1
    a79a:	f171 0100 	sbcs.w	r1, r1, #0
    a79e:	da08      	bge.n	a7b2 <z_timer_expiration_handler+0xaa>
    a7a0:	f06f 0201 	mvn.w	r2, #1
    a7a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a7a8:	490d      	ldr	r1, [pc, #52]	; (a7e0 <z_timer_expiration_handler+0xd8>)
    a7aa:	4620      	mov	r0, r4
    a7ac:	f7ff fea0 	bl	a4f0 <z_add_timeout>
    a7b0:	e7bf      	b.n	a732 <z_timer_expiration_handler+0x2a>
    a7b2:	f004 fcf7 	bl	f1a4 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    a7b6:	3001      	adds	r0, #1
    a7b8:	f141 0300 	adc.w	r3, r1, #0
    a7bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a7be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a7c0:	1880      	adds	r0, r0, r2
    a7c2:	eb43 0301 	adc.w	r3, r3, r1
    a7c6:	f06f 0201 	mvn.w	r2, #1
    a7ca:	1a12      	subs	r2, r2, r0
    a7cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7d0:	eb61 0303 	sbc.w	r3, r1, r3
    a7d4:	e7e8      	b.n	a7a8 <z_timer_expiration_handler+0xa0>
    a7d6:	f385 8811 	msr	BASEPRI, r5
    a7da:	f3bf 8f6f 	isb	sy
		return;
    a7de:	e7d0      	b.n	a782 <z_timer_expiration_handler+0x7a>
    a7e0:	0000a709 	.word	0x0000a709

0000a7e4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7e8:	461e      	mov	r6, r3
    a7ea:	9f06      	ldr	r7, [sp, #24]
    a7ec:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a7f4:	bf08      	it	eq
    a7f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a7fa:	d02f      	beq.n	a85c <z_impl_k_timer_start+0x78>
    a7fc:	4605      	mov	r5, r0
    a7fe:	4614      	mov	r4, r2
    a800:	4613      	mov	r3, r2
    a802:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a804:	4640      	mov	r0, r8
    a806:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a80a:	bf08      	it	eq
    a80c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    a810:	d00d      	beq.n	a82e <z_impl_k_timer_start+0x4a>
    a812:	ea57 0c08 	orrs.w	ip, r7, r8
    a816:	d00a      	beq.n	a82e <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
    a818:	f06f 0c01 	mvn.w	ip, #1
    a81c:	ebbc 0c07 	subs.w	ip, ip, r7
    a820:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    a824:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a828:	f1bc 0f00 	cmp.w	ip, #0
    a82c:	db18      	blt.n	a860 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a82e:	f06f 0201 	mvn.w	r2, #1
    a832:	1ad2      	subs	r2, r2, r3
    a834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a838:	eb62 0201 	sbc.w	r2, r2, r1
    a83c:	2a00      	cmp	r2, #0
    a83e:	db1a      	blt.n	a876 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    a840:	4628      	mov	r0, r5
    a842:	f004 fc4b 	bl	f0dc <z_abort_timeout>
	timer->period = period;
    a846:	62af      	str	r7, [r5, #40]	; 0x28
    a848:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    a84c:	2300      	movs	r3, #0
    a84e:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a850:	4622      	mov	r2, r4
    a852:	4633      	mov	r3, r6
    a854:	490e      	ldr	r1, [pc, #56]	; (a890 <z_impl_k_timer_start+0xac>)
    a856:	4628      	mov	r0, r5
    a858:	f7ff fe4a 	bl	a4f0 <z_add_timeout>
		     duration);
}
    a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    a860:	2f02      	cmp	r7, #2
    a862:	f170 0000 	sbcs.w	r0, r0, #0
    a866:	da02      	bge.n	a86e <z_impl_k_timer_start+0x8a>
    a868:	2702      	movs	r7, #2
    a86a:	f04f 0800 	mov.w	r8, #0
    a86e:	3f01      	subs	r7, #1
    a870:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    a874:	e7db      	b.n	a82e <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a876:	461c      	mov	r4, r3
    a878:	460e      	mov	r6, r1
    a87a:	2b01      	cmp	r3, #1
    a87c:	f171 0100 	sbcs.w	r1, r1, #0
    a880:	da01      	bge.n	a886 <z_impl_k_timer_start+0xa2>
    a882:	2401      	movs	r4, #1
    a884:	2600      	movs	r6, #0
    a886:	3c01      	subs	r4, #1
    a888:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    a88c:	e7d8      	b.n	a840 <z_impl_k_timer_start+0x5c>
    a88e:	bf00      	nop
    a890:	0000a709 	.word	0x0000a709

0000a894 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    a894:	b508      	push	{r3, lr}
    a896:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    a898:	4601      	mov	r1, r0
    a89a:	4802      	ldr	r0, [pc, #8]	; (a8a4 <k_aligned_alloc+0x10>)
    a89c:	f004 fce4 	bl	f268 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    a8a0:	bd08      	pop	{r3, pc}
    a8a2:	bf00      	nop
    a8a4:	20000264 	.word	0x20000264

0000a8a8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    a8a8:	4b01      	ldr	r3, [pc, #4]	; (a8b0 <k_thread_system_pool_assign+0x8>)
    a8aa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    a8ae:	4770      	bx	lr
    a8b0:	20000264 	.word	0x20000264

0000a8b4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    a8b4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    a8b6:	4a03      	ldr	r2, [pc, #12]	; (a8c4 <boot_banner+0x10>)
    a8b8:	4903      	ldr	r1, [pc, #12]	; (a8c8 <boot_banner+0x14>)
    a8ba:	4804      	ldr	r0, [pc, #16]	; (a8cc <boot_banner+0x18>)
    a8bc:	f000 fa53 	bl	ad66 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    a8c0:	bd08      	pop	{r3, pc}
    a8c2:	bf00      	nop
    a8c4:	0000f9ec 	.word	0x0000f9ec
    a8c8:	00010b18 	.word	0x00010b18
    a8cc:	00010b28 	.word	0x00010b28

0000a8d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    a8d0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a8d2:	4c06      	ldr	r4, [pc, #24]	; (a8ec <statics_init+0x1c>)
    a8d4:	e005      	b.n	a8e2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a8d6:	68a2      	ldr	r2, [r4, #8]
    a8d8:	6861      	ldr	r1, [r4, #4]
    a8da:	4620      	mov	r0, r4
    a8dc:	f004 fce3 	bl	f2a6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a8e0:	3414      	adds	r4, #20
    a8e2:	4b03      	ldr	r3, [pc, #12]	; (a8f0 <statics_init+0x20>)
    a8e4:	429c      	cmp	r4, r3
    a8e6:	d3f6      	bcc.n	a8d6 <statics_init+0x6>
		}
	}
	return 0;
}
    a8e8:	2000      	movs	r0, #0
    a8ea:	bd10      	pop	{r4, pc}
    a8ec:	20000264 	.word	0x20000264
    a8f0:	20000278 	.word	0x20000278

0000a8f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    a8f4:	b510      	push	{r4, lr}
    a8f6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    a8f8:	4b08      	ldr	r3, [pc, #32]	; (a91c <k_sys_work_q_init+0x28>)
    a8fa:	9302      	str	r3, [sp, #8]
    a8fc:	2400      	movs	r4, #0
    a8fe:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    a902:	ab02      	add	r3, sp, #8
    a904:	9300      	str	r3, [sp, #0]
    a906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a90a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a90e:	4904      	ldr	r1, [pc, #16]	; (a920 <k_sys_work_q_init+0x2c>)
    a910:	4804      	ldr	r0, [pc, #16]	; (a924 <k_sys_work_q_init+0x30>)
    a912:	f7ff f955 	bl	9bc0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    a916:	4620      	mov	r0, r4
    a918:	b004      	add	sp, #16
    a91a:	bd10      	pop	{r4, pc}
    a91c:	00010b50 	.word	0x00010b50
    a920:	20004170 	.word	0x20004170
    a924:	20000d00 	.word	0x20000d00

0000a928 <nrf_cc3xx_platform_init_no_rng>:
    a928:	b510      	push	{r4, lr}
    a92a:	4c0a      	ldr	r4, [pc, #40]	; (a954 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a92c:	6823      	ldr	r3, [r4, #0]
    a92e:	b11b      	cbz	r3, a938 <nrf_cc3xx_platform_init_no_rng+0x10>
    a930:	2301      	movs	r3, #1
    a932:	2000      	movs	r0, #0
    a934:	6023      	str	r3, [r4, #0]
    a936:	bd10      	pop	{r4, pc}
    a938:	f000 f8dc 	bl	aaf4 <CC_LibInitNoRng>
    a93c:	2800      	cmp	r0, #0
    a93e:	d0f7      	beq.n	a930 <nrf_cc3xx_platform_init_no_rng+0x8>
    a940:	3801      	subs	r0, #1
    a942:	2807      	cmp	r0, #7
    a944:	d803      	bhi.n	a94e <nrf_cc3xx_platform_init_no_rng+0x26>
    a946:	4b04      	ldr	r3, [pc, #16]	; (a958 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a948:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a94c:	bd10      	pop	{r4, pc}
    a94e:	4803      	ldr	r0, [pc, #12]	; (a95c <nrf_cc3xx_platform_init_no_rng+0x34>)
    a950:	bd10      	pop	{r4, pc}
    a952:	bf00      	nop
    a954:	20001b4c 	.word	0x20001b4c
    a958:	00010b5c 	.word	0x00010b5c
    a95c:	ffff8ffe 	.word	0xffff8ffe

0000a960 <nrf_cc3xx_platform_abort>:
    a960:	f3bf 8f4f 	dsb	sy
    a964:	4905      	ldr	r1, [pc, #20]	; (a97c <nrf_cc3xx_platform_abort+0x1c>)
    a966:	4b06      	ldr	r3, [pc, #24]	; (a980 <nrf_cc3xx_platform_abort+0x20>)
    a968:	68ca      	ldr	r2, [r1, #12]
    a96a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a96e:	4313      	orrs	r3, r2
    a970:	60cb      	str	r3, [r1, #12]
    a972:	f3bf 8f4f 	dsb	sy
    a976:	bf00      	nop
    a978:	e7fd      	b.n	a976 <nrf_cc3xx_platform_abort+0x16>
    a97a:	bf00      	nop
    a97c:	e000ed00 	.word	0xe000ed00
    a980:	05fa0004 	.word	0x05fa0004

0000a984 <CC_PalAbort>:
    a984:	b430      	push	{r4, r5}
    a986:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a98a:	2500      	movs	r5, #0
    a98c:	4b0b      	ldr	r3, [pc, #44]	; (a9bc <CC_PalAbort+0x38>)
    a98e:	4c0c      	ldr	r4, [pc, #48]	; (a9c0 <CC_PalAbort+0x3c>)
    a990:	490c      	ldr	r1, [pc, #48]	; (a9c4 <CC_PalAbort+0x40>)
    a992:	6849      	ldr	r1, [r1, #4]
    a994:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a998:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a99c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a9a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a9a4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    a9a8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    a9ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    a9b0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    a9b4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    a9b8:	bc30      	pop	{r4, r5}
    a9ba:	4708      	bx	r1
    a9bc:	50845000 	.word	0x50845000
    a9c0:	50844000 	.word	0x50844000
    a9c4:	200001dc 	.word	0x200001dc

0000a9c8 <nrf_cc3xx_platform_set_abort>:
    a9c8:	4b02      	ldr	r3, [pc, #8]	; (a9d4 <nrf_cc3xx_platform_set_abort+0xc>)
    a9ca:	e9d0 1200 	ldrd	r1, r2, [r0]
    a9ce:	e9c3 1200 	strd	r1, r2, [r3]
    a9d2:	4770      	bx	lr
    a9d4:	200001dc 	.word	0x200001dc

0000a9d8 <mutex_free>:
    a9d8:	b510      	push	{r4, lr}
    a9da:	4604      	mov	r4, r0
    a9dc:	b130      	cbz	r0, a9ec <mutex_free+0x14>
    a9de:	6863      	ldr	r3, [r4, #4]
    a9e0:	06db      	lsls	r3, r3, #27
    a9e2:	d502      	bpl.n	a9ea <mutex_free+0x12>
    a9e4:	2300      	movs	r3, #0
    a9e6:	6023      	str	r3, [r4, #0]
    a9e8:	6063      	str	r3, [r4, #4]
    a9ea:	bd10      	pop	{r4, pc}
    a9ec:	4b02      	ldr	r3, [pc, #8]	; (a9f8 <mutex_free+0x20>)
    a9ee:	4803      	ldr	r0, [pc, #12]	; (a9fc <mutex_free+0x24>)
    a9f0:	685b      	ldr	r3, [r3, #4]
    a9f2:	4798      	blx	r3
    a9f4:	e7f3      	b.n	a9de <mutex_free+0x6>
    a9f6:	bf00      	nop
    a9f8:	200001dc 	.word	0x200001dc
    a9fc:	00010b7c 	.word	0x00010b7c

0000aa00 <mutex_lock>:
    aa00:	b1b0      	cbz	r0, aa30 <mutex_lock+0x30>
    aa02:	6843      	ldr	r3, [r0, #4]
    aa04:	b193      	cbz	r3, aa2c <mutex_lock+0x2c>
    aa06:	06db      	lsls	r3, r3, #27
    aa08:	d50e      	bpl.n	aa28 <mutex_lock+0x28>
    aa0a:	2301      	movs	r3, #1
    aa0c:	e850 2f00 	ldrex	r2, [r0]
    aa10:	4619      	mov	r1, r3
    aa12:	e840 1c00 	strex	ip, r1, [r0]
    aa16:	f09c 0f00 	teq	ip, #0
    aa1a:	d1f7      	bne.n	aa0c <mutex_lock+0xc>
    aa1c:	2a01      	cmp	r2, #1
    aa1e:	d0f5      	beq.n	aa0c <mutex_lock+0xc>
    aa20:	f3bf 8f5f 	dmb	sy
    aa24:	2000      	movs	r0, #0
    aa26:	4770      	bx	lr
    aa28:	4803      	ldr	r0, [pc, #12]	; (aa38 <mutex_lock+0x38>)
    aa2a:	4770      	bx	lr
    aa2c:	4803      	ldr	r0, [pc, #12]	; (aa3c <mutex_lock+0x3c>)
    aa2e:	4770      	bx	lr
    aa30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    aa34:	4770      	bx	lr
    aa36:	bf00      	nop
    aa38:	ffff8fe9 	.word	0xffff8fe9
    aa3c:	ffff8fea 	.word	0xffff8fea

0000aa40 <mutex_unlock>:
    aa40:	4603      	mov	r3, r0
    aa42:	b168      	cbz	r0, aa60 <mutex_unlock+0x20>
    aa44:	6842      	ldr	r2, [r0, #4]
    aa46:	b13a      	cbz	r2, aa58 <mutex_unlock+0x18>
    aa48:	06d2      	lsls	r2, r2, #27
    aa4a:	d507      	bpl.n	aa5c <mutex_unlock+0x1c>
    aa4c:	f3bf 8f5f 	dmb	sy
    aa50:	2200      	movs	r2, #0
    aa52:	4610      	mov	r0, r2
    aa54:	601a      	str	r2, [r3, #0]
    aa56:	4770      	bx	lr
    aa58:	4803      	ldr	r0, [pc, #12]	; (aa68 <mutex_unlock+0x28>)
    aa5a:	4770      	bx	lr
    aa5c:	4803      	ldr	r0, [pc, #12]	; (aa6c <mutex_unlock+0x2c>)
    aa5e:	4770      	bx	lr
    aa60:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    aa64:	4770      	bx	lr
    aa66:	bf00      	nop
    aa68:	ffff8fea 	.word	0xffff8fea
    aa6c:	ffff8fe9 	.word	0xffff8fe9

0000aa70 <mutex_init>:
    aa70:	b510      	push	{r4, lr}
    aa72:	4604      	mov	r4, r0
    aa74:	b120      	cbz	r0, aa80 <mutex_init+0x10>
    aa76:	2200      	movs	r2, #0
    aa78:	2311      	movs	r3, #17
    aa7a:	6022      	str	r2, [r4, #0]
    aa7c:	6063      	str	r3, [r4, #4]
    aa7e:	bd10      	pop	{r4, pc}
    aa80:	4801      	ldr	r0, [pc, #4]	; (aa88 <mutex_init+0x18>)
    aa82:	f7ff ff7f 	bl	a984 <CC_PalAbort>
    aa86:	e7f6      	b.n	aa76 <mutex_init+0x6>
    aa88:	00010ba4 	.word	0x00010ba4

0000aa8c <nrf_cc3xx_platform_set_mutexes>:
    aa8c:	b570      	push	{r4, r5, r6, lr}
    aa8e:	4c16      	ldr	r4, [pc, #88]	; (aae8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    aa90:	f8d0 c004 	ldr.w	ip, [r0, #4]
    aa94:	6806      	ldr	r6, [r0, #0]
    aa96:	f8c4 c004 	str.w	ip, [r4, #4]
    aa9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    aa9e:	68c0      	ldr	r0, [r0, #12]
    aaa0:	f8c4 c008 	str.w	ip, [r4, #8]
    aaa4:	60e0      	str	r0, [r4, #12]
    aaa6:	6026      	str	r6, [r4, #0]
    aaa8:	6808      	ldr	r0, [r1, #0]
    aaaa:	4b10      	ldr	r3, [pc, #64]	; (aaec <nrf_cc3xx_platform_set_mutexes+0x60>)
    aaac:	4d10      	ldr	r5, [pc, #64]	; (aaf0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    aaae:	6018      	str	r0, [r3, #0]
    aab0:	6848      	ldr	r0, [r1, #4]
    aab2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    aab6:	6058      	str	r0, [r3, #4]
    aab8:	6888      	ldr	r0, [r1, #8]
    aaba:	6098      	str	r0, [r3, #8]
    aabc:	68c8      	ldr	r0, [r1, #12]
    aabe:	6909      	ldr	r1, [r1, #16]
    aac0:	60d8      	str	r0, [r3, #12]
    aac2:	6119      	str	r1, [r3, #16]
    aac4:	06d3      	lsls	r3, r2, #27
    aac6:	d50d      	bpl.n	aae4 <nrf_cc3xx_platform_set_mutexes+0x58>
    aac8:	2300      	movs	r3, #0
    aaca:	f505 708a 	add.w	r0, r5, #276	; 0x114
    aace:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    aad2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    aad6:	47b0      	blx	r6
    aad8:	6823      	ldr	r3, [r4, #0]
    aada:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    aade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aae2:	4718      	bx	r3
    aae4:	bd70      	pop	{r4, r5, r6, pc}
    aae6:	bf00      	nop
    aae8:	200001ec 	.word	0x200001ec
    aaec:	200001fc 	.word	0x200001fc
    aaf0:	20001b64 	.word	0x20001b64

0000aaf4 <CC_LibInitNoRng>:
    aaf4:	b508      	push	{r3, lr}
    aaf6:	f000 f811 	bl	ab1c <CC_HalInit>
    aafa:	b930      	cbnz	r0, ab0a <CC_LibInitNoRng+0x16>
    aafc:	f000 f810 	bl	ab20 <CC_PalInit>
    ab00:	b938      	cbnz	r0, ab12 <CC_LibInitNoRng+0x1e>
    ab02:	4a05      	ldr	r2, [pc, #20]	; (ab18 <CC_LibInitNoRng+0x24>)
    ab04:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    ab08:	bd08      	pop	{r3, pc}
    ab0a:	f000 f837 	bl	ab7c <CC_PalTerminate>
    ab0e:	2003      	movs	r0, #3
    ab10:	bd08      	pop	{r3, pc}
    ab12:	2004      	movs	r0, #4
    ab14:	bd08      	pop	{r3, pc}
    ab16:	bf00      	nop
    ab18:	50845000 	.word	0x50845000

0000ab1c <CC_HalInit>:
    ab1c:	2000      	movs	r0, #0
    ab1e:	4770      	bx	lr

0000ab20 <CC_PalInit>:
    ab20:	b510      	push	{r4, lr}
    ab22:	4811      	ldr	r0, [pc, #68]	; (ab68 <CC_PalInit+0x48>)
    ab24:	f000 f848 	bl	abb8 <CC_PalMutexCreate>
    ab28:	b100      	cbz	r0, ab2c <CC_PalInit+0xc>
    ab2a:	bd10      	pop	{r4, pc}
    ab2c:	480f      	ldr	r0, [pc, #60]	; (ab6c <CC_PalInit+0x4c>)
    ab2e:	f000 f843 	bl	abb8 <CC_PalMutexCreate>
    ab32:	2800      	cmp	r0, #0
    ab34:	d1f9      	bne.n	ab2a <CC_PalInit+0xa>
    ab36:	4c0e      	ldr	r4, [pc, #56]	; (ab70 <CC_PalInit+0x50>)
    ab38:	4620      	mov	r0, r4
    ab3a:	f000 f83d 	bl	abb8 <CC_PalMutexCreate>
    ab3e:	2800      	cmp	r0, #0
    ab40:	d1f3      	bne.n	ab2a <CC_PalInit+0xa>
    ab42:	4b0c      	ldr	r3, [pc, #48]	; (ab74 <CC_PalInit+0x54>)
    ab44:	480c      	ldr	r0, [pc, #48]	; (ab78 <CC_PalInit+0x58>)
    ab46:	601c      	str	r4, [r3, #0]
    ab48:	f000 f836 	bl	abb8 <CC_PalMutexCreate>
    ab4c:	4601      	mov	r1, r0
    ab4e:	2800      	cmp	r0, #0
    ab50:	d1eb      	bne.n	ab2a <CC_PalInit+0xa>
    ab52:	f000 f82d 	bl	abb0 <CC_PalDmaInit>
    ab56:	4604      	mov	r4, r0
    ab58:	b108      	cbz	r0, ab5e <CC_PalInit+0x3e>
    ab5a:	4620      	mov	r0, r4
    ab5c:	bd10      	pop	{r4, pc}
    ab5e:	f000 f83f 	bl	abe0 <CC_PalPowerSaveModeInit>
    ab62:	4620      	mov	r0, r4
    ab64:	e7fa      	b.n	ab5c <CC_PalInit+0x3c>
    ab66:	bf00      	nop
    ab68:	20000234 	.word	0x20000234
    ab6c:	20000228 	.word	0x20000228
    ab70:	20000230 	.word	0x20000230
    ab74:	20000238 	.word	0x20000238
    ab78:	2000022c 	.word	0x2000022c

0000ab7c <CC_PalTerminate>:
    ab7c:	b508      	push	{r3, lr}
    ab7e:	4808      	ldr	r0, [pc, #32]	; (aba0 <CC_PalTerminate+0x24>)
    ab80:	f000 f824 	bl	abcc <CC_PalMutexDestroy>
    ab84:	4807      	ldr	r0, [pc, #28]	; (aba4 <CC_PalTerminate+0x28>)
    ab86:	f000 f821 	bl	abcc <CC_PalMutexDestroy>
    ab8a:	4807      	ldr	r0, [pc, #28]	; (aba8 <CC_PalTerminate+0x2c>)
    ab8c:	f000 f81e 	bl	abcc <CC_PalMutexDestroy>
    ab90:	4806      	ldr	r0, [pc, #24]	; (abac <CC_PalTerminate+0x30>)
    ab92:	f000 f81b 	bl	abcc <CC_PalMutexDestroy>
    ab96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ab9a:	f000 b80b 	b.w	abb4 <CC_PalDmaTerminate>
    ab9e:	bf00      	nop
    aba0:	20000234 	.word	0x20000234
    aba4:	20000228 	.word	0x20000228
    aba8:	20000230 	.word	0x20000230
    abac:	2000022c 	.word	0x2000022c

0000abb0 <CC_PalDmaInit>:
    abb0:	2000      	movs	r0, #0
    abb2:	4770      	bx	lr

0000abb4 <CC_PalDmaTerminate>:
    abb4:	4770      	bx	lr
    abb6:	bf00      	nop

0000abb8 <CC_PalMutexCreate>:
    abb8:	b508      	push	{r3, lr}
    abba:	4b03      	ldr	r3, [pc, #12]	; (abc8 <CC_PalMutexCreate+0x10>)
    abbc:	6802      	ldr	r2, [r0, #0]
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	6810      	ldr	r0, [r2, #0]
    abc2:	4798      	blx	r3
    abc4:	2000      	movs	r0, #0
    abc6:	bd08      	pop	{r3, pc}
    abc8:	200001ec 	.word	0x200001ec

0000abcc <CC_PalMutexDestroy>:
    abcc:	b508      	push	{r3, lr}
    abce:	4b03      	ldr	r3, [pc, #12]	; (abdc <CC_PalMutexDestroy+0x10>)
    abd0:	6802      	ldr	r2, [r0, #0]
    abd2:	685b      	ldr	r3, [r3, #4]
    abd4:	6810      	ldr	r0, [r2, #0]
    abd6:	4798      	blx	r3
    abd8:	2000      	movs	r0, #0
    abda:	bd08      	pop	{r3, pc}
    abdc:	200001ec 	.word	0x200001ec

0000abe0 <CC_PalPowerSaveModeInit>:
    abe0:	b570      	push	{r4, r5, r6, lr}
    abe2:	4c09      	ldr	r4, [pc, #36]	; (ac08 <CC_PalPowerSaveModeInit+0x28>)
    abe4:	4d09      	ldr	r5, [pc, #36]	; (ac0c <CC_PalPowerSaveModeInit+0x2c>)
    abe6:	6920      	ldr	r0, [r4, #16]
    abe8:	68ab      	ldr	r3, [r5, #8]
    abea:	4798      	blx	r3
    abec:	b118      	cbz	r0, abf6 <CC_PalPowerSaveModeInit+0x16>
    abee:	4b08      	ldr	r3, [pc, #32]	; (ac10 <CC_PalPowerSaveModeInit+0x30>)
    abf0:	4808      	ldr	r0, [pc, #32]	; (ac14 <CC_PalPowerSaveModeInit+0x34>)
    abf2:	685b      	ldr	r3, [r3, #4]
    abf4:	4798      	blx	r3
    abf6:	2100      	movs	r1, #0
    abf8:	4a07      	ldr	r2, [pc, #28]	; (ac18 <CC_PalPowerSaveModeInit+0x38>)
    abfa:	68eb      	ldr	r3, [r5, #12]
    abfc:	6011      	str	r1, [r2, #0]
    abfe:	6920      	ldr	r0, [r4, #16]
    ac00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac04:	4718      	bx	r3
    ac06:	bf00      	nop
    ac08:	200001fc 	.word	0x200001fc
    ac0c:	200001ec 	.word	0x200001ec
    ac10:	200001dc 	.word	0x200001dc
    ac14:	00010bc8 	.word	0x00010bc8
    ac18:	20001b60 	.word	0x20001b60

0000ac1c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ac1c:	4770      	bx	lr

0000ac1e <cbprintf_via_va_list>:
{
    ac1e:	b510      	push	{r4, lr}
    ac20:	460c      	mov	r4, r1
    ac22:	4611      	mov	r1, r2
    ac24:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    ac26:	9b02      	ldr	r3, [sp, #8]
    ac28:	47a0      	blx	r4
}
    ac2a:	bd10      	pop	{r4, pc}

0000ac2c <get_package_len>:
{
    ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac2e:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    ac30:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    ac32:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
    ac34:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
    ac36:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ac3a:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    ac3c:	2700      	movs	r7, #0
    ac3e:	e006      	b.n	ac4e <get_package_len+0x22>
		buf++;
    ac40:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    ac42:	4620      	mov	r0, r4
    ac44:	f001 ff0e 	bl	ca64 <strlen>
    ac48:	3001      	adds	r0, #1
    ac4a:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    ac4c:	3701      	adds	r7, #1
    ac4e:	42af      	cmp	r7, r5
    ac50:	d3f6      	bcc.n	ac40 <get_package_len+0x14>
}
    ac52:	1ba0      	subs	r0, r4, r6
    ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ac56 <append_string>:
{
    ac56:	b570      	push	{r4, r5, r6, lr}
    ac58:	4614      	mov	r4, r2
	if (cb == NULL) {
    ac5a:	b138      	cbz	r0, ac6c <append_string+0x16>
    ac5c:	460d      	mov	r5, r1
    ac5e:	4619      	mov	r1, r3
    ac60:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    ac62:	b143      	cbz	r3, ac76 <append_string+0x20>
	return cb(str, strl, ctx);
    ac64:	462a      	mov	r2, r5
    ac66:	4620      	mov	r0, r4
    ac68:	47b0      	blx	r6
}
    ac6a:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    ac6c:	4610      	mov	r0, r2
    ac6e:	f001 fef9 	bl	ca64 <strlen>
    ac72:	3001      	adds	r0, #1
    ac74:	e7f9      	b.n	ac6a <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    ac76:	4610      	mov	r0, r2
    ac78:	f001 fef4 	bl	ca64 <strlen>
    ac7c:	b283      	uxth	r3, r0
    ac7e:	3301      	adds	r3, #1
    ac80:	b299      	uxth	r1, r3
    ac82:	e7ef      	b.n	ac64 <append_string+0xe>

0000ac84 <cbpprintf_external>:
	if (buf == NULL) {
    ac84:	b353      	cbz	r3, acdc <cbpprintf_external+0x58>
{
    ac86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac8a:	b082      	sub	sp, #8
    ac8c:	4607      	mov	r7, r0
    ac8e:	4688      	mov	r8, r1
    ac90:	4691      	mov	r9, r2
    ac92:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    ac94:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    ac96:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    ac98:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    ac9a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ac9c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    aca0:	441c      	add	r4, r3
    aca2:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    aca4:	f04f 0a00 	mov.w	sl, #0
    aca8:	e00a      	b.n	acc0 <cbpprintf_external+0x3c>
		s_idx = *(uint8_t *)s++;
    acaa:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    acae:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    acb2:	4620      	mov	r0, r4
    acb4:	f001 fed6 	bl	ca64 <strlen>
    acb8:	3001      	adds	r0, #1
    acba:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    acbc:	f10a 0a01 	add.w	sl, sl, #1
    acc0:	45b2      	cmp	sl, r6
    acc2:	d3f2      	bcc.n	acaa <cbpprintf_external+0x26>
	buf += sizeof(*hdr);
    acc4:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    acc8:	9300      	str	r3, [sp, #0]
    acca:	686b      	ldr	r3, [r5, #4]
    accc:	464a      	mov	r2, r9
    acce:	4641      	mov	r1, r8
    acd0:	4638      	mov	r0, r7
    acd2:	f7ff ffa4 	bl	ac1e <cbprintf_via_va_list>
}
    acd6:	b002      	add	sp, #8
    acd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    acdc:	f06f 0015 	mvn.w	r0, #21
}
    ace0:	4770      	bx	lr

0000ace2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    ace2:	4602      	mov	r2, r0
    ace4:	b158      	cbz	r0, acfe <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ace6:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ace8:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    acec:	2b01      	cmp	r3, #1
    acee:	d003      	beq.n	acf8 <sys_notify_validate+0x16>
    acf0:	2b03      	cmp	r3, #3
    acf2:	d107      	bne.n	ad04 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    acf4:	6803      	ldr	r3, [r0, #0]
    acf6:	b143      	cbz	r3, ad0a <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    acf8:	2000      	movs	r0, #0
    acfa:	6090      	str	r0, [r2, #8]
    acfc:	4770      	bx	lr
		return -EINVAL;
    acfe:	f06f 0015 	mvn.w	r0, #21
    ad02:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    ad04:	f06f 0015 	mvn.w	r0, #21
    ad08:	4770      	bx	lr
			rv = -EINVAL;
    ad0a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    ad0e:	4770      	bx	lr

0000ad10 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    ad10:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ad12:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ad14:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    ad18:	6081      	str	r1, [r0, #8]
	switch (method) {
    ad1a:	2a03      	cmp	r2, #3
    ad1c:	d103      	bne.n	ad26 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    ad1e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ad20:	2200      	movs	r2, #0
    ad22:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ad24:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    ad26:	2000      	movs	r0, #0
    ad28:	e7fa      	b.n	ad20 <sys_notify_finalize+0x10>

0000ad2a <arch_printk_char_out>:
}
    ad2a:	2000      	movs	r0, #0
    ad2c:	4770      	bx	lr

0000ad2e <str_out>:
{
    ad2e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    ad30:	680c      	ldr	r4, [r1, #0]
    ad32:	b154      	cbz	r4, ad4a <str_out+0x1c>
    ad34:	688a      	ldr	r2, [r1, #8]
    ad36:	684b      	ldr	r3, [r1, #4]
    ad38:	429a      	cmp	r2, r3
    ad3a:	da06      	bge.n	ad4a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    ad3c:	3b01      	subs	r3, #1
    ad3e:	429a      	cmp	r2, r3
    ad40:	d008      	beq.n	ad54 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    ad42:	1c53      	adds	r3, r2, #1
    ad44:	608b      	str	r3, [r1, #8]
    ad46:	54a0      	strb	r0, [r4, r2]
    ad48:	e002      	b.n	ad50 <str_out+0x22>
		ctx->count++;
    ad4a:	688b      	ldr	r3, [r1, #8]
    ad4c:	3301      	adds	r3, #1
    ad4e:	608b      	str	r3, [r1, #8]
}
    ad50:	bc10      	pop	{r4}
    ad52:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    ad54:	1c53      	adds	r3, r2, #1
    ad56:	608b      	str	r3, [r1, #8]
    ad58:	2300      	movs	r3, #0
    ad5a:	54a3      	strb	r3, [r4, r2]
    ad5c:	e7f8      	b.n	ad50 <str_out+0x22>

0000ad5e <vprintk>:
{
    ad5e:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
    ad60:	f001 f999 	bl	c096 <z_log_vprintk>
}
    ad64:	bd08      	pop	{r3, pc}

0000ad66 <printk>:
{
    ad66:	b40f      	push	{r0, r1, r2, r3}
    ad68:	b500      	push	{lr}
    ad6a:	b083      	sub	sp, #12
    ad6c:	a904      	add	r1, sp, #16
    ad6e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    ad72:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    ad74:	f7ff fff3 	bl	ad5e <vprintk>
}
    ad78:	b003      	add	sp, #12
    ad7a:	f85d eb04 	ldr.w	lr, [sp], #4
    ad7e:	b004      	add	sp, #16
    ad80:	4770      	bx	lr

0000ad82 <snprintk>:
{
    ad82:	b40c      	push	{r2, r3}
    ad84:	b500      	push	{lr}
    ad86:	b083      	sub	sp, #12
    ad88:	ab04      	add	r3, sp, #16
    ad8a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    ad8e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    ad90:	f7f6 f8c0 	bl	f14 <vsnprintk>
}
    ad94:	b003      	add	sp, #12
    ad96:	f85d eb04 	ldr.w	lr, [sp], #4
    ad9a:	b002      	add	sp, #8
    ad9c:	4770      	bx	lr

0000ad9e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    ad9e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ada2:	8b03      	ldrh	r3, [r0, #24]
    ada4:	f023 0307 	bic.w	r3, r3, #7
    ada8:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    adaa:	8303      	strh	r3, [r0, #24]
}
    adac:	4770      	bx	lr

0000adae <notify_monitors>:
{
    adae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adb2:	4606      	mov	r6, r0
    adb4:	460f      	mov	r7, r1
    adb6:	4690      	mov	r8, r2
	return list->head;
    adb8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    adba:	b121      	cbz	r1, adc6 <notify_monitors+0x18>
	return node->next;
    adbc:	680c      	ldr	r4, [r1, #0]
    adbe:	b13c      	cbz	r4, add0 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    adc0:	b931      	cbnz	r1, add0 <notify_monitors+0x22>
    adc2:	460c      	mov	r4, r1
    adc4:	e004      	b.n	add0 <notify_monitors+0x22>
    adc6:	460c      	mov	r4, r1
    adc8:	e002      	b.n	add0 <notify_monitors+0x22>
    adca:	4623      	mov	r3, r4
    adcc:	4621      	mov	r1, r4
    adce:	461c      	mov	r4, r3
    add0:	b169      	cbz	r1, adee <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    add2:	684d      	ldr	r5, [r1, #4]
    add4:	4643      	mov	r3, r8
    add6:	463a      	mov	r2, r7
    add8:	4630      	mov	r0, r6
    adda:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    addc:	2c00      	cmp	r4, #0
    adde:	d0f4      	beq.n	adca <notify_monitors+0x1c>
	return node->next;
    ade0:	6823      	ldr	r3, [r4, #0]
    ade2:	2b00      	cmp	r3, #0
    ade4:	d0f2      	beq.n	adcc <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ade6:	2c00      	cmp	r4, #0
    ade8:	d1f0      	bne.n	adcc <notify_monitors+0x1e>
    adea:	4623      	mov	r3, r4
    adec:	e7ee      	b.n	adcc <notify_monitors+0x1e>
}
    adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000adf2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    adf2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    adf4:	f013 0307 	ands.w	r3, r3, #7
    adf8:	d103      	bne.n	ae02 <process_recheck+0x10>
	return list->head;
    adfa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    adfc:	b10a      	cbz	r2, ae02 <process_recheck+0x10>
		evt = EVT_START;
    adfe:	2003      	movs	r0, #3
    ae00:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ae02:	2b02      	cmp	r3, #2
    ae04:	d003      	beq.n	ae0e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    ae06:	2b01      	cmp	r3, #1
    ae08:	d006      	beq.n	ae18 <process_recheck+0x26>
	int evt = EVT_NOP;
    ae0a:	2000      	movs	r0, #0
    ae0c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    ae0e:	8b42      	ldrh	r2, [r0, #26]
    ae10:	2a00      	cmp	r2, #0
    ae12:	d1f8      	bne.n	ae06 <process_recheck+0x14>
		evt = EVT_STOP;
    ae14:	2004      	movs	r0, #4
    ae16:	4770      	bx	lr
    ae18:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    ae1a:	b10b      	cbz	r3, ae20 <process_recheck+0x2e>
		evt = EVT_RESET;
    ae1c:	2005      	movs	r0, #5
}
    ae1e:	4770      	bx	lr
	int evt = EVT_NOP;
    ae20:	2000      	movs	r0, #0
    ae22:	4770      	bx	lr

0000ae24 <process_complete>:
{
    ae24:	b510      	push	{r4, lr}
    ae26:	4604      	mov	r4, r0
    ae28:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ae2a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    ae2c:	2a00      	cmp	r2, #0
    ae2e:	db07      	blt.n	ae40 <process_complete+0x1c>
    ae30:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ae34:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ae36:	2a01      	cmp	r2, #1
    ae38:	d90e      	bls.n	ae58 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ae3a:	2b04      	cmp	r3, #4
    ae3c:	d036      	beq.n	aeac <process_complete+0x88>
}
    ae3e:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    ae40:	e9d0 0100 	ldrd	r0, r1, [r0]
    ae44:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    ae48:	2300      	movs	r3, #0
    ae4a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    ae4c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    ae4e:	2101      	movs	r1, #1
    ae50:	4620      	mov	r0, r4
    ae52:	f7ff ffa4 	bl	ad9e <set_state>
    ae56:	e7f2      	b.n	ae3e <process_complete+0x1a>
		*clients = mgr->clients;
    ae58:	e9d0 0100 	ldrd	r0, r1, [r0]
    ae5c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    ae60:	2200      	movs	r2, #0
    ae62:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    ae64:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    ae66:	2b06      	cmp	r3, #6
    ae68:	d11b      	bne.n	aea2 <process_complete+0x7e>
	return list->head;
    ae6a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ae6e:	b153      	cbz	r3, ae86 <process_complete+0x62>
				mgr->refs += 1U;
    ae70:	8b62      	ldrh	r2, [r4, #26]
    ae72:	3201      	adds	r2, #1
    ae74:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ae76:	461a      	mov	r2, r3
	return node->next;
    ae78:	681b      	ldr	r3, [r3, #0]
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d0f7      	beq.n	ae6e <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ae7e:	2a00      	cmp	r2, #0
    ae80:	d1f5      	bne.n	ae6e <process_complete+0x4a>
    ae82:	4613      	mov	r3, r2
    ae84:	e7f3      	b.n	ae6e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    ae86:	2102      	movs	r1, #2
    ae88:	4620      	mov	r0, r4
    ae8a:	f7ff ff88 	bl	ad9e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    ae8e:	4620      	mov	r0, r4
    ae90:	f7ff ffaf 	bl	adf2 <process_recheck>
    ae94:	2800      	cmp	r0, #0
    ae96:	d0d2      	beq.n	ae3e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ae98:	8b23      	ldrh	r3, [r4, #24]
    ae9a:	f043 0320 	orr.w	r3, r3, #32
    ae9e:	8323      	strh	r3, [r4, #24]
    aea0:	e7cd      	b.n	ae3e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    aea2:	2100      	movs	r1, #0
    aea4:	4620      	mov	r0, r4
    aea6:	f7ff ff7a 	bl	ad9e <set_state>
    aeaa:	e7f0      	b.n	ae8e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    aeac:	2100      	movs	r1, #0
    aeae:	f7ff ff76 	bl	ad9e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    aeb2:	4620      	mov	r0, r4
    aeb4:	f7ff ff9d 	bl	adf2 <process_recheck>
    aeb8:	2800      	cmp	r0, #0
    aeba:	d0c0      	beq.n	ae3e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aebc:	8b23      	ldrh	r3, [r4, #24]
    aebe:	f043 0320 	orr.w	r3, r3, #32
    aec2:	8323      	strh	r3, [r4, #24]
}
    aec4:	e7bb      	b.n	ae3e <process_complete+0x1a>

0000aec6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    aec6:	b150      	cbz	r0, aede <validate_args+0x18>
{
    aec8:	b510      	push	{r4, lr}
    aeca:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    aecc:	b151      	cbz	r1, aee4 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    aece:	1d08      	adds	r0, r1, #4
    aed0:	f7ff ff07 	bl	ace2 <sys_notify_validate>
	if ((rv == 0)
    aed4:	b910      	cbnz	r0, aedc <validate_args+0x16>
	    && ((cli->notify.flags
    aed6:	68a3      	ldr	r3, [r4, #8]
    aed8:	2b03      	cmp	r3, #3
    aeda:	d806      	bhi.n	aeea <validate_args+0x24>
}
    aedc:	bd10      	pop	{r4, pc}
		return -EINVAL;
    aede:	f06f 0015 	mvn.w	r0, #21
}
    aee2:	4770      	bx	lr
		return -EINVAL;
    aee4:	f06f 0015 	mvn.w	r0, #21
    aee8:	e7f8      	b.n	aedc <validate_args+0x16>
		rv = -EINVAL;
    aeea:	f06f 0015 	mvn.w	r0, #21
    aeee:	e7f5      	b.n	aedc <validate_args+0x16>

0000aef0 <notify_one>:
{
    aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aef4:	4607      	mov	r7, r0
    aef6:	460c      	mov	r4, r1
    aef8:	4616      	mov	r6, r2
    aefa:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    aefc:	4619      	mov	r1, r3
    aefe:	1d20      	adds	r0, r4, #4
    af00:	f7ff ff06 	bl	ad10 <sys_notify_finalize>
	if (cb) {
    af04:	b128      	cbz	r0, af12 <notify_one+0x22>
    af06:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    af08:	462b      	mov	r3, r5
    af0a:	4632      	mov	r2, r6
    af0c:	4621      	mov	r1, r4
    af0e:	4638      	mov	r0, r7
    af10:	47c0      	blx	r8
}
    af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000af16 <notify_all>:
{
    af16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af1a:	4680      	mov	r8, r0
    af1c:	460c      	mov	r4, r1
    af1e:	4617      	mov	r7, r2
    af20:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    af22:	e004      	b.n	af2e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    af24:	4633      	mov	r3, r6
    af26:	463a      	mov	r2, r7
    af28:	4640      	mov	r0, r8
    af2a:	f7ff ffe1 	bl	aef0 <notify_one>
	return list->head;
    af2e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    af30:	b131      	cbz	r1, af40 <notify_all+0x2a>
	return node->next;
    af32:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    af34:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    af36:	6863      	ldr	r3, [r4, #4]
    af38:	428b      	cmp	r3, r1
    af3a:	d1f3      	bne.n	af24 <notify_all+0xe>
	list->tail = node;
    af3c:	6065      	str	r5, [r4, #4]
}
    af3e:	e7f1      	b.n	af24 <notify_all+0xe>
}
    af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000af44 <transition_complete>:
{
    af44:	b508      	push	{r3, lr}
	__asm__ volatile(
    af46:	f04f 0c20 	mov.w	ip, #32
    af4a:	f3ef 8211 	mrs	r2, BASEPRI
    af4e:	f38c 8812 	msr	BASEPRI_MAX, ip
    af52:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    af56:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    af58:	2101      	movs	r1, #1
    af5a:	f7f5 fff3 	bl	f44 <process_event>
}
    af5e:	bd08      	pop	{r3, pc}

0000af60 <onoff_manager_init>:
	if ((mgr == NULL)
    af60:	4603      	mov	r3, r0
    af62:	b170      	cbz	r0, af82 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    af64:	b181      	cbz	r1, af88 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    af66:	680a      	ldr	r2, [r1, #0]
    af68:	b18a      	cbz	r2, af8e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    af6a:	684a      	ldr	r2, [r1, #4]
    af6c:	b192      	cbz	r2, af94 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    af6e:	2000      	movs	r0, #0
    af70:	6018      	str	r0, [r3, #0]
    af72:	6058      	str	r0, [r3, #4]
    af74:	6098      	str	r0, [r3, #8]
    af76:	60d8      	str	r0, [r3, #12]
    af78:	6118      	str	r0, [r3, #16]
    af7a:	6158      	str	r0, [r3, #20]
    af7c:	6198      	str	r0, [r3, #24]
    af7e:	6119      	str	r1, [r3, #16]
	return 0;
    af80:	4770      	bx	lr
		return -EINVAL;
    af82:	f06f 0015 	mvn.w	r0, #21
    af86:	4770      	bx	lr
    af88:	f06f 0015 	mvn.w	r0, #21
    af8c:	4770      	bx	lr
    af8e:	f06f 0015 	mvn.w	r0, #21
    af92:	4770      	bx	lr
    af94:	f06f 0015 	mvn.w	r0, #21
}
    af98:	4770      	bx	lr

0000af9a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    af9a:	b570      	push	{r4, r5, r6, lr}
    af9c:	4605      	mov	r5, r0
    af9e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    afa0:	f7ff ff91 	bl	aec6 <validate_args>

	if (rv < 0) {
    afa4:	1e04      	subs	r4, r0, #0
    afa6:	db30      	blt.n	b00a <onoff_request+0x70>
    afa8:	f04f 0320 	mov.w	r3, #32
    afac:	f3ef 8211 	mrs	r2, BASEPRI
    afb0:	f383 8812 	msr	BASEPRI_MAX, r3
    afb4:	f3bf 8f6f 	isb	sy
    afb8:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    afba:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    afbe:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    afc2:	8b6b      	ldrh	r3, [r5, #26]
    afc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    afc8:	428b      	cmp	r3, r1
    afca:	d02c      	beq.n	b026 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    afcc:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    afce:	f1bc 0f02 	cmp.w	ip, #2
    afd2:	d008      	beq.n	afe6 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    afd4:	f1bc 0f06 	cmp.w	ip, #6
    afd8:	d819      	bhi.n	b00e <onoff_request+0x74>
    afda:	e8df f00c 	tbb	[pc, ip]
    afde:	181e      	.short	0x181e
    afe0:	2a1e1818 	.word	0x2a1e1818
    afe4:	1e          	.byte	0x1e
    afe5:	00          	.byte	0x00
		mgr->refs += 1U;
    afe6:	3301      	adds	r3, #1
    afe8:	836b      	strh	r3, [r5, #26]
		notify = true;
    afea:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    afec:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    afee:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    aff0:	b128      	cbz	r0, affe <onoff_request+0x64>
	parent->next = child;
    aff2:	2000      	movs	r0, #0
    aff4:	6030      	str	r0, [r6, #0]
	return list->tail;
    aff6:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    aff8:	b308      	cbz	r0, b03e <onoff_request+0xa4>
	parent->next = child;
    affa:	6006      	str	r6, [r0, #0]
	list->tail = node;
    affc:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    affe:	bb09      	cbnz	r1, b044 <onoff_request+0xaa>
	__asm__ volatile(
    b000:	f38e 8811 	msr	BASEPRI, lr
    b004:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    b008:	bb0b      	cbnz	r3, b04e <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    b00a:	4620      	mov	r0, r4
    b00c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    b00e:	f06f 0404 	mvn.w	r4, #4
    b012:	2300      	movs	r3, #0
    b014:	4619      	mov	r1, r3
    b016:	4618      	mov	r0, r3
    b018:	e7ea      	b.n	aff0 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    b01a:	fabc f18c 	clz	r1, ip
    b01e:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    b020:	2300      	movs	r3, #0
		add_client = true;
    b022:	2001      	movs	r0, #1
    b024:	e7e4      	b.n	aff0 <onoff_request+0x56>
		rv = -EAGAIN;
    b026:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    b02a:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    b02c:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    b02e:	4618      	mov	r0, r3
    b030:	e7de      	b.n	aff0 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    b032:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b036:	2300      	movs	r3, #0
    b038:	4619      	mov	r1, r3
    b03a:	4618      	mov	r0, r3
    b03c:	e7d8      	b.n	aff0 <onoff_request+0x56>
    b03e:	606e      	str	r6, [r5, #4]
	list->head = node;
    b040:	602e      	str	r6, [r5, #0]
}
    b042:	e7dc      	b.n	affe <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    b044:	2102      	movs	r1, #2
    b046:	4628      	mov	r0, r5
    b048:	f7f5 ff7c 	bl	f44 <process_event>
    b04c:	e7dd      	b.n	b00a <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    b04e:	2300      	movs	r3, #0
    b050:	4662      	mov	r2, ip
    b052:	4631      	mov	r1, r6
    b054:	4628      	mov	r0, r5
    b056:	f7ff ff4b 	bl	aef0 <notify_one>
    b05a:	e7d6      	b.n	b00a <onoff_request+0x70>

0000b05c <onoff_sync_lock>:
	__asm__ volatile(
    b05c:	f04f 0220 	mov.w	r2, #32
    b060:	f3ef 8311 	mrs	r3, BASEPRI
    b064:	f382 8812 	msr	BASEPRI_MAX, r2
    b068:	f3bf 8f6f 	isb	sy
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
    b06c:	600b      	str	r3, [r1, #0]
	return srv->count;
}
    b06e:	6800      	ldr	r0, [r0, #0]
    b070:	4770      	bx	lr

0000b072 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    b072:	b510      	push	{r4, lr}
    b074:	468c      	mov	ip, r1
    b076:	4611      	mov	r1, r2
    b078:	f89d 4008 	ldrb.w	r4, [sp, #8]

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    b07c:	6802      	ldr	r2, [r0, #0]
    b07e:	2a00      	cmp	r2, #0
    b080:	db07      	blt.n	b092 <onoff_sync_finalize+0x20>
		srv->count = 0;
	}
	if (res < 0) {
    b082:	2b00      	cmp	r3, #0
    b084:	db08      	blt.n	b098 <onoff_sync_finalize+0x26>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
    b086:	b1a4      	cbz	r4, b0b2 <onoff_sync_finalize+0x40>
		srv->count += 1;
    b088:	6802      	ldr	r2, [r0, #0]
    b08a:	3201      	adds	r2, #1
    b08c:	6002      	str	r2, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    b08e:	2202      	movs	r2, #2
    b090:	e004      	b.n	b09c <onoff_sync_finalize+0x2a>
		srv->count = 0;
    b092:	2200      	movs	r2, #0
    b094:	6002      	str	r2, [r0, #0]
    b096:	e7f4      	b.n	b082 <onoff_sync_finalize+0x10>
		srv->count = res;
    b098:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    b09a:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    b09c:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    b09e:	f38c 8811 	msr	BASEPRI, ip
    b0a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    b0a6:	b111      	cbz	r1, b0ae <onoff_sync_finalize+0x3c>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    b0a8:	2000      	movs	r0, #0
    b0aa:	f7ff ff21 	bl	aef0 <notify_one>
	}

	return rv;
}
    b0ae:	4620      	mov	r0, r4
    b0b0:	bd10      	pop	{r4, pc}
		srv->count -= 1;
    b0b2:	6802      	ldr	r2, [r0, #0]
    b0b4:	3a01      	subs	r2, #1
    b0b6:	6002      	str	r2, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    b0b8:	2202      	movs	r2, #2
    b0ba:	e7ef      	b.n	b09c <onoff_sync_finalize+0x2a>

0000b0bc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b0bc:	b508      	push	{r3, lr}
    b0be:	4604      	mov	r4, r0
    b0c0:	4608      	mov	r0, r1
    b0c2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b0c4:	461a      	mov	r2, r3
    b0c6:	47a0      	blx	r4
	return z_impl_z_current_get();
    b0c8:	f7ff f95e 	bl	a388 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b0cc:	f7f9 f9ca 	bl	4464 <z_impl_k_thread_abort>

0000b0d0 <set_chunk_used>:
}

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    b0d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    b0d4:	6883      	ldr	r3, [r0, #8]

	if (big_heap(h)) {
    b0d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b0da:	d30a      	bcc.n	b0f2 <set_chunk_used+0x22>
		if (used) {
    b0dc:	b122      	cbz	r2, b0e8 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    b0de:	684b      	ldr	r3, [r1, #4]
    b0e0:	f043 0301 	orr.w	r3, r3, #1
    b0e4:	604b      	str	r3, [r1, #4]
    b0e6:	4770      	bx	lr
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b0e8:	684b      	ldr	r3, [r1, #4]
    b0ea:	f023 0301 	bic.w	r3, r3, #1
    b0ee:	604b      	str	r3, [r1, #4]
    b0f0:	4770      	bx	lr
		}
	} else {
		if (used) {
    b0f2:	b122      	cbz	r2, b0fe <set_chunk_used+0x2e>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b0f4:	884b      	ldrh	r3, [r1, #2]
    b0f6:	f043 0301 	orr.w	r3, r3, #1
    b0fa:	804b      	strh	r3, [r1, #2]
    b0fc:	4770      	bx	lr
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b0fe:	884b      	ldrh	r3, [r1, #2]
    b100:	f023 0301 	bic.w	r3, r3, #1
    b104:	804b      	strh	r3, [r1, #2]
		}
	}
}
    b106:	4770      	bx	lr

0000b108 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b108:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(h->end_chunk);
    b10a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    b10c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b110:	d303      	bcc.n	b11a <chunk_mem+0x12>
    b112:	2308      	movs	r3, #8
    b114:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    b116:	4408      	add	r0, r1
    b118:	4770      	bx	lr
    b11a:	2304      	movs	r3, #4
    b11c:	e7fa      	b.n	b114 <chunk_mem+0xc>

0000b11e <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    b11e:	b410      	push	{r4}
	void *cmem = &buf[c];
    b120:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    b124:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b126:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b12a:	d319      	bcc.n	b160 <free_list_remove_bidx+0x42>
		return ((uint32_t *)cmem)[f];
    b12c:	f8dc 300c 	ldr.w	r3, [ip, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    b130:	4299      	cmp	r1, r3
    b132:	d018      	beq.n	b166 <free_list_remove_bidx+0x48>
	if (big_heap(h)) {
    b134:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b138:	d321      	bcc.n	b17e <free_list_remove_bidx+0x60>
		return ((uint32_t *)cmem)[f];
    b13a:	f8dc 1008 	ldr.w	r1, [ip, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    b13e:	3204      	adds	r2, #4
    b140:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    b144:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    b148:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b14c:	d31a      	bcc.n	b184 <free_list_remove_bidx+0x66>
		((uint32_t *)cmem)[f] = val;
    b14e:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    b150:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    b154:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    b156:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b15a:	d315      	bcc.n	b188 <free_list_remove_bidx+0x6a>
		((uint32_t *)cmem)[f] = val;
    b15c:	6099      	str	r1, [r3, #8]
    b15e:	e00c      	b.n	b17a <free_list_remove_bidx+0x5c>
		return ((uint16_t *)cmem)[f];
    b160:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    b164:	e7e4      	b.n	b130 <free_list_remove_bidx+0x12>
		h->avail_buckets &= ~BIT(bidx);
    b166:	68c3      	ldr	r3, [r0, #12]
    b168:	2101      	movs	r1, #1
    b16a:	4091      	lsls	r1, r2
    b16c:	ea23 0301 	bic.w	r3, r3, r1
    b170:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    b172:	3204      	adds	r2, #4
    b174:	2300      	movs	r3, #0
    b176:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    b17a:	bc10      	pop	{r4}
    b17c:	4770      	bx	lr
    b17e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    b182:	e7dc      	b.n	b13e <free_list_remove_bidx+0x20>
		((uint16_t *)cmem)[f] = val;
    b184:	80d3      	strh	r3, [r2, #6]
    b186:	e7e3      	b.n	b150 <free_list_remove_bidx+0x32>
    b188:	8099      	strh	r1, [r3, #4]
    b18a:	e7f6      	b.n	b17a <free_list_remove_bidx+0x5c>

0000b18c <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    b18c:	1d13      	adds	r3, r2, #4
    b18e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    b192:	b9db      	cbnz	r3, b1cc <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    b194:	68c3      	ldr	r3, [r0, #12]
    b196:	f04f 0c01 	mov.w	ip, #1
    b19a:	fa0c fc02 	lsl.w	ip, ip, r2
    b19e:	ea43 030c 	orr.w	r3, r3, ip
    b1a2:	60c3      	str	r3, [r0, #12]
		b->next = c;
    b1a4:	3204      	adds	r2, #4
    b1a6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    b1aa:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    b1ae:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    b1b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b1b4:	d306      	bcc.n	b1c4 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    b1b6:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    b1b8:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    b1ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b1be:	d303      	bcc.n	b1c8 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    b1c0:	60d9      	str	r1, [r3, #12]
    b1c2:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    b1c4:	8099      	strh	r1, [r3, #4]
    b1c6:	e7f7      	b.n	b1b8 <free_list_add_bidx+0x2c>
    b1c8:	80d9      	strh	r1, [r3, #6]
    b1ca:	4770      	bx	lr
{
    b1cc:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
    b1ce:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    b1d2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b1d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b1d8:	d31c      	bcc.n	b214 <free_list_add_bidx+0x88>
		return ((uint32_t *)cmem)[f];
    b1da:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
    b1de:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
    b1e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b1e6:	d318      	bcc.n	b21a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    b1e8:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
    b1ec:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b1ee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b1f2:	d315      	bcc.n	b220 <free_list_add_bidx+0x94>
		((uint32_t *)cmem)[f] = val;
    b1f4:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
    b1f8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    b1fc:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    b1fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b202:	d310      	bcc.n	b226 <free_list_add_bidx+0x9a>
		((uint32_t *)cmem)[f] = val;
    b204:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    b206:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    b208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b20c:	d30d      	bcc.n	b22a <free_list_add_bidx+0x9e>
		((uint32_t *)cmem)[f] = val;
    b20e:	f8cc 1008 	str.w	r1, [ip, #8]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    b212:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
    b214:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    b218:	e7e1      	b.n	b1de <free_list_add_bidx+0x52>
		((uint16_t *)cmem)[f] = val;
    b21a:	f8ae 2004 	strh.w	r2, [lr, #4]
    b21e:	e7e5      	b.n	b1ec <free_list_add_bidx+0x60>
    b220:	f8ae 3006 	strh.w	r3, [lr, #6]
    b224:	e7e8      	b.n	b1f8 <free_list_add_bidx+0x6c>
    b226:	80d1      	strh	r1, [r2, #6]
    b228:	e7ed      	b.n	b206 <free_list_add_bidx+0x7a>
    b22a:	f8ac 1004 	strh.w	r1, [ip, #4]
    b22e:	e7f0      	b.n	b212 <free_list_add_bidx+0x86>

0000b230 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    b230:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    b232:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    b236:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b238:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b23c:	d329      	bcc.n	b292 <split_chunks+0x62>
		return ((uint32_t *)cmem)[f];
    b23e:	f8dc 5004 	ldr.w	r5, [ip, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    b242:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    b244:	1a89      	subs	r1, r1, r2
    b246:	eb01 0155 	add.w	r1, r1, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b24a:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
    b24c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b250:	d322      	bcc.n	b298 <split_chunks+0x68>
		((uint32_t *)cmem)[f] = val;
    b252:	f8cc 5004 	str.w	r5, [ip, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b256:	004c      	lsls	r4, r1, #1
	void *cmem = &buf[c];
    b258:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
    b25c:	6885      	ldr	r5, [r0, #8]
    b25e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    b262:	d31c      	bcc.n	b29e <split_chunks+0x6e>
		((uint32_t *)cmem)[f] = val;
    b264:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
    b268:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b26a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b26e:	d319      	bcc.n	b2a4 <split_chunks+0x74>
		((uint32_t *)cmem)[f] = val;
    b270:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    b274:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    b276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b27a:	d316      	bcc.n	b2aa <split_chunks+0x7a>
		return ((uint32_t *)cmem)[f];
    b27c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
    b280:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    b284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b288:	d312      	bcc.n	b2b0 <split_chunks+0x80>
		((uint32_t *)cmem)[f] = val;
    b28a:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    b28e:	bc30      	pop	{r4, r5}
    b290:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    b292:	f8bc 5002 	ldrh.w	r5, [ip, #2]
    b296:	e7d4      	b.n	b242 <split_chunks+0x12>
		((uint16_t *)cmem)[f] = val;
    b298:	f8ac 5002 	strh.w	r5, [ip, #2]
    b29c:	e7db      	b.n	b256 <split_chunks+0x26>
    b29e:	f8ac 4002 	strh.w	r4, [ip, #2]
    b2a2:	e7e1      	b.n	b268 <split_chunks+0x38>
    b2a4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    b2a8:	e7e4      	b.n	b274 <split_chunks+0x44>
		return ((uint16_t *)cmem)[f];
    b2aa:	f8bc 4002 	ldrh.w	r4, [ip, #2]
    b2ae:	e7e7      	b.n	b280 <split_chunks+0x50>
		((uint16_t *)cmem)[f] = val;
    b2b0:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    b2b4:	e7eb      	b.n	b28e <split_chunks+0x5e>

0000b2b6 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    b2b6:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    b2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b2bc:	d304      	bcc.n	b2c8 <mem_to_chunkid+0x12>
    b2be:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b2c0:	1ac9      	subs	r1, r1, r3
    b2c2:	1a08      	subs	r0, r1, r0
}
    b2c4:	08c0      	lsrs	r0, r0, #3
    b2c6:	4770      	bx	lr
    b2c8:	2304      	movs	r3, #4
    b2ca:	e7f9      	b.n	b2c0 <mem_to_chunkid+0xa>

0000b2cc <free_list_add>:
{
    b2cc:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    b2ce:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    b2d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b2d4:	d307      	bcc.n	b2e6 <free_list_add+0x1a>
	void *cmem = &buf[c];
    b2d6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    b2da:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    b2dc:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    b2de:	2a01      	cmp	r2, #1
    b2e0:	d002      	beq.n	b2e8 <free_list_add+0x1c>
    b2e2:	2200      	movs	r2, #0
    b2e4:	e000      	b.n	b2e8 <free_list_add+0x1c>
    b2e6:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    b2e8:	b9a2      	cbnz	r2, b314 <free_list_add+0x48>
	void *cmem = &buf[c];
    b2ea:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    b2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b2f2:	d310      	bcc.n	b316 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    b2f4:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    b2f6:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    b2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b2fc:	d30d      	bcc.n	b31a <free_list_add+0x4e>
    b2fe:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b300:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    b302:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    b306:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    b308:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    b30c:	f1c2 021f 	rsb	r2, r2, #31
    b310:	f7ff ff3c 	bl	b18c <free_list_add_bidx>
}
    b314:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    b316:	8852      	ldrh	r2, [r2, #2]
    b318:	e7ed      	b.n	b2f6 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    b31a:	2304      	movs	r3, #4
    b31c:	e7f0      	b.n	b300 <free_list_add+0x34>

0000b31e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    b31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    b320:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    b322:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    b326:	d310      	bcc.n	b34a <alloc_chunk+0x2c>
    b328:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b32a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    b32c:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    b330:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    b332:	fab3 f383 	clz	r3, r3
    b336:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    b33a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    b33e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
    b342:	b346      	cbz	r6, b396 <alloc_chunk+0x78>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    b344:	f04f 0c03 	mov.w	ip, #3
    b348:	e012      	b.n	b370 <alloc_chunk+0x52>
	return big_heap(h) ? 8 : 4;
    b34a:	2304      	movs	r3, #4
    b34c:	e7ed      	b.n	b32a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    b34e:	f8be 7002 	ldrh.w	r7, [lr, #2]
    b352:	e017      	b.n	b384 <alloc_chunk+0x66>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    b354:	4621      	mov	r1, r4
    b356:	f7ff fee2 	bl	b11e <free_list_remove_bidx>
				return c;
    b35a:	e024      	b.n	b3a6 <alloc_chunk+0x88>
    b35c:	f8be 4006 	ldrh.w	r4, [lr, #6]
			}
			b->next = next_free_chunk(h, c);
    b360:	1d17      	adds	r7, r2, #4
    b362:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    b366:	f1bc 0c01 	subs.w	ip, ip, #1
    b36a:	d014      	beq.n	b396 <alloc_chunk+0x78>
    b36c:	42a6      	cmp	r6, r4
    b36e:	d012      	beq.n	b396 <alloc_chunk+0x78>
			chunkid_t c = b->next;
    b370:	1d14      	adds	r4, r2, #4
    b372:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    b376:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
	if (big_heap(h)) {
    b37a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    b37e:	d3e6      	bcc.n	b34e <alloc_chunk+0x30>
		return ((uint32_t *)cmem)[f];
    b380:	f8de 7004 	ldr.w	r7, [lr, #4]
			if (chunk_size(h, c) >= sz) {
    b384:	ebb1 0f57 	cmp.w	r1, r7, lsr #1
    b388:	d9e4      	bls.n	b354 <alloc_chunk+0x36>
	if (big_heap(h)) {
    b38a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    b38e:	d3e5      	bcc.n	b35c <alloc_chunk+0x3e>
		return ((uint32_t *)cmem)[f];
    b390:	f8de 400c 	ldr.w	r4, [lr, #12]
    b394:	e7e4      	b.n	b360 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    b396:	68c4      	ldr	r4, [r0, #12]
    b398:	f1c3 0220 	rsb	r2, r3, #32
    b39c:	2301      	movs	r3, #1
    b39e:	4093      	lsls	r3, r2
    b3a0:	425b      	negs	r3, r3

	if (bmask != 0U) {
    b3a2:	401c      	ands	r4, r3
    b3a4:	d101      	bne.n	b3aa <alloc_chunk+0x8c>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    b3a6:	4620      	mov	r0, r4
    b3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    b3aa:	fa94 f2a4 	rbit	r2, r4
    b3ae:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    b3b2:	1d13      	adds	r3, r2, #4
    b3b4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    b3b8:	4621      	mov	r1, r4
    b3ba:	f7ff feb0 	bl	b11e <free_list_remove_bidx>
		return c;
    b3be:	e7f2      	b.n	b3a6 <alloc_chunk+0x88>

0000b3c0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    b3c0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    b3c2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    b3c4:	b3a1      	cbz	r1, b430 <sys_heap_alloc+0x70>
    b3c6:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    b3c8:	68aa      	ldr	r2, [r5, #8]
    b3ca:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    b3ce:	d931      	bls.n	b434 <sys_heap_alloc+0x74>
	return big_heap(h) ? 8 : 4;
    b3d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b3d4:	d31d      	bcc.n	b412 <sys_heap_alloc+0x52>
    b3d6:	2208      	movs	r2, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    b3d8:	189c      	adds	r4, r3, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b3da:	3407      	adds	r4, #7
    b3dc:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    b3de:	4621      	mov	r1, r4
    b3e0:	4628      	mov	r0, r5
    b3e2:	f7ff ff9c 	bl	b31e <alloc_chunk>
	if (c == 0U) {
    b3e6:	4606      	mov	r6, r0
    b3e8:	b330      	cbz	r0, b438 <sys_heap_alloc+0x78>
	void *cmem = &buf[c];
    b3ea:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    b3ee:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
    b3f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b3f4:	d30f      	bcc.n	b416 <sys_heap_alloc+0x56>
		return ((uint32_t *)cmem)[f];
    b3f6:	685b      	ldr	r3, [r3, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    b3f8:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    b3fc:	d30d      	bcc.n	b41a <sys_heap_alloc+0x5a>
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
    b3fe:	2201      	movs	r2, #1
    b400:	4631      	mov	r1, r6
    b402:	4628      	mov	r0, r5
    b404:	f7ff fe64 	bl	b0d0 <set_chunk_used>

	mem = chunk_mem(h, c);
    b408:	4631      	mov	r1, r6
    b40a:	4628      	mov	r0, r5
    b40c:	f7ff fe7c 	bl	b108 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    b410:	bd70      	pop	{r4, r5, r6, pc}
	return big_heap(h) ? 8 : 4;
    b412:	2204      	movs	r2, #4
    b414:	e7e0      	b.n	b3d8 <sys_heap_alloc+0x18>
		return ((uint16_t *)cmem)[f];
    b416:	885b      	ldrh	r3, [r3, #2]
    b418:	e7ee      	b.n	b3f8 <sys_heap_alloc+0x38>
		split_chunks(h, c, c + chunk_sz);
    b41a:	4434      	add	r4, r6
    b41c:	4622      	mov	r2, r4
    b41e:	4631      	mov	r1, r6
    b420:	4628      	mov	r0, r5
    b422:	f7ff ff05 	bl	b230 <split_chunks>
		free_list_add(h, c + chunk_sz);
    b426:	4621      	mov	r1, r4
    b428:	4628      	mov	r0, r5
    b42a:	f7ff ff4f 	bl	b2cc <free_list_add>
    b42e:	e7e6      	b.n	b3fe <sys_heap_alloc+0x3e>
		return NULL;
    b430:	2000      	movs	r0, #0
    b432:	e7ed      	b.n	b410 <sys_heap_alloc+0x50>
    b434:	2000      	movs	r0, #0
    b436:	e7eb      	b.n	b410 <sys_heap_alloc+0x50>
		return NULL;
    b438:	2000      	movs	r0, #0
    b43a:	e7e9      	b.n	b410 <sys_heap_alloc+0x50>

0000b43c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b440:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
    b442:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    b444:	424b      	negs	r3, r1
    b446:	400b      	ands	r3, r1
	if (align != rew) {
    b448:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    b44c:	ea19 0901 	ands.w	r9, r9, r1
    b450:	d00c      	beq.n	b46c <sys_heap_aligned_alloc+0x30>
	return big_heap_chunks(h->end_chunk);
    b452:	68b2      	ldr	r2, [r6, #8]
	return big_heap(h) ? 8 : 4;
    b454:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b458:	d306      	bcc.n	b468 <sys_heap_aligned_alloc+0x2c>
    b45a:	2208      	movs	r2, #8
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    b45c:	4293      	cmp	r3, r2
    b45e:	d258      	bcs.n	b512 <sys_heap_aligned_alloc+0xd6>
    b460:	461a      	mov	r2, r3
		align -= rew;
    b462:	464c      	mov	r4, r9
	rew = align & -align;
    b464:	4699      	mov	r9, r3
    b466:	e009      	b.n	b47c <sys_heap_aligned_alloc+0x40>
    b468:	2204      	movs	r2, #4
    b46a:	e7f7      	b.n	b45c <sys_heap_aligned_alloc+0x20>
    b46c:	460c      	mov	r4, r1
	return big_heap_chunks(h->end_chunk);
    b46e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    b470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b474:	d346      	bcc.n	b504 <sys_heap_aligned_alloc+0xc8>
    b476:	2208      	movs	r2, #8
	} else {
		if (align <= chunk_header_bytes(h)) {
    b478:	4294      	cmp	r4, r2
    b47a:	d945      	bls.n	b508 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    b47c:	2d00      	cmp	r5, #0
    b47e:	d063      	beq.n	b548 <sys_heap_aligned_alloc+0x10c>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    b480:	68b3      	ldr	r3, [r6, #8]
    b482:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
    b486:	d962      	bls.n	b54e <sys_heap_aligned_alloc+0x112>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    b488:	1961      	adds	r1, r4, r5
    b48a:	1a89      	subs	r1, r1, r2
	return big_heap(h) ? 8 : 4;
    b48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b490:	d342      	bcc.n	b518 <sys_heap_aligned_alloc+0xdc>
    b492:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    b494:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b496:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b498:	08c9      	lsrs	r1, r1, #3
    b49a:	4630      	mov	r0, r6
    b49c:	f7ff ff3f 	bl	b31e <alloc_chunk>

	if (c0 == 0) {
    b4a0:	4607      	mov	r7, r0
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d056      	beq.n	b554 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    b4a6:	4601      	mov	r1, r0
    b4a8:	4630      	mov	r0, r6
    b4aa:	f7ff fe2d 	bl	b108 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    b4ae:	eb00 0809 	add.w	r8, r0, r9
    b4b2:	44a0      	add	r8, r4
    b4b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    b4b8:	4264      	negs	r4, r4
    b4ba:	ea08 0804 	and.w	r8, r8, r4
    b4be:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b4c2:	eb08 0405 	add.w	r4, r8, r5
    b4c6:	3407      	adds	r4, #7
    b4c8:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    b4cc:	4641      	mov	r1, r8
    b4ce:	4630      	mov	r0, r6
    b4d0:	f7ff fef1 	bl	b2b6 <mem_to_chunkid>
    b4d4:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
    b4d6:	1ba4      	subs	r4, r4, r6
    b4d8:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    b4da:	4287      	cmp	r7, r0
    b4dc:	d31e      	bcc.n	b51c <sys_heap_aligned_alloc+0xe0>
	void *cmem = &buf[c];
    b4de:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
    b4e2:	68b2      	ldr	r2, [r6, #8]
	if (big_heap(h)) {
    b4e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b4e8:	d322      	bcc.n	b530 <sys_heap_aligned_alloc+0xf4>
		return ((uint32_t *)cmem)[f];
    b4ea:	685b      	ldr	r3, [r3, #4]
	return c + chunk_size(h, c);
    b4ec:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    b4f0:	429c      	cmp	r4, r3
    b4f2:	d31f      	bcc.n	b534 <sys_heap_aligned_alloc+0xf8>
		split_chunks(h, c, c_end);
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
    b4f4:	2201      	movs	r2, #1
    b4f6:	4629      	mov	r1, r5
    b4f8:	4630      	mov	r0, r6
    b4fa:	f7ff fde9 	bl	b0d0 <set_chunk_used>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    b4fe:	4640      	mov	r0, r8
    b500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return big_heap(h) ? 8 : 4;
    b504:	2204      	movs	r2, #4
    b506:	e7b7      	b.n	b478 <sys_heap_aligned_alloc+0x3c>
			return sys_heap_alloc(heap, bytes);
    b508:	4629      	mov	r1, r5
    b50a:	f7ff ff59 	bl	b3c0 <sys_heap_alloc>
    b50e:	4680      	mov	r8, r0
    b510:	e7f5      	b.n	b4fe <sys_heap_aligned_alloc+0xc2>
		align -= rew;
    b512:	464c      	mov	r4, r9
	rew = align & -align;
    b514:	4699      	mov	r9, r3
    b516:	e7b1      	b.n	b47c <sys_heap_aligned_alloc+0x40>
    b518:	2304      	movs	r3, #4
    b51a:	e7bb      	b.n	b494 <sys_heap_aligned_alloc+0x58>
		split_chunks(h, c0, c);
    b51c:	4602      	mov	r2, r0
    b51e:	4639      	mov	r1, r7
    b520:	4630      	mov	r0, r6
    b522:	f7ff fe85 	bl	b230 <split_chunks>
		free_list_add(h, c0);
    b526:	4639      	mov	r1, r7
    b528:	4630      	mov	r0, r6
    b52a:	f7ff fecf 	bl	b2cc <free_list_add>
    b52e:	e7d6      	b.n	b4de <sys_heap_aligned_alloc+0xa2>
		return ((uint16_t *)cmem)[f];
    b530:	885b      	ldrh	r3, [r3, #2]
    b532:	e7db      	b.n	b4ec <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c, c_end);
    b534:	4622      	mov	r2, r4
    b536:	4629      	mov	r1, r5
    b538:	4630      	mov	r0, r6
    b53a:	f7ff fe79 	bl	b230 <split_chunks>
		free_list_add(h, c_end);
    b53e:	4621      	mov	r1, r4
    b540:	4630      	mov	r0, r6
    b542:	f7ff fec3 	bl	b2cc <free_list_add>
    b546:	e7d5      	b.n	b4f4 <sys_heap_aligned_alloc+0xb8>
		return NULL;
    b548:	f04f 0800 	mov.w	r8, #0
    b54c:	e7d7      	b.n	b4fe <sys_heap_aligned_alloc+0xc2>
    b54e:	f04f 0800 	mov.w	r8, #0
    b552:	e7d4      	b.n	b4fe <sys_heap_aligned_alloc+0xc2>
		return NULL;
    b554:	f04f 0800 	mov.w	r8, #0
    b558:	e7d1      	b.n	b4fe <sys_heap_aligned_alloc+0xc2>

0000b55a <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    b55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
    b55c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    b560:	d323      	bcc.n	b5aa <sys_heap_init+0x50>
    b562:	2308      	movs	r3, #8
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    b564:	1ad2      	subs	r2, r2, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b566:	1dcc      	adds	r4, r1, #7
    b568:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b56c:	eb01 0c02 	add.w	ip, r1, r2
    b570:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b574:	ebac 0c04 	sub.w	ip, ip, r4
    b578:	ea4f 01dc 	mov.w	r1, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    b57c:	6004      	str	r4, [r0, #0]
	h->end_chunk = heap_sz;
    b57e:	60a1      	str	r1, [r4, #8]
	h->avail_buckets = 0;
    b580:	2300      	movs	r3, #0
    b582:	60e3      	str	r3, [r4, #12]
	return big_heap(h) ? 8 : 4;
    b584:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    b588:	d311      	bcc.n	b5ae <sys_heap_init+0x54>
    b58a:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b58c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    b58e:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    b592:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    b594:	fab3 f383 	clz	r3, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    b598:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b59c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    b5a0:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b5a2:	1dde      	adds	r6, r3, #7
    b5a4:	08f5      	lsrs	r5, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    b5a6:	2300      	movs	r3, #0
    b5a8:	e008      	b.n	b5bc <sys_heap_init+0x62>
	return big_heap_bytes(size) ? 8 : 4;
    b5aa:	2304      	movs	r3, #4
    b5ac:	e7da      	b.n	b564 <sys_heap_init+0xa>
	return big_heap(h) ? 8 : 4;
    b5ae:	2304      	movs	r3, #4
    b5b0:	e7ec      	b.n	b58c <sys_heap_init+0x32>
		h->buckets[i].next = 0;
    b5b2:	1d1a      	adds	r2, r3, #4
    b5b4:	2000      	movs	r0, #0
    b5b6:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    b5ba:	3301      	adds	r3, #1
    b5bc:	4573      	cmp	r3, lr
    b5be:	dbf8      	blt.n	b5b2 <sys_heap_init+0x58>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b5c0:	006b      	lsls	r3, r5, #1
	if (big_heap(h)) {
    b5c2:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    b5c6:	d332      	bcc.n	b62e <sys_heap_init+0xd4>
		((uint32_t *)cmem)[f] = val;
    b5c8:	6063      	str	r3, [r4, #4]
	if (big_heap(h)) {
    b5ca:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    b5ce:	d330      	bcc.n	b632 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    b5d0:	2300      	movs	r3, #0
    b5d2:	6023      	str	r3, [r4, #0]
	if (big_heap(h)) {
    b5d4:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    b5d8:	d32e      	bcc.n	b638 <sys_heap_init+0xde>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    b5da:	6863      	ldr	r3, [r4, #4]
    b5dc:	f043 0301 	orr.w	r3, r3, #1
    b5e0:	6063      	str	r3, [r4, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    b5e2:	1b4a      	subs	r2, r1, r5
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b5e4:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
    b5e6:	f026 0307 	bic.w	r3, r6, #7
    b5ea:	18e0      	adds	r0, r4, r3
	if (big_heap(h)) {
    b5ec:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    b5f0:	d327      	bcc.n	b642 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
    b5f2:	6047      	str	r7, [r0, #4]
	return big_heap_chunks(h->end_chunk);
    b5f4:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    b5f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    b5fa:	d324      	bcc.n	b646 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    b5fc:	50e5      	str	r5, [r4, r3]
	void *cmem = &buf[c];
    b5fe:	f02c 0307 	bic.w	r3, ip, #7
    b602:	44a4      	add	ip, r4
	return big_heap_chunks(h->end_chunk);
    b604:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    b606:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    b60a:	d31e      	bcc.n	b64a <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    b60c:	2000      	movs	r0, #0
    b60e:	f8cc 0004 	str.w	r0, [ip, #4]
	return big_heap_chunks(h->end_chunk);
    b612:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    b614:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    b618:	d31b      	bcc.n	b652 <sys_heap_init+0xf8>
		((uint32_t *)cmem)[f] = val;
    b61a:	50e2      	str	r2, [r4, r3]
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    b61c:	2201      	movs	r2, #1
    b61e:	4620      	mov	r0, r4
    b620:	f7ff fd56 	bl	b0d0 <set_chunk_used>

	free_list_add(h, chunk0_size);
    b624:	4629      	mov	r1, r5
    b626:	4620      	mov	r0, r4
    b628:	f7ff fe50 	bl	b2cc <free_list_add>
}
    b62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    b62e:	8063      	strh	r3, [r4, #2]
    b630:	e7cb      	b.n	b5ca <sys_heap_init+0x70>
    b632:	2300      	movs	r3, #0
    b634:	8023      	strh	r3, [r4, #0]
    b636:	e7cd      	b.n	b5d4 <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b638:	8863      	ldrh	r3, [r4, #2]
    b63a:	f043 0301 	orr.w	r3, r3, #1
    b63e:	8063      	strh	r3, [r4, #2]
    b640:	e7cf      	b.n	b5e2 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
    b642:	8047      	strh	r7, [r0, #2]
    b644:	e7d6      	b.n	b5f4 <sys_heap_init+0x9a>
    b646:	52e5      	strh	r5, [r4, r3]
    b648:	e7d9      	b.n	b5fe <sys_heap_init+0xa4>
    b64a:	2000      	movs	r0, #0
    b64c:	f8ac 0002 	strh.w	r0, [ip, #2]
    b650:	e7df      	b.n	b612 <sys_heap_init+0xb8>
    b652:	52e2      	strh	r2, [r4, r3]
    b654:	e7e2      	b.n	b61c <sys_heap_init+0xc2>

0000b656 <extract_decimal>:
{
    b656:	4684      	mov	ip, r0
	const char *sp = *str;
    b658:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    b65a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    b65c:	e006      	b.n	b66c <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    b65e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b662:	3201      	adds	r2, #1
    b664:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    b668:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b66c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b66e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    b672:	2909      	cmp	r1, #9
    b674:	d9f3      	bls.n	b65e <extract_decimal+0x8>
	*str = sp;
    b676:	f8cc 2000 	str.w	r2, [ip]
}
    b67a:	4770      	bx	lr

0000b67c <extract_width>:
{
    b67c:	b530      	push	{r4, r5, lr}
    b67e:	b083      	sub	sp, #12
    b680:	4604      	mov	r4, r0
    b682:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    b684:	7803      	ldrb	r3, [r0, #0]
    b686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b68a:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    b68c:	460d      	mov	r5, r1
    b68e:	780b      	ldrb	r3, [r1, #0]
    b690:	2b2a      	cmp	r3, #42	; 0x2a
    b692:	d018      	beq.n	b6c6 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    b694:	a801      	add	r0, sp, #4
    b696:	f7ff ffde 	bl	b656 <extract_decimal>
	if (sp != wp) {
    b69a:	9b01      	ldr	r3, [sp, #4]
    b69c:	429d      	cmp	r5, r3
    b69e:	d00f      	beq.n	b6c0 <extract_width+0x44>
		conv->width_present = true;
    b6a0:	7823      	ldrb	r3, [r4, #0]
    b6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6a6:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    b6a8:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    b6aa:	b2db      	uxtb	r3, r3
    b6ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    b6b0:	2800      	cmp	r0, #0
    b6b2:	db10      	blt.n	b6d6 <extract_width+0x5a>
    b6b4:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    b6b6:	4313      	orrs	r3, r2
    b6b8:	7822      	ldrb	r2, [r4, #0]
    b6ba:	f363 0241 	bfi	r2, r3, #1, #1
    b6be:	7022      	strb	r2, [r4, #0]
	return sp;
    b6c0:	9801      	ldr	r0, [sp, #4]
}
    b6c2:	b003      	add	sp, #12
    b6c4:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    b6c6:	7843      	ldrb	r3, [r0, #1]
    b6c8:	f043 0301 	orr.w	r3, r3, #1
    b6cc:	7043      	strb	r3, [r0, #1]
		return ++sp;
    b6ce:	4608      	mov	r0, r1
    b6d0:	3001      	adds	r0, #1
    b6d2:	9001      	str	r0, [sp, #4]
    b6d4:	e7f5      	b.n	b6c2 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    b6d6:	2201      	movs	r2, #1
    b6d8:	e7ed      	b.n	b6b6 <extract_width+0x3a>

0000b6da <extract_prec>:
{
    b6da:	b510      	push	{r4, lr}
    b6dc:	b082      	sub	sp, #8
    b6de:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    b6e0:	780b      	ldrb	r3, [r1, #0]
    b6e2:	2b2e      	cmp	r3, #46	; 0x2e
    b6e4:	bf14      	ite	ne
    b6e6:	2300      	movne	r3, #0
    b6e8:	2301      	moveq	r3, #1
    b6ea:	7842      	ldrb	r2, [r0, #1]
    b6ec:	f363 0241 	bfi	r2, r3, #1, #1
    b6f0:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    b6f2:	b1c3      	cbz	r3, b726 <extract_prec+0x4c>
    b6f4:	4604      	mov	r4, r0
	++sp;
    b6f6:	9b01      	ldr	r3, [sp, #4]
    b6f8:	1c5a      	adds	r2, r3, #1
    b6fa:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    b6fc:	785b      	ldrb	r3, [r3, #1]
    b6fe:	2b2a      	cmp	r3, #42	; 0x2a
    b700:	d013      	beq.n	b72a <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    b702:	a801      	add	r0, sp, #4
    b704:	f7ff ffa7 	bl	b656 <extract_decimal>
	conv->prec_value = prec;
    b708:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    b70a:	7823      	ldrb	r3, [r4, #0]
    b70c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    b710:	2800      	cmp	r0, #0
    b712:	db12      	blt.n	b73a <extract_prec+0x60>
    b714:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    b716:	4313      	orrs	r3, r2
    b718:	7822      	ldrb	r2, [r4, #0]
    b71a:	f363 0241 	bfi	r2, r3, #1, #1
    b71e:	7022      	strb	r2, [r4, #0]
	return sp;
    b720:	9801      	ldr	r0, [sp, #4]
}
    b722:	b002      	add	sp, #8
    b724:	bd10      	pop	{r4, pc}
		return sp;
    b726:	4608      	mov	r0, r1
    b728:	e7fb      	b.n	b722 <extract_prec+0x48>
		conv->prec_star = true;
    b72a:	7843      	ldrb	r3, [r0, #1]
    b72c:	f043 0304 	orr.w	r3, r3, #4
    b730:	7043      	strb	r3, [r0, #1]
		return ++sp;
    b732:	4610      	mov	r0, r2
    b734:	3001      	adds	r0, #1
    b736:	9001      	str	r0, [sp, #4]
    b738:	e7f3      	b.n	b722 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    b73a:	2201      	movs	r2, #1
    b73c:	e7eb      	b.n	b716 <extract_prec+0x3c>

0000b73e <extract_length>:
{
    b73e:	4602      	mov	r2, r0
	switch (*sp) {
    b740:	780b      	ldrb	r3, [r1, #0]
    b742:	3b4c      	subs	r3, #76	; 0x4c
    b744:	2b2e      	cmp	r3, #46	; 0x2e
    b746:	d85b      	bhi.n	b800 <extract_length+0xc2>
    b748:	e8df f003 	tbb	[pc, r3]
    b74c:	5a5a5a4f 	.word	0x5a5a5a4f
    b750:	5a5a5a5a 	.word	0x5a5a5a5a
    b754:	5a5a5a5a 	.word	0x5a5a5a5a
    b758:	5a5a5a5a 	.word	0x5a5a5a5a
    b75c:	5a5a5a5a 	.word	0x5a5a5a5a
    b760:	5a5a5a5a 	.word	0x5a5a5a5a
    b764:	5a5a5a5a 	.word	0x5a5a5a5a
    b768:	5a3a5a18 	.word	0x5a3a5a18
    b76c:	5a5a5a29 	.word	0x5a5a5a29
    b770:	5a5a5a5a 	.word	0x5a5a5a5a
    b774:	5a5a5a48 	.word	0x5a5a5a48
    b778:	5a5a      	.short	0x5a5a
    b77a:	41          	.byte	0x41
    b77b:	00          	.byte	0x00
		if (*++sp == 'h') {
    b77c:	1c48      	adds	r0, r1, #1
    b77e:	784b      	ldrb	r3, [r1, #1]
    b780:	2b68      	cmp	r3, #104	; 0x68
    b782:	d005      	beq.n	b790 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    b784:	7853      	ldrb	r3, [r2, #1]
    b786:	2102      	movs	r1, #2
    b788:	f361 03c6 	bfi	r3, r1, #3, #4
    b78c:	7053      	strb	r3, [r2, #1]
    b78e:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    b790:	7853      	ldrb	r3, [r2, #1]
    b792:	2001      	movs	r0, #1
    b794:	f360 03c6 	bfi	r3, r0, #3, #4
    b798:	7053      	strb	r3, [r2, #1]
			++sp;
    b79a:	1c88      	adds	r0, r1, #2
    b79c:	4770      	bx	lr
		if (*++sp == 'l') {
    b79e:	1c48      	adds	r0, r1, #1
    b7a0:	784b      	ldrb	r3, [r1, #1]
    b7a2:	2b6c      	cmp	r3, #108	; 0x6c
    b7a4:	d005      	beq.n	b7b2 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    b7a6:	7853      	ldrb	r3, [r2, #1]
    b7a8:	2103      	movs	r1, #3
    b7aa:	f361 03c6 	bfi	r3, r1, #3, #4
    b7ae:	7053      	strb	r3, [r2, #1]
    b7b0:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    b7b2:	7853      	ldrb	r3, [r2, #1]
    b7b4:	2004      	movs	r0, #4
    b7b6:	f360 03c6 	bfi	r3, r0, #3, #4
    b7ba:	7053      	strb	r3, [r2, #1]
			++sp;
    b7bc:	1c88      	adds	r0, r1, #2
    b7be:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    b7c0:	7853      	ldrb	r3, [r2, #1]
    b7c2:	2005      	movs	r0, #5
    b7c4:	f360 03c6 	bfi	r3, r0, #3, #4
    b7c8:	7053      	strb	r3, [r2, #1]
		++sp;
    b7ca:	1c48      	adds	r0, r1, #1
		break;
    b7cc:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    b7ce:	7853      	ldrb	r3, [r2, #1]
    b7d0:	2006      	movs	r0, #6
    b7d2:	f360 03c6 	bfi	r3, r0, #3, #4
    b7d6:	7053      	strb	r3, [r2, #1]
		++sp;
    b7d8:	1c48      	adds	r0, r1, #1
		break;
    b7da:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    b7dc:	7853      	ldrb	r3, [r2, #1]
    b7de:	2007      	movs	r0, #7
    b7e0:	f360 03c6 	bfi	r3, r0, #3, #4
    b7e4:	7053      	strb	r3, [r2, #1]
		++sp;
    b7e6:	1c48      	adds	r0, r1, #1
		break;
    b7e8:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    b7ea:	7853      	ldrb	r3, [r2, #1]
    b7ec:	2008      	movs	r0, #8
    b7ee:	f360 03c6 	bfi	r3, r0, #3, #4
    b7f2:	7053      	strb	r3, [r2, #1]
		++sp;
    b7f4:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    b7f6:	7813      	ldrb	r3, [r2, #0]
    b7f8:	f043 0302 	orr.w	r3, r3, #2
    b7fc:	7013      	strb	r3, [r2, #0]
		break;
    b7fe:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    b800:	7853      	ldrb	r3, [r2, #1]
    b802:	f36f 03c6 	bfc	r3, #3, #4
    b806:	7053      	strb	r3, [r2, #1]
		break;
    b808:	4608      	mov	r0, r1
}
    b80a:	4770      	bx	lr

0000b80c <extract_specifier>:
{
    b80c:	b500      	push	{lr}
    b80e:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    b810:	4608      	mov	r0, r1
    b812:	f810 3b01 	ldrb.w	r3, [r0], #1
    b816:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    b818:	2b78      	cmp	r3, #120	; 0x78
    b81a:	d817      	bhi.n	b84c <extract_specifier+0x40>
    b81c:	2b6e      	cmp	r3, #110	; 0x6e
    b81e:	d229      	bcs.n	b874 <extract_specifier+0x68>
    b820:	2b69      	cmp	r3, #105	; 0x69
    b822:	d813      	bhi.n	b84c <extract_specifier+0x40>
    b824:	2b58      	cmp	r3, #88	; 0x58
    b826:	d317      	bcc.n	b858 <extract_specifier+0x4c>
    b828:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    b82c:	fa5f fc8c 	uxtb.w	ip, ip
    b830:	2101      	movs	r1, #1
    b832:	fa01 f10c 	lsl.w	r1, r1, ip
    b836:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    b83a:	d114      	bne.n	b866 <extract_specifier+0x5a>
    b83c:	f640 0c01 	movw	ip, #2049	; 0x801
    b840:	ea11 0f0c 	tst.w	r1, ip
    b844:	d155      	bne.n	b8f2 <extract_specifier+0xe6>
    b846:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    b84a:	d13a      	bne.n	b8c2 <extract_specifier+0xb6>
		conv->invalid = true;
    b84c:	7813      	ldrb	r3, [r2, #0]
    b84e:	f043 0301 	orr.w	r3, r3, #1
    b852:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    b854:	2100      	movs	r1, #0
		break;
    b856:	e042      	b.n	b8de <extract_specifier+0xd2>
	switch (conv->specifier) {
    b858:	2b41      	cmp	r3, #65	; 0x41
    b85a:	d004      	beq.n	b866 <extract_specifier+0x5a>
    b85c:	d3f6      	bcc.n	b84c <extract_specifier+0x40>
    b85e:	3b45      	subs	r3, #69	; 0x45
    b860:	b2db      	uxtb	r3, r3
    b862:	2b02      	cmp	r3, #2
    b864:	d8f2      	bhi.n	b84c <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    b866:	7893      	ldrb	r3, [r2, #2]
    b868:	2104      	movs	r1, #4
    b86a:	f361 0302 	bfi	r3, r1, #0, #3
    b86e:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    b870:	2101      	movs	r1, #1
			break;
    b872:	e034      	b.n	b8de <extract_specifier+0xd2>
	switch (conv->specifier) {
    b874:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    b878:	b2c9      	uxtb	r1, r1
    b87a:	f04f 0c01 	mov.w	ip, #1
    b87e:	fa0c fc01 	lsl.w	ip, ip, r1
    b882:	f240 4182 	movw	r1, #1154	; 0x482
    b886:	ea1c 0f01 	tst.w	ip, r1
    b88a:	bf14      	ite	ne
    b88c:	f04f 0e01 	movne.w	lr, #1
    b890:	f04f 0e00 	moveq.w	lr, #0
    b894:	d12d      	bne.n	b8f2 <extract_specifier+0xe6>
    b896:	f01c 0f24 	tst.w	ip, #36	; 0x24
    b89a:	bf14      	ite	ne
    b89c:	2101      	movne	r1, #1
    b89e:	2100      	moveq	r1, #0
    b8a0:	d139      	bne.n	b916 <extract_specifier+0x10a>
    b8a2:	f01c 0c01 	ands.w	ip, ip, #1
    b8a6:	d0d1      	beq.n	b84c <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    b8a8:	7893      	ldrb	r3, [r2, #2]
    b8aa:	f04f 0e03 	mov.w	lr, #3
    b8ae:	f36e 0302 	bfi	r3, lr, #0, #3
    b8b2:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    b8b4:	7853      	ldrb	r3, [r2, #1]
    b8b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b8ba:	2b40      	cmp	r3, #64	; 0x40
    b8bc:	d10f      	bne.n	b8de <extract_specifier+0xd2>
			unsupported = true;
    b8be:	4661      	mov	r1, ip
    b8c0:	e00d      	b.n	b8de <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    b8c2:	7891      	ldrb	r1, [r2, #2]
    b8c4:	f04f 0c01 	mov.w	ip, #1
    b8c8:	f36c 0102 	bfi	r1, ip, #0, #3
    b8cc:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    b8ce:	7851      	ldrb	r1, [r2, #1]
    b8d0:	f001 0178 	and.w	r1, r1, #120	; 0x78
    b8d4:	2940      	cmp	r1, #64	; 0x40
    b8d6:	d013      	beq.n	b900 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    b8d8:	2b63      	cmp	r3, #99	; 0x63
    b8da:	d018      	beq.n	b90e <extract_specifier+0x102>
	bool unsupported = false;
    b8dc:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    b8de:	7813      	ldrb	r3, [r2, #0]
    b8e0:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    b8e4:	ea41 010c 	orr.w	r1, r1, ip
    b8e8:	f361 0341 	bfi	r3, r1, #1, #1
    b8ec:	7013      	strb	r3, [r2, #0]
}
    b8ee:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    b8f2:	7891      	ldrb	r1, [r2, #2]
    b8f4:	f04f 0c02 	mov.w	ip, #2
    b8f8:	f36c 0102 	bfi	r1, ip, #0, #3
    b8fc:	7091      	strb	r1, [r2, #2]
    b8fe:	e7e6      	b.n	b8ce <extract_specifier+0xc2>
			conv->invalid = true;
    b900:	f892 c000 	ldrb.w	ip, [r2]
    b904:	f04c 0c01 	orr.w	ip, ip, #1
    b908:	f882 c000 	strb.w	ip, [r2]
    b90c:	e7e4      	b.n	b8d8 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b90e:	3900      	subs	r1, #0
    b910:	bf18      	it	ne
    b912:	2101      	movne	r1, #1
    b914:	e7e3      	b.n	b8de <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    b916:	7893      	ldrb	r3, [r2, #2]
    b918:	f04f 0c03 	mov.w	ip, #3
    b91c:	f36c 0302 	bfi	r3, ip, #0, #3
    b920:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    b922:	7853      	ldrb	r3, [r2, #1]
    b924:	f013 0f78 	tst.w	r3, #120	; 0x78
    b928:	d1d9      	bne.n	b8de <extract_specifier+0xd2>
	bool unsupported = false;
    b92a:	4671      	mov	r1, lr
    b92c:	e7d7      	b.n	b8de <extract_specifier+0xd2>

0000b92e <extract_conversion>:
{
    b92e:	b510      	push	{r4, lr}
    b930:	4604      	mov	r4, r0
    b932:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    b934:	2300      	movs	r3, #0
    b936:	6023      	str	r3, [r4, #0]
    b938:	6063      	str	r3, [r4, #4]
    b93a:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    b93c:	784b      	ldrb	r3, [r1, #1]
    b93e:	2b25      	cmp	r3, #37	; 0x25
    b940:	d014      	beq.n	b96c <extract_conversion+0x3e>
    b942:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    b944:	4620      	mov	r0, r4
    b946:	f7f5 fbb3 	bl	10b0 <extract_flags>
    b94a:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    b94c:	4620      	mov	r0, r4
    b94e:	f7ff fe95 	bl	b67c <extract_width>
    b952:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    b954:	4620      	mov	r0, r4
    b956:	f7ff fec0 	bl	b6da <extract_prec>
    b95a:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    b95c:	4620      	mov	r0, r4
    b95e:	f7ff feee 	bl	b73e <extract_length>
    b962:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    b964:	4620      	mov	r0, r4
    b966:	f7ff ff51 	bl	b80c <extract_specifier>
}
    b96a:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    b96c:	3002      	adds	r0, #2
    b96e:	70e3      	strb	r3, [r4, #3]
		return sp;
    b970:	e7fb      	b.n	b96a <extract_conversion+0x3c>

0000b972 <conversion_radix>:
	switch (specifier) {
    b972:	286f      	cmp	r0, #111	; 0x6f
    b974:	d00c      	beq.n	b990 <conversion_radix+0x1e>
    b976:	d905      	bls.n	b984 <conversion_radix+0x12>
    b978:	2870      	cmp	r0, #112	; 0x70
    b97a:	d00b      	beq.n	b994 <conversion_radix+0x22>
    b97c:	2878      	cmp	r0, #120	; 0x78
    b97e:	d10b      	bne.n	b998 <conversion_radix+0x26>
		return 16;
    b980:	2010      	movs	r0, #16
    b982:	4770      	bx	lr
	switch (specifier) {
    b984:	2858      	cmp	r0, #88	; 0x58
    b986:	d001      	beq.n	b98c <conversion_radix+0x1a>
    b988:	200a      	movs	r0, #10
    b98a:	4770      	bx	lr
		return 16;
    b98c:	2010      	movs	r0, #16
    b98e:	4770      	bx	lr
		return 8;
    b990:	2008      	movs	r0, #8
    b992:	4770      	bx	lr
		return 16;
    b994:	2010      	movs	r0, #16
    b996:	4770      	bx	lr
	switch (specifier) {
    b998:	200a      	movs	r0, #10
}
    b99a:	4770      	bx	lr

0000b99c <encode_uint>:
{
    b99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9a0:	4605      	mov	r5, r0
    b9a2:	460c      	mov	r4, r1
    b9a4:	4693      	mov	fp, r2
    b9a6:	4699      	mov	r9, r3
    b9a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    b9aa:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b9ac:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    b9b0:	f7ff ffdf 	bl	b972 <conversion_radix>
    b9b4:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    b9b6:	e015      	b.n	b9e4 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b9b8:	f1ba 0f19 	cmp.w	sl, #25
    b9bc:	d820      	bhi.n	ba00 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    b9be:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b9c0:	3237      	adds	r2, #55	; 0x37
    b9c2:	b2d2      	uxtb	r2, r2
    b9c4:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    b9c8:	4632      	mov	r2, r6
    b9ca:	4643      	mov	r3, r8
    b9cc:	4628      	mov	r0, r5
    b9ce:	4621      	mov	r1, r4
    b9d0:	f7f4 fbc0 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    b9d4:	42b5      	cmp	r5, r6
    b9d6:	f174 0400 	sbcs.w	r4, r4, #0
    b9da:	d315      	bcc.n	ba08 <encode_uint+0x6c>
    b9dc:	454f      	cmp	r7, r9
    b9de:	d913      	bls.n	ba08 <encode_uint+0x6c>
		value /= radix;
    b9e0:	4605      	mov	r5, r0
    b9e2:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    b9e4:	f04f 0800 	mov.w	r8, #0
    b9e8:	4632      	mov	r2, r6
    b9ea:	4643      	mov	r3, r8
    b9ec:	4628      	mov	r0, r5
    b9ee:	4621      	mov	r1, r4
    b9f0:	f7f4 fbb0 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b9f4:	2a09      	cmp	r2, #9
    b9f6:	d8df      	bhi.n	b9b8 <encode_uint+0x1c>
    b9f8:	b2d2      	uxtb	r2, r2
    b9fa:	3230      	adds	r2, #48	; 0x30
    b9fc:	b2d2      	uxtb	r2, r2
    b9fe:	e7e1      	b.n	b9c4 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    ba00:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ba02:	3257      	adds	r2, #87	; 0x57
    ba04:	b2d2      	uxtb	r2, r2
    ba06:	e7dd      	b.n	b9c4 <encode_uint+0x28>
	if (conv->flag_hash) {
    ba08:	f89b 3000 	ldrb.w	r3, [fp]
    ba0c:	f013 0f20 	tst.w	r3, #32
    ba10:	d003      	beq.n	ba1a <encode_uint+0x7e>
		if (radix == 8) {
    ba12:	2e08      	cmp	r6, #8
    ba14:	d004      	beq.n	ba20 <encode_uint+0x84>
		} else if (radix == 16) {
    ba16:	2e10      	cmp	r6, #16
    ba18:	d009      	beq.n	ba2e <encode_uint+0x92>
}
    ba1a:	4638      	mov	r0, r7
    ba1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    ba20:	f89b 3002 	ldrb.w	r3, [fp, #2]
    ba24:	f043 0308 	orr.w	r3, r3, #8
    ba28:	f88b 3002 	strb.w	r3, [fp, #2]
    ba2c:	e7f5      	b.n	ba1a <encode_uint+0x7e>
			conv->altform_0c = true;
    ba2e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    ba32:	f043 0310 	orr.w	r3, r3, #16
    ba36:	f88b 3002 	strb.w	r3, [fp, #2]
    ba3a:	e7ee      	b.n	ba1a <encode_uint+0x7e>

0000ba3c <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    ba3c:	7843      	ldrb	r3, [r0, #1]
    ba3e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    ba42:	2b07      	cmp	r3, #7
    ba44:	d818      	bhi.n	ba78 <store_count+0x3c>
    ba46:	e8df f003 	tbb	[pc, r3]
    ba4a:	0604      	.short	0x0604
    ba4c:	100c0a08 	.word	0x100c0a08
    ba50:	1614      	.short	0x1614
		*(int *)dp = count;
    ba52:	600a      	str	r2, [r1, #0]
		break;
    ba54:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    ba56:	700a      	strb	r2, [r1, #0]
		break;
    ba58:	4770      	bx	lr
		*(short *)dp = (short)count;
    ba5a:	800a      	strh	r2, [r1, #0]
		break;
    ba5c:	4770      	bx	lr
		*(long *)dp = (long)count;
    ba5e:	600a      	str	r2, [r1, #0]
		break;
    ba60:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    ba62:	17d3      	asrs	r3, r2, #31
    ba64:	600a      	str	r2, [r1, #0]
    ba66:	604b      	str	r3, [r1, #4]
		break;
    ba68:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    ba6a:	17d3      	asrs	r3, r2, #31
    ba6c:	600a      	str	r2, [r1, #0]
    ba6e:	604b      	str	r3, [r1, #4]
		break;
    ba70:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    ba72:	600a      	str	r2, [r1, #0]
		break;
    ba74:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ba76:	600a      	str	r2, [r1, #0]
}
    ba78:	4770      	bx	lr

0000ba7a <outs>:
{
    ba7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba7e:	4607      	mov	r7, r0
    ba80:	460e      	mov	r6, r1
    ba82:	4614      	mov	r4, r2
    ba84:	4698      	mov	r8, r3
	size_t count = 0;
    ba86:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ba88:	e006      	b.n	ba98 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    ba8a:	4631      	mov	r1, r6
    ba8c:	f814 0b01 	ldrb.w	r0, [r4], #1
    ba90:	47b8      	blx	r7
		if (rc < 0) {
    ba92:	2800      	cmp	r0, #0
    ba94:	db09      	blt.n	baaa <outs+0x30>
		++count;
    ba96:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ba98:	4544      	cmp	r4, r8
    ba9a:	d3f6      	bcc.n	ba8a <outs+0x10>
    ba9c:	f1b8 0f00 	cmp.w	r8, #0
    baa0:	d102      	bne.n	baa8 <outs+0x2e>
    baa2:	7823      	ldrb	r3, [r4, #0]
    baa4:	2b00      	cmp	r3, #0
    baa6:	d1f0      	bne.n	ba8a <outs+0x10>
	return (int)count;
    baa8:	4628      	mov	r0, r5
}
    baaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000baae <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    baae:	68c3      	ldr	r3, [r0, #12]
    bab0:	6802      	ldr	r2, [r0, #0]
    bab2:	4293      	cmp	r3, r2
    bab4:	d805      	bhi.n	bac2 <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
    bab6:	b14b      	cbz	r3, bacc <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
    bab8:	6a03      	ldr	r3, [r0, #32]
    baba:	1a9b      	subs	r3, r3, r2
    babc:	600b      	str	r3, [r1, #0]

	return true;
    babe:	2001      	movs	r0, #1
}
    bac0:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    bac2:	1a9b      	subs	r3, r3, r2
    bac4:	3b01      	subs	r3, #1
    bac6:	600b      	str	r3, [r1, #0]
		return false;
    bac8:	2000      	movs	r0, #0
    baca:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    bacc:	6a03      	ldr	r3, [r0, #32]
    bace:	1a9b      	subs	r3, r3, r2
    bad0:	3b01      	subs	r3, #1
    bad2:	600b      	str	r3, [r1, #0]
		return false;
    bad4:	2000      	movs	r0, #0
    bad6:	4770      	bx	lr

0000bad8 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    bad8:	b510      	push	{r4, lr}
    bada:	b082      	sub	sp, #8
    badc:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
    bade:	a901      	add	r1, sp, #4
    bae0:	f7ff ffe5 	bl	baae <free_space>
    bae4:	b120      	cbz	r0, baf0 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
    bae6:	68e3      	ldr	r3, [r4, #12]
    bae8:	9a01      	ldr	r2, [sp, #4]
    baea:	4413      	add	r3, r2
    baec:	3b01      	subs	r3, #1
    baee:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    baf0:	6a20      	ldr	r0, [r4, #32]
    baf2:	9b01      	ldr	r3, [sp, #4]
    baf4:	1ac0      	subs	r0, r0, r3
}
    baf6:	3801      	subs	r0, #1
    baf8:	b002      	add	sp, #8
    bafa:	bd10      	pop	{r4, pc}

0000bafc <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    bafc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    bafe:	6903      	ldr	r3, [r0, #16]
    bb00:	f013 0f04 	tst.w	r3, #4
    bb04:	d100      	bne.n	bb08 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
    bb06:	bd38      	pop	{r3, r4, r5, pc}
    bb08:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    bb0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    bb0c:	f7ff ffe4 	bl	bad8 <get_usage>
    bb10:	4285      	cmp	r5, r0
    bb12:	d902      	bls.n	bb1a <max_utilization_update+0x1e>
    bb14:	6a60      	ldr	r0, [r4, #36]	; 0x24
    bb16:	6260      	str	r0, [r4, #36]	; 0x24
    bb18:	e7f5      	b.n	bb06 <max_utilization_update+0xa>
    bb1a:	4620      	mov	r0, r4
    bb1c:	f7ff ffdc 	bl	bad8 <get_usage>
    bb20:	e7f9      	b.n	bb16 <max_utilization_update+0x1a>

0000bb22 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    bb22:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    bb24:	2300      	movs	r3, #0
    bb26:	f36f 0300 	bfc	r3, #0, #1
    bb2a:	f043 0302 	orr.w	r3, r3, #2
    bb2e:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    bb32:	69c2      	ldr	r2, [r0, #28]
    bb34:	6804      	ldr	r4, [r0, #0]
    bb36:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    bb3a:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    bb3c:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bb3e:	6902      	ldr	r2, [r0, #16]
    bb40:	f012 0201 	ands.w	r2, r2, #1
    bb44:	d104      	bne.n	bb50 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    bb46:	6a04      	ldr	r4, [r0, #32]
    bb48:	42a3      	cmp	r3, r4
    bb4a:	d304      	bcc.n	bb56 <add_skip_item+0x34>
    bb4c:	1b1b      	subs	r3, r3, r4
    bb4e:	e002      	b.n	bb56 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    bb50:	6a04      	ldr	r4, [r0, #32]
    bb52:	3c01      	subs	r4, #1
    bb54:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    bb56:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    bb58:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    bb5a:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bb5c:	b922      	cbnz	r2, bb68 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
    bb5e:	6a03      	ldr	r3, [r0, #32]
    bb60:	4299      	cmp	r1, r3
    bb62:	d304      	bcc.n	bb6e <add_skip_item+0x4c>
    bb64:	1ac9      	subs	r1, r1, r3
    bb66:	e002      	b.n	bb6e <add_skip_item+0x4c>
		return i & (buffer->size - 1);
    bb68:	6a03      	ldr	r3, [r0, #32]
    bb6a:	3b01      	subs	r3, #1
    bb6c:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    bb6e:	6041      	str	r1, [r0, #4]
}
    bb70:	bc10      	pop	{r4}
    bb72:	4770      	bx	lr

0000bb74 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb78:	b083      	sub	sp, #12
    bb7a:	4604      	mov	r4, r0
    bb7c:	9101      	str	r1, [sp, #4]
    bb7e:	4615      	mov	r5, r2
    bb80:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    bb82:	2300      	movs	r3, #0
    bb84:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    bb86:	f8d0 801c 	ldr.w	r8, [r0, #28]
    bb8a:	f8d0 900c 	ldr.w	r9, [r0, #12]
    bb8e:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    bb92:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    bb96:	f003 0303 	and.w	r3, r3, #3
    bb9a:	2b02      	cmp	r3, #2
    bb9c:	d012      	beq.n	bbc4 <drop_item_locked+0x50>
	return 0;
    bb9e:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    bba2:	69a3      	ldr	r3, [r4, #24]
    bba4:	4650      	mov	r0, sl
    bba6:	4798      	blx	r3
    bba8:	4607      	mov	r7, r0
	if (skip_wlen) {
    bbaa:	f1bb 0f00 	cmp.w	fp, #0
    bbae:	d152      	bne.n	bc56 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
    bbb0:	2d00      	cmp	r5, #0
    bbb2:	d05d      	beq.n	bc70 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
    bbb4:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    bbb8:	f013 0f02 	tst.w	r3, #2
    bbbc:	d10a      	bne.n	bbd4 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
    bbbe:	2301      	movs	r3, #1
    bbc0:	7033      	strb	r3, [r6, #0]
    bbc2:	e049      	b.n	bc58 <drop_item_locked+0xe4>
		return item->skip.len;
    bbc4:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    bbc8:	ea5f 0b93 	movs.w	fp, r3, lsr #2
    bbcc:	d0e9      	beq.n	bba2 <drop_item_locked+0x2e>
		return item->skip.len;
    bbce:	465f      	mov	r7, fp
		allow_drop = true;
    bbd0:	2501      	movs	r5, #1
    bbd2:	e041      	b.n	bc58 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
    bbd4:	9901      	ldr	r1, [sp, #4]
    bbd6:	3101      	adds	r1, #1
    bbd8:	4620      	mov	r0, r4
    bbda:	f7ff ffa2 	bl	bb22 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    bbde:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    bbe0:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bbe2:	6922      	ldr	r2, [r4, #16]
    bbe4:	f012 0201 	ands.w	r2, r2, #1
    bbe8:	d104      	bne.n	bbf4 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
    bbea:	6a21      	ldr	r1, [r4, #32]
    bbec:	428b      	cmp	r3, r1
    bbee:	d304      	bcc.n	bbfa <drop_item_locked+0x86>
    bbf0:	1a5b      	subs	r3, r3, r1
    bbf2:	e002      	b.n	bbfa <drop_item_locked+0x86>
		return i & (buffer->size - 1);
    bbf4:	6a21      	ldr	r1, [r4, #32]
    bbf6:	3901      	subs	r1, #1
    bbf8:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    bbfa:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    bbfc:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    bbfe:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bc00:	b922      	cbnz	r2, bc0c <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
    bc02:	6a21      	ldr	r1, [r4, #32]
    bc04:	428b      	cmp	r3, r1
    bc06:	d304      	bcc.n	bc12 <drop_item_locked+0x9e>
    bc08:	1a5b      	subs	r3, r3, r1
    bc0a:	e002      	b.n	bc12 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
    bc0c:	6a21      	ldr	r1, [r4, #32]
    bc0e:	3901      	subs	r1, #1
    bc10:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    bc12:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    bc14:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    bc16:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bc18:	b922      	cbnz	r2, bc24 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
    bc1a:	6a22      	ldr	r2, [r4, #32]
    bc1c:	4293      	cmp	r3, r2
    bc1e:	d304      	bcc.n	bc2a <drop_item_locked+0xb6>
    bc20:	1a9b      	subs	r3, r3, r2
    bc22:	e002      	b.n	bc2a <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
    bc24:	6a22      	ldr	r2, [r4, #32]
    bc26:	3a01      	subs	r2, #1
    bc28:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    bc2a:	69e1      	ldr	r1, [r4, #28]
    bc2c:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    bc30:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    bc34:	f002 0203 	and.w	r2, r2, #3
    bc38:	2a02      	cmp	r2, #2
    bc3a:	d006      	beq.n	bc4a <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
    bc3c:	69a3      	ldr	r3, [r4, #24]
    bc3e:	4650      	mov	r0, sl
    bc40:	4798      	blx	r3
    bc42:	4407      	add	r7, r0
				*user_packet = true;
    bc44:	2301      	movs	r3, #1
    bc46:	7033      	strb	r3, [r6, #0]
    bc48:	e006      	b.n	bc58 <drop_item_locked+0xe4>
		return item->skip.len;
    bc4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
    bc4e:	089b      	lsrs	r3, r3, #2
    bc50:	d0f4      	beq.n	bc3c <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
    bc52:	441f      	add	r7, r3
    bc54:	e000      	b.n	bc58 <drop_item_locked+0xe4>
		allow_drop = true;
    bc56:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
    bc58:	b195      	cbz	r5, bc80 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    bc5a:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    bc5c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bc5e:	6922      	ldr	r2, [r4, #16]
    bc60:	f012 0f01 	tst.w	r2, #1
    bc64:	d107      	bne.n	bc76 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
    bc66:	6a22      	ldr	r2, [r4, #32]
    bc68:	4293      	cmp	r3, r2
    bc6a:	d307      	bcc.n	bc7c <drop_item_locked+0x108>
    bc6c:	1a9b      	subs	r3, r3, r2
    bc6e:	e005      	b.n	bc7c <drop_item_locked+0x108>
		item = NULL;
    bc70:	f04f 0a00 	mov.w	sl, #0
    bc74:	e7f0      	b.n	bc58 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
    bc76:	6a22      	ldr	r2, [r4, #32]
    bc78:	3a01      	subs	r2, #1
    bc7a:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    bc7c:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
    bc7e:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
    bc80:	4650      	mov	r0, sl
    bc82:	b003      	add	sp, #12
    bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc88 <mpsc_pbuf_init>:
{
    bc88:	b538      	push	{r3, r4, r5, lr}
    bc8a:	4604      	mov	r4, r0
    bc8c:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    bc8e:	221c      	movs	r2, #28
    bc90:	2100      	movs	r1, #0
    bc92:	f000 ff47 	bl	cb24 <memset>
	buffer->get_wlen = cfg->get_wlen;
    bc96:	68eb      	ldr	r3, [r5, #12]
    bc98:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    bc9a:	68ab      	ldr	r3, [r5, #8]
    bc9c:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    bc9e:	682b      	ldr	r3, [r5, #0]
    bca0:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    bca2:	686b      	ldr	r3, [r5, #4]
    bca4:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    bca6:	2200      	movs	r2, #0
    bca8:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    bcaa:	692a      	ldr	r2, [r5, #16]
    bcac:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    bcae:	b12b      	cbz	r3, bcbc <mpsc_pbuf_init+0x34>
    bcb0:	1e59      	subs	r1, r3, #1
    bcb2:	420b      	tst	r3, r1
    bcb4:	d102      	bne.n	bcbc <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    bcb6:	f042 0201 	orr.w	r2, r2, #1
    bcba:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    bcbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    bcc0:	2201      	movs	r2, #1
    bcc2:	2100      	movs	r1, #0
    bcc4:	f002 ffe4 	bl	ec90 <z_impl_k_sem_init>
}
    bcc8:	bd38      	pop	{r3, r4, r5, pc}

0000bcca <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    bcca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcce:	b085      	sub	sp, #20
    bcd0:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    bcd2:	6a03      	ldr	r3, [r0, #32]
    bcd4:	3b01      	subs	r3, #1
    bcd6:	428b      	cmp	r3, r1
    bcd8:	d37f      	bcc.n	bdda <mpsc_pbuf_alloc+0x110>
    bcda:	4605      	mov	r5, r0
    bcdc:	460f      	mov	r7, r1
    bcde:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
    bce0:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
    bce4:	46c3      	mov	fp, r8
    bce6:	e019      	b.n	bd1c <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
    bce8:	6a2a      	ldr	r2, [r5, #32]
    bcea:	3a01      	subs	r2, #1
    bcec:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    bcee:	602b      	str	r3, [r5, #0]
		cont = false;
    bcf0:	2400      	movs	r4, #0
    bcf2:	f386 8811 	msr	BASEPRI, r6
    bcf6:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    bcfa:	b16c      	cbz	r4, bd18 <mpsc_pbuf_alloc+0x4e>
    bcfc:	f1b8 0f00 	cmp.w	r8, #0
    bd00:	d00a      	beq.n	bd18 <mpsc_pbuf_alloc+0x4e>
    bd02:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bd06:	b13b      	cbz	r3, bd18 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    bd08:	696b      	ldr	r3, [r5, #20]
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d062      	beq.n	bdd4 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
    bd0e:	4641      	mov	r1, r8
    bd10:	4628      	mov	r0, r5
    bd12:	4798      	blx	r3
			}
			dropped_item = NULL;
    bd14:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
    bd18:	2c00      	cmp	r4, #0
    bd1a:	d060      	beq.n	bdde <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
    bd1c:	f04f 0320 	mov.w	r3, #32
    bd20:	f3ef 8611 	mrs	r6, BASEPRI
    bd24:	f383 8812 	msr	BASEPRI_MAX, r3
    bd28:	f3bf 8f6f 	isb	sy
    bd2c:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
    bd2e:	a903      	add	r1, sp, #12
    bd30:	4628      	mov	r0, r5
    bd32:	f7ff febc 	bl	baae <free_space>
    bd36:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
    bd38:	9903      	ldr	r1, [sp, #12]
    bd3a:	42b9      	cmp	r1, r7
    bd3c:	d319      	bcc.n	bd72 <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    bd3e:	69eb      	ldr	r3, [r5, #28]
    bd40:	682a      	ldr	r2, [r5, #0]
			item =
    bd42:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    bd46:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    bd4a:	f36f 0100 	bfc	r1, #0, #1
    bd4e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    bd52:	b2c9      	uxtb	r1, r1
    bd54:	f36f 0141 	bfc	r1, #1, #1
    bd58:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    bd5c:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
    bd5e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bd60:	692a      	ldr	r2, [r5, #16]
    bd62:	f012 0f01 	tst.w	r2, #1
    bd66:	d1bf      	bne.n	bce8 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
    bd68:	6a2a      	ldr	r2, [r5, #32]
    bd6a:	4293      	cmp	r3, r2
    bd6c:	d3bf      	bcc.n	bcee <mpsc_pbuf_alloc+0x24>
    bd6e:	1a9b      	subs	r3, r3, r2
    bd70:	e7bd      	b.n	bcee <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
    bd72:	b9a0      	cbnz	r0, bd9e <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    bd74:	ea5a 0309 	orrs.w	r3, sl, r9
    bd78:	d003      	beq.n	bd82 <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
    bd7a:	f002 ff2d 	bl	ebd8 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    bd7e:	4604      	mov	r4, r0
    bd80:	b188      	cbz	r0, bda6 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    bd82:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    bd84:	f10d 030b 	add.w	r3, sp, #11
    bd88:	f3c2 0240 	ubfx	r2, r2, #1, #1
    bd8c:	9903      	ldr	r1, [sp, #12]
    bd8e:	4628      	mov	r0, r5
    bd90:	f7ff fef0 	bl	bb74 <drop_item_locked>
			cont = dropped_item != NULL;
    bd94:	4680      	mov	r8, r0
    bd96:	1e04      	subs	r4, r0, #0
    bd98:	bf18      	it	ne
    bd9a:	2401      	movne	r4, #1
    bd9c:	e7a9      	b.n	bcf2 <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
    bd9e:	4628      	mov	r0, r5
    bda0:	f7ff febf 	bl	bb22 <add_skip_item>
			cont = true;
    bda4:	e7a5      	b.n	bcf2 <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
    bda6:	9b01      	ldr	r3, [sp, #4]
    bda8:	f383 8811 	msr	BASEPRI, r3
    bdac:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    bdb0:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
    bdb4:	464a      	mov	r2, r9
    bdb6:	4653      	mov	r3, sl
    bdb8:	f7fd fdf4 	bl	99a4 <z_impl_k_sem_take>
	__asm__ volatile(
    bdbc:	f04f 0320 	mov.w	r3, #32
    bdc0:	f3ef 8611 	mrs	r6, BASEPRI
    bdc4:	f383 8812 	msr	BASEPRI_MAX, r3
    bdc8:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    bdcc:	2800      	cmp	r0, #0
    bdce:	d190      	bne.n	bcf2 <mpsc_pbuf_alloc+0x28>
				cont = true;
    bdd0:	2401      	movs	r4, #1
    bdd2:	e78e      	b.n	bcf2 <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
    bdd4:	f04f 0800 	mov.w	r8, #0
    bdd8:	e79e      	b.n	bd18 <mpsc_pbuf_alloc+0x4e>
		return NULL;
    bdda:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    bdde:	4658      	mov	r0, fp
    bde0:	b005      	add	sp, #20
    bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bde6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    bde6:	b570      	push	{r4, r5, r6, lr}
    bde8:	4604      	mov	r4, r0
    bdea:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    bdec:	6983      	ldr	r3, [r0, #24]
    bdee:	4608      	mov	r0, r1
    bdf0:	4798      	blx	r3
    bdf2:	f04f 0320 	mov.w	r3, #32
    bdf6:	f3ef 8611 	mrs	r6, BASEPRI
    bdfa:	f383 8812 	msr	BASEPRI_MAX, r3
    bdfe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    be02:	782b      	ldrb	r3, [r5, #0]
    be04:	f043 0301 	orr.w	r3, r3, #1
    be08:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    be0a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    be0c:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    be0e:	6923      	ldr	r3, [r4, #16]
    be10:	f013 0f01 	tst.w	r3, #1
    be14:	d104      	bne.n	be20 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    be16:	6a23      	ldr	r3, [r4, #32]
    be18:	4298      	cmp	r0, r3
    be1a:	d304      	bcc.n	be26 <mpsc_pbuf_commit+0x40>
    be1c:	1ac0      	subs	r0, r0, r3
    be1e:	e002      	b.n	be26 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    be20:	6a23      	ldr	r3, [r4, #32]
    be22:	3b01      	subs	r3, #1
    be24:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    be26:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    be28:	4620      	mov	r0, r4
    be2a:	f7ff fe67 	bl	bafc <max_utilization_update>
	__asm__ volatile(
    be2e:	f386 8811 	msr	BASEPRI, r6
    be32:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    be36:	bd70      	pop	{r4, r5, r6, pc}

0000be38 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be3a:	4604      	mov	r4, r0
    be3c:	e039      	b.n	beb2 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    be3e:	1a9b      	subs	r3, r3, r2
		return false;
    be40:	e045      	b.n	bece <mpsc_pbuf_claim+0x96>
		return item->skip.len;
    be42:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    be46:	0880      	lsrs	r0, r0, #2
    be48:	d157      	bne.n	befa <mpsc_pbuf_claim+0xc2>
    be4a:	e04d      	b.n	bee8 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
    be4c:	6a21      	ldr	r1, [r4, #32]
    be4e:	3901      	subs	r1, #1
    be50:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    be52:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    be54:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    be56:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    be58:	b922      	cbnz	r2, be64 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
    be5a:	6a22      	ldr	r2, [r4, #32]
    be5c:	4293      	cmp	r3, r2
    be5e:	d304      	bcc.n	be6a <mpsc_pbuf_claim+0x32>
    be60:	1a9b      	subs	r3, r3, r2
    be62:	e002      	b.n	be6a <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
    be64:	6a22      	ldr	r2, [r4, #32]
    be66:	3a01      	subs	r2, #1
    be68:	4013      	ands	r3, r2
				buffer->rd_idx =
    be6a:	60e3      	str	r3, [r4, #12]
				cont = true;
    be6c:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    be6e:	e01b      	b.n	bea8 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
    be70:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
    be74:	f043 0302 	orr.w	r3, r3, #2
    be78:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    be7c:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    be7e:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    be80:	4630      	mov	r0, r6
    be82:	4798      	blx	r3
	uint32_t i = idx + val;
    be84:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    be86:	6923      	ldr	r3, [r4, #16]
    be88:	f013 0f01 	tst.w	r3, #1
    be8c:	d104      	bne.n	be98 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    be8e:	6a23      	ldr	r3, [r4, #32]
    be90:	4298      	cmp	r0, r3
    be92:	d304      	bcc.n	be9e <mpsc_pbuf_claim+0x66>
    be94:	1ac0      	subs	r0, r0, r3
    be96:	e002      	b.n	be9e <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
    be98:	6a23      	ldr	r3, [r4, #32]
    be9a:	3b01      	subs	r3, #1
    be9c:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    be9e:	60a0      	str	r0, [r4, #8]
		cont = false;
    bea0:	2300      	movs	r3, #0
    bea2:	e001      	b.n	bea8 <mpsc_pbuf_claim+0x70>
    bea4:	2300      	movs	r3, #0
			item = NULL;
    bea6:	461e      	mov	r6, r3
    bea8:	f385 8811 	msr	BASEPRI, r5
    beac:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    beb0:	b38b      	cbz	r3, bf16 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
    beb2:	f04f 0320 	mov.w	r3, #32
    beb6:	f3ef 8511 	mrs	r5, BASEPRI
    beba:	f383 8812 	msr	BASEPRI_MAX, r3
    bebe:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    bec2:	68a2      	ldr	r2, [r4, #8]
    bec4:	6863      	ldr	r3, [r4, #4]
    bec6:	429a      	cmp	r2, r3
    bec8:	d9b9      	bls.n	be3e <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
    beca:	6a23      	ldr	r3, [r4, #32]
    becc:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
    bece:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
    bed0:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    bed4:	2b00      	cmp	r3, #0
    bed6:	d0e5      	beq.n	bea4 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
    bed8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
    bedc:	f013 0303 	ands.w	r3, r3, #3
    bee0:	d016      	beq.n	bf10 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
    bee2:	2b02      	cmp	r3, #2
    bee4:	d0ad      	beq.n	be42 <mpsc_pbuf_claim+0xa>
	return 0;
    bee6:	2000      	movs	r0, #0
	return item->hdr.valid;
    bee8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
    beec:	f013 0f01 	tst.w	r3, #1
    bef0:	d1be      	bne.n	be70 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
    bef2:	b910      	cbnz	r0, befa <mpsc_pbuf_claim+0xc2>
    bef4:	69a3      	ldr	r3, [r4, #24]
    bef6:	4630      	mov	r0, r6
    bef8:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    befa:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
    befc:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    befe:	6922      	ldr	r2, [r4, #16]
    bf00:	f012 0201 	ands.w	r2, r2, #1
    bf04:	d1a2      	bne.n	be4c <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
    bf06:	6a21      	ldr	r1, [r4, #32]
    bf08:	428b      	cmp	r3, r1
    bf0a:	d3a2      	bcc.n	be52 <mpsc_pbuf_claim+0x1a>
    bf0c:	1a5b      	subs	r3, r3, r1
    bf0e:	e7a0      	b.n	be52 <mpsc_pbuf_claim+0x1a>
		cont = false;
    bf10:	2300      	movs	r3, #0
			item = NULL;
    bf12:	461e      	mov	r6, r3
    bf14:	e7c8      	b.n	bea8 <mpsc_pbuf_claim+0x70>

	return item;
}
    bf16:	4630      	mov	r0, r6
    bf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bf1a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    bf1a:	b538      	push	{r3, r4, r5, lr}
    bf1c:	4604      	mov	r4, r0
    bf1e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    bf20:	6983      	ldr	r3, [r0, #24]
    bf22:	4608      	mov	r0, r1
    bf24:	4798      	blx	r3
    bf26:	f04f 0220 	mov.w	r2, #32
    bf2a:	f3ef 8311 	mrs	r3, BASEPRI
    bf2e:	f382 8812 	msr	BASEPRI_MAX, r2
    bf32:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    bf36:	782a      	ldrb	r2, [r5, #0]
    bf38:	f36f 0200 	bfc	r2, #0, #1
    bf3c:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    bf3e:	6922      	ldr	r2, [r4, #16]
    bf40:	f012 0f02 	tst.w	r2, #2
    bf44:	d00a      	beq.n	bf5c <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    bf46:	69e2      	ldr	r2, [r4, #28]
    bf48:	68e1      	ldr	r1, [r4, #12]
    bf4a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    bf4e:	42aa      	cmp	r2, r5
    bf50:	d004      	beq.n	bf5c <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
    bf52:	682a      	ldr	r2, [r5, #0]
    bf54:	f360 029f 	bfi	r2, r0, #2, #30
    bf58:	602a      	str	r2, [r5, #0]
    bf5a:	e012      	b.n	bf82 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
    bf5c:	782a      	ldrb	r2, [r5, #0]
    bf5e:	f36f 0241 	bfc	r2, #1, #1
    bf62:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    bf64:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
    bf66:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bf68:	6921      	ldr	r1, [r4, #16]
    bf6a:	f011 0f01 	tst.w	r1, #1
    bf6e:	d104      	bne.n	bf7a <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    bf70:	6a21      	ldr	r1, [r4, #32]
    bf72:	428a      	cmp	r2, r1
    bf74:	d304      	bcc.n	bf80 <mpsc_pbuf_free+0x66>
    bf76:	1a52      	subs	r2, r2, r1
    bf78:	e002      	b.n	bf80 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
    bf7a:	6a21      	ldr	r1, [r4, #32]
    bf7c:	3901      	subs	r1, #1
    bf7e:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    bf80:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
    bf82:	f383 8811 	msr	BASEPRI, r3
    bf86:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    bf8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
    bf8e:	f7fd fce5 	bl	995c <z_impl_k_sem_give>
}
    bf92:	bd38      	pop	{r3, r4, r5, pc}

0000bf94 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    bf94:	6883      	ldr	r3, [r0, #8]
    bf96:	6842      	ldr	r2, [r0, #4]
    bf98:	4293      	cmp	r3, r2
    bf9a:	d905      	bls.n	bfa8 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
    bf9c:	6a00      	ldr	r0, [r0, #32]
    bf9e:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    bfa0:	3800      	subs	r0, #0
    bfa2:	bf18      	it	ne
    bfa4:	2001      	movne	r0, #1
    bfa6:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    bfa8:	1ad0      	subs	r0, r2, r3
		return false;
    bfaa:	e7f9      	b.n	bfa0 <mpsc_pbuf_is_pending+0xc>

0000bfac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_INCLUDE_NET_CORE_IMAGE, 1);

GEN_ABS_SYM_END
    bfac:	4770      	bx	lr

0000bfae <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    bfae:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    bfb0:	f7f5 fbc0 	bl	1734 <nrfx_coredep_delay_us>
}
    bfb4:	bd08      	pop	{r3, pc}

0000bfb6 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    bfb6:	2301      	movs	r3, #1
    bfb8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    bfbc:	f3bf 8f4f 	dsb	sy
        __WFE();
    bfc0:	bf20      	wfe
    while (true)
    bfc2:	e7fd      	b.n	bfc0 <nrf_regulators_system_off+0xa>

0000bfc4 <pm_state_exit_post_ops>:
    bfc4:	2300      	movs	r3, #0
    bfc6:	f383 8811 	msr	BASEPRI, r3
    bfca:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    bfce:	4770      	bx	lr

0000bfd0 <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
    bfd0:	b510      	push	{r4, lr}
    bfd2:	4684      	mov	ip, r0
    bfd4:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    bfd6:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    bfd8:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
    bfda:	6854      	ldr	r4, [r2, #4]
    bfdc:	b124      	cbz	r4, bfe8 <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    bfde:	460a      	mov	r2, r1
    bfe0:	f8dc 1004 	ldr.w	r1, [ip, #4]
    bfe4:	47a0      	blx	r4
}
    bfe6:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    bfe8:	f06f 0057 	mvn.w	r0, #87	; 0x57
    bfec:	e7fb      	b.n	bfe6 <mbox_register_callback+0x16>

0000bfee <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
    bfee:	b510      	push	{r4, lr}
    bff0:	4603      	mov	r3, r0
    bff2:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    bff4:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    bff6:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
    bff8:	690c      	ldr	r4, [r1, #16]
    bffa:	b114      	cbz	r4, c002 <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    bffc:	6859      	ldr	r1, [r3, #4]
    bffe:	47a0      	blx	r4
}
    c000:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    c002:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c006:	e7fb      	b.n	c000 <z_impl_mbox_set_enabled+0x12>

0000c008 <rtc_cb>:
{
    c008:	b510      	push	{r4, lr}
    c00a:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
    c00c:	2100      	movs	r1, #0
    c00e:	4620      	mov	r0, r4
    c010:	f7f5 fc30 	bl	1874 <ppi_rtc_to_ipc>
		free_resources(channels);
    c014:	4620      	mov	r0, r4
    c016:	f7f5 fc1b 	bl	1850 <free_resources>
}
    c01a:	bd10      	pop	{r4, pc}

0000c01c <mbox_callback>:
{
    c01c:	b510      	push	{r4, lr}
    c01e:	b082      	sub	sp, #8
    c020:	4614      	mov	r4, r2
	channel->dev = dev;
    c022:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
    c024:	9101      	str	r1, [sp, #4]
    c026:	2100      	movs	r1, #0
    c028:	4668      	mov	r0, sp
    c02a:	f7ff ffe0 	bl	bfee <z_impl_mbox_set_enabled>
	remote_callback(user_data);
    c02e:	4620      	mov	r0, r4
    c030:	f7f5 fc5a 	bl	18e8 <remote_callback>
}
    c034:	b002      	add	sp, #8
    c036:	bd10      	pop	{r4, pc}

0000c038 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    c038:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    c03a:	f013 0f04 	tst.w	r3, #4
    c03e:	d001      	beq.n	c044 <log_msg_generic_get_wlen+0xc>
	return 0;
    c040:	2000      	movs	r0, #0
}
    c042:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
    c044:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c046:	f3c3 2049 	ubfx	r0, r3, #9, #10
    c04a:	f3c3 43cb 	ubfx	r3, r3, #19, #12
    c04e:	4418      	add	r0, r3
    c050:	3017      	adds	r0, #23
    c052:	f020 0007 	bic.w	r0, r0, #7
    c056:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    c058:	4770      	bx	lr

0000c05a <dummy_timestamp>:
}
    c05a:	2000      	movs	r0, #0
    c05c:	4770      	bx	lr

0000c05e <msg_filter_check>:
}
    c05e:	2001      	movs	r0, #1
    c060:	4770      	bx	lr

0000c062 <default_get_timestamp>:
{
    c062:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c064:	f001 fc21 	bl	d8aa <sys_clock_cycle_get_32>
}
    c068:	bd08      	pop	{r3, pc}

0000c06a <k_msleep>:
{
    c06a:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    c06c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    c070:	17c1      	asrs	r1, r0, #31
    c072:	03c9      	lsls	r1, r1, #15
    c074:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    c078:	03c0      	lsls	r0, r0, #15
    c07a:	f240 33e7 	movw	r3, #999	; 0x3e7
    c07e:	18c0      	adds	r0, r0, r3
    c080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c084:	f04f 0300 	mov.w	r3, #0
    c088:	f141 0100 	adc.w	r1, r1, #0
    c08c:	f7f4 f862 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    c090:	f7fe f950 	bl	a334 <z_impl_k_sleep>
}
    c094:	bd08      	pop	{r3, pc}

0000c096 <z_log_vprintk>:
{
    c096:	b500      	push	{lr}
    c098:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c09a:	9103      	str	r1, [sp, #12]
    c09c:	9002      	str	r0, [sp, #8]
    c09e:	2000      	movs	r0, #0
    c0a0:	9001      	str	r0, [sp, #4]
    c0a2:	9000      	str	r0, [sp, #0]
    c0a4:	4603      	mov	r3, r0
    c0a6:	4602      	mov	r2, r0
    c0a8:	4601      	mov	r1, r0
    c0aa:	f000 f881 	bl	c1b0 <z_impl_z_log_msg_runtime_vcreate>
}
    c0ae:	b005      	add	sp, #20
    c0b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0b4 <notify_drop>:
{
    c0b4:	b508      	push	{r3, lr}
	z_log_dropped(true);
    c0b6:	2001      	movs	r0, #1
    c0b8:	f7f5 fde2 	bl	1c80 <z_log_dropped>
}
    c0bc:	bd08      	pop	{r3, pc}

0000c0be <z_log_get_tag>:
}
    c0be:	2000      	movs	r0, #0
    c0c0:	4770      	bx	lr

0000c0c2 <z_cbprintf_cpy>:
{
    c0c2:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    c0c4:	6853      	ldr	r3, [r2, #4]
    c0c6:	6896      	ldr	r6, [r2, #8]
    c0c8:	1b9b      	subs	r3, r3, r6
    c0ca:	428b      	cmp	r3, r1
    c0cc:	d30c      	bcc.n	c0e8 <z_cbprintf_cpy+0x26>
    c0ce:	460c      	mov	r4, r1
    c0d0:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
    c0d2:	6813      	ldr	r3, [r2, #0]
    c0d4:	460a      	mov	r2, r1
    c0d6:	4601      	mov	r1, r0
    c0d8:	1998      	adds	r0, r3, r6
    c0da:	f000 fcf4 	bl	cac6 <memcpy>
	desc->off += len;
    c0de:	68ab      	ldr	r3, [r5, #8]
    c0e0:	4423      	add	r3, r4
    c0e2:	60ab      	str	r3, [r5, #8]
	return len;
    c0e4:	4620      	mov	r0, r4
}
    c0e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    c0e8:	f06f 001b 	mvn.w	r0, #27
    c0ec:	e7fb      	b.n	c0e6 <z_cbprintf_cpy+0x24>

0000c0ee <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
    c0ee:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    c0f0:	b190      	cbz	r0, c118 <z_log_msg_finalize+0x2a>
    c0f2:	460e      	mov	r6, r1
    c0f4:	4614      	mov	r4, r2
    c0f6:	4619      	mov	r1, r3
    c0f8:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
    c0fa:	b13b      	cbz	r3, c10c <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
    c0fc:	3010      	adds	r0, #16
    c0fe:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
    c102:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    c106:	4418      	add	r0, r3
    c108:	f000 fcdd 	bl	cac6 <memcpy>
	}

	msg->hdr.desc = desc;
    c10c:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    c10e:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
    c110:	4628      	mov	r0, r5
    c112:	f7f5 fed7 	bl	1ec4 <z_log_msg_commit>
}
    c116:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    c118:	f7f5 fdb2 	bl	1c80 <z_log_dropped>
		return;
    c11c:	e7fb      	b.n	c116 <z_log_msg_finalize+0x28>

0000c11e <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    c11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c122:	b08a      	sub	sp, #40	; 0x28
    c124:	4605      	mov	r5, r0
    c126:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    c128:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    c12a:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
    c12e:	b364      	cbz	r4, c18a <z_impl_z_log_msg_static_create+0x6c>
    c130:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
    c132:	2200      	movs	r2, #0
    c134:	9207      	str	r2, [sp, #28]
    c136:	9208      	str	r2, [sp, #32]
    c138:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    c13a:	2304      	movs	r3, #4
    c13c:	9302      	str	r3, [sp, #8]
    c13e:	ab05      	add	r3, sp, #20
    c140:	9301      	str	r3, [sp, #4]
    c142:	2302      	movs	r3, #2
    c144:	9300      	str	r3, [sp, #0]
    c146:	ab07      	add	r3, sp, #28
    c148:	4621      	mov	r1, r4
    c14a:	4640      	mov	r0, r8
    c14c:	f7f4 fd50 	bl	bf0 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    c150:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c154:	f3c0 0909 	ubfx	r9, r0, #0, #10
    c158:	f3c7 41cb 	ubfx	r1, r7, #19, #12
    c15c:	4449      	add	r1, r9
    c15e:	3117      	adds	r1, #23
    c160:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    c164:	0888      	lsrs	r0, r1, #2
    c166:	f7f5 fdf9 	bl	1d5c <z_log_msg_alloc>
		if (msg) {
    c16a:	4682      	mov	sl, r0
    c16c:	b1b8      	cbz	r0, c19e <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
    c16e:	2304      	movs	r3, #4
    c170:	9302      	str	r3, [sp, #8]
    c172:	ab05      	add	r3, sp, #20
    c174:	9301      	str	r3, [sp, #4]
    c176:	2302      	movs	r3, #2
    c178:	9300      	str	r3, [sp, #0]
    c17a:	464b      	mov	r3, r9
    c17c:	f100 0210 	add.w	r2, r0, #16
    c180:	4621      	mov	r1, r4
    c182:	4640      	mov	r0, r8
    c184:	f7f5 ff0a 	bl	1f9c <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    c188:	e009      	b.n	c19e <z_impl_z_log_msg_static_create+0x80>
    c18a:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    c18e:	440c      	add	r4, r1
    c190:	3417      	adds	r4, #23
    c192:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    c196:	08a0      	lsrs	r0, r4, #2
    c198:	f7f5 fde0 	bl	1d5c <z_log_msg_alloc>
    c19c:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    c19e:	4633      	mov	r3, r6
    c1a0:	463a      	mov	r2, r7
    c1a2:	4629      	mov	r1, r5
    c1a4:	4650      	mov	r0, sl
    c1a6:	f7ff ffa2 	bl	c0ee <z_log_msg_finalize>
}
    c1aa:	b00a      	add	sp, #40	; 0x28
    c1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c1b0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1b4:	b085      	sub	sp, #20
    c1b6:	4681      	mov	r9, r0
    c1b8:	460d      	mov	r5, r1
    c1ba:	4690      	mov	r8, r2
    c1bc:	461e      	mov	r6, r3
    c1be:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    c1c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
    c1c4:	b3b7      	cbz	r7, c234 <z_impl_z_log_msg_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
    c1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1c8:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    c1ca:	9300      	str	r3, [sp, #0]
    c1cc:	463b      	mov	r3, r7
    c1ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c1d0:	2110      	movs	r1, #16
    c1d2:	2000      	movs	r0, #0
    c1d4:	f7f4 fad8 	bl	788 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    c1d8:	4682      	mov	sl, r0
    c1da:	eb00 030b 	add.w	r3, r0, fp
    c1de:	3317      	adds	r3, #23
    c1e0:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    c1e4:	2400      	movs	r4, #0
    c1e6:	f36f 0400 	bfc	r4, #0, #1
    c1ea:	f36f 0441 	bfc	r4, #1, #1
    c1ee:	f36f 0482 	bfc	r4, #2, #1
    c1f2:	f369 04c5 	bfi	r4, r9, #3, #3
    c1f6:	f368 1488 	bfi	r4, r8, #6, #3
    c1fa:	f360 2452 	bfi	r4, r0, #9, #10
    c1fe:	f36b 44de 	bfi	r4, fp, #19, #12
    c202:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    c206:	0898      	lsrs	r0, r3, #2
    c208:	f7f5 fda8 	bl	1d5c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    c20c:	4680      	mov	r8, r0
    c20e:	b140      	cbz	r0, c222 <z_impl_z_log_msg_runtime_vcreate+0x72>
    c210:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    c212:	b137      	cbz	r7, c222 <z_impl_z_log_msg_runtime_vcreate+0x72>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    c214:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c216:	9300      	str	r3, [sp, #0]
    c218:	463b      	mov	r3, r7
    c21a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c21c:	4651      	mov	r1, sl
    c21e:	f7f4 fab3 	bl	788 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    c222:	4633      	mov	r3, r6
    c224:	4622      	mov	r2, r4
    c226:	4629      	mov	r1, r5
    c228:	4640      	mov	r0, r8
    c22a:	f7ff ff60 	bl	c0ee <z_log_msg_finalize>
	}
}
    c22e:	b005      	add	sp, #20
    c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    c234:	2000      	movs	r0, #0
    c236:	e7cf      	b.n	c1d8 <z_impl_z_log_msg_runtime_vcreate+0x28>

0000c238 <buffer_write>:
{
    c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c23a:	4607      	mov	r7, r0
    c23c:	460d      	mov	r5, r1
    c23e:	4614      	mov	r4, r2
    c240:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c242:	4632      	mov	r2, r6
    c244:	4621      	mov	r1, r4
    c246:	4628      	mov	r0, r5
    c248:	47b8      	blx	r7
		buf += processed;
    c24a:	4405      	add	r5, r0
	} while (len != 0);
    c24c:	1a24      	subs	r4, r4, r0
    c24e:	d1f8      	bne.n	c242 <buffer_write+0xa>
}
    c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c252 <cbvprintf>:
{
    c252:	b510      	push	{r4, lr}
    c254:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c256:	2400      	movs	r4, #0
    c258:	9400      	str	r4, [sp, #0]
    c25a:	f7f4 ff8b 	bl	1174 <z_cbvprintf_impl>
}
    c25e:	b002      	add	sp, #8
    c260:	bd10      	pop	{r4, pc}

0000c262 <color_prefix>:
{
    c262:	b508      	push	{r3, lr}
    c264:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c266:	2201      	movs	r2, #1
    c268:	f7f5 ff0a 	bl	2080 <color_print>
}
    c26c:	bd08      	pop	{r3, pc}

0000c26e <color_postfix>:
{
    c26e:	b508      	push	{r3, lr}
    c270:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c272:	2200      	movs	r2, #0
    c274:	f7f5 ff04 	bl	2080 <color_print>
}
    c278:	bd08      	pop	{r3, pc}

0000c27a <postfix_print>:
{
    c27a:	b538      	push	{r3, r4, r5, lr}
    c27c:	4605      	mov	r5, r0
    c27e:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c280:	f001 0101 	and.w	r1, r1, #1
    c284:	f7ff fff3 	bl	c26e <color_postfix>
	newline_print(output, flags);
    c288:	4621      	mov	r1, r4
    c28a:	4628      	mov	r0, r5
    c28c:	f7f5 ff7e 	bl	218c <newline_print>
}
    c290:	bd38      	pop	{r3, r4, r5, pc}

0000c292 <log_msg_hexdump>:
{
    c292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c296:	b083      	sub	sp, #12
    c298:	4680      	mov	r8, r0
    c29a:	460e      	mov	r6, r1
    c29c:	4615      	mov	r5, r2
    c29e:	461f      	mov	r7, r3
    c2a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c2a4:	462c      	mov	r4, r5
    c2a6:	2d10      	cmp	r5, #16
    c2a8:	bf28      	it	cs
    c2aa:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    c2ac:	f8cd 9000 	str.w	r9, [sp]
    c2b0:	463b      	mov	r3, r7
    c2b2:	4622      	mov	r2, r4
    c2b4:	4631      	mov	r1, r6
    c2b6:	4640      	mov	r0, r8
    c2b8:	f7f5 ff7c 	bl	21b4 <hexdump_line_print>
		data += length;
    c2bc:	4426      	add	r6, r4
	} while (len);
    c2be:	1b2d      	subs	r5, r5, r4
    c2c0:	d1f0      	bne.n	c2a4 <log_msg_hexdump+0x12>
}
    c2c2:	b003      	add	sp, #12
    c2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c2c8 <log_output_flush>:
{
    c2c8:	b510      	push	{r4, lr}
    c2ca:	4604      	mov	r4, r0
		     output->control_block->offset,
    c2cc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c2ce:	6853      	ldr	r3, [r2, #4]
    c2d0:	6812      	ldr	r2, [r2, #0]
    c2d2:	6881      	ldr	r1, [r0, #8]
    c2d4:	6800      	ldr	r0, [r0, #0]
    c2d6:	f7ff ffaf 	bl	c238 <buffer_write>
	output->control_block->offset = 0;
    c2da:	6863      	ldr	r3, [r4, #4]
    c2dc:	2200      	movs	r2, #0
    c2de:	601a      	str	r2, [r3, #0]
}
    c2e0:	bd10      	pop	{r4, pc}

0000c2e2 <out_func>:
{
    c2e2:	b538      	push	{r3, r4, r5, lr}
    c2e4:	4605      	mov	r5, r0
    c2e6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c2e8:	684b      	ldr	r3, [r1, #4]
    c2ea:	681a      	ldr	r2, [r3, #0]
    c2ec:	68cb      	ldr	r3, [r1, #12]
    c2ee:	429a      	cmp	r2, r3
    c2f0:	d00b      	beq.n	c30a <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
    c2f2:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c2f4:	e8d3 2fef 	ldaex	r2, [r3]
    c2f8:	1c51      	adds	r1, r2, #1
    c2fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c2fe:	2800      	cmp	r0, #0
    c300:	d1f8      	bne.n	c2f4 <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
    c302:	68a3      	ldr	r3, [r4, #8]
    c304:	549d      	strb	r5, [r3, r2]
}
    c306:	2000      	movs	r0, #0
    c308:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    c30a:	4608      	mov	r0, r1
    c30c:	f7ff ffdc 	bl	c2c8 <log_output_flush>
    c310:	e7ef      	b.n	c2f2 <out_func+0x10>

0000c312 <cr_out_func>:
{
    c312:	b538      	push	{r3, r4, r5, lr}
    c314:	4604      	mov	r4, r0
    c316:	460d      	mov	r5, r1
	out_func(c, ctx);
    c318:	f7ff ffe3 	bl	c2e2 <out_func>
	if (c == '\n') {
    c31c:	2c0a      	cmp	r4, #10
    c31e:	d001      	beq.n	c324 <cr_out_func+0x12>
}
    c320:	2000      	movs	r0, #0
    c322:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    c324:	4629      	mov	r1, r5
    c326:	200d      	movs	r0, #13
    c328:	f7ff ffdb 	bl	c2e2 <out_func>
    c32c:	e7f8      	b.n	c320 <cr_out_func+0xe>

0000c32e <k_msleep>:
{
    c32e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    c330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    c334:	17c1      	asrs	r1, r0, #31
    c336:	03c9      	lsls	r1, r1, #15
    c338:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    c33c:	03c0      	lsls	r0, r0, #15
    c33e:	f240 33e7 	movw	r3, #999	; 0x3e7
    c342:	18c0      	adds	r0, r0, r3
    c344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c348:	f04f 0300 	mov.w	r3, #0
    c34c:	f141 0100 	adc.w	r1, r1, #0
    c350:	f7f3 ff00 	bl	154 <__aeabi_uldivmod>
    c354:	f7fd ffee 	bl	a334 <z_impl_k_sleep>
}
    c358:	bd08      	pop	{r3, pc}

0000c35a <z_impl_mbox_send>:
{
    c35a:	b510      	push	{r4, lr}
    c35c:	4603      	mov	r3, r0
    c35e:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
    c360:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    c362:	6881      	ldr	r1, [r0, #8]
	if (api->send == NULL) {
    c364:	680c      	ldr	r4, [r1, #0]
    c366:	b114      	cbz	r4, c36e <z_impl_mbox_send+0x14>
	return api->send(channel->dev, channel->id, msg);
    c368:	6859      	ldr	r1, [r3, #4]
    c36a:	47a0      	blx	r4
}
    c36c:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    c36e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c372:	e7fb      	b.n	c36c <z_impl_mbox_send+0x12>

0000c374 <mbox_register_callback>:
{
    c374:	b510      	push	{r4, lr}
    c376:	4684      	mov	ip, r0
    c378:	4613      	mov	r3, r2
		(const struct mbox_driver_api *)channel->dev->api;
    c37a:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    c37c:	6882      	ldr	r2, [r0, #8]
	if (api->register_callback == NULL) {
    c37e:	6854      	ldr	r4, [r2, #4]
    c380:	b124      	cbz	r4, c38c <mbox_register_callback+0x18>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    c382:	460a      	mov	r2, r1
    c384:	f8dc 1004 	ldr.w	r1, [ip, #4]
    c388:	47a0      	blx	r4
}
    c38a:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    c38c:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c390:	e7fb      	b.n	c38a <mbox_register_callback+0x16>

0000c392 <z_impl_mbox_set_enabled>:
{
    c392:	b510      	push	{r4, lr}
    c394:	4603      	mov	r3, r0
    c396:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
    c398:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    c39a:	6881      	ldr	r1, [r0, #8]
	if (api->set_enabled == NULL) {
    c39c:	690c      	ldr	r4, [r1, #16]
    c39e:	b114      	cbz	r4, c3a6 <z_impl_mbox_set_enabled+0x14>
	return api->set_enabled(channel->dev, channel->id, enable);
    c3a0:	6859      	ldr	r1, [r3, #4]
    c3a2:	47a0      	blx	r4
}
    c3a4:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    c3a6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c3aa:	e7fb      	b.n	c3a4 <z_impl_mbox_set_enabled+0x12>

0000c3ac <shm_size>:
#define ROLE_HOST		VIRTIO_DEV_DRIVER
#define ROLE_REMOTE		VIRTIO_DEV_DEVICE

static inline size_t vq_ring_size(unsigned int num, unsigned int buf_size)
{
	return (buf_size * num);
    c3ac:	fb00 f101 	mul.w	r1, r0, r1
}

static inline size_t shm_size(unsigned int num, unsigned int buf_size)
{
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
    c3b0:	3102      	adds	r1, #2
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    c3b2:	1cc3      	adds	r3, r0, #3
    c3b4:	005b      	lsls	r3, r3, #1
    c3b6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
    c3ba:	3303      	adds	r3, #3
    c3bc:	f023 0303 	bic.w	r3, r3, #3
	size += sizeof(struct vring_used) +
    c3c0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    c3c4:	3306      	adds	r3, #6
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    c3c6:	005b      	lsls	r3, r3, #1
}
    c3c8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
    c3cc:	4770      	bx	lr

0000c3ce <virtio_notify_cb>:
{
    c3ce:	b508      	push	{r3, lr}
	if (conf->mbox_tx.dev) {
    c3d0:	68cb      	ldr	r3, [r1, #12]
    c3d2:	b123      	cbz	r3, c3de <virtio_notify_cb+0x10>
		mbox_send(&conf->mbox_tx, NULL);
    c3d4:	f101 000c 	add.w	r0, r1, #12
	return z_impl_mbox_send(channel, msg);
    c3d8:	2100      	movs	r1, #0
    c3da:	f7ff ffbe 	bl	c35a <z_impl_mbox_send>
}
    c3de:	bd08      	pop	{r3, pc}

0000c3e0 <get_tx_buffer_size>:
	struct backend_data_t *data = instance->data;
    c3e0:	6903      	ldr	r3, [r0, #16]
}
    c3e2:	f8d3 0378 	ldr.w	r0, [r3, #888]	; 0x378
    c3e6:	4770      	bx	lr

0000c3e8 <drop_tx_buffer>:
}
    c3e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c3ec:	4770      	bx	lr

0000c3ee <release_rx_buffer>:
	if (!rpmsg_ept) {
    c3ee:	b131      	cbz	r1, c3fe <release_rx_buffer+0x10>
{
    c3f0:	b508      	push	{r3, lr}
    c3f2:	4608      	mov	r0, r1
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
    c3f4:	4611      	mov	r1, r2
    c3f6:	f002 f904 	bl	e602 <rpmsg_release_rx_buffer>
	return 0;
    c3fa:	2000      	movs	r0, #0
}
    c3fc:	bd08      	pop	{r3, pc}
		return -ENOENT;
    c3fe:	f06f 0001 	mvn.w	r0, #1
}
    c402:	4770      	bx	lr

0000c404 <hold_rx_buffer>:
	if (!rpmsg_ept) {
    c404:	b131      	cbz	r1, c414 <hold_rx_buffer+0x10>
{
    c406:	b508      	push	{r3, lr}
    c408:	4608      	mov	r0, r1
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
    c40a:	4611      	mov	r1, r2
    c40c:	f002 f8ef 	bl	e5ee <rpmsg_hold_rx_buffer>
	return 0;
    c410:	2000      	movs	r0, #0
}
    c412:	bd08      	pop	{r3, pc}
		return -ENOENT;
    c414:	f06f 0001 	mvn.w	r0, #1
}
    c418:	4770      	bx	lr

0000c41a <send_nocopy>:
{
    c41a:	b510      	push	{r4, lr}
    c41c:	b082      	sub	sp, #8
    c41e:	460c      	mov	r4, r1
	struct backend_data_t *data = instance->data;
    c420:	6901      	ldr	r1, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
    c422:	f501 715d 	add.w	r1, r1, #884	; 0x374
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c426:	e8d1 1faf 	lda	r1, [r1]
    c42a:	2902      	cmp	r1, #2
    c42c:	d10a      	bne.n	c444 <send_nocopy+0x2a>
	if (len == 0) {
    c42e:	b163      	cbz	r3, c44a <send_nocopy+0x30>
	if (!rpmsg_ept) {
    c430:	b174      	cbz	r4, c450 <send_nocopy+0x36>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
    c432:	9300      	str	r3, [sp, #0]
    c434:	4613      	mov	r3, r2
    c436:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c438:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c43a:	4620      	mov	r0, r4
    c43c:	f7fc fb0a 	bl	8a54 <rpmsg_send_offchannel_nocopy>
}
    c440:	b002      	add	sp, #8
    c442:	bd10      	pop	{r4, pc}
		return -EBUSY;
    c444:	f06f 000f 	mvn.w	r0, #15
    c448:	e7fa      	b.n	c440 <send_nocopy+0x26>
		return -EBADMSG;
    c44a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    c44e:	e7f7      	b.n	c440 <send_nocopy+0x26>
		return -ENOENT;
    c450:	f06f 0001 	mvn.w	r0, #1
    c454:	e7f4      	b.n	c440 <send_nocopy+0x26>

0000c456 <get_tx_buffer>:
{
    c456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c45a:	4690      	mov	r8, r2
    c45c:	461e      	mov	r6, r3
    c45e:	9a06      	ldr	r2, [sp, #24]
    c460:	9b07      	ldr	r3, [sp, #28]
	struct backend_data_t *data = instance->data;
    c462:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
    c464:	b3a1      	cbz	r1, c4d0 <get_tx_buffer+0x7a>
    c466:	460f      	mov	r7, r1
	if (!r_data || !size) {
    c468:	f1b8 0f00 	cmp.w	r8, #0
    c46c:	d033      	beq.n	c4d6 <get_tx_buffer+0x80>
    c46e:	b3ae      	cbz	r6, c4dc <get_tx_buffer+0x86>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
    c470:	4614      	mov	r4, r2
    c472:	461d      	mov	r5, r3
    c474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c478:	bf08      	it	eq
    c47a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c47e:	d001      	beq.n	c484 <get_tx_buffer+0x2e>
    c480:	4313      	orrs	r3, r2
    c482:	d11e      	bne.n	c4c2 <get_tx_buffer+0x6c>
	if ((*size) && (*size > data->tx_buffer_size)) {
    c484:	6833      	ldr	r3, [r6, #0]
    c486:	b11b      	cbz	r3, c490 <get_tx_buffer+0x3a>
    c488:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
    c48c:	4293      	cmp	r3, r2
    c48e:	d81b      	bhi.n	c4c8 <get_tx_buffer+0x72>
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
    c490:	ea04 0205 	and.w	r2, r4, r5
    c494:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    c498:	bf14      	ite	ne
    c49a:	2200      	movne	r2, #0
    c49c:	2201      	moveq	r2, #1
    c49e:	4631      	mov	r1, r6
    c4a0:	4638      	mov	r0, r7
    c4a2:	f002 f8b8 	bl	e616 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
    c4a6:	4603      	mov	r3, r0
    c4a8:	b928      	cbnz	r0, c4b6 <get_tx_buffer+0x60>
    c4aa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    c4ae:	bf08      	it	eq
    c4b0:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    c4b4:	d0ec      	beq.n	c490 <get_tx_buffer+0x3a>
	if (!payload) {
    c4b6:	b1a3      	cbz	r3, c4e2 <get_tx_buffer+0x8c>
	(*r_data) = payload;
    c4b8:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    c4bc:	2000      	movs	r0, #0
}
    c4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
    c4c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c4c6:	e7fa      	b.n	c4be <get_tx_buffer+0x68>
		*size = data->tx_buffer_size;
    c4c8:	6032      	str	r2, [r6, #0]
		return -ENOMEM;
    c4ca:	f06f 000b 	mvn.w	r0, #11
    c4ce:	e7f6      	b.n	c4be <get_tx_buffer+0x68>
		return -ENOENT;
    c4d0:	f06f 0001 	mvn.w	r0, #1
    c4d4:	e7f3      	b.n	c4be <get_tx_buffer+0x68>
		return -EINVAL;
    c4d6:	f06f 0015 	mvn.w	r0, #21
    c4da:	e7f0      	b.n	c4be <get_tx_buffer+0x68>
    c4dc:	f06f 0015 	mvn.w	r0, #21
    c4e0:	e7ed      	b.n	c4be <get_tx_buffer+0x68>
		return -ENOBUFS;
    c4e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c4e6:	e7ea      	b.n	c4be <get_tx_buffer+0x68>

0000c4e8 <get_ept_slot_with_name>:
{
    c4e8:	b570      	push	{r4, r5, r6, lr}
    c4ea:	4605      	mov	r5, r0
    c4ec:	460e      	mov	r6, r1
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c4ee:	2400      	movs	r4, #0
    c4f0:	2c01      	cmp	r4, #1
    c4f2:	d80f      	bhi.n	c514 <get_ept_slot_with_name+0x2c>
		if (strcmp(name, rpmsg_ept->name) == 0) {
    c4f4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    c4f8:	011b      	lsls	r3, r3, #4
    c4fa:	3340      	adds	r3, #64	; 0x40
    c4fc:	18e9      	adds	r1, r5, r3
    c4fe:	4630      	mov	r0, r6
    c500:	f000 fac3 	bl	ca8a <strcmp>
    c504:	b108      	cbz	r0, c50a <get_ept_slot_with_name+0x22>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    c506:	3401      	adds	r4, #1
    c508:	e7f2      	b.n	c4f0 <get_ept_slot_with_name+0x8>
			return &rpmsg_inst->endpoint[i];
    c50a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c50e:	eb05 1004 	add.w	r0, r5, r4, lsl #4
    c512:	e000      	b.n	c516 <get_ept_slot_with_name+0x2e>
	return NULL;
    c514:	2000      	movs	r0, #0
}
    c516:	bd70      	pop	{r4, r5, r6, pc}

0000c518 <get_ept>:
{
    c518:	b538      	push	{r3, r4, r5, lr}
    c51a:	4605      	mov	r5, r0
    c51c:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    c51e:	4611      	mov	r1, r2
    c520:	f7ff ffe2 	bl	c4e8 <get_ept_slot_with_name>
	if (ept != NULL) {
    c524:	b110      	cbz	r0, c52c <get_ept+0x14>
		(*rpmsg_ept) = ept;
    c526:	6020      	str	r0, [r4, #0]
		return true;
    c528:	2001      	movs	r0, #1
}
    c52a:	bd38      	pop	{r3, r4, r5, pc}
	ept = get_available_ept_slot(rpmsg_inst);
    c52c:	4628      	mov	r0, r5
    c52e:	f7f6 f955 	bl	27dc <get_available_ept_slot>
	if (ept != NULL) {
    c532:	b110      	cbz	r0, c53a <get_ept+0x22>
		(*rpmsg_ept) = ept;
    c534:	6020      	str	r0, [r4, #0]
		return false;
    c536:	2000      	movs	r0, #0
    c538:	e7f7      	b.n	c52a <get_ept+0x12>
	(*rpmsg_ept) = NULL;
    c53a:	2000      	movs	r0, #0
    c53c:	6020      	str	r0, [r4, #0]
	return false;
    c53e:	e7f4      	b.n	c52a <get_ept+0x12>

0000c540 <rpmsg_service_unbind>:
{
    c540:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
    c542:	f002 f8a4 	bl	e68e <rpmsg_destroy_ept>
}
    c546:	bd08      	pop	{r3, pc}

0000c548 <register_ept_on_host>:
{
    c548:	b5f0      	push	{r4, r5, r6, r7, lr}
    c54a:	b083      	sub	sp, #12
    c54c:	4607      	mov	r7, r0
    c54e:	460d      	mov	r5, r1
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    c550:	f500 76ca 	add.w	r6, r0, #404	; 0x194
	return z_impl_k_mutex_lock(mutex, timeout);
    c554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c55c:	4630      	mov	r0, r6
    c55e:	f7fd f941 	bl	97e4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    c562:	682a      	ldr	r2, [r5, #0]
    c564:	a901      	add	r1, sp, #4
    c566:	4638      	mov	r0, r7
    c568:	f7ff ffd6 	bl	c518 <get_ept>
	if (rpmsg_ept == NULL) {
    c56c:	9c01      	ldr	r4, [sp, #4]
    c56e:	b1b4      	cbz	r4, c59e <register_ept_on_host+0x56>
	rpmsg_ept->cb = &cfg->cb;
    c570:	f105 0308 	add.w	r3, r5, #8
    c574:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c576:	696b      	ldr	r3, [r5, #20]
    c578:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->bound = false;
    c57a:	2300      	movs	r3, #0
    c57c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
    c580:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    c582:	b180      	cbz	r0, c5a6 <register_ept_on_host+0x5e>
	return z_impl_k_mutex_unlock(mutex);
    c584:	4630      	mov	r0, r6
    c586:	f7fd f9ab 	bl	98e0 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    c58a:	9901      	ldr	r1, [sp, #4]
    c58c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
    c58e:	682a      	ldr	r2, [r5, #0]
    c590:	4638      	mov	r0, r7
    c592:	f7f6 f92b 	bl	27ec <advertise_ept>
	return rpmsg_ept;
    c596:	9c01      	ldr	r4, [sp, #4]
}
    c598:	4620      	mov	r0, r4
    c59a:	b003      	add	sp, #12
    c59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c59e:	4630      	mov	r0, r6
    c5a0:	f7fd f99e 	bl	98e0 <z_impl_k_mutex_unlock>
		return NULL;
    c5a4:	e7f8      	b.n	c598 <register_ept_on_host+0x50>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c5a6:	2220      	movs	r2, #32
    c5a8:	6829      	ldr	r1, [r5, #0]
    c5aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
    c5ae:	f000 fa3f 	bl	ca30 <strncpy>
    c5b2:	4630      	mov	r0, r6
    c5b4:	f7fd f994 	bl	98e0 <z_impl_k_mutex_unlock>
    c5b8:	e7ed      	b.n	c596 <register_ept_on_host+0x4e>

0000c5ba <ns_bind_cb>:
{
    c5ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5bc:	b083      	sub	sp, #12
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    c5be:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
	if (name == NULL || name[0] == '\0') {
    c5c2:	b129      	cbz	r1, c5d0 <ns_bind_cb+0x16>
    c5c4:	4616      	mov	r6, r2
    c5c6:	f5a4 77c0 	sub.w	r7, r4, #384	; 0x180
    c5ca:	460d      	mov	r5, r1
    c5cc:	780b      	ldrb	r3, [r1, #0]
    c5ce:	b90b      	cbnz	r3, c5d4 <ns_bind_cb+0x1a>
}
    c5d0:	b003      	add	sp, #12
    c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    c5d4:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    c5d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c5de:	4620      	mov	r0, r4
    c5e0:	f7fd f900 	bl	97e4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
    c5e4:	462a      	mov	r2, r5
    c5e6:	a901      	add	r1, sp, #4
    c5e8:	4638      	mov	r0, r7
    c5ea:	f7ff ff95 	bl	c518 <get_ept>
	if (rpmsg_ept == NULL) {
    c5ee:	9b01      	ldr	r3, [sp, #4]
    c5f0:	b153      	cbz	r3, c608 <ns_bind_cb+0x4e>
	if (ept_cached) {
    c5f2:	b168      	cbz	r0, c610 <ns_bind_cb+0x56>
	return z_impl_k_mutex_unlock(mutex);
    c5f4:	4620      	mov	r0, r4
    c5f6:	f7fd f973 	bl	98e0 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
    c5fa:	4633      	mov	r3, r6
    c5fc:	462a      	mov	r2, r5
    c5fe:	9901      	ldr	r1, [sp, #4]
    c600:	4638      	mov	r0, r7
    c602:	f7f6 f8f3 	bl	27ec <advertise_ept>
    c606:	e7e3      	b.n	c5d0 <ns_bind_cb+0x16>
    c608:	4620      	mov	r0, r4
    c60a:	f7fd f969 	bl	98e0 <z_impl_k_mutex_unlock>
		return;
    c60e:	e7df      	b.n	c5d0 <ns_bind_cb+0x16>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
    c610:	2220      	movs	r2, #32
    c612:	4629      	mov	r1, r5
    c614:	f103 0040 	add.w	r0, r3, #64	; 0x40
    c618:	f000 fa0a 	bl	ca30 <strncpy>
		rpmsg_ept->dest = dest;
    c61c:	9b01      	ldr	r3, [sp, #4]
    c61e:	661e      	str	r6, [r3, #96]	; 0x60
    c620:	4620      	mov	r0, r4
    c622:	f7fd f95d 	bl	98e0 <z_impl_k_mutex_unlock>
    c626:	e7d3      	b.n	c5d0 <ns_bind_cb+0x16>

0000c628 <register_ept_on_remote>:
{
    c628:	b570      	push	{r4, r5, r6, lr}
    c62a:	4606      	mov	r6, r0
    c62c:	460d      	mov	r5, r1
	rpmsg_ept = get_available_ept_slot(rpmsg_inst);
    c62e:	f7f6 f8d5 	bl	27dc <get_available_ept_slot>
	if (rpmsg_ept == NULL) {
    c632:	4604      	mov	r4, r0
    c634:	b198      	cbz	r0, c65e <register_ept_on_remote+0x36>
	rpmsg_ept->cb = &cfg->cb;
    c636:	f105 0308 	add.w	r3, r5, #8
    c63a:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    c63c:	696b      	ldr	r3, [r5, #20]
    c63e:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    c640:	2300      	movs	r3, #0
    c642:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
    c646:	63e0      	str	r0, [r4, #60]	; 0x3c
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    c648:	2220      	movs	r2, #32
    c64a:	6829      	ldr	r1, [r5, #0]
    c64c:	3040      	adds	r0, #64	; 0x40
    c64e:	f000 f9ef 	bl	ca30 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    c652:	4622      	mov	r2, r4
    c654:	2101      	movs	r1, #1
    c656:	4630      	mov	r0, r6
    c658:	f7f6 fa1c 	bl	2a94 <ipc_rpmsg_register_ept>
	if (err != 0) {
    c65c:	b908      	cbnz	r0, c662 <register_ept_on_remote+0x3a>
}
    c65e:	4620      	mov	r0, r4
    c660:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    c662:	2400      	movs	r4, #0
    c664:	e7fb      	b.n	c65e <register_ept_on_remote+0x36>

0000c666 <register_ept>:
	struct backend_data_t *data = instance->data;
    c666:	6900      	ldr	r0, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
    c668:	f500 735d 	add.w	r3, r0, #884	; 0x374
    c66c:	e8d3 3faf 	lda	r3, [r3]
    c670:	2b02      	cmp	r3, #2
    c672:	d112      	bne.n	c69a <register_ept+0x34>
{
    c674:	b510      	push	{r4, lr}
    c676:	460c      	mov	r4, r1
    c678:	4611      	mov	r1, r2
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    c67a:	6813      	ldr	r3, [r2, #0]
    c67c:	b183      	cbz	r3, c6a0 <register_ept+0x3a>
    c67e:	781b      	ldrb	r3, [r3, #0]
    c680:	b18b      	cbz	r3, c6a6 <register_ept+0x40>
	rpmsg_ept = (data->role == ROLE_HOST) ?
    c682:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
			register_ept_on_host(rpmsg_inst, cfg) :
    c686:	b92b      	cbnz	r3, c694 <register_ept+0x2e>
    c688:	f7ff ff5e 	bl	c548 <register_ept_on_host>
	if (rpmsg_ept == NULL) {
    c68c:	b170      	cbz	r0, c6ac <register_ept+0x46>
	(*token) = rpmsg_ept;
    c68e:	6020      	str	r0, [r4, #0]
	return 0;
    c690:	2000      	movs	r0, #0
}
    c692:	bd10      	pop	{r4, pc}
			register_ept_on_remote(rpmsg_inst, cfg);
    c694:	f7ff ffc8 	bl	c628 <register_ept_on_remote>
    c698:	e7f8      	b.n	c68c <register_ept+0x26>
		return -EBUSY;
    c69a:	f06f 000f 	mvn.w	r0, #15
}
    c69e:	4770      	bx	lr
		return -EINVAL;
    c6a0:	f06f 0015 	mvn.w	r0, #21
    c6a4:	e7f5      	b.n	c692 <register_ept+0x2c>
    c6a6:	f06f 0015 	mvn.w	r0, #21
    c6aa:	e7f2      	b.n	c692 <register_ept+0x2c>
		return -EINVAL;
    c6ac:	f06f 0015 	mvn.w	r0, #21
    c6b0:	e7ef      	b.n	c692 <register_ept+0x2c>

0000c6b2 <rpmsg_send>:
{
    c6b2:	b500      	push	{lr}
    c6b4:	b083      	sub	sp, #12
    c6b6:	460b      	mov	r3, r1
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    c6b8:	2101      	movs	r1, #1
    c6ba:	9101      	str	r1, [sp, #4]
    c6bc:	9200      	str	r2, [sp, #0]
    c6be:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c6c0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    c6c2:	f7fc f9a5 	bl	8a10 <rpmsg_send_offchannel_raw>
}
    c6c6:	b003      	add	sp, #12
    c6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c6cc <ept_cb>:
{
    c6cc:	b510      	push	{r4, lr}
    c6ce:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
    c6d0:	b142      	cbz	r2, c6e4 <ept_cb+0x18>
    c6d2:	4608      	mov	r0, r1
    c6d4:	4611      	mov	r1, r2
	if (ept->cb->received) {
    c6d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    c6d8:	6854      	ldr	r4, [r2, #4]
    c6da:	b10c      	cbz	r4, c6e0 <ept_cb+0x14>
		ept->cb->received(data, len, ept->priv);
    c6dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c6de:	47a0      	blx	r4
}
    c6e0:	2000      	movs	r0, #0
    c6e2:	bd10      	pop	{r4, pc}
		if (!ept->bound) {
    c6e4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    c6e8:	2a00      	cmp	r2, #0
    c6ea:	d1f9      	bne.n	c6e0 <ept_cb+0x14>
			ept->bound = true;
    c6ec:	2201      	movs	r2, #1
    c6ee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
    c6f2:	4618      	mov	r0, r3
    c6f4:	f7f6 f8bc 	bl	2870 <bound_cb>
		return RPMSG_SUCCESS;
    c6f8:	e7f2      	b.n	c6e0 <ept_cb+0x14>

0000c6fa <vr_shm_configure>:
{
    c6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6fe:	4605      	mov	r5, r0
    c700:	460c      	mov	r4, r1
	num_desc = optimal_num_desc(conf->shm_size, conf->buffer_size);
    c702:	688a      	ldr	r2, [r1, #8]
    c704:	6a8b      	ldr	r3, [r1, #40]	; 0x28
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    c706:	3a04      	subs	r2, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    c708:	3326      	adds	r3, #38	; 0x26
    c70a:	005b      	lsls	r3, r3, #1

	num_desc = (unsigned int) (available / single_alloc);
    c70c:	fbb2 f7f3 	udiv	r7, r2, r3
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    c710:	4293      	cmp	r3, r2
    c712:	d833      	bhi.n	c77c <vr_shm_configure+0x82>
		return 0;
	}

	return 32 - __builtin_clz(op);
    c714:	fab7 f787 	clz	r7, r7
    c718:	f1c7 0720 	rsb	r7, r7, #32

	return (1 << (find_msb_set(num_desc) - 1));
    c71c:	3f01      	subs	r7, #1
    c71e:	2601      	movs	r6, #1
	if (num_desc == 0) {
    c720:	40be      	lsls	r6, r7
    c722:	d02d      	beq.n	c780 <vr_shm_configure+0x86>
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    c724:	6863      	ldr	r3, [r4, #4]
    c726:	f103 0804 	add.w	r8, r3, #4
    c72a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    c72e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    c730:	4630      	mov	r0, r6
    c732:	f7ff fe3b 	bl	c3ac <shm_size>
    c736:	3804      	subs	r0, #4
    c738:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    c73c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	return (buf_size * num);
    c73e:	40ba      	lsls	r2, r7
    c740:	eb08 0242 	add.w	r2, r8, r2, lsl #1
    c744:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
	size = num * sizeof(struct vring_desc);
    c748:	2310      	movs	r3, #16
    c74a:	40bb      	lsls	r3, r7
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    c74c:	1cf1      	adds	r1, r6, #3
    c74e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	size = (size + align - 1) & ~(align - 1);
    c752:	3303      	adds	r3, #3
    c754:	f023 0303 	bic.w	r3, r3, #3
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    c758:	2108      	movs	r1, #8
    c75a:	40b9      	lsls	r1, r7
	size += sizeof(struct vring_used) +
    c75c:	440b      	add	r3, r1
    c75e:	3306      	adds	r3, #6
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    c760:	441a      	add	r2, r3
    c762:	3203      	adds	r2, #3
    c764:	f022 0203 	bic.w	r2, r2, #3
    c768:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	vr->status_reg_addr = conf->shm_addr;
    c76c:	6863      	ldr	r3, [r4, #4]
    c76e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	vr->vring_size = num_desc;
    c772:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
	return 0;
    c776:	2000      	movs	r0, #0
}
    c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    c77c:	2700      	movs	r7, #0
    c77e:	e7cd      	b.n	c71c <vr_shm_configure+0x22>
		return -ENOMEM;
    c780:	f06f 000b 	mvn.w	r0, #11
    c784:	e7f8      	b.n	c778 <vr_shm_configure+0x7e>

0000c786 <mbox_callback>:
{
    c786:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
    c788:	f502 7124 	add.w	r1, r2, #656	; 0x290
    c78c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
    c790:	f002 fb02 	bl	ed98 <k_work_submit_to_queue>
}
    c794:	bd08      	pop	{r3, pc}

0000c796 <mbox_callback_process>:
{
    c796:	b508      	push	{r3, lr}
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
    c798:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
    c79c:	f5a0 7024 	sub.w	r0, r0, #656	; 0x290
    c7a0:	3b00      	subs	r3, #0
    c7a2:	bf18      	it	ne
    c7a4:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
    c7a6:	339e      	adds	r3, #158	; 0x9e
    c7a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c7ac:	6840      	ldr	r0, [r0, #4]
    c7ae:	f001 fe96 	bl	e4de <virtqueue_notification>
}
    c7b2:	bd08      	pop	{r3, pc}

0000c7b4 <backend_init>:
{
    c7b4:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
    c7b6:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
    c7b8:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
    c7ba:	681b      	ldr	r3, [r3, #0]
    c7bc:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
	k_mutex_init(&data->rpmsg_inst.mtx);
    c7c0:	f504 70ca 	add.w	r0, r4, #404	; 0x194
	return z_impl_k_mutex_init(mutex);
    c7c4:	f002 fa5d 	bl	ec82 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
    c7c8:	f504 745d 	add.w	r4, r4, #884	; 0x374
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c7cc:	2000      	movs	r0, #0
    c7ce:	e8d4 3fef 	ldaex	r3, [r4]
    c7d2:	e8c4 0fe2 	stlex	r2, r0, [r4]
    c7d6:	2a00      	cmp	r2, #0
    c7d8:	d1f9      	bne.n	c7ce <backend_init+0x1a>
}
    c7da:	bd10      	pop	{r4, pc}

0000c7dc <rpmsg_service_unbind>:
{
    c7dc:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
    c7de:	f001 ff56 	bl	e68e <rpmsg_destroy_ept>
}
    c7e2:	bd08      	pop	{r3, pc}

0000c7e4 <virtio_notify>:
{
    c7e4:	b508      	push	{r3, lr}
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
    c7e6:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
    c7e8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    c7ec:	b113      	cbz	r3, c7f4 <virtio_notify+0x10>
		vr->notify_cb(vq, vr->priv);
    c7ee:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
    c7f2:	4798      	blx	r3
}
    c7f4:	bd08      	pop	{r3, pc}

0000c7f6 <virtio_set_features>:
}
    c7f6:	4770      	bx	lr

0000c7f8 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
    c7f8:	6983      	ldr	r3, [r0, #24]
    c7fa:	b913      	cbnz	r3, c802 <virtio_set_status+0xa>
	sys_write8(status, vr->status_reg_addr);
    c7fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    c800:	7019      	strb	r1, [r3, #0]
}
    c802:	4770      	bx	lr

0000c804 <virtio_get_features>:
}
    c804:	2001      	movs	r0, #1
    c806:	4770      	bx	lr

0000c808 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
    c808:	6983      	ldr	r3, [r0, #24]
    c80a:	2b01      	cmp	r3, #1
    c80c:	d001      	beq.n	c812 <virtio_get_status+0xa>
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
    c80e:	2004      	movs	r0, #4
}
    c810:	4770      	bx	lr
		ret = sys_read8(vr->status_reg_addr);
    c812:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
    c816:	7818      	ldrb	r0, [r3, #0]
    c818:	b2c0      	uxtb	r0, r0
    c81a:	4770      	bx	lr

0000c81c <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
    c81c:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
    c81e:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
    c820:	3434      	adds	r4, #52	; 0x34
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    c822:	4620      	mov	r0, r4
    c824:	f002 fd39 	bl	f29a <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
    c828:	4605      	mov	r5, r0
    c82a:	b118      	cbz	r0, c834 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
    c82c:	4622      	mov	r2, r4
    c82e:	2100      	movs	r1, #0
    c830:	f000 f978 	bl	cb24 <memset>
	}

	return vqs;
}
    c834:	4628      	mov	r0, r5
    c836:	bd38      	pop	{r3, r4, r5, pc}

0000c838 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    c838:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    c83a:	f001 021f 	and.w	r2, r1, #31
    c83e:	2301      	movs	r3, #1
    c840:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c842:	0949      	lsrs	r1, r1, #5
    c844:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c848:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c84a:	e8d0 2fef 	ldaex	r2, [r0]
    c84e:	ea02 0c01 	and.w	ip, r2, r1
    c852:	e8c0 cfee 	stlex	lr, ip, [r0]
    c856:	f1be 0f00 	cmp.w	lr, #0
    c85a:	d1f6      	bne.n	c84a <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    c85c:	4213      	tst	r3, r2
}
    c85e:	bf14      	ite	ne
    c860:	2001      	movne	r0, #1
    c862:	2000      	moveq	r0, #0
    c864:	f85d fb04 	ldr.w	pc, [sp], #4

0000c868 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c868:	f001 021f 	and.w	r2, r1, #31
    c86c:	2301      	movs	r3, #1
    c86e:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c870:	0949      	lsrs	r1, r1, #5
    c872:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c876:	e8d0 2fef 	ldaex	r2, [r0]
    c87a:	431a      	orrs	r2, r3
    c87c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    c880:	2900      	cmp	r1, #0
    c882:	d1f8      	bne.n	c876 <atomic_set_bit+0xe>
}
    c884:	4770      	bx	lr

0000c886 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    c886:	2000      	movs	r0, #0
    c888:	4770      	bx	lr

0000c88a <abort_function>:
{
    c88a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c88c:	2000      	movs	r0, #0
    c88e:	f7f4 ff3d 	bl	170c <sys_reboot>

0000c892 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c892:	b538      	push	{r3, r4, r5, lr}
    c894:	4604      	mov	r4, r0

	if (esf != NULL) {
    c896:	460d      	mov	r5, r1
    c898:	b111      	cbz	r1, c8a0 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    c89a:	4608      	mov	r0, r1
    c89c:	f7f6 fc28 	bl	30f0 <esf_dump>
	}
	z_fatal_error(reason, esf);
    c8a0:	4629      	mov	r1, r5
    c8a2:	4620      	mov	r0, r4
    c8a4:	f7fc fc38 	bl	9118 <z_fatal_error>
}
    c8a8:	bd38      	pop	{r3, r4, r5, pc}

0000c8aa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    c8aa:	b508      	push	{r3, lr}
    c8ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c8ae:	6800      	ldr	r0, [r0, #0]
    c8b0:	f7ff ffef 	bl	c892 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    c8b4:	bd08      	pop	{r3, pc}

0000c8b6 <arch_irq_enable>:
{
    c8b6:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    c8b8:	b240      	sxtb	r0, r0
    c8ba:	f7f6 fd3f 	bl	333c <__NVIC_EnableIRQ>
}
    c8be:	bd08      	pop	{r3, pc}

0000c8c0 <arch_irq_disable>:
{
    c8c0:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
    c8c2:	b240      	sxtb	r0, r0
    c8c4:	f7f6 fd48 	bl	3358 <__NVIC_DisableIRQ>
}
    c8c8:	bd08      	pop	{r3, pc}

0000c8ca <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    c8ca:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c8cc:	3101      	adds	r1, #1
    c8ce:	b240      	sxtb	r0, r0
    c8d0:	f7f6 fd54 	bl	337c <__NVIC_SetPriority>
}
    c8d4:	bd08      	pop	{r3, pc}

0000c8d6 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    c8d6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c8d8:	2100      	movs	r1, #0
    c8da:	2001      	movs	r0, #1
    c8dc:	f7ff ffd9 	bl	c892 <z_arm_fatal_error>
}
    c8e0:	bd08      	pop	{r3, pc}

0000c8e2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c8e2:	b508      	push	{r3, lr}
	handler();
    c8e4:	f7f6 fd6c 	bl	33c0 <z_SysNmiOnReset>
	z_arm_int_exit();
    c8e8:	f7f6 fe3c 	bl	3564 <z_arm_exc_exit>
}
    c8ec:	bd08      	pop	{r3, pc}

0000c8ee <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    c8ee:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    c8f2:	f383 880b 	msr	PSPLIM, r3
}
    c8f6:	4770      	bx	lr

0000c8f8 <memory_fault_recoverable>:
}
    c8f8:	2000      	movs	r0, #0
    c8fa:	4770      	bx	lr

0000c8fc <fault_handle>:
{
    c8fc:	b508      	push	{r3, lr}
	*recoverable = false;
    c8fe:	2300      	movs	r3, #0
    c900:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    c902:	1ecb      	subs	r3, r1, #3
    c904:	2b09      	cmp	r3, #9
    c906:	d81a      	bhi.n	c93e <fault_handle+0x42>
    c908:	e8df f003 	tbb	[pc, r3]
    c90c:	110d0905 	.word	0x110d0905
    c910:	19191919 	.word	0x19191919
    c914:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    c916:	4611      	mov	r1, r2
    c918:	f7f7 faf8 	bl	3f0c <hard_fault>
}
    c91c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    c91e:	2100      	movs	r1, #0
    c920:	f7f6 fe72 	bl	3608 <mem_manage_fault>
		break;
    c924:	e7fa      	b.n	c91c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    c926:	2100      	movs	r1, #0
    c928:	f7f6 ffe6 	bl	38f8 <bus_fault>
		break;
    c92c:	e7f6      	b.n	c91c <fault_handle+0x20>
		reason = usage_fault(esf);
    c92e:	f7f7 f977 	bl	3c20 <usage_fault>
		break;
    c932:	e7f3      	b.n	c91c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    c934:	4611      	mov	r1, r2
    c936:	f7f7 fc09 	bl	414c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c93a:	2000      	movs	r0, #0
		break;
    c93c:	e7ee      	b.n	c91c <fault_handle+0x20>
		reserved_exception(esf, fault);
    c93e:	f7f7 fc35 	bl	41ac <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c942:	2000      	movs	r0, #0
	return reason;
    c944:	e7ea      	b.n	c91c <fault_handle+0x20>

0000c946 <sys_arch_reboot>:
{
    c946:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    c948:	f7f7 fd3c 	bl	43c4 <__NVIC_SystemReset>

0000c94c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    c94c:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    c950:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    c954:	d001      	beq.n	c95a <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    c956:	b2c0      	uxtb	r0, r0
    c958:	4770      	bx	lr
	}

	return -EINVAL;
    c95a:	f06f 0015 	mvn.w	r0, #21
}
    c95e:	4770      	bx	lr

0000c960 <region_init>:
{
    c960:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    c962:	680b      	ldr	r3, [r1, #0]
    c964:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    c968:	7a0b      	ldrb	r3, [r1, #8]
    c96a:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    c96e:	68ca      	ldr	r2, [r1, #12]
    c970:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    c974:	095b      	lsrs	r3, r3, #5
    c976:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    c97a:	f042 0201 	orr.w	r2, r2, #1
    c97e:	ea4c 010e 	orr.w	r1, ip, lr
    c982:	f7f7 fdb3 	bl	44ec <mpu_set_region>
}
    c986:	bd08      	pop	{r3, pc}

0000c988 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    c988:	6843      	ldr	r3, [r0, #4]
		&&
    c98a:	2b1f      	cmp	r3, #31
    c98c:	d908      	bls.n	c9a0 <mpu_partition_is_valid+0x18>
		&&
    c98e:	f013 0f1f 	tst.w	r3, #31
    c992:	d107      	bne.n	c9a4 <mpu_partition_is_valid+0x1c>
		((part->start &
    c994:	6803      	ldr	r3, [r0, #0]
		&&
    c996:	f013 0f1f 	tst.w	r3, #31
    c99a:	d005      	beq.n	c9a8 <mpu_partition_is_valid+0x20>
    c99c:	2000      	movs	r0, #0
    c99e:	4770      	bx	lr
    c9a0:	2000      	movs	r0, #0
    c9a2:	4770      	bx	lr
    c9a4:	2000      	movs	r0, #0
    c9a6:	4770      	bx	lr
    c9a8:	2001      	movs	r0, #1
}
    c9aa:	4770      	bx	lr

0000c9ac <get_region_index>:
{
    c9ac:	b570      	push	{r4, r5, r6, lr}
    c9ae:	4604      	mov	r4, r0
    c9b0:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c9b2:	f7ff ffcb 	bl	c94c <arm_cmse_mpu_region_get>
    c9b6:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c9b8:	4434      	add	r4, r6
    c9ba:	1e60      	subs	r0, r4, #1
    c9bc:	f7ff ffc6 	bl	c94c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    c9c0:	4285      	cmp	r5, r0
    c9c2:	d101      	bne.n	c9c8 <get_region_index+0x1c>
}
    c9c4:	4628      	mov	r0, r5
    c9c6:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    c9c8:	f06f 0515 	mvn.w	r5, #21
    c9cc:	e7fa      	b.n	c9c4 <get_region_index+0x18>

0000c9ce <mpu_configure_region>:
{
    c9ce:	b510      	push	{r4, lr}
    c9d0:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    c9d2:	680b      	ldr	r3, [r1, #0]
    c9d4:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    c9d6:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    c9d8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    c9dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    c9e0:	f36c 0204 	bfi	r2, ip, #0, #5
    c9e4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    c9e8:	8949      	ldrh	r1, [r1, #10]
    c9ea:	b2d2      	uxtb	r2, r2
    c9ec:	f361 1247 	bfi	r2, r1, #5, #3
    c9f0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    c9f4:	f023 031f 	bic.w	r3, r3, #31
    c9f8:	4423      	add	r3, r4
    c9fa:	3b01      	subs	r3, #1
    c9fc:	f023 031f 	bic.w	r3, r3, #31
    ca00:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    ca02:	4669      	mov	r1, sp
    ca04:	f7f7 fdcc 	bl	45a0 <region_allocate_and_init>
}
    ca08:	b004      	add	sp, #16
    ca0a:	bd10      	pop	{r4, pc}

0000ca0c <arm_core_mpu_configure_static_mpu_regions>:
{
    ca0c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    ca0e:	f7f7 ff5d 	bl	48cc <mpu_configure_static_mpu_regions>
}
    ca12:	bd08      	pop	{r3, pc}

0000ca14 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    ca14:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ca16:	f7f7 fd93 	bl	4540 <mpu_mark_areas_for_dynamic_regions>
}
    ca1a:	bd08      	pop	{r3, pc}

0000ca1c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    ca1c:	4602      	mov	r2, r0
    ca1e:	e002      	b.n	ca26 <strcpy+0xa>
		*d = *s;
    ca20:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    ca24:	3101      	adds	r1, #1
	while (*s != '\0') {
    ca26:	780b      	ldrb	r3, [r1, #0]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d1f9      	bne.n	ca20 <strcpy+0x4>
	}

	*d = '\0';
    ca2c:	7013      	strb	r3, [r2, #0]

	return dest;
}
    ca2e:	4770      	bx	lr

0000ca30 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    ca30:	4603      	mov	r3, r0
    ca32:	b1a2      	cbz	r2, ca5e <strncpy+0x2e>
{
    ca34:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    ca36:	780c      	ldrb	r4, [r1, #0]
    ca38:	b12c      	cbz	r4, ca46 <strncpy+0x16>
		*d = *s;
    ca3a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    ca3e:	3101      	adds	r1, #1
		d++;
		n--;
    ca40:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    ca42:	2a00      	cmp	r2, #0
    ca44:	d1f7      	bne.n	ca36 <strncpy+0x6>
	}

	while (n > 0) {
    ca46:	b122      	cbz	r2, ca52 <strncpy+0x22>
		*d = '\0';
    ca48:	2100      	movs	r1, #0
    ca4a:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    ca4e:	3a01      	subs	r2, #1
    ca50:	e7f9      	b.n	ca46 <strncpy+0x16>
	}

	return dest;
}
    ca52:	bc10      	pop	{r4}
    ca54:	4770      	bx	lr
		*d = '\0';
    ca56:	2100      	movs	r1, #0
    ca58:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ca5c:	3a01      	subs	r2, #1
	while (n > 0) {
    ca5e:	2a00      	cmp	r2, #0
    ca60:	d1f9      	bne.n	ca56 <strncpy+0x26>
    ca62:	4770      	bx	lr

0000ca64 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    ca64:	4603      	mov	r3, r0
	size_t n = 0;
    ca66:	2000      	movs	r0, #0

	while (*s != '\0') {
    ca68:	e001      	b.n	ca6e <strlen+0xa>
		s++;
    ca6a:	3301      	adds	r3, #1
		n++;
    ca6c:	3001      	adds	r0, #1
	while (*s != '\0') {
    ca6e:	781a      	ldrb	r2, [r3, #0]
    ca70:	2a00      	cmp	r2, #0
    ca72:	d1fa      	bne.n	ca6a <strlen+0x6>
	}

	return n;
}
    ca74:	4770      	bx	lr

0000ca76 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    ca76:	4603      	mov	r3, r0
	size_t n = 0;
    ca78:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    ca7a:	e001      	b.n	ca80 <strnlen+0xa>
		s++;
    ca7c:	3301      	adds	r3, #1
		n++;
    ca7e:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    ca80:	781a      	ldrb	r2, [r3, #0]
    ca82:	b10a      	cbz	r2, ca88 <strnlen+0x12>
    ca84:	4288      	cmp	r0, r1
    ca86:	d3f9      	bcc.n	ca7c <strnlen+0x6>
	}

	return n;
}
    ca88:	4770      	bx	lr

0000ca8a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    ca8a:	e001      	b.n	ca90 <strcmp+0x6>
		s1++;
    ca8c:	3001      	adds	r0, #1
		s2++;
    ca8e:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    ca90:	7803      	ldrb	r3, [r0, #0]
    ca92:	780a      	ldrb	r2, [r1, #0]
    ca94:	4293      	cmp	r3, r2
    ca96:	d101      	bne.n	ca9c <strcmp+0x12>
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d1f7      	bne.n	ca8c <strcmp+0x2>
	}

	return *s1 - *s2;
}
    ca9c:	1a98      	subs	r0, r3, r2
    ca9e:	4770      	bx	lr

0000caa0 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    caa0:	e002      	b.n	caa8 <strncmp+0x8>
		s1++;
    caa2:	3001      	adds	r0, #1
		s2++;
    caa4:	3101      	adds	r1, #1
		n--;
    caa6:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    caa8:	b132      	cbz	r2, cab8 <strncmp+0x18>
    caaa:	7803      	ldrb	r3, [r0, #0]
    caac:	f891 c000 	ldrb.w	ip, [r1]
    cab0:	4563      	cmp	r3, ip
    cab2:	d101      	bne.n	cab8 <strncmp+0x18>
    cab4:	2b00      	cmp	r3, #0
    cab6:	d1f4      	bne.n	caa2 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    cab8:	b11a      	cbz	r2, cac2 <strncmp+0x22>
    caba:	7800      	ldrb	r0, [r0, #0]
    cabc:	780b      	ldrb	r3, [r1, #0]
    cabe:	1ac0      	subs	r0, r0, r3
    cac0:	4770      	bx	lr
    cac2:	2000      	movs	r0, #0
}
    cac4:	4770      	bx	lr

0000cac6 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    cac6:	ea80 0301 	eor.w	r3, r0, r1
    caca:	f013 0f03 	tst.w	r3, #3
    cace:	d001      	beq.n	cad4 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    cad0:	4603      	mov	r3, r0
    cad2:	e023      	b.n	cb1c <memcpy+0x56>
    cad4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    cad6:	f013 0f03 	tst.w	r3, #3
    cada:	d00f      	beq.n	cafc <memcpy+0x36>
			if (n == 0) {
    cadc:	b30a      	cbz	r2, cb22 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    cade:	f811 cb01 	ldrb.w	ip, [r1], #1
    cae2:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    cae6:	3a01      	subs	r2, #1
    cae8:	e7f5      	b.n	cad6 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    caea:	f811 cb01 	ldrb.w	ip, [r1], #1
    caee:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    caf2:	3a01      	subs	r2, #1
	while (n > 0) {
    caf4:	2a00      	cmp	r2, #0
    caf6:	d1f8      	bne.n	caea <memcpy+0x24>
	}

	return d;
}
    caf8:	bc10      	pop	{r4}
    cafa:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    cafc:	2a03      	cmp	r2, #3
    cafe:	d90d      	bls.n	cb1c <memcpy+0x56>
{
    cb00:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    cb02:	f851 4b04 	ldr.w	r4, [r1], #4
    cb06:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    cb0a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    cb0c:	2a03      	cmp	r2, #3
    cb0e:	d8f8      	bhi.n	cb02 <memcpy+0x3c>
    cb10:	e7f0      	b.n	caf4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    cb12:	f811 cb01 	ldrb.w	ip, [r1], #1
    cb16:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    cb1a:	3a01      	subs	r2, #1
	while (n > 0) {
    cb1c:	2a00      	cmp	r2, #0
    cb1e:	d1f8      	bne.n	cb12 <memcpy+0x4c>
    cb20:	4770      	bx	lr
}
    cb22:	4770      	bx	lr

0000cb24 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    cb24:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    cb28:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    cb2a:	e002      	b.n	cb32 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    cb2c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    cb30:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    cb32:	f013 0f03 	tst.w	r3, #3
    cb36:	d002      	beq.n	cb3e <memset+0x1a>
		if (n == 0) {
    cb38:	2a00      	cmp	r2, #0
    cb3a:	d1f7      	bne.n	cb2c <memset+0x8>
    cb3c:	e00f      	b.n	cb5e <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    cb3e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    cb40:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    cb44:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    cb48:	2a03      	cmp	r2, #3
    cb4a:	d906      	bls.n	cb5a <memset+0x36>
		*(d_word++) = c_word;
    cb4c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    cb50:	3a04      	subs	r2, #4
    cb52:	e7f9      	b.n	cb48 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    cb54:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    cb58:	3a01      	subs	r2, #1
	while (n > 0) {
    cb5a:	2a00      	cmp	r2, #0
    cb5c:	d1fa      	bne.n	cb54 <memset+0x30>
	}

	return buf;
}
    cb5e:	4770      	bx	lr

0000cb60 <_stdout_hook_default>:
}
    cb60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cb64:	4770      	bx	lr

0000cb66 <setup>:

static int setup(const struct device *dev)
{
    cb66:	b508      	push	{r3, lr}
	}

#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
    cb68:	f7f7 fef8 	bl	495c <enable_cpunet>
	}

	return 0;
}
    cb6c:	2000      	movs	r0, #0
    cb6e:	bd08      	pop	{r3, pc}

0000cb70 <nrf_clock_is_running>:
    switch (domain)
    cb70:	2903      	cmp	r1, #3
    cb72:	d82f      	bhi.n	cbd4 <nrf_clock_is_running+0x64>
    cb74:	e8df f001 	tbb	[pc, r1]
    cb78:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    cb7c:	b122      	cbz	r2, cb88 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb7e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    cb82:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    cb86:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cb88:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    cb8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    cb90:	d122      	bne.n	cbd8 <nrf_clock_is_running+0x68>
    return false;
    cb92:	2000      	movs	r0, #0
    cb94:	4770      	bx	lr
            if (p_clk_src != NULL)
    cb96:	b122      	cbz	r2, cba2 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    cb98:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    cb9c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    cba0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cba2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    cba6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    cbaa:	d117      	bne.n	cbdc <nrf_clock_is_running+0x6c>
    return false;
    cbac:	2000      	movs	r0, #0
    cbae:	4770      	bx	lr
            if (p_clk_src != NULL)
    cbb0:	b122      	cbz	r2, cbbc <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    cbb2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    cbb6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    cbba:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    cbbc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    cbc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    cbc4:	d10c      	bne.n	cbe0 <nrf_clock_is_running+0x70>
    return false;
    cbc6:	2000      	movs	r0, #0
    cbc8:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    cbca:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    cbce:	f3c0 4000 	ubfx	r0, r0, #16, #1
    cbd2:	4770      	bx	lr
    switch (domain)
    cbd4:	2000      	movs	r0, #0
    cbd6:	4770      	bx	lr
                return true;
    cbd8:	2001      	movs	r0, #1
    cbda:	4770      	bx	lr
                return true;
    cbdc:	2001      	movs	r0, #1
    cbde:	4770      	bx	lr
                return true;
    cbe0:	2001      	movs	r0, #1
}
    cbe2:	4770      	bx	lr

0000cbe4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    cbe4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    cbe6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    cbea:	0089      	lsls	r1, r1, #2
    cbec:	3170      	adds	r1, #112	; 0x70
}
    cbee:	4408      	add	r0, r1
    cbf0:	4770      	bx	lr

0000cbf2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    cbf2:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    cbf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    cbf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    cbfc:	4770      	bx	lr

0000cbfe <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    cbfe:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    cc00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    cc04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    cc08:	4770      	bx	lr

0000cc0a <get_status>:
{
    cc0a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    cc0c:	b2c9      	uxtb	r1, r1
    cc0e:	f7ff ffe9 	bl	cbe4 <get_sub_data>
    cc12:	6880      	ldr	r0, [r0, #8]
}
    cc14:	f000 0007 	and.w	r0, r0, #7
    cc18:	bd08      	pop	{r3, pc}

0000cc1a <set_off_state>:
	__asm__ volatile(
    cc1a:	f04f 0320 	mov.w	r3, #32
    cc1e:	f3ef 8211 	mrs	r2, BASEPRI
    cc22:	f383 8812 	msr	BASEPRI_MAX, r3
    cc26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cc2a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    cc2c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    cc30:	d001      	beq.n	cc36 <set_off_state+0x1c>
    cc32:	428b      	cmp	r3, r1
    cc34:	d107      	bne.n	cc46 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    cc36:	2301      	movs	r3, #1
    cc38:	6003      	str	r3, [r0, #0]
	int err = 0;
    cc3a:	2000      	movs	r0, #0
	__asm__ volatile(
    cc3c:	f382 8811 	msr	BASEPRI, r2
    cc40:	f3bf 8f6f 	isb	sy
}
    cc44:	4770      	bx	lr
		err = -EPERM;
    cc46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cc4a:	e7f7      	b.n	cc3c <set_off_state+0x22>

0000cc4c <set_starting_state>:
	__asm__ volatile(
    cc4c:	f04f 0320 	mov.w	r3, #32
    cc50:	f3ef 8211 	mrs	r2, BASEPRI
    cc54:	f383 8812 	msr	BASEPRI_MAX, r3
    cc58:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cc5c:	6803      	ldr	r3, [r0, #0]
    cc5e:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    cc62:	f003 0307 	and.w	r3, r3, #7
    cc66:	2b01      	cmp	r3, #1
    cc68:	d008      	beq.n	cc7c <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    cc6a:	458c      	cmp	ip, r1
    cc6c:	d009      	beq.n	cc82 <set_starting_state+0x36>
		err = -EPERM;
    cc6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    cc72:	f382 8811 	msr	BASEPRI, r2
    cc76:	f3bf 8f6f 	isb	sy
}
    cc7a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    cc7c:	6001      	str	r1, [r0, #0]
	int err = 0;
    cc7e:	2000      	movs	r0, #0
    cc80:	e7f7      	b.n	cc72 <set_starting_state+0x26>
		err = -EALREADY;
    cc82:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cc86:	e7f4      	b.n	cc72 <set_starting_state+0x26>

0000cc88 <set_on_state>:
	__asm__ volatile(
    cc88:	f04f 0320 	mov.w	r3, #32
    cc8c:	f3ef 8211 	mrs	r2, BASEPRI
    cc90:	f383 8812 	msr	BASEPRI_MAX, r3
    cc94:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    cc98:	6803      	ldr	r3, [r0, #0]
    cc9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cc9e:	f043 0302 	orr.w	r3, r3, #2
    cca2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    cca4:	f382 8811 	msr	BASEPRI, r2
    cca8:	f3bf 8f6f 	isb	sy
}
    ccac:	4770      	bx	lr

0000ccae <clkstarted_handle>:
{
    ccae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccb0:	4606      	mov	r6, r0
    ccb2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    ccb4:	f7ff ff96 	bl	cbe4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    ccb8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    ccba:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    ccbc:	2300      	movs	r3, #0
    ccbe:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    ccc2:	f7ff ffe1 	bl	cc88 <set_on_state>
	if (callback) {
    ccc6:	b11d      	cbz	r5, ccd0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ccc8:	463a      	mov	r2, r7
    ccca:	4621      	mov	r1, r4
    cccc:	4630      	mov	r0, r6
    ccce:	47a8      	blx	r5
}
    ccd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ccd2 <stop>:
{
    ccd2:	b570      	push	{r4, r5, r6, lr}
    ccd4:	4606      	mov	r6, r0
    ccd6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    ccd8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    ccda:	4621      	mov	r1, r4
    ccdc:	f7ff ff82 	bl	cbe4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    cce0:	4629      	mov	r1, r5
    cce2:	3008      	adds	r0, #8
    cce4:	f7ff ff99 	bl	cc1a <set_off_state>
	if (err < 0) {
    cce8:	2800      	cmp	r0, #0
    ccea:	db06      	blt.n	ccfa <stop+0x28>
	get_sub_config(dev, type)->stop();
    ccec:	4621      	mov	r1, r4
    ccee:	4630      	mov	r0, r6
    ccf0:	f7ff ff7f 	bl	cbf2 <get_sub_config>
    ccf4:	6843      	ldr	r3, [r0, #4]
    ccf6:	4798      	blx	r3
	return 0;
    ccf8:	2000      	movs	r0, #0
}
    ccfa:	bd70      	pop	{r4, r5, r6, pc}

0000ccfc <api_stop>:
{
    ccfc:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    ccfe:	2280      	movs	r2, #128	; 0x80
    cd00:	f7ff ffe7 	bl	ccd2 <stop>
}
    cd04:	bd08      	pop	{r3, pc}

0000cd06 <async_start>:
{
    cd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd0a:	4606      	mov	r6, r0
    cd0c:	4690      	mov	r8, r2
    cd0e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    cd10:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    cd12:	4629      	mov	r1, r5
    cd14:	f7ff ff66 	bl	cbe4 <get_sub_data>
    cd18:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    cd1a:	9906      	ldr	r1, [sp, #24]
    cd1c:	3008      	adds	r0, #8
    cd1e:	f7ff ff95 	bl	cc4c <set_starting_state>
	if (err < 0) {
    cd22:	2800      	cmp	r0, #0
    cd24:	db09      	blt.n	cd3a <async_start+0x34>
	subdata->cb = cb;
    cd26:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    cd2a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    cd2c:	4629      	mov	r1, r5
    cd2e:	4630      	mov	r0, r6
    cd30:	f7ff ff5f 	bl	cbf2 <get_sub_config>
    cd34:	6803      	ldr	r3, [r0, #0]
    cd36:	4798      	blx	r3
	return 0;
    cd38:	2000      	movs	r0, #0
}
    cd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd3e <api_start>:
{
    cd3e:	b510      	push	{r4, lr}
    cd40:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    cd42:	2480      	movs	r4, #128	; 0x80
    cd44:	9400      	str	r4, [sp, #0]
    cd46:	f7ff ffde 	bl	cd06 <async_start>
}
    cd4a:	b002      	add	sp, #8
    cd4c:	bd10      	pop	{r4, pc}

0000cd4e <onoff_started_callback>:
{
    cd4e:	b510      	push	{r4, lr}
    cd50:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    cd52:	b2c9      	uxtb	r1, r1
    cd54:	f7ff ff53 	bl	cbfe <get_onoff_manager>
	notify(mgr, 0);
    cd58:	2100      	movs	r1, #0
    cd5a:	47a0      	blx	r4
}
    cd5c:	bd10      	pop	{r4, pc}

0000cd5e <hfclk_start>:
{
    cd5e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    cd60:	2001      	movs	r0, #1
    cd62:	f000 ff53 	bl	dc0c <nrfx_clock_start>
}
    cd66:	bd08      	pop	{r3, pc}

0000cd68 <hfclkaudio_start>:
{
    cd68:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    cd6a:	2003      	movs	r0, #3
    cd6c:	f000 ff4e 	bl	dc0c <nrfx_clock_start>
}
    cd70:	bd08      	pop	{r3, pc}

0000cd72 <hfclk192m_start>:
{
    cd72:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    cd74:	2002      	movs	r0, #2
    cd76:	f000 ff49 	bl	dc0c <nrfx_clock_start>
}
    cd7a:	bd08      	pop	{r3, pc}

0000cd7c <lfclk_start>:
{
    cd7c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    cd7e:	2000      	movs	r0, #0
    cd80:	f000 ff44 	bl	dc0c <nrfx_clock_start>
}
    cd84:	bd08      	pop	{r3, pc}

0000cd86 <hfclk_stop>:
{
    cd86:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    cd88:	2001      	movs	r0, #1
    cd8a:	f000 ffb4 	bl	dcf6 <nrfx_clock_stop>
}
    cd8e:	bd08      	pop	{r3, pc}

0000cd90 <hfclkaudio_stop>:
{
    cd90:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    cd92:	2003      	movs	r0, #3
    cd94:	f000 ffaf 	bl	dcf6 <nrfx_clock_stop>
}
    cd98:	bd08      	pop	{r3, pc}

0000cd9a <hfclk192m_stop>:
{
    cd9a:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    cd9c:	2002      	movs	r0, #2
    cd9e:	f000 ffaa 	bl	dcf6 <nrfx_clock_stop>
}
    cda2:	bd08      	pop	{r3, pc}

0000cda4 <lfclk_stop>:
{
    cda4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cda6:	2000      	movs	r0, #0
    cda8:	f000 ffa5 	bl	dcf6 <nrfx_clock_stop>
}
    cdac:	bd08      	pop	{r3, pc}

0000cdae <k_msleep>:
{
    cdae:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    cdb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    cdb4:	17c1      	asrs	r1, r0, #31
    cdb6:	03c9      	lsls	r1, r1, #15
    cdb8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    cdbc:	03c0      	lsls	r0, r0, #15
    cdbe:	f240 33e7 	movw	r3, #999	; 0x3e7
    cdc2:	18c0      	adds	r0, r0, r3
    cdc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdc8:	f04f 0300 	mov.w	r3, #0
    cdcc:	f141 0100 	adc.w	r1, r1, #0
    cdd0:	f7f3 f9c0 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    cdd4:	f7fd faae 	bl	a334 <z_impl_k_sleep>
}
    cdd8:	bd08      	pop	{r3, pc}

0000cdda <blocking_start_callback>:
{
    cdda:	b508      	push	{r3, lr}
    cddc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    cdde:	f7fc fdbd 	bl	995c <z_impl_k_sem_give>
}
    cde2:	bd08      	pop	{r3, pc}

0000cde4 <k_msleep>:
{
    cde4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    cde6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    cdea:	17c1      	asrs	r1, r0, #31
    cdec:	03c9      	lsls	r1, r1, #15
    cdee:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    cdf2:	03c0      	lsls	r0, r0, #15
    cdf4:	f240 33e7 	movw	r3, #999	; 0x3e7
    cdf8:	18c0      	adds	r0, r0, r3
    cdfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdfe:	f04f 0300 	mov.w	r3, #0
    ce02:	f141 0100 	adc.w	r1, r1, #0
    ce06:	f7f3 f9a5 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    ce0a:	f7fd fa93 	bl	a334 <z_impl_k_sleep>
}
    ce0e:	bd08      	pop	{r3, pc}

0000ce10 <wait>:
{
    ce10:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    ce12:	f001 fee1 	bl	ebd8 <k_is_in_isr>
    ce16:	b100      	cbz	r0, ce1a <wait+0xa>
}
    ce18:	bd08      	pop	{r3, pc}
		k_msleep(CONFIG_RTT_TX_RETRY_DELAY_MS);
    ce1a:	2002      	movs	r0, #2
    ce1c:	f7ff ffe2 	bl	cde4 <k_msleep>
}
    ce20:	e7fa      	b.n	ce18 <wait+0x8>

0000ce22 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ce22:	460b      	mov	r3, r1
    ce24:	b139      	cbz	r1, ce36 <sys_slist_remove+0x14>
	return node->next;
    ce26:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    ce28:	6019      	str	r1, [r3, #0]
	return list->tail;
    ce2a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    ce2c:	428a      	cmp	r2, r1
    ce2e:	d009      	beq.n	ce44 <sys_slist_remove+0x22>
	parent->next = child;
    ce30:	2300      	movs	r3, #0
    ce32:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ce34:	4770      	bx	lr
	return node->next;
    ce36:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    ce38:	6003      	str	r3, [r0, #0]
	return list->tail;
    ce3a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    ce3c:	428a      	cmp	r2, r1
    ce3e:	d1f7      	bne.n	ce30 <sys_slist_remove+0xe>
	list->tail = node;
    ce40:	6043      	str	r3, [r0, #4]
}
    ce42:	e7f5      	b.n	ce30 <sys_slist_remove+0xe>
	list->tail = node;
    ce44:	6043      	str	r3, [r0, #4]
}
    ce46:	e7f3      	b.n	ce30 <sys_slist_remove+0xe>

0000ce48 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ce48:	b508      	push	{r3, lr}
    ce4a:	460a      	mov	r2, r1
	return list->head;
    ce4c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ce4e:	2100      	movs	r1, #0
    ce50:	e001      	b.n	ce56 <sys_slist_find_and_remove+0xe>
    ce52:	4619      	mov	r1, r3
    ce54:	681b      	ldr	r3, [r3, #0]
    ce56:	b12b      	cbz	r3, ce64 <sys_slist_find_and_remove+0x1c>
    ce58:	4293      	cmp	r3, r2
    ce5a:	d1fa      	bne.n	ce52 <sys_slist_find_and_remove+0xa>
    ce5c:	f7ff ffe1 	bl	ce22 <sys_slist_remove>
    ce60:	2001      	movs	r0, #1
    ce62:	e000      	b.n	ce66 <sys_slist_find_and_remove+0x1e>
    ce64:	2000      	movs	r0, #0
    ce66:	bd08      	pop	{r3, pc}

0000ce68 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    ce68:	b570      	push	{r4, r5, r6, lr}
    ce6a:	4604      	mov	r4, r0
    ce6c:	460d      	mov	r5, r1
    ce6e:	4616      	mov	r6, r2
	return list->head;
    ce70:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    ce72:	b133      	cbz	r3, ce82 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    ce74:	f7ff ffe8 	bl	ce48 <sys_slist_find_and_remove>
    ce78:	b918      	cbnz	r0, ce82 <gpio_manage_callback+0x1a>
			if (!set) {
    ce7a:	b91e      	cbnz	r6, ce84 <gpio_manage_callback+0x1c>
				return -EINVAL;
    ce7c:	f06f 0015 	mvn.w	r0, #21
    ce80:	e006      	b.n	ce90 <gpio_manage_callback+0x28>
			}
		}
	}

	if (set) {
    ce82:	b14e      	cbz	r6, ce98 <gpio_manage_callback+0x30>
    ce84:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    ce86:	602b      	str	r3, [r5, #0]
	list->head = node;
    ce88:	6025      	str	r5, [r4, #0]
	return list->tail;
    ce8a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    ce8c:	b10b      	cbz	r3, ce92 <gpio_manage_callback+0x2a>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    ce8e:	2000      	movs	r0, #0
}
    ce90:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
    ce92:	6065      	str	r5, [r4, #4]
	return 0;
    ce94:	2000      	movs	r0, #0
}
    ce96:	e7fb      	b.n	ce90 <gpio_manage_callback+0x28>
    ce98:	2000      	movs	r0, #0
    ce9a:	e7f9      	b.n	ce90 <gpio_manage_callback+0x28>

0000ce9c <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    ce9c:	b570      	push	{r4, r5, r6, lr}
    ce9e:	460e      	mov	r6, r1
    cea0:	4615      	mov	r5, r2
	return list->head;
    cea2:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    cea4:	b121      	cbz	r1, ceb0 <gpio_fire_callbacks+0x14>
	return node->next;
    cea6:	680c      	ldr	r4, [r1, #0]
    cea8:	b13c      	cbz	r4, ceba <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ceaa:	b931      	cbnz	r1, ceba <gpio_fire_callbacks+0x1e>
    ceac:	460c      	mov	r4, r1
    ceae:	e004      	b.n	ceba <gpio_fire_callbacks+0x1e>
    ceb0:	460c      	mov	r4, r1
    ceb2:	e002      	b.n	ceba <gpio_fire_callbacks+0x1e>
    ceb4:	4623      	mov	r3, r4
    ceb6:	4621      	mov	r1, r4
    ceb8:	461c      	mov	r4, r3
    ceba:	b171      	cbz	r1, ceda <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    cebc:	688a      	ldr	r2, [r1, #8]
    cebe:	402a      	ands	r2, r5
    cec0:	d002      	beq.n	cec8 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    cec2:	684b      	ldr	r3, [r1, #4]
    cec4:	4630      	mov	r0, r6
    cec6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    cec8:	2c00      	cmp	r4, #0
    ceca:	d0f3      	beq.n	ceb4 <gpio_fire_callbacks+0x18>
	return node->next;
    cecc:	6823      	ldr	r3, [r4, #0]
    cece:	2b00      	cmp	r3, #0
    ced0:	d0f1      	beq.n	ceb6 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ced2:	2c00      	cmp	r4, #0
    ced4:	d1ef      	bne.n	ceb6 <gpio_fire_callbacks+0x1a>
    ced6:	4623      	mov	r3, r4
    ced8:	e7ed      	b.n	ceb6 <gpio_fire_callbacks+0x1a>
		}
	}
}
    ceda:	bd70      	pop	{r4, r5, r6, pc}

0000cedc <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    cedc:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    cee0:	0580      	lsls	r0, r0, #22
    cee2:	0d80      	lsrs	r0, r0, #22
    cee4:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    cee8:	d033      	beq.n	cf52 <get_drive+0x76>
    ceea:	d816      	bhi.n	cf1a <get_drive+0x3e>
    ceec:	2806      	cmp	r0, #6
    ceee:	d02c      	beq.n	cf4a <get_drive+0x6e>
    cef0:	d906      	bls.n	cf00 <get_drive+0x24>
    cef2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    cef6:	d10d      	bne.n	cf14 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    cef8:	2301      	movs	r3, #1
    cefa:	700b      	strb	r3, [r1, #0]
	return 0;
    cefc:	2000      	movs	r0, #0
		break;
    cefe:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    cf00:	b300      	cbz	r0, cf44 <get_drive+0x68>
    cf02:	2802      	cmp	r0, #2
    cf04:	d103      	bne.n	cf0e <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    cf06:	2304      	movs	r3, #4
    cf08:	700b      	strb	r3, [r1, #0]
	return 0;
    cf0a:	2000      	movs	r0, #0
		break;
    cf0c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    cf0e:	f06f 0015 	mvn.w	r0, #21
    cf12:	4770      	bx	lr
    cf14:	f06f 0015 	mvn.w	r0, #21
    cf18:	4770      	bx	lr
    cf1a:	f240 2302 	movw	r3, #514	; 0x202
    cf1e:	4298      	cmp	r0, r3
    cf20:	d01b      	beq.n	cf5a <get_drive+0x7e>
    cf22:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    cf26:	d103      	bne.n	cf30 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    cf28:	2303      	movs	r3, #3
    cf2a:	700b      	strb	r3, [r1, #0]
	return 0;
    cf2c:	2000      	movs	r0, #0
		break;
    cf2e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    cf30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    cf34:	d103      	bne.n	cf3e <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    cf36:	2302      	movs	r3, #2
    cf38:	700b      	strb	r3, [r1, #0]
	return 0;
    cf3a:	2000      	movs	r0, #0
		break;
    cf3c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    cf3e:	f06f 0015 	mvn.w	r0, #21
    cf42:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    cf44:	2000      	movs	r0, #0
    cf46:	7008      	strb	r0, [r1, #0]
		break;
    cf48:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    cf4a:	2306      	movs	r3, #6
    cf4c:	700b      	strb	r3, [r1, #0]
	return 0;
    cf4e:	2000      	movs	r0, #0
		break;
    cf50:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    cf52:	2307      	movs	r3, #7
    cf54:	700b      	strb	r3, [r1, #0]
	return 0;
    cf56:	2000      	movs	r0, #0
		break;
    cf58:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    cf5a:	2305      	movs	r3, #5
    cf5c:	700b      	strb	r3, [r1, #0]
	return 0;
    cf5e:	2000      	movs	r0, #0
}
    cf60:	4770      	bx	lr

0000cf62 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    cf62:	f010 0f10 	tst.w	r0, #16
    cf66:	d104      	bne.n	cf72 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    cf68:	f010 0f20 	tst.w	r0, #32
    cf6c:	d103      	bne.n	cf76 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    cf6e:	2000      	movs	r0, #0
    cf70:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    cf72:	2003      	movs	r0, #3
    cf74:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    cf76:	2001      	movs	r0, #1
}
    cf78:	4770      	bx	lr

0000cf7a <gpio_nrfx_port_get_raw>:
	return port->config;
    cf7a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cf7c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    cf7e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    cf80:	600b      	str	r3, [r1, #0]
}
    cf82:	2000      	movs	r0, #0
    cf84:	4770      	bx	lr

0000cf86 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    cf86:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cf88:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    cf8a:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    cf8e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    cf92:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    cf94:	60d9      	str	r1, [r3, #12]
}
    cf96:	2000      	movs	r0, #0
    cf98:	4770      	bx	lr

0000cf9a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    cf9a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cf9c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    cf9e:	6099      	str	r1, [r3, #8]
}
    cfa0:	2000      	movs	r0, #0
    cfa2:	4770      	bx	lr

0000cfa4 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    cfa4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cfa6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    cfa8:	60d9      	str	r1, [r3, #12]
}
    cfaa:	2000      	movs	r0, #0
    cfac:	4770      	bx	lr

0000cfae <gpio_nrfx_port_toggle_bits>:
	return port->config;
    cfae:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cfb0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    cfb2:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    cfb4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    cfb8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    cfba:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    cfbc:	60d3      	str	r3, [r2, #12]
}
    cfbe:	2000      	movs	r0, #0
    cfc0:	4770      	bx	lr

0000cfc2 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    cfc2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    cfc6:	d007      	beq.n	cfd8 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    cfc8:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    cfcc:	d00d      	beq.n	cfea <get_trigger+0x28>
    cfce:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    cfd2:	d008      	beq.n	cfe6 <get_trigger+0x24>
    cfd4:	2001      	movs	r0, #1
}
    cfd6:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    cfd8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    cfdc:	d001      	beq.n	cfe2 <get_trigger+0x20>
    cfde:	2005      	movs	r0, #5
    cfe0:	4770      	bx	lr
    cfe2:	2004      	movs	r0, #4
    cfe4:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    cfe6:	2002      	movs	r0, #2
    cfe8:	4770      	bx	lr
    cfea:	2003      	movs	r0, #3
    cfec:	4770      	bx	lr

0000cfee <gpio_nrfx_manage_callback>:
{
    cfee:	b508      	push	{r3, lr}
	return port->data;
    cff0:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    cff2:	3004      	adds	r0, #4
    cff4:	f7ff ff38 	bl	ce68 <gpio_manage_callback>
}
    cff8:	bd08      	pop	{r3, pc}

0000cffa <nrfx_gpio_handler>:
{
    cffa:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    cffc:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    d000:	0940      	lsrs	r0, r0, #5
    d002:	f7f7 fe73 	bl	4cec <get_dev>
	if (port == NULL) {
    d006:	b130      	cbz	r0, d016 <nrfx_gpio_handler+0x1c>
    d008:	4601      	mov	r1, r0
	return port->data;
    d00a:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    d00c:	2201      	movs	r2, #1
    d00e:	40a2      	lsls	r2, r4
    d010:	3004      	adds	r0, #4
    d012:	f7ff ff43 	bl	ce9c <gpio_fire_callbacks>
}
    d016:	bd10      	pop	{r4, pc}

0000d018 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    d018:	b510      	push	{r4, lr}
    d01a:	b082      	sub	sp, #8
    d01c:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    d01e:	aa01      	add	r2, sp, #4
    d020:	f000 fc47 	bl	d8b2 <pinctrl_lookup_state>
	if (ret < 0) {
    d024:	2800      	cmp	r0, #0
    d026:	db05      	blt.n	d034 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    d028:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d02a:	6822      	ldr	r2, [r4, #0]
    d02c:	7919      	ldrb	r1, [r3, #4]
    d02e:	6818      	ldr	r0, [r3, #0]
    d030:	f7f9 fb82 	bl	6738 <pinctrl_configure_pins>
}
    d034:	b002      	add	sp, #8
    d036:	bd10      	pop	{r4, pc}

0000d038 <irq_connect1>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    d038:	b508      	push	{r3, lr}
    d03a:	2200      	movs	r2, #0
    d03c:	2101      	movs	r1, #1
    d03e:	2009      	movs	r0, #9
    d040:	f7ff fc43 	bl	c8ca <z_arm_irq_priority_set>
    d044:	bd08      	pop	{r3, pc}

0000d046 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    d046:	b538      	push	{r3, r4, r5, lr}
    d048:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    d04a:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    d04c:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    d04e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    d052:	d007      	beq.n	d064 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    d054:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    d058:	d004      	beq.n	d064 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    d05a:	f012 0f01 	tst.w	r2, #1
    d05e:	d001      	beq.n	d064 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    d060:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    d064:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    d068:	f013 0f01 	tst.w	r3, #1
    d06c:	d00a      	beq.n	d084 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d06e:	6823      	ldr	r3, [r4, #0]
    d070:	f04f 0c01 	mov.w	ip, #1
    d074:	fa0c fc01 	lsl.w	ip, ip, r1
    d078:	ea43 030c 	orr.w	r3, r3, ip
    d07c:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    d07e:	682b      	ldr	r3, [r5, #0]
    d080:	4798      	blx	r3
}
    d082:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d084:	6823      	ldr	r3, [r4, #0]
    d086:	f04f 0c01 	mov.w	ip, #1
    d08a:	fa0c fc01 	lsl.w	ip, ip, r1
    d08e:	ea23 030c 	bic.w	r3, r3, ip
    d092:	6023      	str	r3, [r4, #0]
    d094:	e7f3      	b.n	d07e <z_impl_gpio_pin_configure+0x38>

0000d096 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
    d096:	b508      	push	{r3, lr}
    d098:	4603      	mov	r3, r0
    d09a:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    d09c:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    d09e:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    d0a0:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    d0a2:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    d0a6:	f7ff ffce 	bl	d046 <z_impl_gpio_pin_configure>
}
    d0aa:	bd08      	pop	{r3, pc}

0000d0ac <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
    d0ac:	b508      	push	{r3, lr}
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
    d0ae:	b132      	cbz	r2, d0be <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    d0b0:	2301      	movs	r3, #1
    d0b2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    d0b6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    d0b8:	68db      	ldr	r3, [r3, #12]
    d0ba:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
    d0bc:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    d0be:	2301      	movs	r3, #1
    d0c0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    d0c4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    d0c6:	691b      	ldr	r3, [r3, #16]
    d0c8:	4798      	blx	r3
	return ret;
    d0ca:	e7f7      	b.n	d0bc <gpio_pin_set_raw+0x10>

0000d0cc <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
    d0cc:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    d0ce:	6903      	ldr	r3, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    d0d0:	681c      	ldr	r4, [r3, #0]
    d0d2:	2301      	movs	r3, #1
    d0d4:	408b      	lsls	r3, r1
    d0d6:	421c      	tst	r4, r3
    d0d8:	d002      	beq.n	d0e0 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
    d0da:	fab2 f282 	clz	r2, r2
    d0de:	0952      	lsrs	r2, r2, #5
	}

	return gpio_pin_set_raw(port, pin, value);
    d0e0:	f7ff ffe4 	bl	d0ac <gpio_pin_set_raw>
}
    d0e4:	bd10      	pop	{r4, pc}

0000d0e6 <spi_context_get_next_buf>:
{
    d0e6:	b430      	push	{r4, r5}
	while (*count) {
    d0e8:	e004      	b.n	d0f4 <spi_context_get_next_buf+0xe>
		++(*current);
    d0ea:	3408      	adds	r4, #8
    d0ec:	6004      	str	r4, [r0, #0]
		--(*count);
    d0ee:	680c      	ldr	r4, [r1, #0]
    d0f0:	3c01      	subs	r4, #1
    d0f2:	600c      	str	r4, [r1, #0]
	while (*count) {
    d0f4:	680c      	ldr	r4, [r1, #0]
    d0f6:	b14c      	cbz	r4, d10c <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
    d0f8:	6804      	ldr	r4, [r0, #0]
    d0fa:	6865      	ldr	r5, [r4, #4]
    d0fc:	429d      	cmp	r5, r3
    d0fe:	d3f4      	bcc.n	d0ea <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
    d100:	fbb5 f5f3 	udiv	r5, r5, r3
    d104:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
    d106:	6803      	ldr	r3, [r0, #0]
    d108:	6818      	ldr	r0, [r3, #0]
    d10a:	e001      	b.n	d110 <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
    d10c:	2000      	movs	r0, #0
    d10e:	6010      	str	r0, [r2, #0]
}
    d110:	bc30      	pop	{r4, r5}
    d112:	4770      	bx	lr

0000d114 <spi_context_buffers_setup>:
{
    d114:	b570      	push	{r4, r5, r6, lr}
    d116:	4604      	mov	r4, r0
    d118:	4615      	mov	r5, r2
    d11a:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    d11c:	460a      	mov	r2, r1
    d11e:	b309      	cbz	r1, d164 <spi_context_buffers_setup+0x50>
    d120:	680b      	ldr	r3, [r1, #0]
    d122:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    d124:	b303      	cbz	r3, d168 <spi_context_buffers_setup+0x54>
    d126:	6853      	ldr	r3, [r2, #4]
    d128:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    d12a:	4633      	mov	r3, r6
    d12c:	f104 0248 	add.w	r2, r4, #72	; 0x48
    d130:	f104 0138 	add.w	r1, r4, #56	; 0x38
    d134:	f104 0034 	add.w	r0, r4, #52	; 0x34
    d138:	f7ff ffd5 	bl	d0e6 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
    d13c:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    d13e:	b1ad      	cbz	r5, d16c <spi_context_buffers_setup+0x58>
    d140:	682b      	ldr	r3, [r5, #0]
    d142:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    d144:	b1a3      	cbz	r3, d170 <spi_context_buffers_setup+0x5c>
    d146:	686b      	ldr	r3, [r5, #4]
    d148:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    d14a:	4633      	mov	r3, r6
    d14c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    d150:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d154:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    d158:	f7ff ffc5 	bl	d0e6 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
    d15c:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    d15e:	2300      	movs	r3, #0
    d160:	6323      	str	r3, [r4, #48]	; 0x30
}
    d162:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    d164:	460b      	mov	r3, r1
    d166:	e7dc      	b.n	d122 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    d168:	2300      	movs	r3, #0
    d16a:	e7dd      	b.n	d128 <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    d16c:	462b      	mov	r3, r5
    d16e:	e7e8      	b.n	d142 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    d170:	2300      	movs	r3, #0
    d172:	e7e9      	b.n	d148 <spi_context_buffers_setup+0x34>

0000d174 <_spi_context_cs_control>:
{
    d174:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    d176:	6803      	ldr	r3, [r0, #0]
    d178:	b1a3      	cbz	r3, d1a4 <_spi_context_cs_control+0x30>
    d17a:	4604      	mov	r4, r0
    d17c:	689d      	ldr	r5, [r3, #8]
    d17e:	b18d      	cbz	r5, d1a4 <_spi_context_cs_control+0x30>
    d180:	6828      	ldr	r0, [r5, #0]
    d182:	b178      	cbz	r0, d1a4 <_spi_context_cs_control+0x30>
		if (on) {
    d184:	b979      	cbnz	r1, d1a6 <_spi_context_cs_control+0x32>
			if (!force_off &&
    d186:	b91a      	cbnz	r2, d190 <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
    d188:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
    d18a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d18e:	d109      	bne.n	d1a4 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
    d190:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
    d192:	f002 f80b 	bl	f1ac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    d196:	6823      	ldr	r3, [r4, #0]
    d198:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    d19a:	2200      	movs	r2, #0
    d19c:	7919      	ldrb	r1, [r3, #4]
    d19e:	6818      	ldr	r0, [r3, #0]
    d1a0:	f7ff ff94 	bl	d0cc <gpio_pin_set>
}
    d1a4:	bd38      	pop	{r3, r4, r5, pc}
    d1a6:	2201      	movs	r2, #1
    d1a8:	7929      	ldrb	r1, [r5, #4]
    d1aa:	f7ff ff8f 	bl	d0cc <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
    d1ae:	6823      	ldr	r3, [r4, #0]
    d1b0:	689b      	ldr	r3, [r3, #8]
    d1b2:	6898      	ldr	r0, [r3, #8]
    d1b4:	f001 fffa 	bl	f1ac <z_impl_k_busy_wait>
}
    d1b8:	e7f4      	b.n	d1a4 <_spi_context_cs_control+0x30>

0000d1ba <spi_context_unlock_unconditionally>:
{
    d1ba:	b510      	push	{r4, lr}
    d1bc:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    d1be:	2201      	movs	r2, #1
    d1c0:	2100      	movs	r1, #0
    d1c2:	f7ff ffd7 	bl	d174 <_spi_context_cs_control>
	return sem->count;
    d1c6:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    d1c8:	b103      	cbz	r3, d1cc <spi_context_unlock_unconditionally+0x12>
}
    d1ca:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
    d1cc:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    d1ce:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    d1d2:	f7fc fbc3 	bl	995c <z_impl_k_sem_give>
}
    d1d6:	e7f8      	b.n	d1ca <spi_context_unlock_unconditionally+0x10>

0000d1d8 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
    d1d8:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    d1da:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
    d1dc:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    d1de:	428b      	cmp	r3, r1
    d1e0:	d106      	bne.n	d1f0 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
    d1e2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    d1e6:	b933      	cbnz	r3, d1f6 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    d1e8:	f7ff ffe7 	bl	d1ba <spi_context_unlock_unconditionally>

	return 0;
    d1ec:	2000      	movs	r0, #0
}
    d1ee:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d1f0:	f06f 0015 	mvn.w	r0, #21
    d1f4:	e7fb      	b.n	d1ee <spi_nrfx_release+0x16>
		return -EBUSY;
    d1f6:	f06f 000f 	mvn.w	r0, #15
    d1fa:	e7f8      	b.n	d1ee <spi_nrfx_release+0x16>

0000d1fc <spi_context_release>:
{
    d1fc:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    d1fe:	6803      	ldr	r3, [r0, #0]
    d200:	889b      	ldrh	r3, [r3, #4]
    d202:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    d206:	d000      	beq.n	d20a <spi_context_release+0xe>
}
    d208:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
    d20a:	2300      	movs	r3, #0
    d20c:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
    d20e:	3010      	adds	r0, #16
    d210:	f7fc fba4 	bl	995c <z_impl_k_sem_give>
}
    d214:	e7f8      	b.n	d208 <spi_context_release+0xc>

0000d216 <spi_context_lock>:
{
    d216:	b538      	push	{r3, r4, r5, lr}
    d218:	4604      	mov	r4, r0
    d21a:	461d      	mov	r5, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    d21c:	889b      	ldrh	r3, [r3, #4]
    d21e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    d222:	d004      	beq.n	d22e <spi_context_lock+0x18>
    d224:	6983      	ldr	r3, [r0, #24]
    d226:	b913      	cbnz	r3, d22e <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
    d228:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
    d22a:	42ab      	cmp	r3, r5
    d22c:	d008      	beq.n	d240 <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
    d22e:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
    d232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d23a:	f7fc fbb3 	bl	99a4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    d23e:	6065      	str	r5, [r4, #4]
}
    d240:	bd38      	pop	{r3, r4, r5, pc}

0000d242 <transceive>:
{
    d242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d246:	4604      	mov	r4, r0
    d248:	460d      	mov	r5, r1
    d24a:	4690      	mov	r8, r2
    d24c:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
    d24e:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
    d250:	460b      	mov	r3, r1
    d252:	9a07      	ldr	r2, [sp, #28]
    d254:	f89d 1018 	ldrb.w	r1, [sp, #24]
    d258:	4630      	mov	r0, r6
    d25a:	f7ff ffdc 	bl	d216 <spi_context_lock>
	error = configure(dev, spi_cfg);
    d25e:	4629      	mov	r1, r5
    d260:	4620      	mov	r0, r4
    d262:	f7f8 fa15 	bl	5690 <configure>
	if (error == 0) {
    d266:	4605      	mov	r5, r0
    d268:	b130      	cbz	r0, d278 <transceive+0x36>
	spi_context_release(&dev_data->ctx, error);
    d26a:	4629      	mov	r1, r5
    d26c:	4630      	mov	r0, r6
    d26e:	f7ff ffc5 	bl	d1fc <spi_context_release>
}
    d272:	4628      	mov	r0, r5
    d274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
    d278:	2501      	movs	r5, #1
    d27a:	f886 505c 	strb.w	r5, [r6, #92]	; 0x5c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
    d27e:	462b      	mov	r3, r5
    d280:	463a      	mov	r2, r7
    d282:	4641      	mov	r1, r8
    d284:	4630      	mov	r0, r6
    d286:	f7ff ff45 	bl	d114 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
    d28a:	2200      	movs	r2, #0
    d28c:	4629      	mov	r1, r5
    d28e:	4630      	mov	r0, r6
    d290:	f7ff ff70 	bl	d174 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    d294:	4620      	mov	r0, r4
    d296:	f7f8 fc15 	bl	5ac4 <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    d29a:	4630      	mov	r0, r6
    d29c:	f7f8 fbbc 	bl	5a18 <spi_context_wait_for_completion>
    d2a0:	4605      	mov	r5, r0
    d2a2:	e7e2      	b.n	d26a <transceive+0x28>

0000d2a4 <spi_nrfx_transceive>:
{
    d2a4:	b510      	push	{r4, lr}
    d2a6:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
    d2a8:	2400      	movs	r4, #0
    d2aa:	9401      	str	r4, [sp, #4]
    d2ac:	9400      	str	r4, [sp, #0]
    d2ae:	f7ff ffc8 	bl	d242 <transceive>
}
    d2b2:	b002      	add	sp, #8
    d2b4:	bd10      	pop	{r4, pc}

0000d2b6 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
    d2b6:	b508      	push	{r3, lr}
    d2b8:	2200      	movs	r2, #0
    d2ba:	2101      	movs	r1, #1
    d2bc:	200c      	movs	r0, #12
    d2be:	f7ff fb04 	bl	c8ca <z_arm_irq_priority_set>
    d2c2:	bd08      	pop	{r3, pc}

0000d2c4 <pinctrl_apply_state>:
{
    d2c4:	b510      	push	{r4, lr}
    d2c6:	b082      	sub	sp, #8
    d2c8:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    d2ca:	aa01      	add	r2, sp, #4
    d2cc:	f000 faf1 	bl	d8b2 <pinctrl_lookup_state>
	if (ret < 0) {
    d2d0:	2800      	cmp	r0, #0
    d2d2:	db05      	blt.n	d2e0 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
    d2d4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d2d6:	6822      	ldr	r2, [r4, #0]
    d2d8:	7919      	ldrb	r1, [r3, #4]
    d2da:	6818      	ldr	r0, [r3, #0]
    d2dc:	f7f9 fa2c 	bl	6738 <pinctrl_configure_pins>
}
    d2e0:	b002      	add	sp, #8
    d2e2:	bd10      	pop	{r4, pc}

0000d2e4 <spi_nrfx_init>:
{
    d2e4:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    d2e6:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    d2e8:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    d2ea:	2100      	movs	r1, #0
    d2ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d2ee:	f7ff ffe9 	bl	d2c4 <pinctrl_apply_state>
	if (err < 0) {
    d2f2:	2800      	cmp	r0, #0
    d2f4:	db0a      	blt.n	d30c <spi_nrfx_init+0x28>
	dev_config->irq_connect();
    d2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d2f8:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
    d2fa:	4628      	mov	r0, r5
    d2fc:	f7f8 fcd4 	bl	5ca8 <spi_context_cs_configure_all>
	if (err < 0) {
    d300:	2800      	cmp	r0, #0
    d302:	db03      	blt.n	d30c <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    d304:	4628      	mov	r0, r5
    d306:	f7ff ff58 	bl	d1ba <spi_context_unlock_unconditionally>
	return 0;
    d30a:	2000      	movs	r0, #0
}
    d30c:	bd38      	pop	{r3, r4, r5, pc}

0000d30e <z_impl_gpio_pin_configure>:
{
    d30e:	b538      	push	{r3, r4, r5, lr}
    d310:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    d312:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    d314:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    d316:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    d31a:	d007      	beq.n	d32c <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    d31c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    d320:	d004      	beq.n	d32c <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    d322:	f012 0f01 	tst.w	r2, #1
    d326:	d001      	beq.n	d32c <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    d328:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    d32c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    d330:	f013 0f01 	tst.w	r3, #1
    d334:	d00a      	beq.n	d34c <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d336:	6823      	ldr	r3, [r4, #0]
    d338:	f04f 0c01 	mov.w	ip, #1
    d33c:	fa0c fc01 	lsl.w	ip, ip, r1
    d340:	ea43 030c 	orr.w	r3, r3, ip
    d344:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    d346:	682b      	ldr	r3, [r5, #0]
    d348:	4798      	blx	r3
}
    d34a:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d34c:	6823      	ldr	r3, [r4, #0]
    d34e:	f04f 0c01 	mov.w	ip, #1
    d352:	fa0c fc01 	lsl.w	ip, ip, r1
    d356:	ea23 030c 	bic.w	r3, r3, ip
    d35a:	6023      	str	r3, [r4, #0]
    d35c:	e7f3      	b.n	d346 <z_impl_gpio_pin_configure+0x38>

0000d35e <gpio_pin_configure_dt>:
{
    d35e:	b508      	push	{r3, lr}
    d360:	4603      	mov	r3, r0
    d362:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    d364:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    d366:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    d368:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    d36a:	ea42 020c 	orr.w	r2, r2, ip
    d36e:	f7ff ffce 	bl	d30e <z_impl_gpio_pin_configure>
}
    d372:	bd08      	pop	{r3, pc}

0000d374 <gpio_pin_set_raw>:
{
    d374:	b508      	push	{r3, lr}
	if (value != 0)	{
    d376:	b132      	cbz	r2, d386 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    d378:	2301      	movs	r3, #1
    d37a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    d37e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    d380:	68db      	ldr	r3, [r3, #12]
    d382:	4798      	blx	r3
}
    d384:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    d386:	2301      	movs	r3, #1
    d388:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    d38c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    d38e:	691b      	ldr	r3, [r3, #16]
    d390:	4798      	blx	r3
	return ret;
    d392:	e7f7      	b.n	d384 <gpio_pin_set_raw+0x10>

0000d394 <gpio_pin_set>:
{
    d394:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
    d396:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    d398:	681c      	ldr	r4, [r3, #0]
    d39a:	2301      	movs	r3, #1
    d39c:	408b      	lsls	r3, r1
    d39e:	421c      	tst	r4, r3
    d3a0:	d002      	beq.n	d3a8 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
    d3a2:	fab2 f282 	clz	r2, r2
    d3a6:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
    d3a8:	f7ff ffe4 	bl	d374 <gpio_pin_set_raw>
}
    d3ac:	bd10      	pop	{r4, pc}

0000d3ae <disable_sync>:
{
    d3ae:	b530      	push	{r4, r5, lr}
    d3b0:	b085      	sub	sp, #20
	struct driver_data_sync *data = dev->data;
    d3b2:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    d3b4:	6845      	ldr	r5, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
    d3b6:	a903      	add	r1, sp, #12
    d3b8:	4620      	mov	r0, r4
    d3ba:	f7fd fe4f 	bl	b05c <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    d3be:	7d2a      	ldrb	r2, [r5, #20]
    d3c0:	f012 0f01 	tst.w	r2, #1
    d3c4:	d10d      	bne.n	d3e2 <disable_sync+0x34>
    d3c6:	4603      	mov	r3, r0
	} else if (rc == 1) {
    d3c8:	2801      	cmp	r0, #1
    d3ca:	d003      	beq.n	d3d4 <disable_sync+0x26>
	} else if (rc == 0) {
    d3cc:	b950      	cbnz	r0, d3e4 <disable_sync+0x36>
		rc = -EINVAL;
    d3ce:	f06f 0315 	mvn.w	r3, #21
    d3d2:	e007      	b.n	d3e4 <disable_sync+0x36>
	return gpio_pin_set(spec->port, spec->pin, value);
    d3d4:	2200      	movs	r2, #0
    d3d6:	7c29      	ldrb	r1, [r5, #16]
    d3d8:	68e8      	ldr	r0, [r5, #12]
    d3da:	f7ff ffdb 	bl	d394 <gpio_pin_set>
    d3de:	4603      	mov	r3, r0
    d3e0:	e000      	b.n	d3e4 <disable_sync+0x36>
		rc = 0;
    d3e2:	2300      	movs	r3, #0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    d3e4:	2200      	movs	r2, #0
    d3e6:	9200      	str	r2, [sp, #0]
    d3e8:	9903      	ldr	r1, [sp, #12]
    d3ea:	4620      	mov	r0, r4
    d3ec:	f7fd fe41 	bl	b072 <onoff_sync_finalize>
}
    d3f0:	b005      	add	sp, #20
    d3f2:	bd30      	pop	{r4, r5, pc}

0000d3f4 <enable_sync>:
{
    d3f4:	b570      	push	{r4, r5, r6, lr}
    d3f6:	b084      	sub	sp, #16
    d3f8:	460c      	mov	r4, r1
	struct driver_data_sync *data = dev->data;
    d3fa:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    d3fc:	6846      	ldr	r6, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
    d3fe:	a903      	add	r1, sp, #12
    d400:	4628      	mov	r0, r5
    d402:	f7fd fe2b 	bl	b05c <onoff_sync_lock>
	if ((rc == 0)
    d406:	4603      	mov	r3, r0
    d408:	b918      	cbnz	r0, d412 <enable_sync+0x1e>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    d40a:	7d32      	ldrb	r2, [r6, #20]
    d40c:	f012 0f01 	tst.w	r2, #1
    d410:	d008      	beq.n	d424 <enable_sync+0x30>
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    d412:	2201      	movs	r2, #1
    d414:	9200      	str	r2, [sp, #0]
    d416:	4622      	mov	r2, r4
    d418:	9903      	ldr	r1, [sp, #12]
    d41a:	4628      	mov	r0, r5
    d41c:	f7fd fe29 	bl	b072 <onoff_sync_finalize>
}
    d420:	b004      	add	sp, #16
    d422:	bd70      	pop	{r4, r5, r6, pc}
    d424:	2201      	movs	r2, #1
    d426:	7c31      	ldrb	r1, [r6, #16]
    d428:	68f0      	ldr	r0, [r6, #12]
    d42a:	f7ff ffb3 	bl	d394 <gpio_pin_set>
    d42e:	4603      	mov	r3, r0
    d430:	e7ef      	b.n	d412 <enable_sync+0x1e>

0000d432 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    d432:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d434:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    d436:	f04f 0120 	mov.w	r1, #32
    d43a:	f3ef 8311 	mrs	r3, BASEPRI
    d43e:	f381 8812 	msr	BASEPRI_MAX, r1
    d442:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d446:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d44a:	b131      	cbz	r1, d45a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d44c:	2100      	movs	r1, #0
    d44e:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    d452:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d456:	2101      	movs	r1, #1
    d458:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    d45a:	f383 8811 	msr	BASEPRI, r3
    d45e:	f3bf 8f6f 	isb	sy
}
    d462:	4770      	bx	lr

0000d464 <uarte_nrfx_isr_int>:
{
    d464:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    d466:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    d468:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    d46a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    d46e:	f413 7f80 	tst.w	r3, #256	; 0x100
    d472:	d002      	beq.n	d47a <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d474:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    d478:	b9d3      	cbnz	r3, d4b0 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d47a:	686b      	ldr	r3, [r5, #4]
    d47c:	f013 0f10 	tst.w	r3, #16
    d480:	d015      	beq.n	d4ae <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    d482:	f04f 0220 	mov.w	r2, #32
    d486:	f3ef 8311 	mrs	r3, BASEPRI
    d48a:	f382 8812 	msr	BASEPRI_MAX, r2
    d48e:	f3bf 8f6f 	isb	sy
    d492:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d496:	b112      	cbz	r2, d49e <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d498:	2200      	movs	r2, #0
    d49a:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    d49e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d4a2:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    d4a6:	f383 8811 	msr	BASEPRI, r3
    d4aa:	f3bf 8f6f 	isb	sy
}
    d4ae:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    d4b0:	f7ff ffbf 	bl	d432 <endtx_isr>
    d4b4:	e7e1      	b.n	d47a <uarte_nrfx_isr_int+0x16>

0000d4b6 <uarte_nrfx_configure>:
{
    d4b6:	b570      	push	{r4, r5, r6, lr}
    d4b8:	b082      	sub	sp, #8
    d4ba:	4605      	mov	r5, r0
    d4bc:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    d4be:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    d4c0:	794b      	ldrb	r3, [r1, #5]
    d4c2:	2b01      	cmp	r3, #1
    d4c4:	d006      	beq.n	d4d4 <uarte_nrfx_configure+0x1e>
    d4c6:	2b03      	cmp	r3, #3
    d4c8:	d011      	beq.n	d4ee <uarte_nrfx_configure+0x38>
    d4ca:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    d4ce:	4610      	mov	r0, r2
    d4d0:	b002      	add	sp, #8
    d4d2:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    d4d4:	2300      	movs	r3, #0
    d4d6:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d4da:	79a3      	ldrb	r3, [r4, #6]
    d4dc:	2b03      	cmp	r3, #3
    d4de:	d146      	bne.n	d56e <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    d4e0:	79e3      	ldrb	r3, [r4, #7]
    d4e2:	b143      	cbz	r3, d4f6 <uarte_nrfx_configure+0x40>
    d4e4:	2b01      	cmp	r3, #1
    d4e6:	d015      	beq.n	d514 <uarte_nrfx_configure+0x5e>
    d4e8:	f06f 0285 	mvn.w	r2, #133	; 0x85
    d4ec:	e7ef      	b.n	d4ce <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d4ee:	2310      	movs	r3, #16
    d4f0:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    d4f4:	e7f1      	b.n	d4da <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    d4f6:	2300      	movs	r3, #0
    d4f8:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    d4fc:	2300      	movs	r3, #0
    d4fe:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    d502:	7923      	ldrb	r3, [r4, #4]
    d504:	2b01      	cmp	r3, #1
    d506:	d02a      	beq.n	d55e <uarte_nrfx_configure+0xa8>
    d508:	2b02      	cmp	r3, #2
    d50a:	d024      	beq.n	d556 <uarte_nrfx_configure+0xa0>
    d50c:	b133      	cbz	r3, d51c <uarte_nrfx_configure+0x66>
    d50e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    d512:	e7dc      	b.n	d4ce <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    d514:	2301      	movs	r3, #1
    d516:	f88d 3000 	strb.w	r3, [sp]
		break;
    d51a:	e7ef      	b.n	d4fc <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    d51c:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d520:	6821      	ldr	r1, [r4, #0]
    d522:	4628      	mov	r0, r5
    d524:	f7f8 fd20 	bl	5f68 <baudrate_set>
    d528:	4602      	mov	r2, r0
    d52a:	bb18      	cbnz	r0, d574 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    d52c:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    d52e:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d530:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    d534:	f89d 0002 	ldrb.w	r0, [sp, #2]
    d538:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    d53a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d53e:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    d540:	f89d 0000 	ldrb.w	r0, [sp]
    d544:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d546:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    d54a:	3604      	adds	r6, #4
    d54c:	e894 0003 	ldmia.w	r4, {r0, r1}
    d550:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    d554:	e7bb      	b.n	d4ce <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d556:	230e      	movs	r3, #14
    d558:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    d55c:	e7e0      	b.n	d520 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d55e:	230e      	movs	r3, #14
    d560:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    d564:	f44f 7380 	mov.w	r3, #256	; 0x100
    d568:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    d56c:	e7d8      	b.n	d520 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    d56e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    d572:	e7ac      	b.n	d4ce <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    d574:	f06f 0285 	mvn.w	r2, #133	; 0x85
    d578:	e7a9      	b.n	d4ce <uarte_nrfx_configure+0x18>

0000d57a <uarte_nrfx_config_get>:
{
    d57a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    d57c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    d57e:	3304      	adds	r3, #4
    d580:	e893 0003 	ldmia.w	r3, {r0, r1}
    d584:	e882 0003 	stmia.w	r2, {r0, r1}
}
    d588:	2000      	movs	r0, #0
    d58a:	4770      	bx	lr

0000d58c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    d58c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d58e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d590:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d594:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d598:	4770      	bx	lr

0000d59a <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    d59a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d59c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    d59e:	685b      	ldr	r3, [r3, #4]
    d5a0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d5a4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d5a8:	b929      	cbnz	r1, d5b6 <is_tx_ready+0x1c>
    d5aa:	b933      	cbnz	r3, d5ba <is_tx_ready+0x20>
    d5ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    d5b0:	b92b      	cbnz	r3, d5be <is_tx_ready+0x24>
    d5b2:	2000      	movs	r0, #0
    d5b4:	4770      	bx	lr
    d5b6:	2001      	movs	r0, #1
    d5b8:	4770      	bx	lr
    d5ba:	2000      	movs	r0, #0
    d5bc:	4770      	bx	lr
    d5be:	2001      	movs	r0, #1
}
    d5c0:	4770      	bx	lr

0000d5c2 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    d5c2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d5c4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d5c6:	2208      	movs	r2, #8
    d5c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    d5cc:	4770      	bx	lr

0000d5ce <tx_start>:
{
    d5ce:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    d5d0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d5d2:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d5d4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d5d8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5dc:	2200      	movs	r2, #0
    d5de:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    d5e2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    d5e6:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    d5ea:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d5ee:	685b      	ldr	r3, [r3, #4]
    d5f0:	f013 0f10 	tst.w	r3, #16
    d5f4:	d102      	bne.n	d5fc <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5f6:	2301      	movs	r3, #1
    d5f8:	60a3      	str	r3, [r4, #8]
}
    d5fa:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    d5fc:	2101      	movs	r1, #1
    d5fe:	f7ff ffe0 	bl	d5c2 <uarte_enable>
    p_reg->INTENSET = mask;
    d602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    d606:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    d60a:	e7f4      	b.n	d5f6 <tx_start+0x28>

0000d60c <uarte_nrfx_poll_in>:
{
    d60c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    d60e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    d610:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d612:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d614:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d618:	b15a      	cbz	r2, d632 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    d61a:	6962      	ldr	r2, [r4, #20]
    d61c:	7812      	ldrb	r2, [r2, #0]
    d61e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d620:	2000      	movs	r0, #0
    d622:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d626:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d62a:	2201      	movs	r2, #1
    d62c:	601a      	str	r2, [r3, #0]
}
    d62e:	bc10      	pop	{r4}
    d630:	4770      	bx	lr
		return -1;
    d632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d636:	e7fa      	b.n	d62e <uarte_nrfx_poll_in+0x22>

0000d638 <k_msleep>:
{
    d638:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    d63a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d63e:	17c1      	asrs	r1, r0, #31
    d640:	03c9      	lsls	r1, r1, #15
    d642:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d646:	03c0      	lsls	r0, r0, #15
    d648:	f240 33e7 	movw	r3, #999	; 0x3e7
    d64c:	18c0      	adds	r0, r0, r3
    d64e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d652:	f04f 0300 	mov.w	r3, #0
    d656:	f141 0100 	adc.w	r1, r1, #0
    d65a:	f7f2 fd7b 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    d65e:	f7fc fe69 	bl	a334 <z_impl_k_sleep>
}
    d662:	bd08      	pop	{r3, pc}

0000d664 <wait_tx_ready>:
{
    d664:	b570      	push	{r4, r5, r6, lr}
    d666:	4606      	mov	r6, r0
    d668:	e013      	b.n	d692 <wait_tx_ready+0x2e>
		if (res) {
    d66a:	b17d      	cbz	r5, d68c <wait_tx_ready+0x28>
	__asm__ volatile(
    d66c:	f04f 0320 	mov.w	r3, #32
    d670:	f3ef 8411 	mrs	r4, BASEPRI
    d674:	f383 8812 	msr	BASEPRI_MAX, r3
    d678:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    d67c:	4630      	mov	r0, r6
    d67e:	f7ff ff8c 	bl	d59a <is_tx_ready>
    d682:	b998      	cbnz	r0, d6ac <wait_tx_ready+0x48>
	__asm__ volatile(
    d684:	f384 8811 	msr	BASEPRI, r4
    d688:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    d68c:	2001      	movs	r0, #1
    d68e:	f7ff ffd3 	bl	d638 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    d692:	2464      	movs	r4, #100	; 0x64
    d694:	4630      	mov	r0, r6
    d696:	f7ff ff80 	bl	d59a <is_tx_ready>
    d69a:	4605      	mov	r5, r0
    d69c:	2800      	cmp	r0, #0
    d69e:	d1e4      	bne.n	d66a <wait_tx_ready+0x6>
    d6a0:	2001      	movs	r0, #1
    d6a2:	f000 f9e8 	bl	da76 <nrfx_busy_wait>
    d6a6:	3c01      	subs	r4, #1
    d6a8:	d1f4      	bne.n	d694 <wait_tx_ready+0x30>
    d6aa:	e7de      	b.n	d66a <wait_tx_ready+0x6>
}
    d6ac:	4620      	mov	r0, r4
    d6ae:	bd70      	pop	{r4, r5, r6, pc}

0000d6b0 <pinctrl_apply_state>:
{
    d6b0:	b510      	push	{r4, lr}
    d6b2:	b082      	sub	sp, #8
    d6b4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    d6b6:	aa01      	add	r2, sp, #4
    d6b8:	f000 f8fb 	bl	d8b2 <pinctrl_lookup_state>
	if (ret < 0) {
    d6bc:	2800      	cmp	r0, #0
    d6be:	db05      	blt.n	d6cc <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
    d6c0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d6c2:	6822      	ldr	r2, [r4, #0]
    d6c4:	7919      	ldrb	r1, [r3, #4]
    d6c6:	6818      	ldr	r0, [r3, #0]
    d6c8:	f7f9 f836 	bl	6738 <pinctrl_configure_pins>
}
    d6cc:	b002      	add	sp, #8
    d6ce:	bd10      	pop	{r4, pc}

0000d6d0 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6d4:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    d6d6:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    d6d8:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    d6da:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d6de:	2100      	movs	r1, #0
    d6e0:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    d6e4:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    d6e8:	68f8      	ldr	r0, [r7, #12]
    d6ea:	f7ff ffe1 	bl	d6b0 <pinctrl_apply_state>
	if (err < 0) {
    d6ee:	1e05      	subs	r5, r0, #0
    d6f0:	db35      	blt.n	d75e <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    d6f2:	f108 0104 	add.w	r1, r8, #4
    d6f6:	4620      	mov	r0, r4
    d6f8:	f7ff fedd 	bl	d4b6 <uarte_nrfx_configure>
	if (err) {
    d6fc:	4605      	mov	r5, r0
    d6fe:	bb70      	cbnz	r0, d75e <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    d700:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    d702:	f013 0f02 	tst.w	r3, #2
    d706:	d12d      	bne.n	d764 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d708:	2308      	movs	r3, #8
    d70a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    d70e:	7a3b      	ldrb	r3, [r7, #8]
    d710:	b95b      	cbnz	r3, d72a <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d712:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    d716:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    d71a:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d71e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    d722:	2301      	movs	r3, #1
    d724:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d728:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    d72a:	687b      	ldr	r3, [r7, #4]
    d72c:	f013 0f02 	tst.w	r3, #2
    d730:	d103      	bne.n	d73a <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    d732:	f44f 7380 	mov.w	r3, #256	; 0x100
    d736:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d73a:	687b      	ldr	r3, [r7, #4]
    d73c:	f013 0f10 	tst.w	r3, #16
    d740:	d003      	beq.n	d74a <uarte_instance_init+0x7a>
    d742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    d746:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    d74a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d74e:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d752:	2300      	movs	r3, #0
    d754:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d758:	2301      	movs	r3, #1
    d75a:	60b3      	str	r3, [r6, #8]
    d75c:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    d75e:	4628      	mov	r0, r5
    d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    d764:	4641      	mov	r1, r8
    d766:	4630      	mov	r0, r6
    d768:	f7f8 fcd4 	bl	6114 <endtx_stoptx_ppi_init>
		if (err < 0) {
    d76c:	2800      	cmp	r0, #0
    d76e:	dacb      	bge.n	d708 <uarte_instance_init+0x38>
			return err;
    d770:	4605      	mov	r5, r0
    d772:	e7f4      	b.n	d75e <uarte_instance_init+0x8e>

0000d774 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    d774:	b510      	push	{r4, lr}
    d776:	4604      	mov	r4, r0
    d778:	2200      	movs	r2, #0
    d77a:	2101      	movs	r1, #1
    d77c:	2008      	movs	r0, #8
    d77e:	f7ff f8a4 	bl	c8ca <z_arm_irq_priority_set>
    d782:	2008      	movs	r0, #8
    d784:	f7ff f897 	bl	c8b6 <arch_irq_enable>
    d788:	2100      	movs	r1, #0
    d78a:	4620      	mov	r0, r4
    d78c:	f7ff ffa0 	bl	d6d0 <uarte_instance_init>
    d790:	bd10      	pop	{r4, pc}

0000d792 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    d792:	4770      	bx	lr

0000d794 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    d794:	1a40      	subs	r0, r0, r1
}
    d796:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d79a:	4770      	bx	lr

0000d79c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d79c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    d7a0:	009b      	lsls	r3, r3, #2
    d7a2:	b29b      	uxth	r3, r3
    d7a4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    d7a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d7ac:	2200      	movs	r2, #0
    d7ae:	601a      	str	r2, [r3, #0]
    d7b0:	681b      	ldr	r3, [r3, #0]
}
    d7b2:	4770      	bx	lr

0000d7b4 <absolute_time_to_cc>:
}
    d7b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d7b8:	4770      	bx	lr

0000d7ba <full_int_lock>:
	__asm__ volatile(
    d7ba:	f04f 0320 	mov.w	r3, #32
    d7be:	f3ef 8011 	mrs	r0, BASEPRI
    d7c2:	f383 8812 	msr	BASEPRI_MAX, r3
    d7c6:	f3bf 8f6f 	isb	sy
}
    d7ca:	4770      	bx	lr

0000d7cc <full_int_unlock>:
	__asm__ volatile(
    d7cc:	f380 8811 	msr	BASEPRI, r0
    d7d0:	f3bf 8f6f 	isb	sy
}
    d7d4:	4770      	bx	lr

0000d7d6 <set_absolute_alarm>:
{
    d7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7d8:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    d7da:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    d7de:	f7f8 fcef 	bl	61c0 <get_comparator>
    d7e2:	4607      	mov	r7, r0
    d7e4:	e019      	b.n	d81a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    d7e6:	2013      	movs	r0, #19
    d7e8:	f001 fce0 	bl	f1ac <z_impl_k_busy_wait>
}
    d7ec:	e022      	b.n	d834 <set_absolute_alarm+0x5e>
		event_clear(chan);
    d7ee:	4630      	mov	r0, r6
    d7f0:	f7ff ffd4 	bl	d79c <event_clear>
		event_enable(chan);
    d7f4:	4630      	mov	r0, r6
    d7f6:	f7f8 fceb 	bl	61d0 <event_enable>
		set_comparator(chan, cc_val);
    d7fa:	4629      	mov	r1, r5
    d7fc:	4630      	mov	r0, r6
    d7fe:	f7f8 fcd5 	bl	61ac <set_comparator>
		now2 = counter();
    d802:	f7f8 fcf9 	bl	61f8 <counter>
	} while ((now2 != now) &&
    d806:	4284      	cmp	r4, r0
    d808:	d01e      	beq.n	d848 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    d80a:	1c81      	adds	r1, r0, #2
    d80c:	4628      	mov	r0, r5
    d80e:	f7ff ffc1 	bl	d794 <counter_sub>
	} while ((now2 != now) &&
    d812:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d816:	d917      	bls.n	d848 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    d818:	462f      	mov	r7, r5
		now = counter();
    d81a:	f7f8 fced 	bl	61f8 <counter>
    d81e:	4604      	mov	r4, r0
		set_comparator(chan, now);
    d820:	4601      	mov	r1, r0
    d822:	4630      	mov	r0, r6
    d824:	f7f8 fcc2 	bl	61ac <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    d828:	4621      	mov	r1, r4
    d82a:	4638      	mov	r0, r7
    d82c:	f7ff ffb2 	bl	d794 <counter_sub>
    d830:	2801      	cmp	r0, #1
    d832:	d0d8      	beq.n	d7e6 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    d834:	1ca7      	adds	r7, r4, #2
    d836:	4639      	mov	r1, r7
    d838:	4628      	mov	r0, r5
    d83a:	f7ff ffab 	bl	d794 <counter_sub>
    d83e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d842:	d9d4      	bls.n	d7ee <set_absolute_alarm+0x18>
			cc_val = now + 2;
    d844:	463d      	mov	r5, r7
    d846:	e7d2      	b.n	d7ee <set_absolute_alarm+0x18>
}
    d848:	4628      	mov	r0, r5
    d84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d84c <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
    d84c:	b138      	cbz	r0, d85e <z_nrf_rtc_timer_capture_task_address_get+0x12>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
    d84e:	3010      	adds	r0, #16
    d850:	0080      	lsls	r0, r0, #2
    d852:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
    d854:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
    d858:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
	return nrf_rtc_task_address_get(RTC, task);
    d85c:	4770      	bx	lr
		return 0;
    d85e:	2000      	movs	r0, #0
}
    d860:	4770      	bx	lr

0000d862 <compare_set>:
{
    d862:	b5f0      	push	{r4, r5, r6, r7, lr}
    d864:	b083      	sub	sp, #12
    d866:	4604      	mov	r4, r0
    d868:	4617      	mov	r7, r2
    d86a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    d86c:	f7f8 fcca 	bl	6204 <compare_int_lock>
    d870:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    d872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d874:	9301      	str	r3, [sp, #4]
    d876:	9b08      	ldr	r3, [sp, #32]
    d878:	9300      	str	r3, [sp, #0]
    d87a:	463a      	mov	r2, r7
    d87c:	462b      	mov	r3, r5
    d87e:	4620      	mov	r0, r4
    d880:	f7f8 fdac 	bl	63dc <compare_set_nolocks>
    d884:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    d886:	4631      	mov	r1, r6
    d888:	4620      	mov	r0, r4
    d88a:	f7f8 fd13 	bl	62b4 <compare_int_unlock>
}
    d88e:	4628      	mov	r0, r5
    d890:	b003      	add	sp, #12
    d892:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d894 <z_nrf_rtc_timer_set>:
{
    d894:	b500      	push	{lr}
    d896:	b083      	sub	sp, #12
	return compare_set(chan, target_time, handler, user_data);
    d898:	9905      	ldr	r1, [sp, #20]
    d89a:	9101      	str	r1, [sp, #4]
    d89c:	9904      	ldr	r1, [sp, #16]
    d89e:	9100      	str	r1, [sp, #0]
    d8a0:	f7ff ffdf 	bl	d862 <compare_set>
}
    d8a4:	b003      	add	sp, #12
    d8a6:	f85d fb04 	ldr.w	pc, [sp], #4

0000d8aa <sys_clock_cycle_get_32>:
{
    d8aa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    d8ac:	f7f8 fd76 	bl	639c <z_nrf_rtc_timer_read>
}
    d8b0:	bd08      	pop	{r3, pc}

0000d8b2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    d8b2:	b410      	push	{r4}
	*state = &config->states[0];
    d8b4:	6843      	ldr	r3, [r0, #4]
    d8b6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    d8b8:	e001      	b.n	d8be <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    d8ba:	3408      	adds	r4, #8
    d8bc:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    d8be:	6814      	ldr	r4, [r2, #0]
    d8c0:	7a03      	ldrb	r3, [r0, #8]
    d8c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d8c6:	3b01      	subs	r3, #1
    d8c8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d8cc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    d8d0:	429c      	cmp	r4, r3
    d8d2:	d804      	bhi.n	d8de <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    d8d4:	7963      	ldrb	r3, [r4, #5]
    d8d6:	428b      	cmp	r3, r1
    d8d8:	d1ef      	bne.n	d8ba <pinctrl_lookup_state+0x8>
			return 0;
    d8da:	2000      	movs	r0, #0
    d8dc:	e001      	b.n	d8e2 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    d8de:	f06f 0001 	mvn.w	r0, #1
}
    d8e2:	bc10      	pop	{r4}
    d8e4:	4770      	bx	lr

0000d8e6 <nrf_pin_configure>:
{
    d8e6:	b510      	push	{r4, lr}
    d8e8:	b082      	sub	sp, #8
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    d8ea:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    d8ee:	d001      	beq.n	d8f4 <nrf_pin_configure+0xe>
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d8f0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    d8f2:	2100      	movs	r1, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    d8f4:	2400      	movs	r4, #0
    d8f6:	9401      	str	r4, [sp, #4]
    d8f8:	9300      	str	r3, [sp, #0]
    d8fa:	f3c0 1381 	ubfx	r3, r0, #6, #2
    d8fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d902:	f7f8 fed5 	bl	66b0 <nrf_gpio_cfg>
}
    d906:	b002      	add	sp, #8
    d908:	bd10      	pop	{r4, pc}

0000d90a <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
    d90a:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
    d90c:	290f      	cmp	r1, #15
    d90e:	d806      	bhi.n	d91e <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
    d910:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
    d914:	3110      	adds	r1, #16
    d916:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
    d91a:	2000      	movs	r0, #0
    d91c:	4770      	bx	lr
		return -EINVAL;
    d91e:	f06f 0015 	mvn.w	r0, #21
}
    d922:	4770      	bx	lr

0000d924 <mbox_nrf_mtu_get>:
}
    d924:	2000      	movs	r0, #0
    d926:	4770      	bx	lr

0000d928 <mbox_nrf_max_channels_get>:
}
    d928:	2010      	movs	r0, #16
    d92a:	4770      	bx	lr

0000d92c <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    d92c:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    d92e:	f7fc fffb 	bl	a928 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    d932:	bd08      	pop	{r3, pc}

0000d934 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    d934:	b510      	push	{r4, lr}
    d936:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    d938:	f7f5 fad6 	bl	2ee8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    d93c:	f7f5 fba6 	bl	308c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    d940:	4620      	mov	r0, r4
    d942:	f7ff fff3 	bl	d92c <hw_cc3xx_init_internal>
	return res;
}
    d946:	bd10      	pop	{r4, pc}

0000d948 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    d948:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    d94c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    d950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    d954:	2a07      	cmp	r2, #7
    d956:	d001      	beq.n	d95c <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    d958:	2000      	movs	r0, #0
    d95a:	4770      	bx	lr
                    switch(var2)
    d95c:	3b02      	subs	r3, #2
    d95e:	2b00      	cmp	r3, #0
    d960:	d804      	bhi.n	d96c <nrf53_errata_42+0x24>
    d962:	e8df f003 	tbb	[pc, r3]
    d966:	01          	.byte	0x01
    d967:	00          	.byte	0x00
    d968:	2001      	movs	r0, #1
    d96a:	4770      	bx	lr
                            return false;
    d96c:	2000      	movs	r0, #0
    #endif
}
    d96e:	4770      	bx	lr

0000d970 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    d970:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    d974:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    d978:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    d97c:	2a07      	cmp	r2, #7
    d97e:	d001      	beq.n	d984 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    d980:	2000      	movs	r0, #0
    d982:	4770      	bx	lr
                    switch(var2)
    d984:	2b04      	cmp	r3, #4
    d986:	d007      	beq.n	d998 <nrf53_errata_46+0x28>
    d988:	d808      	bhi.n	d99c <nrf53_errata_46+0x2c>
    d98a:	3b02      	subs	r3, #2
    d98c:	2b01      	cmp	r3, #1
    d98e:	d801      	bhi.n	d994 <nrf53_errata_46+0x24>
    d990:	2001      	movs	r0, #1
    #endif
}
    d992:	4770      	bx	lr
                            return false;
    d994:	2000      	movs	r0, #0
    d996:	4770      	bx	lr
                            return false;
    d998:	2000      	movs	r0, #0
    d99a:	4770      	bx	lr
                            return false;
    d99c:	2000      	movs	r0, #0
    d99e:	4770      	bx	lr

0000d9a0 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    d9a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    d9a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    d9a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    d9ac:	2a07      	cmp	r2, #7
    d9ae:	d001      	beq.n	d9b4 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    d9b0:	2000      	movs	r0, #0
    d9b2:	4770      	bx	lr
                    switch(var2)
    d9b4:	3b02      	subs	r3, #2
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d804      	bhi.n	d9c4 <nrf53_errata_49+0x24>
    d9ba:	e8df f003 	tbb	[pc, r3]
    d9be:	01          	.byte	0x01
    d9bf:	00          	.byte	0x00
    d9c0:	2001      	movs	r0, #1
    d9c2:	4770      	bx	lr
                            return false;
    d9c4:	2000      	movs	r0, #0
    #endif
}
    d9c6:	4770      	bx	lr

0000d9c8 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    d9c8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    d9cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    d9d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    d9d4:	2a07      	cmp	r2, #7
    d9d6:	d001      	beq.n	d9dc <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    d9d8:	2000      	movs	r0, #0
    d9da:	4770      	bx	lr
                            return true;
    d9dc:	2001      	movs	r0, #1
    #endif
}
    d9de:	4770      	bx	lr

0000d9e0 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    d9e0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    d9e4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    d9e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    d9ec:	2a07      	cmp	r2, #7
    d9ee:	d001      	beq.n	d9f4 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    d9f0:	2000      	movs	r0, #0
    d9f2:	4770      	bx	lr
                    switch(var2)
    d9f4:	3b02      	subs	r3, #2
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	d804      	bhi.n	da04 <nrf53_errata_64+0x24>
    d9fa:	e8df f003 	tbb	[pc, r3]
    d9fe:	01          	.byte	0x01
    d9ff:	00          	.byte	0x00
    da00:	2001      	movs	r0, #1
    da02:	4770      	bx	lr
                            return false;
    da04:	2000      	movs	r0, #0
    #endif
}
    da06:	4770      	bx	lr

0000da08 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    da08:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    da0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    da10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    da14:	2a07      	cmp	r2, #7
    da16:	d001      	beq.n	da1c <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    da18:	2000      	movs	r0, #0
    da1a:	4770      	bx	lr
                    switch(var2)
    da1c:	3b02      	subs	r3, #2
    da1e:	2b00      	cmp	r3, #0
    da20:	d804      	bhi.n	da2c <nrf53_errata_69+0x24>
    da22:	e8df f003 	tbb	[pc, r3]
    da26:	01          	.byte	0x01
    da27:	00          	.byte	0x00
    da28:	2001      	movs	r0, #1
    da2a:	4770      	bx	lr
                            return false;
    da2c:	2000      	movs	r0, #0
    #endif
}
    da2e:	4770      	bx	lr

0000da30 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    da30:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    da34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    da38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    da3c:	2a07      	cmp	r2, #7
    da3e:	d001      	beq.n	da44 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    da40:	2000      	movs	r0, #0
    da42:	4770      	bx	lr
                    switch(var2)
    da44:	3b02      	subs	r3, #2
    da46:	2b00      	cmp	r3, #0
    da48:	d804      	bhi.n	da54 <nrf53_errata_97+0x24>
    da4a:	e8df f003 	tbb	[pc, r3]
    da4e:	01          	.byte	0x01
    da4f:	00          	.byte	0x00
    da50:	2001      	movs	r0, #1
    da52:	4770      	bx	lr
                            return false;
    da54:	2000      	movs	r0, #0
    #endif
}
    da56:	4770      	bx	lr

0000da58 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    da58:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    da5c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    da60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    da64:	2a07      	cmp	r2, #7
    da66:	d001      	beq.n	da6c <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    da68:	2000      	movs	r0, #0
    da6a:	4770      	bx	lr
                            return true;
    da6c:	2001      	movs	r0, #1
    #endif
}
    da6e:	4770      	bx	lr

0000da70 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    da70:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    da72:	4780      	blx	r0
}
    da74:	bd08      	pop	{r3, pc}

0000da76 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    da76:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    da78:	f001 fb98 	bl	f1ac <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    da7c:	bd08      	pop	{r3, pc}

0000da7e <nrf_clock_is_running>:
    switch (domain)
    da7e:	2903      	cmp	r1, #3
    da80:	d82f      	bhi.n	dae2 <nrf_clock_is_running+0x64>
    da82:	e8df f001 	tbb	[pc, r1]
    da86:	0f02      	.short	0x0f02
    da88:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    da8a:	b122      	cbz	r2, da96 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    da8c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    da90:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    da94:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    da96:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    da9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    da9e:	d122      	bne.n	dae6 <nrf_clock_is_running+0x68>
    return false;
    daa0:	2000      	movs	r0, #0
    daa2:	4770      	bx	lr
            if (p_clk_src != NULL)
    daa4:	b122      	cbz	r2, dab0 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    daa6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    daaa:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    daae:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dab0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    dab4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    dab8:	d117      	bne.n	daea <nrf_clock_is_running+0x6c>
    return false;
    daba:	2000      	movs	r0, #0
    dabc:	4770      	bx	lr
            if (p_clk_src != NULL)
    dabe:	b122      	cbz	r2, daca <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    dac0:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    dac4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    dac8:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    daca:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    dace:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    dad2:	d10c      	bne.n	daee <nrf_clock_is_running+0x70>
    return false;
    dad4:	2000      	movs	r0, #0
    dad6:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    dad8:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    dadc:	f3c0 4000 	ubfx	r0, r0, #16, #1
    dae0:	4770      	bx	lr
    switch (domain)
    dae2:	2000      	movs	r0, #0
    dae4:	4770      	bx	lr
                return true;
    dae6:	2001      	movs	r0, #1
    dae8:	4770      	bx	lr
                return true;
    daea:	2001      	movs	r0, #1
    daec:	4770      	bx	lr
                return true;
    daee:	2001      	movs	r0, #1
}
    daf0:	4770      	bx	lr

0000daf2 <clock_initial_lfclksrc_get>:
}
    daf2:	2001      	movs	r0, #1
    daf4:	4770      	bx	lr

0000daf6 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    daf6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    daf8:	2005      	movs	r0, #5
    dafa:	f7f5 fc53 	bl	33a4 <arch_irq_is_enabled>
    dafe:	b100      	cbz	r0, db02 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    db00:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    db02:	2005      	movs	r0, #5
    db04:	f7fe fed7 	bl	c8b6 <arch_irq_enable>
}
    db08:	e7fa      	b.n	db00 <nrfx_power_clock_irq_init+0xa>

0000db0a <clock_stop>:
{
    db0a:	b570      	push	{r4, r5, r6, lr}
    db0c:	b082      	sub	sp, #8
    db0e:	4606      	mov	r6, r0
    switch (domain)
    db10:	2803      	cmp	r0, #3
    db12:	d855      	bhi.n	dbc0 <clock_stop+0xb6>
    db14:	e8df f000 	tbb	[pc, r0]
    db18:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    db1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db20:	2202      	movs	r2, #2
    db22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db26:	2200      	movs	r2, #0
    db28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    db2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db30:	2201      	movs	r2, #1
    db32:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    db34:	2301      	movs	r3, #1
    db36:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    db3a:	429e      	cmp	r6, r3
    db3c:	d02b      	beq.n	db96 <clock_stop+0x8c>
    db3e:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    db40:	f242 7410 	movw	r4, #10000	; 0x2710
    db44:	e02f      	b.n	dba6 <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    db46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db4a:	2201      	movs	r2, #1
    db4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db50:	2100      	movs	r1, #0
    db52:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    db56:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db5a:	605a      	str	r2, [r3, #4]
}
    db5c:	e7ea      	b.n	db34 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    db5e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db62:	f44f 7200 	mov.w	r2, #512	; 0x200
    db66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db6a:	2200      	movs	r2, #0
    db6c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    db70:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db74:	2201      	movs	r2, #1
    db76:	625a      	str	r2, [r3, #36]	; 0x24
}
    db78:	e7dc      	b.n	db34 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    db7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    db82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db86:	2200      	movs	r2, #0
    db88:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    db8c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db90:	2201      	movs	r2, #1
    db92:	61da      	str	r2, [r3, #28]
}
    db94:	e7ce      	b.n	db34 <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    db96:	f10d 0507 	add.w	r5, sp, #7
    db9a:	e7d1      	b.n	db40 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    db9c:	2001      	movs	r0, #1
    db9e:	f7ff ff6a 	bl	da76 <nrfx_busy_wait>
    dba2:	3c01      	subs	r4, #1
    dba4:	d00c      	beq.n	dbc0 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    dba6:	462a      	mov	r2, r5
    dba8:	4631      	mov	r1, r6
    dbaa:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    dbae:	f7ff ff66 	bl	da7e <nrf_clock_is_running>
    dbb2:	b128      	cbz	r0, dbc0 <clock_stop+0xb6>
    dbb4:	2d00      	cmp	r5, #0
    dbb6:	d0f1      	beq.n	db9c <clock_stop+0x92>
    dbb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbbc:	2b01      	cmp	r3, #1
    dbbe:	d0ed      	beq.n	db9c <clock_stop+0x92>
}
    dbc0:	b002      	add	sp, #8
    dbc2:	bd70      	pop	{r4, r5, r6, pc}

0000dbc4 <clock_lfclksrc_tweak>:
{
    dbc4:	b538      	push	{r3, r4, r5, lr}
    dbc6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    dbc8:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    dbca:	2b02      	cmp	r3, #2
    dbcc:	d006      	beq.n	dbdc <clock_lfclksrc_tweak+0x18>
    dbce:	2b01      	cmp	r3, #1
    dbd0:	d000      	beq.n	dbd4 <clock_lfclksrc_tweak+0x10>
    dbd2:	2300      	movs	r3, #0
    if (!is_correct_clk)
    dbd4:	461d      	mov	r5, r3
    dbd6:	b11b      	cbz	r3, dbe0 <clock_lfclksrc_tweak+0x1c>
}
    dbd8:	4628      	mov	r0, r5
    dbda:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    dbdc:	2301      	movs	r3, #1
    dbde:	e7f9      	b.n	dbd4 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    dbe0:	2000      	movs	r0, #0
    dbe2:	f7ff ff92 	bl	db0a <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    dbe6:	f7ff ff84 	bl	daf2 <clock_initial_lfclksrc_get>
    dbea:	7020      	strb	r0, [r4, #0]
    dbec:	e7f4      	b.n	dbd8 <clock_lfclksrc_tweak+0x14>

0000dbee <nrfx_clock_enable>:
{
    dbee:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    dbf0:	f7ff ff81 	bl	daf6 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    dbf4:	f7ff ff7d 	bl	daf2 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    dbf8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dbfc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    dc00:	2201      	movs	r2, #1
    dc02:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    dc06:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    dc0a:	bd08      	pop	{r3, pc}

0000dc0c <nrfx_clock_start>:
    switch (domain)
    dc0c:	2803      	cmp	r0, #3
    dc0e:	d871      	bhi.n	dcf4 <nrfx_clock_start+0xe8>
    dc10:	e8df f000 	tbb	[pc, r0]
    dc14:	62544802 	.word	0x62544802
{
    dc18:	b500      	push	{lr}
    dc1a:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dc1c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    dc20:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    dc24:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    dc28:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dc2c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    dc30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    dc34:	d11d      	bne.n	dc72 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    dc36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc3a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    dc3e:	f013 0f01 	tst.w	r3, #1
    dc42:	d11b      	bne.n	dc7c <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    dc44:	f7ff ff55 	bl	daf2 <clock_initial_lfclksrc_get>
    dc48:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    dc4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    dc50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc54:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc58:	2200      	movs	r2, #0
    dc5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dc5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    dc62:	2202      	movs	r2, #2
    dc64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc68:	2201      	movs	r2, #1
    dc6a:	609a      	str	r2, [r3, #8]
}
    dc6c:	b003      	add	sp, #12
    dc6e:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    dc72:	f10d 0007 	add.w	r0, sp, #7
    dc76:	f7ff ffa5 	bl	dbc4 <clock_lfclksrc_tweak>
    dc7a:	e7e7      	b.n	dc4c <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    dc7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc80:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    dc84:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    dc88:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    dc8c:	f10d 0007 	add.w	r0, sp, #7
    dc90:	f7ff ff98 	bl	dbc4 <clock_lfclksrc_tweak>
    dc94:	2800      	cmp	r0, #0
    dc96:	d0d9      	beq.n	dc4c <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    dc98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dc9c:	2202      	movs	r2, #2
    dc9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    dca2:	e7e3      	b.n	dc6c <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dca4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dca8:	2200      	movs	r2, #0
    dcaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dcae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    dcb2:	2201      	movs	r2, #1
    dcb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcb8:	601a      	str	r2, [r3, #0]
}
    dcba:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dcc0:	2200      	movs	r2, #0
    dcc2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    dcc6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    dcca:	f44f 7200 	mov.w	r2, #512	; 0x200
    dcce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcd2:	2201      	movs	r2, #1
    dcd4:	621a      	str	r2, [r3, #32]
}
    dcd6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dcd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    dcdc:	2200      	movs	r2, #0
    dcde:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    dce2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    dce6:	f44f 7280 	mov.w	r2, #256	; 0x100
    dcea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dcee:	2201      	movs	r2, #1
    dcf0:	619a      	str	r2, [r3, #24]
}
    dcf2:	4770      	bx	lr
    dcf4:	4770      	bx	lr

0000dcf6 <nrfx_clock_stop>:
{
    dcf6:	b508      	push	{r3, lr}
    clock_stop(domain);
    dcf8:	f7ff ff07 	bl	db0a <clock_stop>
}
    dcfc:	bd08      	pop	{r3, pc}

0000dcfe <nrf_gpiote_event_configure>:
{
    dcfe:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    dd00:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    dd04:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    dd08:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    dd0c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    dd10:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dd14:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    dd18:	0212      	lsls	r2, r2, #8
    dd1a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    dd1e:	041b      	lsls	r3, r3, #16
    dd20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dd24:	431a      	orrs	r2, r3
    dd26:	4314      	orrs	r4, r2
    dd28:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    dd2c:	bc10      	pop	{r4}
    dd2e:	4770      	bx	lr

0000dd30 <nrf_gpiote_task_configure>:
{
    dd30:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    dd32:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    dd36:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    dd3a:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    dd3e:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    dd42:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dd46:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    dd4a:	0212      	lsls	r2, r2, #8
    dd4c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    dd50:	041b      	lsls	r3, r3, #16
    dd52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dd56:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    dd58:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dd5c:	051b      	lsls	r3, r3, #20
    dd5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    dd62:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dd64:	4314      	orrs	r4, r2
    dd66:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    dd6a:	bc10      	pop	{r4}
    dd6c:	4770      	bx	lr

0000dd6e <nrf_gpio_cfg_sense_set>:
{
    dd6e:	b500      	push	{lr}
    dd70:	b085      	sub	sp, #20
    dd72:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    dd76:	f10d 030f 	add.w	r3, sp, #15
    dd7a:	9301      	str	r3, [sp, #4]
    dd7c:	2100      	movs	r1, #0
    dd7e:	9100      	str	r1, [sp, #0]
    dd80:	460b      	mov	r3, r1
    dd82:	460a      	mov	r2, r1
    dd84:	f7f9 fa2c 	bl	71e0 <nrf_gpio_reconfigure>
}
    dd88:	b005      	add	sp, #20
    dd8a:	f85d fb04 	ldr.w	pc, [sp], #4

0000dd8e <pin_is_task_output>:
{
    dd8e:	b510      	push	{r4, lr}
    dd90:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    dd92:	f7f9 fad7 	bl	7344 <pin_is_output>
    dd96:	b128      	cbz	r0, dda4 <pin_is_task_output+0x16>
    dd98:	4620      	mov	r0, r4
    dd9a:	f7f9 fabd 	bl	7318 <pin_in_use_by_te>
    dd9e:	b118      	cbz	r0, dda8 <pin_is_task_output+0x1a>
    dda0:	2001      	movs	r0, #1
    dda2:	e000      	b.n	dda6 <pin_is_task_output+0x18>
    dda4:	2000      	movs	r0, #0
}
    dda6:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    dda8:	2000      	movs	r0, #0
    ddaa:	e7fc      	b.n	dda6 <pin_is_task_output+0x18>

0000ddac <pin_is_input>:
{
    ddac:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    ddae:	f7f9 fac9 	bl	7344 <pin_is_output>
    ddb2:	f080 0001 	eor.w	r0, r0, #1
}
    ddb6:	b2c0      	uxtb	r0, r0
    ddb8:	bd08      	pop	{r3, pc}

0000ddba <gpiote_polarity_to_trigger>:
}
    ddba:	4770      	bx	lr

0000ddbc <gpiote_trigger_to_polarity>:
}
    ddbc:	4770      	bx	lr

0000ddbe <is_level>:
}
    ddbe:	2803      	cmp	r0, #3
    ddc0:	bf94      	ite	ls
    ddc2:	2000      	movls	r0, #0
    ddc4:	2001      	movhi	r0, #1
    ddc6:	4770      	bx	lr

0000ddc8 <latch_pending_read_and_check>:
{
    ddc8:	b510      	push	{r4, lr}
    ddca:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    ddcc:	4602      	mov	r2, r0
    ddce:	2102      	movs	r1, #2
    ddd0:	2000      	movs	r0, #0
    ddd2:	f7f9 fa77 	bl	72c4 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    ddd6:	2300      	movs	r3, #0
    ddd8:	2b01      	cmp	r3, #1
    ddda:	d804      	bhi.n	dde6 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    dddc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    dde0:	b91a      	cbnz	r2, ddea <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    dde2:	3301      	adds	r3, #1
    dde4:	e7f8      	b.n	ddd8 <latch_pending_read_and_check+0x10>
    return false;
    dde6:	2000      	movs	r0, #0
}
    dde8:	bd10      	pop	{r4, pc}
            return true;
    ddea:	2001      	movs	r0, #1
    ddec:	e7fc      	b.n	dde8 <latch_pending_read_and_check+0x20>

0000ddee <nrf_spim_configure>:
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    ddee:	3a00      	subs	r2, #0
    ddf0:	bf18      	it	ne
    ddf2:	2201      	movne	r2, #1
    switch (spi_mode)
    ddf4:	2902      	cmp	r1, #2
    ddf6:	d009      	beq.n	de0c <nrf_spim_configure+0x1e>
    ddf8:	2903      	cmp	r1, #3
    ddfa:	d00a      	beq.n	de12 <nrf_spim_configure+0x24>
    ddfc:	2901      	cmp	r1, #1
    ddfe:	d002      	beq.n	de06 <nrf_spim_configure+0x18>
    p_reg->CONFIG = config;
    de00:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
    de04:	4770      	bx	lr
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    de06:	f042 0202 	orr.w	r2, r2, #2
        break;
    de0a:	e7f9      	b.n	de00 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    de0c:	f042 0204 	orr.w	r2, r2, #4
        break;
    de10:	e7f6      	b.n	de00 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    de12:	f042 0206 	orr.w	r2, r2, #6
        break;
    de16:	e7f3      	b.n	de00 <nrf_spim_configure+0x12>

0000de18 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    de18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    de1c:	d003      	beq.n	de26 <spim_pin_uninit+0xe>
{
    de1e:	b508      	push	{r3, lr}
    nrf_gpio_cfg_default(pin);
    de20:	f7f9 fede 	bl	7be0 <nrf_gpio_cfg_default>
}
    de24:	bd08      	pop	{r3, pc}
    de26:	4770      	bx	lr

0000de28 <set_ss_pin_state>:
{
    de28:	b508      	push	{r3, lr}
    if (p_cb->use_hw_ss)
    de2a:	7f83      	ldrb	r3, [r0, #30]
    de2c:	f013 0f04 	tst.w	r3, #4
    de30:	d109      	bne.n	de46 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    de32:	7fc0      	ldrb	r0, [r0, #31]
    de34:	28ff      	cmp	r0, #255	; 0xff
    de36:	d006      	beq.n	de46 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    de38:	f013 0f02 	tst.w	r3, #2
    de3c:	d101      	bne.n	de42 <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
    de3e:	f081 0101 	eor.w	r1, r1, #1
        nrf_gpio_pin_write(p_cb->ss_pin,
    de42:	f7f9 fee3 	bl	7c0c <nrf_gpio_pin_write>
}
    de46:	bd08      	pop	{r3, pc}

0000de48 <finish_transfer>:
{
    de48:	b510      	push	{r4, lr}
    de4a:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
    de4c:	2100      	movs	r1, #0
    de4e:	f7ff ffeb 	bl	de28 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    de52:	2300      	movs	r3, #0
    de54:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    de56:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    de58:	4620      	mov	r0, r4
    de5a:	f850 3b08 	ldr.w	r3, [r0], #8
    de5e:	6861      	ldr	r1, [r4, #4]
    de60:	4798      	blx	r3
}
    de62:	bd10      	pop	{r4, pc}

0000de64 <spim_int_enable>:
    if (!enable)
    de64:	b919      	cbnz	r1, de6e <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
    de66:	2340      	movs	r3, #64	; 0x40
    de68:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    de6c:	4770      	bx	lr
    p_reg->INTENSET = mask;
    de6e:	2340      	movs	r3, #64	; 0x40
    de70:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
    de74:	4770      	bx	lr

0000de76 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    de76:	f011 0f01 	tst.w	r1, #1
    de7a:	d009      	beq.n	de90 <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    de7c:	2301      	movs	r3, #1
    de7e:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    de82:	f011 0f02 	tst.w	r1, #2
    de86:	d007      	beq.n	de98 <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    de88:	2301      	movs	r3, #1
    de8a:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    de8e:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    de90:	2300      	movs	r3, #0
    de92:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    de96:	e7f4      	b.n	de82 <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    de98:	2300      	movs	r3, #0
    de9a:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    de9e:	4770      	bx	lr

0000dea0 <irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dea0:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    dea4:	b902      	cbnz	r2, dea8 <irq_handler+0x8>
    dea6:	4770      	bx	lr
{
    dea8:	b508      	push	{r3, lr}
    deaa:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    deac:	2200      	movs	r2, #0
    deae:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    deb2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
    deb6:	4608      	mov	r0, r1
    deb8:	f7ff ffc6 	bl	de48 <finish_transfer>
}
    debc:	bd08      	pop	{r3, pc}

0000debe <spim_abort>:
{
    debe:	b570      	push	{r4, r5, r6, lr}
    dec0:	4605      	mov	r5, r0
    dec2:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dec4:	2301      	movs	r3, #1
    dec6:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    dec8:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    deca:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    dece:	b923      	cbnz	r3, deda <spim_abort+0x1c>
    ded0:	2001      	movs	r0, #1
    ded2:	f7ff fdd0 	bl	da76 <nrfx_busy_wait>
    ded6:	3c01      	subs	r4, #1
    ded8:	d1f7      	bne.n	deca <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
    deda:	2300      	movs	r3, #0
    dedc:	7773      	strb	r3, [r6, #29]
}
    dede:	bd70      	pop	{r4, r5, r6, pc}

0000dee0 <xfer_completeness_check>:
{
    dee0:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    dee2:	7b0a      	ldrb	r2, [r1, #12]
    dee4:	2a03      	cmp	r2, #3
    dee6:	d838      	bhi.n	df5a <xfer_completeness_check+0x7a>
    dee8:	e8df f002 	tbb	[pc, r2]
    deec:	02163029 	.word	0x02163029
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    def0:	688a      	ldr	r2, [r1, #8]
    def2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
    def6:	d004      	beq.n	df02 <xfer_completeness_check+0x22>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    def8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    defc:	6908      	ldr	r0, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    defe:	4290      	cmp	r0, r2
    df00:	d10f      	bne.n	df22 <xfer_completeness_check+0x42>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    df02:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    df04:	f412 2f80 	tst.w	r2, #262144	; 0x40000
    df08:	d129      	bne.n	df5e <xfer_completeness_check+0x7e>
    df0a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
    df0e:	6949      	ldr	r1, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    df10:	4291      	cmp	r1, r2
    df12:	d106      	bne.n	df22 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
    df14:	2001      	movs	r0, #1
    df16:	4770      	bx	lr
    df18:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    df1c:	6908      	ldr	r0, [r1, #16]
    df1e:	4290      	cmp	r0, r2
    df20:	d006      	beq.n	df30 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    df22:	2000      	movs	r0, #0
    df24:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    df28:	2206      	movs	r2, #6
    df2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    df2e:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    df30:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
    df34:	6949      	ldr	r1, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    df36:	4291      	cmp	r1, r2
    df38:	d1f3      	bne.n	df22 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
    df3a:	2001      	movs	r0, #1
    df3c:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    df3e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    df42:	6909      	ldr	r1, [r1, #16]
    df44:	4291      	cmp	r1, r2
    df46:	d1ec      	bne.n	df22 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
    df48:	2001      	movs	r0, #1
    df4a:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
    df4c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    df50:	6909      	ldr	r1, [r1, #16]
    df52:	4291      	cmp	r1, r2
    df54:	d1e5      	bne.n	df22 <xfer_completeness_check+0x42>
    bool transfer_complete = true;
    df56:	2001      	movs	r0, #1
}
    df58:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
    df5a:	2001      	movs	r0, #1
    df5c:	4770      	bx	lr
    bool transfer_complete = true;
    df5e:	2001      	movs	r0, #1
    df60:	4770      	bx	lr

0000df62 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    df62:	f011 0f01 	tst.w	r1, #1
    df66:	d009      	beq.n	df7c <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    df68:	2301      	movs	r3, #1
    df6a:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    df6e:	f011 0f02 	tst.w	r1, #2
    df72:	d007      	beq.n	df84 <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    df74:	2301      	movs	r3, #1
    df76:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    df7a:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    df7c:	2300      	movs	r3, #0
    df7e:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    df82:	e7f4      	b.n	df6e <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    df84:	2300      	movs	r3, #0
    df86:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    df8a:	4770      	bx	lr

0000df8c <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
    df8c:	b300      	cbz	r0, dfd0 <metal_device_open+0x44>
{
    df8e:	b570      	push	{r4, r5, r6, lr}
    df90:	b082      	sub	sp, #8
    df92:	460c      	mov	r4, r1
    df94:	4615      	mov	r5, r2
    df96:	4606      	mov	r6, r0
	if (!bus_name || !strlen(bus_name) ||
    df98:	f7fe fd64 	bl	ca64 <strlen>
    df9c:	b190      	cbz	r0, dfc4 <metal_device_open+0x38>
    df9e:	b18c      	cbz	r4, dfc4 <metal_device_open+0x38>
	    !dev_name || !strlen(dev_name) ||
    dfa0:	4620      	mov	r0, r4
    dfa2:	f7fe fd5f 	bl	ca64 <strlen>
    dfa6:	b168      	cbz	r0, dfc4 <metal_device_open+0x38>
    dfa8:	b165      	cbz	r5, dfc4 <metal_device_open+0x38>
	error = metal_bus_find(bus_name, &bus);
    dfaa:	a901      	add	r1, sp, #4
    dfac:	4630      	mov	r0, r6
    dfae:	f7fa fbf5 	bl	879c <metal_bus_find>
	if (error)
    dfb2:	b928      	cbnz	r0, dfc0 <metal_device_open+0x34>
	if (!bus->ops.dev_open)
    dfb4:	9801      	ldr	r0, [sp, #4]
    dfb6:	6883      	ldr	r3, [r0, #8]
    dfb8:	b13b      	cbz	r3, dfca <metal_device_open+0x3e>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
    dfba:	462a      	mov	r2, r5
    dfbc:	4621      	mov	r1, r4
    dfbe:	4798      	blx	r3
}
    dfc0:	b002      	add	sp, #8
    dfc2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    dfc4:	f06f 0015 	mvn.w	r0, #21
    dfc8:	e7fa      	b.n	dfc0 <metal_device_open+0x34>
		return -ENODEV;
    dfca:	f06f 0012 	mvn.w	r0, #18
    dfce:	e7f7      	b.n	dfc0 <metal_device_open+0x34>
		return -EINVAL;
    dfd0:	f06f 0015 	mvn.w	r0, #21
}
    dfd4:	4770      	bx	lr

0000dfd6 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
    dfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfda:	b088      	sub	sp, #32
    dfdc:	4604      	mov	r4, r0
    dfde:	4688      	mov	r8, r1
    dfe0:	4617      	mov	r7, r2
    dfe2:	461e      	mov	r6, r3
    dfe4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	const struct metal_io_ops nops = {
    dfe6:	2220      	movs	r2, #32
    dfe8:	2100      	movs	r1, #0
    dfea:	4668      	mov	r0, sp
    dfec:	f7fe fd9a 	bl	cb24 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
    dff0:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
    dff4:	6067      	str	r7, [r4, #4]
	io->size = size;
    dff6:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
    dff8:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
    dffa:	2d1f      	cmp	r5, #31
    dffc:	d912      	bls.n	e024 <metal_io_init+0x4e>
		/* avoid overflow */
		io->page_mask = -1UL;
    dffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e002:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
    e004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e006:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
    e008:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e00a:	b183      	cbz	r3, e02e <metal_io_init+0x58>
    e00c:	3418      	adds	r4, #24
    e00e:	469c      	mov	ip, r3
    e010:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    e014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e016:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    e01a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
    e01e:	b008      	add	sp, #32
    e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
    e024:	2301      	movs	r3, #1
    e026:	40ab      	lsls	r3, r5
    e028:	3b01      	subs	r3, #1
    e02a:	6123      	str	r3, [r4, #16]
    e02c:	e7ea      	b.n	e004 <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
    e02e:	3418      	adds	r4, #24
    e030:	466d      	mov	r5, sp
    e032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e036:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e03a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    e03e:	e7ee      	b.n	e01e <metal_io_init+0x48>

0000e040 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
    e040:	b530      	push	{r4, r5, lr}
    e042:	b083      	sub	sp, #12
	return (io->virt != METAL_BAD_VA && offset < io->size
    e044:	6804      	ldr	r4, [r0, #0]
		: NULL);
    e046:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e04a:	d032      	beq.n	e0b2 <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
    e04c:	6885      	ldr	r5, [r0, #8]
    e04e:	42a9      	cmp	r1, r5
    e050:	d232      	bcs.n	e0b8 <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
    e052:	eb11 0c04 	adds.w	ip, r1, r4
    e056:	d032      	beq.n	e0be <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
    e058:	185c      	adds	r4, r3, r1
    e05a:	42ac      	cmp	r4, r5
    e05c:	d900      	bls.n	e060 <metal_io_block_read+0x20>
		len = io->size - offset;
    e05e:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
    e060:	6a04      	ldr	r4, [r0, #32]
    e062:	b124      	cbz	r4, e06e <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
    e064:	9300      	str	r3, [sp, #0]
    e066:	2305      	movs	r3, #5
    e068:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
    e06a:	b003      	add	sp, #12
    e06c:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
    e06e:	f3bf 8f5b 	dmb	ish
		while ( len && (
    e072:	4619      	mov	r1, r3
    e074:	e004      	b.n	e080 <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
    e076:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
    e07a:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
    e07e:	3901      	subs	r1, #1
		while ( len && (
    e080:	b159      	cbz	r1, e09a <metal_io_block_read+0x5a>
    e082:	f012 0f03 	tst.w	r2, #3
    e086:	d1f6      	bne.n	e076 <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
    e088:	f01c 0f03 	tst.w	ip, #3
    e08c:	d1f3      	bne.n	e076 <metal_io_block_read+0x36>
    e08e:	e004      	b.n	e09a <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
    e090:	f85c 0b04 	ldr.w	r0, [ip], #4
    e094:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
    e098:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
    e09a:	2903      	cmp	r1, #3
    e09c:	dcf8      	bgt.n	e090 <metal_io_block_read+0x50>
    e09e:	e004      	b.n	e0aa <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
    e0a0:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
    e0a4:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
    e0a8:	3901      	subs	r1, #1
    e0aa:	2900      	cmp	r1, #0
    e0ac:	d1f8      	bne.n	e0a0 <metal_io_block_read+0x60>
	retlen = len;
    e0ae:	4618      	mov	r0, r3
    e0b0:	e7db      	b.n	e06a <metal_io_block_read+0x2a>
		return -ERANGE;
    e0b2:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e0b6:	e7d8      	b.n	e06a <metal_io_block_read+0x2a>
    e0b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e0bc:	e7d5      	b.n	e06a <metal_io_block_read+0x2a>
    e0be:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e0c2:	e7d2      	b.n	e06a <metal_io_block_read+0x2a>

0000e0c4 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
    e0c4:	b530      	push	{r4, r5, lr}
    e0c6:	b083      	sub	sp, #12
    e0c8:	6804      	ldr	r4, [r0, #0]
		: NULL);
    e0ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e0ce:	d031      	beq.n	e134 <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
    e0d0:	6885      	ldr	r5, [r0, #8]
    e0d2:	42a9      	cmp	r1, r5
    e0d4:	d231      	bcs.n	e13a <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
    e0d6:	eb11 0c04 	adds.w	ip, r1, r4
    e0da:	d031      	beq.n	e140 <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
    e0dc:	185c      	adds	r4, r3, r1
    e0de:	42ac      	cmp	r4, r5
    e0e0:	d900      	bls.n	e0e4 <metal_io_block_write+0x20>
		len = io->size - offset;
    e0e2:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
    e0e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e0e6:	b18c      	cbz	r4, e10c <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
    e0e8:	9300      	str	r3, [sp, #0]
    e0ea:	2305      	movs	r3, #5
    e0ec:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
    e0ee:	b003      	add	sp, #12
    e0f0:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
    e0f2:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
    e0f6:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
    e0fa:	3901      	subs	r1, #1
		while ( len && (
    e0fc:	b169      	cbz	r1, e11a <metal_io_block_write+0x56>
    e0fe:	f01c 0f03 	tst.w	ip, #3
    e102:	d1f6      	bne.n	e0f2 <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
    e104:	f012 0f03 	tst.w	r2, #3
    e108:	d1f3      	bne.n	e0f2 <metal_io_block_write+0x2e>
    e10a:	e006      	b.n	e11a <metal_io_block_write+0x56>
    e10c:	4619      	mov	r1, r3
    e10e:	e7f5      	b.n	e0fc <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
    e110:	f852 0b04 	ldr.w	r0, [r2], #4
    e114:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
    e118:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    e11a:	2903      	cmp	r1, #3
    e11c:	dcf8      	bgt.n	e110 <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
    e11e:	b129      	cbz	r1, e12c <metal_io_block_write+0x68>
				*(const unsigned char *)source;
    e120:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
    e124:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
    e128:	3901      	subs	r1, #1
    e12a:	e7f8      	b.n	e11e <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
    e12c:	f3bf 8f5b 	dmb	ish
	retlen = len;
    e130:	4618      	mov	r0, r3
    e132:	e7dc      	b.n	e0ee <metal_io_block_write+0x2a>
		return -ERANGE;
    e134:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e138:	e7d9      	b.n	e0ee <metal_io_block_write+0x2a>
    e13a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e13e:	e7d6      	b.n	e0ee <metal_io_block_write+0x2a>
    e140:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e144:	e7d3      	b.n	e0ee <metal_io_block_write+0x2a>

0000e146 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
    e146:	b530      	push	{r4, r5, lr}
    e148:	b083      	sub	sp, #12
    e14a:	6804      	ldr	r4, [r0, #0]
		: NULL);
    e14c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e150:	d034      	beq.n	e1bc <metal_io_block_set+0x76>
    e152:	461d      	mov	r5, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
    e154:	6883      	ldr	r3, [r0, #8]
    e156:	4299      	cmp	r1, r3
    e158:	d233      	bcs.n	e1c2 <metal_io_block_set+0x7c>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
    e15a:	eb11 0c04 	adds.w	ip, r1, r4
    e15e:	d033      	beq.n	e1c8 <metal_io_block_set+0x82>
		return -ERANGE;
	if ((offset + len) > io->size)
    e160:	186c      	adds	r4, r5, r1
    e162:	429c      	cmp	r4, r3
    e164:	d900      	bls.n	e168 <metal_io_block_set+0x22>
		len = io->size - offset;
    e166:	1a5d      	subs	r5, r3, r1
	retlen = len;
	if (io->ops.block_set) {
    e168:	6a84      	ldr	r4, [r0, #40]	; 0x28
    e16a:	b12c      	cbz	r4, e178 <metal_io_block_set+0x32>
		(*io->ops.block_set)(
    e16c:	9500      	str	r5, [sp, #0]
    e16e:	2305      	movs	r3, #5
    e170:	47a0      	blx	r4
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
    e172:	4628      	mov	r0, r5
}
    e174:	b003      	add	sp, #12
    e176:	bd30      	pop	{r4, r5, pc}
		unsigned int cint = value;
    e178:	4613      	mov	r3, r2
		for (i = 1; i < sizeof(int); i++)
    e17a:	2101      	movs	r1, #1
    e17c:	e004      	b.n	e188 <metal_io_block_set+0x42>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
    e17e:	00c8      	lsls	r0, r1, #3
    e180:	fa02 f000 	lsl.w	r0, r2, r0
    e184:	4303      	orrs	r3, r0
		for (i = 1; i < sizeof(int); i++)
    e186:	3101      	adds	r1, #1
    e188:	2903      	cmp	r1, #3
    e18a:	d9f8      	bls.n	e17e <metal_io_block_set+0x38>
    e18c:	4629      	mov	r1, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    e18e:	b149      	cbz	r1, e1a4 <metal_io_block_set+0x5e>
    e190:	f01c 0f03 	tst.w	ip, #3
    e194:	d006      	beq.n	e1a4 <metal_io_block_set+0x5e>
			*(unsigned char *)ptr = (unsigned char) value;
    e196:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
    e19a:	3901      	subs	r1, #1
    e19c:	e7f7      	b.n	e18e <metal_io_block_set+0x48>
			*(unsigned int *)ptr = cint;
    e19e:	f84c 3b04 	str.w	r3, [ip], #4
						len -= sizeof(int))
    e1a2:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
    e1a4:	2903      	cmp	r1, #3
    e1a6:	dcfa      	bgt.n	e19e <metal_io_block_set+0x58>
    e1a8:	e002      	b.n	e1b0 <metal_io_block_set+0x6a>
			*(unsigned char *)ptr = (unsigned char) value;
    e1aa:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len != 0; ptr++, len--)
    e1ae:	3901      	subs	r1, #1
    e1b0:	2900      	cmp	r1, #0
    e1b2:	d1fa      	bne.n	e1aa <metal_io_block_set+0x64>
		atomic_thread_fence(memory_order_seq_cst);
    e1b4:	f3bf 8f5b 	dmb	ish
	return retlen;
    e1b8:	4628      	mov	r0, r5
    e1ba:	e7db      	b.n	e174 <metal_io_block_set+0x2e>
		return -ERANGE;
    e1bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e1c0:	e7d8      	b.n	e174 <metal_io_block_set+0x2e>
    e1c2:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e1c6:	e7d5      	b.n	e174 <metal_io_block_set+0x2e>
    e1c8:	f06f 0021 	mvn.w	r0, #33	; 0x21
    e1cc:	e7d2      	b.n	e174 <metal_io_block_set+0x2e>

0000e1ce <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
    e1ce:	2000      	movs	r0, #0
    e1d0:	4770      	bx	lr

0000e1d2 <vring_size>:
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    e1d2:	1cc3      	adds	r3, r0, #3
    e1d4:	005b      	lsls	r3, r3, #1
    e1d6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	size = (size + align - 1) & ~(align - 1);
    e1da:	440b      	add	r3, r1
    e1dc:	3b01      	subs	r3, #1
    e1de:	4249      	negs	r1, r1
    e1e0:	400b      	ands	r3, r1
	size += sizeof(struct vring_used) +
    e1e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3

	return size;
}
    e1e6:	3006      	adds	r0, #6
    e1e8:	4770      	bx	lr

0000e1ea <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
    e1ea:	b508      	push	{r3, lr}
	if (!io->ops.offset_to_phys) {
    e1ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e1ee:	b10b      	cbz	r3, e1f4 <metal_io_phys+0xa>
		return (io->physmap && offset < io->size
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
    e1f0:	4798      	blx	r3
}
    e1f2:	bd08      	pop	{r3, pc}
		unsigned long page = (io->page_shift >=
    e1f4:	68c3      	ldr	r3, [r0, #12]
				     0 : offset >> io->page_shift);
    e1f6:	2b1f      	cmp	r3, #31
    e1f8:	d80d      	bhi.n	e216 <metal_io_phys+0x2c>
    e1fa:	fa21 f303 	lsr.w	r3, r1, r3
		return (io->physmap && offset < io->size
    e1fe:	6842      	ldr	r2, [r0, #4]
			: METAL_BAD_PHYS);
    e200:	b15a      	cbz	r2, e21a <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
    e202:	f8d0 c008 	ldr.w	ip, [r0, #8]
    e206:	458c      	cmp	ip, r1
    e208:	d90a      	bls.n	e220 <metal_io_phys+0x36>
			? io->physmap[page] + (offset & io->page_mask)
    e20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e20e:	6902      	ldr	r2, [r0, #16]
    e210:	400a      	ands	r2, r1
			: METAL_BAD_PHYS);
    e212:	1898      	adds	r0, r3, r2
    e214:	e7ed      	b.n	e1f2 <metal_io_phys+0x8>
				     0 : offset >> io->page_shift);
    e216:	2300      	movs	r3, #0
    e218:	e7f1      	b.n	e1fe <metal_io_phys+0x14>
			: METAL_BAD_PHYS);
    e21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e21e:	e7e8      	b.n	e1f2 <metal_io_phys+0x8>
    e220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e224:	e7e5      	b.n	e1f2 <metal_io_phys+0x8>

0000e226 <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
    e226:	b508      	push	{r3, lr}
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    e228:	6803      	ldr	r3, [r0, #0]
    e22a:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e22c:	6883      	ldr	r3, [r0, #8]
    e22e:	4299      	cmp	r1, r3
    e230:	d202      	bcs.n	e238 <metal_io_virt_to_phys+0x12>
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
    e232:	f7ff ffda 	bl	e1ea <metal_io_phys>
}
    e236:	bd08      	pop	{r3, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e238:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e23c:	e7f9      	b.n	e232 <metal_io_virt_to_phys+0xc>

0000e23e <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
    e23e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e242:	4683      	mov	fp, r0
    e244:	4689      	mov	r9, r1
    e246:	4610      	mov	r0, r2
    e248:	4698      	mov	r8, r3
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
    e24a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e24e:	441f      	add	r7, r3

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
    e250:	2500      	movs	r5, #0
    e252:	e001      	b.n	e258 <vq_ring_add_buffer+0x1a>
    e254:	3501      	adds	r5, #1
    e256:	89e0      	ldrh	r0, [r4, #14]
    e258:	42bd      	cmp	r5, r7
    e25a:	da22      	bge.n	e2a2 <vq_ring_add_buffer+0x64>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		/* CACHE: No need to invalidate desc because it is only written by master */
		dp = &desc[idx];
    e25c:	ea4f 1a00 	mov.w	sl, r0, lsl #4
    e260:	eb09 1400 	add.w	r4, r9, r0, lsl #4
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    e264:	eb08 06c5 	add.w	r6, r8, r5, lsl #3
	return metal_io_virt_to_phys(io, buf);
    e268:	f858 1035 	ldr.w	r1, [r8, r5, lsl #3]
    e26c:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
    e270:	f7ff ffd9 	bl	e226 <metal_io_virt_to_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
    e274:	2300      	movs	r3, #0
    e276:	f849 000a 	str.w	r0, [r9, sl]
    e27a:	6063      	str	r3, [r4, #4]
		dp->len = buf_list[i].len;
    e27c:	6872      	ldr	r2, [r6, #4]
    e27e:	60a2      	str	r2, [r4, #8]
		dp->flags = 0;
    e280:	7323      	strb	r3, [r4, #12]
    e282:	7363      	strb	r3, [r4, #13]

		if (i < needed - 1)
    e284:	1e7b      	subs	r3, r7, #1
    e286:	42ab      	cmp	r3, r5
    e288:	dd03      	ble.n	e292 <vq_ring_add_buffer+0x54>
			dp->flags |= VRING_DESC_F_NEXT;
    e28a:	2301      	movs	r3, #1
    e28c:	7323      	strb	r3, [r4, #12]
    e28e:	2300      	movs	r3, #0
    e290:	7363      	strb	r3, [r4, #13]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
    e292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e294:	429d      	cmp	r5, r3
    e296:	dbdd      	blt.n	e254 <vq_ring_add_buffer+0x16>
			dp->flags |= VRING_DESC_F_WRITE;
    e298:	89a3      	ldrh	r3, [r4, #12]
    e29a:	f043 0302 	orr.w	r3, r3, #2
    e29e:	81a3      	strh	r3, [r4, #12]
    e2a0:	e7d8      	b.n	e254 <vq_ring_add_buffer+0x16>
		VRING_FLUSH(desc[idx]);

	}

	return idx;
}
    e2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e2a6 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
    e2a6:	b510      	push	{r4, lr}
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	/* CACHE: desc is never written by slave, no need to invalidate */
	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
    e2a8:	6984      	ldr	r4, [r0, #24]
    e2aa:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	dxp = &vq->vq_descx[desc_idx];

	if (vq->vq_free_cnt == 0) {
    e2ae:	f8b0 e024 	ldrh.w	lr, [r0, #36]	; 0x24
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
    e2b2:	1d8a      	adds	r2, r1, #6
    e2b4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    e2b8:	f8b2 c008 	ldrh.w	ip, [r2, #8]
    e2bc:	44e6      	add	lr, ip
    e2be:	f8a0 e024 	strh.w	lr, [r0, #36]	; 0x24
	dxp->ndescs--;
    e2c2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e2c6:	f8a2 c008 	strh.w	ip, [r2, #8]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
    e2ca:	899a      	ldrh	r2, [r3, #12]
    e2cc:	f012 0f04 	tst.w	r2, #4
    e2d0:	d00f      	beq.n	e2f2 <vq_ring_free_chain+0x4c>
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 *
	 * CACHE: desc.next is never read by slave, no need to flush it.
	 */
	dp->next = vq->vq_desc_head_idx;
    e2d2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e2d4:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
    e2d6:	8581      	strh	r1, [r0, #44]	; 0x2c
}
    e2d8:	bd10      	pop	{r4, pc}
			dp = &vq->vq_ring.desc[dp->next];
    e2da:	89db      	ldrh	r3, [r3, #14]
    e2dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			dxp->ndescs--;
    e2e0:	1d8a      	adds	r2, r1, #6
    e2e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    e2e6:	f8b2 c008 	ldrh.w	ip, [r2, #8]
    e2ea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e2ee:	f8a2 c008 	strh.w	ip, [r2, #8]
		while (dp->flags & VRING_DESC_F_NEXT) {
    e2f2:	899a      	ldrh	r2, [r3, #12]
    e2f4:	f012 0f01 	tst.w	r2, #1
    e2f8:	d1ef      	bne.n	e2da <vq_ring_free_chain+0x34>
    e2fa:	e7ea      	b.n	e2d2 <vq_ring_free_chain+0x2c>

0000e2fc <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
    e2fc:	b410      	push	{r4}
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
    e2fe:	8944      	ldrh	r4, [r0, #10]

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
    e300:	6144      	str	r4, [r0, #20]
	vr->desc = (struct vring_desc *)p;
    e302:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
    e304:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e308:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
    e30a:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    e30e:	3304      	adds	r3, #4
    e310:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
    e312:	3301      	adds	r3, #1
    e314:	4252      	negs	r2, r2
    e316:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
    e318:	6203      	str	r3, [r0, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
    e31a:	6803      	ldr	r3, [r0, #0]
    e31c:	699b      	ldr	r3, [r3, #24]
    e31e:	b19b      	cbz	r3, e348 <vq_ring_init+0x4c>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_DEVICE_ONLY*/
}
    e320:	bc10      	pop	{r4}
    e322:	4770      	bx	lr
			vr->desc[i].next = i + 1;
    e324:	6982      	ldr	r2, [r0, #24]
    e326:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    e32a:	1c59      	adds	r1, r3, #1
    e32c:	81d1      	strh	r1, [r2, #14]
		for (i = 0; i < size - 1; i++)
    e32e:	460b      	mov	r3, r1
    e330:	1e62      	subs	r2, r4, #1
    e332:	429a      	cmp	r2, r3
    e334:	dcf6      	bgt.n	e324 <vq_ring_init+0x28>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
    e336:	6982      	ldr	r2, [r0, #24]
    e338:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    e33c:	2200      	movs	r2, #0
    e33e:	739a      	strb	r2, [r3, #14]
    e340:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    e344:	73da      	strb	r2, [r3, #15]
}
    e346:	e7eb      	b.n	e320 <vq_ring_init+0x24>
		for (i = 0; i < size - 1; i++)
    e348:	2300      	movs	r3, #0
    e34a:	e7f1      	b.n	e330 <vq_ring_init+0x34>

0000e34c <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
    e34c:	6803      	ldr	r3, [r0, #0]
    e34e:	691a      	ldr	r2, [r3, #16]
    e350:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
    e354:	d014      	beq.n	e380 <vq_ring_must_notify+0x34>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
    e356:	699b      	ldr	r3, [r3, #24]
    e358:	b10b      	cbz	r3, e35e <vq_ring_must_notify+0x12>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	}

	return 0;
    e35a:	2000      	movs	r0, #0
    e35c:	4770      	bx	lr
			new_idx = vq->vq_ring.avail->idx;
    e35e:	69c3      	ldr	r3, [r0, #28]
    e360:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
    e362:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_avail_event(&vq->vq_ring);
    e364:	6a01      	ldr	r1, [r0, #32]
    e366:	6940      	ldr	r0, [r0, #20]
    e368:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    e36c:	8889      	ldrh	r1, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
    e36e:	1a52      	subs	r2, r2, r1
    e370:	b292      	uxth	r2, r2
    e372:	3a01      	subs	r2, #1
    e374:	b292      	uxth	r2, r2
    e376:	4293      	cmp	r3, r2
    e378:	bf94      	ite	ls
    e37a:	2000      	movls	r0, #0
    e37c:	2001      	movhi	r0, #1
						prev_idx) != 0;
    e37e:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
    e380:	699b      	ldr	r3, [r3, #24]
    e382:	b10b      	cbz	r3, e388 <vq_ring_must_notify+0x3c>
	return 0;
    e384:	2000      	movs	r0, #0
}
    e386:	4770      	bx	lr
			return (vq->vq_ring.used->flags &
    e388:	6a03      	ldr	r3, [r0, #32]
    e38a:	8818      	ldrh	r0, [r3, #0]
				VRING_USED_F_NO_NOTIFY) == 0;
    e38c:	f080 0001 	eor.w	r0, r0, #1
    e390:	f000 0001 	and.w	r0, r0, #1
    e394:	4770      	bx	lr

0000e396 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
    e396:	b508      	push	{r3, lr}
	if (vq->notify)
    e398:	6903      	ldr	r3, [r0, #16]
    e39a:	b103      	cbz	r3, e39e <vq_ring_notify+0x8>
		vq->notify(vq);
    e39c:	4798      	blx	r3
}
    e39e:	bd08      	pop	{r3, pc}

0000e3a0 <vq_ring_update_avail>:
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
    e3a0:	69c2      	ldr	r2, [r0, #28]
    e3a2:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    e3a6:	8943      	ldrh	r3, [r0, #10]
    e3a8:	3b01      	subs	r3, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
    e3aa:	ea03 030c 	and.w	r3, r3, ip
    e3ae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    e3b2:	8091      	strh	r1, [r2, #4]
	atomic_thread_fence(memory_order_seq_cst);
    e3b4:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.avail->idx++;
    e3b8:	69c2      	ldr	r2, [r0, #28]
    e3ba:	8853      	ldrh	r3, [r2, #2]
    e3bc:	3301      	adds	r3, #1
    e3be:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
    e3c0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    e3c2:	3301      	adds	r3, #1
    e3c4:	84c3      	strh	r3, [r0, #38]	; 0x26
}
    e3c6:	4770      	bx	lr

0000e3c8 <virtqueue_create>:
{
    e3c8:	b510      	push	{r4, lr}
    e3ca:	4604      	mov	r4, r0
    e3cc:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
    e3ce:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
    e3d0:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
    e3d2:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
    e3d4:	891a      	ldrh	r2, [r3, #8]
    e3d6:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
    e3d8:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
    e3da:	9a02      	ldr	r2, [sp, #8]
    e3dc:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
    e3de:	9a03      	ldr	r2, [sp, #12]
    e3e0:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
    e3e2:	685a      	ldr	r2, [r3, #4]
    e3e4:	6819      	ldr	r1, [r3, #0]
    e3e6:	f7ff ff89 	bl	e2fc <vq_ring_init>
}
    e3ea:	2000      	movs	r0, #0
    e3ec:	bd10      	pop	{r4, pc}

0000e3ee <virtqueue_add_buffer>:
{
    e3ee:	b570      	push	{r4, r5, r6, lr}
    e3f0:	b082      	sub	sp, #8
    e3f2:	4604      	mov	r4, r0
	needed = readable + writable;
    e3f4:	18d5      	adds	r5, r2, r3
		head_idx = vq->vq_desc_head_idx;
    e3f6:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
		dxp->cookie = cookie;
    e3f8:	f106 0c06 	add.w	ip, r6, #6
    e3fc:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
    e400:	f8dd e018 	ldr.w	lr, [sp, #24]
    e404:	f8cc e004 	str.w	lr, [ip, #4]
		dxp->ndescs = needed;
    e408:	b2ad      	uxth	r5, r5
    e40a:	f8ac 5008 	strh.w	r5, [ip, #8]
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
    e40e:	9301      	str	r3, [sp, #4]
    e410:	9200      	str	r2, [sp, #0]
    e412:	460b      	mov	r3, r1
    e414:	4632      	mov	r2, r6
    e416:	6981      	ldr	r1, [r0, #24]
    e418:	f7ff ff11 	bl	e23e <vq_ring_add_buffer>
		vq->vq_desc_head_idx = idx;
    e41c:	85a0      	strh	r0, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
    e41e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e420:	1b5b      	subs	r3, r3, r5
    e422:	84a3      	strh	r3, [r4, #36]	; 0x24
		vq_ring_update_avail(vq, head_idx);
    e424:	4631      	mov	r1, r6
    e426:	4620      	mov	r0, r4
    e428:	f7ff ffba 	bl	e3a0 <vq_ring_update_avail>
}
    e42c:	2000      	movs	r0, #0
    e42e:	b002      	add	sp, #8
    e430:	bd70      	pop	{r4, r5, r6, pc}

0000e432 <virtqueue_get_buffer>:
{
    e432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
    e434:	4604      	mov	r4, r0
    e436:	b310      	cbz	r0, e47e <virtqueue_get_buffer+0x4c>
    e438:	460b      	mov	r3, r1
    e43a:	4617      	mov	r7, r2
    e43c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
    e43e:	6a02      	ldr	r2, [r0, #32]
    e440:	8850      	ldrh	r0, [r2, #2]
    e442:	4281      	cmp	r1, r0
    e444:	d01c      	beq.n	e480 <virtqueue_get_buffer+0x4e>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
    e446:	1c48      	adds	r0, r1, #1
    e448:	85e0      	strh	r0, [r4, #46]	; 0x2e
    e44a:	8966      	ldrh	r6, [r4, #10]
    e44c:	3e01      	subs	r6, #1
    e44e:	400e      	ands	r6, r1
	atomic_thread_fence(memory_order_seq_cst);
    e450:	f3bf 8f5b 	dmb	ish
	desc_idx = (uint16_t)uep->id;
    e454:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
    e458:	684d      	ldr	r5, [r1, #4]
    e45a:	b2a9      	uxth	r1, r5
	if (len)
    e45c:	b11b      	cbz	r3, e466 <virtqueue_get_buffer+0x34>
		*len = uep->len;
    e45e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    e462:	6892      	ldr	r2, [r2, #8]
    e464:	601a      	str	r2, [r3, #0]
	vq_ring_free_chain(vq, desc_idx);
    e466:	4620      	mov	r0, r4
    e468:	f7ff ff1d 	bl	e2a6 <vq_ring_free_chain>
	cookie = vq->vq_descx[desc_idx].cookie;
    e46c:	b2ad      	uxth	r5, r5
    e46e:	3506      	adds	r5, #6
    e470:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    e474:	6868      	ldr	r0, [r5, #4]
	vq->vq_descx[desc_idx].cookie = NULL;
    e476:	2300      	movs	r3, #0
    e478:	606b      	str	r3, [r5, #4]
	if (idx)
    e47a:	b107      	cbz	r7, e47e <virtqueue_get_buffer+0x4c>
		*idx = used_idx;
    e47c:	803e      	strh	r6, [r7, #0]
}
    e47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    e480:	2000      	movs	r0, #0
    e482:	e7fc      	b.n	e47e <virtqueue_get_buffer+0x4c>

0000e484 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
    e484:	6983      	ldr	r3, [r0, #24]
    e486:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
    e48a:	6898      	ldr	r0, [r3, #8]
    e48c:	4770      	bx	lr

0000e48e <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
    e48e:	6803      	ldr	r3, [r0, #0]
    e490:	691a      	ldr	r2, [r3, #16]
    e492:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
    e496:	d00c      	beq.n	e4b2 <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
    e498:	699b      	ldr	r3, [r3, #24]
    e49a:	b98b      	cbnz	r3, e4c0 <virtqueue_disable_cb+0x32>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    e49c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    e49e:	8942      	ldrh	r2, [r0, #10]
    e4a0:	1a9b      	subs	r3, r3, r2
    e4a2:	b29b      	uxth	r3, r3
			vring_used_event(&vq->vq_ring) =
    e4a4:	69c2      	ldr	r2, [r0, #28]
    e4a6:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
    e4a8:	3b01      	subs	r3, #1
			vring_used_event(&vq->vq_ring) =
    e4aa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    e4ae:	8093      	strh	r3, [r2, #4]
    e4b0:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
    e4b2:	699b      	ldr	r3, [r3, #24]
    e4b4:	b923      	cbnz	r3, e4c0 <virtqueue_disable_cb+0x32>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
    e4b6:	69c2      	ldr	r2, [r0, #28]
    e4b8:	8813      	ldrh	r3, [r2, #0]
    e4ba:	f043 0301 	orr.w	r3, r3, #1
    e4be:	8013      	strh	r3, [r2, #0]
}
    e4c0:	4770      	bx	lr

0000e4c2 <virtqueue_kick>:
{
    e4c2:	b510      	push	{r4, lr}
    e4c4:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
    e4c6:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
    e4ca:	f7ff ff3f 	bl	e34c <vq_ring_must_notify>
    e4ce:	b910      	cbnz	r0, e4d6 <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
    e4d0:	2300      	movs	r3, #0
    e4d2:	84e3      	strh	r3, [r4, #38]	; 0x26
}
    e4d4:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
    e4d6:	4620      	mov	r0, r4
    e4d8:	f7ff ff5d 	bl	e396 <vq_ring_notify>
    e4dc:	e7f8      	b.n	e4d0 <virtqueue_kick+0xe>

0000e4de <virtqueue_notification>:
{
    e4de:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
    e4e0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
    e4e4:	68c3      	ldr	r3, [r0, #12]
    e4e6:	b103      	cbz	r3, e4ea <virtqueue_notification+0xc>
		vq->callback(vq);
    e4e8:	4798      	blx	r3
}
    e4ea:	bd08      	pop	{r3, pc}

0000e4ec <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
    e4ec:	4684      	mov	ip, r0
    e4ee:	4608      	mov	r0, r1
	unsigned int bit;

	for (bit = start;
    e4f0:	e000      	b.n	e4f4 <metal_bitmap_next_clear_bit+0x8>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
    e4f2:	3001      	adds	r0, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    e4f4:	4290      	cmp	r0, r2
    e4f6:	d208      	bcs.n	e50a <metal_bitmap_next_clear_bit+0x1e>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
    e4f8:	0943      	lsrs	r3, r0, #5
    e4fa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
    e4fe:	f000 011f 	and.w	r1, r0, #31
    e502:	40cb      	lsrs	r3, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
    e504:	f013 0f01 	tst.w	r3, #1
    e508:	d1f3      	bne.n	e4f2 <metal_bitmap_next_clear_bit+0x6>
		;
	return bit;
}
    e50a:	4770      	bx	lr

0000e50c <rpmsg_get_address>:
{
    e50c:	b538      	push	{r3, r4, r5, lr}
    e50e:	4605      	mov	r5, r0
    e510:	460c      	mov	r4, r1
	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
    e512:	460a      	mov	r2, r1
    e514:	2100      	movs	r1, #0
    e516:	f7ff ffe9 	bl	e4ec <metal_bitmap_next_clear_bit>
	if (nextbit < (uint32_t)size) {
    e51a:	4284      	cmp	r4, r0
    e51c:	d90e      	bls.n	e53c <rpmsg_get_address+0x30>
    e51e:	4603      	mov	r3, r0
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
    e520:	f500 6080 	add.w	r0, r0, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e524:	095c      	lsrs	r4, r3, #5
    e526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e52a:	f003 031f 	and.w	r3, r3, #31
    e52e:	2101      	movs	r1, #1
    e530:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
    e534:	431a      	orrs	r2, r3
    e536:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
}
    e53a:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int addr = RPMSG_ADDR_ANY;
    e53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return addr;
    e540:	e7fb      	b.n	e53a <rpmsg_get_address+0x2e>

0000e542 <rpmsg_release_address>:
	if (addr >= 0 && addr < size)
    e542:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
    e546:	d40e      	bmi.n	e566 <rpmsg_release_address+0x24>
    e548:	428a      	cmp	r2, r1
    e54a:	da0c      	bge.n	e566 <rpmsg_release_address+0x24>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    e54c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
    e550:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
    e554:	f002 021f 	and.w	r2, r2, #31
    e558:	2101      	movs	r1, #1
    e55a:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
    e55e:	ea23 0302 	bic.w	r3, r3, r2
    e562:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
}
    e566:	4770      	bx	lr

0000e568 <__metal_mutex_acquire>:

	return ret;
}

static inline void __metal_mutex_acquire(metal_mutex_t *m)
{
    e568:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
    e56a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e572:	f7fb fa17 	bl	99a4 <z_impl_k_sem_take>
	k_sem_take(m, K_FOREVER);
}
    e576:	bd08      	pop	{r3, pc}

0000e578 <rpmsg_unregister_endpoint>:
{
    e578:	b570      	push	{r4, r5, r6, lr}
    e57a:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
    e57c:	6a06      	ldr	r6, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
    e57e:	f106 0558 	add.w	r5, r6, #88	; 0x58
    e582:	4628      	mov	r0, r5
    e584:	f7ff fff0 	bl	e568 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
    e588:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e58a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    e58e:	d10e      	bne.n	e5ae <rpmsg_unregister_endpoint+0x36>
	metal_list_del(&ept->node);
    e590:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
    e594:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e598:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
    e59a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e59c:	6011      	str	r1, [r2, #0]
	node->prev = node;
    e59e:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
    e5a0:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
    e5a2:	2300      	movs	r3, #0
    e5a4:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
    e5a6:	4628      	mov	r0, r5
    e5a8:	f7fb f9d8 	bl	995c <z_impl_k_sem_give>
}
    e5ac:	bd70      	pop	{r4, r5, r6, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
    e5ae:	2180      	movs	r1, #128	; 0x80
    e5b0:	f106 0048 	add.w	r0, r6, #72	; 0x48
    e5b4:	f7ff ffc5 	bl	e542 <rpmsg_release_address>
    e5b8:	e7ea      	b.n	e590 <rpmsg_unregister_endpoint+0x18>

0000e5ba <rpmsg_send_ns_message>:
{
    e5ba:	b510      	push	{r4, lr}
    e5bc:	b08c      	sub	sp, #48	; 0x30
    e5be:	4604      	mov	r4, r0
	ns_msg.flags = flags;
    e5c0:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
    e5c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e5c4:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
    e5c6:	2220      	movs	r2, #32
    e5c8:	4601      	mov	r1, r0
    e5ca:	a802      	add	r0, sp, #8
    e5cc:	f7fe fa30 	bl	ca30 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
    e5d0:	2301      	movs	r3, #1
    e5d2:	9301      	str	r3, [sp, #4]
    e5d4:	2328      	movs	r3, #40	; 0x28
    e5d6:	9300      	str	r3, [sp, #0]
    e5d8:	ab02      	add	r3, sp, #8
    e5da:	2235      	movs	r2, #53	; 0x35
    e5dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e5de:	4620      	mov	r0, r4
    e5e0:	f7fa fa16 	bl	8a10 <rpmsg_send_offchannel_raw>
	if (ret < 0)
    e5e4:	2800      	cmp	r0, #0
    e5e6:	db00      	blt.n	e5ea <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
    e5e8:	2000      	movs	r0, #0
}
    e5ea:	b00c      	add	sp, #48	; 0x30
    e5ec:	bd10      	pop	{r4, pc}

0000e5ee <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
    e5ee:	b138      	cbz	r0, e600 <rpmsg_hold_rx_buffer+0x12>
{
    e5f0:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
    e5f2:	6a00      	ldr	r0, [r0, #32]
    e5f4:	b118      	cbz	r0, e5fe <rpmsg_hold_rx_buffer+0x10>
    e5f6:	b111      	cbz	r1, e5fe <rpmsg_hold_rx_buffer+0x10>
	if (rdev->ops.hold_rx_buffer)
    e5f8:	6f03      	ldr	r3, [r0, #112]	; 0x70
    e5fa:	b103      	cbz	r3, e5fe <rpmsg_hold_rx_buffer+0x10>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
    e5fc:	4798      	blx	r3
}
    e5fe:	bd08      	pop	{r3, pc}
    e600:	4770      	bx	lr

0000e602 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
    e602:	b138      	cbz	r0, e614 <rpmsg_release_rx_buffer+0x12>
{
    e604:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
    e606:	6a00      	ldr	r0, [r0, #32]
    e608:	b118      	cbz	r0, e612 <rpmsg_release_rx_buffer+0x10>
    e60a:	b111      	cbz	r1, e612 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
    e60c:	6f43      	ldr	r3, [r0, #116]	; 0x74
    e60e:	b103      	cbz	r3, e612 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
    e610:	4798      	blx	r3
}
    e612:	bd08      	pop	{r3, pc}
    e614:	4770      	bx	lr

0000e616 <rpmsg_get_tx_payload_buffer>:
{
    e616:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !len)
    e618:	b128      	cbz	r0, e626 <rpmsg_get_tx_payload_buffer+0x10>
    e61a:	6a00      	ldr	r0, [r0, #32]
    e61c:	b118      	cbz	r0, e626 <rpmsg_get_tx_payload_buffer+0x10>
    e61e:	b119      	cbz	r1, e628 <rpmsg_get_tx_payload_buffer+0x12>
	if (rdev->ops.get_tx_payload_buffer)
    e620:	6f83      	ldr	r3, [r0, #120]	; 0x78
    e622:	b11b      	cbz	r3, e62c <rpmsg_get_tx_payload_buffer+0x16>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
    e624:	4798      	blx	r3
}
    e626:	bd08      	pop	{r3, pc}
		return NULL;
    e628:	4608      	mov	r0, r1
    e62a:	e7fc      	b.n	e626 <rpmsg_get_tx_payload_buffer+0x10>
	return NULL;
    e62c:	2000      	movs	r0, #0
    e62e:	e7fa      	b.n	e626 <rpmsg_get_tx_payload_buffer+0x10>

0000e630 <rpmsg_get_endpoint>:
{
    e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e634:	4680      	mov	r8, r0
    e636:	460f      	mov	r7, r1
    e638:	4616      	mov	r6, r2
    e63a:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
    e63c:	6804      	ldr	r4, [r0, #0]
    e63e:	e003      	b.n	e648 <rpmsg_get_endpoint+0x18>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
    e640:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    e644:	d01a      	beq.n	e67c <rpmsg_get_endpoint+0x4c>
	metal_list_for_each(&rdev->endpoints, node) {
    e646:	6824      	ldr	r4, [r4, #0]
    e648:	45a0      	cmp	r8, r4
    e64a:	d01c      	beq.n	e686 <rpmsg_get_endpoint+0x56>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
    e64c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
    e650:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    e654:	d002      	beq.n	e65c <rpmsg_get_endpoint+0x2c>
    e656:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e658:	42b2      	cmp	r2, r6
    e65a:	d015      	beq.n	e688 <rpmsg_get_endpoint+0x58>
		if (name)
    e65c:	2f00      	cmp	r7, #0
    e65e:	d0f2      	beq.n	e646 <rpmsg_get_endpoint+0x16>
			name_match = !strncmp(ept->name, name,
    e660:	2220      	movs	r2, #32
    e662:	4639      	mov	r1, r7
    e664:	4628      	mov	r0, r5
    e666:	f7fe fa1b 	bl	caa0 <strncmp>
		if (!name || !name_match)
    e66a:	2800      	cmp	r0, #0
    e66c:	d1eb      	bne.n	e646 <rpmsg_get_endpoint+0x16>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
    e66e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e672:	d0e5      	beq.n	e640 <rpmsg_get_endpoint+0x10>
    e674:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e676:	454b      	cmp	r3, r9
    e678:	d1e2      	bne.n	e640 <rpmsg_get_endpoint+0x10>
    e67a:	e005      	b.n	e688 <rpmsg_get_endpoint+0x58>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
    e67c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e67e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e682:	d1e0      	bne.n	e646 <rpmsg_get_endpoint+0x16>
    e684:	e000      	b.n	e688 <rpmsg_get_endpoint+0x58>
	return NULL;
    e686:	2500      	movs	r5, #0
}
    e688:	4628      	mov	r0, r5
    e68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e68e <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
    e68e:	b1a0      	cbz	r0, e6ba <rpmsg_destroy_ept+0x2c>
{
    e690:	b510      	push	{r4, lr}
    e692:	4604      	mov	r4, r0
		return;

	rdev = ept->rdev;
    e694:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
    e696:	b15b      	cbz	r3, e6b0 <rpmsg_destroy_ept+0x22>
		return;

	if (ept->name[0] && rdev->support_ns &&
    e698:	7802      	ldrb	r2, [r0, #0]
    e69a:	b132      	cbz	r2, e6aa <rpmsg_destroy_ept+0x1c>
    e69c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    e6a0:	b11b      	cbz	r3, e6aa <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
    e6a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
    e6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e6a8:	d203      	bcs.n	e6b2 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
    e6aa:	4620      	mov	r0, r4
    e6ac:	f7ff ff64 	bl	e578 <rpmsg_unregister_endpoint>
}
    e6b0:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
    e6b2:	2101      	movs	r1, #1
    e6b4:	f7ff ff81 	bl	e5ba <rpmsg_send_ns_message>
    e6b8:	e7f7      	b.n	e6aa <rpmsg_destroy_ept+0x1c>
    e6ba:	4770      	bx	lr

0000e6bc <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
    e6bc:	f851 3c08 	ldr.w	r3, [r1, #-8]
    e6c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e6c4:	f841 3c08 	str.w	r3, [r1, #-8]
}
    e6c8:	4770      	bx	lr

0000e6ca <rpmsg_virtio_tx_callback>:
}
    e6ca:	4770      	bx	lr

0000e6cc <__metal_mutex_acquire>:
{
    e6cc:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
    e6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6d6:	f7fb f965 	bl	99a4 <z_impl_k_sem_take>
}
    e6da:	bd08      	pop	{r3, pc}

0000e6dc <rpmsg_virtio_return_buffer>:
	return rvdev->vdev->role;
    e6dc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    e6e0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
    e6e2:	b103      	cbz	r3, e6e6 <rpmsg_virtio_return_buffer+0xa>
    e6e4:	4770      	bx	lr
{
    e6e6:	b500      	push	{lr}
    e6e8:	b085      	sub	sp, #20
		vqbuf.buf = buffer;
    e6ea:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
    e6ec:	9203      	str	r2, [sp, #12]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
    e6ee:	9100      	str	r1, [sp, #0]
    e6f0:	2301      	movs	r3, #1
    e6f2:	2200      	movs	r2, #0
    e6f4:	a902      	add	r1, sp, #8
    e6f6:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    e6fa:	f7ff fe78 	bl	e3ee <virtqueue_add_buffer>
}
    e6fe:	b005      	add	sp, #20
    e700:	f85d fb04 	ldr.w	pc, [sp], #4

0000e704 <rpmsg_virtio_enqueue_buffer>:
    e704:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    e708:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
    e70a:	b10b      	cbz	r3, e710 <rpmsg_virtio_enqueue_buffer+0xc>
	return 0;
    e70c:	2000      	movs	r0, #0
}
    e70e:	4770      	bx	lr
{
    e710:	b500      	push	{lr}
    e712:	b085      	sub	sp, #20
		vqbuf.buf = buffer;
    e714:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
    e716:	9203      	str	r2, [sp, #12]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
    e718:	9100      	str	r1, [sp, #0]
    e71a:	2201      	movs	r2, #1
    e71c:	a902      	add	r1, sp, #8
    e71e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    e722:	f7ff fe64 	bl	e3ee <virtqueue_add_buffer>
}
    e726:	b005      	add	sp, #20
    e728:	f85d fb04 	ldr.w	pc, [sp], #4

0000e72c <rpmsg_virtio_ns_callback>:
{
    e72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e730:	b088      	sub	sp, #32
	struct rpmsg_device *rdev = ept->rdev;
    e732:	6a05      	ldr	r5, [r0, #32]
	struct metal_io_region *io = rvdev->shbuf_io;
    e734:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
	if (len != sizeof(*ns_msg))
    e738:	2a28      	cmp	r2, #40	; 0x28
    e73a:	d132      	bne.n	e7a2 <rpmsg_virtio_ns_callback+0x76>
    e73c:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    e73e:	6801      	ldr	r1, [r0, #0]
    e740:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e742:	6883      	ldr	r3, [r0, #8]
    e744:	4299      	cmp	r1, r3
    e746:	d223      	bcs.n	e790 <rpmsg_virtio_ns_callback+0x64>
	metal_io_block_read(io,
    e748:	2320      	movs	r3, #32
    e74a:	466a      	mov	r2, sp
    e74c:	f7ff fc78 	bl	e040 <metal_io_block_read>
	dest = ns_msg->addr;
    e750:	f8d4 8020 	ldr.w	r8, [r4, #32]
	metal_mutex_acquire(&rdev->lock);
    e754:	f105 0758 	add.w	r7, r5, #88	; 0x58
    e758:	4638      	mov	r0, r7
    e75a:	f7ff ffb7 	bl	e6cc <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
    e75e:	4643      	mov	r3, r8
    e760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e764:	4669      	mov	r1, sp
    e766:	4628      	mov	r0, r5
    e768:	f7ff ff62 	bl	e630 <rpmsg_get_endpoint>
    e76c:	4606      	mov	r6, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
    e76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e770:	f013 0f01 	tst.w	r3, #1
    e774:	d00f      	beq.n	e796 <rpmsg_virtio_ns_callback+0x6a>
		if (_ept)
    e776:	b110      	cbz	r0, e77e <rpmsg_virtio_ns_callback+0x52>
			_ept->dest_addr = RPMSG_ADDR_ANY;
    e778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e77c:	6283      	str	r3, [r0, #40]	; 0x28
	z_impl_k_sem_give(sem);
    e77e:	4638      	mov	r0, r7
    e780:	f7fb f8ec 	bl	995c <z_impl_k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
    e784:	b16e      	cbz	r6, e7a2 <rpmsg_virtio_ns_callback+0x76>
    e786:	6b33      	ldr	r3, [r6, #48]	; 0x30
    e788:	b15b      	cbz	r3, e7a2 <rpmsg_virtio_ns_callback+0x76>
			_ept->ns_unbind_cb(_ept);
    e78a:	4630      	mov	r0, r6
    e78c:	4798      	blx	r3
    e78e:	e008      	b.n	e7a2 <rpmsg_virtio_ns_callback+0x76>
    e790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e794:	e7d8      	b.n	e748 <rpmsg_virtio_ns_callback+0x1c>
		if (!_ept) {
    e796:	b140      	cbz	r0, e7aa <rpmsg_virtio_ns_callback+0x7e>
			_ept->dest_addr = dest;
    e798:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
    e79c:	4638      	mov	r0, r7
    e79e:	f7fb f8dd 	bl	995c <z_impl_k_sem_give>
}
    e7a2:	2000      	movs	r0, #0
    e7a4:	b008      	add	sp, #32
    e7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7aa:	4638      	mov	r0, r7
    e7ac:	f7fb f8d6 	bl	995c <z_impl_k_sem_give>
			if (rdev->ns_bind_cb)
    e7b0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d0f5      	beq.n	e7a2 <rpmsg_virtio_ns_callback+0x76>
				rdev->ns_bind_cb(rdev, name, dest);
    e7b6:	4642      	mov	r2, r8
    e7b8:	4669      	mov	r1, sp
    e7ba:	4628      	mov	r0, r5
    e7bc:	4798      	blx	r3
    e7be:	e7f0      	b.n	e7a2 <rpmsg_virtio_ns_callback+0x76>

0000e7c0 <rpmsg_virtio_get_rx_buffer>:
{
    e7c0:	b508      	push	{r3, lr}
    e7c2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    e7c6:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
    e7c8:	b923      	cbnz	r3, e7d4 <rpmsg_virtio_get_rx_buffer+0x14>
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
    e7ca:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    e7ce:	f7ff fe30 	bl	e432 <virtqueue_get_buffer>
}
    e7d2:	bd08      	pop	{r3, pc}
	void *data = NULL;
    e7d4:	2000      	movs	r0, #0
	return data;
    e7d6:	e7fc      	b.n	e7d2 <rpmsg_virtio_get_rx_buffer+0x12>

0000e7d8 <rpmsg_virtio_rx_callback>:
{
    e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7dc:	b084      	sub	sp, #16
	struct virtio_device *vdev = vq->vq_dev;
    e7de:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
    e7e0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
    e7e2:	f107 0658 	add.w	r6, r7, #88	; 0x58
    e7e6:	4630      	mov	r0, r6
    e7e8:	f7ff ff70 	bl	e6cc <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    e7ec:	f10d 020a 	add.w	r2, sp, #10
    e7f0:	a903      	add	r1, sp, #12
    e7f2:	4638      	mov	r0, r7
    e7f4:	f7ff ffe4 	bl	e7c0 <rpmsg_virtio_get_rx_buffer>
    e7f8:	4604      	mov	r4, r0
    e7fa:	4630      	mov	r0, r6
    e7fc:	f7fb f8ae 	bl	995c <z_impl_k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
    e800:	e01a      	b.n	e838 <rpmsg_virtio_rx_callback+0x60>
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    e802:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
    e806:	89a2      	ldrh	r2, [r4, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
    e808:	4621      	mov	r1, r4
    e80a:	f851 3b10 	ldr.w	r3, [r1], #16
    e80e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    e810:	9000      	str	r0, [sp, #0]
    e812:	4628      	mov	r0, r5
    e814:	47c0      	blx	r8
	__metal_mutex_acquire(mutex);
    e816:	4630      	mov	r0, r6
    e818:	f7ff ff58 	bl	e6cc <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
    e81c:	68a3      	ldr	r3, [r4, #8]
    e81e:	2b00      	cmp	r3, #0
    e820:	da25      	bge.n	e86e <rpmsg_virtio_rx_callback+0x96>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
    e822:	f10d 020a 	add.w	r2, sp, #10
    e826:	a903      	add	r1, sp, #12
    e828:	4638      	mov	r0, r7
    e82a:	f7ff ffc9 	bl	e7c0 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
    e82e:	4604      	mov	r4, r0
    e830:	b328      	cbz	r0, e87e <rpmsg_virtio_rx_callback+0xa6>
    e832:	4630      	mov	r0, r6
    e834:	f7fb f892 	bl	995c <z_impl_k_sem_give>
	while (rp_hdr) {
    e838:	b334      	cbz	r4, e888 <rpmsg_virtio_rx_callback+0xb0>
		rp_hdr->reserved = idx;
    e83a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e83e:	60a3      	str	r3, [r4, #8]
    e840:	4630      	mov	r0, r6
    e842:	f7ff ff43 	bl	e6cc <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
    e846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e84a:	6862      	ldr	r2, [r4, #4]
    e84c:	2100      	movs	r1, #0
    e84e:	4638      	mov	r0, r7
    e850:	f7ff feee 	bl	e630 <rpmsg_get_endpoint>
    e854:	4605      	mov	r5, r0
    e856:	4630      	mov	r0, r6
    e858:	f7fb f880 	bl	995c <z_impl_k_sem_give>
		if (ept) {
    e85c:	2d00      	cmp	r5, #0
    e85e:	d0da      	beq.n	e816 <rpmsg_virtio_rx_callback+0x3e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
    e860:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e866:	d1cc      	bne.n	e802 <rpmsg_virtio_rx_callback+0x2a>
				ept->dest_addr = rp_hdr->src;
    e868:	6823      	ldr	r3, [r4, #0]
    e86a:	62ab      	str	r3, [r5, #40]	; 0x28
    e86c:	e7c9      	b.n	e802 <rpmsg_virtio_rx_callback+0x2a>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
    e86e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e872:	9a03      	ldr	r2, [sp, #12]
    e874:	4621      	mov	r1, r4
    e876:	4638      	mov	r0, r7
    e878:	f7ff ff30 	bl	e6dc <rpmsg_virtio_return_buffer>
    e87c:	e7d1      	b.n	e822 <rpmsg_virtio_rx_callback+0x4a>
			virtqueue_kick(rvdev->rvq);
    e87e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    e882:	f7ff fe1e 	bl	e4c2 <virtqueue_kick>
    e886:	e7d4      	b.n	e832 <rpmsg_virtio_rx_callback+0x5a>
}
    e888:	b004      	add	sp, #16
    e88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e88e <rpmsg_virtio_send_offchannel_nocopy>:
{
    e88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e892:	b084      	sub	sp, #16
    e894:	4604      	mov	r4, r0
    e896:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
    e898:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
    e89c:	f853 5c08 	ldr.w	r5, [r3, #-8]
    e8a0:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
    e8a2:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
    e8a4:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
    e8a6:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
    e8aa:	2300      	movs	r3, #0
    e8ac:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
    e8ae:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
    e8b2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
    e8b6:	6801      	ldr	r1, [r0, #0]
    e8b8:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
    e8ba:	6883      	ldr	r3, [r0, #8]
    e8bc:	4299      	cmp	r1, r3
    e8be:	d21e      	bcs.n	e8fe <rpmsg_virtio_send_offchannel_nocopy+0x70>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
    e8c0:	2310      	movs	r3, #16
    e8c2:	466a      	mov	r2, sp
    e8c4:	f7ff fbfe 	bl	e0c4 <metal_io_block_write>
	metal_mutex_acquire(&rdev->lock);
    e8c8:	f104 0858 	add.w	r8, r4, #88	; 0x58
    e8cc:	4640      	mov	r0, r8
    e8ce:	f7ff fefd 	bl	e6cc <__metal_mutex_acquire>
    e8d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e8d6:	699b      	ldr	r3, [r3, #24]
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
    e8d8:	b9a3      	cbnz	r3, e904 <rpmsg_virtio_send_offchannel_nocopy+0x76>
		buff_len = rvdev->config.h2r_buf_size;
    e8da:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
    e8de:	462b      	mov	r3, r5
    e8e0:	4639      	mov	r1, r7
    e8e2:	4620      	mov	r0, r4
    e8e4:	f7ff ff0e 	bl	e704 <rpmsg_virtio_enqueue_buffer>
	virtqueue_kick(rvdev->svq);
    e8e8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e8ec:	f7ff fde9 	bl	e4c2 <virtqueue_kick>
    e8f0:	4640      	mov	r0, r8
    e8f2:	f7fb f833 	bl	995c <z_impl_k_sem_give>
}
    e8f6:	4630      	mov	r0, r6
    e8f8:	b004      	add	sp, #16
    e8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e902:	e7dd      	b.n	e8c0 <rpmsg_virtio_send_offchannel_nocopy+0x32>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
    e904:	4629      	mov	r1, r5
    e906:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e90a:	f7ff fdbb 	bl	e484 <virtqueue_get_buffer_length>
    e90e:	4602      	mov	r2, r0
    e910:	e7e5      	b.n	e8de <rpmsg_virtio_send_offchannel_nocopy+0x50>

0000e912 <rpmsg_virtio_release_rx_buffer>:
{
    e912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e914:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
    e916:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
    e91a:	f851 5c08 	ldr.w	r5, [r1, #-8]
    e91e:	b2ad      	uxth	r5, r5
	metal_mutex_acquire(&rdev->lock);
    e920:	f100 0658 	add.w	r6, r0, #88	; 0x58
    e924:	4630      	mov	r0, r6
    e926:	f7ff fed1 	bl	e6cc <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
    e92a:	4629      	mov	r1, r5
    e92c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e930:	f7ff fda8 	bl	e484 <virtqueue_get_buffer_length>
    e934:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
    e936:	462b      	mov	r3, r5
    e938:	4639      	mov	r1, r7
    e93a:	4620      	mov	r0, r4
    e93c:	f7ff fece 	bl	e6dc <rpmsg_virtio_return_buffer>
    e940:	4630      	mov	r0, r6
    e942:	f7fb f80b 	bl	995c <z_impl_k_sem_give>
}
    e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e948 <rpmsg_virtio_shm_pool_get_buffer>:
{
    e948:	4603      	mov	r3, r0
	if (shpool->avail < size)
    e94a:	6842      	ldr	r2, [r0, #4]
    e94c:	428a      	cmp	r2, r1
    e94e:	d308      	bcc.n	e962 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
    e950:	6800      	ldr	r0, [r0, #0]
    e952:	f8d3 c008 	ldr.w	ip, [r3, #8]
    e956:	ebac 0c02 	sub.w	ip, ip, r2
    e95a:	4460      	add	r0, ip
	shpool->avail -= size;
    e95c:	1a52      	subs	r2, r2, r1
    e95e:	605a      	str	r2, [r3, #4]
	return buffer;
    e960:	4770      	bx	lr
		return NULL;
    e962:	2000      	movs	r0, #0
}
    e964:	4770      	bx	lr

0000e966 <rpmsg_virtio_get_tx_buffer>:
    e966:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    e96a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
    e96c:	b9d3      	cbnz	r3, e9a4 <rpmsg_virtio_get_tx_buffer+0x3e>
{
    e96e:	b570      	push	{r4, r5, r6, lr}
    e970:	4604      	mov	r4, r0
    e972:	460e      	mov	r6, r1
    e974:	4615      	mov	r5, r2
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
    e976:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    e97a:	f7ff fd5a 	bl	e432 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
    e97e:	b100      	cbz	r0, e982 <rpmsg_virtio_get_tx_buffer+0x1c>
}
    e980:	bd70      	pop	{r4, r5, r6, pc}
		if (!data && rvdev->svq->vq_free_cnt) {
    e982:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    e986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    e988:	2b00      	cmp	r3, #0
    e98a:	d0f9      	beq.n	e980 <rpmsg_virtio_get_tx_buffer+0x1a>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
    e98c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    e990:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e994:	f7ff ffd8 	bl	e948 <rpmsg_virtio_shm_pool_get_buffer>
			*len = rvdev->config.h2r_buf_size;
    e998:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    e99c:	6033      	str	r3, [r6, #0]
			*idx = 0;
    e99e:	2300      	movs	r3, #0
    e9a0:	802b      	strh	r3, [r5, #0]
    e9a2:	e7ed      	b.n	e980 <rpmsg_virtio_get_tx_buffer+0x1a>
	void *data = NULL;
    e9a4:	2000      	movs	r0, #0
}
    e9a6:	4770      	bx	lr

0000e9a8 <rpmsg_virtio_get_tx_payload_buffer>:
{
    e9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9ac:	b082      	sub	sp, #8
    e9ae:	4607      	mov	r7, r0
    e9b0:	4688      	mov	r8, r1
    e9b2:	4615      	mov	r5, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
    e9b4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
    e9b8:	6a03      	ldr	r3, [r0, #32]
    e9ba:	681b      	ldr	r3, [r3, #0]
    e9bc:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
    e9be:	f010 0f04 	tst.w	r0, #4
    e9c2:	d027      	beq.n	ea14 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
	if (wait)
    e9c4:	b10d      	cbz	r5, e9ca <rpmsg_virtio_get_tx_payload_buffer+0x22>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
    e9c6:	f643 2598 	movw	r5, #15000	; 0x3a98
		metal_mutex_acquire(&rdev->lock);
    e9ca:	f107 0658 	add.w	r6, r7, #88	; 0x58
    e9ce:	4630      	mov	r0, r6
    e9d0:	f7ff fe7c 	bl	e6cc <__metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
    e9d4:	f10d 0206 	add.w	r2, sp, #6
    e9d8:	4641      	mov	r1, r8
    e9da:	4638      	mov	r0, r7
    e9dc:	f7ff ffc3 	bl	e966 <rpmsg_virtio_get_tx_buffer>
    e9e0:	4604      	mov	r4, r0
    e9e2:	4630      	mov	r0, r6
    e9e4:	f7fa ffba 	bl	995c <z_impl_k_sem_give>
		if (rp_hdr || !tick_count)
    e9e8:	b934      	cbnz	r4, e9f8 <rpmsg_virtio_get_tx_payload_buffer+0x50>
    e9ea:	b12d      	cbz	r5, e9f8 <rpmsg_virtio_get_tx_payload_buffer+0x50>
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
	return __metal_sleep_usec(usec);
    e9ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e9f0:	f7fa f8e6 	bl	8bc0 <__metal_sleep_usec>
		tick_count--;
    e9f4:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
    e9f6:	e7e8      	b.n	e9ca <rpmsg_virtio_get_tx_payload_buffer+0x22>
	if (!rp_hdr)
    e9f8:	b144      	cbz	r4, ea0c <rpmsg_virtio_get_tx_payload_buffer+0x64>
	rp_hdr->reserved = idx;
    e9fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e9fe:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
    ea00:	f8d8 3000 	ldr.w	r3, [r8]
    ea04:	3b10      	subs	r3, #16
    ea06:	f8c8 3000 	str.w	r3, [r8]
	return RPMSG_LOCATE_DATA(rp_hdr);
    ea0a:	3410      	adds	r4, #16
}
    ea0c:	4620      	mov	r0, r4
    ea0e:	b002      	add	sp, #8
    ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
    ea14:	2400      	movs	r4, #0
    ea16:	e7f9      	b.n	ea0c <rpmsg_virtio_get_tx_payload_buffer+0x64>

0000ea18 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
    ea18:	b110      	cbz	r0, ea20 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->base = shb;
    ea1a:	6001      	str	r1, [r0, #0]
	shpool->size = size;
    ea1c:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
    ea1e:	6042      	str	r2, [r0, #4]
}
    ea20:	4770      	bx	lr

0000ea22 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    ea22:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    ea24:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    ea26:	4293      	cmp	r3, r2
    ea28:	d804      	bhi.n	ea34 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    ea2a:	6881      	ldr	r1, [r0, #8]
    ea2c:	1a8a      	subs	r2, r1, r2
    ea2e:	4413      	add	r3, r2
    ea30:	1e58      	subs	r0, r3, #1
    ea32:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    ea34:	1a98      	subs	r0, r3, r2
    ea36:	3801      	subs	r0, #1
}
    ea38:	4770      	bx	lr

0000ea3a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    ea3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea3e:	4604      	mov	r4, r0
    ea40:	4688      	mov	r8, r1
    ea42:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    ea44:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    ea46:	6887      	ldr	r7, [r0, #8]
    ea48:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    ea4c:	4591      	cmp	r9, r2
    ea4e:	d907      	bls.n	ea60 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ea50:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    ea52:	4428      	add	r0, r5
    ea54:	f7fe f837 	bl	cac6 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    ea58:	4435      	add	r5, r6
    ea5a:	60e5      	str	r5, [r4, #12]
}
    ea5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    ea60:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    ea62:	464a      	mov	r2, r9
    ea64:	4428      	add	r0, r5
    ea66:	f7fe f82e 	bl	cac6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    ea6a:	1bed      	subs	r5, r5, r7
    ea6c:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    ea6e:	462a      	mov	r2, r5
    ea70:	eb08 0109 	add.w	r1, r8, r9
    ea74:	6860      	ldr	r0, [r4, #4]
    ea76:	f7fe f826 	bl	cac6 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    ea7a:	60e5      	str	r5, [r4, #12]
}
    ea7c:	e7ee      	b.n	ea5c <_WriteNoCheck+0x22>

0000ea7e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    ea7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea82:	4606      	mov	r6, r0
    ea84:	4688      	mov	r8, r1
    ea86:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    ea88:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    ea8a:	f04f 0900 	mov.w	r9, #0
    ea8e:	e018      	b.n	eac2 <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
    ea90:	1b5b      	subs	r3, r3, r5
    ea92:	1e5a      	subs	r2, r3, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    ea94:	68b3      	ldr	r3, [r6, #8]
    ea96:	1b5c      	subs	r4, r3, r5
    ea98:	4294      	cmp	r4, r2
    ea9a:	bf28      	it	cs
    ea9c:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    ea9e:	42bc      	cmp	r4, r7
    eaa0:	bf28      	it	cs
    eaa2:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    eaa4:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    eaa6:	4622      	mov	r2, r4
    eaa8:	4641      	mov	r1, r8
    eaaa:	4428      	add	r0, r5
    eaac:	f7fe f80b 	bl	cac6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    eab0:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    eab2:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    eab4:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    eab6:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    eab8:	68b3      	ldr	r3, [r6, #8]
    eaba:	42ab      	cmp	r3, r5
    eabc:	d009      	beq.n	ead2 <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
    eabe:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    eac0:	b14f      	cbz	r7, ead6 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    eac2:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
    eac4:	429d      	cmp	r5, r3
    eac6:	d3e3      	bcc.n	ea90 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    eac8:	68b2      	ldr	r2, [r6, #8]
    eaca:	1b5b      	subs	r3, r3, r5
    eacc:	441a      	add	r2, r3
    eace:	3a01      	subs	r2, #1
    ead0:	e7e0      	b.n	ea94 <_WriteBlocking+0x16>
      WrOff = 0u;
    ead2:	2500      	movs	r5, #0
    ead4:	e7f3      	b.n	eabe <_WriteBlocking+0x40>
}
    ead6:	4648      	mov	r0, r9
    ead8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000eadc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    eadc:	b508      	push	{r3, lr}
  _DoInit();
    eade:	f7fa f9c9 	bl	8e74 <_DoInit>
}
    eae2:	bd08      	pop	{r3, pc}

0000eae4 <rtt_init>:
{
    eae4:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
    eae6:	f7ff fff9 	bl	eadc <SEGGER_RTT_Init>
}
    eaea:	2000      	movs	r0, #0
    eaec:	bd08      	pop	{r3, pc}

0000eaee <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    eaee:	b148      	cbz	r0, eb04 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    eaf0:	68c3      	ldr	r3, [r0, #12]
    eaf2:	8818      	ldrh	r0, [r3, #0]
    eaf4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    eaf8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    eafc:	bf14      	ite	ne
    eafe:	2000      	movne	r0, #0
    eb00:	2001      	moveq	r0, #1
    eb02:	4770      	bx	lr
		return false;
    eb04:	2000      	movs	r0, #0
}
    eb06:	4770      	bx	lr

0000eb08 <z_early_memset>:
{
    eb08:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    eb0a:	f7fe f80b 	bl	cb24 <memset>
}
    eb0e:	bd08      	pop	{r3, pc}

0000eb10 <z_early_memcpy>:
{
    eb10:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    eb12:	f7fd ffd8 	bl	cac6 <memcpy>
}
    eb16:	bd08      	pop	{r3, pc}

0000eb18 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    eb18:	68c2      	ldr	r2, [r0, #12]
    eb1a:	6903      	ldr	r3, [r0, #16]
    eb1c:	431a      	orrs	r2, r3
    eb1e:	f012 0203 	ands.w	r2, r2, #3
    eb22:	d10d      	bne.n	eb40 <create_free_list+0x28>
	slab->free_list = NULL;
    eb24:	2100      	movs	r1, #0
    eb26:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    eb28:	e005      	b.n	eb36 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    eb2a:	6941      	ldr	r1, [r0, #20]
    eb2c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    eb2e:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    eb30:	68c1      	ldr	r1, [r0, #12]
    eb32:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    eb34:	3201      	adds	r2, #1
    eb36:	6881      	ldr	r1, [r0, #8]
    eb38:	4291      	cmp	r1, r2
    eb3a:	d8f6      	bhi.n	eb2a <create_free_list+0x12>
	return 0;
    eb3c:	2000      	movs	r0, #0
    eb3e:	4770      	bx	lr
		return -EINVAL;
    eb40:	f06f 0015 	mvn.w	r0, #21
}
    eb44:	4770      	bx	lr

0000eb46 <k_mem_slab_init>:
{
    eb46:	b510      	push	{r4, lr}
    eb48:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    eb4a:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    eb4c:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    eb4e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    eb50:	2300      	movs	r3, #0
    eb52:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    eb54:	f7ff ffe0 	bl	eb18 <create_free_list>
	if (rc < 0) {
    eb58:	2800      	cmp	r0, #0
    eb5a:	db01      	blt.n	eb60 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    eb5c:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    eb5e:	6064      	str	r4, [r4, #4]
}
    eb60:	bd10      	pop	{r4, pc}

0000eb62 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    eb62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb66:	4604      	mov	r4, r0
    eb68:	460d      	mov	r5, r1
	__asm__ volatile(
    eb6a:	f04f 0320 	mov.w	r3, #32
    eb6e:	f3ef 8611 	mrs	r6, BASEPRI
    eb72:	f383 8812 	msr	BASEPRI_MAX, r3
    eb76:	f3bf 8f6f 	isb	sy
    eb7a:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    eb7c:	6943      	ldr	r3, [r0, #20]
    eb7e:	b16b      	cbz	r3, eb9c <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    eb80:	682b      	ldr	r3, [r5, #0]
    eb82:	6962      	ldr	r2, [r4, #20]
    eb84:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    eb86:	682b      	ldr	r3, [r5, #0]
    eb88:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    eb8a:	69a3      	ldr	r3, [r4, #24]
    eb8c:	3b01      	subs	r3, #1
    eb8e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    eb90:	f387 8811 	msr	BASEPRI, r7
    eb94:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    eb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb9c:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    eba0:	f000 fa31 	bl	f006 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    eba4:	2800      	cmp	r0, #0
    eba6:	d0eb      	beq.n	eb80 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    eba8:	682a      	ldr	r2, [r5, #0]
    ebaa:	2100      	movs	r1, #0
    ebac:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    ebb0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    ebb2:	f000 f95d 	bl	ee70 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    ebb6:	4631      	mov	r1, r6
    ebb8:	4640      	mov	r0, r8
    ebba:	f7fb f8bb 	bl	9d34 <z_reschedule>
			return;
    ebbe:	e7eb      	b.n	eb98 <k_mem_slab_free+0x36>

0000ebc0 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ebc0:	3207      	adds	r2, #7
    ebc2:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    ebc6:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    ebca:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    ebce:	2300      	movs	r3, #0
    ebd0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    ebd4:	1888      	adds	r0, r1, r2
    ebd6:	4770      	bx	lr

0000ebd8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ebd8:	f3ef 8005 	mrs	r0, IPSR
}
    ebdc:	3800      	subs	r0, #0
    ebde:	bf18      	it	ne
    ebe0:	2001      	movne	r0, #1
    ebe2:	4770      	bx	lr

0000ebe4 <k_thread_name_get>:
}
    ebe4:	3074      	adds	r0, #116	; 0x74
    ebe6:	4770      	bx	lr

0000ebe8 <z_impl_k_thread_start>:
{
    ebe8:	b508      	push	{r3, lr}
	z_sched_start(thread);
    ebea:	f7fb f9cd 	bl	9f88 <z_sched_start>
}
    ebee:	bd08      	pop	{r3, pc}

0000ebf0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    ebf0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    ebf2:	2400      	movs	r4, #0
    ebf4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    ebf6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    ebf8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    ebfa:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    ebfc:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    ebfe:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    ec00:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    ec02:	bc10      	pop	{r4}
    ec04:	4770      	bx	lr

0000ec06 <z_impl_k_thread_create>:
{
    ec06:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec08:	b087      	sub	sp, #28
    ec0a:	4604      	mov	r4, r0
    ec0c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ec0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ec10:	2700      	movs	r7, #0
    ec12:	9705      	str	r7, [sp, #20]
    ec14:	9f10      	ldr	r7, [sp, #64]	; 0x40
    ec16:	9704      	str	r7, [sp, #16]
    ec18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    ec1a:	9703      	str	r7, [sp, #12]
    ec1c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ec1e:	9702      	str	r7, [sp, #8]
    ec20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    ec22:	9701      	str	r7, [sp, #4]
    ec24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    ec26:	9700      	str	r7, [sp, #0]
    ec28:	f7fa fd10 	bl	964c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    ec2c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    ec30:	bf08      	it	eq
    ec32:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    ec36:	d102      	bne.n	ec3e <z_impl_k_thread_create+0x38>
}
    ec38:	4620      	mov	r0, r4
    ec3a:	b007      	add	sp, #28
    ec3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    ec3e:	4632      	mov	r2, r6
    ec40:	462b      	mov	r3, r5
    ec42:	4620      	mov	r0, r4
    ec44:	f7fa fcf4 	bl	9630 <schedule_new_thread>
    ec48:	e7f6      	b.n	ec38 <z_impl_k_thread_create+0x32>

0000ec4a <z_pm_save_idle_exit>:
{
    ec4a:	b508      	push	{r3, lr}
	pm_system_resume();
    ec4c:	f7f4 f852 	bl	2cf4 <pm_system_resume>
	sys_clock_idle_exit();
    ec50:	f7fe fd9f 	bl	d792 <sys_clock_idle_exit>
}
    ec54:	bd08      	pop	{r3, pc}

0000ec56 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    ec56:	4288      	cmp	r0, r1
    ec58:	da00      	bge.n	ec5c <new_prio_for_inheritance+0x6>
    ec5a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ec5c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    ec60:	db01      	blt.n	ec66 <new_prio_for_inheritance+0x10>
    ec62:	4608      	mov	r0, r1
    ec64:	4770      	bx	lr
    ec66:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    ec6a:	4770      	bx	lr

0000ec6c <adjust_owner_prio>:
{
    ec6c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    ec6e:	6880      	ldr	r0, [r0, #8]
    ec70:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ec74:	428b      	cmp	r3, r1
    ec76:	d101      	bne.n	ec7c <adjust_owner_prio+0x10>
	return false;
    ec78:	2000      	movs	r0, #0
}
    ec7a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    ec7c:	f7fb f9d2 	bl	a024 <z_set_prio>
    ec80:	e7fb      	b.n	ec7a <adjust_owner_prio+0xe>

0000ec82 <z_impl_k_mutex_init>:
{
    ec82:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ec84:	2000      	movs	r0, #0
    ec86:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    ec88:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    ec8a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    ec8c:	605b      	str	r3, [r3, #4]
}
    ec8e:	4770      	bx	lr

0000ec90 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    ec90:	b13a      	cbz	r2, eca2 <z_impl_k_sem_init+0x12>
    ec92:	428a      	cmp	r2, r1
    ec94:	d308      	bcc.n	eca8 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    ec96:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    ec98:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    ec9a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    ec9c:	6040      	str	r0, [r0, #4]
	return 0;
    ec9e:	2000      	movs	r0, #0
    eca0:	4770      	bx	lr
		return -EINVAL;
    eca2:	f06f 0015 	mvn.w	r0, #21
    eca6:	4770      	bx	lr
    eca8:	f06f 0015 	mvn.w	r0, #21
}
    ecac:	4770      	bx	lr

0000ecae <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    ecae:	460b      	mov	r3, r1
    ecb0:	b139      	cbz	r1, ecc2 <sys_slist_remove+0x14>
	return node->next;
    ecb2:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    ecb4:	6019      	str	r1, [r3, #0]
	return list->tail;
    ecb6:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    ecb8:	428a      	cmp	r2, r1
    ecba:	d009      	beq.n	ecd0 <sys_slist_remove+0x22>
	parent->next = child;
    ecbc:	2300      	movs	r3, #0
    ecbe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ecc0:	4770      	bx	lr
	return node->next;
    ecc2:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    ecc4:	6003      	str	r3, [r0, #0]
	return list->tail;
    ecc6:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    ecc8:	428a      	cmp	r2, r1
    ecca:	d1f7      	bne.n	ecbc <sys_slist_remove+0xe>
	list->tail = node;
    eccc:	6043      	str	r3, [r0, #4]
}
    ecce:	e7f5      	b.n	ecbc <sys_slist_remove+0xe>
	list->tail = node;
    ecd0:	6043      	str	r3, [r0, #4]
}
    ecd2:	e7f3      	b.n	ecbc <sys_slist_remove+0xe>

0000ecd4 <notify_queue_locked>:
	if (queue != NULL) {
    ecd4:	b130      	cbz	r0, ece4 <notify_queue_locked+0x10>
{
    ecd6:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ecd8:	2200      	movs	r2, #0
    ecda:	4611      	mov	r1, r2
    ecdc:	30b8      	adds	r0, #184	; 0xb8
    ecde:	f000 f9b8 	bl	f052 <z_sched_wake>
}
    ece2:	bd08      	pop	{r3, pc}
	bool rv = false;
    ece4:	2000      	movs	r0, #0
}
    ece6:	4770      	bx	lr

0000ece8 <submit_to_queue_locked>:
{
    ece8:	b570      	push	{r4, r5, r6, lr}
    ecea:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    ecec:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ecee:	f013 0f02 	tst.w	r3, #2
    ecf2:	d122      	bne.n	ed3a <submit_to_queue_locked+0x52>
    ecf4:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ecf6:	f013 0f04 	tst.w	r3, #4
    ecfa:	d123      	bne.n	ed44 <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
    ecfc:	680b      	ldr	r3, [r1, #0]
    ecfe:	b1ab      	cbz	r3, ed2c <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
    ed00:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    ed02:	f013 0f01 	tst.w	r3, #1
    ed06:	d014      	beq.n	ed32 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
    ed08:	68a3      	ldr	r3, [r4, #8]
    ed0a:	602b      	str	r3, [r5, #0]
			ret = 2;
    ed0c:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    ed0e:	4621      	mov	r1, r4
    ed10:	6828      	ldr	r0, [r5, #0]
    ed12:	f7fa fe6f 	bl	99f4 <queue_submit_locked>
		if (rc < 0) {
    ed16:	2800      	cmp	r0, #0
    ed18:	db11      	blt.n	ed3e <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
    ed1a:	68e3      	ldr	r3, [r4, #12]
    ed1c:	f043 0304 	orr.w	r3, r3, #4
    ed20:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    ed22:	682b      	ldr	r3, [r5, #0]
    ed24:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
    ed26:	b136      	cbz	r6, ed36 <submit_to_queue_locked+0x4e>
    ed28:	4630      	mov	r0, r6
	return ret;
    ed2a:	e00a      	b.n	ed42 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
    ed2c:	6883      	ldr	r3, [r0, #8]
    ed2e:	600b      	str	r3, [r1, #0]
    ed30:	e7e6      	b.n	ed00 <submit_to_queue_locked+0x18>
		ret = 1;
    ed32:	2601      	movs	r6, #1
    ed34:	e7eb      	b.n	ed0e <submit_to_queue_locked+0x26>
    ed36:	4630      	mov	r0, r6
    ed38:	e001      	b.n	ed3e <submit_to_queue_locked+0x56>
		ret = -EBUSY;
    ed3a:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    ed3e:	2300      	movs	r3, #0
    ed40:	602b      	str	r3, [r5, #0]
}
    ed42:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    ed44:	2000      	movs	r0, #0
    ed46:	e7fa      	b.n	ed3e <submit_to_queue_locked+0x56>

0000ed48 <z_reschedule_unlocked>:
{
    ed48:	b508      	push	{r3, lr}
	__asm__ volatile(
    ed4a:	f04f 0320 	mov.w	r3, #32
    ed4e:	f3ef 8011 	mrs	r0, BASEPRI
    ed52:	f383 8812 	msr	BASEPRI_MAX, r3
    ed56:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ed5a:	f000 f852 	bl	ee02 <z_reschedule_irqlock>
}
    ed5e:	bd08      	pop	{r3, pc}

0000ed60 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ed60:	2300      	movs	r3, #0
    ed62:	6003      	str	r3, [r0, #0]
    ed64:	6043      	str	r3, [r0, #4]
    ed66:	6083      	str	r3, [r0, #8]
    ed68:	60c3      	str	r3, [r0, #12]
    ed6a:	6041      	str	r1, [r0, #4]
}
    ed6c:	4770      	bx	lr

0000ed6e <z_work_submit_to_queue>:
{
    ed6e:	b510      	push	{r4, lr}
    ed70:	b082      	sub	sp, #8
    ed72:	9001      	str	r0, [sp, #4]
    ed74:	4608      	mov	r0, r1
    ed76:	f04f 0320 	mov.w	r3, #32
    ed7a:	f3ef 8411 	mrs	r4, BASEPRI
    ed7e:	f383 8812 	msr	BASEPRI_MAX, r3
    ed82:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ed86:	a901      	add	r1, sp, #4
    ed88:	f7ff ffae 	bl	ece8 <submit_to_queue_locked>
	__asm__ volatile(
    ed8c:	f384 8811 	msr	BASEPRI, r4
    ed90:	f3bf 8f6f 	isb	sy
}
    ed94:	b002      	add	sp, #8
    ed96:	bd10      	pop	{r4, pc}

0000ed98 <k_work_submit_to_queue>:
{
    ed98:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    ed9a:	f7ff ffe8 	bl	ed6e <z_work_submit_to_queue>
	if (ret > 0) {
    ed9e:	1e04      	subs	r4, r0, #0
    eda0:	dc01      	bgt.n	eda6 <k_work_submit_to_queue+0xe>
}
    eda2:	4620      	mov	r0, r4
    eda4:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
    eda6:	f7ff ffcf 	bl	ed48 <z_reschedule_unlocked>
	return ret;
    edaa:	e7fa      	b.n	eda2 <k_work_submit_to_queue+0xa>

0000edac <k_work_queue_init>:
{
    edac:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
    edae:	22d0      	movs	r2, #208	; 0xd0
    edb0:	2100      	movs	r1, #0
    edb2:	f7fd feb7 	bl	cb24 <memset>
}
    edb6:	bd08      	pop	{r3, pc}

0000edb8 <thread_active_elsewhere>:
}
    edb8:	2000      	movs	r0, #0
    edba:	4770      	bx	lr

0000edbc <pended_on_thread>:
}
    edbc:	6880      	ldr	r0, [r0, #8]
    edbe:	4770      	bx	lr

0000edc0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    edc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    edc4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    edc8:	4283      	cmp	r3, r0
    edca:	d001      	beq.n	edd0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    edcc:	1ac0      	subs	r0, r0, r3
    edce:	4770      	bx	lr
	return 0;
    edd0:	2000      	movs	r0, #0
}
    edd2:	4770      	bx	lr

0000edd4 <z_unpend_thread_no_timeout>:
{
    edd4:	b538      	push	{r3, r4, r5, lr}
    edd6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    edd8:	2300      	movs	r3, #0
	__asm__ volatile(
    edda:	f04f 0220 	mov.w	r2, #32
    edde:	f3ef 8411 	mrs	r4, BASEPRI
    ede2:	f382 8812 	msr	BASEPRI_MAX, r2
    ede6:	f3bf 8f6f 	isb	sy
    edea:	e007      	b.n	edfc <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
    edec:	4628      	mov	r0, r5
    edee:	f000 f82a 	bl	ee46 <unpend_thread_no_timeout>
	__asm__ volatile(
    edf2:	f384 8811 	msr	BASEPRI, r4
    edf6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    edfa:	2301      	movs	r3, #1
    edfc:	2b00      	cmp	r3, #0
    edfe:	d0f5      	beq.n	edec <z_unpend_thread_no_timeout+0x18>
}
    ee00:	bd38      	pop	{r3, r4, r5, pc}

0000ee02 <z_reschedule_irqlock>:
{
    ee02:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ee04:	4603      	mov	r3, r0
    ee06:	b928      	cbnz	r0, ee14 <z_reschedule_irqlock+0x12>
    ee08:	f3ef 8205 	mrs	r2, IPSR
    ee0c:	b912      	cbnz	r2, ee14 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    ee0e:	f7f4 faf7 	bl	3400 <arch_swap>
	return ret;
    ee12:	e003      	b.n	ee1c <z_reschedule_irqlock+0x1a>
    ee14:	f383 8811 	msr	BASEPRI, r3
    ee18:	f3bf 8f6f 	isb	sy
}
    ee1c:	bd08      	pop	{r3, pc}

0000ee1e <z_reschedule_unlocked>:
{
    ee1e:	b508      	push	{r3, lr}
	__asm__ volatile(
    ee20:	f04f 0320 	mov.w	r3, #32
    ee24:	f3ef 8011 	mrs	r0, BASEPRI
    ee28:	f383 8812 	msr	BASEPRI_MAX, r3
    ee2c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ee30:	f7ff ffe7 	bl	ee02 <z_reschedule_irqlock>
}
    ee34:	bd08      	pop	{r3, pc}

0000ee36 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    ee36:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    ee38:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    ee3a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ee3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ee3e:	2300      	movs	r3, #0
    ee40:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    ee42:	604b      	str	r3, [r1, #4]
}
    ee44:	4770      	bx	lr

0000ee46 <unpend_thread_no_timeout>:
{
    ee46:	b510      	push	{r4, lr}
    ee48:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ee4a:	f7ff ffb7 	bl	edbc <pended_on_thread>
    ee4e:	4621      	mov	r1, r4
    ee50:	f7ff fff1 	bl	ee36 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ee54:	7b63      	ldrb	r3, [r4, #13]
    ee56:	f023 0302 	bic.w	r3, r3, #2
    ee5a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ee5c:	2300      	movs	r3, #0
    ee5e:	60a3      	str	r3, [r4, #8]
}
    ee60:	bd10      	pop	{r4, pc}

0000ee62 <z_priq_dumb_best>:
{
    ee62:	4603      	mov	r3, r0
	return list->head == list;
    ee64:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee66:	4283      	cmp	r3, r0
    ee68:	d000      	beq.n	ee6c <z_priq_dumb_best+0xa>
}
    ee6a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    ee6c:	2000      	movs	r0, #0
	return thread;
    ee6e:	e7fc      	b.n	ee6a <z_priq_dumb_best+0x8>

0000ee70 <z_ready_thread>:
{
    ee70:	b538      	push	{r3, r4, r5, lr}
    ee72:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    ee74:	2300      	movs	r3, #0
    ee76:	f04f 0220 	mov.w	r2, #32
    ee7a:	f3ef 8511 	mrs	r5, BASEPRI
    ee7e:	f382 8812 	msr	BASEPRI_MAX, r2
    ee82:	f3bf 8f6f 	isb	sy
    ee86:	e004      	b.n	ee92 <z_ready_thread+0x22>
	__asm__ volatile(
    ee88:	f385 8811 	msr	BASEPRI, r5
    ee8c:	f3bf 8f6f 	isb	sy
    ee90:	2301      	movs	r3, #1
    ee92:	b943      	cbnz	r3, eea6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    ee94:	4620      	mov	r0, r4
    ee96:	f7ff ff8f 	bl	edb8 <thread_active_elsewhere>
    ee9a:	2800      	cmp	r0, #0
    ee9c:	d1f4      	bne.n	ee88 <z_ready_thread+0x18>
			ready_thread(thread);
    ee9e:	4620      	mov	r0, r4
    eea0:	f7fb f836 	bl	9f10 <ready_thread>
    eea4:	e7f0      	b.n	ee88 <z_ready_thread+0x18>
}
    eea6:	bd38      	pop	{r3, r4, r5, pc}

0000eea8 <z_thread_timeout>:
{
    eea8:	b570      	push	{r4, r5, r6, lr}
    eeaa:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    eeac:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    eeb0:	2300      	movs	r3, #0
	__asm__ volatile(
    eeb2:	f04f 0220 	mov.w	r2, #32
    eeb6:	f3ef 8511 	mrs	r5, BASEPRI
    eeba:	f382 8812 	msr	BASEPRI_MAX, r2
    eebe:	f3bf 8f6f 	isb	sy
    eec2:	e011      	b.n	eee8 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    eec4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    eec8:	f023 0204 	bic.w	r2, r3, #4
    eecc:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    eed0:	f023 0314 	bic.w	r3, r3, #20
    eed4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    eed8:	4630      	mov	r0, r6
    eeda:	f7fb f819 	bl	9f10 <ready_thread>
	__asm__ volatile(
    eede:	f385 8811 	msr	BASEPRI, r5
    eee2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    eee6:	2301      	movs	r3, #1
    eee8:	b963      	cbnz	r3, ef04 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    eeea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    eeee:	f013 0f28 	tst.w	r3, #40	; 0x28
    eef2:	d1f4      	bne.n	eede <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    eef4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    eef8:	2b00      	cmp	r3, #0
    eefa:	d0e3      	beq.n	eec4 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    eefc:	4630      	mov	r0, r6
    eefe:	f7ff ffa2 	bl	ee46 <unpend_thread_no_timeout>
    ef02:	e7df      	b.n	eec4 <z_thread_timeout+0x1c>
}
    ef04:	bd70      	pop	{r4, r5, r6, pc}

0000ef06 <unpend_all>:
{
    ef06:	b538      	push	{r3, r4, r5, lr}
    ef08:	4605      	mov	r5, r0
	return list->head == list;
    ef0a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef0c:	42a5      	cmp	r5, r4
    ef0e:	d00e      	beq.n	ef2e <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    ef10:	b16c      	cbz	r4, ef2e <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    ef12:	4620      	mov	r0, r4
    ef14:	f7ff ff97 	bl	ee46 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    ef18:	f104 0018 	add.w	r0, r4, #24
    ef1c:	f000 f8de 	bl	f0dc <z_abort_timeout>
    ef20:	2300      	movs	r3, #0
    ef22:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    ef26:	4620      	mov	r0, r4
    ef28:	f7fa fff2 	bl	9f10 <ready_thread>
    ef2c:	e7ed      	b.n	ef0a <unpend_all+0x4>
}
    ef2e:	bd38      	pop	{r3, r4, r5, pc}

0000ef30 <add_to_waitq_locked>:
{
    ef30:	b570      	push	{r4, r5, r6, lr}
    ef32:	4605      	mov	r5, r0
    ef34:	460e      	mov	r6, r1
	unready_thread(thread);
    ef36:	f7fb f845 	bl	9fc4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    ef3a:	7b6b      	ldrb	r3, [r5, #13]
    ef3c:	f043 0302 	orr.w	r3, r3, #2
    ef40:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    ef42:	b1fe      	cbz	r6, ef84 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    ef44:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    ef46:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef48:	42a6      	cmp	r6, r4
    ef4a:	d108      	bne.n	ef5e <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ef4c:	2400      	movs	r4, #0
    ef4e:	e006      	b.n	ef5e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    ef50:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ef52:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ef54:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ef56:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ef58:	6065      	str	r5, [r4, #4]
}
    ef5a:	e013      	b.n	ef84 <add_to_waitq_locked+0x54>
    ef5c:	2400      	movs	r4, #0
    ef5e:	b164      	cbz	r4, ef7a <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ef60:	4621      	mov	r1, r4
    ef62:	4628      	mov	r0, r5
    ef64:	f7ff ff2c 	bl	edc0 <z_sched_prio_cmp>
    ef68:	2800      	cmp	r0, #0
    ef6a:	dcf1      	bgt.n	ef50 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ef6c:	2c00      	cmp	r4, #0
    ef6e:	d0f6      	beq.n	ef5e <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    ef70:	6873      	ldr	r3, [r6, #4]
    ef72:	429c      	cmp	r4, r3
    ef74:	d0f2      	beq.n	ef5c <add_to_waitq_locked+0x2c>
    ef76:	6824      	ldr	r4, [r4, #0]
    ef78:	e7f1      	b.n	ef5e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    ef7a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    ef7c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    ef7e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    ef80:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ef82:	6075      	str	r5, [r6, #4]
}
    ef84:	bd70      	pop	{r4, r5, r6, pc}

0000ef86 <pend>:
{
    ef86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef8a:	4605      	mov	r5, r0
    ef8c:	460f      	mov	r7, r1
    ef8e:	4691      	mov	r9, r2
    ef90:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    ef92:	2400      	movs	r4, #0
	__asm__ volatile(
    ef94:	f04f 0320 	mov.w	r3, #32
    ef98:	f3ef 8611 	mrs	r6, BASEPRI
    ef9c:	f383 8812 	msr	BASEPRI_MAX, r3
    efa0:	f3bf 8f6f 	isb	sy
    efa4:	e008      	b.n	efb8 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    efa6:	4639      	mov	r1, r7
    efa8:	4628      	mov	r0, r5
    efaa:	f7ff ffc1 	bl	ef30 <add_to_waitq_locked>
	__asm__ volatile(
    efae:	f386 8811 	msr	BASEPRI, r6
    efb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    efb6:	2401      	movs	r4, #1
    efb8:	2c00      	cmp	r4, #0
    efba:	d0f4      	beq.n	efa6 <pend+0x20>
	add_thread_timeout(thread, timeout);
    efbc:	464a      	mov	r2, r9
    efbe:	4643      	mov	r3, r8
    efc0:	4628      	mov	r0, r5
    efc2:	f7fa fe59 	bl	9c78 <add_thread_timeout>
}
    efc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000efca <z_unpend1_no_timeout>:
{
    efca:	b570      	push	{r4, r5, r6, lr}
    efcc:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    efce:	2300      	movs	r3, #0
	__asm__ volatile(
    efd0:	f04f 0220 	mov.w	r2, #32
    efd4:	f3ef 8511 	mrs	r5, BASEPRI
    efd8:	f382 8812 	msr	BASEPRI_MAX, r2
    efdc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    efe0:	461c      	mov	r4, r3
    efe2:	e004      	b.n	efee <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    efe4:	f385 8811 	msr	BASEPRI, r5
    efe8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    efec:	2301      	movs	r3, #1
    efee:	b943      	cbnz	r3, f002 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    eff0:	4630      	mov	r0, r6
    eff2:	f7ff ff36 	bl	ee62 <z_priq_dumb_best>
		if (thread != NULL) {
    eff6:	4604      	mov	r4, r0
    eff8:	2800      	cmp	r0, #0
    effa:	d0f3      	beq.n	efe4 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    effc:	f7ff ff23 	bl	ee46 <unpend_thread_no_timeout>
    f000:	e7f0      	b.n	efe4 <z_unpend1_no_timeout+0x1a>
}
    f002:	4620      	mov	r0, r4
    f004:	bd70      	pop	{r4, r5, r6, pc}

0000f006 <z_unpend_first_thread>:
{
    f006:	b570      	push	{r4, r5, r6, lr}
    f008:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    f00a:	2300      	movs	r3, #0
	__asm__ volatile(
    f00c:	f04f 0220 	mov.w	r2, #32
    f010:	f3ef 8511 	mrs	r5, BASEPRI
    f014:	f382 8812 	msr	BASEPRI_MAX, r2
    f018:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    f01c:	461c      	mov	r4, r3
    f01e:	e004      	b.n	f02a <z_unpend_first_thread+0x24>
	__asm__ volatile(
    f020:	f385 8811 	msr	BASEPRI, r5
    f024:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f028:	2301      	movs	r3, #1
    f02a:	b963      	cbnz	r3, f046 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    f02c:	4630      	mov	r0, r6
    f02e:	f7ff ff18 	bl	ee62 <z_priq_dumb_best>
		if (thread != NULL) {
    f032:	4604      	mov	r4, r0
    f034:	2800      	cmp	r0, #0
    f036:	d0f3      	beq.n	f020 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    f038:	f7ff ff05 	bl	ee46 <unpend_thread_no_timeout>
    f03c:	f104 0018 	add.w	r0, r4, #24
    f040:	f000 f84c 	bl	f0dc <z_abort_timeout>
    f044:	e7ec      	b.n	f020 <z_unpend_first_thread+0x1a>
}
    f046:	4620      	mov	r0, r4
    f048:	bd70      	pop	{r4, r5, r6, pc}

0000f04a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    f04a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    f04c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    f04e:	6083      	str	r3, [r0, #8]
}
    f050:	4770      	bx	lr

0000f052 <z_sched_wake>:
{
    f052:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f056:	4606      	mov	r6, r0
    f058:	4688      	mov	r8, r1
    f05a:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    f05c:	2300      	movs	r3, #0
	__asm__ volatile(
    f05e:	f04f 0220 	mov.w	r2, #32
    f062:	f3ef 8511 	mrs	r5, BASEPRI
    f066:	f382 8812 	msr	BASEPRI_MAX, r2
    f06a:	f3bf 8f6f 	isb	sy
	bool ret = false;
    f06e:	4699      	mov	r9, r3
    f070:	e004      	b.n	f07c <z_sched_wake+0x2a>
	__asm__ volatile(
    f072:	f385 8811 	msr	BASEPRI, r5
    f076:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f07a:	2301      	movs	r3, #1
    f07c:	b9a3      	cbnz	r3, f0a8 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
    f07e:	4630      	mov	r0, r6
    f080:	f7ff feef 	bl	ee62 <z_priq_dumb_best>
		if (thread != NULL) {
    f084:	4604      	mov	r4, r0
    f086:	2800      	cmp	r0, #0
    f088:	d0f3      	beq.n	f072 <z_sched_wake+0x20>
    f08a:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
    f08e:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
    f090:	f7ff fed9 	bl	ee46 <unpend_thread_no_timeout>
    f094:	f104 0018 	add.w	r0, r4, #24
    f098:	f000 f820 	bl	f0dc <z_abort_timeout>
			ready_thread(thread);
    f09c:	4620      	mov	r0, r4
    f09e:	f7fa ff37 	bl	9f10 <ready_thread>
			ret = true;
    f0a2:	f04f 0901 	mov.w	r9, #1
    f0a6:	e7e4      	b.n	f072 <z_sched_wake+0x20>
}
    f0a8:	4648      	mov	r0, r9
    f0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f0ae <remove_timeout>:
{
    f0ae:	b510      	push	{r4, lr}
    f0b0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    f0b2:	f7fb f9df 	bl	a474 <next>
    f0b6:	b148      	cbz	r0, f0cc <remove_timeout+0x1e>
    f0b8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    f0ba:	6903      	ldr	r3, [r0, #16]
    f0bc:	6941      	ldr	r1, [r0, #20]
    f0be:	6920      	ldr	r0, [r4, #16]
    f0c0:	181b      	adds	r3, r3, r0
    f0c2:	6960      	ldr	r0, [r4, #20]
    f0c4:	eb41 0100 	adc.w	r1, r1, r0
    f0c8:	6113      	str	r3, [r2, #16]
    f0ca:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    f0cc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    f0ce:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    f0d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f0d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f0d4:	2300      	movs	r3, #0
    f0d6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    f0d8:	6063      	str	r3, [r4, #4]
}
    f0da:	bd10      	pop	{r4, pc}

0000f0dc <z_abort_timeout>:
{
    f0dc:	b570      	push	{r4, r5, r6, lr}
    f0de:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    f0e0:	2300      	movs	r3, #0
	__asm__ volatile(
    f0e2:	f04f 0220 	mov.w	r2, #32
    f0e6:	f3ef 8611 	mrs	r6, BASEPRI
    f0ea:	f382 8812 	msr	BASEPRI_MAX, r2
    f0ee:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    f0f2:	f06f 0015 	mvn.w	r0, #21
    f0f6:	e004      	b.n	f102 <z_abort_timeout+0x26>
	__asm__ volatile(
    f0f8:	f386 8811 	msr	BASEPRI, r6
    f0fc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f100:	2301      	movs	r3, #1
    f102:	461d      	mov	r5, r3
    f104:	b93b      	cbnz	r3, f116 <z_abort_timeout+0x3a>
	return node->next != NULL;
    f106:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    f108:	2b00      	cmp	r3, #0
    f10a:	d0f5      	beq.n	f0f8 <z_abort_timeout+0x1c>
			remove_timeout(to);
    f10c:	4620      	mov	r0, r4
    f10e:	f7ff ffce 	bl	f0ae <remove_timeout>
			ret = 0;
    f112:	4628      	mov	r0, r5
    f114:	e7f0      	b.n	f0f8 <z_abort_timeout+0x1c>
}
    f116:	bd70      	pop	{r4, r5, r6, pc}

0000f118 <z_get_next_timeout_expiry>:
{
    f118:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    f11a:	2300      	movs	r3, #0
	__asm__ volatile(
    f11c:	f04f 0220 	mov.w	r2, #32
    f120:	f3ef 8411 	mrs	r4, BASEPRI
    f124:	f382 8812 	msr	BASEPRI_MAX, r2
    f128:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    f12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f130:	e006      	b.n	f140 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    f132:	f7fb f9b7 	bl	a4a4 <next_timeout>
	__asm__ volatile(
    f136:	f384 8811 	msr	BASEPRI, r4
    f13a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f13e:	2301      	movs	r3, #1
    f140:	2b00      	cmp	r3, #0
    f142:	d0f6      	beq.n	f132 <z_get_next_timeout_expiry+0x1a>
}
    f144:	bd10      	pop	{r4, pc}

0000f146 <z_set_timeout_expiry>:
{
    f146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f148:	4606      	mov	r6, r0
    f14a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    f14c:	2300      	movs	r3, #0
	__asm__ volatile(
    f14e:	f04f 0220 	mov.w	r2, #32
    f152:	f3ef 8511 	mrs	r5, BASEPRI
    f156:	f382 8812 	msr	BASEPRI_MAX, r2
    f15a:	f3bf 8f6f 	isb	sy
    f15e:	e00a      	b.n	f176 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    f160:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    f162:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    f166:	2801      	cmp	r0, #1
    f168:	dd00      	ble.n	f16c <z_set_timeout_expiry+0x26>
    f16a:	b97c      	cbnz	r4, f18c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    f16c:	f385 8811 	msr	BASEPRI, r5
    f170:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f174:	2301      	movs	r3, #1
    f176:	461c      	mov	r4, r3
    f178:	b97b      	cbnz	r3, f19a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    f17a:	f7fb f993 	bl	a4a4 <next_timeout>
			      || (ticks <= next_to);
    f17e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f182:	d0ed      	beq.n	f160 <z_set_timeout_expiry+0x1a>
    f184:	42b0      	cmp	r0, r6
    f186:	dbec      	blt.n	f162 <z_set_timeout_expiry+0x1c>
    f188:	2401      	movs	r4, #1
    f18a:	e7ea      	b.n	f162 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    f18c:	4639      	mov	r1, r7
    f18e:	42b0      	cmp	r0, r6
    f190:	bfa8      	it	ge
    f192:	4630      	movge	r0, r6
    f194:	f7f7 fa50 	bl	6638 <sys_clock_set_timeout>
    f198:	e7e8      	b.n	f16c <z_set_timeout_expiry+0x26>
}
    f19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f19c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f19c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f19e:	f7fb fa93 	bl	a6c8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f1a2:	bd08      	pop	{r3, pc}

0000f1a4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    f1a4:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    f1a6:	f7fb fa8f 	bl	a6c8 <sys_clock_tick_get>
}
    f1aa:	bd08      	pop	{r3, pc}

0000f1ac <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f1ac:	b900      	cbnz	r0, f1b0 <z_impl_k_busy_wait+0x4>
    f1ae:	4770      	bx	lr
{
    f1b0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f1b2:	f7fc fefc 	bl	bfae <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f1b6:	bd08      	pop	{r3, pc}

0000f1b8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    f1b8:	b538      	push	{r3, r4, r5, lr}
    f1ba:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f1bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f1c0:	bf08      	it	eq
    f1c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    f1c6:	d020      	beq.n	f20a <sys_clock_timeout_end_calc+0x52>
    f1c8:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f1ca:	ea51 0300 	orrs.w	r3, r1, r0
    f1ce:	d009      	beq.n	f1e4 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    f1d0:	f06f 0301 	mvn.w	r3, #1
    f1d4:	1a18      	subs	r0, r3, r0
    f1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f1da:	eb63 0101 	sbc.w	r1, r3, r1
    f1de:	2900      	cmp	r1, #0
    f1e0:	db03      	blt.n	f1ea <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    f1e2:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    f1e4:	f7fb fa70 	bl	a6c8 <sys_clock_tick_get>
    f1e8:	e7fb      	b.n	f1e2 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
    f1ea:	f7fb fa6d 	bl	a6c8 <sys_clock_tick_get>
    f1ee:	4603      	mov	r3, r0
    f1f0:	462a      	mov	r2, r5
    f1f2:	46a4      	mov	ip, r4
    f1f4:	2d01      	cmp	r5, #1
    f1f6:	f174 0400 	sbcs.w	r4, r4, #0
    f1fa:	da02      	bge.n	f202 <sys_clock_timeout_end_calc+0x4a>
    f1fc:	2201      	movs	r2, #1
    f1fe:	f04f 0c00 	mov.w	ip, #0
    f202:	1898      	adds	r0, r3, r2
    f204:	eb41 010c 	adc.w	r1, r1, ip
    f208:	e7eb      	b.n	f1e2 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
    f20a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f20e:	4601      	mov	r1, r0
    f210:	e7e7      	b.n	f1e2 <sys_clock_timeout_end_calc+0x2a>

0000f212 <z_reschedule_unlocked>:
{
    f212:	b508      	push	{r3, lr}
	__asm__ volatile(
    f214:	f04f 0320 	mov.w	r3, #32
    f218:	f3ef 8011 	mrs	r0, BASEPRI
    f21c:	f383 8812 	msr	BASEPRI_MAX, r3
    f220:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f224:	f7ff fded 	bl	ee02 <z_reschedule_irqlock>
}
    f228:	bd08      	pop	{r3, pc}

0000f22a <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    f22a:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    f22c:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    f22e:	2300      	movs	r3, #0
    f230:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    f232:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    f236:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    f238:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    f23a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    f23c:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    f23e:	6343      	str	r3, [r0, #52]	; 0x34
}
    f240:	4770      	bx	lr

0000f242 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    f242:	b510      	push	{r4, lr}
    f244:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    f246:	f7ff ff49 	bl	f0dc <z_abort_timeout>

	if (inactive) {
    f24a:	b960      	cbnz	r0, f266 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    f24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f24e:	b10b      	cbz	r3, f254 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    f250:	4620      	mov	r0, r4
    f252:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    f254:	f104 0018 	add.w	r0, r4, #24
    f258:	f7ff feb7 	bl	efca <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    f25c:	b118      	cbz	r0, f266 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    f25e:	f7ff fe07 	bl	ee70 <z_ready_thread>
			z_reschedule_unlocked();
    f262:	f7ff ffd6 	bl	f212 <z_reschedule_unlocked>
		}
	}
}
    f266:	bd10      	pop	{r4, pc}

0000f268 <z_heap_aligned_alloc>:
{
    f268:	b5d0      	push	{r4, r6, r7, lr}
    f26a:	b082      	sub	sp, #8
    f26c:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    f26e:	2300      	movs	r3, #0
    f270:	3204      	adds	r2, #4
    f272:	d20e      	bcs.n	f292 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    f274:	b97b      	cbnz	r3, f296 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    f276:	2600      	movs	r6, #0
    f278:	2700      	movs	r7, #0
    f27a:	e9cd 6700 	strd	r6, r7, [sp]
    f27e:	f041 0104 	orr.w	r1, r1, #4
    f282:	4620      	mov	r0, r4
    f284:	f000 f817 	bl	f2b6 <k_heap_aligned_alloc>
	if (mem == NULL) {
    f288:	b108      	cbz	r0, f28e <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
    f28a:	f840 4b04 	str.w	r4, [r0], #4
}
    f28e:	b002      	add	sp, #8
    f290:	bdd0      	pop	{r4, r6, r7, pc}
    f292:	2301      	movs	r3, #1
    f294:	e7ee      	b.n	f274 <z_heap_aligned_alloc+0xc>
		return NULL;
    f296:	2000      	movs	r0, #0
    f298:	e7f9      	b.n	f28e <z_heap_aligned_alloc+0x26>

0000f29a <k_malloc>:
{
    f29a:	b508      	push	{r3, lr}
    f29c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    f29e:	2004      	movs	r0, #4
    f2a0:	f7fb faf8 	bl	a894 <k_aligned_alloc>
}
    f2a4:	bd08      	pop	{r3, pc}

0000f2a6 <k_heap_init>:
{
    f2a6:	b510      	push	{r4, lr}
    f2a8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    f2ac:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    f2ae:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    f2b0:	f7fc f953 	bl	b55a <sys_heap_init>
}
    f2b4:	bd10      	pop	{r4, pc}

0000f2b6 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f2b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ba:	b085      	sub	sp, #20
    f2bc:	4607      	mov	r7, r0
    f2be:	468a      	mov	sl, r1
    f2c0:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f2c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f2c6:	f7ff ff77 	bl	f1b8 <sys_clock_timeout_end_calc>
    f2ca:	4606      	mov	r6, r0
    f2cc:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f2ce:	f107 0b14 	add.w	fp, r7, #20
    f2d2:	f04f 0320 	mov.w	r3, #32
    f2d6:	f3ef 8511 	mrs	r5, BASEPRI
    f2da:	f383 8812 	msr	BASEPRI_MAX, r3
    f2de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    f2e2:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
    f2e6:	4644      	mov	r4, r8

	while (ret == NULL) {
    f2e8:	e00f      	b.n	f30a <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f2ea:	9000      	str	r0, [sp, #0]
    f2ec:	9101      	str	r1, [sp, #4]
    f2ee:	f107 020c 	add.w	r2, r7, #12
    f2f2:	4629      	mov	r1, r5
    f2f4:	4658      	mov	r0, fp
    f2f6:	f7fa fe81 	bl	9ffc <z_pend_curr>
    f2fa:	f04f 0320 	mov.w	r3, #32
    f2fe:	f3ef 8511 	mrs	r5, BASEPRI
    f302:	f383 8812 	msr	BASEPRI_MAX, r3
    f306:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    f30a:	b9ac      	cbnz	r4, f338 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f30c:	9a03      	ldr	r2, [sp, #12]
    f30e:	4651      	mov	r1, sl
    f310:	4638      	mov	r0, r7
    f312:	f7fc f893 	bl	b43c <sys_heap_aligned_alloc>
    f316:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    f318:	f7fb f9d6 	bl	a6c8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f31c:	b964      	cbnz	r4, f338 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
    f31e:	1a30      	subs	r0, r6, r0
    f320:	eb69 0101 	sbc.w	r1, r9, r1
    f324:	2801      	cmp	r0, #1
    f326:	f171 0300 	sbcs.w	r3, r1, #0
    f32a:	db05      	blt.n	f338 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
    f32c:	f1b8 0f00 	cmp.w	r8, #0
    f330:	d1db      	bne.n	f2ea <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
    f332:	f04f 0801 	mov.w	r8, #1
    f336:	e7d8      	b.n	f2ea <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
    f338:	f385 8811 	msr	BASEPRI, r5
    f33c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f340:	4620      	mov	r0, r4
    f342:	b005      	add	sp, #20
    f344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
